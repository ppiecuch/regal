
// This file was generated by "python regaltrace.py > regaltrace.cpp"
// You should edit regaltrace.py, not regaltrace.cpp directly.
// Cass Everitt - 2013

#include <stdlib.h>
#include <string.h>

#include "trace_writer_regal.hpp"
#define localWriter regalWriter

#include "glproc.hpp"
#include "glsize.hpp"

#include <RegalSystem.h>

// Workaround for GLX emulation no supported for apitrace, yet

#if REGAL_SYS_OSX || REGAL_SYS_ANDROID
# if REGAL_SYS_GLX
# undef REGAL_SYS_GLX
# define REGAL_SYS_GLX 0
# endif
#endif


#ifdef _WIN32
#  include <malloc.h> // alloca
#  ifndef alloca
#    define alloca _alloca
#  endif
#else
#  include <alloca.h> // alloca
#endif

#include "trace.hpp"

static std::map<void *, void *> g_WrappedObjects;
#include "gltrace.hpp"

enum vertex_attrib {
    VERTEX_ATTRIB,
    VERTEX_ATTRIB_ARB,
    VERTEX_ATTRIB_NV,
};

static vertex_attrib _get_vertex_attrib(void) {
    gltrace::Context *ctx = gltrace::getContext();
    if (ctx->user_arrays_arb || ctx->user_arrays_nv) {
        GLboolean _vertex_program = GL_FALSE;
        _glGetBooleanv(GL_VERTEX_PROGRAM_ARB, &_vertex_program);
        if (_vertex_program) {
            if (ctx->user_arrays_nv) {
                GLint _vertex_program_binding_nv = 0;
                _glGetIntegerv(GL_VERTEX_PROGRAM_BINDING_NV, &_vertex_program_binding_nv);
                if (_vertex_program_binding_nv) {
                    return VERTEX_ATTRIB_NV;
                }
            }
            return VERTEX_ATTRIB_ARB;
        }
    }
    return VERTEX_ATTRIB;
}

void _shadow_glGetBufferSubData(GLenum target, GLintptr offset,
                                GLsizeiptr size, GLvoid *data)
{
    gltrace::Context *ctx = gltrace::getContext();
    if (!ctx->needsShadowBuffers() || target != GL_ELEMENT_ARRAY_BUFFER) {
        _glGetBufferSubData(target, offset, size, data);
        return;
    }

    GLint buffer_binding = 0;
    _glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, &buffer_binding);
    if (buffer_binding > 0) {
        gltrace::Buffer & buf = ctx->buffers[buffer_binding];
        buf.getSubData(offset, size, data);
    }
}
static inline bool _need_user_arrays(void)
{
    gltrace::Context *ctx = gltrace::getContext();
    if (!ctx->user_arrays) {
        return false;
    }

    // glSecondaryColorPointer
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_SECONDARY_COLOR_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glFogCoordPointer
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_FOG_COORD_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_FOG_COORD_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glEdgeFlagPointer
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_EDGE_FLAG_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glTexCoordPointer
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    GLint client_active_texture = 0;
    _glGetIntegerv(GL_CLIENT_ACTIVE_TEXTURE, &client_active_texture);
    GLint max_texture_coords = 0;
    if (ctx->profile == gltrace::PROFILE_COMPAT)
        _glGetIntegerv(GL_MAX_TEXTURE_COORDS, &max_texture_coords);
    else
        _glGetIntegerv(GL_MAX_TEXTURE_UNITS, &max_texture_coords);
    for (GLint unit = 0; unit < max_texture_coords; ++unit) {
        GLint texture = GL_TEXTURE0 + unit;
        _glClientActiveTexture(texture);
    if (_glIsEnabled(GL_TEXTURE_COORD_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
    _glClientActiveTexture(client_active_texture);
            return true;
        }
    }
    }
    _glClientActiveTexture(client_active_texture);
  }

    // glIndexPointer
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_INDEX_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_INDEX_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glColorPointer
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_COLOR_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_COLOR_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glNormalPointer
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_NORMAL_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_NORMAL_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // glVertexPointer
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_VERTEX_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_VERTEX_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            return true;
        }
    }
  }

    // ES1 does not support generic vertex attributes
    if (ctx->profile == gltrace::PROFILE_ES1)
        return false;

    vertex_attrib _vertex_attrib = _get_vertex_attrib();

    // glVertexAttribPointer
    if (_vertex_attrib == VERTEX_ATTRIB) {
        GLint _max_vertex_attribs = 0;
        _glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &_max_vertex_attribs);
        for (GLint index = 0; index < _max_vertex_attribs; ++index) {
            GLint _enabled = 0;
            _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_enabled);
            if (_enabled) {
                GLint _binding = 0;
                _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, &_binding);
                if (!_binding) {
                    return true;
                }
            }
        }
    }

    // glVertexAttribPointerARB
    if (_vertex_attrib == VERTEX_ATTRIB_ARB) {
        GLint _max_vertex_attribs = 0;
        _glGetIntegerv(GL_MAX_VERTEX_ATTRIBS_ARB, &_max_vertex_attribs);
        for (GLint index = 0; index < _max_vertex_attribs; ++index) {
            GLint _enabled = 0;
            _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, &_enabled);
            if (_enabled) {
                GLint _binding = 0;
                _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB, &_binding);
                if (!_binding) {
                    return true;
                }
            }
        }
    }

    // glVertexAttribPointerNV
    if (_vertex_attrib == VERTEX_ATTRIB_NV) {
        for (GLint index = 0; index < 16; ++index) {
            GLint _enabled = 0;
            _glGetIntegerv(GL_VERTEX_ATTRIB_ARRAY0_NV + index, &_enabled);
            if (_enabled) {
                return true;
            }
        }
    }

    return false;
}

static void _trace_user_arrays(GLuint count);

// whether glMapBufferRange(GL_MAP_WRITE_BIT) has ever been called
static bool _checkBufferMapRange = false;

// whether glBufferParameteriAPPLE(GL_BUFFER_FLUSHING_UNMAP_APPLE, GL_FALSE) has ever been called
static bool _checkBufferFlushingUnmapAPPLE = false;

struct buffer_mapping {
    void *map;
    GLint length;
    bool write;
    bool explicit_flush;
};

struct buffer_mapping _array_buffer_mapping;
struct buffer_mapping _element_array_buffer_mapping;
struct buffer_mapping _pixel_pack_buffer_mapping;
struct buffer_mapping _pixel_unpack_buffer_mapping;
struct buffer_mapping _uniform_buffer_mapping;
struct buffer_mapping _texture_buffer_mapping;
struct buffer_mapping _transform_feedback_buffer_mapping;
struct buffer_mapping _copy_read_buffer_mapping;
struct buffer_mapping _copy_write_buffer_mapping;
struct buffer_mapping _draw_indirect_buffer_mapping;
struct buffer_mapping _atomic_counter_buffer_mapping;

static inline struct buffer_mapping *
get_buffer_mapping(GLenum target) {
    switch (target) {
    case GL_ARRAY_BUFFER:
        return & _array_buffer_mapping;
    case GL_ELEMENT_ARRAY_BUFFER:
        return & _element_array_buffer_mapping;
    case GL_PIXEL_PACK_BUFFER:
        return & _pixel_pack_buffer_mapping;
    case GL_PIXEL_UNPACK_BUFFER:
        return & _pixel_unpack_buffer_mapping;
    case GL_UNIFORM_BUFFER:
        return & _uniform_buffer_mapping;
    case GL_TEXTURE_BUFFER:
        return & _texture_buffer_mapping;
    case GL_TRANSFORM_FEEDBACK_BUFFER:
        return & _transform_feedback_buffer_mapping;
    case GL_COPY_READ_BUFFER:
        return & _copy_read_buffer_mapping;
    case GL_COPY_WRITE_BUFFER:
        return & _copy_write_buffer_mapping;
    case GL_DRAW_INDIRECT_BUFFER:
        return & _draw_indirect_buffer_mapping;
    case GL_ATOMIC_COUNTER_BUFFER:
        return & _atomic_counter_buffer_mapping;
    default:
        os::log("apitrace: warning: unknown buffer target 0x%04X\n", target);
        return NULL;
    }
}

static bool
is_symbolic_pname(GLenum pname) {
    switch (pname) {
    case GL_LIST_MODE:
    case GL_POLYGON_MODE:
    case GL_CULL_FACE_MODE:
    case GL_FRONT_FACE:
    case GL_SHADE_MODEL:
    case GL_COLOR_MATERIAL_FACE:
    case GL_COLOR_MATERIAL_PARAMETER:
    case GL_FOG_MODE:
    case GL_DEPTH_FUNC:
    case GL_STENCIL_FUNC:
    case GL_STENCIL_FAIL:
    case GL_STENCIL_PASS_DEPTH_FAIL:
    case GL_STENCIL_PASS_DEPTH_PASS:
    case GL_MATRIX_MODE:
    case GL_ALPHA_TEST_FUNC:
    case GL_BLEND_DST:
    case GL_BLEND_SRC:
    case GL_LOGIC_OP_MODE:
    case GL_DRAW_BUFFER:
    case GL_READ_BUFFER:
    case GL_RENDER_MODE:
    case GL_PERSPECTIVE_CORRECTION_HINT:
    case GL_POINT_SMOOTH_HINT:
    case GL_LINE_SMOOTH_HINT:
    case GL_POLYGON_SMOOTH_HINT:
    case GL_FOG_HINT:
    case GL_FEEDBACK_BUFFER_TYPE:
    case GL_TEXTURE_INTERNAL_FORMAT:
    case GL_TEXTURE_ENV_MODE:
    case GL_TEXTURE_GEN_MODE:
    case GL_TEXTURE_MAG_FILTER:
    case GL_TEXTURE_MIN_FILTER:
    case GL_TEXTURE_WRAP_S:
    case GL_TEXTURE_WRAP_T:
    case GL_BLEND_EQUATION:
    case GL_CONVOLUTION_BORDER_MODE:
    case GL_CONVOLUTION_FORMAT:
    case GL_HISTOGRAM_FORMAT:
    case GL_MINMAX_FORMAT:
    case GL_TEXTURE_WRAP_R:
    case GL_VERTEX_ARRAY_TYPE:
    case GL_NORMAL_ARRAY_TYPE:
    case GL_COLOR_ARRAY_TYPE:
    case GL_INDEX_ARRAY_TYPE:
    case GL_TEXTURE_COORD_ARRAY_TYPE:
    case GL_BLEND_DST_RGB:
    case GL_BLEND_SRC_RGB:
    case GL_BLEND_DST_ALPHA:
    case GL_BLEND_SRC_ALPHA:
    case GL_COLOR_TABLE_FORMAT:
    case GL_CLIP_VOLUME_CLIPPING_HINT_EXT:
    case GL_GENERATE_MIPMAP_HINT:
    case GL_TEXTURE_COMPARE_OPERATOR_SGIX:
    case GL_LIGHT_MODEL_COLOR_CONTROL:
    case GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:
    case GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:
    case GL_RESET_NOTIFICATION_STRATEGY_ARB:
    case GL_LAYER_PROVOKING_VERTEX:
    case GL_VIEWPORT_INDEX_PROVOKING_VERTEX:
    case GL_INTERNALFORMAT_PREFERRED:
    case GL_INTERNALFORMAT_RED_TYPE:
    case GL_INTERNALFORMAT_GREEN_TYPE:
    case GL_INTERNALFORMAT_BLUE_TYPE:
    case GL_INTERNALFORMAT_ALPHA_TYPE:
    case GL_INTERNALFORMAT_DEPTH_TYPE:
    case GL_INTERNALFORMAT_STENCIL_TYPE:
    case GL_FRAMEBUFFER_RENDERABLE:
    case GL_FRAMEBUFFER_RENDERABLE_LAYERED:
    case GL_FRAMEBUFFER_BLEND:
    case GL_READ_PIXELS:
    case GL_READ_PIXELS_FORMAT:
    case GL_READ_PIXELS_TYPE:
    case GL_TEXTURE_IMAGE_FORMAT:
    case GL_TEXTURE_IMAGE_TYPE:
    case GL_GET_TEXTURE_IMAGE_FORMAT:
    case GL_GET_TEXTURE_IMAGE_TYPE:
    case GL_MANUAL_GENERATE_MIPMAP:
    case GL_AUTO_GENERATE_MIPMAP:
    case GL_COLOR_ENCODING:
    case GL_SRGB_READ:
    case GL_SRGB_WRITE:
    case GL_SRGB_DECODE_ARB:
    case GL_FILTER:
    case GL_VERTEX_TEXTURE:
    case GL_TESS_CONTROL_TEXTURE:
    case GL_TESS_EVALUATION_TEXTURE:
    case GL_GEOMETRY_TEXTURE:
    case GL_FRAGMENT_TEXTURE:
    case GL_COMPUTE_TEXTURE:
    case GL_TEXTURE_SHADOW:
    case GL_TEXTURE_GATHER:
    case GL_TEXTURE_GATHER_SHADOW:
    case GL_SHADER_IMAGE_LOAD:
    case GL_SHADER_IMAGE_STORE:
    case GL_SHADER_IMAGE_ATOMIC:
    case GL_IMAGE_COMPATIBILITY_CLASS:
    case GL_IMAGE_PIXEL_FORMAT:
    case GL_IMAGE_PIXEL_TYPE:
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST:
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST:
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE:
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE:
    case GL_CLEAR_BUFFER:
    case GL_TEXTURE_VIEW:
    case GL_VIEW_COMPATIBILITY_CLASS:
    case GL_TANGENT_ARRAY_TYPE_EXT:
    case GL_BINORMAL_ARRAY_TYPE_EXT:
    case GL_FOG_COORD_SRC:
    case GL_FOG_COORD_ARRAY_TYPE:
    case GL_SECONDARY_COLOR_ARRAY_TYPE:
    case GL_ACTIVE_TEXTURE:
    case GL_CLIENT_ACTIVE_TEXTURE:
    case GL_TEXTURE_COMPRESSION_HINT:
    case GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT:
    case GL_MULTISAMPLE_FILTER_HINT_NV:
    case GL_FOG_DISTANCE_MODE_NV:
    case GL_COMBINE_RGB:
    case GL_COMBINE_ALPHA:
    case GL_SRC0_RGB:
    case GL_SRC1_RGB:
    case GL_SRC2_RGB:
    case GL_SOURCE3_RGB_NV:
    case GL_SRC0_ALPHA:
    case GL_SRC1_ALPHA:
    case GL_SRC2_ALPHA:
    case GL_SOURCE3_ALPHA_NV:
    case GL_OPERAND0_RGB:
    case GL_OPERAND1_RGB:
    case GL_OPERAND2_RGB:
    case GL_OPERAND3_RGB_NV:
    case GL_OPERAND0_ALPHA:
    case GL_OPERAND1_ALPHA:
    case GL_OPERAND2_ALPHA:
    case GL_OPERAND3_ALPHA_NV:
    case GL_TEXTURE_STORAGE_HINT_APPLE:
    case GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN:
    case GL_VERTEX_ATTRIB_ARRAY_TYPE:
    case GL_COMPRESSED_TEXTURE_FORMATS:
    case GL_WEIGHT_ARRAY_TYPE_ARB:
    case GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV:
    case GL_SHADER_OPERATION_NV:
    case GL_CULL_MODES_NV:
    case GL_PREVIOUS_TEXTURE_INPUT_NV:
    case GL_BUFFER_USAGE:
    case GL_ELEMENT_ARRAY_TYPE_ATI:
    case GL_BUMP_TARGET_ATI:
    case GL_VARIANT_ARRAY_TYPE_EXT:
    case GL_PROGRAM_BINARY_FORMATS:
    case GL_STENCIL_BACK_FUNC:
    case GL_STENCIL_BACK_FAIL:
    case GL_STENCIL_BACK_PASS_DEPTH_FAIL:
    case GL_STENCIL_BACK_PASS_DEPTH_PASS:
    case GL_DRAW_BUFFER0:
    case GL_DRAW_BUFFER1:
    case GL_DRAW_BUFFER2:
    case GL_DRAW_BUFFER3:
    case GL_DRAW_BUFFER4:
    case GL_DRAW_BUFFER5:
    case GL_DRAW_BUFFER6:
    case GL_DRAW_BUFFER7:
    case GL_DRAW_BUFFER8:
    case GL_DRAW_BUFFER9:
    case GL_DRAW_BUFFER10:
    case GL_DRAW_BUFFER11:
    case GL_DRAW_BUFFER12:
    case GL_DRAW_BUFFER13:
    case GL_DRAW_BUFFER14:
    case GL_DRAW_BUFFER15:
    case GL_BLEND_EQUATION_ALPHA:
    case GL_MATRIX_INDEX_ARRAY_TYPE_ARB:
    case GL_DEPTH_TEXTURE_MODE:
    case GL_TEXTURE_COMPARE_MODE:
    case GL_TEXTURE_COMPARE_FUNC:
    case GL_POINT_SPRITE_R_MODE_NV:
    case GL_PROGRAM_FORMAT_ARB:
    case GL_TEXTURE_UNSIGNED_REMAP_MODE_NV:
    case GL_BUFFER_ACCESS:
    case GL_ACTIVE_STENCIL_FACE_EXT:
    case GL_ELEMENT_ARRAY_TYPE_APPLE:
    case GL_UNIFORM_TYPE:
    case GL_TEXTURE_SRGB_DECODE_EXT:
    case GL_OBJECT_TYPE_ARB:
    case GL_SHADER_TYPE:
    case GL_IMPLEMENTATION_COLOR_READ_TYPE:
    case GL_IMPLEMENTATION_COLOR_READ_FORMAT:
    case GL_TEXTURE_RED_TYPE:
    case GL_TEXTURE_GREEN_TYPE:
    case GL_TEXTURE_BLUE_TYPE:
    case GL_TEXTURE_ALPHA_TYPE:
    case GL_TEXTURE_LUMINANCE_TYPE:
    case GL_TEXTURE_INTENSITY_TYPE:
    case GL_TEXTURE_DEPTH_TYPE:
    case GL_TEXTURE_BUFFER_FORMAT:
    case GL_POINT_SPRITE_COORD_ORIGIN:
    case GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:
    case GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:
    case GL_RENDERBUFFER_INTERNAL_FORMAT:
    case GL_GEOMETRY_INPUT_TYPE_ARB:
    case GL_GEOMETRY_OUTPUT_TYPE_ARB:
    case GL_NAMED_STRING_TYPE_ARB:
    case GL_TEXTURE_SWIZZLE_R:
    case GL_TEXTURE_SWIZZLE_G:
    case GL_TEXTURE_SWIZZLE_B:
    case GL_TEXTURE_SWIZZLE_A:
    case GL_TEXTURE_SWIZZLE_RGBA:
    case GL_PROVOKING_VERTEX:
    case GL_TESS_GEN_MODE:
    case GL_TESS_GEN_SPACING:
    case GL_TESS_GEN_VERTEX_ORDER:
    case GL_TESS_GEN_POINT_MODE:
    case GL_DEPTH_STENCIL_TEXTURE_MODE:
        return true;
    default:
        return false;
    }
}

template<class T>
static inline bool
is_symbolic_param(T param) {
    return static_cast<T>(static_cast<GLenum>(param)) == param;
}

static size_t
_gl_param_size(GLenum pname) {
    switch (pname) {
    case GL_CURRENT_COLOR: return 4;
    case GL_CURRENT_INDEX: return 1;
    case GL_CURRENT_NORMAL: return 3;
    case GL_CURRENT_TEXTURE_COORDS: return 4;
    case GL_CURRENT_RASTER_COLOR: return 4;
    case GL_CURRENT_RASTER_INDEX: return 1;
    case GL_CURRENT_RASTER_TEXTURE_COORDS: return 4;
    case GL_CURRENT_RASTER_POSITION: return 4;
    case GL_CURRENT_RASTER_POSITION_VALID: return 1;
    case GL_CURRENT_RASTER_DISTANCE: return 1;
    case GL_POINT_SMOOTH: return 1;
    case GL_POINT_SIZE: return 1;
    case GL_POINT_SIZE_RANGE: return 2;
    case GL_POINT_SIZE_GRANULARITY: return 1;
    case GL_LINE_SMOOTH: return 1;
    case GL_LINE_WIDTH: return 1;
    case GL_LINE_WIDTH_RANGE: return 2;
    case GL_LINE_WIDTH_GRANULARITY: return 1;
    case GL_LINE_STIPPLE: return 1;
    case GL_LINE_STIPPLE_PATTERN: return 1;
    case GL_LINE_STIPPLE_REPEAT: return 1;
    case GL_LIST_MODE: return 1;
    case GL_MAX_LIST_NESTING: return 1;
    case GL_LIST_BASE: return 1;
    case GL_LIST_INDEX: return 1;
    case GL_POLYGON_MODE: return 2;
    case GL_POLYGON_SMOOTH: return 1;
    case GL_POLYGON_STIPPLE: return 1;
    case GL_EDGE_FLAG: return 1;
    case GL_CULL_FACE: return 1;
    case GL_CULL_FACE_MODE: return 1;
    case GL_FRONT_FACE: return 1;
    case GL_LIGHTING: return 1;
    case GL_LIGHT_MODEL_LOCAL_VIEWER: return 1;
    case GL_LIGHT_MODEL_TWO_SIDE: return 1;
    case GL_LIGHT_MODEL_AMBIENT: return 4;
    case GL_SHADE_MODEL: return 1;
    case GL_COLOR_MATERIAL_FACE: return 1;
    case GL_COLOR_MATERIAL_PARAMETER: return 1;
    case GL_COLOR_MATERIAL: return 1;
    case GL_FOG: return 1;
    case GL_FOG_INDEX: return 1;
    case GL_FOG_DENSITY: return 1;
    case GL_FOG_START: return 1;
    case GL_FOG_END: return 1;
    case GL_FOG_MODE: return 1;
    case GL_FOG_COLOR: return 4;
    case GL_DEPTH_RANGE: return 2;
    case GL_DEPTH_TEST: return 1;
    case GL_DEPTH_WRITEMASK: return 1;
    case GL_DEPTH_CLEAR_VALUE: return 1;
    case GL_DEPTH_FUNC: return 1;
    case GL_ACCUM_CLEAR_VALUE: return 4;
    case GL_STENCIL_TEST: return 1;
    case GL_STENCIL_CLEAR_VALUE: return 1;
    case GL_STENCIL_FUNC: return 1;
    case GL_STENCIL_VALUE_MASK: return 1;
    case GL_STENCIL_FAIL: return 1;
    case GL_STENCIL_PASS_DEPTH_FAIL: return 1;
    case GL_STENCIL_PASS_DEPTH_PASS: return 1;
    case GL_STENCIL_REF: return 1;
    case GL_STENCIL_WRITEMASK: return 1;
    case GL_MATRIX_MODE: return 1;
    case GL_NORMALIZE: return 1;
    case GL_VIEWPORT: return 4;
    case GL_MODELVIEW_STACK_DEPTH: return 1;
    case GL_PROJECTION_STACK_DEPTH: return 1;
    case GL_TEXTURE_STACK_DEPTH: return 1;
    case GL_MODELVIEW_MATRIX: return 16;
    case GL_PROJECTION_MATRIX: return 16;
    case GL_TEXTURE_MATRIX: return 16;
    case GL_ATTRIB_STACK_DEPTH: return 1;
    case GL_CLIENT_ATTRIB_STACK_DEPTH: return 1;
    case GL_ALPHA_TEST: return 1;
    case GL_ALPHA_TEST_FUNC: return 1;
    case GL_ALPHA_TEST_REF: return 1;
    case GL_DITHER: return 1;
    case GL_BLEND_DST: return 1;
    case GL_BLEND_SRC: return 1;
    case GL_BLEND: return 1;
    case GL_LOGIC_OP_MODE: return 1;
    case GL_INDEX_LOGIC_OP: return 1;
    case GL_COLOR_LOGIC_OP: return 1;
    case GL_AUX_BUFFERS: return 1;
    case GL_DRAW_BUFFER: return 1;
    case GL_READ_BUFFER: return 1;
    case GL_SCISSOR_BOX: return 4;
    case GL_SCISSOR_TEST: return 1;
    case GL_INDEX_CLEAR_VALUE: return 1;
    case GL_INDEX_WRITEMASK: return 1;
    case GL_COLOR_CLEAR_VALUE: return 4;
    case GL_COLOR_WRITEMASK: return 4;
    case GL_INDEX_MODE: return 1;
    case GL_RGBA_MODE: return 1;
    case GL_DOUBLEBUFFER: return 1;
    case GL_STEREO: return 1;
    case GL_RENDER_MODE: return 1;
    case GL_PERSPECTIVE_CORRECTION_HINT: return 1;
    case GL_POINT_SMOOTH_HINT: return 1;
    case GL_LINE_SMOOTH_HINT: return 1;
    case GL_POLYGON_SMOOTH_HINT: return 1;
    case GL_FOG_HINT: return 1;
    case GL_TEXTURE_GEN_S: return 1;
    case GL_TEXTURE_GEN_T: return 1;
    case GL_TEXTURE_GEN_R: return 1;
    case GL_TEXTURE_GEN_Q: return 1;
    case GL_PIXEL_MAP_I_TO_I_SIZE: return 1;
    case GL_PIXEL_MAP_S_TO_S_SIZE: return 1;
    case GL_PIXEL_MAP_I_TO_R_SIZE: return 1;
    case GL_PIXEL_MAP_I_TO_G_SIZE: return 1;
    case GL_PIXEL_MAP_I_TO_B_SIZE: return 1;
    case GL_PIXEL_MAP_I_TO_A_SIZE: return 1;
    case GL_PIXEL_MAP_R_TO_R_SIZE: return 1;
    case GL_PIXEL_MAP_G_TO_G_SIZE: return 1;
    case GL_PIXEL_MAP_B_TO_B_SIZE: return 1;
    case GL_PIXEL_MAP_A_TO_A_SIZE: return 1;
    case GL_UNPACK_SWAP_BYTES: return 1;
    case GL_UNPACK_LSB_FIRST: return 1;
    case GL_UNPACK_ROW_LENGTH: return 1;
    case GL_UNPACK_SKIP_ROWS: return 1;
    case GL_UNPACK_SKIP_PIXELS: return 1;
    case GL_UNPACK_ALIGNMENT: return 1;
    case GL_PACK_SWAP_BYTES: return 1;
    case GL_PACK_LSB_FIRST: return 1;
    case GL_PACK_ROW_LENGTH: return 1;
    case GL_PACK_SKIP_ROWS: return 1;
    case GL_PACK_SKIP_PIXELS: return 1;
    case GL_PACK_ALIGNMENT: return 1;
    case GL_MAP_COLOR: return 1;
    case GL_MAP_STENCIL: return 1;
    case GL_INDEX_SHIFT: return 1;
    case GL_INDEX_OFFSET: return 1;
    case GL_RED_SCALE: return 1;
    case GL_RED_BIAS: return 1;
    case GL_ZOOM_X: return 1;
    case GL_ZOOM_Y: return 1;
    case GL_GREEN_SCALE: return 1;
    case GL_GREEN_BIAS: return 1;
    case GL_BLUE_SCALE: return 1;
    case GL_BLUE_BIAS: return 1;
    case GL_ALPHA_SCALE: return 1;
    case GL_ALPHA_BIAS: return 1;
    case GL_DEPTH_SCALE: return 1;
    case GL_DEPTH_BIAS: return 1;
    case GL_MAX_EVAL_ORDER: return 1;
    case GL_MAX_LIGHTS: return 1;
    case GL_MAX_CLIP_DISTANCES: return 1;
    case GL_MAX_TEXTURE_SIZE: return 1;
    case GL_MAX_PIXEL_MAP_TABLE: return 1;
    case GL_MAX_ATTRIB_STACK_DEPTH: return 1;
    case GL_MAX_MODELVIEW_STACK_DEPTH: return 1;
    case GL_MAX_NAME_STACK_DEPTH: return 1;
    case GL_MAX_PROJECTION_STACK_DEPTH: return 1;
    case GL_MAX_TEXTURE_STACK_DEPTH: return 1;
    case GL_MAX_VIEWPORT_DIMS: return 2;
    case GL_MAX_CLIENT_ATTRIB_STACK_DEPTH: return 1;
    case GL_SUBPIXEL_BITS: return 1;
    case GL_INDEX_BITS: return 1;
    case GL_RED_BITS: return 1;
    case GL_GREEN_BITS: return 1;
    case GL_BLUE_BITS: return 1;
    case GL_ALPHA_BITS: return 1;
    case GL_DEPTH_BITS: return 1;
    case GL_STENCIL_BITS: return 1;
    case GL_ACCUM_RED_BITS: return 1;
    case GL_ACCUM_GREEN_BITS: return 1;
    case GL_ACCUM_BLUE_BITS: return 1;
    case GL_ACCUM_ALPHA_BITS: return 1;
    case GL_NAME_STACK_DEPTH: return 1;
    case GL_AUTO_NORMAL: return 1;
    case GL_MAP1_COLOR_4: return 1;
    case GL_MAP1_INDEX: return 1;
    case GL_MAP1_NORMAL: return 1;
    case GL_MAP1_TEXTURE_COORD_1: return 1;
    case GL_MAP1_TEXTURE_COORD_2: return 1;
    case GL_MAP1_TEXTURE_COORD_3: return 1;
    case GL_MAP1_TEXTURE_COORD_4: return 1;
    case GL_MAP1_VERTEX_3: return 1;
    case GL_MAP1_VERTEX_4: return 1;
    case GL_MAP2_COLOR_4: return 1;
    case GL_MAP2_INDEX: return 1;
    case GL_MAP2_NORMAL: return 1;
    case GL_MAP2_TEXTURE_COORD_1: return 1;
    case GL_MAP2_TEXTURE_COORD_2: return 1;
    case GL_MAP2_TEXTURE_COORD_3: return 1;
    case GL_MAP2_TEXTURE_COORD_4: return 1;
    case GL_MAP2_VERTEX_3: return 1;
    case GL_MAP2_VERTEX_4: return 1;
    case GL_MAP1_GRID_DOMAIN: return 2;
    case GL_MAP1_GRID_SEGMENTS: return 1;
    case GL_MAP2_GRID_DOMAIN: return 4;
    case GL_MAP2_GRID_SEGMENTS: return 2;
    case GL_TEXTURE_1D: return 1;
    case GL_TEXTURE_2D: return 1;
    case GL_FEEDBACK_BUFFER_POINTER: return 1;
    case GL_FEEDBACK_BUFFER_SIZE: return 1;
    case GL_FEEDBACK_BUFFER_TYPE: return 1;
    case GL_SELECTION_BUFFER_POINTER: return 1;
    case GL_SELECTION_BUFFER_SIZE: return 1;
    case GL_TEXTURE_WIDTH: return 1;
    case GL_TEXTURE_HEIGHT: return 1;
    case GL_TEXTURE_INTERNAL_FORMAT: return 1;
    case GL_TEXTURE_BORDER_COLOR: return 4;
    case GL_TEXTURE_BORDER: return 1;
    case GL_AMBIENT: return 4;
    case GL_DIFFUSE: return 4;
    case GL_SPECULAR: return 4;
    case GL_POSITION: return 4;
    case GL_SPOT_DIRECTION: return 3;
    case GL_SPOT_EXPONENT: return 1;
    case GL_SPOT_CUTOFF: return 1;
    case GL_CONSTANT_ATTENUATION: return 1;
    case GL_LINEAR_ATTENUATION: return 1;
    case GL_QUADRATIC_ATTENUATION: return 1;
    case GL_EMISSION: return 4;
    case GL_SHININESS: return 1;
    case GL_AMBIENT_AND_DIFFUSE: return 4;
    case GL_COLOR_INDEXES: return 3;
    case GL_RASTER_POSITION_UNCLIPPED_IBM: return 1;
    case GL_VENDOR: return 1;
    case GL_RENDERER: return 1;
    case GL_VERSION: return 1;
    case GL_EXTENSIONS: return 1;
    case GL_TEXTURE_ENV_MODE: return 1;
    case GL_TEXTURE_ENV_COLOR: return 4;
    case GL_TEXTURE_GEN_MODE: return 1;
    case GL_OBJECT_PLANE: return 4;
    case GL_EYE_PLANE: return 4;
    case GL_TEXTURE_MAG_FILTER: return 1;
    case GL_TEXTURE_MIN_FILTER: return 1;
    case GL_TEXTURE_WRAP_S: return 1;
    case GL_TEXTURE_WRAP_T: return 1;
    case GL_POLYGON_OFFSET_UNITS: return 1;
    case GL_POLYGON_OFFSET_POINT: return 1;
    case GL_POLYGON_OFFSET_LINE: return 1;
    case GL_CLIP_DISTANCE0: return 1;
    case GL_CLIP_DISTANCE1: return 1;
    case GL_CLIP_DISTANCE2: return 1;
    case GL_CLIP_DISTANCE3: return 1;
    case GL_CLIP_DISTANCE4: return 1;
    case GL_CLIP_DISTANCE5: return 1;
    case GL_CLIP_DISTANCE6: return 1;
    case GL_CLIP_DISTANCE7: return 1;
    case GL_LIGHT0: return 1;
    case GL_LIGHT1: return 1;
    case GL_LIGHT2: return 1;
    case GL_LIGHT3: return 1;
    case GL_LIGHT4: return 1;
    case GL_LIGHT5: return 1;
    case GL_LIGHT6: return 1;
    case GL_LIGHT7: return 1;
    case GL_BLEND_COLOR: return 4;
    case GL_BLEND_EQUATION: return 1;
    case GL_PACK_CMYK_HINT_EXT: return 1;
    case GL_UNPACK_CMYK_HINT_EXT: return 1;
    case GL_CONVOLUTION_1D: return 1;
    case GL_CONVOLUTION_2D: return 1;
    case GL_SEPARABLE_2D: return 1;
    case GL_CONVOLUTION_BORDER_MODE: return 1;
    case GL_CONVOLUTION_FILTER_SCALE: return 4;
    case GL_CONVOLUTION_FILTER_BIAS: return 4;
    case GL_CONVOLUTION_FORMAT: return 1;
    case GL_CONVOLUTION_WIDTH: return 1;
    case GL_CONVOLUTION_HEIGHT: return 1;
    case GL_MAX_CONVOLUTION_WIDTH: return 1;
    case GL_MAX_CONVOLUTION_HEIGHT: return 1;
    case GL_POST_CONVOLUTION_RED_SCALE: return 1;
    case GL_POST_CONVOLUTION_GREEN_SCALE: return 1;
    case GL_POST_CONVOLUTION_BLUE_SCALE: return 1;
    case GL_POST_CONVOLUTION_ALPHA_SCALE: return 1;
    case GL_POST_CONVOLUTION_RED_BIAS: return 1;
    case GL_POST_CONVOLUTION_GREEN_BIAS: return 1;
    case GL_POST_CONVOLUTION_BLUE_BIAS: return 1;
    case GL_POST_CONVOLUTION_ALPHA_BIAS: return 1;
    case GL_HISTOGRAM: return 1;
    case GL_HISTOGRAM_WIDTH: return 1;
    case GL_HISTOGRAM_FORMAT: return 1;
    case GL_HISTOGRAM_RED_SIZE: return 1;
    case GL_HISTOGRAM_GREEN_SIZE: return 1;
    case GL_HISTOGRAM_BLUE_SIZE: return 1;
    case GL_HISTOGRAM_ALPHA_SIZE: return 1;
    case GL_HISTOGRAM_LUMINANCE_SIZE: return 1;
    case GL_HISTOGRAM_SINK: return 1;
    case GL_MINMAX: return 1;
    case GL_MINMAX_FORMAT: return 1;
    case GL_MINMAX_SINK: return 1;
    case GL_POLYGON_OFFSET_FILL: return 1;
    case GL_POLYGON_OFFSET_FACTOR: return 1;
    case GL_POLYGON_OFFSET_BIAS_EXT: return 1;
    case GL_RESCALE_NORMAL: return 1;
    case GL_TEXTURE_RED_SIZE: return 1;
    case GL_TEXTURE_GREEN_SIZE: return 1;
    case GL_TEXTURE_BLUE_SIZE: return 1;
    case GL_TEXTURE_ALPHA_SIZE: return 1;
    case GL_TEXTURE_LUMINANCE_SIZE: return 1;
    case GL_TEXTURE_INTENSITY_SIZE: return 1;
    case GL_TEXTURE_PRIORITY: return 1;
    case GL_TEXTURE_RESIDENT: return 1;
    case GL_TEXTURE_BINDING_1D: return 1;
    case GL_TEXTURE_BINDING_2D: return 1;
    case GL_TEXTURE_BINDING_3D: return 1;
    case GL_PACK_SKIP_IMAGES: return 1;
    case GL_PACK_IMAGE_HEIGHT: return 1;
    case GL_UNPACK_SKIP_IMAGES: return 1;
    case GL_UNPACK_IMAGE_HEIGHT: return 1;
    case GL_TEXTURE_3D: return 1;
    case GL_TEXTURE_DEPTH: return 1;
    case GL_TEXTURE_WRAP_R: return 1;
    case GL_MAX_3D_TEXTURE_SIZE: return 1;
    case GL_VERTEX_ARRAY: return 1;
    case GL_NORMAL_ARRAY: return 1;
    case GL_COLOR_ARRAY: return 1;
    case GL_INDEX_ARRAY: return 1;
    case GL_TEXTURE_COORD_ARRAY: return 1;
    case GL_EDGE_FLAG_ARRAY: return 1;
    case GL_VERTEX_ARRAY_SIZE: return 1;
    case GL_VERTEX_ARRAY_TYPE: return 1;
    case GL_VERTEX_ARRAY_STRIDE: return 1;
    case GL_VERTEX_ARRAY_COUNT_EXT: return 1;
    case GL_NORMAL_ARRAY_TYPE: return 1;
    case GL_NORMAL_ARRAY_STRIDE: return 1;
    case GL_NORMAL_ARRAY_COUNT_EXT: return 1;
    case GL_COLOR_ARRAY_SIZE: return 1;
    case GL_COLOR_ARRAY_TYPE: return 1;
    case GL_COLOR_ARRAY_STRIDE: return 1;
    case GL_COLOR_ARRAY_COUNT_EXT: return 1;
    case GL_INDEX_ARRAY_TYPE: return 1;
    case GL_INDEX_ARRAY_STRIDE: return 1;
    case GL_INDEX_ARRAY_COUNT_EXT: return 1;
    case GL_TEXTURE_COORD_ARRAY_SIZE: return 1;
    case GL_TEXTURE_COORD_ARRAY_TYPE: return 1;
    case GL_TEXTURE_COORD_ARRAY_STRIDE: return 1;
    case GL_TEXTURE_COORD_ARRAY_COUNT_EXT: return 1;
    case GL_EDGE_FLAG_ARRAY_STRIDE: return 1;
    case GL_EDGE_FLAG_ARRAY_COUNT_EXT: return 1;
    case GL_VERTEX_ARRAY_POINTER: return 1;
    case GL_NORMAL_ARRAY_POINTER: return 1;
    case GL_COLOR_ARRAY_POINTER: return 1;
    case GL_INDEX_ARRAY_POINTER: return 1;
    case GL_TEXTURE_COORD_ARRAY_POINTER: return 1;
    case GL_EDGE_FLAG_ARRAY_POINTER: return 1;
    case GL_INTERLACE_SGIX: return 1;
    case GL_DETAIL_TEXTURE_2D_BINDING_SGIS: return 1;
    case GL_MULTISAMPLE: return 1;
    case GL_SAMPLE_ALPHA_TO_COVERAGE: return 1;
    case GL_SAMPLE_ALPHA_TO_ONE: return 1;
    case GL_SAMPLE_COVERAGE: return 1;
    case GL_SAMPLE_BUFFERS: return 1;
    case GL_SAMPLES: return 1;
    case GL_SAMPLE_COVERAGE_VALUE: return 1;
    case GL_SAMPLE_COVERAGE_INVERT: return 1;
    case GL_SAMPLE_PATTERN_EXT: return 1;
    case GL_COLOR_MATRIX: return 16;
    case GL_COLOR_MATRIX_STACK_DEPTH: return 1;
    case GL_MAX_COLOR_MATRIX_STACK_DEPTH: return 1;
    case GL_POST_COLOR_MATRIX_RED_SCALE: return 1;
    case GL_POST_COLOR_MATRIX_GREEN_SCALE: return 1;
    case GL_POST_COLOR_MATRIX_BLUE_SCALE: return 1;
    case GL_POST_COLOR_MATRIX_ALPHA_SCALE: return 1;
    case GL_POST_COLOR_MATRIX_RED_BIAS: return 1;
    case GL_POST_COLOR_MATRIX_GREEN_BIAS: return 1;
    case GL_POST_COLOR_MATRIX_BLUE_BIAS: return 1;
    case GL_POST_COLOR_MATRIX_ALPHA_BIAS: return 1;
    case GL_TEXTURE_COLOR_TABLE_SGI: return 1;
    case GL_TEXTURE_COMPARE_FAIL_VALUE_ARB: return 1;
    case GL_BLEND_DST_RGB: return 1;
    case GL_BLEND_SRC_RGB: return 1;
    case GL_BLEND_DST_ALPHA: return 1;
    case GL_BLEND_SRC_ALPHA: return 1;
    case GL_COLOR_TABLE: return 1;
    case GL_POST_CONVOLUTION_COLOR_TABLE: return 1;
    case GL_POST_COLOR_MATRIX_COLOR_TABLE: return 1;
    case GL_COLOR_TABLE_SCALE: return 4;
    case GL_COLOR_TABLE_BIAS: return 4;
    case GL_COLOR_TABLE_FORMAT: return 1;
    case GL_COLOR_TABLE_WIDTH: return 1;
    case GL_COLOR_TABLE_RED_SIZE: return 1;
    case GL_COLOR_TABLE_GREEN_SIZE: return 1;
    case GL_COLOR_TABLE_BLUE_SIZE: return 1;
    case GL_COLOR_TABLE_ALPHA_SIZE: return 1;
    case GL_COLOR_TABLE_LUMINANCE_SIZE: return 1;
    case GL_COLOR_TABLE_INTENSITY_SIZE: return 1;
    case GL_MAX_ELEMENTS_VERTICES: return 1;
    case GL_MAX_ELEMENTS_INDICES: return 1;
    case GL_TEXTURE_INDEX_SIZE_EXT: return 1;
    case GL_CLIP_VOLUME_CLIPPING_HINT_EXT: return 1;
    case GL_POINT_SIZE_MIN: return 1;
    case GL_POINT_SIZE_MAX: return 1;
    case GL_POINT_FADE_THRESHOLD_SIZE: return 1;
    case GL_POINT_DISTANCE_ATTENUATION: return 3;
    case GL_FOG_FUNC_POINTS_SGIS: return 1;
    case GL_MAX_FOG_FUNC_POINTS_SGIS: return 1;
    case GL_PACK_SKIP_VOLUMES_SGIS: return 1;
    case GL_PACK_IMAGE_DEPTH_SGIS: return 1;
    case GL_UNPACK_SKIP_VOLUMES_SGIS: return 1;
    case GL_UNPACK_IMAGE_DEPTH_SGIS: return 1;
    case GL_TEXTURE_4D_SGIS: return 1;
    case GL_MAX_4D_TEXTURE_SIZE_SGIS: return 1;
    case GL_PIXEL_TEX_GEN_SGIX: return 1;
    case GL_TEXTURE_MIN_LOD: return 1;
    case GL_TEXTURE_MAX_LOD: return 1;
    case GL_TEXTURE_BASE_LEVEL: return 1;
    case GL_TEXTURE_MAX_LEVEL: return 1;
    case GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX: return 1;
    case GL_PIXEL_TILE_CACHE_INCREMENT_SGIX: return 1;
    case GL_PIXEL_TILE_WIDTH_SGIX: return 1;
    case GL_PIXEL_TILE_HEIGHT_SGIX: return 1;
    case GL_PIXEL_TILE_GRID_WIDTH_SGIX: return 1;
    case GL_PIXEL_TILE_GRID_HEIGHT_SGIX: return 1;
    case GL_PIXEL_TILE_GRID_DEPTH_SGIX: return 1;
    case GL_PIXEL_TILE_CACHE_SIZE_SGIX: return 1;
    case GL_SPRITE_SGIX: return 1;
    case GL_SPRITE_MODE_SGIX: return 1;
    case GL_SPRITE_AXIS_SGIX: return 3;
    case GL_SPRITE_TRANSLATION_SGIX: return 3;
    case GL_TEXTURE_4D_BINDING_SGIS: return 1;
    case GL_CONVOLUTION_BORDER_COLOR: return 4;
    case GL_OCCLUSION_TEST_HP: return 1;
    case GL_OCCLUSION_TEST_RESULT_HP: return 1;
    case GL_TEXTURE_CLIPMAP_CENTER_SGIX: return 2;
    case GL_TEXTURE_CLIPMAP_FRAME_SGIX: return 1;
    case GL_TEXTURE_CLIPMAP_OFFSET_SGIX: return 2;
    case GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: return 3;
    case GL_TEXTURE_CLIPMAP_DEPTH_SGIX: return 1;
    case GL_MAX_CLIPMAP_DEPTH_SGIX: return 1;
    case GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: return 1;
    case GL_POST_TEXTURE_FILTER_BIAS_SGIX: return 1;
    case GL_POST_TEXTURE_FILTER_SCALE_SGIX: return 1;
    case GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: return 2;
    case GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: return 2;
    case GL_REFERENCE_PLANE_SGIX: return 1;
    case GL_REFERENCE_PLANE_EQUATION_SGIX: return 4;
    case GL_IR_INSTRUMENT1_SGIX: return 1;
    case GL_INSTRUMENT_MEASUREMENTS_SGIX: return 1;
    case GL_CALLIGRAPHIC_FRAGMENT_SGIX: return 1;
    case GL_FRAMEZOOM_SGIX: return 1;
    case GL_FRAMEZOOM_FACTOR_SGIX: return 1;
    case GL_MAX_FRAMEZOOM_FACTOR_SGIX: return 1;
    case GL_TEXTURE_LOD_BIAS_S_SGIX: return 1;
    case GL_TEXTURE_LOD_BIAS_T_SGIX: return 1;
    case GL_TEXTURE_LOD_BIAS_R_SGIX: return 1;
    case GL_GENERATE_MIPMAP: return 1;
    case GL_GENERATE_MIPMAP_HINT: return 1;
    case GL_DEFORMATIONS_MASK_SGIX: return 1;
    case GL_FOG_OFFSET_SGIX: return 1;
    case GL_FOG_OFFSET_VALUE_SGIX: return 4;
    case GL_TEXTURE_COMPARE_SGIX: return 1;
    case GL_TEXTURE_COMPARE_OPERATOR_SGIX: return 1;
    case GL_ARRAY_ELEMENT_LOCK_FIRST_EXT: return 1;
    case GL_ARRAY_ELEMENT_LOCK_COUNT_EXT: return 1;
    case GL_CULL_VERTEX_EXT: return 1;
    case GL_CULL_VERTEX_EYE_POSITION_EXT: return 4;
    case GL_CULL_VERTEX_OBJECT_POSITION_EXT: return 4;
    case GL_TEXTURE_COLOR_WRITEMASK_SGIS: return 4;
    case GL_LIGHT_MODEL_COLOR_CONTROL: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: return 1;
    case GL_MAJOR_VERSION: return 1;
    case GL_MINOR_VERSION: return 1;
    case GL_NUM_EXTENSIONS: return 1;
    case GL_CONTEXT_FLAGS: return 1;
    case GL_DEBUG_OUTPUT_SYNCHRONOUS: return 1;
    case GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: return 1;
    case GL_DEBUG_CALLBACK_FUNCTION: return 1;
    case GL_DEBUG_CALLBACK_USER_PARAM: return 1;
    case GL_RESET_NOTIFICATION_STRATEGY_ARB: return 1;
    case GL_ACTIVE_PROGRAM: return 1;
    case GL_PROGRAM_PIPELINE_BINDING: return 1;
    case GL_MAX_VIEWPORTS: return 1;
    case GL_VIEWPORT_SUBPIXEL_BITS: return 1;
    case GL_VIEWPORT_BOUNDS_RANGE: return 2;
    case GL_LAYER_PROVOKING_VERTEX: return 1;
    case GL_VIEWPORT_INDEX_PROVOKING_VERTEX: return 1;
    case GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: return 1;
    case GL_MAX_COMPUTE_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: return 1;
    case GL_MAX_COMPUTE_ATOMIC_COUNTERS: return 1;
    case GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_DEBUG_GROUP_STACK_DEPTH: return 1;
    case GL_DEBUG_GROUP_STACK_DEPTH: return 1;
    case GL_MAX_UNIFORM_LOCATIONS: return 1;
    case GL_INTERNALFORMAT_SUPPORTED: return 1;
    case GL_INTERNALFORMAT_PREFERRED: return 1;
    case GL_INTERNALFORMAT_RED_SIZE: return 1;
    case GL_INTERNALFORMAT_GREEN_SIZE: return 1;
    case GL_INTERNALFORMAT_BLUE_SIZE: return 1;
    case GL_INTERNALFORMAT_ALPHA_SIZE: return 1;
    case GL_INTERNALFORMAT_DEPTH_SIZE: return 1;
    case GL_INTERNALFORMAT_STENCIL_SIZE: return 1;
    case GL_INTERNALFORMAT_SHARED_SIZE: return 1;
    case GL_INTERNALFORMAT_RED_TYPE: return 1;
    case GL_INTERNALFORMAT_GREEN_TYPE: return 1;
    case GL_INTERNALFORMAT_BLUE_TYPE: return 1;
    case GL_INTERNALFORMAT_ALPHA_TYPE: return 1;
    case GL_INTERNALFORMAT_DEPTH_TYPE: return 1;
    case GL_INTERNALFORMAT_STENCIL_TYPE: return 1;
    case GL_MAX_WIDTH: return 1;
    case GL_MAX_HEIGHT: return 1;
    case GL_MAX_DEPTH: return 1;
    case GL_MAX_LAYERS: return 1;
    case GL_MAX_COMBINED_DIMENSIONS: return 1;
    case GL_COLOR_COMPONENTS: return 1;
    case GL_DEPTH_COMPONENTS: return 1;
    case GL_STENCIL_COMPONENTS: return 1;
    case GL_COLOR_RENDERABLE: return 1;
    case GL_DEPTH_RENDERABLE: return 1;
    case GL_STENCIL_RENDERABLE: return 1;
    case GL_FRAMEBUFFER_RENDERABLE: return 1;
    case GL_FRAMEBUFFER_RENDERABLE_LAYERED: return 1;
    case GL_FRAMEBUFFER_BLEND: return 1;
    case GL_READ_PIXELS: return 1;
    case GL_READ_PIXELS_FORMAT: return 1;
    case GL_READ_PIXELS_TYPE: return 1;
    case GL_TEXTURE_IMAGE_FORMAT: return 1;
    case GL_TEXTURE_IMAGE_TYPE: return 1;
    case GL_GET_TEXTURE_IMAGE_FORMAT: return 1;
    case GL_GET_TEXTURE_IMAGE_TYPE: return 1;
    case GL_MIPMAP: return 1;
    case GL_MANUAL_GENERATE_MIPMAP: return 1;
    case GL_AUTO_GENERATE_MIPMAP: return 1;
    case GL_COLOR_ENCODING: return 1;
    case GL_SRGB_READ: return 1;
    case GL_SRGB_WRITE: return 1;
    case GL_SRGB_DECODE_ARB: return 1;
    case GL_FILTER: return 1;
    case GL_VERTEX_TEXTURE: return 1;
    case GL_TESS_CONTROL_TEXTURE: return 1;
    case GL_TESS_EVALUATION_TEXTURE: return 1;
    case GL_GEOMETRY_TEXTURE: return 1;
    case GL_FRAGMENT_TEXTURE: return 1;
    case GL_COMPUTE_TEXTURE: return 1;
    case GL_TEXTURE_SHADOW: return 1;
    case GL_TEXTURE_GATHER: return 1;
    case GL_TEXTURE_GATHER_SHADOW: return 1;
    case GL_SHADER_IMAGE_LOAD: return 1;
    case GL_SHADER_IMAGE_STORE: return 1;
    case GL_SHADER_IMAGE_ATOMIC: return 1;
    case GL_IMAGE_TEXEL_SIZE: return 1;
    case GL_IMAGE_COMPATIBILITY_CLASS: return 1;
    case GL_IMAGE_PIXEL_FORMAT: return 1;
    case GL_IMAGE_PIXEL_TYPE: return 1;
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: return 1;
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: return 1;
    case GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: return 1;
    case GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: return 1;
    case GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: return 1;
    case GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: return 1;
    case GL_TEXTURE_COMPRESSED_BLOCK_SIZE: return 1;
    case GL_CLEAR_BUFFER: return 1;
    case GL_TEXTURE_VIEW: return 1;
    case GL_VIEW_COMPATIBILITY_CLASS: return 1;
    case GL_VERTEX_ATTRIB_BINDING: return 1;
    case GL_VERTEX_ATTRIB_RELATIVE_OFFSET: return 1;
    case GL_VERTEX_BINDING_DIVISOR: return 1;
    case GL_VERTEX_BINDING_OFFSET: return 1;
    case GL_VERTEX_BINDING_STRIDE: return 1;
    case GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: return 1;
    case GL_MAX_VERTEX_ATTRIB_BINDINGS: return 1;
    case GL_TEXTURE_VIEW_MIN_LEVEL: return 1;
    case GL_TEXTURE_VIEW_NUM_LEVELS: return 1;
    case GL_TEXTURE_VIEW_MIN_LAYER: return 1;
    case GL_TEXTURE_VIEW_NUM_LAYERS: return 1;
    case GL_TEXTURE_IMMUTABLE_LEVELS: return 1;
    case GL_MAX_LABEL_LENGTH: return 1;
    case GL_CONVOLUTION_HINT_SGIX: return 1;
    case GL_PIXEL_TEX_GEN_MODE_SGIX: return 1;
    case GL_TEXTURE_APPLICATION_MODE_EXT: return 1;
    case GL_TEXTURE_LIGHT_EXT: return 1;
    case GL_TEXTURE_MATERIAL_FACE_EXT: return 1;
    case GL_TEXTURE_MATERIAL_PARAMETER_EXT: return 1;
    case GL_PIXEL_TEXTURE_SGIS: return 1;
    case GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS: return 1;
    case GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: return 1;
    case GL_PIXEL_GROUP_COLOR_SGIS: return 1;
    case GL_TEXTURE_MAX_CLAMP_S_SGIX: return 1;
    case GL_TEXTURE_MAX_CLAMP_T_SGIX: return 1;
    case GL_TEXTURE_MAX_CLAMP_R_SGIX: return 1;
    case GL_FRAGMENT_LIGHTING_SGIX: return 1;
    case GL_FRAGMENT_COLOR_MATERIAL_SGIX: return 1;
    case GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX: return 1;
    case GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: return 1;
    case GL_MAX_FRAGMENT_LIGHTS_SGIX: return 1;
    case GL_MAX_ACTIVE_LIGHTS_SGIX: return 1;
    case GL_CURRENT_RASTER_NORMAL_SGIX: return 1;
    case GL_LIGHT_ENV_MODE_SGIX: return 1;
    case GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: return 1;
    case GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: return 1;
    case GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: return 4;
    case GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: return 1;
    case GL_FRAGMENT_LIGHT0_SGIX: return 1;
    case GL_TANGENT_ARRAY_TYPE_EXT: return 1;
    case GL_BINORMAL_ARRAY_TYPE_EXT: return 1;
    case GL_TANGENT_ARRAY_POINTER_EXT: return 1;
    case GL_BINORMAL_ARRAY_POINTER_EXT: return 1;
    case GL_FOG_COORD_SRC: return 1;
    case GL_CURRENT_FOG_COORD: return 1;
    case GL_FOG_COORD_ARRAY_TYPE: return 1;
    case GL_FOG_COORD_ARRAY_STRIDE: return 1;
    case GL_FOG_COORD_ARRAY: return 1;
    case GL_COLOR_SUM: return 1;
    case GL_CURRENT_SECONDARY_COLOR: return 4;
    case GL_SECONDARY_COLOR_ARRAY_SIZE: return 1;
    case GL_SECONDARY_COLOR_ARRAY_TYPE: return 1;
    case GL_SECONDARY_COLOR_ARRAY_STRIDE: return 1;
    case GL_SECONDARY_COLOR_ARRAY: return 1;
    case GL_ALIASED_POINT_SIZE_RANGE: return 2;
    case GL_ALIASED_LINE_WIDTH_RANGE: return 2;
    case GL_ACTIVE_TEXTURE: return 1;
    case GL_CLIENT_ACTIVE_TEXTURE: return 1;
    case GL_MAX_TEXTURE_UNITS: return 1;
    case GL_TRANSPOSE_MODELVIEW_MATRIX: return 16;
    case GL_TRANSPOSE_PROJECTION_MATRIX: return 16;
    case GL_TRANSPOSE_TEXTURE_MATRIX: return 16;
    case GL_TRANSPOSE_COLOR_MATRIX: return 16;
    case GL_MAX_RENDERBUFFER_SIZE: return 1;
    case GL_TEXTURE_COMPRESSION_HINT: return 1;
    case GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: return 1;
    case GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: return 1;
    case GL_TEXTURE_RECTANGLE: return 1;
    case GL_TEXTURE_BINDING_RECTANGLE: return 1;
    case GL_MAX_RECTANGLE_TEXTURE_SIZE: return 1;
    case GL_MAX_TEXTURE_LOD_BIAS: return 1;
    case GL_TEXTURE_MAX_ANISOTROPY_EXT: return 1;
    case GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: return 1;
    case GL_TEXTURE_LOD_BIAS: return 1;
    case GL_MAX_SHININESS_NV: return 1;
    case GL_MAX_SPOT_EXPONENT_NV: return 1;
    case GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT: return 1;
    case GL_TEXTURE_CUBE_MAP: return 1;
    case GL_TEXTURE_BINDING_CUBE_MAP: return 1;
    case GL_MAX_CUBE_MAP_TEXTURE_SIZE: return 1;
    case GL_VERTEX_ARRAY_RANGE_NV: return 1;
    case GL_VERTEX_ARRAY_RANGE_LENGTH_NV: return 1;
    case GL_VERTEX_ARRAY_RANGE_VALID_NV: return 1;
    case GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: return 1;
    case GL_VERTEX_ARRAY_RANGE_POINTER_NV: return 1;
    case GL_CONSTANT_COLOR0_NV: return 4;
    case GL_CONSTANT_COLOR1_NV: return 4;
    case GL_MULTISAMPLE_FILTER_HINT_NV: return 1;
    case GL_MAX_GENERAL_COMBINERS_NV: return 1;
    case GL_NUM_GENERAL_COMBINERS_NV: return 1;
    case GL_COLOR_SUM_CLAMP_NV: return 1;
    case GL_FOG_DISTANCE_MODE_NV: return 1;
    case GL_COMBINE_RGB: return 1;
    case GL_COMBINE_ALPHA: return 1;
    case GL_RGB_SCALE: return 1;
    case GL_SRC0_RGB: return 1;
    case GL_SRC1_RGB: return 1;
    case GL_SRC2_RGB: return 1;
    case GL_SOURCE3_RGB_NV: return 1;
    case GL_SRC0_ALPHA: return 1;
    case GL_SRC1_ALPHA: return 1;
    case GL_SRC2_ALPHA: return 1;
    case GL_SOURCE3_ALPHA_NV: return 1;
    case GL_OPERAND0_RGB: return 1;
    case GL_OPERAND1_RGB: return 1;
    case GL_OPERAND2_RGB: return 1;
    case GL_OPERAND3_RGB_NV: return 1;
    case GL_OPERAND0_ALPHA: return 1;
    case GL_OPERAND1_ALPHA: return 1;
    case GL_OPERAND2_ALPHA: return 1;
    case GL_OPERAND3_ALPHA_NV: return 1;
    case GL_VERTEX_ARRAY_BINDING: return 1;
    case GL_TEXTURE_RANGE_POINTER_APPLE: return 1;
    case GL_TEXTURE_STORAGE_HINT_APPLE: return 1;
    case GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN: return 1;
    case GL_VERTEX_PROGRAM_ARB: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_ENABLED: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_SIZE: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_STRIDE: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_TYPE: return 1;
    case GL_CURRENT_VERTEX_ATTRIB: return 4;
    case GL_PROGRAM_LENGTH_ARB: return 1;
    case GL_PROGRAM_STRING_ARB: return 1;
    case GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: return 1;
    case GL_MAX_PROGRAM_MATRICES_ARB: return 1;
    case GL_CURRENT_MATRIX_STACK_DEPTH_ARB: return 1;
    case GL_CURRENT_MATRIX_ARB: return 16;
    case GL_PROGRAM_POINT_SIZE: return 1;
    case GL_VERTEX_PROGRAM_TWO_SIDE: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_POINTER: return 1;
    case GL_PROGRAM_TARGET_NV: return 1;
    case GL_PROGRAM_RESIDENT_NV: return 1;
    case GL_VERTEX_PROGRAM_BINDING_NV: return 1;
    case GL_PROGRAM_ERROR_POSITION_ARB: return 1;
    case GL_DEPTH_CLAMP: return 1;
    case GL_VERTEX_ATTRIB_ARRAY0_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY1_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY2_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY3_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY4_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY5_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY6_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY7_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY8_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY9_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY10_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY11_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY12_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY13_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY14_NV: return 1;
    case GL_VERTEX_ATTRIB_ARRAY15_NV: return 1;
    case GL_PROGRAM_BINDING_ARB: return 1;
    case GL_TEXTURE_COMPRESSED_IMAGE_SIZE: return 1;
    case GL_TEXTURE_COMPRESSED: return 1;
    case GL_NUM_COMPRESSED_TEXTURE_FORMATS: return 1;
    case GL_COMPRESSED_TEXTURE_FORMATS: return _glGetInteger(GL_NUM_COMPRESSED_TEXTURE_FORMATS);
    case GL_MAX_VERTEX_UNITS_ARB: return 1;
    case GL_ACTIVE_VERTEX_UNITS_ARB: return 1;
    case GL_WEIGHT_SUM_UNITY_ARB: return 1;
    case GL_VERTEX_BLEND_ARB: return 1;
    case GL_CURRENT_WEIGHT_ARB: return 1;
    case GL_WEIGHT_ARRAY_TYPE_ARB: return 1;
    case GL_WEIGHT_ARRAY_STRIDE_ARB: return 1;
    case GL_WEIGHT_ARRAY_SIZE_ARB: return 1;
    case GL_WEIGHT_ARRAY_POINTER_ARB: return 1;
    case GL_WEIGHT_ARRAY_ARB: return 1;
    case GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: return 1;
    case GL_SHADER_OPERATION_NV: return 1;
    case GL_CULL_MODES_NV: return 4;
    case GL_OFFSET_TEXTURE_MATRIX_NV: return 4;
    case GL_OFFSET_TEXTURE_SCALE_NV: return 1;
    case GL_OFFSET_TEXTURE_BIAS_NV: return 1;
    case GL_PREVIOUS_TEXTURE_INPUT_NV: return 1;
    case GL_CONST_EYE_NV: return 3;
    case GL_MODELVIEW2_ARB: return 16;
    case GL_MODELVIEW3_ARB: return 16;
    case GL_MODELVIEW4_ARB: return 16;
    case GL_MODELVIEW5_ARB: return 16;
    case GL_MODELVIEW6_ARB: return 16;
    case GL_MODELVIEW7_ARB: return 16;
    case GL_MODELVIEW8_ARB: return 16;
    case GL_MODELVIEW9_ARB: return 16;
    case GL_MODELVIEW10_ARB: return 16;
    case GL_MODELVIEW11_ARB: return 16;
    case GL_MODELVIEW12_ARB: return 16;
    case GL_MODELVIEW13_ARB: return 16;
    case GL_MODELVIEW14_ARB: return 16;
    case GL_MODELVIEW15_ARB: return 16;
    case GL_MODELVIEW16_ARB: return 16;
    case GL_MODELVIEW17_ARB: return 16;
    case GL_MODELVIEW18_ARB: return 16;
    case GL_MODELVIEW19_ARB: return 16;
    case GL_MODELVIEW20_ARB: return 16;
    case GL_MODELVIEW21_ARB: return 16;
    case GL_MODELVIEW22_ARB: return 16;
    case GL_MODELVIEW23_ARB: return 16;
    case GL_MODELVIEW24_ARB: return 16;
    case GL_MODELVIEW25_ARB: return 16;
    case GL_MODELVIEW26_ARB: return 16;
    case GL_MODELVIEW27_ARB: return 16;
    case GL_MODELVIEW28_ARB: return 16;
    case GL_MODELVIEW29_ARB: return 16;
    case GL_MODELVIEW30_ARB: return 16;
    case GL_MODELVIEW31_ARB: return 16;
    case GL_PROGRAM_BINARY_LENGTH: return 1;
    case GL_PACK_INVERT_MESA: return 1;
    case GL_BUFFER_SIZE: return 1;
    case GL_BUFFER_USAGE: return 1;
    case GL_ELEMENT_ARRAY_TYPE_ATI: return 1;
    case GL_BUMP_TARGET_ATI: return 1;
    case GL_VERTEX_SHADER_BINDING_EXT: return 1;
    case GL_VARIANT_ARRAY_TYPE_EXT: return 1;
    case GL_NUM_PROGRAM_BINARY_FORMATS: return 1;
    case GL_PROGRAM_BINARY_FORMATS: return _glGetInteger(GL_NUM_PROGRAM_BINARY_FORMATS);
    case GL_STENCIL_BACK_FUNC: return 1;
    case GL_STENCIL_BACK_FAIL: return 1;
    case GL_STENCIL_BACK_PASS_DEPTH_FAIL: return 1;
    case GL_STENCIL_BACK_PASS_DEPTH_PASS: return 1;
    case GL_FRAGMENT_PROGRAM_ARB: return 1;
    case GL_PROGRAM_ALU_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_TEX_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_TEX_INDIRECTIONS_ARB: return 1;
    case GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: return 1;
    case GL_RGBA_FLOAT_MODE_ARB: return 1;
    case GL_MAX_DRAW_BUFFERS: return 1;
    case GL_DRAW_BUFFER0: return 1;
    case GL_DRAW_BUFFER1: return 1;
    case GL_DRAW_BUFFER2: return 1;
    case GL_DRAW_BUFFER3: return 1;
    case GL_DRAW_BUFFER4: return 1;
    case GL_DRAW_BUFFER5: return 1;
    case GL_DRAW_BUFFER6: return 1;
    case GL_DRAW_BUFFER7: return 1;
    case GL_DRAW_BUFFER8: return 1;
    case GL_DRAW_BUFFER9: return 1;
    case GL_DRAW_BUFFER10: return 1;
    case GL_DRAW_BUFFER11: return 1;
    case GL_DRAW_BUFFER12: return 1;
    case GL_DRAW_BUFFER13: return 1;
    case GL_DRAW_BUFFER14: return 1;
    case GL_DRAW_BUFFER15: return 1;
    case GL_BLEND_EQUATION_ALPHA: return 1;
    case GL_MATRIX_PALETTE_ARB: return 1;
    case GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: return 1;
    case GL_MAX_PALETTE_MATRICES_ARB: return 1;
    case GL_CURRENT_PALETTE_MATRIX_ARB: return 1;
    case GL_MATRIX_INDEX_ARRAY_ARB: return 1;
    case GL_CURRENT_MATRIX_INDEX_ARB: return 1;
    case GL_MATRIX_INDEX_ARRAY_SIZE_ARB: return 1;
    case GL_MATRIX_INDEX_ARRAY_TYPE_ARB: return 1;
    case GL_MATRIX_INDEX_ARRAY_STRIDE_ARB: return 1;
    case GL_MATRIX_INDEX_ARRAY_POINTER_ARB: return 1;
    case GL_TEXTURE_DEPTH_SIZE: return 1;
    case GL_DEPTH_TEXTURE_MODE: return 1;
    case GL_TEXTURE_COMPARE_MODE: return 1;
    case GL_TEXTURE_COMPARE_FUNC: return 1;
    case GL_TEXTURE_CUBE_MAP_SEAMLESS: return 1;
    case GL_POINT_SPRITE: return 1;
    case GL_COORD_REPLACE: return 1;
    case GL_POINT_SPRITE_R_MODE_NV: return 1;
    case GL_QUERY_COUNTER_BITS: return 1;
    case GL_CURRENT_QUERY: return 1;
    case GL_QUERY_RESULT: return 1;
    case GL_QUERY_RESULT_AVAILABLE: return 1;
    case GL_MAX_VERTEX_ATTRIBS: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: return 1;
    case GL_MAX_TEXTURE_COORDS: return 1;
    case GL_MAX_TEXTURE_IMAGE_UNITS: return 1;
    case GL_FRAGMENT_PROGRAM_BINDING_NV: return 1;
    case GL_PROGRAM_ERROR_STRING_ARB: return 1;
    case GL_PROGRAM_FORMAT_ARB: return 1;
    case GL_TEXTURE_UNSIGNED_REMAP_MODE_NV: return 1;
    case GL_DEPTH_BOUNDS_TEST_EXT: return 1;
    case GL_DEPTH_BOUNDS_EXT: return 2;
    case GL_ARRAY_BUFFER_BINDING: return 1;
    case GL_ELEMENT_ARRAY_BUFFER_BINDING: return 1;
    case GL_VERTEX_ARRAY_BUFFER_BINDING: return 1;
    case GL_NORMAL_ARRAY_BUFFER_BINDING: return 1;
    case GL_COLOR_ARRAY_BUFFER_BINDING: return 1;
    case GL_INDEX_ARRAY_BUFFER_BINDING: return 1;
    case GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING: return 1;
    case GL_EDGE_FLAG_ARRAY_BUFFER_BINDING: return 1;
    case GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING: return 1;
    case GL_FOG_COORD_ARRAY_BUFFER_BINDING: return 1;
    case GL_WEIGHT_ARRAY_BUFFER_BINDING: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: return 1;
    case GL_PROGRAM_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: return 1;
    case GL_PROGRAM_TEMPORARIES_ARB: return 1;
    case GL_MAX_PROGRAM_TEMPORARIES_ARB: return 1;
    case GL_PROGRAM_NATIVE_TEMPORARIES_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: return 1;
    case GL_PROGRAM_PARAMETERS_ARB: return 1;
    case GL_MAX_PROGRAM_PARAMETERS_ARB: return 1;
    case GL_PROGRAM_NATIVE_PARAMETERS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: return 1;
    case GL_PROGRAM_ATTRIBS_ARB: return 1;
    case GL_MAX_PROGRAM_ATTRIBS_ARB: return 1;
    case GL_PROGRAM_NATIVE_ATTRIBS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: return 1;
    case GL_PROGRAM_ADDRESS_REGISTERS_ARB: return 1;
    case GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: return 1;
    case GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: return 1;
    case GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: return 1;
    case GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: return 1;
    case GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: return 1;
    case GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: return 1;
    case GL_TRANSPOSE_CURRENT_MATRIX_ARB: return 16;
    case GL_BUFFER_ACCESS: return 1;
    case GL_BUFFER_MAPPED: return 1;
    case GL_BUFFER_MAP_POINTER: return 1;
    case GL_PIXEL_PACK_BUFFER_BINDING: return 1;
    case GL_PIXEL_UNPACK_BUFFER_BINDING: return 1;
    case GL_TEXTURE_STENCIL_SIZE: return 1;
    case GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: return 1;
    case GL_MAX_PROGRAM_CALL_DEPTH_NV: return 1;
    case GL_MAX_PROGRAM_IF_DEPTH_NV: return 1;
    case GL_MAX_PROGRAM_LOOP_DEPTH_NV: return 1;
    case GL_MAX_PROGRAM_LOOP_COUNT_NV: return 1;
    case GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_INTEGER: return 1;
    case GL_VERTEX_ATTRIB_ARRAY_DIVISOR: return 1;
    case GL_MAX_ARRAY_TEXTURE_LAYERS: return 1;
    case GL_MIN_PROGRAM_TEXEL_OFFSET: return 1;
    case GL_MAX_PROGRAM_TEXEL_OFFSET: return 1;
    case GL_STENCIL_TEST_TWO_SIDE_EXT: return 1;
    case GL_ACTIVE_STENCIL_FACE_EXT: return 1;
    case GL_SAMPLER_BINDING: return 1;
    case GL_CLAMP_VERTEX_COLOR: return 1;
    case GL_CLAMP_FRAGMENT_COLOR: return 1;
    case GL_CLAMP_READ_COLOR: return 1;
    case GL_ELEMENT_ARRAY_TYPE_APPLE: return 1;
    case GL_UNIFORM_BUFFER_BINDING: return 1;
    case GL_UNIFORM_BUFFER_START: return 1;
    case GL_UNIFORM_BUFFER_SIZE: return 1;
    case GL_MAX_VERTEX_UNIFORM_BLOCKS: return 1;
    case GL_MAX_GEOMETRY_UNIFORM_BLOCKS: return 1;
    case GL_MAX_FRAGMENT_UNIFORM_BLOCKS: return 1;
    case GL_MAX_COMBINED_UNIFORM_BLOCKS: return 1;
    case GL_MAX_UNIFORM_BUFFER_BINDINGS: return 1;
    case GL_MAX_UNIFORM_BLOCK_SIZE: return 1;
    case GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: return 1;
    case GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: return 1;
    case GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: return 1;
    case GL_ACTIVE_UNIFORM_BLOCKS: return 1;
    case GL_UNIFORM_TYPE: return 1;
    case GL_UNIFORM_SIZE: return 1;
    case GL_UNIFORM_NAME_LENGTH: return 1;
    case GL_UNIFORM_BLOCK_INDEX: return 1;
    case GL_UNIFORM_OFFSET: return 1;
    case GL_UNIFORM_ARRAY_STRIDE: return 1;
    case GL_UNIFORM_MATRIX_STRIDE: return 1;
    case GL_UNIFORM_IS_ROW_MAJOR: return 1;
    case GL_UNIFORM_BLOCK_BINDING: return 1;
    case GL_UNIFORM_BLOCK_DATA_SIZE: return 1;
    case GL_UNIFORM_BLOCK_NAME_LENGTH: return 1;
    case GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: return 1;
    case GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: return 1;
    case GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: return 1;
    case GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: return 1;
    case GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: return 1;
    case GL_TEXTURE_SRGB_DECODE_EXT: return 1;
    case GL_FRAGMENT_SHADER: return 1;
    case GL_VERTEX_SHADER: return 1;
    case GL_PROGRAM_OBJECT_ARB: return 1;
    case GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_VERTEX_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_VARYING_COMPONENTS: return 1;
    case GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: return 1;
    case GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: return 1;
    case GL_OBJECT_TYPE_ARB: return 1;
    case GL_SHADER_TYPE: return 1;
    case GL_DELETE_STATUS: return 1;
    case GL_COMPILE_STATUS: return 1;
    case GL_LINK_STATUS: return 1;
    case GL_VALIDATE_STATUS: return 1;
    case GL_INFO_LOG_LENGTH: return 1;
    case GL_ATTACHED_SHADERS: return 1;
    case GL_ACTIVE_UNIFORMS: return 1;
    case GL_ACTIVE_UNIFORM_MAX_LENGTH: return 1;
    case GL_SHADER_SOURCE_LENGTH: return 1;
    case GL_ACTIVE_ATTRIBUTES: return 1;
    case GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: return 1;
    case GL_SHADING_LANGUAGE_VERSION: return 1;
    case GL_CURRENT_PROGRAM: return 1;
    case GL_IMPLEMENTATION_COLOR_READ_TYPE: return 1;
    case GL_IMPLEMENTATION_COLOR_READ_FORMAT: return 1;
    case GL_TEXTURE_CROP_RECT_OES: return 4;
    case GL_TEXTURE_RED_TYPE: return 1;
    case GL_TEXTURE_GREEN_TYPE: return 1;
    case GL_TEXTURE_BLUE_TYPE: return 1;
    case GL_TEXTURE_ALPHA_TYPE: return 1;
    case GL_TEXTURE_LUMINANCE_TYPE: return 1;
    case GL_TEXTURE_INTENSITY_TYPE: return 1;
    case GL_TEXTURE_DEPTH_TYPE: return 1;
    case GL_TEXTURE_BINDING_1D_ARRAY: return 1;
    case GL_TEXTURE_BINDING_2D_ARRAY: return 1;
    case GL_MAX_PROGRAM_OUTPUT_VERTICES_NV: return 1;
    case GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: return 1;
    case GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: return 1;
    case GL_TEXTURE_BUFFER: return 1;
    case GL_MAX_TEXTURE_BUFFER_SIZE: return 1;
    case GL_TEXTURE_BINDING_BUFFER: return 1;
    case GL_TEXTURE_BUFFER_DATA_STORE_BINDING: return 1;
    case GL_TEXTURE_BUFFER_FORMAT: return 1;
    case GL_ANY_SAMPLES_PASSED: return 1;
    case GL_TRANSFORM_FEEDBACK_BUFFER_START: return 1;
    case GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: return 1;
    case GL_RASTERIZER_DISCARD: return 1;
    case GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: return 1;
    case GL_POINT_SPRITE_COORD_ORIGIN: return 1;
    case GL_DRAW_FRAMEBUFFER_BINDING: return 1;
    case GL_RENDERBUFFER_BINDING: return 1;
    case GL_READ_FRAMEBUFFER: return 1;
    case GL_DRAW_FRAMEBUFFER: return 1;
    case GL_READ_FRAMEBUFFER_BINDING: return 1;
    case GL_RENDERBUFFER_SAMPLES: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: return 1;
    case GL_MAX_COLOR_ATTACHMENTS: return 1;
    case GL_RENDERBUFFER_WIDTH: return 1;
    case GL_RENDERBUFFER_HEIGHT: return 1;
    case GL_RENDERBUFFER_INTERNAL_FORMAT: return 1;
    case GL_RENDERBUFFER_RED_SIZE: return 1;
    case GL_RENDERBUFFER_GREEN_SIZE: return 1;
    case GL_RENDERBUFFER_BLUE_SIZE: return 1;
    case GL_RENDERBUFFER_ALPHA_SIZE: return 1;
    case GL_RENDERBUFFER_DEPTH_SIZE: return 1;
    case GL_RENDERBUFFER_STENCIL_SIZE: return 1;
    case GL_MAX_SAMPLES: return 1;
    case GL_PRIMITIVE_RESTART_FIXED_INDEX: return 1;
    case GL_ANY_SAMPLES_PASSED_CONSERVATIVE: return 1;
    case GL_MAX_ELEMENT_INDEX: return 1;
    case GL_RGBA_INTEGER_MODE_EXT: return 1;
    case GL_FRAMEBUFFER_ATTACHMENT_LAYERED: return 1;
    case GL_FRAMEBUFFER_SRGB: return 1;
    case GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: return 1;
    case GL_GEOMETRY_SHADER: return 1;
    case GL_GEOMETRY_VERTICES_OUT_ARB: return 1;
    case GL_GEOMETRY_INPUT_TYPE_ARB: return 1;
    case GL_GEOMETRY_OUTPUT_TYPE_ARB: return 1;
    case GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: return 1;
    case GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: return 1;
    case GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_GEOMETRY_OUTPUT_VERTICES: return 1;
    case GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: return 1;
    case GL_MAX_SUBROUTINES: return 1;
    case GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: return 1;
    case GL_NAMED_STRING_TYPE_ARB: return 1;
    case GL_MAX_BINDABLE_UNIFORM_SIZE_EXT: return 1;
    case GL_UNIFORM_BUFFER_BINDING_EXT: return 1;
    case GL_NUM_SHADER_BINARY_FORMATS: return 1;
    case GL_SHADER_COMPILER: return 1;
    case GL_MAX_VERTEX_UNIFORM_VECTORS: return 1;
    case GL_MAX_VARYING_VECTORS: return 1;
    case GL_MAX_FRAGMENT_UNIFORM_VECTORS: return 1;
    case GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: return 1;
    case GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: return 1;
    case GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: return 1;
    case GL_TRANSFORM_FEEDBACK_BINDING: return 1;
    case GL_TEXTURE_SWIZZLE_R: return 1;
    case GL_TEXTURE_SWIZZLE_G: return 1;
    case GL_TEXTURE_SWIZZLE_B: return 1;
    case GL_TEXTURE_SWIZZLE_A: return 1;
    case GL_TEXTURE_SWIZZLE_RGBA: return 4;
    case GL_NUM_COMPATIBLE_SUBROUTINES: return 1;
    case GL_COMPATIBLE_SUBROUTINES: return 1;
    case GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: return 1;
    case GL_PROVOKING_VERTEX: return 1;
    case GL_SAMPLE_POSITION: return 1;
    case GL_SAMPLE_MASK: return 1;
    case GL_SAMPLE_MASK_VALUE: return 1;
    case GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: return 1;
    case GL_MAX_SAMPLE_MASK_WORDS: return 1;
    case GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: return 1;
    case GL_MAX_VERTEX_STREAMS: return 1;
    case GL_PATCH_VERTICES: return 1;
    case GL_PATCH_DEFAULT_INNER_LEVEL: return 2;
    case GL_PATCH_DEFAULT_OUTER_LEVEL: return 4;
    case GL_TESS_GEN_MODE: return 1;
    case GL_TESS_GEN_SPACING: return 1;
    case GL_TESS_GEN_VERTEX_ORDER: return 1;
    case GL_TESS_GEN_POINT_MODE: return 1;
    case GL_MAX_PATCH_VERTICES: return 1;
    case GL_MAX_TESS_GEN_LEVEL: return 1;
    case GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: return 1;
    case GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: return 1;
    case GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: return 1;
    case GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: return 1;
    case GL_MAX_TESS_PATCH_COMPONENTS: return 1;
    case GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: return 1;
    case GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: return 1;
    case GL_TESS_EVALUATION_SHADER: return 1;
    case GL_TESS_CONTROL_SHADER: return 1;
    case GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: return 1;
    case GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: return 1;
    case GL_COPY_READ_BUFFER: return 1;
    case GL_COPY_WRITE_BUFFER: return 1;
    case GL_DRAW_INDIRECT_BUFFER_BINDING: return 1;
    case GL_PRIMITIVE_RESTART: return 1;
    case GL_PRIMITIVE_RESTART_INDEX: return 1;
    case GL_TEXTURE_CUBE_MAP_ARRAY: return 1;
    case GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: return 1;
    case GL_DEPTH_CLAMP_NEAR_AMD: return 1;
    case GL_DEPTH_CLAMP_FAR_AMD: return 1;
    case GL_VIDEO_BUFFER_BINDING_NV: return 1;
    case GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: return 1;
    case GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: return 1;
    case GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: return 1;
    case GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX: return 1;
    case GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX: return 1;
    case GL_SHADER_STORAGE_BUFFER: return 1;
    case GL_SHADER_STORAGE_BUFFER_BINDING: return 1;
    case GL_SHADER_STORAGE_BUFFER_START: return 1;
    case GL_SHADER_STORAGE_BUFFER_SIZE: return 1;
    case GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: return 1;
    case GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: return 1;
    case GL_MAX_SHADER_STORAGE_BLOCK_SIZE: return 1;
    case GL_DEPTH_STENCIL_TEXTURE_MODE: return 1;
    case GL_MAX_COMPUTE_LOCAL_INVOCATIONS: return 1;
    case GL_DISPATCH_INDIRECT_BUFFER_BINDING: return 1;
    case GL_TEXTURE_BINDING_2D_MULTISAMPLE: return 1;
    case GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: return 1;
    case GL_TEXTURE_SAMPLES: return 1;
    case GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: return 1;
    case GL_MAX_COLOR_TEXTURE_SAMPLES: return 1;
    case GL_MAX_DEPTH_TEXTURE_SAMPLES: return 1;
    case GL_MAX_INTEGER_SAMPLES: return 1;
    case GL_MAX_SERVER_WAIT_TIMEOUT: return 1;
    case GL_BUFFER_ACCESS_FLAGS: return 1;
    case GL_BUFFER_MAP_LENGTH: return 1;
    case GL_BUFFER_MAP_OFFSET: return 1;
    case GL_CONTEXT_PROFILE_MASK: return 1;
    case GL_UNPACK_COMPRESSED_BLOCK_WIDTH: return 1;
    case GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: return 1;
    case GL_UNPACK_COMPRESSED_BLOCK_DEPTH: return 1;
    case GL_UNPACK_COMPRESSED_BLOCK_SIZE: return 1;
    case GL_PACK_COMPRESSED_BLOCK_WIDTH: return 1;
    case GL_PACK_COMPRESSED_BLOCK_HEIGHT: return 1;
    case GL_PACK_COMPRESSED_BLOCK_DEPTH: return 1;
    case GL_PACK_COMPRESSED_BLOCK_SIZE: return 1;
    case GL_TEXTURE_IMMUTABLE_FORMAT: return 1;
    case GL_MAX_DEBUG_MESSAGE_LENGTH: return 1;
    case GL_MAX_DEBUG_LOGGED_MESSAGES: return 1;
    case GL_DEBUG_LOGGED_MESSAGES: return 1;
    case GL_TEXTURE_BUFFER_OFFSET: return 1;
    case GL_TEXTURE_BUFFER_SIZE: return 1;
    case GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: return 1;
    case GL_COMPUTE_SHADER: return 1;
    case GL_MAX_COMPUTE_UNIFORM_BLOCKS: return 1;
    case GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: return 1;
    case GL_MAX_COMPUTE_IMAGE_UNIFORMS: return 1;
    case GL_MAX_COMPUTE_WORK_GROUP_COUNT: return 3;
    case GL_MAX_COMPUTE_WORK_GROUP_SIZE: return 3;
    case GL_DEBUG_OUTPUT: return 1;
    case GL_IS_PER_PATCH: return 1;
    case GL_ACTIVE_RESOURCES: return 1;
    case GL_MAX_NAME_LENGTH: return 1;
    case GL_MAX_NUM_ACTIVE_VARIABLES: return 1;
    case GL_MAX_NUM_COMPATIBLE_SUBROUTINES: return 1;
    case GL_NAME_LENGTH: return 1;
    case GL_TYPE: return 1;
    case GL_ARRAY_SIZE: return 1;
    case GL_OFFSET: return 1;
    case GL_BLOCK_INDEX: return 1;
    case GL_ARRAY_STRIDE: return 1;
    case GL_MATRIX_STRIDE: return 1;
    case GL_IS_ROW_MAJOR: return 1;
    case GL_ATOMIC_COUNTER_BUFFER_INDEX: return 1;
    case GL_BUFFER_BINDING: return 1;
    case GL_BUFFER_DATA_SIZE: return 1;
    case GL_NUM_ACTIVE_VARIABLES: return 1;
    case GL_ACTIVE_VARIABLES: return 1;
    case GL_REFERENCED_BY_VERTEX_SHADER: return 1;
    case GL_REFERENCED_BY_TESS_CONTROL_SHADER: return 1;
    case GL_REFERENCED_BY_TESS_EVALUATION_SHADER: return 1;
    case GL_REFERENCED_BY_GEOMETRY_SHADER: return 1;
    case GL_REFERENCED_BY_FRAGMENT_SHADER: return 1;
    case GL_REFERENCED_BY_COMPUTE_SHADER: return 1;
    case GL_TOP_LEVEL_ARRAY_SIZE: return 1;
    case GL_TOP_LEVEL_ARRAY_STRIDE: return 1;
    case GL_LOCATION: return 1;
    case GL_LOCATION_INDEX: return 1;
    case GL_FRAMEBUFFER_DEFAULT_WIDTH: return 1;
    case GL_FRAMEBUFFER_DEFAULT_HEIGHT: return 1;
    case GL_FRAMEBUFFER_DEFAULT_LAYERS: return 1;
    case GL_FRAMEBUFFER_DEFAULT_SAMPLES: return 1;
    case GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: return 1;
    case GL_MAX_FRAMEBUFFER_WIDTH: return 1;
    case GL_MAX_FRAMEBUFFER_HEIGHT: return 1;
    case GL_MAX_FRAMEBUFFER_LAYERS: return 1;
    case GL_MAX_FRAMEBUFFER_SAMPLES: return 1;
    default:
        os::log("apitrace: warning: %s: unknown GLenum 0x%04X\n", __FUNCTION__, pname);
        return 1;
    }
}

static inline bool
can_unpack_subimage(void) {
    gltrace::Context *ctx = gltrace::getContext();
    return (ctx->profile == gltrace::PROFILE_COMPAT);
}


static const trace::EnumValue _enumGLenum_values[] = {
    {"GL_ZERO", GL_ZERO},
    {"GL_ONE", GL_ONE},
    {"GL_ACCUM", GL_ACCUM},
    {"GL_LOAD", GL_LOAD},
    {"GL_RETURN", GL_RETURN},
    {"GL_MULT", GL_MULT},
    {"GL_ADD", GL_ADD},
    {"GL_NEVER", GL_NEVER},
    {"GL_LESS", GL_LESS},
    {"GL_EQUAL", GL_EQUAL},
    {"GL_LEQUAL", GL_LEQUAL},
    {"GL_GREATER", GL_GREATER},
    {"GL_NOTEQUAL", GL_NOTEQUAL},
    {"GL_GEQUAL", GL_GEQUAL},
    {"GL_ALWAYS", GL_ALWAYS},
    {"GL_SRC_COLOR", GL_SRC_COLOR},
    {"GL_ONE_MINUS_SRC_COLOR", GL_ONE_MINUS_SRC_COLOR},
    {"GL_SRC_ALPHA", GL_SRC_ALPHA},
    {"GL_ONE_MINUS_SRC_ALPHA", GL_ONE_MINUS_SRC_ALPHA},
    {"GL_DST_ALPHA", GL_DST_ALPHA},
    {"GL_ONE_MINUS_DST_ALPHA", GL_ONE_MINUS_DST_ALPHA},
    {"GL_DST_COLOR", GL_DST_COLOR},
    {"GL_ONE_MINUS_DST_COLOR", GL_ONE_MINUS_DST_COLOR},
    {"GL_SRC_ALPHA_SATURATE", GL_SRC_ALPHA_SATURATE},
    {"GL_FRONT_LEFT", GL_FRONT_LEFT},
    {"GL_FRONT_RIGHT", GL_FRONT_RIGHT},
    {"GL_BACK_LEFT", GL_BACK_LEFT},
    {"GL_BACK_RIGHT", GL_BACK_RIGHT},
    {"GL_FRONT", GL_FRONT},
    {"GL_BACK", GL_BACK},
    {"GL_LEFT", GL_LEFT},
    {"GL_RIGHT", GL_RIGHT},
    {"GL_FRONT_AND_BACK", GL_FRONT_AND_BACK},
    {"GL_AUX0", GL_AUX0},
    {"GL_AUX1", GL_AUX1},
    {"GL_AUX2", GL_AUX2},
    {"GL_AUX3", GL_AUX3},
    {"GL_INVALID_ENUM", GL_INVALID_ENUM},
    {"GL_INVALID_VALUE", GL_INVALID_VALUE},
    {"GL_INVALID_OPERATION", GL_INVALID_OPERATION},
    {"GL_STACK_OVERFLOW", GL_STACK_OVERFLOW},
    {"GL_STACK_UNDERFLOW", GL_STACK_UNDERFLOW},
    {"GL_OUT_OF_MEMORY", GL_OUT_OF_MEMORY},
    {"GL_INVALID_FRAMEBUFFER_OPERATION", GL_INVALID_FRAMEBUFFER_OPERATION},
    {"GL_2D", GL_2D},
    {"GL_3D", GL_3D},
    {"GL_3D_COLOR", GL_3D_COLOR},
    {"GL_3D_COLOR_TEXTURE", GL_3D_COLOR_TEXTURE},
    {"GL_4D_COLOR_TEXTURE", GL_4D_COLOR_TEXTURE},
    {"GL_PASS_THROUGH_TOKEN", GL_PASS_THROUGH_TOKEN},
    {"GL_POINT_TOKEN", GL_POINT_TOKEN},
    {"GL_LINE_TOKEN", GL_LINE_TOKEN},
    {"GL_POLYGON_TOKEN", GL_POLYGON_TOKEN},
    {"GL_BITMAP_TOKEN", GL_BITMAP_TOKEN},
    {"GL_DRAW_PIXEL_TOKEN", GL_DRAW_PIXEL_TOKEN},
    {"GL_COPY_PIXEL_TOKEN", GL_COPY_PIXEL_TOKEN},
    {"GL_LINE_RESET_TOKEN", GL_LINE_RESET_TOKEN},
    {"GL_EXP", GL_EXP},
    {"GL_EXP2", GL_EXP2},
    {"GL_CW", GL_CW},
    {"GL_CCW", GL_CCW},
    {"GL_COEFF", GL_COEFF},
    {"GL_ORDER", GL_ORDER},
    {"GL_DOMAIN", GL_DOMAIN},
    {"GL_CURRENT_COLOR", GL_CURRENT_COLOR},
    {"GL_CURRENT_INDEX", GL_CURRENT_INDEX},
    {"GL_CURRENT_NORMAL", GL_CURRENT_NORMAL},
    {"GL_CURRENT_TEXTURE_COORDS", GL_CURRENT_TEXTURE_COORDS},
    {"GL_CURRENT_RASTER_COLOR", GL_CURRENT_RASTER_COLOR},
    {"GL_CURRENT_RASTER_INDEX", GL_CURRENT_RASTER_INDEX},
    {"GL_CURRENT_RASTER_TEXTURE_COORDS", GL_CURRENT_RASTER_TEXTURE_COORDS},
    {"GL_CURRENT_RASTER_POSITION", GL_CURRENT_RASTER_POSITION},
    {"GL_CURRENT_RASTER_POSITION_VALID", GL_CURRENT_RASTER_POSITION_VALID},
    {"GL_CURRENT_RASTER_DISTANCE", GL_CURRENT_RASTER_DISTANCE},
    {"GL_POINT_SMOOTH", GL_POINT_SMOOTH},
    {"GL_POINT_SIZE", GL_POINT_SIZE},
    {"GL_POINT_SIZE_RANGE", GL_POINT_SIZE_RANGE},
    {"GL_POINT_SIZE_GRANULARITY", GL_POINT_SIZE_GRANULARITY},
    {"GL_LINE_SMOOTH", GL_LINE_SMOOTH},
    {"GL_LINE_WIDTH", GL_LINE_WIDTH},
    {"GL_LINE_WIDTH_RANGE", GL_LINE_WIDTH_RANGE},
    {"GL_LINE_WIDTH_GRANULARITY", GL_LINE_WIDTH_GRANULARITY},
    {"GL_LINE_STIPPLE", GL_LINE_STIPPLE},
    {"GL_LINE_STIPPLE_PATTERN", GL_LINE_STIPPLE_PATTERN},
    {"GL_LINE_STIPPLE_REPEAT", GL_LINE_STIPPLE_REPEAT},
    {"GL_LIST_MODE", GL_LIST_MODE},
    {"GL_MAX_LIST_NESTING", GL_MAX_LIST_NESTING},
    {"GL_LIST_BASE", GL_LIST_BASE},
    {"GL_LIST_INDEX", GL_LIST_INDEX},
    {"GL_POLYGON_MODE", GL_POLYGON_MODE},
    {"GL_POLYGON_SMOOTH", GL_POLYGON_SMOOTH},
    {"GL_POLYGON_STIPPLE", GL_POLYGON_STIPPLE},
    {"GL_EDGE_FLAG", GL_EDGE_FLAG},
    {"GL_CULL_FACE", GL_CULL_FACE},
    {"GL_CULL_FACE_MODE", GL_CULL_FACE_MODE},
    {"GL_FRONT_FACE", GL_FRONT_FACE},
    {"GL_LIGHTING", GL_LIGHTING},
    {"GL_LIGHT_MODEL_LOCAL_VIEWER", GL_LIGHT_MODEL_LOCAL_VIEWER},
    {"GL_LIGHT_MODEL_TWO_SIDE", GL_LIGHT_MODEL_TWO_SIDE},
    {"GL_LIGHT_MODEL_AMBIENT", GL_LIGHT_MODEL_AMBIENT},
    {"GL_SHADE_MODEL", GL_SHADE_MODEL},
    {"GL_COLOR_MATERIAL_FACE", GL_COLOR_MATERIAL_FACE},
    {"GL_COLOR_MATERIAL_PARAMETER", GL_COLOR_MATERIAL_PARAMETER},
    {"GL_COLOR_MATERIAL", GL_COLOR_MATERIAL},
    {"GL_FOG", GL_FOG},
    {"GL_FOG_INDEX", GL_FOG_INDEX},
    {"GL_FOG_DENSITY", GL_FOG_DENSITY},
    {"GL_FOG_START", GL_FOG_START},
    {"GL_FOG_END", GL_FOG_END},
    {"GL_FOG_MODE", GL_FOG_MODE},
    {"GL_FOG_COLOR", GL_FOG_COLOR},
    {"GL_DEPTH_RANGE", GL_DEPTH_RANGE},
    {"GL_DEPTH_TEST", GL_DEPTH_TEST},
    {"GL_DEPTH_WRITEMASK", GL_DEPTH_WRITEMASK},
    {"GL_DEPTH_CLEAR_VALUE", GL_DEPTH_CLEAR_VALUE},
    {"GL_DEPTH_FUNC", GL_DEPTH_FUNC},
    {"GL_ACCUM_CLEAR_VALUE", GL_ACCUM_CLEAR_VALUE},
    {"GL_STENCIL_TEST", GL_STENCIL_TEST},
    {"GL_STENCIL_CLEAR_VALUE", GL_STENCIL_CLEAR_VALUE},
    {"GL_STENCIL_FUNC", GL_STENCIL_FUNC},
    {"GL_STENCIL_VALUE_MASK", GL_STENCIL_VALUE_MASK},
    {"GL_STENCIL_FAIL", GL_STENCIL_FAIL},
    {"GL_STENCIL_PASS_DEPTH_FAIL", GL_STENCIL_PASS_DEPTH_FAIL},
    {"GL_STENCIL_PASS_DEPTH_PASS", GL_STENCIL_PASS_DEPTH_PASS},
    {"GL_STENCIL_REF", GL_STENCIL_REF},
    {"GL_STENCIL_WRITEMASK", GL_STENCIL_WRITEMASK},
    {"GL_MATRIX_MODE", GL_MATRIX_MODE},
    {"GL_NORMALIZE", GL_NORMALIZE},
    {"GL_VIEWPORT", GL_VIEWPORT},
    {"GL_MODELVIEW_STACK_DEPTH", GL_MODELVIEW_STACK_DEPTH},
    {"GL_PROJECTION_STACK_DEPTH", GL_PROJECTION_STACK_DEPTH},
    {"GL_TEXTURE_STACK_DEPTH", GL_TEXTURE_STACK_DEPTH},
    {"GL_MODELVIEW_MATRIX", GL_MODELVIEW_MATRIX},
    {"GL_PROJECTION_MATRIX", GL_PROJECTION_MATRIX},
    {"GL_TEXTURE_MATRIX", GL_TEXTURE_MATRIX},
    {"GL_ATTRIB_STACK_DEPTH", GL_ATTRIB_STACK_DEPTH},
    {"GL_CLIENT_ATTRIB_STACK_DEPTH", GL_CLIENT_ATTRIB_STACK_DEPTH},
    {"GL_ALPHA_TEST", GL_ALPHA_TEST},
    {"GL_ALPHA_TEST_FUNC", GL_ALPHA_TEST_FUNC},
    {"GL_ALPHA_TEST_REF", GL_ALPHA_TEST_REF},
    {"GL_DITHER", GL_DITHER},
    {"GL_BLEND_DST", GL_BLEND_DST},
    {"GL_BLEND_SRC", GL_BLEND_SRC},
    {"GL_BLEND", GL_BLEND},
    {"GL_LOGIC_OP_MODE", GL_LOGIC_OP_MODE},
    {"GL_INDEX_LOGIC_OP", GL_INDEX_LOGIC_OP},
    {"GL_COLOR_LOGIC_OP", GL_COLOR_LOGIC_OP},
    {"GL_AUX_BUFFERS", GL_AUX_BUFFERS},
    {"GL_DRAW_BUFFER", GL_DRAW_BUFFER},
    {"GL_READ_BUFFER", GL_READ_BUFFER},
    {"GL_SCISSOR_BOX", GL_SCISSOR_BOX},
    {"GL_SCISSOR_TEST", GL_SCISSOR_TEST},
    {"GL_INDEX_CLEAR_VALUE", GL_INDEX_CLEAR_VALUE},
    {"GL_INDEX_WRITEMASK", GL_INDEX_WRITEMASK},
    {"GL_COLOR_CLEAR_VALUE", GL_COLOR_CLEAR_VALUE},
    {"GL_COLOR_WRITEMASK", GL_COLOR_WRITEMASK},
    {"GL_INDEX_MODE", GL_INDEX_MODE},
    {"GL_RGBA_MODE", GL_RGBA_MODE},
    {"GL_DOUBLEBUFFER", GL_DOUBLEBUFFER},
    {"GL_STEREO", GL_STEREO},
    {"GL_RENDER_MODE", GL_RENDER_MODE},
    {"GL_PERSPECTIVE_CORRECTION_HINT", GL_PERSPECTIVE_CORRECTION_HINT},
    {"GL_POINT_SMOOTH_HINT", GL_POINT_SMOOTH_HINT},
    {"GL_LINE_SMOOTH_HINT", GL_LINE_SMOOTH_HINT},
    {"GL_POLYGON_SMOOTH_HINT", GL_POLYGON_SMOOTH_HINT},
    {"GL_FOG_HINT", GL_FOG_HINT},
    {"GL_TEXTURE_GEN_S", GL_TEXTURE_GEN_S},
    {"GL_TEXTURE_GEN_T", GL_TEXTURE_GEN_T},
    {"GL_TEXTURE_GEN_R", GL_TEXTURE_GEN_R},
    {"GL_TEXTURE_GEN_Q", GL_TEXTURE_GEN_Q},
    {"GL_PIXEL_MAP_I_TO_I", GL_PIXEL_MAP_I_TO_I},
    {"GL_PIXEL_MAP_S_TO_S", GL_PIXEL_MAP_S_TO_S},
    {"GL_PIXEL_MAP_I_TO_R", GL_PIXEL_MAP_I_TO_R},
    {"GL_PIXEL_MAP_I_TO_G", GL_PIXEL_MAP_I_TO_G},
    {"GL_PIXEL_MAP_I_TO_B", GL_PIXEL_MAP_I_TO_B},
    {"GL_PIXEL_MAP_I_TO_A", GL_PIXEL_MAP_I_TO_A},
    {"GL_PIXEL_MAP_R_TO_R", GL_PIXEL_MAP_R_TO_R},
    {"GL_PIXEL_MAP_G_TO_G", GL_PIXEL_MAP_G_TO_G},
    {"GL_PIXEL_MAP_B_TO_B", GL_PIXEL_MAP_B_TO_B},
    {"GL_PIXEL_MAP_A_TO_A", GL_PIXEL_MAP_A_TO_A},
    {"GL_PIXEL_MAP_I_TO_I_SIZE", GL_PIXEL_MAP_I_TO_I_SIZE},
    {"GL_PIXEL_MAP_S_TO_S_SIZE", GL_PIXEL_MAP_S_TO_S_SIZE},
    {"GL_PIXEL_MAP_I_TO_R_SIZE", GL_PIXEL_MAP_I_TO_R_SIZE},
    {"GL_PIXEL_MAP_I_TO_G_SIZE", GL_PIXEL_MAP_I_TO_G_SIZE},
    {"GL_PIXEL_MAP_I_TO_B_SIZE", GL_PIXEL_MAP_I_TO_B_SIZE},
    {"GL_PIXEL_MAP_I_TO_A_SIZE", GL_PIXEL_MAP_I_TO_A_SIZE},
    {"GL_PIXEL_MAP_R_TO_R_SIZE", GL_PIXEL_MAP_R_TO_R_SIZE},
    {"GL_PIXEL_MAP_G_TO_G_SIZE", GL_PIXEL_MAP_G_TO_G_SIZE},
    {"GL_PIXEL_MAP_B_TO_B_SIZE", GL_PIXEL_MAP_B_TO_B_SIZE},
    {"GL_PIXEL_MAP_A_TO_A_SIZE", GL_PIXEL_MAP_A_TO_A_SIZE},
    {"GL_UNPACK_SWAP_BYTES", GL_UNPACK_SWAP_BYTES},
    {"GL_UNPACK_LSB_FIRST", GL_UNPACK_LSB_FIRST},
    {"GL_UNPACK_ROW_LENGTH", GL_UNPACK_ROW_LENGTH},
    {"GL_UNPACK_SKIP_ROWS", GL_UNPACK_SKIP_ROWS},
    {"GL_UNPACK_SKIP_PIXELS", GL_UNPACK_SKIP_PIXELS},
    {"GL_UNPACK_ALIGNMENT", GL_UNPACK_ALIGNMENT},
    {"GL_PACK_SWAP_BYTES", GL_PACK_SWAP_BYTES},
    {"GL_PACK_LSB_FIRST", GL_PACK_LSB_FIRST},
    {"GL_PACK_ROW_LENGTH", GL_PACK_ROW_LENGTH},
    {"GL_PACK_SKIP_ROWS", GL_PACK_SKIP_ROWS},
    {"GL_PACK_SKIP_PIXELS", GL_PACK_SKIP_PIXELS},
    {"GL_PACK_ALIGNMENT", GL_PACK_ALIGNMENT},
    {"GL_MAP_COLOR", GL_MAP_COLOR},
    {"GL_MAP_STENCIL", GL_MAP_STENCIL},
    {"GL_INDEX_SHIFT", GL_INDEX_SHIFT},
    {"GL_INDEX_OFFSET", GL_INDEX_OFFSET},
    {"GL_RED_SCALE", GL_RED_SCALE},
    {"GL_RED_BIAS", GL_RED_BIAS},
    {"GL_ZOOM_X", GL_ZOOM_X},
    {"GL_ZOOM_Y", GL_ZOOM_Y},
    {"GL_GREEN_SCALE", GL_GREEN_SCALE},
    {"GL_GREEN_BIAS", GL_GREEN_BIAS},
    {"GL_BLUE_SCALE", GL_BLUE_SCALE},
    {"GL_BLUE_BIAS", GL_BLUE_BIAS},
    {"GL_ALPHA_SCALE", GL_ALPHA_SCALE},
    {"GL_ALPHA_BIAS", GL_ALPHA_BIAS},
    {"GL_DEPTH_SCALE", GL_DEPTH_SCALE},
    {"GL_DEPTH_BIAS", GL_DEPTH_BIAS},
    {"GL_MAX_EVAL_ORDER", GL_MAX_EVAL_ORDER},
    {"GL_MAX_LIGHTS", GL_MAX_LIGHTS},
    {"GL_MAX_CLIP_DISTANCES", GL_MAX_CLIP_DISTANCES},
    {"GL_MAX_TEXTURE_SIZE", GL_MAX_TEXTURE_SIZE},
    {"GL_MAX_PIXEL_MAP_TABLE", GL_MAX_PIXEL_MAP_TABLE},
    {"GL_MAX_ATTRIB_STACK_DEPTH", GL_MAX_ATTRIB_STACK_DEPTH},
    {"GL_MAX_MODELVIEW_STACK_DEPTH", GL_MAX_MODELVIEW_STACK_DEPTH},
    {"GL_MAX_NAME_STACK_DEPTH", GL_MAX_NAME_STACK_DEPTH},
    {"GL_MAX_PROJECTION_STACK_DEPTH", GL_MAX_PROJECTION_STACK_DEPTH},
    {"GL_MAX_TEXTURE_STACK_DEPTH", GL_MAX_TEXTURE_STACK_DEPTH},
    {"GL_MAX_VIEWPORT_DIMS", GL_MAX_VIEWPORT_DIMS},
    {"GL_MAX_CLIENT_ATTRIB_STACK_DEPTH", GL_MAX_CLIENT_ATTRIB_STACK_DEPTH},
    {"GL_SUBPIXEL_BITS", GL_SUBPIXEL_BITS},
    {"GL_INDEX_BITS", GL_INDEX_BITS},
    {"GL_RED_BITS", GL_RED_BITS},
    {"GL_GREEN_BITS", GL_GREEN_BITS},
    {"GL_BLUE_BITS", GL_BLUE_BITS},
    {"GL_ALPHA_BITS", GL_ALPHA_BITS},
    {"GL_DEPTH_BITS", GL_DEPTH_BITS},
    {"GL_STENCIL_BITS", GL_STENCIL_BITS},
    {"GL_ACCUM_RED_BITS", GL_ACCUM_RED_BITS},
    {"GL_ACCUM_GREEN_BITS", GL_ACCUM_GREEN_BITS},
    {"GL_ACCUM_BLUE_BITS", GL_ACCUM_BLUE_BITS},
    {"GL_ACCUM_ALPHA_BITS", GL_ACCUM_ALPHA_BITS},
    {"GL_NAME_STACK_DEPTH", GL_NAME_STACK_DEPTH},
    {"GL_AUTO_NORMAL", GL_AUTO_NORMAL},
    {"GL_MAP1_COLOR_4", GL_MAP1_COLOR_4},
    {"GL_MAP1_INDEX", GL_MAP1_INDEX},
    {"GL_MAP1_NORMAL", GL_MAP1_NORMAL},
    {"GL_MAP1_TEXTURE_COORD_1", GL_MAP1_TEXTURE_COORD_1},
    {"GL_MAP1_TEXTURE_COORD_2", GL_MAP1_TEXTURE_COORD_2},
    {"GL_MAP1_TEXTURE_COORD_3", GL_MAP1_TEXTURE_COORD_3},
    {"GL_MAP1_TEXTURE_COORD_4", GL_MAP1_TEXTURE_COORD_4},
    {"GL_MAP1_VERTEX_3", GL_MAP1_VERTEX_3},
    {"GL_MAP1_VERTEX_4", GL_MAP1_VERTEX_4},
    {"GL_MAP2_COLOR_4", GL_MAP2_COLOR_4},
    {"GL_MAP2_INDEX", GL_MAP2_INDEX},
    {"GL_MAP2_NORMAL", GL_MAP2_NORMAL},
    {"GL_MAP2_TEXTURE_COORD_1", GL_MAP2_TEXTURE_COORD_1},
    {"GL_MAP2_TEXTURE_COORD_2", GL_MAP2_TEXTURE_COORD_2},
    {"GL_MAP2_TEXTURE_COORD_3", GL_MAP2_TEXTURE_COORD_3},
    {"GL_MAP2_TEXTURE_COORD_4", GL_MAP2_TEXTURE_COORD_4},
    {"GL_MAP2_VERTEX_3", GL_MAP2_VERTEX_3},
    {"GL_MAP2_VERTEX_4", GL_MAP2_VERTEX_4},
    {"GL_MAP1_GRID_DOMAIN", GL_MAP1_GRID_DOMAIN},
    {"GL_MAP1_GRID_SEGMENTS", GL_MAP1_GRID_SEGMENTS},
    {"GL_MAP2_GRID_DOMAIN", GL_MAP2_GRID_DOMAIN},
    {"GL_MAP2_GRID_SEGMENTS", GL_MAP2_GRID_SEGMENTS},
    {"GL_TEXTURE_1D", GL_TEXTURE_1D},
    {"GL_TEXTURE_2D", GL_TEXTURE_2D},
    {"GL_FEEDBACK_BUFFER_POINTER", GL_FEEDBACK_BUFFER_POINTER},
    {"GL_FEEDBACK_BUFFER_SIZE", GL_FEEDBACK_BUFFER_SIZE},
    {"GL_FEEDBACK_BUFFER_TYPE", GL_FEEDBACK_BUFFER_TYPE},
    {"GL_SELECTION_BUFFER_POINTER", GL_SELECTION_BUFFER_POINTER},
    {"GL_SELECTION_BUFFER_SIZE", GL_SELECTION_BUFFER_SIZE},
    {"GL_TEXTURE_WIDTH", GL_TEXTURE_WIDTH},
    {"GL_TEXTURE_HEIGHT", GL_TEXTURE_HEIGHT},
    {"GL_TEXTURE_INTERNAL_FORMAT", GL_TEXTURE_INTERNAL_FORMAT},
    {"GL_TEXTURE_BORDER_COLOR", GL_TEXTURE_BORDER_COLOR},
    {"GL_TEXTURE_BORDER", GL_TEXTURE_BORDER},
    {"GL_DONT_CARE", GL_DONT_CARE},
    {"GL_FASTEST", GL_FASTEST},
    {"GL_NICEST", GL_NICEST},
    {"GL_AMBIENT", GL_AMBIENT},
    {"GL_DIFFUSE", GL_DIFFUSE},
    {"GL_SPECULAR", GL_SPECULAR},
    {"GL_POSITION", GL_POSITION},
    {"GL_SPOT_DIRECTION", GL_SPOT_DIRECTION},
    {"GL_SPOT_EXPONENT", GL_SPOT_EXPONENT},
    {"GL_SPOT_CUTOFF", GL_SPOT_CUTOFF},
    {"GL_CONSTANT_ATTENUATION", GL_CONSTANT_ATTENUATION},
    {"GL_LINEAR_ATTENUATION", GL_LINEAR_ATTENUATION},
    {"GL_QUADRATIC_ATTENUATION", GL_QUADRATIC_ATTENUATION},
    {"GL_COMPILE", GL_COMPILE},
    {"GL_COMPILE_AND_EXECUTE", GL_COMPILE_AND_EXECUTE},
    {"GL_BYTE", GL_BYTE},
    {"GL_UNSIGNED_BYTE", GL_UNSIGNED_BYTE},
    {"GL_SHORT", GL_SHORT},
    {"GL_UNSIGNED_SHORT", GL_UNSIGNED_SHORT},
    {"GL_INT", GL_INT},
    {"GL_UNSIGNED_INT", GL_UNSIGNED_INT},
    {"GL_FLOAT", GL_FLOAT},
    {"GL_2_BYTES", GL_2_BYTES},
    {"GL_3_BYTES", GL_3_BYTES},
    {"GL_4_BYTES", GL_4_BYTES},
    {"GL_DOUBLE", GL_DOUBLE},
    {"GL_HALF_FLOAT", GL_HALF_FLOAT},
    {"GL_FIXED", GL_FIXED},
    {"GL_INT64_NV", GL_INT64_NV},
    {"GL_UNSIGNED_INT64_NV", GL_UNSIGNED_INT64_NV},
    {"GL_CLEAR", GL_CLEAR},
    {"GL_AND", GL_AND},
    {"GL_AND_REVERSE", GL_AND_REVERSE},
    {"GL_COPY", GL_COPY},
    {"GL_AND_INVERTED", GL_AND_INVERTED},
    {"GL_NOOP", GL_NOOP},
    {"GL_XOR", GL_XOR},
    {"GL_OR", GL_OR},
    {"GL_NOR", GL_NOR},
    {"GL_EQUIV", GL_EQUIV},
    {"GL_INVERT", GL_INVERT},
    {"GL_OR_REVERSE", GL_OR_REVERSE},
    {"GL_COPY_INVERTED", GL_COPY_INVERTED},
    {"GL_OR_INVERTED", GL_OR_INVERTED},
    {"GL_NAND", GL_NAND},
    {"GL_SET", GL_SET},
    {"GL_EMISSION", GL_EMISSION},
    {"GL_SHININESS", GL_SHININESS},
    {"GL_AMBIENT_AND_DIFFUSE", GL_AMBIENT_AND_DIFFUSE},
    {"GL_COLOR_INDEXES", GL_COLOR_INDEXES},
    {"GL_MODELVIEW", GL_MODELVIEW},
    {"GL_PROJECTION", GL_PROJECTION},
    {"GL_TEXTURE", GL_TEXTURE},
    {"GL_COLOR", GL_COLOR},
    {"GL_DEPTH", GL_DEPTH},
    {"GL_STENCIL", GL_STENCIL},
    {"GL_COLOR_INDEX", GL_COLOR_INDEX},
    {"GL_STENCIL_INDEX", GL_STENCIL_INDEX},
    {"GL_DEPTH_COMPONENT", GL_DEPTH_COMPONENT},
    {"GL_RED", GL_RED},
    {"GL_GREEN", GL_GREEN},
    {"GL_BLUE", GL_BLUE},
    {"GL_ALPHA", GL_ALPHA},
    {"GL_RGB", GL_RGB},
    {"GL_RGBA", GL_RGBA},
    {"GL_LUMINANCE", GL_LUMINANCE},
    {"GL_LUMINANCE_ALPHA", GL_LUMINANCE_ALPHA},
    {"GL_RASTER_POSITION_UNCLIPPED_IBM", GL_RASTER_POSITION_UNCLIPPED_IBM},
    {"GL_BITMAP", GL_BITMAP},
    {"GL_PREFER_DOUBLEBUFFER_HINT_PGI", GL_PREFER_DOUBLEBUFFER_HINT_PGI},
    {"GL_CONSERVE_MEMORY_HINT_PGI", GL_CONSERVE_MEMORY_HINT_PGI},
    {"GL_RECLAIM_MEMORY_HINT_PGI", GL_RECLAIM_MEMORY_HINT_PGI},
    {"GL_NATIVE_GRAPHICS_HANDLE_PGI", GL_NATIVE_GRAPHICS_HANDLE_PGI},
    {"GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI", GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI},
    {"GL_NATIVE_GRAPHICS_END_HINT_PGI", GL_NATIVE_GRAPHICS_END_HINT_PGI},
    {"GL_ALWAYS_FAST_HINT_PGI", GL_ALWAYS_FAST_HINT_PGI},
    {"GL_ALWAYS_SOFT_HINT_PGI", GL_ALWAYS_SOFT_HINT_PGI},
    {"GL_ALLOW_DRAW_OBJ_HINT_PGI", GL_ALLOW_DRAW_OBJ_HINT_PGI},
    {"GL_ALLOW_DRAW_WIN_HINT_PGI", GL_ALLOW_DRAW_WIN_HINT_PGI},
    {"GL_ALLOW_DRAW_FRG_HINT_PGI", GL_ALLOW_DRAW_FRG_HINT_PGI},
    {"GL_ALLOW_DRAW_MEM_HINT_PGI", GL_ALLOW_DRAW_MEM_HINT_PGI},
    {"GL_STRICT_DEPTHFUNC_HINT_PGI", GL_STRICT_DEPTHFUNC_HINT_PGI},
    {"GL_STRICT_LIGHTING_HINT_PGI", GL_STRICT_LIGHTING_HINT_PGI},
    {"GL_STRICT_SCISSOR_HINT_PGI", GL_STRICT_SCISSOR_HINT_PGI},
    {"GL_FULL_STIPPLE_HINT_PGI", GL_FULL_STIPPLE_HINT_PGI},
    {"GL_CLIP_NEAR_HINT_PGI", GL_CLIP_NEAR_HINT_PGI},
    {"GL_CLIP_FAR_HINT_PGI", GL_CLIP_FAR_HINT_PGI},
    {"GL_WIDE_LINE_HINT_PGI", GL_WIDE_LINE_HINT_PGI},
    {"GL_BACK_NORMALS_HINT_PGI", GL_BACK_NORMALS_HINT_PGI},
    {"GL_VERTEX_DATA_HINT_PGI", GL_VERTEX_DATA_HINT_PGI},
    {"GL_VERTEX_CONSISTENT_HINT_PGI", GL_VERTEX_CONSISTENT_HINT_PGI},
    {"GL_MATERIAL_SIDE_HINT_PGI", GL_MATERIAL_SIDE_HINT_PGI},
    {"GL_MAX_VERTEX_HINT_PGI", GL_MAX_VERTEX_HINT_PGI},
    {"GL_POINT", GL_POINT},
    {"GL_LINE", GL_LINE},
    {"GL_FILL", GL_FILL},
    {"GL_RENDER", GL_RENDER},
    {"GL_FEEDBACK", GL_FEEDBACK},
    {"GL_SELECT", GL_SELECT},
    {"GL_FLAT", GL_FLAT},
    {"GL_SMOOTH", GL_SMOOTH},
    {"GL_KEEP", GL_KEEP},
    {"GL_REPLACE", GL_REPLACE},
    {"GL_INCR", GL_INCR},
    {"GL_DECR", GL_DECR},
    {"GL_VENDOR", GL_VENDOR},
    {"GL_RENDERER", GL_RENDERER},
    {"GL_VERSION", GL_VERSION},
    {"GL_EXTENSIONS", GL_EXTENSIONS},
    {"GL_S", GL_S},
    {"GL_T", GL_T},
    {"GL_R", GL_R},
    {"GL_Q", GL_Q},
    {"GL_MODULATE", GL_MODULATE},
    {"GL_DECAL", GL_DECAL},
    {"GL_TEXTURE_ENV_MODE", GL_TEXTURE_ENV_MODE},
    {"GL_TEXTURE_ENV_COLOR", GL_TEXTURE_ENV_COLOR},
    {"GL_TEXTURE_ENV", GL_TEXTURE_ENV},
    {"GL_EYE_LINEAR", GL_EYE_LINEAR},
    {"GL_OBJECT_LINEAR", GL_OBJECT_LINEAR},
    {"GL_SPHERE_MAP", GL_SPHERE_MAP},
    {"GL_TEXTURE_GEN_MODE", GL_TEXTURE_GEN_MODE},
    {"GL_OBJECT_PLANE", GL_OBJECT_PLANE},
    {"GL_EYE_PLANE", GL_EYE_PLANE},
    {"GL_NEAREST", GL_NEAREST},
    {"GL_LINEAR", GL_LINEAR},
    {"GL_NEAREST_MIPMAP_NEAREST", GL_NEAREST_MIPMAP_NEAREST},
    {"GL_LINEAR_MIPMAP_NEAREST", GL_LINEAR_MIPMAP_NEAREST},
    {"GL_NEAREST_MIPMAP_LINEAR", GL_NEAREST_MIPMAP_LINEAR},
    {"GL_LINEAR_MIPMAP_LINEAR", GL_LINEAR_MIPMAP_LINEAR},
    {"GL_TEXTURE_MAG_FILTER", GL_TEXTURE_MAG_FILTER},
    {"GL_TEXTURE_MIN_FILTER", GL_TEXTURE_MIN_FILTER},
    {"GL_TEXTURE_WRAP_S", GL_TEXTURE_WRAP_S},
    {"GL_TEXTURE_WRAP_T", GL_TEXTURE_WRAP_T},
    {"GL_CLAMP", GL_CLAMP},
    {"GL_REPEAT", GL_REPEAT},
    {"GL_POLYGON_OFFSET_UNITS", GL_POLYGON_OFFSET_UNITS},
    {"GL_POLYGON_OFFSET_POINT", GL_POLYGON_OFFSET_POINT},
    {"GL_POLYGON_OFFSET_LINE", GL_POLYGON_OFFSET_LINE},
    {"GL_R3_G3_B2", GL_R3_G3_B2},
    {"GL_V2F", GL_V2F},
    {"GL_V3F", GL_V3F},
    {"GL_C4UB_V2F", GL_C4UB_V2F},
    {"GL_C4UB_V3F", GL_C4UB_V3F},
    {"GL_C3F_V3F", GL_C3F_V3F},
    {"GL_N3F_V3F", GL_N3F_V3F},
    {"GL_C4F_N3F_V3F", GL_C4F_N3F_V3F},
    {"GL_T2F_V3F", GL_T2F_V3F},
    {"GL_T4F_V4F", GL_T4F_V4F},
    {"GL_T2F_C4UB_V3F", GL_T2F_C4UB_V3F},
    {"GL_T2F_C3F_V3F", GL_T2F_C3F_V3F},
    {"GL_T2F_N3F_V3F", GL_T2F_N3F_V3F},
    {"GL_T2F_C4F_N3F_V3F", GL_T2F_C4F_N3F_V3F},
    {"GL_T4F_C4F_N3F_V4F", GL_T4F_C4F_N3F_V4F},
    {"GL_CLIP_DISTANCE0", GL_CLIP_DISTANCE0},
    {"GL_CLIP_DISTANCE1", GL_CLIP_DISTANCE1},
    {"GL_CLIP_DISTANCE2", GL_CLIP_DISTANCE2},
    {"GL_CLIP_DISTANCE3", GL_CLIP_DISTANCE3},
    {"GL_CLIP_DISTANCE4", GL_CLIP_DISTANCE4},
    {"GL_CLIP_DISTANCE5", GL_CLIP_DISTANCE5},
    {"GL_CLIP_DISTANCE6", GL_CLIP_DISTANCE6},
    {"GL_CLIP_DISTANCE7", GL_CLIP_DISTANCE7},
    {"GL_LIGHT0", GL_LIGHT0},
    {"GL_LIGHT1", GL_LIGHT1},
    {"GL_LIGHT2", GL_LIGHT2},
    {"GL_LIGHT3", GL_LIGHT3},
    {"GL_LIGHT4", GL_LIGHT4},
    {"GL_LIGHT5", GL_LIGHT5},
    {"GL_LIGHT6", GL_LIGHT6},
    {"GL_LIGHT7", GL_LIGHT7},
    {"GL_ABGR_EXT", GL_ABGR_EXT},
    {"GL_CONSTANT_COLOR", GL_CONSTANT_COLOR},
    {"GL_ONE_MINUS_CONSTANT_COLOR", GL_ONE_MINUS_CONSTANT_COLOR},
    {"GL_CONSTANT_ALPHA", GL_CONSTANT_ALPHA},
    {"GL_ONE_MINUS_CONSTANT_ALPHA", GL_ONE_MINUS_CONSTANT_ALPHA},
    {"GL_BLEND_COLOR", GL_BLEND_COLOR},
    {"GL_FUNC_ADD", GL_FUNC_ADD},
    {"GL_MIN", GL_MIN},
    {"GL_MAX", GL_MAX},
    {"GL_BLEND_EQUATION", GL_BLEND_EQUATION},
    {"GL_FUNC_SUBTRACT", GL_FUNC_SUBTRACT},
    {"GL_FUNC_REVERSE_SUBTRACT", GL_FUNC_REVERSE_SUBTRACT},
    {"GL_CMYK_EXT", GL_CMYK_EXT},
    {"GL_CMYKA_EXT", GL_CMYKA_EXT},
    {"GL_PACK_CMYK_HINT_EXT", GL_PACK_CMYK_HINT_EXT},
    {"GL_UNPACK_CMYK_HINT_EXT", GL_UNPACK_CMYK_HINT_EXT},
    {"GL_CONVOLUTION_1D", GL_CONVOLUTION_1D},
    {"GL_CONVOLUTION_2D", GL_CONVOLUTION_2D},
    {"GL_SEPARABLE_2D", GL_SEPARABLE_2D},
    {"GL_CONVOLUTION_BORDER_MODE", GL_CONVOLUTION_BORDER_MODE},
    {"GL_CONVOLUTION_FILTER_SCALE", GL_CONVOLUTION_FILTER_SCALE},
    {"GL_CONVOLUTION_FILTER_BIAS", GL_CONVOLUTION_FILTER_BIAS},
    {"GL_REDUCE", GL_REDUCE},
    {"GL_CONVOLUTION_FORMAT", GL_CONVOLUTION_FORMAT},
    {"GL_CONVOLUTION_WIDTH", GL_CONVOLUTION_WIDTH},
    {"GL_CONVOLUTION_HEIGHT", GL_CONVOLUTION_HEIGHT},
    {"GL_MAX_CONVOLUTION_WIDTH", GL_MAX_CONVOLUTION_WIDTH},
    {"GL_MAX_CONVOLUTION_HEIGHT", GL_MAX_CONVOLUTION_HEIGHT},
    {"GL_POST_CONVOLUTION_RED_SCALE", GL_POST_CONVOLUTION_RED_SCALE},
    {"GL_POST_CONVOLUTION_GREEN_SCALE", GL_POST_CONVOLUTION_GREEN_SCALE},
    {"GL_POST_CONVOLUTION_BLUE_SCALE", GL_POST_CONVOLUTION_BLUE_SCALE},
    {"GL_POST_CONVOLUTION_ALPHA_SCALE", GL_POST_CONVOLUTION_ALPHA_SCALE},
    {"GL_POST_CONVOLUTION_RED_BIAS", GL_POST_CONVOLUTION_RED_BIAS},
    {"GL_POST_CONVOLUTION_GREEN_BIAS", GL_POST_CONVOLUTION_GREEN_BIAS},
    {"GL_POST_CONVOLUTION_BLUE_BIAS", GL_POST_CONVOLUTION_BLUE_BIAS},
    {"GL_POST_CONVOLUTION_ALPHA_BIAS", GL_POST_CONVOLUTION_ALPHA_BIAS},
    {"GL_HISTOGRAM", GL_HISTOGRAM},
    {"GL_PROXY_HISTOGRAM", GL_PROXY_HISTOGRAM},
    {"GL_HISTOGRAM_WIDTH", GL_HISTOGRAM_WIDTH},
    {"GL_HISTOGRAM_FORMAT", GL_HISTOGRAM_FORMAT},
    {"GL_HISTOGRAM_RED_SIZE", GL_HISTOGRAM_RED_SIZE},
    {"GL_HISTOGRAM_GREEN_SIZE", GL_HISTOGRAM_GREEN_SIZE},
    {"GL_HISTOGRAM_BLUE_SIZE", GL_HISTOGRAM_BLUE_SIZE},
    {"GL_HISTOGRAM_ALPHA_SIZE", GL_HISTOGRAM_ALPHA_SIZE},
    {"GL_HISTOGRAM_LUMINANCE_SIZE", GL_HISTOGRAM_LUMINANCE_SIZE},
    {"GL_HISTOGRAM_SINK", GL_HISTOGRAM_SINK},
    {"GL_MINMAX", GL_MINMAX},
    {"GL_MINMAX_FORMAT", GL_MINMAX_FORMAT},
    {"GL_MINMAX_SINK", GL_MINMAX_SINK},
    {"GL_TABLE_TOO_LARGE", GL_TABLE_TOO_LARGE},
    {"GL_UNSIGNED_BYTE_3_3_2", GL_UNSIGNED_BYTE_3_3_2},
    {"GL_UNSIGNED_SHORT_4_4_4_4", GL_UNSIGNED_SHORT_4_4_4_4},
    {"GL_UNSIGNED_SHORT_5_5_5_1", GL_UNSIGNED_SHORT_5_5_5_1},
    {"GL_UNSIGNED_INT_8_8_8_8", GL_UNSIGNED_INT_8_8_8_8},
    {"GL_UNSIGNED_INT_10_10_10_2", GL_UNSIGNED_INT_10_10_10_2},
    {"GL_POLYGON_OFFSET_FILL", GL_POLYGON_OFFSET_FILL},
    {"GL_POLYGON_OFFSET_FACTOR", GL_POLYGON_OFFSET_FACTOR},
    {"GL_POLYGON_OFFSET_BIAS_EXT", GL_POLYGON_OFFSET_BIAS_EXT},
    {"GL_RESCALE_NORMAL", GL_RESCALE_NORMAL},
    {"GL_ALPHA4", GL_ALPHA4},
    {"GL_ALPHA8", GL_ALPHA8},
    {"GL_ALPHA12", GL_ALPHA12},
    {"GL_ALPHA16", GL_ALPHA16},
    {"GL_LUMINANCE4", GL_LUMINANCE4},
    {"GL_LUMINANCE8", GL_LUMINANCE8},
    {"GL_LUMINANCE12", GL_LUMINANCE12},
    {"GL_LUMINANCE16", GL_LUMINANCE16},
    {"GL_LUMINANCE4_ALPHA4", GL_LUMINANCE4_ALPHA4},
    {"GL_LUMINANCE6_ALPHA2", GL_LUMINANCE6_ALPHA2},
    {"GL_LUMINANCE8_ALPHA8", GL_LUMINANCE8_ALPHA8},
    {"GL_LUMINANCE12_ALPHA4", GL_LUMINANCE12_ALPHA4},
    {"GL_LUMINANCE12_ALPHA12", GL_LUMINANCE12_ALPHA12},
    {"GL_LUMINANCE16_ALPHA16", GL_LUMINANCE16_ALPHA16},
    {"GL_INTENSITY", GL_INTENSITY},
    {"GL_INTENSITY4", GL_INTENSITY4},
    {"GL_INTENSITY8", GL_INTENSITY8},
    {"GL_INTENSITY12", GL_INTENSITY12},
    {"GL_INTENSITY16", GL_INTENSITY16},
    {"GL_RGB2_EXT", GL_RGB2_EXT},
    {"GL_RGB4", GL_RGB4},
    {"GL_RGB5", GL_RGB5},
    {"GL_RGB8", GL_RGB8},
    {"GL_RGB10", GL_RGB10},
    {"GL_RGB12", GL_RGB12},
    {"GL_RGB16", GL_RGB16},
    {"GL_RGBA2", GL_RGBA2},
    {"GL_RGBA4", GL_RGBA4},
    {"GL_RGB5_A1", GL_RGB5_A1},
    {"GL_RGBA8", GL_RGBA8},
    {"GL_RGB10_A2", GL_RGB10_A2},
    {"GL_RGBA12", GL_RGBA12},
    {"GL_RGBA16", GL_RGBA16},
    {"GL_TEXTURE_RED_SIZE", GL_TEXTURE_RED_SIZE},
    {"GL_TEXTURE_GREEN_SIZE", GL_TEXTURE_GREEN_SIZE},
    {"GL_TEXTURE_BLUE_SIZE", GL_TEXTURE_BLUE_SIZE},
    {"GL_TEXTURE_ALPHA_SIZE", GL_TEXTURE_ALPHA_SIZE},
    {"GL_TEXTURE_LUMINANCE_SIZE", GL_TEXTURE_LUMINANCE_SIZE},
    {"GL_TEXTURE_INTENSITY_SIZE", GL_TEXTURE_INTENSITY_SIZE},
    {"GL_REPLACE_EXT", GL_REPLACE_EXT},
    {"GL_PROXY_TEXTURE_1D", GL_PROXY_TEXTURE_1D},
    {"GL_PROXY_TEXTURE_2D", GL_PROXY_TEXTURE_2D},
    {"GL_TEXTURE_TOO_LARGE_EXT", GL_TEXTURE_TOO_LARGE_EXT},
    {"GL_TEXTURE_PRIORITY", GL_TEXTURE_PRIORITY},
    {"GL_TEXTURE_RESIDENT", GL_TEXTURE_RESIDENT},
    {"GL_TEXTURE_BINDING_1D", GL_TEXTURE_BINDING_1D},
    {"GL_TEXTURE_BINDING_2D", GL_TEXTURE_BINDING_2D},
    {"GL_TEXTURE_BINDING_3D", GL_TEXTURE_BINDING_3D},
    {"GL_PACK_SKIP_IMAGES", GL_PACK_SKIP_IMAGES},
    {"GL_PACK_IMAGE_HEIGHT", GL_PACK_IMAGE_HEIGHT},
    {"GL_UNPACK_SKIP_IMAGES", GL_UNPACK_SKIP_IMAGES},
    {"GL_UNPACK_IMAGE_HEIGHT", GL_UNPACK_IMAGE_HEIGHT},
    {"GL_TEXTURE_3D", GL_TEXTURE_3D},
    {"GL_PROXY_TEXTURE_3D", GL_PROXY_TEXTURE_3D},
    {"GL_TEXTURE_DEPTH", GL_TEXTURE_DEPTH},
    {"GL_TEXTURE_WRAP_R", GL_TEXTURE_WRAP_R},
    {"GL_MAX_3D_TEXTURE_SIZE", GL_MAX_3D_TEXTURE_SIZE},
    {"GL_VERTEX_ARRAY", GL_VERTEX_ARRAY},
    {"GL_NORMAL_ARRAY", GL_NORMAL_ARRAY},
    {"GL_COLOR_ARRAY", GL_COLOR_ARRAY},
    {"GL_INDEX_ARRAY", GL_INDEX_ARRAY},
    {"GL_TEXTURE_COORD_ARRAY", GL_TEXTURE_COORD_ARRAY},
    {"GL_EDGE_FLAG_ARRAY", GL_EDGE_FLAG_ARRAY},
    {"GL_VERTEX_ARRAY_SIZE", GL_VERTEX_ARRAY_SIZE},
    {"GL_VERTEX_ARRAY_TYPE", GL_VERTEX_ARRAY_TYPE},
    {"GL_VERTEX_ARRAY_STRIDE", GL_VERTEX_ARRAY_STRIDE},
    {"GL_VERTEX_ARRAY_COUNT_EXT", GL_VERTEX_ARRAY_COUNT_EXT},
    {"GL_NORMAL_ARRAY_TYPE", GL_NORMAL_ARRAY_TYPE},
    {"GL_NORMAL_ARRAY_STRIDE", GL_NORMAL_ARRAY_STRIDE},
    {"GL_NORMAL_ARRAY_COUNT_EXT", GL_NORMAL_ARRAY_COUNT_EXT},
    {"GL_COLOR_ARRAY_SIZE", GL_COLOR_ARRAY_SIZE},
    {"GL_COLOR_ARRAY_TYPE", GL_COLOR_ARRAY_TYPE},
    {"GL_COLOR_ARRAY_STRIDE", GL_COLOR_ARRAY_STRIDE},
    {"GL_COLOR_ARRAY_COUNT_EXT", GL_COLOR_ARRAY_COUNT_EXT},
    {"GL_INDEX_ARRAY_TYPE", GL_INDEX_ARRAY_TYPE},
    {"GL_INDEX_ARRAY_STRIDE", GL_INDEX_ARRAY_STRIDE},
    {"GL_INDEX_ARRAY_COUNT_EXT", GL_INDEX_ARRAY_COUNT_EXT},
    {"GL_TEXTURE_COORD_ARRAY_SIZE", GL_TEXTURE_COORD_ARRAY_SIZE},
    {"GL_TEXTURE_COORD_ARRAY_TYPE", GL_TEXTURE_COORD_ARRAY_TYPE},
    {"GL_TEXTURE_COORD_ARRAY_STRIDE", GL_TEXTURE_COORD_ARRAY_STRIDE},
    {"GL_TEXTURE_COORD_ARRAY_COUNT_EXT", GL_TEXTURE_COORD_ARRAY_COUNT_EXT},
    {"GL_EDGE_FLAG_ARRAY_STRIDE", GL_EDGE_FLAG_ARRAY_STRIDE},
    {"GL_EDGE_FLAG_ARRAY_COUNT_EXT", GL_EDGE_FLAG_ARRAY_COUNT_EXT},
    {"GL_VERTEX_ARRAY_POINTER", GL_VERTEX_ARRAY_POINTER},
    {"GL_NORMAL_ARRAY_POINTER", GL_NORMAL_ARRAY_POINTER},
    {"GL_COLOR_ARRAY_POINTER", GL_COLOR_ARRAY_POINTER},
    {"GL_INDEX_ARRAY_POINTER", GL_INDEX_ARRAY_POINTER},
    {"GL_TEXTURE_COORD_ARRAY_POINTER", GL_TEXTURE_COORD_ARRAY_POINTER},
    {"GL_EDGE_FLAG_ARRAY_POINTER", GL_EDGE_FLAG_ARRAY_POINTER},
    {"GL_INTERLACE_SGIX", GL_INTERLACE_SGIX},
    {"GL_DETAIL_TEXTURE_2D_SGIS", GL_DETAIL_TEXTURE_2D_SGIS},
    {"GL_DETAIL_TEXTURE_2D_BINDING_SGIS", GL_DETAIL_TEXTURE_2D_BINDING_SGIS},
    {"GL_LINEAR_DETAIL_SGIS", GL_LINEAR_DETAIL_SGIS},
    {"GL_LINEAR_DETAIL_ALPHA_SGIS", GL_LINEAR_DETAIL_ALPHA_SGIS},
    {"GL_LINEAR_DETAIL_COLOR_SGIS", GL_LINEAR_DETAIL_COLOR_SGIS},
    {"GL_DETAIL_TEXTURE_LEVEL_SGIS", GL_DETAIL_TEXTURE_LEVEL_SGIS},
    {"GL_DETAIL_TEXTURE_MODE_SGIS", GL_DETAIL_TEXTURE_MODE_SGIS},
    {"GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS", GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS},
    {"GL_MULTISAMPLE", GL_MULTISAMPLE},
    {"GL_SAMPLE_ALPHA_TO_COVERAGE", GL_SAMPLE_ALPHA_TO_COVERAGE},
    {"GL_SAMPLE_ALPHA_TO_ONE", GL_SAMPLE_ALPHA_TO_ONE},
    {"GL_SAMPLE_COVERAGE", GL_SAMPLE_COVERAGE},
    {"GL_1PASS_EXT", GL_1PASS_EXT},
    {"GL_2PASS_0_EXT", GL_2PASS_0_EXT},
    {"GL_2PASS_1_EXT", GL_2PASS_1_EXT},
    {"GL_4PASS_0_EXT", GL_4PASS_0_EXT},
    {"GL_4PASS_1_EXT", GL_4PASS_1_EXT},
    {"GL_4PASS_2_EXT", GL_4PASS_2_EXT},
    {"GL_4PASS_3_EXT", GL_4PASS_3_EXT},
    {"GL_SAMPLE_BUFFERS", GL_SAMPLE_BUFFERS},
    {"GL_SAMPLES", GL_SAMPLES},
    {"GL_SAMPLE_COVERAGE_VALUE", GL_SAMPLE_COVERAGE_VALUE},
    {"GL_SAMPLE_COVERAGE_INVERT", GL_SAMPLE_COVERAGE_INVERT},
    {"GL_SAMPLE_PATTERN_EXT", GL_SAMPLE_PATTERN_EXT},
    {"GL_LINEAR_SHARPEN_SGIS", GL_LINEAR_SHARPEN_SGIS},
    {"GL_LINEAR_SHARPEN_ALPHA_SGIS", GL_LINEAR_SHARPEN_ALPHA_SGIS},
    {"GL_LINEAR_SHARPEN_COLOR_SGIS", GL_LINEAR_SHARPEN_COLOR_SGIS},
    {"GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS", GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS},
    {"GL_COLOR_MATRIX", GL_COLOR_MATRIX},
    {"GL_COLOR_MATRIX_STACK_DEPTH", GL_COLOR_MATRIX_STACK_DEPTH},
    {"GL_MAX_COLOR_MATRIX_STACK_DEPTH", GL_MAX_COLOR_MATRIX_STACK_DEPTH},
    {"GL_POST_COLOR_MATRIX_RED_SCALE", GL_POST_COLOR_MATRIX_RED_SCALE},
    {"GL_POST_COLOR_MATRIX_GREEN_SCALE", GL_POST_COLOR_MATRIX_GREEN_SCALE},
    {"GL_POST_COLOR_MATRIX_BLUE_SCALE", GL_POST_COLOR_MATRIX_BLUE_SCALE},
    {"GL_POST_COLOR_MATRIX_ALPHA_SCALE", GL_POST_COLOR_MATRIX_ALPHA_SCALE},
    {"GL_POST_COLOR_MATRIX_RED_BIAS", GL_POST_COLOR_MATRIX_RED_BIAS},
    {"GL_POST_COLOR_MATRIX_GREEN_BIAS", GL_POST_COLOR_MATRIX_GREEN_BIAS},
    {"GL_POST_COLOR_MATRIX_BLUE_BIAS", GL_POST_COLOR_MATRIX_BLUE_BIAS},
    {"GL_POST_COLOR_MATRIX_ALPHA_BIAS", GL_POST_COLOR_MATRIX_ALPHA_BIAS},
    {"GL_TEXTURE_COLOR_TABLE_SGI", GL_TEXTURE_COLOR_TABLE_SGI},
    {"GL_PROXY_TEXTURE_COLOR_TABLE_SGI", GL_PROXY_TEXTURE_COLOR_TABLE_SGI},
    {"GL_TEXTURE_ENV_BIAS_SGIX", GL_TEXTURE_ENV_BIAS_SGIX},
    {"GL_TEXTURE_COMPARE_FAIL_VALUE_ARB", GL_TEXTURE_COMPARE_FAIL_VALUE_ARB},
    {"GL_BLEND_DST_RGB", GL_BLEND_DST_RGB},
    {"GL_BLEND_SRC_RGB", GL_BLEND_SRC_RGB},
    {"GL_BLEND_DST_ALPHA", GL_BLEND_DST_ALPHA},
    {"GL_BLEND_SRC_ALPHA", GL_BLEND_SRC_ALPHA},
    {"GL_422_EXT", GL_422_EXT},
    {"GL_422_REV_EXT", GL_422_REV_EXT},
    {"GL_422_AVERAGE_EXT", GL_422_AVERAGE_EXT},
    {"GL_422_REV_AVERAGE_EXT", GL_422_REV_AVERAGE_EXT},
    {"GL_COLOR_TABLE", GL_COLOR_TABLE},
    {"GL_POST_CONVOLUTION_COLOR_TABLE", GL_POST_CONVOLUTION_COLOR_TABLE},
    {"GL_POST_COLOR_MATRIX_COLOR_TABLE", GL_POST_COLOR_MATRIX_COLOR_TABLE},
    {"GL_PROXY_COLOR_TABLE", GL_PROXY_COLOR_TABLE},
    {"GL_PROXY_POST_CONVOLUTION_COLOR_TABLE", GL_PROXY_POST_CONVOLUTION_COLOR_TABLE},
    {"GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE", GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE},
    {"GL_COLOR_TABLE_SCALE", GL_COLOR_TABLE_SCALE},
    {"GL_COLOR_TABLE_BIAS", GL_COLOR_TABLE_BIAS},
    {"GL_COLOR_TABLE_FORMAT", GL_COLOR_TABLE_FORMAT},
    {"GL_COLOR_TABLE_WIDTH", GL_COLOR_TABLE_WIDTH},
    {"GL_COLOR_TABLE_RED_SIZE", GL_COLOR_TABLE_RED_SIZE},
    {"GL_COLOR_TABLE_GREEN_SIZE", GL_COLOR_TABLE_GREEN_SIZE},
    {"GL_COLOR_TABLE_BLUE_SIZE", GL_COLOR_TABLE_BLUE_SIZE},
    {"GL_COLOR_TABLE_ALPHA_SIZE", GL_COLOR_TABLE_ALPHA_SIZE},
    {"GL_COLOR_TABLE_LUMINANCE_SIZE", GL_COLOR_TABLE_LUMINANCE_SIZE},
    {"GL_COLOR_TABLE_INTENSITY_SIZE", GL_COLOR_TABLE_INTENSITY_SIZE},
    {"GL_BGR", GL_BGR},
    {"GL_BGRA", GL_BGRA},
    {"GL_COLOR_INDEX1_EXT", GL_COLOR_INDEX1_EXT},
    {"GL_COLOR_INDEX2_EXT", GL_COLOR_INDEX2_EXT},
    {"GL_COLOR_INDEX4_EXT", GL_COLOR_INDEX4_EXT},
    {"GL_COLOR_INDEX8_EXT", GL_COLOR_INDEX8_EXT},
    {"GL_COLOR_INDEX12_EXT", GL_COLOR_INDEX12_EXT},
    {"GL_COLOR_INDEX16_EXT", GL_COLOR_INDEX16_EXT},
    {"GL_MAX_ELEMENTS_VERTICES", GL_MAX_ELEMENTS_VERTICES},
    {"GL_MAX_ELEMENTS_INDICES", GL_MAX_ELEMENTS_INDICES},
    {"GL_PHONG_WIN", GL_PHONG_WIN},
    {"GL_PHONG_HINT_WIN", GL_PHONG_HINT_WIN},
    {"GL_FOG_SPECULAR_TEXTURE_WIN", GL_FOG_SPECULAR_TEXTURE_WIN},
    {"GL_TEXTURE_INDEX_SIZE_EXT", GL_TEXTURE_INDEX_SIZE_EXT},
    {"GL_CLIP_VOLUME_CLIPPING_HINT_EXT", GL_CLIP_VOLUME_CLIPPING_HINT_EXT},
    {"GL_DUAL_ALPHA4_SGIS", GL_DUAL_ALPHA4_SGIS},
    {"GL_DUAL_ALPHA8_SGIS", GL_DUAL_ALPHA8_SGIS},
    {"GL_DUAL_ALPHA12_SGIS", GL_DUAL_ALPHA12_SGIS},
    {"GL_DUAL_ALPHA16_SGIS", GL_DUAL_ALPHA16_SGIS},
    {"GL_DUAL_LUMINANCE4_SGIS", GL_DUAL_LUMINANCE4_SGIS},
    {"GL_DUAL_LUMINANCE8_SGIS", GL_DUAL_LUMINANCE8_SGIS},
    {"GL_DUAL_LUMINANCE12_SGIS", GL_DUAL_LUMINANCE12_SGIS},
    {"GL_DUAL_LUMINANCE16_SGIS", GL_DUAL_LUMINANCE16_SGIS},
    {"GL_DUAL_INTENSITY4_SGIS", GL_DUAL_INTENSITY4_SGIS},
    {"GL_DUAL_INTENSITY8_SGIS", GL_DUAL_INTENSITY8_SGIS},
    {"GL_DUAL_INTENSITY12_SGIS", GL_DUAL_INTENSITY12_SGIS},
    {"GL_DUAL_INTENSITY16_SGIS", GL_DUAL_INTENSITY16_SGIS},
    {"GL_DUAL_LUMINANCE_ALPHA4_SGIS", GL_DUAL_LUMINANCE_ALPHA4_SGIS},
    {"GL_DUAL_LUMINANCE_ALPHA8_SGIS", GL_DUAL_LUMINANCE_ALPHA8_SGIS},
    {"GL_QUAD_ALPHA4_SGIS", GL_QUAD_ALPHA4_SGIS},
    {"GL_QUAD_ALPHA8_SGIS", GL_QUAD_ALPHA8_SGIS},
    {"GL_QUAD_LUMINANCE4_SGIS", GL_QUAD_LUMINANCE4_SGIS},
    {"GL_QUAD_LUMINANCE8_SGIS", GL_QUAD_LUMINANCE8_SGIS},
    {"GL_QUAD_INTENSITY4_SGIS", GL_QUAD_INTENSITY4_SGIS},
    {"GL_QUAD_INTENSITY8_SGIS", GL_QUAD_INTENSITY8_SGIS},
    {"GL_DUAL_TEXTURE_SELECT_SGIS", GL_DUAL_TEXTURE_SELECT_SGIS},
    {"GL_QUAD_TEXTURE_SELECT_SGIS", GL_QUAD_TEXTURE_SELECT_SGIS},
    {"GL_POINT_SIZE_MIN", GL_POINT_SIZE_MIN},
    {"GL_POINT_SIZE_MAX", GL_POINT_SIZE_MAX},
    {"GL_POINT_FADE_THRESHOLD_SIZE", GL_POINT_FADE_THRESHOLD_SIZE},
    {"GL_POINT_DISTANCE_ATTENUATION", GL_POINT_DISTANCE_ATTENUATION},
    {"GL_FOG_FUNC_SGIS", GL_FOG_FUNC_SGIS},
    {"GL_FOG_FUNC_POINTS_SGIS", GL_FOG_FUNC_POINTS_SGIS},
    {"GL_MAX_FOG_FUNC_POINTS_SGIS", GL_MAX_FOG_FUNC_POINTS_SGIS},
    {"GL_CLAMP_TO_BORDER", GL_CLAMP_TO_BORDER},
    {"GL_TEXTURE_MULTI_BUFFER_HINT_SGIX", GL_TEXTURE_MULTI_BUFFER_HINT_SGIX},
    {"GL_CLAMP_TO_EDGE", GL_CLAMP_TO_EDGE},
    {"GL_PACK_SKIP_VOLUMES_SGIS", GL_PACK_SKIP_VOLUMES_SGIS},
    {"GL_PACK_IMAGE_DEPTH_SGIS", GL_PACK_IMAGE_DEPTH_SGIS},
    {"GL_UNPACK_SKIP_VOLUMES_SGIS", GL_UNPACK_SKIP_VOLUMES_SGIS},
    {"GL_UNPACK_IMAGE_DEPTH_SGIS", GL_UNPACK_IMAGE_DEPTH_SGIS},
    {"GL_TEXTURE_4D_SGIS", GL_TEXTURE_4D_SGIS},
    {"GL_PROXY_TEXTURE_4D_SGIS", GL_PROXY_TEXTURE_4D_SGIS},
    {"GL_TEXTURE_4DSIZE_SGIS", GL_TEXTURE_4DSIZE_SGIS},
    {"GL_TEXTURE_WRAP_Q_SGIS", GL_TEXTURE_WRAP_Q_SGIS},
    {"GL_MAX_4D_TEXTURE_SIZE_SGIS", GL_MAX_4D_TEXTURE_SIZE_SGIS},
    {"GL_PIXEL_TEX_GEN_SGIX", GL_PIXEL_TEX_GEN_SGIX},
    {"GL_TEXTURE_MIN_LOD", GL_TEXTURE_MIN_LOD},
    {"GL_TEXTURE_MAX_LOD", GL_TEXTURE_MAX_LOD},
    {"GL_TEXTURE_BASE_LEVEL", GL_TEXTURE_BASE_LEVEL},
    {"GL_TEXTURE_MAX_LEVEL", GL_TEXTURE_MAX_LEVEL},
    {"GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX", GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX},
    {"GL_PIXEL_TILE_CACHE_INCREMENT_SGIX", GL_PIXEL_TILE_CACHE_INCREMENT_SGIX},
    {"GL_PIXEL_TILE_WIDTH_SGIX", GL_PIXEL_TILE_WIDTH_SGIX},
    {"GL_PIXEL_TILE_HEIGHT_SGIX", GL_PIXEL_TILE_HEIGHT_SGIX},
    {"GL_PIXEL_TILE_GRID_WIDTH_SGIX", GL_PIXEL_TILE_GRID_WIDTH_SGIX},
    {"GL_PIXEL_TILE_GRID_HEIGHT_SGIX", GL_PIXEL_TILE_GRID_HEIGHT_SGIX},
    {"GL_PIXEL_TILE_GRID_DEPTH_SGIX", GL_PIXEL_TILE_GRID_DEPTH_SGIX},
    {"GL_PIXEL_TILE_CACHE_SIZE_SGIX", GL_PIXEL_TILE_CACHE_SIZE_SGIX},
    {"GL_FILTER4_SGIS", GL_FILTER4_SGIS},
    {"GL_TEXTURE_FILTER4_SIZE_SGIS", GL_TEXTURE_FILTER4_SIZE_SGIS},
    {"GL_SPRITE_SGIX", GL_SPRITE_SGIX},
    {"GL_SPRITE_MODE_SGIX", GL_SPRITE_MODE_SGIX},
    {"GL_SPRITE_AXIS_SGIX", GL_SPRITE_AXIS_SGIX},
    {"GL_SPRITE_TRANSLATION_SGIX", GL_SPRITE_TRANSLATION_SGIX},
    {"GL_SPRITE_AXIAL_SGIX", GL_SPRITE_AXIAL_SGIX},
    {"GL_SPRITE_OBJECT_ALIGNED_SGIX", GL_SPRITE_OBJECT_ALIGNED_SGIX},
    {"GL_SPRITE_EYE_ALIGNED_SGIX", GL_SPRITE_EYE_ALIGNED_SGIX},
    {"GL_TEXTURE_4D_BINDING_SGIS", GL_TEXTURE_4D_BINDING_SGIS},
    {"GL_IGNORE_BORDER_HP", GL_IGNORE_BORDER_HP},
    {"GL_CONSTANT_BORDER", GL_CONSTANT_BORDER},
    {"GL_REPLICATE_BORDER", GL_REPLICATE_BORDER},
    {"GL_CONVOLUTION_BORDER_COLOR", GL_CONVOLUTION_BORDER_COLOR},
    {"GL_IMAGE_SCALE_X_HP", GL_IMAGE_SCALE_X_HP},
    {"GL_IMAGE_SCALE_Y_HP", GL_IMAGE_SCALE_Y_HP},
    {"GL_IMAGE_TRANSLATE_X_HP", GL_IMAGE_TRANSLATE_X_HP},
    {"GL_IMAGE_TRANSLATE_Y_HP", GL_IMAGE_TRANSLATE_Y_HP},
    {"GL_IMAGE_ROTATE_ANGLE_HP", GL_IMAGE_ROTATE_ANGLE_HP},
    {"GL_IMAGE_ROTATE_ORIGIN_X_HP", GL_IMAGE_ROTATE_ORIGIN_X_HP},
    {"GL_IMAGE_ROTATE_ORIGIN_Y_HP", GL_IMAGE_ROTATE_ORIGIN_Y_HP},
    {"GL_IMAGE_MAG_FILTER_HP", GL_IMAGE_MAG_FILTER_HP},
    {"GL_IMAGE_MIN_FILTER_HP", GL_IMAGE_MIN_FILTER_HP},
    {"GL_IMAGE_CUBIC_WEIGHT_HP", GL_IMAGE_CUBIC_WEIGHT_HP},
    {"GL_CUBIC_HP", GL_CUBIC_HP},
    {"GL_AVERAGE_HP", GL_AVERAGE_HP},
    {"GL_IMAGE_TRANSFORM_2D_HP", GL_IMAGE_TRANSFORM_2D_HP},
    {"GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP},
    {"GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP", GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP},
    {"GL_OCCLUSION_TEST_HP", GL_OCCLUSION_TEST_HP},
    {"GL_OCCLUSION_TEST_RESULT_HP", GL_OCCLUSION_TEST_RESULT_HP},
    {"GL_TEXTURE_LIGHTING_MODE_HP", GL_TEXTURE_LIGHTING_MODE_HP},
    {"GL_TEXTURE_POST_SPECULAR_HP", GL_TEXTURE_POST_SPECULAR_HP},
    {"GL_TEXTURE_PRE_SPECULAR_HP", GL_TEXTURE_PRE_SPECULAR_HP},
    {"GL_LINEAR_CLIPMAP_LINEAR_SGIX", GL_LINEAR_CLIPMAP_LINEAR_SGIX},
    {"GL_TEXTURE_CLIPMAP_CENTER_SGIX", GL_TEXTURE_CLIPMAP_CENTER_SGIX},
    {"GL_TEXTURE_CLIPMAP_FRAME_SGIX", GL_TEXTURE_CLIPMAP_FRAME_SGIX},
    {"GL_TEXTURE_CLIPMAP_OFFSET_SGIX", GL_TEXTURE_CLIPMAP_OFFSET_SGIX},
    {"GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX", GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX},
    {"GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX", GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX},
    {"GL_TEXTURE_CLIPMAP_DEPTH_SGIX", GL_TEXTURE_CLIPMAP_DEPTH_SGIX},
    {"GL_MAX_CLIPMAP_DEPTH_SGIX", GL_MAX_CLIPMAP_DEPTH_SGIX},
    {"GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX", GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX},
    {"GL_POST_TEXTURE_FILTER_BIAS_SGIX", GL_POST_TEXTURE_FILTER_BIAS_SGIX},
    {"GL_POST_TEXTURE_FILTER_SCALE_SGIX", GL_POST_TEXTURE_FILTER_SCALE_SGIX},
    {"GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX", GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX},
    {"GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX", GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX},
    {"GL_REFERENCE_PLANE_SGIX", GL_REFERENCE_PLANE_SGIX},
    {"GL_REFERENCE_PLANE_EQUATION_SGIX", GL_REFERENCE_PLANE_EQUATION_SGIX},
    {"GL_IR_INSTRUMENT1_SGIX", GL_IR_INSTRUMENT1_SGIX},
    {"GL_INSTRUMENT_BUFFER_POINTER_SGIX", GL_INSTRUMENT_BUFFER_POINTER_SGIX},
    {"GL_INSTRUMENT_MEASUREMENTS_SGIX", GL_INSTRUMENT_MEASUREMENTS_SGIX},
    {"GL_LIST_PRIORITY_SGIX", GL_LIST_PRIORITY_SGIX},
    {"GL_CALLIGRAPHIC_FRAGMENT_SGIX", GL_CALLIGRAPHIC_FRAGMENT_SGIX},
    {"GL_PIXEL_TEX_GEN_Q_CEILING_SGIX", GL_PIXEL_TEX_GEN_Q_CEILING_SGIX},
    {"GL_PIXEL_TEX_GEN_Q_ROUND_SGIX", GL_PIXEL_TEX_GEN_Q_ROUND_SGIX},
    {"GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX", GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX},
    {"GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX", GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX},
    {"GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX", GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX},
    {"GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX", GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX},
    {"GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX", GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX},
    {"GL_FRAMEZOOM_SGIX", GL_FRAMEZOOM_SGIX},
    {"GL_FRAMEZOOM_FACTOR_SGIX", GL_FRAMEZOOM_FACTOR_SGIX},
    {"GL_MAX_FRAMEZOOM_FACTOR_SGIX", GL_MAX_FRAMEZOOM_FACTOR_SGIX},
    {"GL_TEXTURE_LOD_BIAS_S_SGIX", GL_TEXTURE_LOD_BIAS_S_SGIX},
    {"GL_TEXTURE_LOD_BIAS_T_SGIX", GL_TEXTURE_LOD_BIAS_T_SGIX},
    {"GL_TEXTURE_LOD_BIAS_R_SGIX", GL_TEXTURE_LOD_BIAS_R_SGIX},
    {"GL_GENERATE_MIPMAP", GL_GENERATE_MIPMAP},
    {"GL_GENERATE_MIPMAP_HINT", GL_GENERATE_MIPMAP_HINT},
    {"GL_GEOMETRY_DEFORMATION_SGIX", GL_GEOMETRY_DEFORMATION_SGIX},
    {"GL_TEXTURE_DEFORMATION_SGIX", GL_TEXTURE_DEFORMATION_SGIX},
    {"GL_DEFORMATIONS_MASK_SGIX", GL_DEFORMATIONS_MASK_SGIX},
    {"GL_MAX_DEFORMATION_ORDER_SGIX", GL_MAX_DEFORMATION_ORDER_SGIX},
    {"GL_FOG_OFFSET_SGIX", GL_FOG_OFFSET_SGIX},
    {"GL_FOG_OFFSET_VALUE_SGIX", GL_FOG_OFFSET_VALUE_SGIX},
    {"GL_TEXTURE_COMPARE_SGIX", GL_TEXTURE_COMPARE_SGIX},
    {"GL_TEXTURE_COMPARE_OPERATOR_SGIX", GL_TEXTURE_COMPARE_OPERATOR_SGIX},
    {"GL_TEXTURE_LEQUAL_R_SGIX", GL_TEXTURE_LEQUAL_R_SGIX},
    {"GL_TEXTURE_GEQUAL_R_SGIX", GL_TEXTURE_GEQUAL_R_SGIX},
    {"GL_DEPTH_COMPONENT16", GL_DEPTH_COMPONENT16},
    {"GL_DEPTH_COMPONENT24", GL_DEPTH_COMPONENT24},
    {"GL_DEPTH_COMPONENT32", GL_DEPTH_COMPONENT32},
    {"GL_ARRAY_ELEMENT_LOCK_FIRST_EXT", GL_ARRAY_ELEMENT_LOCK_FIRST_EXT},
    {"GL_ARRAY_ELEMENT_LOCK_COUNT_EXT", GL_ARRAY_ELEMENT_LOCK_COUNT_EXT},
    {"GL_CULL_VERTEX_EXT", GL_CULL_VERTEX_EXT},
    {"GL_CULL_VERTEX_EYE_POSITION_EXT", GL_CULL_VERTEX_EYE_POSITION_EXT},
    {"GL_CULL_VERTEX_OBJECT_POSITION_EXT", GL_CULL_VERTEX_OBJECT_POSITION_EXT},
    {"GL_IUI_V2F_EXT", GL_IUI_V2F_EXT},
    {"GL_IUI_V3F_EXT", GL_IUI_V3F_EXT},
    {"GL_IUI_N3F_V2F_EXT", GL_IUI_N3F_V2F_EXT},
    {"GL_IUI_N3F_V3F_EXT", GL_IUI_N3F_V3F_EXT},
    {"GL_T2F_IUI_V2F_EXT", GL_T2F_IUI_V2F_EXT},
    {"GL_T2F_IUI_V3F_EXT", GL_T2F_IUI_V3F_EXT},
    {"GL_T2F_IUI_N3F_V2F_EXT", GL_T2F_IUI_N3F_V2F_EXT},
    {"GL_T2F_IUI_N3F_V3F_EXT", GL_T2F_IUI_N3F_V3F_EXT},
    {"GL_INDEX_TEST_EXT", GL_INDEX_TEST_EXT},
    {"GL_INDEX_TEST_FUNC_EXT", GL_INDEX_TEST_FUNC_EXT},
    {"GL_INDEX_TEST_REF_EXT", GL_INDEX_TEST_REF_EXT},
    {"GL_INDEX_MATERIAL_EXT", GL_INDEX_MATERIAL_EXT},
    {"GL_INDEX_MATERIAL_PARAMETER_EXT", GL_INDEX_MATERIAL_PARAMETER_EXT},
    {"GL_INDEX_MATERIAL_FACE_EXT", GL_INDEX_MATERIAL_FACE_EXT},
    {"GL_YCRCB_422_SGIX", GL_YCRCB_422_SGIX},
    {"GL_YCRCB_444_SGIX", GL_YCRCB_444_SGIX},
    {"GL_WRAP_BORDER_SUN", GL_WRAP_BORDER_SUN},
    {"GL_UNPACK_CONSTANT_DATA_SUNX", GL_UNPACK_CONSTANT_DATA_SUNX},
    {"GL_TEXTURE_CONSTANT_DATA_SUNX", GL_TEXTURE_CONSTANT_DATA_SUNX},
    {"GL_TRIANGLE_LIST_SUN", GL_TRIANGLE_LIST_SUN},
    {"GL_REPLACEMENT_CODE_SUN", GL_REPLACEMENT_CODE_SUN},
    {"GL_GLOBAL_ALPHA_SUN", GL_GLOBAL_ALPHA_SUN},
    {"GL_GLOBAL_ALPHA_FACTOR_SUN", GL_GLOBAL_ALPHA_FACTOR_SUN},
    {"GL_TEXTURE_COLOR_WRITEMASK_SGIS", GL_TEXTURE_COLOR_WRITEMASK_SGIS},
    {"GL_EYE_DISTANCE_TO_POINT_SGIS", GL_EYE_DISTANCE_TO_POINT_SGIS},
    {"GL_OBJECT_DISTANCE_TO_POINT_SGIS", GL_OBJECT_DISTANCE_TO_POINT_SGIS},
    {"GL_EYE_DISTANCE_TO_LINE_SGIS", GL_EYE_DISTANCE_TO_LINE_SGIS},
    {"GL_OBJECT_DISTANCE_TO_LINE_SGIS", GL_OBJECT_DISTANCE_TO_LINE_SGIS},
    {"GL_EYE_POINT_SGIS", GL_EYE_POINT_SGIS},
    {"GL_OBJECT_POINT_SGIS", GL_OBJECT_POINT_SGIS},
    {"GL_EYE_LINE_SGIS", GL_EYE_LINE_SGIS},
    {"GL_OBJECT_LINE_SGIS", GL_OBJECT_LINE_SGIS},
    {"GL_LIGHT_MODEL_COLOR_CONTROL", GL_LIGHT_MODEL_COLOR_CONTROL},
    {"GL_SINGLE_COLOR", GL_SINGLE_COLOR},
    {"GL_SEPARATE_SPECULAR_COLOR", GL_SEPARATE_SPECULAR_COLOR},
    {"GL_SHARED_TEXTURE_PALETTE_EXT", GL_SHARED_TEXTURE_PALETTE_EXT},
    {"GL_FOG_SCALE_SGIX", GL_FOG_SCALE_SGIX},
    {"GL_FOG_SCALE_VALUE_SGIX", GL_FOG_SCALE_VALUE_SGIX},
    {"GL_TEXT_FRAGMENT_SHADER_ATI", GL_TEXT_FRAGMENT_SHADER_ATI},
    {"GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING", GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING},
    {"GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE", GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE},
    {"GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE", GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE},
    {"GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE", GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE},
    {"GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE", GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE},
    {"GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE", GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE},
    {"GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE", GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE},
    {"GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE", GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE},
    {"GL_FRAMEBUFFER_DEFAULT", GL_FRAMEBUFFER_DEFAULT},
    {"GL_FRAMEBUFFER_UNDEFINED", GL_FRAMEBUFFER_UNDEFINED},
    {"GL_DEPTH_STENCIL_ATTACHMENT", GL_DEPTH_STENCIL_ATTACHMENT},
    {"GL_MAJOR_VERSION", GL_MAJOR_VERSION},
    {"GL_MINOR_VERSION", GL_MINOR_VERSION},
    {"GL_NUM_EXTENSIONS", GL_NUM_EXTENSIONS},
    {"GL_CONTEXT_FLAGS", GL_CONTEXT_FLAGS},
    {"GL_INDEX", GL_INDEX},
    {"GL_COMPRESSED_RED", GL_COMPRESSED_RED},
    {"GL_COMPRESSED_RG", GL_COMPRESSED_RG},
    {"GL_RG", GL_RG},
    {"GL_RG_INTEGER", GL_RG_INTEGER},
    {"GL_R8", GL_R8},
    {"GL_R16", GL_R16},
    {"GL_RG8", GL_RG8},
    {"GL_RG16", GL_RG16},
    {"GL_R16F", GL_R16F},
    {"GL_R32F", GL_R32F},
    {"GL_RG16F", GL_RG16F},
    {"GL_RG32F", GL_RG32F},
    {"GL_R8I", GL_R8I},
    {"GL_R8UI", GL_R8UI},
    {"GL_R16I", GL_R16I},
    {"GL_R16UI", GL_R16UI},
    {"GL_R32I", GL_R32I},
    {"GL_R32UI", GL_R32UI},
    {"GL_RG8I", GL_RG8I},
    {"GL_RG8UI", GL_RG8UI},
    {"GL_RG16I", GL_RG16I},
    {"GL_RG16UI", GL_RG16UI},
    {"GL_RG32I", GL_RG32I},
    {"GL_RG32UI", GL_RG32UI},
    {"GL_SYNC_CL_EVENT_ARB", GL_SYNC_CL_EVENT_ARB},
    {"GL_SYNC_CL_EVENT_COMPLETE_ARB", GL_SYNC_CL_EVENT_COMPLETE_ARB},
    {"GL_DEBUG_OUTPUT_SYNCHRONOUS", GL_DEBUG_OUTPUT_SYNCHRONOUS},
    {"GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH", GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH},
    {"GL_DEBUG_CALLBACK_FUNCTION", GL_DEBUG_CALLBACK_FUNCTION},
    {"GL_DEBUG_CALLBACK_USER_PARAM", GL_DEBUG_CALLBACK_USER_PARAM},
    {"GL_DEBUG_SOURCE_API", GL_DEBUG_SOURCE_API},
    {"GL_DEBUG_SOURCE_WINDOW_SYSTEM", GL_DEBUG_SOURCE_WINDOW_SYSTEM},
    {"GL_DEBUG_SOURCE_SHADER_COMPILER", GL_DEBUG_SOURCE_SHADER_COMPILER},
    {"GL_DEBUG_SOURCE_THIRD_PARTY", GL_DEBUG_SOURCE_THIRD_PARTY},
    {"GL_DEBUG_SOURCE_APPLICATION", GL_DEBUG_SOURCE_APPLICATION},
    {"GL_DEBUG_SOURCE_OTHER", GL_DEBUG_SOURCE_OTHER},
    {"GL_DEBUG_TYPE_ERROR", GL_DEBUG_TYPE_ERROR},
    {"GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR", GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR},
    {"GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR", GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR},
    {"GL_DEBUG_TYPE_PORTABILITY", GL_DEBUG_TYPE_PORTABILITY},
    {"GL_DEBUG_TYPE_PERFORMANCE", GL_DEBUG_TYPE_PERFORMANCE},
    {"GL_DEBUG_TYPE_OTHER", GL_DEBUG_TYPE_OTHER},
    {"GL_LOSE_CONTEXT_ON_RESET_ARB", GL_LOSE_CONTEXT_ON_RESET_ARB},
    {"GL_GUILTY_CONTEXT_RESET_ARB", GL_GUILTY_CONTEXT_RESET_ARB},
    {"GL_INNOCENT_CONTEXT_RESET_ARB", GL_INNOCENT_CONTEXT_RESET_ARB},
    {"GL_UNKNOWN_CONTEXT_RESET_ARB", GL_UNKNOWN_CONTEXT_RESET_ARB},
    {"GL_RESET_NOTIFICATION_STRATEGY_ARB", GL_RESET_NOTIFICATION_STRATEGY_ARB},
    {"GL_PROGRAM_BINARY_RETRIEVABLE_HINT", GL_PROGRAM_BINARY_RETRIEVABLE_HINT},
    {"GL_PROGRAM_SEPARABLE", GL_PROGRAM_SEPARABLE},
    {"GL_ACTIVE_PROGRAM", GL_ACTIVE_PROGRAM},
    {"GL_PROGRAM_PIPELINE_BINDING", GL_PROGRAM_PIPELINE_BINDING},
    {"GL_MAX_VIEWPORTS", GL_MAX_VIEWPORTS},
    {"GL_VIEWPORT_SUBPIXEL_BITS", GL_VIEWPORT_SUBPIXEL_BITS},
    {"GL_VIEWPORT_BOUNDS_RANGE", GL_VIEWPORT_BOUNDS_RANGE},
    {"GL_LAYER_PROVOKING_VERTEX", GL_LAYER_PROVOKING_VERTEX},
    {"GL_VIEWPORT_INDEX_PROVOKING_VERTEX", GL_VIEWPORT_INDEX_PROVOKING_VERTEX},
    {"GL_UNDEFINED_VERTEX", GL_UNDEFINED_VERTEX},
    {"GL_NO_RESET_NOTIFICATION_ARB", GL_NO_RESET_NOTIFICATION_ARB},
    {"GL_MAX_COMPUTE_SHARED_MEMORY_SIZE", GL_MAX_COMPUTE_SHARED_MEMORY_SIZE},
    {"GL_MAX_COMPUTE_UNIFORM_COMPONENTS", GL_MAX_COMPUTE_UNIFORM_COMPONENTS},
    {"GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS", GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_COMPUTE_ATOMIC_COUNTERS", GL_MAX_COMPUTE_ATOMIC_COUNTERS},
    {"GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS", GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS},
    {"GL_COMPUTE_LOCAL_WORK_SIZE", GL_COMPUTE_LOCAL_WORK_SIZE},
    {"GL_DEBUG_TYPE_MARKER", GL_DEBUG_TYPE_MARKER},
    {"GL_DEBUG_TYPE_PUSH_GROUP", GL_DEBUG_TYPE_PUSH_GROUP},
    {"GL_DEBUG_TYPE_POP_GROUP", GL_DEBUG_TYPE_POP_GROUP},
    {"GL_DEBUG_SEVERITY_NOTIFICATION", GL_DEBUG_SEVERITY_NOTIFICATION},
    {"GL_MAX_DEBUG_GROUP_STACK_DEPTH", GL_MAX_DEBUG_GROUP_STACK_DEPTH},
    {"GL_DEBUG_GROUP_STACK_DEPTH", GL_DEBUG_GROUP_STACK_DEPTH},
    {"GL_MAX_UNIFORM_LOCATIONS", GL_MAX_UNIFORM_LOCATIONS},
    {"GL_INTERNALFORMAT_SUPPORTED", GL_INTERNALFORMAT_SUPPORTED},
    {"GL_INTERNALFORMAT_PREFERRED", GL_INTERNALFORMAT_PREFERRED},
    {"GL_INTERNALFORMAT_RED_SIZE", GL_INTERNALFORMAT_RED_SIZE},
    {"GL_INTERNALFORMAT_GREEN_SIZE", GL_INTERNALFORMAT_GREEN_SIZE},
    {"GL_INTERNALFORMAT_BLUE_SIZE", GL_INTERNALFORMAT_BLUE_SIZE},
    {"GL_INTERNALFORMAT_ALPHA_SIZE", GL_INTERNALFORMAT_ALPHA_SIZE},
    {"GL_INTERNALFORMAT_DEPTH_SIZE", GL_INTERNALFORMAT_DEPTH_SIZE},
    {"GL_INTERNALFORMAT_STENCIL_SIZE", GL_INTERNALFORMAT_STENCIL_SIZE},
    {"GL_INTERNALFORMAT_SHARED_SIZE", GL_INTERNALFORMAT_SHARED_SIZE},
    {"GL_INTERNALFORMAT_RED_TYPE", GL_INTERNALFORMAT_RED_TYPE},
    {"GL_INTERNALFORMAT_GREEN_TYPE", GL_INTERNALFORMAT_GREEN_TYPE},
    {"GL_INTERNALFORMAT_BLUE_TYPE", GL_INTERNALFORMAT_BLUE_TYPE},
    {"GL_INTERNALFORMAT_ALPHA_TYPE", GL_INTERNALFORMAT_ALPHA_TYPE},
    {"GL_INTERNALFORMAT_DEPTH_TYPE", GL_INTERNALFORMAT_DEPTH_TYPE},
    {"GL_INTERNALFORMAT_STENCIL_TYPE", GL_INTERNALFORMAT_STENCIL_TYPE},
    {"GL_MAX_WIDTH", GL_MAX_WIDTH},
    {"GL_MAX_HEIGHT", GL_MAX_HEIGHT},
    {"GL_MAX_DEPTH", GL_MAX_DEPTH},
    {"GL_MAX_LAYERS", GL_MAX_LAYERS},
    {"GL_MAX_COMBINED_DIMENSIONS", GL_MAX_COMBINED_DIMENSIONS},
    {"GL_COLOR_COMPONENTS", GL_COLOR_COMPONENTS},
    {"GL_DEPTH_COMPONENTS", GL_DEPTH_COMPONENTS},
    {"GL_STENCIL_COMPONENTS", GL_STENCIL_COMPONENTS},
    {"GL_COLOR_RENDERABLE", GL_COLOR_RENDERABLE},
    {"GL_DEPTH_RENDERABLE", GL_DEPTH_RENDERABLE},
    {"GL_STENCIL_RENDERABLE", GL_STENCIL_RENDERABLE},
    {"GL_FRAMEBUFFER_RENDERABLE", GL_FRAMEBUFFER_RENDERABLE},
    {"GL_FRAMEBUFFER_RENDERABLE_LAYERED", GL_FRAMEBUFFER_RENDERABLE_LAYERED},
    {"GL_FRAMEBUFFER_BLEND", GL_FRAMEBUFFER_BLEND},
    {"GL_READ_PIXELS", GL_READ_PIXELS},
    {"GL_READ_PIXELS_FORMAT", GL_READ_PIXELS_FORMAT},
    {"GL_READ_PIXELS_TYPE", GL_READ_PIXELS_TYPE},
    {"GL_TEXTURE_IMAGE_FORMAT", GL_TEXTURE_IMAGE_FORMAT},
    {"GL_TEXTURE_IMAGE_TYPE", GL_TEXTURE_IMAGE_TYPE},
    {"GL_GET_TEXTURE_IMAGE_FORMAT", GL_GET_TEXTURE_IMAGE_FORMAT},
    {"GL_GET_TEXTURE_IMAGE_TYPE", GL_GET_TEXTURE_IMAGE_TYPE},
    {"GL_MIPMAP", GL_MIPMAP},
    {"GL_MANUAL_GENERATE_MIPMAP", GL_MANUAL_GENERATE_MIPMAP},
    {"GL_AUTO_GENERATE_MIPMAP", GL_AUTO_GENERATE_MIPMAP},
    {"GL_COLOR_ENCODING", GL_COLOR_ENCODING},
    {"GL_SRGB_READ", GL_SRGB_READ},
    {"GL_SRGB_WRITE", GL_SRGB_WRITE},
    {"GL_SRGB_DECODE_ARB", GL_SRGB_DECODE_ARB},
    {"GL_FILTER", GL_FILTER},
    {"GL_VERTEX_TEXTURE", GL_VERTEX_TEXTURE},
    {"GL_TESS_CONTROL_TEXTURE", GL_TESS_CONTROL_TEXTURE},
    {"GL_TESS_EVALUATION_TEXTURE", GL_TESS_EVALUATION_TEXTURE},
    {"GL_GEOMETRY_TEXTURE", GL_GEOMETRY_TEXTURE},
    {"GL_FRAGMENT_TEXTURE", GL_FRAGMENT_TEXTURE},
    {"GL_COMPUTE_TEXTURE", GL_COMPUTE_TEXTURE},
    {"GL_TEXTURE_SHADOW", GL_TEXTURE_SHADOW},
    {"GL_TEXTURE_GATHER", GL_TEXTURE_GATHER},
    {"GL_TEXTURE_GATHER_SHADOW", GL_TEXTURE_GATHER_SHADOW},
    {"GL_SHADER_IMAGE_LOAD", GL_SHADER_IMAGE_LOAD},
    {"GL_SHADER_IMAGE_STORE", GL_SHADER_IMAGE_STORE},
    {"GL_SHADER_IMAGE_ATOMIC", GL_SHADER_IMAGE_ATOMIC},
    {"GL_IMAGE_TEXEL_SIZE", GL_IMAGE_TEXEL_SIZE},
    {"GL_IMAGE_COMPATIBILITY_CLASS", GL_IMAGE_COMPATIBILITY_CLASS},
    {"GL_IMAGE_PIXEL_FORMAT", GL_IMAGE_PIXEL_FORMAT},
    {"GL_IMAGE_PIXEL_TYPE", GL_IMAGE_PIXEL_TYPE},
    {"GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST", GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST},
    {"GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST", GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST},
    {"GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE", GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE},
    {"GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE", GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE},
    {"GL_TEXTURE_COMPRESSED_BLOCK_WIDTH", GL_TEXTURE_COMPRESSED_BLOCK_WIDTH},
    {"GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT", GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT},
    {"GL_TEXTURE_COMPRESSED_BLOCK_SIZE", GL_TEXTURE_COMPRESSED_BLOCK_SIZE},
    {"GL_CLEAR_BUFFER", GL_CLEAR_BUFFER},
    {"GL_TEXTURE_VIEW", GL_TEXTURE_VIEW},
    {"GL_VIEW_COMPATIBILITY_CLASS", GL_VIEW_COMPATIBILITY_CLASS},
    {"GL_FULL_SUPPORT", GL_FULL_SUPPORT},
    {"GL_CAVEAT_SUPPORT", GL_CAVEAT_SUPPORT},
    {"GL_IMAGE_CLASS_4_X_32", GL_IMAGE_CLASS_4_X_32},
    {"GL_IMAGE_CLASS_2_X_32", GL_IMAGE_CLASS_2_X_32},
    {"GL_IMAGE_CLASS_1_X_32", GL_IMAGE_CLASS_1_X_32},
    {"GL_IMAGE_CLASS_4_X_16", GL_IMAGE_CLASS_4_X_16},
    {"GL_IMAGE_CLASS_2_X_16", GL_IMAGE_CLASS_2_X_16},
    {"GL_IMAGE_CLASS_1_X_16", GL_IMAGE_CLASS_1_X_16},
    {"GL_IMAGE_CLASS_4_X_8", GL_IMAGE_CLASS_4_X_8},
    {"GL_IMAGE_CLASS_2_X_8", GL_IMAGE_CLASS_2_X_8},
    {"GL_IMAGE_CLASS_1_X_8", GL_IMAGE_CLASS_1_X_8},
    {"GL_IMAGE_CLASS_11_11_10", GL_IMAGE_CLASS_11_11_10},
    {"GL_IMAGE_CLASS_10_10_10_2", GL_IMAGE_CLASS_10_10_10_2},
    {"GL_VIEW_CLASS_128_BITS", GL_VIEW_CLASS_128_BITS},
    {"GL_VIEW_CLASS_96_BITS", GL_VIEW_CLASS_96_BITS},
    {"GL_VIEW_CLASS_64_BITS", GL_VIEW_CLASS_64_BITS},
    {"GL_VIEW_CLASS_48_BITS", GL_VIEW_CLASS_48_BITS},
    {"GL_VIEW_CLASS_32_BITS", GL_VIEW_CLASS_32_BITS},
    {"GL_VIEW_CLASS_24_BITS", GL_VIEW_CLASS_24_BITS},
    {"GL_VIEW_CLASS_16_BITS", GL_VIEW_CLASS_16_BITS},
    {"GL_VIEW_CLASS_8_BITS", GL_VIEW_CLASS_8_BITS},
    {"GL_VIEW_CLASS_S3TC_DXT1_RGB", GL_VIEW_CLASS_S3TC_DXT1_RGB},
    {"GL_VIEW_CLASS_S3TC_DXT1_RGBA", GL_VIEW_CLASS_S3TC_DXT1_RGBA},
    {"GL_VIEW_CLASS_S3TC_DXT3_RGBA", GL_VIEW_CLASS_S3TC_DXT3_RGBA},
    {"GL_VIEW_CLASS_S3TC_DXT5_RGBA", GL_VIEW_CLASS_S3TC_DXT5_RGBA},
    {"GL_VIEW_CLASS_RGTC1_RED", GL_VIEW_CLASS_RGTC1_RED},
    {"GL_VIEW_CLASS_RGTC2_RG", GL_VIEW_CLASS_RGTC2_RG},
    {"GL_VIEW_CLASS_BPTC_UNORM", GL_VIEW_CLASS_BPTC_UNORM},
    {"GL_VIEW_CLASS_BPTC_FLOAT", GL_VIEW_CLASS_BPTC_FLOAT},
    {"GL_VERTEX_ATTRIB_BINDING", GL_VERTEX_ATTRIB_BINDING},
    {"GL_VERTEX_ATTRIB_RELATIVE_OFFSET", GL_VERTEX_ATTRIB_RELATIVE_OFFSET},
    {"GL_VERTEX_BINDING_DIVISOR", GL_VERTEX_BINDING_DIVISOR},
    {"GL_VERTEX_BINDING_OFFSET", GL_VERTEX_BINDING_OFFSET},
    {"GL_VERTEX_BINDING_STRIDE", GL_VERTEX_BINDING_STRIDE},
    {"GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET", GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET},
    {"GL_MAX_VERTEX_ATTRIB_BINDINGS", GL_MAX_VERTEX_ATTRIB_BINDINGS},
    {"GL_TEXTURE_VIEW_MIN_LEVEL", GL_TEXTURE_VIEW_MIN_LEVEL},
    {"GL_TEXTURE_VIEW_NUM_LEVELS", GL_TEXTURE_VIEW_NUM_LEVELS},
    {"GL_TEXTURE_VIEW_MIN_LAYER", GL_TEXTURE_VIEW_MIN_LAYER},
    {"GL_TEXTURE_VIEW_NUM_LAYERS", GL_TEXTURE_VIEW_NUM_LAYERS},
    {"GL_TEXTURE_IMMUTABLE_LEVELS", GL_TEXTURE_IMMUTABLE_LEVELS},
    {"GL_BUFFER", GL_BUFFER},
    {"GL_SHADER", GL_SHADER},
    {"GL_PROGRAM", GL_PROGRAM},
    {"GL_QUERY", GL_QUERY},
    {"GL_PROGRAM_PIPELINE", GL_PROGRAM_PIPELINE},
    {"GL_SAMPLER", GL_SAMPLER},
    {"GL_DISPLAY_LIST", GL_DISPLAY_LIST},
    {"GL_MAX_LABEL_LENGTH", GL_MAX_LABEL_LENGTH},
    {"GL_NUM_SHADING_LANGUAGE_VERSIONS", GL_NUM_SHADING_LANGUAGE_VERSIONS},
    {"GL_DEPTH_PASS_INSTRUMENT_SGIX", GL_DEPTH_PASS_INSTRUMENT_SGIX},
    {"GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX", GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX},
    {"GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX", GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX},
    {"GL_CONVOLUTION_HINT_SGIX", GL_CONVOLUTION_HINT_SGIX},
    {"GL_YCRCB_SGIX", GL_YCRCB_SGIX},
    {"GL_YCRCBA_SGIX", GL_YCRCBA_SGIX},
    {"GL_ALPHA_MIN_SGIX", GL_ALPHA_MIN_SGIX},
    {"GL_ALPHA_MAX_SGIX", GL_ALPHA_MAX_SGIX},
    {"GL_SCALEBIAS_HINT_SGIX", GL_SCALEBIAS_HINT_SGIX},
    {"GL_ASYNC_MARKER_SGIX", GL_ASYNC_MARKER_SGIX},
    {"GL_PIXEL_TEX_GEN_MODE_SGIX", GL_PIXEL_TEX_GEN_MODE_SGIX},
    {"GL_ASYNC_HISTOGRAM_SGIX", GL_ASYNC_HISTOGRAM_SGIX},
    {"GL_MAX_ASYNC_HISTOGRAM_SGIX", GL_MAX_ASYNC_HISTOGRAM_SGIX},
    {"GL_PIXEL_TRANSFORM_2D_EXT", GL_PIXEL_TRANSFORM_2D_EXT},
    {"GL_PIXEL_MAG_FILTER_EXT", GL_PIXEL_MAG_FILTER_EXT},
    {"GL_PIXEL_MIN_FILTER_EXT", GL_PIXEL_MIN_FILTER_EXT},
    {"GL_PIXEL_CUBIC_WEIGHT_EXT", GL_PIXEL_CUBIC_WEIGHT_EXT},
    {"GL_CUBIC_EXT", GL_CUBIC_EXT},
    {"GL_AVERAGE_EXT", GL_AVERAGE_EXT},
    {"GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT},
    {"GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT", GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT},
    {"GL_PIXEL_TRANSFORM_2D_MATRIX_EXT", GL_PIXEL_TRANSFORM_2D_MATRIX_EXT},
    {"GL_FRAGMENT_MATERIAL_EXT", GL_FRAGMENT_MATERIAL_EXT},
    {"GL_FRAGMENT_NORMAL_EXT", GL_FRAGMENT_NORMAL_EXT},
    {"GL_FRAGMENT_COLOR_EXT", GL_FRAGMENT_COLOR_EXT},
    {"GL_ATTENUATION_EXT", GL_ATTENUATION_EXT},
    {"GL_SHADOW_ATTENUATION_EXT", GL_SHADOW_ATTENUATION_EXT},
    {"GL_TEXTURE_APPLICATION_MODE_EXT", GL_TEXTURE_APPLICATION_MODE_EXT},
    {"GL_TEXTURE_LIGHT_EXT", GL_TEXTURE_LIGHT_EXT},
    {"GL_TEXTURE_MATERIAL_FACE_EXT", GL_TEXTURE_MATERIAL_FACE_EXT},
    {"GL_TEXTURE_MATERIAL_PARAMETER_EXT", GL_TEXTURE_MATERIAL_PARAMETER_EXT},
    {"GL_PIXEL_TEXTURE_SGIS", GL_PIXEL_TEXTURE_SGIS},
    {"GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS", GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS},
    {"GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS", GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS},
    {"GL_PIXEL_GROUP_COLOR_SGIS", GL_PIXEL_GROUP_COLOR_SGIS},
    {"GL_ASYNC_TEX_IMAGE_SGIX", GL_ASYNC_TEX_IMAGE_SGIX},
    {"GL_ASYNC_DRAW_PIXELS_SGIX", GL_ASYNC_DRAW_PIXELS_SGIX},
    {"GL_ASYNC_READ_PIXELS_SGIX", GL_ASYNC_READ_PIXELS_SGIX},
    {"GL_MAX_ASYNC_TEX_IMAGE_SGIX", GL_MAX_ASYNC_TEX_IMAGE_SGIX},
    {"GL_MAX_ASYNC_DRAW_PIXELS_SGIX", GL_MAX_ASYNC_DRAW_PIXELS_SGIX},
    {"GL_MAX_ASYNC_READ_PIXELS_SGIX", GL_MAX_ASYNC_READ_PIXELS_SGIX},
    {"GL_UNSIGNED_BYTE_2_3_3_REV", GL_UNSIGNED_BYTE_2_3_3_REV},
    {"GL_UNSIGNED_SHORT_5_6_5", GL_UNSIGNED_SHORT_5_6_5},
    {"GL_UNSIGNED_SHORT_5_6_5_REV", GL_UNSIGNED_SHORT_5_6_5_REV},
    {"GL_UNSIGNED_SHORT_4_4_4_4_REV", GL_UNSIGNED_SHORT_4_4_4_4_REV},
    {"GL_UNSIGNED_SHORT_1_5_5_5_REV", GL_UNSIGNED_SHORT_1_5_5_5_REV},
    {"GL_UNSIGNED_INT_8_8_8_8_REV", GL_UNSIGNED_INT_8_8_8_8_REV},
    {"GL_UNSIGNED_INT_2_10_10_10_REV", GL_UNSIGNED_INT_2_10_10_10_REV},
    {"GL_TEXTURE_MAX_CLAMP_S_SGIX", GL_TEXTURE_MAX_CLAMP_S_SGIX},
    {"GL_TEXTURE_MAX_CLAMP_T_SGIX", GL_TEXTURE_MAX_CLAMP_T_SGIX},
    {"GL_TEXTURE_MAX_CLAMP_R_SGIX", GL_TEXTURE_MAX_CLAMP_R_SGIX},
    {"GL_MIRRORED_REPEAT", GL_MIRRORED_REPEAT},
    {"GL_RGB_S3TC", GL_RGB_S3TC},
    {"GL_RGB4_S3TC", GL_RGB4_S3TC},
    {"GL_RGBA_S3TC", GL_RGBA_S3TC},
    {"GL_RGBA4_S3TC", GL_RGBA4_S3TC},
    {"GL_VERTEX_PRECLIP_SGIX", GL_VERTEX_PRECLIP_SGIX},
    {"GL_VERTEX_PRECLIP_HINT_SGIX", GL_VERTEX_PRECLIP_HINT_SGIX},
    {"GL_COMPRESSED_RGB_S3TC_DXT1_EXT", GL_COMPRESSED_RGB_S3TC_DXT1_EXT},
    {"GL_COMPRESSED_RGBA_S3TC_DXT1_EXT", GL_COMPRESSED_RGBA_S3TC_DXT1_EXT},
    {"GL_COMPRESSED_RGBA_S3TC_DXT3_EXT", GL_COMPRESSED_RGBA_S3TC_DXT3_EXT},
    {"GL_COMPRESSED_RGBA_S3TC_DXT5_EXT", GL_COMPRESSED_RGBA_S3TC_DXT5_EXT},
    {"GL_PARALLEL_ARRAYS_INTEL", GL_PARALLEL_ARRAYS_INTEL},
    {"GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL", GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL},
    {"GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL", GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL},
    {"GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL", GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL},
    {"GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL", GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL},
    {"GL_FRAGMENT_LIGHTING_SGIX", GL_FRAGMENT_LIGHTING_SGIX},
    {"GL_FRAGMENT_COLOR_MATERIAL_SGIX", GL_FRAGMENT_COLOR_MATERIAL_SGIX},
    {"GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX", GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX},
    {"GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX", GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX},
    {"GL_MAX_FRAGMENT_LIGHTS_SGIX", GL_MAX_FRAGMENT_LIGHTS_SGIX},
    {"GL_MAX_ACTIVE_LIGHTS_SGIX", GL_MAX_ACTIVE_LIGHTS_SGIX},
    {"GL_CURRENT_RASTER_NORMAL_SGIX", GL_CURRENT_RASTER_NORMAL_SGIX},
    {"GL_LIGHT_ENV_MODE_SGIX", GL_LIGHT_ENV_MODE_SGIX},
    {"GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX", GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX},
    {"GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX", GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX},
    {"GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX", GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX},
    {"GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX", GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX},
    {"GL_FRAGMENT_LIGHT0_SGIX", GL_FRAGMENT_LIGHT0_SGIX},
    {"GL_FRAGMENT_LIGHT1_SGIX", GL_FRAGMENT_LIGHT1_SGIX},
    {"GL_FRAGMENT_LIGHT2_SGIX", GL_FRAGMENT_LIGHT2_SGIX},
    {"GL_FRAGMENT_LIGHT3_SGIX", GL_FRAGMENT_LIGHT3_SGIX},
    {"GL_FRAGMENT_LIGHT4_SGIX", GL_FRAGMENT_LIGHT4_SGIX},
    {"GL_FRAGMENT_LIGHT5_SGIX", GL_FRAGMENT_LIGHT5_SGIX},
    {"GL_FRAGMENT_LIGHT6_SGIX", GL_FRAGMENT_LIGHT6_SGIX},
    {"GL_FRAGMENT_LIGHT7_SGIX", GL_FRAGMENT_LIGHT7_SGIX},
    {"GL_PACK_RESAMPLE_SGIX", GL_PACK_RESAMPLE_SGIX},
    {"GL_UNPACK_RESAMPLE_SGIX", GL_UNPACK_RESAMPLE_SGIX},
    {"GL_RESAMPLE_REPLICATE_SGIX", GL_RESAMPLE_REPLICATE_SGIX},
    {"GL_RESAMPLE_ZERO_FILL_SGIX", GL_RESAMPLE_ZERO_FILL_SGIX},
    {"GL_RESAMPLE_DECIMATE_SGIX", GL_RESAMPLE_DECIMATE_SGIX},
    {"GL_TANGENT_ARRAY_EXT", GL_TANGENT_ARRAY_EXT},
    {"GL_BINORMAL_ARRAY_EXT", GL_BINORMAL_ARRAY_EXT},
    {"GL_CURRENT_TANGENT_EXT", GL_CURRENT_TANGENT_EXT},
    {"GL_CURRENT_BINORMAL_EXT", GL_CURRENT_BINORMAL_EXT},
    {"GL_TANGENT_ARRAY_TYPE_EXT", GL_TANGENT_ARRAY_TYPE_EXT},
    {"GL_TANGENT_ARRAY_STRIDE_EXT", GL_TANGENT_ARRAY_STRIDE_EXT},
    {"GL_BINORMAL_ARRAY_TYPE_EXT", GL_BINORMAL_ARRAY_TYPE_EXT},
    {"GL_BINORMAL_ARRAY_STRIDE_EXT", GL_BINORMAL_ARRAY_STRIDE_EXT},
    {"GL_TANGENT_ARRAY_POINTER_EXT", GL_TANGENT_ARRAY_POINTER_EXT},
    {"GL_BINORMAL_ARRAY_POINTER_EXT", GL_BINORMAL_ARRAY_POINTER_EXT},
    {"GL_MAP1_TANGENT_EXT", GL_MAP1_TANGENT_EXT},
    {"GL_MAP2_TANGENT_EXT", GL_MAP2_TANGENT_EXT},
    {"GL_MAP1_BINORMAL_EXT", GL_MAP1_BINORMAL_EXT},
    {"GL_MAP2_BINORMAL_EXT", GL_MAP2_BINORMAL_EXT},
    {"GL_NEAREST_CLIPMAP_NEAREST_SGIX", GL_NEAREST_CLIPMAP_NEAREST_SGIX},
    {"GL_NEAREST_CLIPMAP_LINEAR_SGIX", GL_NEAREST_CLIPMAP_LINEAR_SGIX},
    {"GL_LINEAR_CLIPMAP_NEAREST_SGIX", GL_LINEAR_CLIPMAP_NEAREST_SGIX},
    {"GL_FOG_COORD_SRC", GL_FOG_COORD_SRC},
    {"GL_FOG_COORD", GL_FOG_COORD},
    {"GL_FRAGMENT_DEPTH", GL_FRAGMENT_DEPTH},
    {"GL_CURRENT_FOG_COORD", GL_CURRENT_FOG_COORD},
    {"GL_FOG_COORD_ARRAY_TYPE", GL_FOG_COORD_ARRAY_TYPE},
    {"GL_FOG_COORD_ARRAY_STRIDE", GL_FOG_COORD_ARRAY_STRIDE},
    {"GL_FOG_COORD_ARRAY_POINTER", GL_FOG_COORD_ARRAY_POINTER},
    {"GL_FOG_COORD_ARRAY", GL_FOG_COORD_ARRAY},
    {"GL_COLOR_SUM", GL_COLOR_SUM},
    {"GL_CURRENT_SECONDARY_COLOR", GL_CURRENT_SECONDARY_COLOR},
    {"GL_SECONDARY_COLOR_ARRAY_SIZE", GL_SECONDARY_COLOR_ARRAY_SIZE},
    {"GL_SECONDARY_COLOR_ARRAY_TYPE", GL_SECONDARY_COLOR_ARRAY_TYPE},
    {"GL_SECONDARY_COLOR_ARRAY_STRIDE", GL_SECONDARY_COLOR_ARRAY_STRIDE},
    {"GL_SECONDARY_COLOR_ARRAY_POINTER", GL_SECONDARY_COLOR_ARRAY_POINTER},
    {"GL_SECONDARY_COLOR_ARRAY", GL_SECONDARY_COLOR_ARRAY},
    {"GL_CURRENT_RASTER_SECONDARY_COLOR", GL_CURRENT_RASTER_SECONDARY_COLOR},
    {"GL_ALIASED_POINT_SIZE_RANGE", GL_ALIASED_POINT_SIZE_RANGE},
    {"GL_ALIASED_LINE_WIDTH_RANGE", GL_ALIASED_LINE_WIDTH_RANGE},
    {"GL_SCREEN_COORDINATES_REND", GL_SCREEN_COORDINATES_REND},
    {"GL_INVERTED_SCREEN_W_REND", GL_INVERTED_SCREEN_W_REND},
    {"GL_TEXTURE0", GL_TEXTURE0},
    {"GL_TEXTURE1", GL_TEXTURE1},
    {"GL_TEXTURE2", GL_TEXTURE2},
    {"GL_TEXTURE3", GL_TEXTURE3},
    {"GL_TEXTURE4", GL_TEXTURE4},
    {"GL_TEXTURE5", GL_TEXTURE5},
    {"GL_TEXTURE6", GL_TEXTURE6},
    {"GL_TEXTURE7", GL_TEXTURE7},
    {"GL_TEXTURE8", GL_TEXTURE8},
    {"GL_TEXTURE9", GL_TEXTURE9},
    {"GL_TEXTURE10", GL_TEXTURE10},
    {"GL_TEXTURE11", GL_TEXTURE11},
    {"GL_TEXTURE12", GL_TEXTURE12},
    {"GL_TEXTURE13", GL_TEXTURE13},
    {"GL_TEXTURE14", GL_TEXTURE14},
    {"GL_TEXTURE15", GL_TEXTURE15},
    {"GL_TEXTURE16", GL_TEXTURE16},
    {"GL_TEXTURE17", GL_TEXTURE17},
    {"GL_TEXTURE18", GL_TEXTURE18},
    {"GL_TEXTURE19", GL_TEXTURE19},
    {"GL_TEXTURE20", GL_TEXTURE20},
    {"GL_TEXTURE21", GL_TEXTURE21},
    {"GL_TEXTURE22", GL_TEXTURE22},
    {"GL_TEXTURE23", GL_TEXTURE23},
    {"GL_TEXTURE24", GL_TEXTURE24},
    {"GL_TEXTURE25", GL_TEXTURE25},
    {"GL_TEXTURE26", GL_TEXTURE26},
    {"GL_TEXTURE27", GL_TEXTURE27},
    {"GL_TEXTURE28", GL_TEXTURE28},
    {"GL_TEXTURE29", GL_TEXTURE29},
    {"GL_TEXTURE30", GL_TEXTURE30},
    {"GL_TEXTURE31", GL_TEXTURE31},
    {"GL_ACTIVE_TEXTURE", GL_ACTIVE_TEXTURE},
    {"GL_CLIENT_ACTIVE_TEXTURE", GL_CLIENT_ACTIVE_TEXTURE},
    {"GL_MAX_TEXTURE_UNITS", GL_MAX_TEXTURE_UNITS},
    {"GL_TRANSPOSE_MODELVIEW_MATRIX", GL_TRANSPOSE_MODELVIEW_MATRIX},
    {"GL_TRANSPOSE_PROJECTION_MATRIX", GL_TRANSPOSE_PROJECTION_MATRIX},
    {"GL_TRANSPOSE_TEXTURE_MATRIX", GL_TRANSPOSE_TEXTURE_MATRIX},
    {"GL_TRANSPOSE_COLOR_MATRIX", GL_TRANSPOSE_COLOR_MATRIX},
    {"GL_SUBTRACT", GL_SUBTRACT},
    {"GL_MAX_RENDERBUFFER_SIZE", GL_MAX_RENDERBUFFER_SIZE},
    {"GL_COMPRESSED_ALPHA", GL_COMPRESSED_ALPHA},
    {"GL_COMPRESSED_LUMINANCE", GL_COMPRESSED_LUMINANCE},
    {"GL_COMPRESSED_LUMINANCE_ALPHA", GL_COMPRESSED_LUMINANCE_ALPHA},
    {"GL_COMPRESSED_INTENSITY", GL_COMPRESSED_INTENSITY},
    {"GL_COMPRESSED_RGB", GL_COMPRESSED_RGB},
    {"GL_COMPRESSED_RGBA", GL_COMPRESSED_RGBA},
    {"GL_TEXTURE_COMPRESSION_HINT", GL_TEXTURE_COMPRESSION_HINT},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER},
    {"GL_ALL_COMPLETED_NV", GL_ALL_COMPLETED_NV},
    {"GL_FENCE_STATUS_NV", GL_FENCE_STATUS_NV},
    {"GL_FENCE_CONDITION_NV", GL_FENCE_CONDITION_NV},
    {"GL_TEXTURE_RECTANGLE", GL_TEXTURE_RECTANGLE},
    {"GL_TEXTURE_BINDING_RECTANGLE", GL_TEXTURE_BINDING_RECTANGLE},
    {"GL_PROXY_TEXTURE_RECTANGLE", GL_PROXY_TEXTURE_RECTANGLE},
    {"GL_MAX_RECTANGLE_TEXTURE_SIZE", GL_MAX_RECTANGLE_TEXTURE_SIZE},
    {"GL_DEPTH_STENCIL", GL_DEPTH_STENCIL},
    {"GL_UNSIGNED_INT_24_8", GL_UNSIGNED_INT_24_8},
    {"GL_MAX_TEXTURE_LOD_BIAS", GL_MAX_TEXTURE_LOD_BIAS},
    {"GL_TEXTURE_MAX_ANISOTROPY_EXT", GL_TEXTURE_MAX_ANISOTROPY_EXT},
    {"GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT", GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT},
    {"GL_TEXTURE_FILTER_CONTROL", GL_TEXTURE_FILTER_CONTROL},
    {"GL_TEXTURE_LOD_BIAS", GL_TEXTURE_LOD_BIAS},
    {"GL_MODELVIEW1_STACK_DEPTH_EXT", GL_MODELVIEW1_STACK_DEPTH_EXT},
    {"GL_COMBINE4_NV", GL_COMBINE4_NV},
    {"GL_MAX_SHININESS_NV", GL_MAX_SHININESS_NV},
    {"GL_MAX_SPOT_EXPONENT_NV", GL_MAX_SPOT_EXPONENT_NV},
    {"GL_MODELVIEW1_MATRIX_EXT", GL_MODELVIEW1_MATRIX_EXT},
    {"GL_INCR_WRAP", GL_INCR_WRAP},
    {"GL_DECR_WRAP", GL_DECR_WRAP},
    {"GL_VERTEX_WEIGHTING_EXT", GL_VERTEX_WEIGHTING_EXT},
    {"GL_MODELVIEW1_ARB", GL_MODELVIEW1_ARB},
    {"GL_CURRENT_VERTEX_WEIGHT_EXT", GL_CURRENT_VERTEX_WEIGHT_EXT},
    {"GL_VERTEX_WEIGHT_ARRAY_EXT", GL_VERTEX_WEIGHT_ARRAY_EXT},
    {"GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT", GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT},
    {"GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT", GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT},
    {"GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT", GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT},
    {"GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT", GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT},
    {"GL_NORMAL_MAP", GL_NORMAL_MAP},
    {"GL_REFLECTION_MAP", GL_REFLECTION_MAP},
    {"GL_TEXTURE_CUBE_MAP", GL_TEXTURE_CUBE_MAP},
    {"GL_TEXTURE_BINDING_CUBE_MAP", GL_TEXTURE_BINDING_CUBE_MAP},
    {"GL_TEXTURE_CUBE_MAP_POSITIVE_X", GL_TEXTURE_CUBE_MAP_POSITIVE_X},
    {"GL_TEXTURE_CUBE_MAP_NEGATIVE_X", GL_TEXTURE_CUBE_MAP_NEGATIVE_X},
    {"GL_TEXTURE_CUBE_MAP_POSITIVE_Y", GL_TEXTURE_CUBE_MAP_POSITIVE_Y},
    {"GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", GL_TEXTURE_CUBE_MAP_NEGATIVE_Y},
    {"GL_TEXTURE_CUBE_MAP_POSITIVE_Z", GL_TEXTURE_CUBE_MAP_POSITIVE_Z},
    {"GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", GL_TEXTURE_CUBE_MAP_NEGATIVE_Z},
    {"GL_PROXY_TEXTURE_CUBE_MAP", GL_PROXY_TEXTURE_CUBE_MAP},
    {"GL_MAX_CUBE_MAP_TEXTURE_SIZE", GL_MAX_CUBE_MAP_TEXTURE_SIZE},
    {"GL_VERTEX_ARRAY_RANGE_NV", GL_VERTEX_ARRAY_RANGE_NV},
    {"GL_VERTEX_ARRAY_RANGE_LENGTH_NV", GL_VERTEX_ARRAY_RANGE_LENGTH_NV},
    {"GL_VERTEX_ARRAY_RANGE_VALID_NV", GL_VERTEX_ARRAY_RANGE_VALID_NV},
    {"GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV", GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV},
    {"GL_VERTEX_ARRAY_RANGE_POINTER_NV", GL_VERTEX_ARRAY_RANGE_POINTER_NV},
    {"GL_REGISTER_COMBINERS_NV", GL_REGISTER_COMBINERS_NV},
    {"GL_VARIABLE_A_NV", GL_VARIABLE_A_NV},
    {"GL_VARIABLE_B_NV", GL_VARIABLE_B_NV},
    {"GL_VARIABLE_C_NV", GL_VARIABLE_C_NV},
    {"GL_VARIABLE_D_NV", GL_VARIABLE_D_NV},
    {"GL_VARIABLE_E_NV", GL_VARIABLE_E_NV},
    {"GL_VARIABLE_F_NV", GL_VARIABLE_F_NV},
    {"GL_VARIABLE_G_NV", GL_VARIABLE_G_NV},
    {"GL_CONSTANT_COLOR0_NV", GL_CONSTANT_COLOR0_NV},
    {"GL_CONSTANT_COLOR1_NV", GL_CONSTANT_COLOR1_NV},
    {"GL_PRIMARY_COLOR_NV", GL_PRIMARY_COLOR_NV},
    {"GL_SECONDARY_COLOR_NV", GL_SECONDARY_COLOR_NV},
    {"GL_SPARE0_NV", GL_SPARE0_NV},
    {"GL_SPARE1_NV", GL_SPARE1_NV},
    {"GL_DISCARD_NV", GL_DISCARD_NV},
    {"GL_E_TIMES_F_NV", GL_E_TIMES_F_NV},
    {"GL_SPARE0_PLUS_SECONDARY_COLOR_NV", GL_SPARE0_PLUS_SECONDARY_COLOR_NV},
    {"GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV", GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV},
    {"GL_MULTISAMPLE_FILTER_HINT_NV", GL_MULTISAMPLE_FILTER_HINT_NV},
    {"GL_PER_STAGE_CONSTANTS_NV", GL_PER_STAGE_CONSTANTS_NV},
    {"GL_UNSIGNED_IDENTITY_NV", GL_UNSIGNED_IDENTITY_NV},
    {"GL_UNSIGNED_INVERT_NV", GL_UNSIGNED_INVERT_NV},
    {"GL_EXPAND_NORMAL_NV", GL_EXPAND_NORMAL_NV},
    {"GL_EXPAND_NEGATE_NV", GL_EXPAND_NEGATE_NV},
    {"GL_HALF_BIAS_NORMAL_NV", GL_HALF_BIAS_NORMAL_NV},
    {"GL_HALF_BIAS_NEGATE_NV", GL_HALF_BIAS_NEGATE_NV},
    {"GL_SIGNED_IDENTITY_NV", GL_SIGNED_IDENTITY_NV},
    {"GL_SIGNED_NEGATE_NV", GL_SIGNED_NEGATE_NV},
    {"GL_SCALE_BY_TWO_NV", GL_SCALE_BY_TWO_NV},
    {"GL_SCALE_BY_FOUR_NV", GL_SCALE_BY_FOUR_NV},
    {"GL_SCALE_BY_ONE_HALF_NV", GL_SCALE_BY_ONE_HALF_NV},
    {"GL_BIAS_BY_NEGATIVE_ONE_HALF_NV", GL_BIAS_BY_NEGATIVE_ONE_HALF_NV},
    {"GL_COMBINER_INPUT_NV", GL_COMBINER_INPUT_NV},
    {"GL_COMBINER_MAPPING_NV", GL_COMBINER_MAPPING_NV},
    {"GL_COMBINER_COMPONENT_USAGE_NV", GL_COMBINER_COMPONENT_USAGE_NV},
    {"GL_COMBINER_AB_DOT_PRODUCT_NV", GL_COMBINER_AB_DOT_PRODUCT_NV},
    {"GL_COMBINER_CD_DOT_PRODUCT_NV", GL_COMBINER_CD_DOT_PRODUCT_NV},
    {"GL_COMBINER_MUX_SUM_NV", GL_COMBINER_MUX_SUM_NV},
    {"GL_COMBINER_SCALE_NV", GL_COMBINER_SCALE_NV},
    {"GL_COMBINER_BIAS_NV", GL_COMBINER_BIAS_NV},
    {"GL_COMBINER_AB_OUTPUT_NV", GL_COMBINER_AB_OUTPUT_NV},
    {"GL_COMBINER_CD_OUTPUT_NV", GL_COMBINER_CD_OUTPUT_NV},
    {"GL_COMBINER_SUM_OUTPUT_NV", GL_COMBINER_SUM_OUTPUT_NV},
    {"GL_MAX_GENERAL_COMBINERS_NV", GL_MAX_GENERAL_COMBINERS_NV},
    {"GL_NUM_GENERAL_COMBINERS_NV", GL_NUM_GENERAL_COMBINERS_NV},
    {"GL_COLOR_SUM_CLAMP_NV", GL_COLOR_SUM_CLAMP_NV},
    {"GL_COMBINER0_NV", GL_COMBINER0_NV},
    {"GL_COMBINER1_NV", GL_COMBINER1_NV},
    {"GL_COMBINER2_NV", GL_COMBINER2_NV},
    {"GL_COMBINER3_NV", GL_COMBINER3_NV},
    {"GL_COMBINER4_NV", GL_COMBINER4_NV},
    {"GL_COMBINER5_NV", GL_COMBINER5_NV},
    {"GL_COMBINER6_NV", GL_COMBINER6_NV},
    {"GL_COMBINER7_NV", GL_COMBINER7_NV},
    {"GL_PRIMITIVE_RESTART_NV", GL_PRIMITIVE_RESTART_NV},
    {"GL_PRIMITIVE_RESTART_INDEX_NV", GL_PRIMITIVE_RESTART_INDEX_NV},
    {"GL_FOG_DISTANCE_MODE_NV", GL_FOG_DISTANCE_MODE_NV},
    {"GL_EYE_RADIAL_NV", GL_EYE_RADIAL_NV},
    {"GL_EYE_PLANE_ABSOLUTE_NV", GL_EYE_PLANE_ABSOLUTE_NV},
    {"GL_EMBOSS_LIGHT_NV", GL_EMBOSS_LIGHT_NV},
    {"GL_EMBOSS_CONSTANT_NV", GL_EMBOSS_CONSTANT_NV},
    {"GL_EMBOSS_MAP_NV", GL_EMBOSS_MAP_NV},
    {"GL_RED_MIN_CLAMP_INGR", GL_RED_MIN_CLAMP_INGR},
    {"GL_GREEN_MIN_CLAMP_INGR", GL_GREEN_MIN_CLAMP_INGR},
    {"GL_BLUE_MIN_CLAMP_INGR", GL_BLUE_MIN_CLAMP_INGR},
    {"GL_ALPHA_MIN_CLAMP_INGR", GL_ALPHA_MIN_CLAMP_INGR},
    {"GL_RED_MAX_CLAMP_INGR", GL_RED_MAX_CLAMP_INGR},
    {"GL_GREEN_MAX_CLAMP_INGR", GL_GREEN_MAX_CLAMP_INGR},
    {"GL_BLUE_MAX_CLAMP_INGR", GL_BLUE_MAX_CLAMP_INGR},
    {"GL_ALPHA_MAX_CLAMP_INGR", GL_ALPHA_MAX_CLAMP_INGR},
    {"GL_INTERLACE_READ_INGR", GL_INTERLACE_READ_INGR},
    {"GL_COMBINE", GL_COMBINE},
    {"GL_COMBINE_RGB", GL_COMBINE_RGB},
    {"GL_COMBINE_ALPHA", GL_COMBINE_ALPHA},
    {"GL_RGB_SCALE", GL_RGB_SCALE},
    {"GL_ADD_SIGNED", GL_ADD_SIGNED},
    {"GL_INTERPOLATE", GL_INTERPOLATE},
    {"GL_CONSTANT", GL_CONSTANT},
    {"GL_PRIMARY_COLOR", GL_PRIMARY_COLOR},
    {"GL_PREVIOUS", GL_PREVIOUS},
    {"GL_SRC0_RGB", GL_SRC0_RGB},
    {"GL_SRC1_RGB", GL_SRC1_RGB},
    {"GL_SRC2_RGB", GL_SRC2_RGB},
    {"GL_SOURCE3_RGB_NV", GL_SOURCE3_RGB_NV},
    {"GL_SRC0_ALPHA", GL_SRC0_ALPHA},
    {"GL_SRC1_ALPHA", GL_SRC1_ALPHA},
    {"GL_SRC2_ALPHA", GL_SRC2_ALPHA},
    {"GL_SOURCE3_ALPHA_NV", GL_SOURCE3_ALPHA_NV},
    {"GL_OPERAND0_RGB", GL_OPERAND0_RGB},
    {"GL_OPERAND1_RGB", GL_OPERAND1_RGB},
    {"GL_OPERAND2_RGB", GL_OPERAND2_RGB},
    {"GL_OPERAND3_RGB_NV", GL_OPERAND3_RGB_NV},
    {"GL_OPERAND0_ALPHA", GL_OPERAND0_ALPHA},
    {"GL_OPERAND1_ALPHA", GL_OPERAND1_ALPHA},
    {"GL_OPERAND2_ALPHA", GL_OPERAND2_ALPHA},
    {"GL_OPERAND3_ALPHA_NV", GL_OPERAND3_ALPHA_NV},
    {"GL_PACK_SUBSAMPLE_RATE_SGIX", GL_PACK_SUBSAMPLE_RATE_SGIX},
    {"GL_UNPACK_SUBSAMPLE_RATE_SGIX", GL_UNPACK_SUBSAMPLE_RATE_SGIX},
    {"GL_PIXEL_SUBSAMPLE_4444_SGIX", GL_PIXEL_SUBSAMPLE_4444_SGIX},
    {"GL_PIXEL_SUBSAMPLE_2424_SGIX", GL_PIXEL_SUBSAMPLE_2424_SGIX},
    {"GL_PIXEL_SUBSAMPLE_4242_SGIX", GL_PIXEL_SUBSAMPLE_4242_SGIX},
    {"GL_PERTURB_EXT", GL_PERTURB_EXT},
    {"GL_TEXTURE_NORMAL_EXT", GL_TEXTURE_NORMAL_EXT},
    {"GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE", GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE},
    {"GL_TRANSFORM_HINT_APPLE", GL_TRANSFORM_HINT_APPLE},
    {"GL_UNPACK_CLIENT_STORAGE_APPLE", GL_UNPACK_CLIENT_STORAGE_APPLE},
    {"GL_BUFFER_OBJECT_APPLE", GL_BUFFER_OBJECT_APPLE},
    {"GL_STORAGE_CLIENT_APPLE", GL_STORAGE_CLIENT_APPLE},
    {"GL_VERTEX_ARRAY_BINDING", GL_VERTEX_ARRAY_BINDING},
    {"GL_TEXTURE_RANGE_LENGTH_APPLE", GL_TEXTURE_RANGE_LENGTH_APPLE},
    {"GL_TEXTURE_RANGE_POINTER_APPLE", GL_TEXTURE_RANGE_POINTER_APPLE},
    {"GL_YCBCR_422_APPLE", GL_YCBCR_422_APPLE},
    {"GL_UNSIGNED_SHORT_8_8_MESA", GL_UNSIGNED_SHORT_8_8_MESA},
    {"GL_UNSIGNED_SHORT_8_8_REV_MESA", GL_UNSIGNED_SHORT_8_8_REV_MESA},
    {"GL_TEXTURE_STORAGE_HINT_APPLE", GL_TEXTURE_STORAGE_HINT_APPLE},
    {"GL_STORAGE_PRIVATE_APPLE", GL_STORAGE_PRIVATE_APPLE},
    {"GL_STORAGE_CACHED_APPLE", GL_STORAGE_CACHED_APPLE},
    {"GL_STORAGE_SHARED_APPLE", GL_STORAGE_SHARED_APPLE},
    {"GL_REPLACEMENT_CODE_ARRAY_SUN", GL_REPLACEMENT_CODE_ARRAY_SUN},
    {"GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN", GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN},
    {"GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN", GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN},
    {"GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN", GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN},
    {"GL_R1UI_V3F_SUN", GL_R1UI_V3F_SUN},
    {"GL_R1UI_C4UB_V3F_SUN", GL_R1UI_C4UB_V3F_SUN},
    {"GL_R1UI_C3F_V3F_SUN", GL_R1UI_C3F_V3F_SUN},
    {"GL_R1UI_N3F_V3F_SUN", GL_R1UI_N3F_V3F_SUN},
    {"GL_R1UI_C4F_N3F_V3F_SUN", GL_R1UI_C4F_N3F_V3F_SUN},
    {"GL_R1UI_T2F_V3F_SUN", GL_R1UI_T2F_V3F_SUN},
    {"GL_R1UI_T2F_N3F_V3F_SUN", GL_R1UI_T2F_N3F_V3F_SUN},
    {"GL_R1UI_T2F_C4F_N3F_V3F_SUN", GL_R1UI_T2F_C4F_N3F_V3F_SUN},
    {"GL_SLICE_ACCUM_SUN", GL_SLICE_ACCUM_SUN},
    {"GL_QUAD_MESH_SUN", GL_QUAD_MESH_SUN},
    {"GL_TRIANGLE_MESH_SUN", GL_TRIANGLE_MESH_SUN},
    {"GL_VERTEX_PROGRAM_ARB", GL_VERTEX_PROGRAM_ARB},
    {"GL_VERTEX_STATE_PROGRAM_NV", GL_VERTEX_STATE_PROGRAM_NV},
    {"GL_VERTEX_ATTRIB_ARRAY_ENABLED", GL_VERTEX_ATTRIB_ARRAY_ENABLED},
    {"GL_VERTEX_ATTRIB_ARRAY_SIZE", GL_VERTEX_ATTRIB_ARRAY_SIZE},
    {"GL_VERTEX_ATTRIB_ARRAY_STRIDE", GL_VERTEX_ATTRIB_ARRAY_STRIDE},
    {"GL_VERTEX_ATTRIB_ARRAY_TYPE", GL_VERTEX_ATTRIB_ARRAY_TYPE},
    {"GL_CURRENT_VERTEX_ATTRIB", GL_CURRENT_VERTEX_ATTRIB},
    {"GL_PROGRAM_LENGTH_ARB", GL_PROGRAM_LENGTH_ARB},
    {"GL_PROGRAM_STRING_ARB", GL_PROGRAM_STRING_ARB},
    {"GL_MODELVIEW_PROJECTION_NV", GL_MODELVIEW_PROJECTION_NV},
    {"GL_IDENTITY_NV", GL_IDENTITY_NV},
    {"GL_INVERSE_NV", GL_INVERSE_NV},
    {"GL_TRANSPOSE_NV", GL_TRANSPOSE_NV},
    {"GL_INVERSE_TRANSPOSE_NV", GL_INVERSE_TRANSPOSE_NV},
    {"GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB", GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB},
    {"GL_MAX_PROGRAM_MATRICES_ARB", GL_MAX_PROGRAM_MATRICES_ARB},
    {"GL_MATRIX0_NV", GL_MATRIX0_NV},
    {"GL_MATRIX1_NV", GL_MATRIX1_NV},
    {"GL_MATRIX2_NV", GL_MATRIX2_NV},
    {"GL_MATRIX3_NV", GL_MATRIX3_NV},
    {"GL_MATRIX4_NV", GL_MATRIX4_NV},
    {"GL_MATRIX5_NV", GL_MATRIX5_NV},
    {"GL_MATRIX6_NV", GL_MATRIX6_NV},
    {"GL_MATRIX7_NV", GL_MATRIX7_NV},
    {"GL_CURRENT_MATRIX_STACK_DEPTH_ARB", GL_CURRENT_MATRIX_STACK_DEPTH_ARB},
    {"GL_CURRENT_MATRIX_ARB", GL_CURRENT_MATRIX_ARB},
    {"GL_PROGRAM_POINT_SIZE", GL_PROGRAM_POINT_SIZE},
    {"GL_VERTEX_PROGRAM_TWO_SIDE", GL_VERTEX_PROGRAM_TWO_SIDE},
    {"GL_PROGRAM_PARAMETER_NV", GL_PROGRAM_PARAMETER_NV},
    {"GL_VERTEX_ATTRIB_ARRAY_POINTER", GL_VERTEX_ATTRIB_ARRAY_POINTER},
    {"GL_PROGRAM_TARGET_NV", GL_PROGRAM_TARGET_NV},
    {"GL_PROGRAM_RESIDENT_NV", GL_PROGRAM_RESIDENT_NV},
    {"GL_TRACK_MATRIX_NV", GL_TRACK_MATRIX_NV},
    {"GL_TRACK_MATRIX_TRANSFORM_NV", GL_TRACK_MATRIX_TRANSFORM_NV},
    {"GL_VERTEX_PROGRAM_BINDING_NV", GL_VERTEX_PROGRAM_BINDING_NV},
    {"GL_PROGRAM_ERROR_POSITION_ARB", GL_PROGRAM_ERROR_POSITION_ARB},
    {"GL_OFFSET_TEXTURE_RECTANGLE_NV", GL_OFFSET_TEXTURE_RECTANGLE_NV},
    {"GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV", GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV},
    {"GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV", GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV},
    {"GL_DEPTH_CLAMP", GL_DEPTH_CLAMP},
    {"GL_VERTEX_ATTRIB_ARRAY0_NV", GL_VERTEX_ATTRIB_ARRAY0_NV},
    {"GL_VERTEX_ATTRIB_ARRAY1_NV", GL_VERTEX_ATTRIB_ARRAY1_NV},
    {"GL_VERTEX_ATTRIB_ARRAY2_NV", GL_VERTEX_ATTRIB_ARRAY2_NV},
    {"GL_VERTEX_ATTRIB_ARRAY3_NV", GL_VERTEX_ATTRIB_ARRAY3_NV},
    {"GL_VERTEX_ATTRIB_ARRAY4_NV", GL_VERTEX_ATTRIB_ARRAY4_NV},
    {"GL_VERTEX_ATTRIB_ARRAY5_NV", GL_VERTEX_ATTRIB_ARRAY5_NV},
    {"GL_VERTEX_ATTRIB_ARRAY6_NV", GL_VERTEX_ATTRIB_ARRAY6_NV},
    {"GL_VERTEX_ATTRIB_ARRAY7_NV", GL_VERTEX_ATTRIB_ARRAY7_NV},
    {"GL_VERTEX_ATTRIB_ARRAY8_NV", GL_VERTEX_ATTRIB_ARRAY8_NV},
    {"GL_VERTEX_ATTRIB_ARRAY9_NV", GL_VERTEX_ATTRIB_ARRAY9_NV},
    {"GL_VERTEX_ATTRIB_ARRAY10_NV", GL_VERTEX_ATTRIB_ARRAY10_NV},
    {"GL_VERTEX_ATTRIB_ARRAY11_NV", GL_VERTEX_ATTRIB_ARRAY11_NV},
    {"GL_VERTEX_ATTRIB_ARRAY12_NV", GL_VERTEX_ATTRIB_ARRAY12_NV},
    {"GL_VERTEX_ATTRIB_ARRAY13_NV", GL_VERTEX_ATTRIB_ARRAY13_NV},
    {"GL_VERTEX_ATTRIB_ARRAY14_NV", GL_VERTEX_ATTRIB_ARRAY14_NV},
    {"GL_VERTEX_ATTRIB_ARRAY15_NV", GL_VERTEX_ATTRIB_ARRAY15_NV},
    {"GL_MAP1_VERTEX_ATTRIB0_4_NV", GL_MAP1_VERTEX_ATTRIB0_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB1_4_NV", GL_MAP1_VERTEX_ATTRIB1_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB2_4_NV", GL_MAP1_VERTEX_ATTRIB2_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB3_4_NV", GL_MAP1_VERTEX_ATTRIB3_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB4_4_NV", GL_MAP1_VERTEX_ATTRIB4_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB5_4_NV", GL_MAP1_VERTEX_ATTRIB5_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB6_4_NV", GL_MAP1_VERTEX_ATTRIB6_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB7_4_NV", GL_MAP1_VERTEX_ATTRIB7_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB8_4_NV", GL_MAP1_VERTEX_ATTRIB8_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB9_4_NV", GL_MAP1_VERTEX_ATTRIB9_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB10_4_NV", GL_MAP1_VERTEX_ATTRIB10_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB11_4_NV", GL_MAP1_VERTEX_ATTRIB11_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB12_4_NV", GL_MAP1_VERTEX_ATTRIB12_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB13_4_NV", GL_MAP1_VERTEX_ATTRIB13_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB14_4_NV", GL_MAP1_VERTEX_ATTRIB14_4_NV},
    {"GL_MAP1_VERTEX_ATTRIB15_4_NV", GL_MAP1_VERTEX_ATTRIB15_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB0_4_NV", GL_MAP2_VERTEX_ATTRIB0_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB1_4_NV", GL_MAP2_VERTEX_ATTRIB1_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB2_4_NV", GL_MAP2_VERTEX_ATTRIB2_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB3_4_NV", GL_MAP2_VERTEX_ATTRIB3_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB4_4_NV", GL_MAP2_VERTEX_ATTRIB4_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB5_4_NV", GL_MAP2_VERTEX_ATTRIB5_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB6_4_NV", GL_MAP2_VERTEX_ATTRIB6_4_NV},
    {"GL_PROGRAM_BINDING_ARB", GL_PROGRAM_BINDING_ARB},
    {"GL_MAP2_VERTEX_ATTRIB8_4_NV", GL_MAP2_VERTEX_ATTRIB8_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB9_4_NV", GL_MAP2_VERTEX_ATTRIB9_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB10_4_NV", GL_MAP2_VERTEX_ATTRIB10_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB11_4_NV", GL_MAP2_VERTEX_ATTRIB11_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB12_4_NV", GL_MAP2_VERTEX_ATTRIB12_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB13_4_NV", GL_MAP2_VERTEX_ATTRIB13_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB14_4_NV", GL_MAP2_VERTEX_ATTRIB14_4_NV},
    {"GL_MAP2_VERTEX_ATTRIB15_4_NV", GL_MAP2_VERTEX_ATTRIB15_4_NV},
    {"GL_TEXTURE_COMPRESSED_IMAGE_SIZE", GL_TEXTURE_COMPRESSED_IMAGE_SIZE},
    {"GL_TEXTURE_COMPRESSED", GL_TEXTURE_COMPRESSED},
    {"GL_NUM_COMPRESSED_TEXTURE_FORMATS", GL_NUM_COMPRESSED_TEXTURE_FORMATS},
    {"GL_COMPRESSED_TEXTURE_FORMATS", GL_COMPRESSED_TEXTURE_FORMATS},
    {"GL_MAX_VERTEX_UNITS_ARB", GL_MAX_VERTEX_UNITS_ARB},
    {"GL_ACTIVE_VERTEX_UNITS_ARB", GL_ACTIVE_VERTEX_UNITS_ARB},
    {"GL_WEIGHT_SUM_UNITY_ARB", GL_WEIGHT_SUM_UNITY_ARB},
    {"GL_VERTEX_BLEND_ARB", GL_VERTEX_BLEND_ARB},
    {"GL_CURRENT_WEIGHT_ARB", GL_CURRENT_WEIGHT_ARB},
    {"GL_WEIGHT_ARRAY_TYPE_ARB", GL_WEIGHT_ARRAY_TYPE_ARB},
    {"GL_WEIGHT_ARRAY_STRIDE_ARB", GL_WEIGHT_ARRAY_STRIDE_ARB},
    {"GL_WEIGHT_ARRAY_SIZE_ARB", GL_WEIGHT_ARRAY_SIZE_ARB},
    {"GL_WEIGHT_ARRAY_POINTER_ARB", GL_WEIGHT_ARRAY_POINTER_ARB},
    {"GL_WEIGHT_ARRAY_ARB", GL_WEIGHT_ARRAY_ARB},
    {"GL_DOT3_RGB", GL_DOT3_RGB},
    {"GL_DOT3_RGBA", GL_DOT3_RGBA},
    {"GL_COMPRESSED_RGB_FXT1_3DFX", GL_COMPRESSED_RGB_FXT1_3DFX},
    {"GL_COMPRESSED_RGBA_FXT1_3DFX", GL_COMPRESSED_RGBA_FXT1_3DFX},
    {"GL_MULTISAMPLE_3DFX", GL_MULTISAMPLE_3DFX},
    {"GL_SAMPLE_BUFFERS_3DFX", GL_SAMPLE_BUFFERS_3DFX},
    {"GL_SAMPLES_3DFX", GL_SAMPLES_3DFX},
    {"GL_EVAL_2D_NV", GL_EVAL_2D_NV},
    {"GL_EVAL_TRIANGULAR_2D_NV", GL_EVAL_TRIANGULAR_2D_NV},
    {"GL_MAP_TESSELLATION_NV", GL_MAP_TESSELLATION_NV},
    {"GL_MAP_ATTRIB_U_ORDER_NV", GL_MAP_ATTRIB_U_ORDER_NV},
    {"GL_MAP_ATTRIB_V_ORDER_NV", GL_MAP_ATTRIB_V_ORDER_NV},
    {"GL_EVAL_FRACTIONAL_TESSELLATION_NV", GL_EVAL_FRACTIONAL_TESSELLATION_NV},
    {"GL_EVAL_VERTEX_ATTRIB0_NV", GL_EVAL_VERTEX_ATTRIB0_NV},
    {"GL_EVAL_VERTEX_ATTRIB1_NV", GL_EVAL_VERTEX_ATTRIB1_NV},
    {"GL_EVAL_VERTEX_ATTRIB2_NV", GL_EVAL_VERTEX_ATTRIB2_NV},
    {"GL_EVAL_VERTEX_ATTRIB3_NV", GL_EVAL_VERTEX_ATTRIB3_NV},
    {"GL_EVAL_VERTEX_ATTRIB4_NV", GL_EVAL_VERTEX_ATTRIB4_NV},
    {"GL_EVAL_VERTEX_ATTRIB5_NV", GL_EVAL_VERTEX_ATTRIB5_NV},
    {"GL_EVAL_VERTEX_ATTRIB6_NV", GL_EVAL_VERTEX_ATTRIB6_NV},
    {"GL_EVAL_VERTEX_ATTRIB7_NV", GL_EVAL_VERTEX_ATTRIB7_NV},
    {"GL_EVAL_VERTEX_ATTRIB8_NV", GL_EVAL_VERTEX_ATTRIB8_NV},
    {"GL_EVAL_VERTEX_ATTRIB9_NV", GL_EVAL_VERTEX_ATTRIB9_NV},
    {"GL_EVAL_VERTEX_ATTRIB10_NV", GL_EVAL_VERTEX_ATTRIB10_NV},
    {"GL_EVAL_VERTEX_ATTRIB11_NV", GL_EVAL_VERTEX_ATTRIB11_NV},
    {"GL_EVAL_VERTEX_ATTRIB12_NV", GL_EVAL_VERTEX_ATTRIB12_NV},
    {"GL_EVAL_VERTEX_ATTRIB13_NV", GL_EVAL_VERTEX_ATTRIB13_NV},
    {"GL_EVAL_VERTEX_ATTRIB14_NV", GL_EVAL_VERTEX_ATTRIB14_NV},
    {"GL_EVAL_VERTEX_ATTRIB15_NV", GL_EVAL_VERTEX_ATTRIB15_NV},
    {"GL_MAX_MAP_TESSELLATION_NV", GL_MAX_MAP_TESSELLATION_NV},
    {"GL_MAX_RATIONAL_EVAL_ORDER_NV", GL_MAX_RATIONAL_EVAL_ORDER_NV},
    {"GL_MAX_PROGRAM_PATCH_ATTRIBS_NV", GL_MAX_PROGRAM_PATCH_ATTRIBS_NV},
    {"GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV", GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV},
    {"GL_UNSIGNED_INT_S8_S8_8_8_NV", GL_UNSIGNED_INT_S8_S8_8_8_NV},
    {"GL_UNSIGNED_INT_8_8_S8_S8_REV_NV", GL_UNSIGNED_INT_8_8_S8_S8_REV_NV},
    {"GL_DSDT_MAG_INTENSITY_NV", GL_DSDT_MAG_INTENSITY_NV},
    {"GL_SHADER_CONSISTENT_NV", GL_SHADER_CONSISTENT_NV},
    {"GL_TEXTURE_SHADER_NV", GL_TEXTURE_SHADER_NV},
    {"GL_SHADER_OPERATION_NV", GL_SHADER_OPERATION_NV},
    {"GL_CULL_MODES_NV", GL_CULL_MODES_NV},
    {"GL_OFFSET_TEXTURE_MATRIX_NV", GL_OFFSET_TEXTURE_MATRIX_NV},
    {"GL_OFFSET_TEXTURE_SCALE_NV", GL_OFFSET_TEXTURE_SCALE_NV},
    {"GL_OFFSET_TEXTURE_BIAS_NV", GL_OFFSET_TEXTURE_BIAS_NV},
    {"GL_PREVIOUS_TEXTURE_INPUT_NV", GL_PREVIOUS_TEXTURE_INPUT_NV},
    {"GL_CONST_EYE_NV", GL_CONST_EYE_NV},
    {"GL_PASS_THROUGH_NV", GL_PASS_THROUGH_NV},
    {"GL_CULL_FRAGMENT_NV", GL_CULL_FRAGMENT_NV},
    {"GL_OFFSET_TEXTURE_2D_NV", GL_OFFSET_TEXTURE_2D_NV},
    {"GL_DEPENDENT_AR_TEXTURE_2D_NV", GL_DEPENDENT_AR_TEXTURE_2D_NV},
    {"GL_DEPENDENT_GB_TEXTURE_2D_NV", GL_DEPENDENT_GB_TEXTURE_2D_NV},
    {"GL_SURFACE_STATE_NV", GL_SURFACE_STATE_NV},
    {"GL_DOT_PRODUCT_NV", GL_DOT_PRODUCT_NV},
    {"GL_DOT_PRODUCT_DEPTH_REPLACE_NV", GL_DOT_PRODUCT_DEPTH_REPLACE_NV},
    {"GL_DOT_PRODUCT_TEXTURE_2D_NV", GL_DOT_PRODUCT_TEXTURE_2D_NV},
    {"GL_DOT_PRODUCT_TEXTURE_3D_NV", GL_DOT_PRODUCT_TEXTURE_3D_NV},
    {"GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV", GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV},
    {"GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV", GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV},
    {"GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV", GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV},
    {"GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV", GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV},
    {"GL_HILO_NV", GL_HILO_NV},
    {"GL_DSDT_NV", GL_DSDT_NV},
    {"GL_DSDT_MAG_NV", GL_DSDT_MAG_NV},
    {"GL_DSDT_MAG_VIB_NV", GL_DSDT_MAG_VIB_NV},
    {"GL_HILO16_NV", GL_HILO16_NV},
    {"GL_SIGNED_HILO_NV", GL_SIGNED_HILO_NV},
    {"GL_SIGNED_HILO16_NV", GL_SIGNED_HILO16_NV},
    {"GL_SIGNED_RGBA_NV", GL_SIGNED_RGBA_NV},
    {"GL_SIGNED_RGBA8_NV", GL_SIGNED_RGBA8_NV},
    {"GL_SURFACE_REGISTERED_NV", GL_SURFACE_REGISTERED_NV},
    {"GL_SIGNED_RGB_NV", GL_SIGNED_RGB_NV},
    {"GL_SIGNED_RGB8_NV", GL_SIGNED_RGB8_NV},
    {"GL_SURFACE_MAPPED_NV", GL_SURFACE_MAPPED_NV},
    {"GL_SIGNED_LUMINANCE_NV", GL_SIGNED_LUMINANCE_NV},
    {"GL_SIGNED_LUMINANCE8_NV", GL_SIGNED_LUMINANCE8_NV},
    {"GL_SIGNED_LUMINANCE_ALPHA_NV", GL_SIGNED_LUMINANCE_ALPHA_NV},
    {"GL_SIGNED_LUMINANCE8_ALPHA8_NV", GL_SIGNED_LUMINANCE8_ALPHA8_NV},
    {"GL_SIGNED_ALPHA_NV", GL_SIGNED_ALPHA_NV},
    {"GL_SIGNED_ALPHA8_NV", GL_SIGNED_ALPHA8_NV},
    {"GL_SIGNED_INTENSITY_NV", GL_SIGNED_INTENSITY_NV},
    {"GL_SIGNED_INTENSITY8_NV", GL_SIGNED_INTENSITY8_NV},
    {"GL_DSDT8_NV", GL_DSDT8_NV},
    {"GL_DSDT8_MAG8_NV", GL_DSDT8_MAG8_NV},
    {"GL_DSDT8_MAG8_INTENSITY8_NV", GL_DSDT8_MAG8_INTENSITY8_NV},
    {"GL_SIGNED_RGB_UNSIGNED_ALPHA_NV", GL_SIGNED_RGB_UNSIGNED_ALPHA_NV},
    {"GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV", GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV},
    {"GL_HI_SCALE_NV", GL_HI_SCALE_NV},
    {"GL_LO_SCALE_NV", GL_LO_SCALE_NV},
    {"GL_DS_SCALE_NV", GL_DS_SCALE_NV},
    {"GL_DT_SCALE_NV", GL_DT_SCALE_NV},
    {"GL_MAGNITUDE_SCALE_NV", GL_MAGNITUDE_SCALE_NV},
    {"GL_VIBRANCE_SCALE_NV", GL_VIBRANCE_SCALE_NV},
    {"GL_HI_BIAS_NV", GL_HI_BIAS_NV},
    {"GL_LO_BIAS_NV", GL_LO_BIAS_NV},
    {"GL_DS_BIAS_NV", GL_DS_BIAS_NV},
    {"GL_DT_BIAS_NV", GL_DT_BIAS_NV},
    {"GL_MAGNITUDE_BIAS_NV", GL_MAGNITUDE_BIAS_NV},
    {"GL_VIBRANCE_BIAS_NV", GL_VIBRANCE_BIAS_NV},
    {"GL_TEXTURE_BORDER_VALUES_NV", GL_TEXTURE_BORDER_VALUES_NV},
    {"GL_TEXTURE_HI_SIZE_NV", GL_TEXTURE_HI_SIZE_NV},
    {"GL_TEXTURE_LO_SIZE_NV", GL_TEXTURE_LO_SIZE_NV},
    {"GL_TEXTURE_DS_SIZE_NV", GL_TEXTURE_DS_SIZE_NV},
    {"GL_TEXTURE_DT_SIZE_NV", GL_TEXTURE_DT_SIZE_NV},
    {"GL_TEXTURE_MAG_SIZE_NV", GL_TEXTURE_MAG_SIZE_NV},
    {"GL_MODELVIEW2_ARB", GL_MODELVIEW2_ARB},
    {"GL_MODELVIEW3_ARB", GL_MODELVIEW3_ARB},
    {"GL_MODELVIEW4_ARB", GL_MODELVIEW4_ARB},
    {"GL_MODELVIEW5_ARB", GL_MODELVIEW5_ARB},
    {"GL_MODELVIEW6_ARB", GL_MODELVIEW6_ARB},
    {"GL_MODELVIEW7_ARB", GL_MODELVIEW7_ARB},
    {"GL_MODELVIEW8_ARB", GL_MODELVIEW8_ARB},
    {"GL_MODELVIEW9_ARB", GL_MODELVIEW9_ARB},
    {"GL_MODELVIEW10_ARB", GL_MODELVIEW10_ARB},
    {"GL_MODELVIEW11_ARB", GL_MODELVIEW11_ARB},
    {"GL_MODELVIEW12_ARB", GL_MODELVIEW12_ARB},
    {"GL_MODELVIEW13_ARB", GL_MODELVIEW13_ARB},
    {"GL_MODELVIEW14_ARB", GL_MODELVIEW14_ARB},
    {"GL_MODELVIEW15_ARB", GL_MODELVIEW15_ARB},
    {"GL_MODELVIEW16_ARB", GL_MODELVIEW16_ARB},
    {"GL_MODELVIEW17_ARB", GL_MODELVIEW17_ARB},
    {"GL_MODELVIEW18_ARB", GL_MODELVIEW18_ARB},
    {"GL_MODELVIEW19_ARB", GL_MODELVIEW19_ARB},
    {"GL_MODELVIEW20_ARB", GL_MODELVIEW20_ARB},
    {"GL_MODELVIEW21_ARB", GL_MODELVIEW21_ARB},
    {"GL_MODELVIEW22_ARB", GL_MODELVIEW22_ARB},
    {"GL_MODELVIEW23_ARB", GL_MODELVIEW23_ARB},
    {"GL_MODELVIEW24_ARB", GL_MODELVIEW24_ARB},
    {"GL_MODELVIEW25_ARB", GL_MODELVIEW25_ARB},
    {"GL_MODELVIEW26_ARB", GL_MODELVIEW26_ARB},
    {"GL_MODELVIEW27_ARB", GL_MODELVIEW27_ARB},
    {"GL_MODELVIEW28_ARB", GL_MODELVIEW28_ARB},
    {"GL_MODELVIEW29_ARB", GL_MODELVIEW29_ARB},
    {"GL_MODELVIEW30_ARB", GL_MODELVIEW30_ARB},
    {"GL_MODELVIEW31_ARB", GL_MODELVIEW31_ARB},
    {"GL_DOT3_RGB_EXT", GL_DOT3_RGB_EXT},
    {"GL_PROGRAM_BINARY_LENGTH", GL_PROGRAM_BINARY_LENGTH},
    {"GL_MIRROR_CLAMP_ATI", GL_MIRROR_CLAMP_ATI},
    {"GL_MODULATE_ADD_ATI", GL_MODULATE_ADD_ATI},
    {"GL_MODULATE_SIGNED_ADD_ATI", GL_MODULATE_SIGNED_ADD_ATI},
    {"GL_MODULATE_SUBTRACT_ATI", GL_MODULATE_SUBTRACT_ATI},
    {"GL_YCBCR_MESA", GL_YCBCR_MESA},
    {"GL_PACK_INVERT_MESA", GL_PACK_INVERT_MESA},
    {"GL_TEXTURE_1D_STACK_MESAX", GL_TEXTURE_1D_STACK_MESAX},
    {"GL_TEXTURE_2D_STACK_MESAX", GL_TEXTURE_2D_STACK_MESAX},
    {"GL_PROXY_TEXTURE_1D_STACK_MESAX", GL_PROXY_TEXTURE_1D_STACK_MESAX},
    {"GL_PROXY_TEXTURE_2D_STACK_MESAX", GL_PROXY_TEXTURE_2D_STACK_MESAX},
    {"GL_TEXTURE_1D_STACK_BINDING_MESAX", GL_TEXTURE_1D_STACK_BINDING_MESAX},
    {"GL_TEXTURE_2D_STACK_BINDING_MESAX", GL_TEXTURE_2D_STACK_BINDING_MESAX},
    {"GL_STATIC_ATI", GL_STATIC_ATI},
    {"GL_DYNAMIC_ATI", GL_DYNAMIC_ATI},
    {"GL_PRESERVE_ATI", GL_PRESERVE_ATI},
    {"GL_DISCARD_ATI", GL_DISCARD_ATI},
    {"GL_BUFFER_SIZE", GL_BUFFER_SIZE},
    {"GL_BUFFER_USAGE", GL_BUFFER_USAGE},
    {"GL_ARRAY_OBJECT_BUFFER_ATI", GL_ARRAY_OBJECT_BUFFER_ATI},
    {"GL_ARRAY_OBJECT_OFFSET_ATI", GL_ARRAY_OBJECT_OFFSET_ATI},
    {"GL_ELEMENT_ARRAY_ATI", GL_ELEMENT_ARRAY_ATI},
    {"GL_ELEMENT_ARRAY_TYPE_ATI", GL_ELEMENT_ARRAY_TYPE_ATI},
    {"GL_ELEMENT_ARRAY_POINTER_ATI", GL_ELEMENT_ARRAY_POINTER_ATI},
    {"GL_MAX_VERTEX_STREAMS_ATI", GL_MAX_VERTEX_STREAMS_ATI},
    {"GL_VERTEX_STREAM0_ATI", GL_VERTEX_STREAM0_ATI},
    {"GL_VERTEX_STREAM1_ATI", GL_VERTEX_STREAM1_ATI},
    {"GL_VERTEX_STREAM2_ATI", GL_VERTEX_STREAM2_ATI},
    {"GL_VERTEX_STREAM3_ATI", GL_VERTEX_STREAM3_ATI},
    {"GL_VERTEX_STREAM4_ATI", GL_VERTEX_STREAM4_ATI},
    {"GL_VERTEX_STREAM5_ATI", GL_VERTEX_STREAM5_ATI},
    {"GL_VERTEX_STREAM6_ATI", GL_VERTEX_STREAM6_ATI},
    {"GL_VERTEX_STREAM7_ATI", GL_VERTEX_STREAM7_ATI},
    {"GL_VERTEX_SOURCE_ATI", GL_VERTEX_SOURCE_ATI},
    {"GL_BUMP_ROT_MATRIX_ATI", GL_BUMP_ROT_MATRIX_ATI},
    {"GL_BUMP_ROT_MATRIX_SIZE_ATI", GL_BUMP_ROT_MATRIX_SIZE_ATI},
    {"GL_BUMP_NUM_TEX_UNITS_ATI", GL_BUMP_NUM_TEX_UNITS_ATI},
    {"GL_BUMP_TEX_UNITS_ATI", GL_BUMP_TEX_UNITS_ATI},
    {"GL_DUDV_ATI", GL_DUDV_ATI},
    {"GL_DU8DV8_ATI", GL_DU8DV8_ATI},
    {"GL_BUMP_ENVMAP_ATI", GL_BUMP_ENVMAP_ATI},
    {"GL_BUMP_TARGET_ATI", GL_BUMP_TARGET_ATI},
    {"GL_VERTEX_SHADER_EXT", GL_VERTEX_SHADER_EXT},
    {"GL_VERTEX_SHADER_BINDING_EXT", GL_VERTEX_SHADER_BINDING_EXT},
    {"GL_OP_INDEX_EXT", GL_OP_INDEX_EXT},
    {"GL_OP_NEGATE_EXT", GL_OP_NEGATE_EXT},
    {"GL_OP_DOT3_EXT", GL_OP_DOT3_EXT},
    {"GL_OP_DOT4_EXT", GL_OP_DOT4_EXT},
    {"GL_OP_MUL_EXT", GL_OP_MUL_EXT},
    {"GL_OP_ADD_EXT", GL_OP_ADD_EXT},
    {"GL_OP_MADD_EXT", GL_OP_MADD_EXT},
    {"GL_OP_FRAC_EXT", GL_OP_FRAC_EXT},
    {"GL_OP_MAX_EXT", GL_OP_MAX_EXT},
    {"GL_OP_MIN_EXT", GL_OP_MIN_EXT},
    {"GL_OP_SET_GE_EXT", GL_OP_SET_GE_EXT},
    {"GL_OP_SET_LT_EXT", GL_OP_SET_LT_EXT},
    {"GL_OP_CLAMP_EXT", GL_OP_CLAMP_EXT},
    {"GL_OP_FLOOR_EXT", GL_OP_FLOOR_EXT},
    {"GL_OP_ROUND_EXT", GL_OP_ROUND_EXT},
    {"GL_OP_EXP_BASE_2_EXT", GL_OP_EXP_BASE_2_EXT},
    {"GL_OP_LOG_BASE_2_EXT", GL_OP_LOG_BASE_2_EXT},
    {"GL_OP_POWER_EXT", GL_OP_POWER_EXT},
    {"GL_OP_RECIP_EXT", GL_OP_RECIP_EXT},
    {"GL_OP_RECIP_SQRT_EXT", GL_OP_RECIP_SQRT_EXT},
    {"GL_OP_SUB_EXT", GL_OP_SUB_EXT},
    {"GL_OP_CROSS_PRODUCT_EXT", GL_OP_CROSS_PRODUCT_EXT},
    {"GL_OP_MULTIPLY_MATRIX_EXT", GL_OP_MULTIPLY_MATRIX_EXT},
    {"GL_OP_MOV_EXT", GL_OP_MOV_EXT},
    {"GL_OUTPUT_VERTEX_EXT", GL_OUTPUT_VERTEX_EXT},
    {"GL_OUTPUT_COLOR0_EXT", GL_OUTPUT_COLOR0_EXT},
    {"GL_OUTPUT_COLOR1_EXT", GL_OUTPUT_COLOR1_EXT},
    {"GL_OUTPUT_TEXTURE_COORD0_EXT", GL_OUTPUT_TEXTURE_COORD0_EXT},
    {"GL_OUTPUT_TEXTURE_COORD1_EXT", GL_OUTPUT_TEXTURE_COORD1_EXT},
    {"GL_OUTPUT_TEXTURE_COORD2_EXT", GL_OUTPUT_TEXTURE_COORD2_EXT},
    {"GL_OUTPUT_TEXTURE_COORD3_EXT", GL_OUTPUT_TEXTURE_COORD3_EXT},
    {"GL_OUTPUT_TEXTURE_COORD4_EXT", GL_OUTPUT_TEXTURE_COORD4_EXT},
    {"GL_OUTPUT_TEXTURE_COORD5_EXT", GL_OUTPUT_TEXTURE_COORD5_EXT},
    {"GL_OUTPUT_TEXTURE_COORD6_EXT", GL_OUTPUT_TEXTURE_COORD6_EXT},
    {"GL_OUTPUT_TEXTURE_COORD7_EXT", GL_OUTPUT_TEXTURE_COORD7_EXT},
    {"GL_OUTPUT_TEXTURE_COORD8_EXT", GL_OUTPUT_TEXTURE_COORD8_EXT},
    {"GL_OUTPUT_TEXTURE_COORD9_EXT", GL_OUTPUT_TEXTURE_COORD9_EXT},
    {"GL_OUTPUT_TEXTURE_COORD10_EXT", GL_OUTPUT_TEXTURE_COORD10_EXT},
    {"GL_OUTPUT_TEXTURE_COORD11_EXT", GL_OUTPUT_TEXTURE_COORD11_EXT},
    {"GL_OUTPUT_TEXTURE_COORD12_EXT", GL_OUTPUT_TEXTURE_COORD12_EXT},
    {"GL_OUTPUT_TEXTURE_COORD13_EXT", GL_OUTPUT_TEXTURE_COORD13_EXT},
    {"GL_OUTPUT_TEXTURE_COORD14_EXT", GL_OUTPUT_TEXTURE_COORD14_EXT},
    {"GL_OUTPUT_TEXTURE_COORD15_EXT", GL_OUTPUT_TEXTURE_COORD15_EXT},
    {"GL_OUTPUT_TEXTURE_COORD16_EXT", GL_OUTPUT_TEXTURE_COORD16_EXT},
    {"GL_OUTPUT_TEXTURE_COORD17_EXT", GL_OUTPUT_TEXTURE_COORD17_EXT},
    {"GL_OUTPUT_TEXTURE_COORD18_EXT", GL_OUTPUT_TEXTURE_COORD18_EXT},
    {"GL_OUTPUT_TEXTURE_COORD19_EXT", GL_OUTPUT_TEXTURE_COORD19_EXT},
    {"GL_OUTPUT_TEXTURE_COORD20_EXT", GL_OUTPUT_TEXTURE_COORD20_EXT},
    {"GL_OUTPUT_TEXTURE_COORD21_EXT", GL_OUTPUT_TEXTURE_COORD21_EXT},
    {"GL_OUTPUT_TEXTURE_COORD22_EXT", GL_OUTPUT_TEXTURE_COORD22_EXT},
    {"GL_OUTPUT_TEXTURE_COORD23_EXT", GL_OUTPUT_TEXTURE_COORD23_EXT},
    {"GL_OUTPUT_TEXTURE_COORD24_EXT", GL_OUTPUT_TEXTURE_COORD24_EXT},
    {"GL_OUTPUT_TEXTURE_COORD25_EXT", GL_OUTPUT_TEXTURE_COORD25_EXT},
    {"GL_OUTPUT_TEXTURE_COORD26_EXT", GL_OUTPUT_TEXTURE_COORD26_EXT},
    {"GL_OUTPUT_TEXTURE_COORD27_EXT", GL_OUTPUT_TEXTURE_COORD27_EXT},
    {"GL_OUTPUT_TEXTURE_COORD28_EXT", GL_OUTPUT_TEXTURE_COORD28_EXT},
    {"GL_OUTPUT_TEXTURE_COORD29_EXT", GL_OUTPUT_TEXTURE_COORD29_EXT},
    {"GL_OUTPUT_TEXTURE_COORD30_EXT", GL_OUTPUT_TEXTURE_COORD30_EXT},
    {"GL_OUTPUT_TEXTURE_COORD31_EXT", GL_OUTPUT_TEXTURE_COORD31_EXT},
    {"GL_OUTPUT_FOG_EXT", GL_OUTPUT_FOG_EXT},
    {"GL_SCALAR_EXT", GL_SCALAR_EXT},
    {"GL_VECTOR_EXT", GL_VECTOR_EXT},
    {"GL_MATRIX_EXT", GL_MATRIX_EXT},
    {"GL_VARIANT_EXT", GL_VARIANT_EXT},
    {"GL_INVARIANT_EXT", GL_INVARIANT_EXT},
    {"GL_LOCAL_CONSTANT_EXT", GL_LOCAL_CONSTANT_EXT},
    {"GL_LOCAL_EXT", GL_LOCAL_EXT},
    {"GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT},
    {"GL_MAX_VERTEX_SHADER_VARIANTS_EXT", GL_MAX_VERTEX_SHADER_VARIANTS_EXT},
    {"GL_MAX_VERTEX_SHADER_INVARIANTS_EXT", GL_MAX_VERTEX_SHADER_INVARIANTS_EXT},
    {"GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT},
    {"GL_MAX_VERTEX_SHADER_LOCALS_EXT", GL_MAX_VERTEX_SHADER_LOCALS_EXT},
    {"GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT},
    {"GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT},
    {"GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT},
    {"GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT},
    {"GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT", GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT},
    {"GL_VERTEX_SHADER_INSTRUCTIONS_EXT", GL_VERTEX_SHADER_INSTRUCTIONS_EXT},
    {"GL_VERTEX_SHADER_VARIANTS_EXT", GL_VERTEX_SHADER_VARIANTS_EXT},
    {"GL_VERTEX_SHADER_INVARIANTS_EXT", GL_VERTEX_SHADER_INVARIANTS_EXT},
    {"GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT", GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT},
    {"GL_VERTEX_SHADER_LOCALS_EXT", GL_VERTEX_SHADER_LOCALS_EXT},
    {"GL_VERTEX_SHADER_OPTIMIZED_EXT", GL_VERTEX_SHADER_OPTIMIZED_EXT},
    {"GL_X_EXT", GL_X_EXT},
    {"GL_Y_EXT", GL_Y_EXT},
    {"GL_Z_EXT", GL_Z_EXT},
    {"GL_W_EXT", GL_W_EXT},
    {"GL_NEGATIVE_X_EXT", GL_NEGATIVE_X_EXT},
    {"GL_NEGATIVE_Y_EXT", GL_NEGATIVE_Y_EXT},
    {"GL_NEGATIVE_Z_EXT", GL_NEGATIVE_Z_EXT},
    {"GL_NEGATIVE_W_EXT", GL_NEGATIVE_W_EXT},
    {"GL_ZERO_EXT", GL_ZERO_EXT},
    {"GL_ONE_EXT", GL_ONE_EXT},
    {"GL_NEGATIVE_ONE_EXT", GL_NEGATIVE_ONE_EXT},
    {"GL_NORMALIZED_RANGE_EXT", GL_NORMALIZED_RANGE_EXT},
    {"GL_FULL_RANGE_EXT", GL_FULL_RANGE_EXT},
    {"GL_CURRENT_VERTEX_EXT", GL_CURRENT_VERTEX_EXT},
    {"GL_MVP_MATRIX_EXT", GL_MVP_MATRIX_EXT},
    {"GL_VARIANT_VALUE_EXT", GL_VARIANT_VALUE_EXT},
    {"GL_VARIANT_DATATYPE_EXT", GL_VARIANT_DATATYPE_EXT},
    {"GL_VARIANT_ARRAY_STRIDE_EXT", GL_VARIANT_ARRAY_STRIDE_EXT},
    {"GL_VARIANT_ARRAY_TYPE_EXT", GL_VARIANT_ARRAY_TYPE_EXT},
    {"GL_VARIANT_ARRAY_EXT", GL_VARIANT_ARRAY_EXT},
    {"GL_VARIANT_ARRAY_POINTER_EXT", GL_VARIANT_ARRAY_POINTER_EXT},
    {"GL_INVARIANT_VALUE_EXT", GL_INVARIANT_VALUE_EXT},
    {"GL_INVARIANT_DATATYPE_EXT", GL_INVARIANT_DATATYPE_EXT},
    {"GL_LOCAL_CONSTANT_VALUE_EXT", GL_LOCAL_CONSTANT_VALUE_EXT},
    {"GL_LOCAL_CONSTANT_DATATYPE_EXT", GL_LOCAL_CONSTANT_DATATYPE_EXT},
    {"GL_PN_TRIANGLES_ATI", GL_PN_TRIANGLES_ATI},
    {"GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI", GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI},
    {"GL_PN_TRIANGLES_POINT_MODE_ATI", GL_PN_TRIANGLES_POINT_MODE_ATI},
    {"GL_PN_TRIANGLES_NORMAL_MODE_ATI", GL_PN_TRIANGLES_NORMAL_MODE_ATI},
    {"GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI", GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI},
    {"GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI", GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI},
    {"GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI", GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI},
    {"GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI", GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI},
    {"GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI", GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI},
    {"GL_VBO_FREE_MEMORY_ATI", GL_VBO_FREE_MEMORY_ATI},
    {"GL_TEXTURE_FREE_MEMORY_ATI", GL_TEXTURE_FREE_MEMORY_ATI},
    {"GL_RENDERBUFFER_FREE_MEMORY_ATI", GL_RENDERBUFFER_FREE_MEMORY_ATI},
    {"GL_NUM_PROGRAM_BINARY_FORMATS", GL_NUM_PROGRAM_BINARY_FORMATS},
    {"GL_PROGRAM_BINARY_FORMATS", GL_PROGRAM_BINARY_FORMATS},
    {"GL_STENCIL_BACK_FUNC", GL_STENCIL_BACK_FUNC},
    {"GL_STENCIL_BACK_FAIL", GL_STENCIL_BACK_FAIL},
    {"GL_STENCIL_BACK_PASS_DEPTH_FAIL", GL_STENCIL_BACK_PASS_DEPTH_FAIL},
    {"GL_STENCIL_BACK_PASS_DEPTH_PASS", GL_STENCIL_BACK_PASS_DEPTH_PASS},
    {"GL_FRAGMENT_PROGRAM_ARB", GL_FRAGMENT_PROGRAM_ARB},
    {"GL_PROGRAM_ALU_INSTRUCTIONS_ARB", GL_PROGRAM_ALU_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_TEX_INSTRUCTIONS_ARB", GL_PROGRAM_TEX_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_TEX_INDIRECTIONS_ARB", GL_PROGRAM_TEX_INDIRECTIONS_ARB},
    {"GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB},
    {"GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB", GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB", GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB},
    {"GL_RGBA32F", GL_RGBA32F},
    {"GL_RGB32F", GL_RGB32F},
    {"GL_ALPHA32F_ARB", GL_ALPHA32F_ARB},
    {"GL_INTENSITY32F_ARB", GL_INTENSITY32F_ARB},
    {"GL_LUMINANCE32F_ARB", GL_LUMINANCE32F_ARB},
    {"GL_LUMINANCE_ALPHA32F_ARB", GL_LUMINANCE_ALPHA32F_ARB},
    {"GL_RGBA16F", GL_RGBA16F},
    {"GL_RGB16F", GL_RGB16F},
    {"GL_ALPHA16F_ARB", GL_ALPHA16F_ARB},
    {"GL_INTENSITY16F_ARB", GL_INTENSITY16F_ARB},
    {"GL_LUMINANCE16F_ARB", GL_LUMINANCE16F_ARB},
    {"GL_LUMINANCE_ALPHA16F_ARB", GL_LUMINANCE_ALPHA16F_ARB},
    {"GL_RGBA_FLOAT_MODE_ARB", GL_RGBA_FLOAT_MODE_ARB},
    {"GL_MAX_DRAW_BUFFERS", GL_MAX_DRAW_BUFFERS},
    {"GL_DRAW_BUFFER0", GL_DRAW_BUFFER0},
    {"GL_DRAW_BUFFER1", GL_DRAW_BUFFER1},
    {"GL_DRAW_BUFFER2", GL_DRAW_BUFFER2},
    {"GL_DRAW_BUFFER3", GL_DRAW_BUFFER3},
    {"GL_DRAW_BUFFER4", GL_DRAW_BUFFER4},
    {"GL_DRAW_BUFFER5", GL_DRAW_BUFFER5},
    {"GL_DRAW_BUFFER6", GL_DRAW_BUFFER6},
    {"GL_DRAW_BUFFER7", GL_DRAW_BUFFER7},
    {"GL_DRAW_BUFFER8", GL_DRAW_BUFFER8},
    {"GL_DRAW_BUFFER9", GL_DRAW_BUFFER9},
    {"GL_DRAW_BUFFER10", GL_DRAW_BUFFER10},
    {"GL_DRAW_BUFFER11", GL_DRAW_BUFFER11},
    {"GL_DRAW_BUFFER12", GL_DRAW_BUFFER12},
    {"GL_DRAW_BUFFER13", GL_DRAW_BUFFER13},
    {"GL_DRAW_BUFFER14", GL_DRAW_BUFFER14},
    {"GL_DRAW_BUFFER15", GL_DRAW_BUFFER15},
    {"GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI", GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI},
    {"GL_BLEND_EQUATION_ALPHA", GL_BLEND_EQUATION_ALPHA},
    {"GL_MATRIX_PALETTE_ARB", GL_MATRIX_PALETTE_ARB},
    {"GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB", GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB},
    {"GL_MAX_PALETTE_MATRICES_ARB", GL_MAX_PALETTE_MATRICES_ARB},
    {"GL_CURRENT_PALETTE_MATRIX_ARB", GL_CURRENT_PALETTE_MATRIX_ARB},
    {"GL_MATRIX_INDEX_ARRAY_ARB", GL_MATRIX_INDEX_ARRAY_ARB},
    {"GL_CURRENT_MATRIX_INDEX_ARB", GL_CURRENT_MATRIX_INDEX_ARB},
    {"GL_MATRIX_INDEX_ARRAY_SIZE_ARB", GL_MATRIX_INDEX_ARRAY_SIZE_ARB},
    {"GL_MATRIX_INDEX_ARRAY_TYPE_ARB", GL_MATRIX_INDEX_ARRAY_TYPE_ARB},
    {"GL_MATRIX_INDEX_ARRAY_STRIDE_ARB", GL_MATRIX_INDEX_ARRAY_STRIDE_ARB},
    {"GL_MATRIX_INDEX_ARRAY_POINTER_ARB", GL_MATRIX_INDEX_ARRAY_POINTER_ARB},
    {"GL_TEXTURE_DEPTH_SIZE", GL_TEXTURE_DEPTH_SIZE},
    {"GL_DEPTH_TEXTURE_MODE", GL_DEPTH_TEXTURE_MODE},
    {"GL_TEXTURE_COMPARE_MODE", GL_TEXTURE_COMPARE_MODE},
    {"GL_TEXTURE_COMPARE_FUNC", GL_TEXTURE_COMPARE_FUNC},
    {"GL_COMPARE_REF_TO_TEXTURE", GL_COMPARE_REF_TO_TEXTURE},
    {"GL_TEXTURE_CUBE_MAP_SEAMLESS", GL_TEXTURE_CUBE_MAP_SEAMLESS},
    {"GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV", GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV},
    {"GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV},
    {"GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV},
    {"GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV", GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV},
    {"GL_OFFSET_HILO_TEXTURE_2D_NV", GL_OFFSET_HILO_TEXTURE_2D_NV},
    {"GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV", GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV},
    {"GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV", GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV},
    {"GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV", GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV},
    {"GL_DEPENDENT_HILO_TEXTURE_2D_NV", GL_DEPENDENT_HILO_TEXTURE_2D_NV},
    {"GL_DEPENDENT_RGB_TEXTURE_3D_NV", GL_DEPENDENT_RGB_TEXTURE_3D_NV},
    {"GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV", GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV},
    {"GL_DOT_PRODUCT_PASS_THROUGH_NV", GL_DOT_PRODUCT_PASS_THROUGH_NV},
    {"GL_DOT_PRODUCT_TEXTURE_1D_NV", GL_DOT_PRODUCT_TEXTURE_1D_NV},
    {"GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV", GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV},
    {"GL_HILO8_NV", GL_HILO8_NV},
    {"GL_SIGNED_HILO8_NV", GL_SIGNED_HILO8_NV},
    {"GL_FORCE_BLUE_TO_ONE_NV", GL_FORCE_BLUE_TO_ONE_NV},
    {"GL_POINT_SPRITE", GL_POINT_SPRITE},
    {"GL_COORD_REPLACE", GL_COORD_REPLACE},
    {"GL_POINT_SPRITE_R_MODE_NV", GL_POINT_SPRITE_R_MODE_NV},
    {"GL_QUERY_COUNTER_BITS", GL_QUERY_COUNTER_BITS},
    {"GL_CURRENT_QUERY", GL_CURRENT_QUERY},
    {"GL_QUERY_RESULT", GL_QUERY_RESULT},
    {"GL_QUERY_RESULT_AVAILABLE", GL_QUERY_RESULT_AVAILABLE},
    {"GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV", GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV},
    {"GL_MAX_VERTEX_ATTRIBS", GL_MAX_VERTEX_ATTRIBS},
    {"GL_VERTEX_ATTRIB_ARRAY_NORMALIZED", GL_VERTEX_ATTRIB_ARRAY_NORMALIZED},
    {"GL_MAX_TESS_CONTROL_INPUT_COMPONENTS", GL_MAX_TESS_CONTROL_INPUT_COMPONENTS},
    {"GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS", GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS},
    {"GL_DEPTH_STENCIL_TO_RGBA_NV", GL_DEPTH_STENCIL_TO_RGBA_NV},
    {"GL_DEPTH_STENCIL_TO_BGRA_NV", GL_DEPTH_STENCIL_TO_BGRA_NV},
    {"GL_FRAGMENT_PROGRAM_NV", GL_FRAGMENT_PROGRAM_NV},
    {"GL_MAX_TEXTURE_COORDS", GL_MAX_TEXTURE_COORDS},
    {"GL_MAX_TEXTURE_IMAGE_UNITS", GL_MAX_TEXTURE_IMAGE_UNITS},
    {"GL_FRAGMENT_PROGRAM_BINDING_NV", GL_FRAGMENT_PROGRAM_BINDING_NV},
    {"GL_PROGRAM_ERROR_STRING_ARB", GL_PROGRAM_ERROR_STRING_ARB},
    {"GL_PROGRAM_FORMAT_ASCII_ARB", GL_PROGRAM_FORMAT_ASCII_ARB},
    {"GL_PROGRAM_FORMAT_ARB", GL_PROGRAM_FORMAT_ARB},
    {"GL_WRITE_PIXEL_DATA_RANGE_NV", GL_WRITE_PIXEL_DATA_RANGE_NV},
    {"GL_READ_PIXEL_DATA_RANGE_NV", GL_READ_PIXEL_DATA_RANGE_NV},
    {"GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV", GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV},
    {"GL_READ_PIXEL_DATA_RANGE_LENGTH_NV", GL_READ_PIXEL_DATA_RANGE_LENGTH_NV},
    {"GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV", GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV},
    {"GL_READ_PIXEL_DATA_RANGE_POINTER_NV", GL_READ_PIXEL_DATA_RANGE_POINTER_NV},
    {"GL_GEOMETRY_SHADER_INVOCATIONS", GL_GEOMETRY_SHADER_INVOCATIONS},
    {"GL_FLOAT_R_NV", GL_FLOAT_R_NV},
    {"GL_FLOAT_RG_NV", GL_FLOAT_RG_NV},
    {"GL_FLOAT_RGB_NV", GL_FLOAT_RGB_NV},
    {"GL_FLOAT_RGBA_NV", GL_FLOAT_RGBA_NV},
    {"GL_FLOAT_R16_NV", GL_FLOAT_R16_NV},
    {"GL_FLOAT_R32_NV", GL_FLOAT_R32_NV},
    {"GL_FLOAT_RG16_NV", GL_FLOAT_RG16_NV},
    {"GL_FLOAT_RG32_NV", GL_FLOAT_RG32_NV},
    {"GL_FLOAT_RGB16_NV", GL_FLOAT_RGB16_NV},
    {"GL_FLOAT_RGB32_NV", GL_FLOAT_RGB32_NV},
    {"GL_FLOAT_RGBA16_NV", GL_FLOAT_RGBA16_NV},
    {"GL_FLOAT_RGBA32_NV", GL_FLOAT_RGBA32_NV},
    {"GL_TEXTURE_FLOAT_COMPONENTS_NV", GL_TEXTURE_FLOAT_COMPONENTS_NV},
    {"GL_FLOAT_CLEAR_COLOR_VALUE_NV", GL_FLOAT_CLEAR_COLOR_VALUE_NV},
    {"GL_FLOAT_RGBA_MODE_NV", GL_FLOAT_RGBA_MODE_NV},
    {"GL_TEXTURE_UNSIGNED_REMAP_MODE_NV", GL_TEXTURE_UNSIGNED_REMAP_MODE_NV},
    {"GL_DEPTH_BOUNDS_TEST_EXT", GL_DEPTH_BOUNDS_TEST_EXT},
    {"GL_DEPTH_BOUNDS_EXT", GL_DEPTH_BOUNDS_EXT},
    {"GL_ARRAY_BUFFER", GL_ARRAY_BUFFER},
    {"GL_ELEMENT_ARRAY_BUFFER", GL_ELEMENT_ARRAY_BUFFER},
    {"GL_ARRAY_BUFFER_BINDING", GL_ARRAY_BUFFER_BINDING},
    {"GL_ELEMENT_ARRAY_BUFFER_BINDING", GL_ELEMENT_ARRAY_BUFFER_BINDING},
    {"GL_VERTEX_ARRAY_BUFFER_BINDING", GL_VERTEX_ARRAY_BUFFER_BINDING},
    {"GL_NORMAL_ARRAY_BUFFER_BINDING", GL_NORMAL_ARRAY_BUFFER_BINDING},
    {"GL_COLOR_ARRAY_BUFFER_BINDING", GL_COLOR_ARRAY_BUFFER_BINDING},
    {"GL_INDEX_ARRAY_BUFFER_BINDING", GL_INDEX_ARRAY_BUFFER_BINDING},
    {"GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING", GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING},
    {"GL_EDGE_FLAG_ARRAY_BUFFER_BINDING", GL_EDGE_FLAG_ARRAY_BUFFER_BINDING},
    {"GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING", GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING},
    {"GL_FOG_COORD_ARRAY_BUFFER_BINDING", GL_FOG_COORD_ARRAY_BUFFER_BINDING},
    {"GL_WEIGHT_ARRAY_BUFFER_BINDING", GL_WEIGHT_ARRAY_BUFFER_BINDING},
    {"GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING},
    {"GL_PROGRAM_INSTRUCTIONS_ARB", GL_PROGRAM_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB", GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB", GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB},
    {"GL_PROGRAM_TEMPORARIES_ARB", GL_PROGRAM_TEMPORARIES_ARB},
    {"GL_MAX_PROGRAM_TEMPORARIES_ARB", GL_MAX_PROGRAM_TEMPORARIES_ARB},
    {"GL_PROGRAM_NATIVE_TEMPORARIES_ARB", GL_PROGRAM_NATIVE_TEMPORARIES_ARB},
    {"GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB", GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB},
    {"GL_PROGRAM_PARAMETERS_ARB", GL_PROGRAM_PARAMETERS_ARB},
    {"GL_MAX_PROGRAM_PARAMETERS_ARB", GL_MAX_PROGRAM_PARAMETERS_ARB},
    {"GL_PROGRAM_NATIVE_PARAMETERS_ARB", GL_PROGRAM_NATIVE_PARAMETERS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB", GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB},
    {"GL_PROGRAM_ATTRIBS_ARB", GL_PROGRAM_ATTRIBS_ARB},
    {"GL_MAX_PROGRAM_ATTRIBS_ARB", GL_MAX_PROGRAM_ATTRIBS_ARB},
    {"GL_PROGRAM_NATIVE_ATTRIBS_ARB", GL_PROGRAM_NATIVE_ATTRIBS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB", GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB},
    {"GL_PROGRAM_ADDRESS_REGISTERS_ARB", GL_PROGRAM_ADDRESS_REGISTERS_ARB},
    {"GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB", GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB},
    {"GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB},
    {"GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB", GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB},
    {"GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB", GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB},
    {"GL_MAX_PROGRAM_ENV_PARAMETERS_ARB", GL_MAX_PROGRAM_ENV_PARAMETERS_ARB},
    {"GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB", GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB},
    {"GL_TRANSPOSE_CURRENT_MATRIX_ARB", GL_TRANSPOSE_CURRENT_MATRIX_ARB},
    {"GL_READ_ONLY", GL_READ_ONLY},
    {"GL_WRITE_ONLY", GL_WRITE_ONLY},
    {"GL_READ_WRITE", GL_READ_WRITE},
    {"GL_BUFFER_ACCESS", GL_BUFFER_ACCESS},
    {"GL_BUFFER_MAPPED", GL_BUFFER_MAPPED},
    {"GL_BUFFER_MAP_POINTER", GL_BUFFER_MAP_POINTER},
    {"GL_WRITE_DISCARD_NV", GL_WRITE_DISCARD_NV},
    {"GL_TIME_ELAPSED", GL_TIME_ELAPSED},
    {"GL_MATRIX0_ARB", GL_MATRIX0_ARB},
    {"GL_MATRIX1_ARB", GL_MATRIX1_ARB},
    {"GL_MATRIX2_ARB", GL_MATRIX2_ARB},
    {"GL_MATRIX3_ARB", GL_MATRIX3_ARB},
    {"GL_MATRIX4_ARB", GL_MATRIX4_ARB},
    {"GL_MATRIX5_ARB", GL_MATRIX5_ARB},
    {"GL_MATRIX6_ARB", GL_MATRIX6_ARB},
    {"GL_MATRIX7_ARB", GL_MATRIX7_ARB},
    {"GL_MATRIX8_ARB", GL_MATRIX8_ARB},
    {"GL_MATRIX9_ARB", GL_MATRIX9_ARB},
    {"GL_MATRIX10_ARB", GL_MATRIX10_ARB},
    {"GL_MATRIX11_ARB", GL_MATRIX11_ARB},
    {"GL_MATRIX12_ARB", GL_MATRIX12_ARB},
    {"GL_MATRIX13_ARB", GL_MATRIX13_ARB},
    {"GL_MATRIX14_ARB", GL_MATRIX14_ARB},
    {"GL_MATRIX15_ARB", GL_MATRIX15_ARB},
    {"GL_MATRIX16_ARB", GL_MATRIX16_ARB},
    {"GL_MATRIX17_ARB", GL_MATRIX17_ARB},
    {"GL_MATRIX18_ARB", GL_MATRIX18_ARB},
    {"GL_MATRIX19_ARB", GL_MATRIX19_ARB},
    {"GL_MATRIX20_ARB", GL_MATRIX20_ARB},
    {"GL_MATRIX21_ARB", GL_MATRIX21_ARB},
    {"GL_MATRIX22_ARB", GL_MATRIX22_ARB},
    {"GL_MATRIX23_ARB", GL_MATRIX23_ARB},
    {"GL_MATRIX24_ARB", GL_MATRIX24_ARB},
    {"GL_MATRIX25_ARB", GL_MATRIX25_ARB},
    {"GL_MATRIX26_ARB", GL_MATRIX26_ARB},
    {"GL_MATRIX27_ARB", GL_MATRIX27_ARB},
    {"GL_MATRIX28_ARB", GL_MATRIX28_ARB},
    {"GL_MATRIX29_ARB", GL_MATRIX29_ARB},
    {"GL_MATRIX30_ARB", GL_MATRIX30_ARB},
    {"GL_MATRIX31_ARB", GL_MATRIX31_ARB},
    {"GL_STREAM_DRAW", GL_STREAM_DRAW},
    {"GL_STREAM_READ", GL_STREAM_READ},
    {"GL_STREAM_COPY", GL_STREAM_COPY},
    {"GL_STATIC_DRAW", GL_STATIC_DRAW},
    {"GL_STATIC_READ", GL_STATIC_READ},
    {"GL_STATIC_COPY", GL_STATIC_COPY},
    {"GL_DYNAMIC_DRAW", GL_DYNAMIC_DRAW},
    {"GL_DYNAMIC_READ", GL_DYNAMIC_READ},
    {"GL_DYNAMIC_COPY", GL_DYNAMIC_COPY},
    {"GL_PIXEL_PACK_BUFFER", GL_PIXEL_PACK_BUFFER},
    {"GL_PIXEL_UNPACK_BUFFER", GL_PIXEL_UNPACK_BUFFER},
    {"GL_PIXEL_PACK_BUFFER_BINDING", GL_PIXEL_PACK_BUFFER_BINDING},
    {"GL_PIXEL_UNPACK_BUFFER_BINDING", GL_PIXEL_UNPACK_BUFFER_BINDING},
    {"GL_DEPTH24_STENCIL8", GL_DEPTH24_STENCIL8},
    {"GL_TEXTURE_STENCIL_SIZE", GL_TEXTURE_STENCIL_SIZE},
    {"GL_STENCIL_TAG_BITS_EXT", GL_STENCIL_TAG_BITS_EXT},
    {"GL_STENCIL_CLEAR_TAG_VALUE_EXT", GL_STENCIL_CLEAR_TAG_VALUE_EXT},
    {"GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV", GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV},
    {"GL_MAX_PROGRAM_CALL_DEPTH_NV", GL_MAX_PROGRAM_CALL_DEPTH_NV},
    {"GL_MAX_PROGRAM_IF_DEPTH_NV", GL_MAX_PROGRAM_IF_DEPTH_NV},
    {"GL_MAX_PROGRAM_LOOP_DEPTH_NV", GL_MAX_PROGRAM_LOOP_DEPTH_NV},
    {"GL_MAX_PROGRAM_LOOP_COUNT_NV", GL_MAX_PROGRAM_LOOP_COUNT_NV},
    {"GL_SRC1_COLOR", GL_SRC1_COLOR},
    {"GL_ONE_MINUS_SRC1_COLOR", GL_ONE_MINUS_SRC1_COLOR},
    {"GL_ONE_MINUS_SRC1_ALPHA", GL_ONE_MINUS_SRC1_ALPHA},
    {"GL_MAX_DUAL_SOURCE_DRAW_BUFFERS", GL_MAX_DUAL_SOURCE_DRAW_BUFFERS},
    {"GL_VERTEX_ATTRIB_ARRAY_INTEGER", GL_VERTEX_ATTRIB_ARRAY_INTEGER},
    {"GL_VERTEX_ATTRIB_ARRAY_DIVISOR", GL_VERTEX_ATTRIB_ARRAY_DIVISOR},
    {"GL_MAX_ARRAY_TEXTURE_LAYERS", GL_MAX_ARRAY_TEXTURE_LAYERS},
    {"GL_MIN_PROGRAM_TEXEL_OFFSET", GL_MIN_PROGRAM_TEXEL_OFFSET},
    {"GL_MAX_PROGRAM_TEXEL_OFFSET", GL_MAX_PROGRAM_TEXEL_OFFSET},
    {"GL_PROGRAM_ATTRIB_COMPONENTS_NV", GL_PROGRAM_ATTRIB_COMPONENTS_NV},
    {"GL_PROGRAM_RESULT_COMPONENTS_NV", GL_PROGRAM_RESULT_COMPONENTS_NV},
    {"GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV", GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV},
    {"GL_MAX_PROGRAM_RESULT_COMPONENTS_NV", GL_MAX_PROGRAM_RESULT_COMPONENTS_NV},
    {"GL_STENCIL_TEST_TWO_SIDE_EXT", GL_STENCIL_TEST_TWO_SIDE_EXT},
    {"GL_ACTIVE_STENCIL_FACE_EXT", GL_ACTIVE_STENCIL_FACE_EXT},
    {"GL_MIRROR_CLAMP_TO_BORDER_EXT", GL_MIRROR_CLAMP_TO_BORDER_EXT},
    {"GL_SAMPLES_PASSED", GL_SAMPLES_PASSED},
    {"GL_GEOMETRY_VERTICES_OUT", GL_GEOMETRY_VERTICES_OUT},
    {"GL_GEOMETRY_INPUT_TYPE", GL_GEOMETRY_INPUT_TYPE},
    {"GL_GEOMETRY_OUTPUT_TYPE", GL_GEOMETRY_OUTPUT_TYPE},
    {"GL_SAMPLER_BINDING", GL_SAMPLER_BINDING},
    {"GL_CLAMP_VERTEX_COLOR", GL_CLAMP_VERTEX_COLOR},
    {"GL_CLAMP_FRAGMENT_COLOR", GL_CLAMP_FRAGMENT_COLOR},
    {"GL_CLAMP_READ_COLOR", GL_CLAMP_READ_COLOR},
    {"GL_FIXED_ONLY", GL_FIXED_ONLY},
    {"GL_TESS_CONTROL_PROGRAM_NV", GL_TESS_CONTROL_PROGRAM_NV},
    {"GL_TESS_EVALUATION_PROGRAM_NV", GL_TESS_EVALUATION_PROGRAM_NV},
    {"GL_FRAGMENT_SHADER_ATI", GL_FRAGMENT_SHADER_ATI},
    {"GL_REG_0_ATI", GL_REG_0_ATI},
    {"GL_REG_1_ATI", GL_REG_1_ATI},
    {"GL_REG_2_ATI", GL_REG_2_ATI},
    {"GL_REG_3_ATI", GL_REG_3_ATI},
    {"GL_REG_4_ATI", GL_REG_4_ATI},
    {"GL_REG_5_ATI", GL_REG_5_ATI},
    {"GL_REG_6_ATI", GL_REG_6_ATI},
    {"GL_REG_7_ATI", GL_REG_7_ATI},
    {"GL_REG_8_ATI", GL_REG_8_ATI},
    {"GL_REG_9_ATI", GL_REG_9_ATI},
    {"GL_REG_10_ATI", GL_REG_10_ATI},
    {"GL_REG_11_ATI", GL_REG_11_ATI},
    {"GL_REG_12_ATI", GL_REG_12_ATI},
    {"GL_REG_13_ATI", GL_REG_13_ATI},
    {"GL_REG_14_ATI", GL_REG_14_ATI},
    {"GL_REG_15_ATI", GL_REG_15_ATI},
    {"GL_REG_16_ATI", GL_REG_16_ATI},
    {"GL_REG_17_ATI", GL_REG_17_ATI},
    {"GL_REG_18_ATI", GL_REG_18_ATI},
    {"GL_REG_19_ATI", GL_REG_19_ATI},
    {"GL_REG_20_ATI", GL_REG_20_ATI},
    {"GL_REG_21_ATI", GL_REG_21_ATI},
    {"GL_REG_22_ATI", GL_REG_22_ATI},
    {"GL_REG_23_ATI", GL_REG_23_ATI},
    {"GL_REG_24_ATI", GL_REG_24_ATI},
    {"GL_REG_25_ATI", GL_REG_25_ATI},
    {"GL_REG_26_ATI", GL_REG_26_ATI},
    {"GL_REG_27_ATI", GL_REG_27_ATI},
    {"GL_REG_28_ATI", GL_REG_28_ATI},
    {"GL_REG_29_ATI", GL_REG_29_ATI},
    {"GL_REG_30_ATI", GL_REG_30_ATI},
    {"GL_REG_31_ATI", GL_REG_31_ATI},
    {"GL_CON_0_ATI", GL_CON_0_ATI},
    {"GL_CON_1_ATI", GL_CON_1_ATI},
    {"GL_CON_2_ATI", GL_CON_2_ATI},
    {"GL_CON_3_ATI", GL_CON_3_ATI},
    {"GL_CON_4_ATI", GL_CON_4_ATI},
    {"GL_CON_5_ATI", GL_CON_5_ATI},
    {"GL_CON_6_ATI", GL_CON_6_ATI},
    {"GL_CON_7_ATI", GL_CON_7_ATI},
    {"GL_CON_8_ATI", GL_CON_8_ATI},
    {"GL_CON_9_ATI", GL_CON_9_ATI},
    {"GL_CON_10_ATI", GL_CON_10_ATI},
    {"GL_CON_11_ATI", GL_CON_11_ATI},
    {"GL_CON_12_ATI", GL_CON_12_ATI},
    {"GL_CON_13_ATI", GL_CON_13_ATI},
    {"GL_CON_14_ATI", GL_CON_14_ATI},
    {"GL_CON_15_ATI", GL_CON_15_ATI},
    {"GL_CON_16_ATI", GL_CON_16_ATI},
    {"GL_CON_17_ATI", GL_CON_17_ATI},
    {"GL_CON_18_ATI", GL_CON_18_ATI},
    {"GL_CON_19_ATI", GL_CON_19_ATI},
    {"GL_CON_20_ATI", GL_CON_20_ATI},
    {"GL_CON_21_ATI", GL_CON_21_ATI},
    {"GL_CON_22_ATI", GL_CON_22_ATI},
    {"GL_CON_23_ATI", GL_CON_23_ATI},
    {"GL_CON_24_ATI", GL_CON_24_ATI},
    {"GL_CON_25_ATI", GL_CON_25_ATI},
    {"GL_CON_26_ATI", GL_CON_26_ATI},
    {"GL_CON_27_ATI", GL_CON_27_ATI},
    {"GL_CON_28_ATI", GL_CON_28_ATI},
    {"GL_CON_29_ATI", GL_CON_29_ATI},
    {"GL_CON_30_ATI", GL_CON_30_ATI},
    {"GL_CON_31_ATI", GL_CON_31_ATI},
    {"GL_MOV_ATI", GL_MOV_ATI},
    {"GL_ADD_ATI", GL_ADD_ATI},
    {"GL_MUL_ATI", GL_MUL_ATI},
    {"GL_SUB_ATI", GL_SUB_ATI},
    {"GL_DOT3_ATI", GL_DOT3_ATI},
    {"GL_DOT4_ATI", GL_DOT4_ATI},
    {"GL_MAD_ATI", GL_MAD_ATI},
    {"GL_LERP_ATI", GL_LERP_ATI},
    {"GL_CND_ATI", GL_CND_ATI},
    {"GL_CND0_ATI", GL_CND0_ATI},
    {"GL_DOT2_ADD_ATI", GL_DOT2_ADD_ATI},
    {"GL_SECONDARY_INTERPOLATOR_ATI", GL_SECONDARY_INTERPOLATOR_ATI},
    {"GL_NUM_FRAGMENT_REGISTERS_ATI", GL_NUM_FRAGMENT_REGISTERS_ATI},
    {"GL_NUM_FRAGMENT_CONSTANTS_ATI", GL_NUM_FRAGMENT_CONSTANTS_ATI},
    {"GL_NUM_PASSES_ATI", GL_NUM_PASSES_ATI},
    {"GL_NUM_INSTRUCTIONS_PER_PASS_ATI", GL_NUM_INSTRUCTIONS_PER_PASS_ATI},
    {"GL_NUM_INSTRUCTIONS_TOTAL_ATI", GL_NUM_INSTRUCTIONS_TOTAL_ATI},
    {"GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI", GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI},
    {"GL_NUM_LOOPBACK_COMPONENTS_ATI", GL_NUM_LOOPBACK_COMPONENTS_ATI},
    {"GL_COLOR_ALPHA_PAIRING_ATI", GL_COLOR_ALPHA_PAIRING_ATI},
    {"GL_SWIZZLE_STR_ATI", GL_SWIZZLE_STR_ATI},
    {"GL_SWIZZLE_STQ_ATI", GL_SWIZZLE_STQ_ATI},
    {"GL_SWIZZLE_STR_DR_ATI", GL_SWIZZLE_STR_DR_ATI},
    {"GL_SWIZZLE_STQ_DQ_ATI", GL_SWIZZLE_STQ_DQ_ATI},
    {"GL_SWIZZLE_STRQ_ATI", GL_SWIZZLE_STRQ_ATI},
    {"GL_SWIZZLE_STRQ_DQ_ATI", GL_SWIZZLE_STRQ_DQ_ATI},
    {"GL_INTERLACE_OML", GL_INTERLACE_OML},
    {"GL_INTERLACE_READ_OML", GL_INTERLACE_READ_OML},
    {"GL_FORMAT_SUBSAMPLE_24_24_OML", GL_FORMAT_SUBSAMPLE_24_24_OML},
    {"GL_FORMAT_SUBSAMPLE_244_244_OML", GL_FORMAT_SUBSAMPLE_244_244_OML},
    {"GL_PACK_RESAMPLE_OML", GL_PACK_RESAMPLE_OML},
    {"GL_UNPACK_RESAMPLE_OML", GL_UNPACK_RESAMPLE_OML},
    {"GL_RESAMPLE_REPLICATE_OML", GL_RESAMPLE_REPLICATE_OML},
    {"GL_RESAMPLE_ZERO_FILL_OML", GL_RESAMPLE_ZERO_FILL_OML},
    {"GL_RESAMPLE_AVERAGE_OML", GL_RESAMPLE_AVERAGE_OML},
    {"GL_RESAMPLE_DECIMATE_OML", GL_RESAMPLE_DECIMATE_OML},
    {"GL_POINT_SIZE_ARRAY_TYPE_OES", GL_POINT_SIZE_ARRAY_TYPE_OES},
    {"GL_POINT_SIZE_ARRAY_STRIDE_OES", GL_POINT_SIZE_ARRAY_STRIDE_OES},
    {"GL_POINT_SIZE_ARRAY_POINTER_OES", GL_POINT_SIZE_ARRAY_POINTER_OES},
    {"GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES", GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES},
    {"GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES", GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES},
    {"GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES", GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES},
    {"GL_VERTEX_ATTRIB_MAP1_APPLE", GL_VERTEX_ATTRIB_MAP1_APPLE},
    {"GL_VERTEX_ATTRIB_MAP2_APPLE", GL_VERTEX_ATTRIB_MAP2_APPLE},
    {"GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE", GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE},
    {"GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE", GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE},
    {"GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE", GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE},
    {"GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE", GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE},
    {"GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE", GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE},
    {"GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE", GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE},
    {"GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE", GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE},
    {"GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE", GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE},
    {"GL_DRAW_PIXELS_APPLE", GL_DRAW_PIXELS_APPLE},
    {"GL_FENCE_APPLE", GL_FENCE_APPLE},
    {"GL_ELEMENT_ARRAY_APPLE", GL_ELEMENT_ARRAY_APPLE},
    {"GL_ELEMENT_ARRAY_TYPE_APPLE", GL_ELEMENT_ARRAY_TYPE_APPLE},
    {"GL_ELEMENT_ARRAY_POINTER_APPLE", GL_ELEMENT_ARRAY_POINTER_APPLE},
    {"GL_COLOR_FLOAT_APPLE", GL_COLOR_FLOAT_APPLE},
    {"GL_UNIFORM_BUFFER", GL_UNIFORM_BUFFER},
    {"GL_BUFFER_SERIALIZED_MODIFY_APPLE", GL_BUFFER_SERIALIZED_MODIFY_APPLE},
    {"GL_BUFFER_FLUSHING_UNMAP_APPLE", GL_BUFFER_FLUSHING_UNMAP_APPLE},
    {"GL_AUX_DEPTH_STENCIL_APPLE", GL_AUX_DEPTH_STENCIL_APPLE},
    {"GL_PACK_ROW_BYTES_APPLE", GL_PACK_ROW_BYTES_APPLE},
    {"GL_UNPACK_ROW_BYTES_APPLE", GL_UNPACK_ROW_BYTES_APPLE},
    {"GL_RELEASED_APPLE", GL_RELEASED_APPLE},
    {"GL_VOLATILE_APPLE", GL_VOLATILE_APPLE},
    {"GL_RETAINED_APPLE", GL_RETAINED_APPLE},
    {"GL_UNDEFINED_APPLE", GL_UNDEFINED_APPLE},
    {"GL_PURGEABLE_APPLE", GL_PURGEABLE_APPLE},
    {"GL_RGB_422_APPLE", GL_RGB_422_APPLE},
    {"GL_UNIFORM_BUFFER_BINDING", GL_UNIFORM_BUFFER_BINDING},
    {"GL_UNIFORM_BUFFER_START", GL_UNIFORM_BUFFER_START},
    {"GL_UNIFORM_BUFFER_SIZE", GL_UNIFORM_BUFFER_SIZE},
    {"GL_MAX_VERTEX_UNIFORM_BLOCKS", GL_MAX_VERTEX_UNIFORM_BLOCKS},
    {"GL_MAX_GEOMETRY_UNIFORM_BLOCKS", GL_MAX_GEOMETRY_UNIFORM_BLOCKS},
    {"GL_MAX_FRAGMENT_UNIFORM_BLOCKS", GL_MAX_FRAGMENT_UNIFORM_BLOCKS},
    {"GL_MAX_COMBINED_UNIFORM_BLOCKS", GL_MAX_COMBINED_UNIFORM_BLOCKS},
    {"GL_MAX_UNIFORM_BUFFER_BINDINGS", GL_MAX_UNIFORM_BUFFER_BINDINGS},
    {"GL_MAX_UNIFORM_BLOCK_SIZE", GL_MAX_UNIFORM_BLOCK_SIZE},
    {"GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS", GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS},
    {"GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS", GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS},
    {"GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS", GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS},
    {"GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT", GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT},
    {"GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH", GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH},
    {"GL_ACTIVE_UNIFORM_BLOCKS", GL_ACTIVE_UNIFORM_BLOCKS},
    {"GL_UNIFORM_TYPE", GL_UNIFORM_TYPE},
    {"GL_UNIFORM_SIZE", GL_UNIFORM_SIZE},
    {"GL_UNIFORM_NAME_LENGTH", GL_UNIFORM_NAME_LENGTH},
    {"GL_UNIFORM_BLOCK_INDEX", GL_UNIFORM_BLOCK_INDEX},
    {"GL_UNIFORM_OFFSET", GL_UNIFORM_OFFSET},
    {"GL_UNIFORM_ARRAY_STRIDE", GL_UNIFORM_ARRAY_STRIDE},
    {"GL_UNIFORM_MATRIX_STRIDE", GL_UNIFORM_MATRIX_STRIDE},
    {"GL_UNIFORM_IS_ROW_MAJOR", GL_UNIFORM_IS_ROW_MAJOR},
    {"GL_UNIFORM_BLOCK_BINDING", GL_UNIFORM_BLOCK_BINDING},
    {"GL_UNIFORM_BLOCK_DATA_SIZE", GL_UNIFORM_BLOCK_DATA_SIZE},
    {"GL_UNIFORM_BLOCK_NAME_LENGTH", GL_UNIFORM_BLOCK_NAME_LENGTH},
    {"GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS", GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS},
    {"GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES", GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER},
    {"GL_TEXTURE_SRGB_DECODE_EXT", GL_TEXTURE_SRGB_DECODE_EXT},
    {"GL_DECODE_EXT", GL_DECODE_EXT},
    {"GL_SKIP_DECODE_EXT", GL_SKIP_DECODE_EXT},
    {"GL_FRAGMENT_SHADER", GL_FRAGMENT_SHADER},
    {"GL_VERTEX_SHADER", GL_VERTEX_SHADER},
    {"GL_PROGRAM_OBJECT_ARB", GL_PROGRAM_OBJECT_ARB},
    {"GL_SHADER_OBJECT_ARB", GL_SHADER_OBJECT_ARB},
    {"GL_MAX_FRAGMENT_UNIFORM_COMPONENTS", GL_MAX_FRAGMENT_UNIFORM_COMPONENTS},
    {"GL_MAX_VERTEX_UNIFORM_COMPONENTS", GL_MAX_VERTEX_UNIFORM_COMPONENTS},
    {"GL_MAX_VARYING_COMPONENTS", GL_MAX_VARYING_COMPONENTS},
    {"GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS", GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS},
    {"GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS", GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS},
    {"GL_OBJECT_TYPE_ARB", GL_OBJECT_TYPE_ARB},
    {"GL_SHADER_TYPE", GL_SHADER_TYPE},
    {"GL_FLOAT_VEC2", GL_FLOAT_VEC2},
    {"GL_FLOAT_VEC3", GL_FLOAT_VEC3},
    {"GL_FLOAT_VEC4", GL_FLOAT_VEC4},
    {"GL_INT_VEC2", GL_INT_VEC2},
    {"GL_INT_VEC3", GL_INT_VEC3},
    {"GL_INT_VEC4", GL_INT_VEC4},
    {"GL_BOOL", GL_BOOL},
    {"GL_BOOL_VEC2", GL_BOOL_VEC2},
    {"GL_BOOL_VEC3", GL_BOOL_VEC3},
    {"GL_BOOL_VEC4", GL_BOOL_VEC4},
    {"GL_FLOAT_MAT2", GL_FLOAT_MAT2},
    {"GL_FLOAT_MAT3", GL_FLOAT_MAT3},
    {"GL_FLOAT_MAT4", GL_FLOAT_MAT4},
    {"GL_SAMPLER_1D", GL_SAMPLER_1D},
    {"GL_SAMPLER_2D", GL_SAMPLER_2D},
    {"GL_SAMPLER_3D", GL_SAMPLER_3D},
    {"GL_SAMPLER_CUBE", GL_SAMPLER_CUBE},
    {"GL_SAMPLER_1D_SHADOW", GL_SAMPLER_1D_SHADOW},
    {"GL_SAMPLER_2D_SHADOW", GL_SAMPLER_2D_SHADOW},
    {"GL_SAMPLER_2D_RECT", GL_SAMPLER_2D_RECT},
    {"GL_SAMPLER_2D_RECT_SHADOW", GL_SAMPLER_2D_RECT_SHADOW},
    {"GL_FLOAT_MAT2x3", GL_FLOAT_MAT2x3},
    {"GL_FLOAT_MAT2x4", GL_FLOAT_MAT2x4},
    {"GL_FLOAT_MAT3x2", GL_FLOAT_MAT3x2},
    {"GL_FLOAT_MAT3x4", GL_FLOAT_MAT3x4},
    {"GL_FLOAT_MAT4x2", GL_FLOAT_MAT4x2},
    {"GL_FLOAT_MAT4x3", GL_FLOAT_MAT4x3},
    {"GL_DELETE_STATUS", GL_DELETE_STATUS},
    {"GL_COMPILE_STATUS", GL_COMPILE_STATUS},
    {"GL_LINK_STATUS", GL_LINK_STATUS},
    {"GL_VALIDATE_STATUS", GL_VALIDATE_STATUS},
    {"GL_INFO_LOG_LENGTH", GL_INFO_LOG_LENGTH},
    {"GL_ATTACHED_SHADERS", GL_ATTACHED_SHADERS},
    {"GL_ACTIVE_UNIFORMS", GL_ACTIVE_UNIFORMS},
    {"GL_ACTIVE_UNIFORM_MAX_LENGTH", GL_ACTIVE_UNIFORM_MAX_LENGTH},
    {"GL_SHADER_SOURCE_LENGTH", GL_SHADER_SOURCE_LENGTH},
    {"GL_ACTIVE_ATTRIBUTES", GL_ACTIVE_ATTRIBUTES},
    {"GL_ACTIVE_ATTRIBUTE_MAX_LENGTH", GL_ACTIVE_ATTRIBUTE_MAX_LENGTH},
    {"GL_FRAGMENT_SHADER_DERIVATIVE_HINT", GL_FRAGMENT_SHADER_DERIVATIVE_HINT},
    {"GL_SHADING_LANGUAGE_VERSION", GL_SHADING_LANGUAGE_VERSION},
    {"GL_CURRENT_PROGRAM", GL_CURRENT_PROGRAM},
    {"GL_PALETTE4_RGB8_OES", GL_PALETTE4_RGB8_OES},
    {"GL_PALETTE4_RGBA8_OES", GL_PALETTE4_RGBA8_OES},
    {"GL_PALETTE4_R5_G6_B5_OES", GL_PALETTE4_R5_G6_B5_OES},
    {"GL_PALETTE4_RGBA4_OES", GL_PALETTE4_RGBA4_OES},
    {"GL_PALETTE4_RGB5_A1_OES", GL_PALETTE4_RGB5_A1_OES},
    {"GL_PALETTE8_RGB8_OES", GL_PALETTE8_RGB8_OES},
    {"GL_PALETTE8_RGBA8_OES", GL_PALETTE8_RGBA8_OES},
    {"GL_PALETTE8_R5_G6_B5_OES", GL_PALETTE8_R5_G6_B5_OES},
    {"GL_PALETTE8_RGBA4_OES", GL_PALETTE8_RGBA4_OES},
    {"GL_PALETTE8_RGB5_A1_OES", GL_PALETTE8_RGB5_A1_OES},
    {"GL_IMPLEMENTATION_COLOR_READ_TYPE", GL_IMPLEMENTATION_COLOR_READ_TYPE},
    {"GL_IMPLEMENTATION_COLOR_READ_FORMAT", GL_IMPLEMENTATION_COLOR_READ_FORMAT},
    {"GL_POINT_SIZE_ARRAY_OES", GL_POINT_SIZE_ARRAY_OES},
    {"GL_TEXTURE_CROP_RECT_OES", GL_TEXTURE_CROP_RECT_OES},
    {"GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES", GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES},
    {"GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES", GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES},
    {"GL_COUNTER_TYPE_AMD", GL_COUNTER_TYPE_AMD},
    {"GL_COUNTER_RANGE_AMD", GL_COUNTER_RANGE_AMD},
    {"GL_UNSIGNED_INT64_AMD", GL_UNSIGNED_INT64_AMD},
    {"GL_PERCENTAGE_AMD", GL_PERCENTAGE_AMD},
    {"GL_PERFMON_RESULT_AVAILABLE_AMD", GL_PERFMON_RESULT_AVAILABLE_AMD},
    {"GL_PERFMON_RESULT_SIZE_AMD", GL_PERFMON_RESULT_SIZE_AMD},
    {"GL_PERFMON_RESULT_AMD", GL_PERFMON_RESULT_AMD},
    {"GL_TEXTURE_RED_TYPE", GL_TEXTURE_RED_TYPE},
    {"GL_TEXTURE_GREEN_TYPE", GL_TEXTURE_GREEN_TYPE},
    {"GL_TEXTURE_BLUE_TYPE", GL_TEXTURE_BLUE_TYPE},
    {"GL_TEXTURE_ALPHA_TYPE", GL_TEXTURE_ALPHA_TYPE},
    {"GL_TEXTURE_LUMINANCE_TYPE", GL_TEXTURE_LUMINANCE_TYPE},
    {"GL_TEXTURE_INTENSITY_TYPE", GL_TEXTURE_INTENSITY_TYPE},
    {"GL_TEXTURE_DEPTH_TYPE", GL_TEXTURE_DEPTH_TYPE},
    {"GL_UNSIGNED_NORMALIZED", GL_UNSIGNED_NORMALIZED},
    {"GL_TEXTURE_1D_ARRAY", GL_TEXTURE_1D_ARRAY},
    {"GL_PROXY_TEXTURE_1D_ARRAY", GL_PROXY_TEXTURE_1D_ARRAY},
    {"GL_TEXTURE_2D_ARRAY", GL_TEXTURE_2D_ARRAY},
    {"GL_PROXY_TEXTURE_2D_ARRAY", GL_PROXY_TEXTURE_2D_ARRAY},
    {"GL_TEXTURE_BINDING_1D_ARRAY", GL_TEXTURE_BINDING_1D_ARRAY},
    {"GL_TEXTURE_BINDING_2D_ARRAY", GL_TEXTURE_BINDING_2D_ARRAY},
    {"GL_GEOMETRY_PROGRAM_NV", GL_GEOMETRY_PROGRAM_NV},
    {"GL_MAX_PROGRAM_OUTPUT_VERTICES_NV", GL_MAX_PROGRAM_OUTPUT_VERTICES_NV},
    {"GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV", GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV},
    {"GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS", GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS},
    {"GL_TEXTURE_BUFFER", GL_TEXTURE_BUFFER},
    {"GL_MAX_TEXTURE_BUFFER_SIZE", GL_MAX_TEXTURE_BUFFER_SIZE},
    {"GL_TEXTURE_BINDING_BUFFER", GL_TEXTURE_BINDING_BUFFER},
    {"GL_TEXTURE_BUFFER_DATA_STORE_BINDING", GL_TEXTURE_BUFFER_DATA_STORE_BINDING},
    {"GL_TEXTURE_BUFFER_FORMAT", GL_TEXTURE_BUFFER_FORMAT},
    {"GL_ANY_SAMPLES_PASSED", GL_ANY_SAMPLES_PASSED},
    {"GL_SAMPLE_SHADING", GL_SAMPLE_SHADING},
    {"GL_MIN_SAMPLE_SHADING_VALUE", GL_MIN_SAMPLE_SHADING_VALUE},
    {"GL_R11F_G11F_B10F", GL_R11F_G11F_B10F},
    {"GL_UNSIGNED_INT_10F_11F_11F_REV", GL_UNSIGNED_INT_10F_11F_11F_REV},
    {"GL_RGBA_SIGNED_COMPONENTS_EXT", GL_RGBA_SIGNED_COMPONENTS_EXT},
    {"GL_RGB9_E5", GL_RGB9_E5},
    {"GL_UNSIGNED_INT_5_9_9_9_REV", GL_UNSIGNED_INT_5_9_9_9_REV},
    {"GL_TEXTURE_SHARED_SIZE", GL_TEXTURE_SHARED_SIZE},
    {"GL_SRGB", GL_SRGB},
    {"GL_SRGB8", GL_SRGB8},
    {"GL_SRGB_ALPHA", GL_SRGB_ALPHA},
    {"GL_SRGB8_ALPHA8", GL_SRGB8_ALPHA8},
    {"GL_SLUMINANCE_ALPHA", GL_SLUMINANCE_ALPHA},
    {"GL_SLUMINANCE8_ALPHA8", GL_SLUMINANCE8_ALPHA8},
    {"GL_SLUMINANCE", GL_SLUMINANCE},
    {"GL_SLUMINANCE8", GL_SLUMINANCE8},
    {"GL_COMPRESSED_SRGB", GL_COMPRESSED_SRGB},
    {"GL_COMPRESSED_SRGB_ALPHA", GL_COMPRESSED_SRGB_ALPHA},
    {"GL_COMPRESSED_SLUMINANCE", GL_COMPRESSED_SLUMINANCE},
    {"GL_COMPRESSED_SLUMINANCE_ALPHA", GL_COMPRESSED_SLUMINANCE_ALPHA},
    {"GL_COMPRESSED_SRGB_S3TC_DXT1_EXT", GL_COMPRESSED_SRGB_S3TC_DXT1_EXT},
    {"GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT},
    {"GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT},
    {"GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT", GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT},
    {"GL_COMPRESSED_LUMINANCE_LATC1_EXT", GL_COMPRESSED_LUMINANCE_LATC1_EXT},
    {"GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT", GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT},
    {"GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT", GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT},
    {"GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT", GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT},
    {"GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV", GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV},
    {"GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV", GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV},
    {"GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH", GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH},
    {"GL_BACK_PRIMARY_COLOR_NV", GL_BACK_PRIMARY_COLOR_NV},
    {"GL_BACK_SECONDARY_COLOR_NV", GL_BACK_SECONDARY_COLOR_NV},
    {"GL_TEXTURE_COORD_NV", GL_TEXTURE_COORD_NV},
    {"GL_CLIP_DISTANCE_NV", GL_CLIP_DISTANCE_NV},
    {"GL_VERTEX_ID_NV", GL_VERTEX_ID_NV},
    {"GL_PRIMITIVE_ID_NV", GL_PRIMITIVE_ID_NV},
    {"GL_GENERIC_ATTRIB_NV", GL_GENERIC_ATTRIB_NV},
    {"GL_TRANSFORM_FEEDBACK_ATTRIBS_NV", GL_TRANSFORM_FEEDBACK_ATTRIBS_NV},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_MODE", GL_TRANSFORM_FEEDBACK_BUFFER_MODE},
    {"GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS},
    {"GL_ACTIVE_VARYINGS_NV", GL_ACTIVE_VARYINGS_NV},
    {"GL_ACTIVE_VARYING_MAX_LENGTH_NV", GL_ACTIVE_VARYING_MAX_LENGTH_NV},
    {"GL_TRANSFORM_FEEDBACK_VARYINGS", GL_TRANSFORM_FEEDBACK_VARYINGS},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_START", GL_TRANSFORM_FEEDBACK_BUFFER_START},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_SIZE", GL_TRANSFORM_FEEDBACK_BUFFER_SIZE},
    {"GL_TRANSFORM_FEEDBACK_RECORD_NV", GL_TRANSFORM_FEEDBACK_RECORD_NV},
    {"GL_PRIMITIVES_GENERATED", GL_PRIMITIVES_GENERATED},
    {"GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN", GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN},
    {"GL_RASTERIZER_DISCARD", GL_RASTERIZER_DISCARD},
    {"GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS", GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS},
    {"GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS", GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS},
    {"GL_INTERLEAVED_ATTRIBS", GL_INTERLEAVED_ATTRIBS},
    {"GL_SEPARATE_ATTRIBS", GL_SEPARATE_ATTRIBS},
    {"GL_TRANSFORM_FEEDBACK_BUFFER", GL_TRANSFORM_FEEDBACK_BUFFER},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_BINDING", GL_TRANSFORM_FEEDBACK_BUFFER_BINDING},
    {"GL_ATC_RGB_AMD", GL_ATC_RGB_AMD},
    {"GL_ATC_RGBA_EXPLICIT_ALPHA_AMD", GL_ATC_RGBA_EXPLICIT_ALPHA_AMD},
    {"GL_POINT_SPRITE_COORD_ORIGIN", GL_POINT_SPRITE_COORD_ORIGIN},
    {"GL_LOWER_LEFT", GL_LOWER_LEFT},
    {"GL_UPPER_LEFT", GL_UPPER_LEFT},
    {"GL_STENCIL_BACK_REF", GL_STENCIL_BACK_REF},
    {"GL_STENCIL_BACK_VALUE_MASK", GL_STENCIL_BACK_VALUE_MASK},
    {"GL_STENCIL_BACK_WRITEMASK", GL_STENCIL_BACK_WRITEMASK},
    {"GL_DRAW_FRAMEBUFFER_BINDING", GL_DRAW_FRAMEBUFFER_BINDING},
    {"GL_RENDERBUFFER_BINDING", GL_RENDERBUFFER_BINDING},
    {"GL_READ_FRAMEBUFFER", GL_READ_FRAMEBUFFER},
    {"GL_DRAW_FRAMEBUFFER", GL_DRAW_FRAMEBUFFER},
    {"GL_READ_FRAMEBUFFER_BINDING", GL_READ_FRAMEBUFFER_BINDING},
    {"GL_RENDERBUFFER_SAMPLES", GL_RENDERBUFFER_SAMPLES},
    {"GL_DEPTH_COMPONENT32F", GL_DEPTH_COMPONENT32F},
    {"GL_DEPTH32F_STENCIL8", GL_DEPTH32F_STENCIL8},
    {"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE},
    {"GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME},
    {"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL},
    {"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE},
    {"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER},
    {"GL_FRAMEBUFFER_COMPLETE", GL_FRAMEBUFFER_COMPLETE},
    {"GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT},
    {"GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT},
    {"GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT", GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT},
    {"GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT", GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT},
    {"GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER", GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER},
    {"GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER", GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER},
    {"GL_FRAMEBUFFER_UNSUPPORTED", GL_FRAMEBUFFER_UNSUPPORTED},
    {"GL_MAX_COLOR_ATTACHMENTS", GL_MAX_COLOR_ATTACHMENTS},
    {"GL_COLOR_ATTACHMENT0", GL_COLOR_ATTACHMENT0},
    {"GL_COLOR_ATTACHMENT1", GL_COLOR_ATTACHMENT1},
    {"GL_COLOR_ATTACHMENT2", GL_COLOR_ATTACHMENT2},
    {"GL_COLOR_ATTACHMENT3", GL_COLOR_ATTACHMENT3},
    {"GL_COLOR_ATTACHMENT4", GL_COLOR_ATTACHMENT4},
    {"GL_COLOR_ATTACHMENT5", GL_COLOR_ATTACHMENT5},
    {"GL_COLOR_ATTACHMENT6", GL_COLOR_ATTACHMENT6},
    {"GL_COLOR_ATTACHMENT7", GL_COLOR_ATTACHMENT7},
    {"GL_COLOR_ATTACHMENT8", GL_COLOR_ATTACHMENT8},
    {"GL_COLOR_ATTACHMENT9", GL_COLOR_ATTACHMENT9},
    {"GL_COLOR_ATTACHMENT10", GL_COLOR_ATTACHMENT10},
    {"GL_COLOR_ATTACHMENT11", GL_COLOR_ATTACHMENT11},
    {"GL_COLOR_ATTACHMENT12", GL_COLOR_ATTACHMENT12},
    {"GL_COLOR_ATTACHMENT13", GL_COLOR_ATTACHMENT13},
    {"GL_COLOR_ATTACHMENT14", GL_COLOR_ATTACHMENT14},
    {"GL_COLOR_ATTACHMENT15", GL_COLOR_ATTACHMENT15},
    {"GL_DEPTH_ATTACHMENT", GL_DEPTH_ATTACHMENT},
    {"GL_STENCIL_ATTACHMENT", GL_STENCIL_ATTACHMENT},
    {"GL_FRAMEBUFFER", GL_FRAMEBUFFER},
    {"GL_RENDERBUFFER", GL_RENDERBUFFER},
    {"GL_RENDERBUFFER_WIDTH", GL_RENDERBUFFER_WIDTH},
    {"GL_RENDERBUFFER_HEIGHT", GL_RENDERBUFFER_HEIGHT},
    {"GL_RENDERBUFFER_INTERNAL_FORMAT", GL_RENDERBUFFER_INTERNAL_FORMAT},
    {"GL_STENCIL_INDEX1", GL_STENCIL_INDEX1},
    {"GL_STENCIL_INDEX4", GL_STENCIL_INDEX4},
    {"GL_STENCIL_INDEX8", GL_STENCIL_INDEX8},
    {"GL_STENCIL_INDEX16", GL_STENCIL_INDEX16},
    {"GL_RENDERBUFFER_RED_SIZE", GL_RENDERBUFFER_RED_SIZE},
    {"GL_RENDERBUFFER_GREEN_SIZE", GL_RENDERBUFFER_GREEN_SIZE},
    {"GL_RENDERBUFFER_BLUE_SIZE", GL_RENDERBUFFER_BLUE_SIZE},
    {"GL_RENDERBUFFER_ALPHA_SIZE", GL_RENDERBUFFER_ALPHA_SIZE},
    {"GL_RENDERBUFFER_DEPTH_SIZE", GL_RENDERBUFFER_DEPTH_SIZE},
    {"GL_RENDERBUFFER_STENCIL_SIZE", GL_RENDERBUFFER_STENCIL_SIZE},
    {"GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE", GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE},
    {"GL_MAX_SAMPLES", GL_MAX_SAMPLES},
    {"GL_TEXTURE_GEN_STR_OES", GL_TEXTURE_GEN_STR_OES},
    {"GL_HALF_FLOAT_OES", GL_HALF_FLOAT_OES},
    {"GL_RGB565_OES", GL_RGB565_OES},
    {"GL_ETC1_RGB8_OES", GL_ETC1_RGB8_OES},
    {"GL_TEXTURE_EXTERNAL_OES", GL_TEXTURE_EXTERNAL_OES},
    {"GL_SAMPLER_EXTERNAL_OES", GL_SAMPLER_EXTERNAL_OES},
    {"GL_TEXTURE_BINDING_EXTERNAL_OES", GL_TEXTURE_BINDING_EXTERNAL_OES},
    {"GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES", GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES},
    {"GL_PRIMITIVE_RESTART_FIXED_INDEX", GL_PRIMITIVE_RESTART_FIXED_INDEX},
    {"GL_ANY_SAMPLES_PASSED_CONSERVATIVE", GL_ANY_SAMPLES_PASSED_CONSERVATIVE},
    {"GL_MAX_ELEMENT_INDEX", GL_MAX_ELEMENT_INDEX},
    {"GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT", GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT},
    {"GL_RGBA32UI", GL_RGBA32UI},
    {"GL_RGB32UI", GL_RGB32UI},
    {"GL_ALPHA32UI_EXT", GL_ALPHA32UI_EXT},
    {"GL_INTENSITY32UI_EXT", GL_INTENSITY32UI_EXT},
    {"GL_LUMINANCE32UI_EXT", GL_LUMINANCE32UI_EXT},
    {"GL_LUMINANCE_ALPHA32UI_EXT", GL_LUMINANCE_ALPHA32UI_EXT},
    {"GL_RGBA16UI", GL_RGBA16UI},
    {"GL_RGB16UI", GL_RGB16UI},
    {"GL_ALPHA16UI_EXT", GL_ALPHA16UI_EXT},
    {"GL_INTENSITY16UI_EXT", GL_INTENSITY16UI_EXT},
    {"GL_LUMINANCE16UI_EXT", GL_LUMINANCE16UI_EXT},
    {"GL_LUMINANCE_ALPHA16UI_EXT", GL_LUMINANCE_ALPHA16UI_EXT},
    {"GL_RGBA8UI", GL_RGBA8UI},
    {"GL_RGB8UI", GL_RGB8UI},
    {"GL_ALPHA8UI_EXT", GL_ALPHA8UI_EXT},
    {"GL_INTENSITY8UI_EXT", GL_INTENSITY8UI_EXT},
    {"GL_LUMINANCE8UI_EXT", GL_LUMINANCE8UI_EXT},
    {"GL_LUMINANCE_ALPHA8UI_EXT", GL_LUMINANCE_ALPHA8UI_EXT},
    {"GL_RGBA32I", GL_RGBA32I},
    {"GL_RGB32I", GL_RGB32I},
    {"GL_ALPHA32I_EXT", GL_ALPHA32I_EXT},
    {"GL_INTENSITY32I_EXT", GL_INTENSITY32I_EXT},
    {"GL_LUMINANCE32I_EXT", GL_LUMINANCE32I_EXT},
    {"GL_LUMINANCE_ALPHA32I_EXT", GL_LUMINANCE_ALPHA32I_EXT},
    {"GL_RGBA16I", GL_RGBA16I},
    {"GL_RGB16I", GL_RGB16I},
    {"GL_ALPHA16I_EXT", GL_ALPHA16I_EXT},
    {"GL_INTENSITY16I_EXT", GL_INTENSITY16I_EXT},
    {"GL_LUMINANCE16I_EXT", GL_LUMINANCE16I_EXT},
    {"GL_LUMINANCE_ALPHA16I_EXT", GL_LUMINANCE_ALPHA16I_EXT},
    {"GL_RGBA8I", GL_RGBA8I},
    {"GL_RGB8I", GL_RGB8I},
    {"GL_ALPHA8I_EXT", GL_ALPHA8I_EXT},
    {"GL_INTENSITY8I_EXT", GL_INTENSITY8I_EXT},
    {"GL_LUMINANCE8I_EXT", GL_LUMINANCE8I_EXT},
    {"GL_LUMINANCE_ALPHA8I_EXT", GL_LUMINANCE_ALPHA8I_EXT},
    {"GL_RED_INTEGER", GL_RED_INTEGER},
    {"GL_GREEN_INTEGER", GL_GREEN_INTEGER},
    {"GL_BLUE_INTEGER", GL_BLUE_INTEGER},
    {"GL_ALPHA_INTEGER", GL_ALPHA_INTEGER},
    {"GL_RGB_INTEGER", GL_RGB_INTEGER},
    {"GL_RGBA_INTEGER", GL_RGBA_INTEGER},
    {"GL_BGR_INTEGER", GL_BGR_INTEGER},
    {"GL_BGRA_INTEGER", GL_BGRA_INTEGER},
    {"GL_LUMINANCE_INTEGER_EXT", GL_LUMINANCE_INTEGER_EXT},
    {"GL_LUMINANCE_ALPHA_INTEGER_EXT", GL_LUMINANCE_ALPHA_INTEGER_EXT},
    {"GL_RGBA_INTEGER_MODE_EXT", GL_RGBA_INTEGER_MODE_EXT},
    {"GL_INT_2_10_10_10_REV", GL_INT_2_10_10_10_REV},
    {"GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV", GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV},
    {"GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV", GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV},
    {"GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV", GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV},
    {"GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV", GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV},
    {"GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV", GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV},
    {"GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV", GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV},
    {"GL_MAX_PROGRAM_GENERIC_RESULTS_NV", GL_MAX_PROGRAM_GENERIC_RESULTS_NV},
    {"GL_FRAMEBUFFER_ATTACHMENT_LAYERED", GL_FRAMEBUFFER_ATTACHMENT_LAYERED},
    {"GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS", GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS},
    {"GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB", GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB},
    {"GL_LAYER_NV", GL_LAYER_NV},
    {"GL_DEPTH_COMPONENT32F_NV", GL_DEPTH_COMPONENT32F_NV},
    {"GL_DEPTH32F_STENCIL8_NV", GL_DEPTH32F_STENCIL8_NV},
    {"GL_FLOAT_32_UNSIGNED_INT_24_8_REV", GL_FLOAT_32_UNSIGNED_INT_24_8_REV},
    {"GL_SHADER_INCLUDE_ARB", GL_SHADER_INCLUDE_ARB},
    {"GL_DEPTH_BUFFER_FLOAT_MODE_NV", GL_DEPTH_BUFFER_FLOAT_MODE_NV},
    {"GL_FRAMEBUFFER_SRGB", GL_FRAMEBUFFER_SRGB},
    {"GL_FRAMEBUFFER_SRGB_CAPABLE_EXT", GL_FRAMEBUFFER_SRGB_CAPABLE_EXT},
    {"GL_COMPRESSED_RED_RGTC1", GL_COMPRESSED_RED_RGTC1},
    {"GL_COMPRESSED_SIGNED_RED_RGTC1", GL_COMPRESSED_SIGNED_RED_RGTC1},
    {"GL_COMPRESSED_RG_RGTC2", GL_COMPRESSED_RG_RGTC2},
    {"GL_COMPRESSED_SIGNED_RG_RGTC2", GL_COMPRESSED_SIGNED_RG_RGTC2},
    {"GL_SAMPLER_1D_ARRAY", GL_SAMPLER_1D_ARRAY},
    {"GL_SAMPLER_2D_ARRAY", GL_SAMPLER_2D_ARRAY},
    {"GL_SAMPLER_BUFFER", GL_SAMPLER_BUFFER},
    {"GL_SAMPLER_1D_ARRAY_SHADOW", GL_SAMPLER_1D_ARRAY_SHADOW},
    {"GL_SAMPLER_2D_ARRAY_SHADOW", GL_SAMPLER_2D_ARRAY_SHADOW},
    {"GL_SAMPLER_CUBE_SHADOW", GL_SAMPLER_CUBE_SHADOW},
    {"GL_UNSIGNED_INT_VEC2", GL_UNSIGNED_INT_VEC2},
    {"GL_UNSIGNED_INT_VEC3", GL_UNSIGNED_INT_VEC3},
    {"GL_UNSIGNED_INT_VEC4", GL_UNSIGNED_INT_VEC4},
    {"GL_INT_SAMPLER_1D", GL_INT_SAMPLER_1D},
    {"GL_INT_SAMPLER_2D", GL_INT_SAMPLER_2D},
    {"GL_INT_SAMPLER_3D", GL_INT_SAMPLER_3D},
    {"GL_INT_SAMPLER_CUBE", GL_INT_SAMPLER_CUBE},
    {"GL_INT_SAMPLER_2D_RECT", GL_INT_SAMPLER_2D_RECT},
    {"GL_INT_SAMPLER_1D_ARRAY", GL_INT_SAMPLER_1D_ARRAY},
    {"GL_INT_SAMPLER_2D_ARRAY", GL_INT_SAMPLER_2D_ARRAY},
    {"GL_INT_SAMPLER_BUFFER", GL_INT_SAMPLER_BUFFER},
    {"GL_UNSIGNED_INT_SAMPLER_1D", GL_UNSIGNED_INT_SAMPLER_1D},
    {"GL_UNSIGNED_INT_SAMPLER_2D", GL_UNSIGNED_INT_SAMPLER_2D},
    {"GL_UNSIGNED_INT_SAMPLER_3D", GL_UNSIGNED_INT_SAMPLER_3D},
    {"GL_UNSIGNED_INT_SAMPLER_CUBE", GL_UNSIGNED_INT_SAMPLER_CUBE},
    {"GL_UNSIGNED_INT_SAMPLER_2D_RECT", GL_UNSIGNED_INT_SAMPLER_2D_RECT},
    {"GL_UNSIGNED_INT_SAMPLER_1D_ARRAY", GL_UNSIGNED_INT_SAMPLER_1D_ARRAY},
    {"GL_UNSIGNED_INT_SAMPLER_2D_ARRAY", GL_UNSIGNED_INT_SAMPLER_2D_ARRAY},
    {"GL_UNSIGNED_INT_SAMPLER_BUFFER", GL_UNSIGNED_INT_SAMPLER_BUFFER},
    {"GL_GEOMETRY_SHADER", GL_GEOMETRY_SHADER},
    {"GL_GEOMETRY_VERTICES_OUT_ARB", GL_GEOMETRY_VERTICES_OUT_ARB},
    {"GL_GEOMETRY_INPUT_TYPE_ARB", GL_GEOMETRY_INPUT_TYPE_ARB},
    {"GL_GEOMETRY_OUTPUT_TYPE_ARB", GL_GEOMETRY_OUTPUT_TYPE_ARB},
    {"GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB", GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB},
    {"GL_MAX_VERTEX_VARYING_COMPONENTS_ARB", GL_MAX_VERTEX_VARYING_COMPONENTS_ARB},
    {"GL_MAX_GEOMETRY_UNIFORM_COMPONENTS", GL_MAX_GEOMETRY_UNIFORM_COMPONENTS},
    {"GL_MAX_GEOMETRY_OUTPUT_VERTICES", GL_MAX_GEOMETRY_OUTPUT_VERTICES},
    {"GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS", GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS},
    {"GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT", GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT},
    {"GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT", GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT},
    {"GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT", GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT},
    {"GL_ACTIVE_SUBROUTINES", GL_ACTIVE_SUBROUTINES},
    {"GL_ACTIVE_SUBROUTINE_UNIFORMS", GL_ACTIVE_SUBROUTINE_UNIFORMS},
    {"GL_MAX_SUBROUTINES", GL_MAX_SUBROUTINES},
    {"GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS", GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS},
    {"GL_NAMED_STRING_LENGTH_ARB", GL_NAMED_STRING_LENGTH_ARB},
    {"GL_NAMED_STRING_TYPE_ARB", GL_NAMED_STRING_TYPE_ARB},
    {"GL_MAX_BINDABLE_UNIFORM_SIZE_EXT", GL_MAX_BINDABLE_UNIFORM_SIZE_EXT},
    {"GL_UNIFORM_BUFFER_EXT", GL_UNIFORM_BUFFER_EXT},
    {"GL_UNIFORM_BUFFER_BINDING_EXT", GL_UNIFORM_BUFFER_BINDING_EXT},
    {"GL_LOW_FLOAT", GL_LOW_FLOAT},
    {"GL_MEDIUM_FLOAT", GL_MEDIUM_FLOAT},
    {"GL_HIGH_FLOAT", GL_HIGH_FLOAT},
    {"GL_LOW_INT", GL_LOW_INT},
    {"GL_MEDIUM_INT", GL_MEDIUM_INT},
    {"GL_HIGH_INT", GL_HIGH_INT},
    {"GL_NUM_SHADER_BINARY_FORMATS", GL_NUM_SHADER_BINARY_FORMATS},
    {"GL_SHADER_COMPILER", GL_SHADER_COMPILER},
    {"GL_MAX_VERTEX_UNIFORM_VECTORS", GL_MAX_VERTEX_UNIFORM_VECTORS},
    {"GL_MAX_VARYING_VECTORS", GL_MAX_VARYING_VECTORS},
    {"GL_MAX_FRAGMENT_UNIFORM_VECTORS", GL_MAX_FRAGMENT_UNIFORM_VECTORS},
    {"GL_RENDERBUFFER_COLOR_SAMPLES_NV", GL_RENDERBUFFER_COLOR_SAMPLES_NV},
    {"GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV", GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV},
    {"GL_MULTISAMPLE_COVERAGE_MODES_NV", GL_MULTISAMPLE_COVERAGE_MODES_NV},
    {"GL_QUERY_WAIT", GL_QUERY_WAIT},
    {"GL_QUERY_NO_WAIT", GL_QUERY_NO_WAIT},
    {"GL_QUERY_BY_REGION_WAIT", GL_QUERY_BY_REGION_WAIT},
    {"GL_QUERY_BY_REGION_NO_WAIT", GL_QUERY_BY_REGION_NO_WAIT},
    {"GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS", GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS},
    {"GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS", GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS},
    {"GL_COLOR_SAMPLES_NV", GL_COLOR_SAMPLES_NV},
    {"GL_TRANSFORM_FEEDBACK", GL_TRANSFORM_FEEDBACK},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED", GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE", GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE},
    {"GL_TRANSFORM_FEEDBACK_BINDING", GL_TRANSFORM_FEEDBACK_BINDING},
    {"GL_FRAME_NV", GL_FRAME_NV},
    {"GL_FIELDS_NV", GL_FIELDS_NV},
    {"GL_TIMESTAMP", GL_TIMESTAMP},
    {"GL_NUM_FILL_STREAMS_NV", GL_NUM_FILL_STREAMS_NV},
    {"GL_PRESENT_TIME_NV", GL_PRESENT_TIME_NV},
    {"GL_PRESENT_DURATION_NV", GL_PRESENT_DURATION_NV},
    {"GL_PROGRAM_MATRIX_EXT", GL_PROGRAM_MATRIX_EXT},
    {"GL_TRANSPOSE_PROGRAM_MATRIX_EXT", GL_TRANSPOSE_PROGRAM_MATRIX_EXT},
    {"GL_PROGRAM_MATRIX_STACK_DEPTH_EXT", GL_PROGRAM_MATRIX_STACK_DEPTH_EXT},
    {"GL_TEXTURE_SWIZZLE_R", GL_TEXTURE_SWIZZLE_R},
    {"GL_TEXTURE_SWIZZLE_G", GL_TEXTURE_SWIZZLE_G},
    {"GL_TEXTURE_SWIZZLE_B", GL_TEXTURE_SWIZZLE_B},
    {"GL_TEXTURE_SWIZZLE_A", GL_TEXTURE_SWIZZLE_A},
    {"GL_TEXTURE_SWIZZLE_RGBA", GL_TEXTURE_SWIZZLE_RGBA},
    {"GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS", GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS},
    {"GL_ACTIVE_SUBROUTINE_MAX_LENGTH", GL_ACTIVE_SUBROUTINE_MAX_LENGTH},
    {"GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH", GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH},
    {"GL_NUM_COMPATIBLE_SUBROUTINES", GL_NUM_COMPATIBLE_SUBROUTINES},
    {"GL_COMPATIBLE_SUBROUTINES", GL_COMPATIBLE_SUBROUTINES},
    {"GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION", GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION},
    {"GL_FIRST_VERTEX_CONVENTION", GL_FIRST_VERTEX_CONVENTION},
    {"GL_LAST_VERTEX_CONVENTION", GL_LAST_VERTEX_CONVENTION},
    {"GL_PROVOKING_VERTEX", GL_PROVOKING_VERTEX},
    {"GL_SAMPLE_POSITION", GL_SAMPLE_POSITION},
    {"GL_SAMPLE_MASK", GL_SAMPLE_MASK},
    {"GL_SAMPLE_MASK_VALUE", GL_SAMPLE_MASK_VALUE},
    {"GL_TEXTURE_BINDING_RENDERBUFFER_NV", GL_TEXTURE_BINDING_RENDERBUFFER_NV},
    {"GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV", GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV},
    {"GL_TEXTURE_RENDERBUFFER_NV", GL_TEXTURE_RENDERBUFFER_NV},
    {"GL_SAMPLER_RENDERBUFFER_NV", GL_SAMPLER_RENDERBUFFER_NV},
    {"GL_INT_SAMPLER_RENDERBUFFER_NV", GL_INT_SAMPLER_RENDERBUFFER_NV},
    {"GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV", GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV},
    {"GL_MAX_SAMPLE_MASK_WORDS", GL_MAX_SAMPLE_MASK_WORDS},
    {"GL_MAX_GEOMETRY_SHADER_INVOCATIONS", GL_MAX_GEOMETRY_SHADER_INVOCATIONS},
    {"GL_MIN_FRAGMENT_INTERPOLATION_OFFSET", GL_MIN_FRAGMENT_INTERPOLATION_OFFSET},
    {"GL_MAX_FRAGMENT_INTERPOLATION_OFFSET", GL_MAX_FRAGMENT_INTERPOLATION_OFFSET},
    {"GL_FRAGMENT_INTERPOLATION_OFFSET_BITS", GL_FRAGMENT_INTERPOLATION_OFFSET_BITS},
    {"GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET", GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET},
    {"GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET", GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET},
    {"GL_MAX_TRANSFORM_FEEDBACK_BUFFERS", GL_MAX_TRANSFORM_FEEDBACK_BUFFERS},
    {"GL_MAX_VERTEX_STREAMS", GL_MAX_VERTEX_STREAMS},
    {"GL_PATCH_VERTICES", GL_PATCH_VERTICES},
    {"GL_PATCH_DEFAULT_INNER_LEVEL", GL_PATCH_DEFAULT_INNER_LEVEL},
    {"GL_PATCH_DEFAULT_OUTER_LEVEL", GL_PATCH_DEFAULT_OUTER_LEVEL},
    {"GL_TESS_CONTROL_OUTPUT_VERTICES", GL_TESS_CONTROL_OUTPUT_VERTICES},
    {"GL_TESS_GEN_MODE", GL_TESS_GEN_MODE},
    {"GL_TESS_GEN_SPACING", GL_TESS_GEN_SPACING},
    {"GL_TESS_GEN_VERTEX_ORDER", GL_TESS_GEN_VERTEX_ORDER},
    {"GL_TESS_GEN_POINT_MODE", GL_TESS_GEN_POINT_MODE},
    {"GL_ISOLINES", GL_ISOLINES},
    {"GL_FRACTIONAL_ODD", GL_FRACTIONAL_ODD},
    {"GL_FRACTIONAL_EVEN", GL_FRACTIONAL_EVEN},
    {"GL_MAX_PATCH_VERTICES", GL_MAX_PATCH_VERTICES},
    {"GL_MAX_TESS_GEN_LEVEL", GL_MAX_TESS_GEN_LEVEL},
    {"GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS", GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS},
    {"GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS", GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS},
    {"GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS", GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS},
    {"GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS", GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS},
    {"GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS", GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS},
    {"GL_MAX_TESS_PATCH_COMPONENTS", GL_MAX_TESS_PATCH_COMPONENTS},
    {"GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS", GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS},
    {"GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS", GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS},
    {"GL_TESS_EVALUATION_SHADER", GL_TESS_EVALUATION_SHADER},
    {"GL_TESS_CONTROL_SHADER", GL_TESS_CONTROL_SHADER},
    {"GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS", GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS},
    {"GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS", GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS},
    {"GL_COMPRESSED_RGBA_BPTC_UNORM_ARB", GL_COMPRESSED_RGBA_BPTC_UNORM_ARB},
    {"GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB", GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB},
    {"GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB", GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB},
    {"GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB", GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB},
    {"GL_BUFFER_GPU_ADDRESS_NV", GL_BUFFER_GPU_ADDRESS_NV},
    {"GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV", GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV},
    {"GL_ELEMENT_ARRAY_UNIFIED_NV", GL_ELEMENT_ARRAY_UNIFIED_NV},
    {"GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV", GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV},
    {"GL_VERTEX_ARRAY_ADDRESS_NV", GL_VERTEX_ARRAY_ADDRESS_NV},
    {"GL_NORMAL_ARRAY_ADDRESS_NV", GL_NORMAL_ARRAY_ADDRESS_NV},
    {"GL_COLOR_ARRAY_ADDRESS_NV", GL_COLOR_ARRAY_ADDRESS_NV},
    {"GL_INDEX_ARRAY_ADDRESS_NV", GL_INDEX_ARRAY_ADDRESS_NV},
    {"GL_TEXTURE_COORD_ARRAY_ADDRESS_NV", GL_TEXTURE_COORD_ARRAY_ADDRESS_NV},
    {"GL_EDGE_FLAG_ARRAY_ADDRESS_NV", GL_EDGE_FLAG_ARRAY_ADDRESS_NV},
    {"GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV", GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV},
    {"GL_FOG_COORD_ARRAY_ADDRESS_NV", GL_FOG_COORD_ARRAY_ADDRESS_NV},
    {"GL_ELEMENT_ARRAY_ADDRESS_NV", GL_ELEMENT_ARRAY_ADDRESS_NV},
    {"GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV", GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV},
    {"GL_VERTEX_ARRAY_LENGTH_NV", GL_VERTEX_ARRAY_LENGTH_NV},
    {"GL_NORMAL_ARRAY_LENGTH_NV", GL_NORMAL_ARRAY_LENGTH_NV},
    {"GL_COLOR_ARRAY_LENGTH_NV", GL_COLOR_ARRAY_LENGTH_NV},
    {"GL_INDEX_ARRAY_LENGTH_NV", GL_INDEX_ARRAY_LENGTH_NV},
    {"GL_TEXTURE_COORD_ARRAY_LENGTH_NV", GL_TEXTURE_COORD_ARRAY_LENGTH_NV},
    {"GL_EDGE_FLAG_ARRAY_LENGTH_NV", GL_EDGE_FLAG_ARRAY_LENGTH_NV},
    {"GL_SECONDARY_COLOR_ARRAY_LENGTH_NV", GL_SECONDARY_COLOR_ARRAY_LENGTH_NV},
    {"GL_FOG_COORD_ARRAY_LENGTH_NV", GL_FOG_COORD_ARRAY_LENGTH_NV},
    {"GL_ELEMENT_ARRAY_LENGTH_NV", GL_ELEMENT_ARRAY_LENGTH_NV},
    {"GL_GPU_ADDRESS_NV", GL_GPU_ADDRESS_NV},
    {"GL_MAX_SHADER_BUFFER_ADDRESS_NV", GL_MAX_SHADER_BUFFER_ADDRESS_NV},
    {"GL_COPY_READ_BUFFER", GL_COPY_READ_BUFFER},
    {"GL_COPY_WRITE_BUFFER", GL_COPY_WRITE_BUFFER},
    {"GL_MAX_IMAGE_UNITS", GL_MAX_IMAGE_UNITS},
    {"GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS", GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS},
    {"GL_IMAGE_BINDING_NAME", GL_IMAGE_BINDING_NAME},
    {"GL_IMAGE_BINDING_LEVEL", GL_IMAGE_BINDING_LEVEL},
    {"GL_IMAGE_BINDING_LAYERED", GL_IMAGE_BINDING_LAYERED},
    {"GL_IMAGE_BINDING_LAYER", GL_IMAGE_BINDING_LAYER},
    {"GL_IMAGE_BINDING_ACCESS", GL_IMAGE_BINDING_ACCESS},
    {"GL_DRAW_INDIRECT_BUFFER", GL_DRAW_INDIRECT_BUFFER},
    {"GL_DRAW_INDIRECT_UNIFIED_NV", GL_DRAW_INDIRECT_UNIFIED_NV},
    {"GL_DRAW_INDIRECT_ADDRESS_NV", GL_DRAW_INDIRECT_ADDRESS_NV},
    {"GL_DRAW_INDIRECT_LENGTH_NV", GL_DRAW_INDIRECT_LENGTH_NV},
    {"GL_DRAW_INDIRECT_BUFFER_BINDING", GL_DRAW_INDIRECT_BUFFER_BINDING},
    {"GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV", GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV},
    {"GL_MAX_PROGRAM_SUBROUTINE_NUM_NV", GL_MAX_PROGRAM_SUBROUTINE_NUM_NV},
    {"GL_DOUBLE_MAT2", GL_DOUBLE_MAT2},
    {"GL_DOUBLE_MAT3", GL_DOUBLE_MAT3},
    {"GL_DOUBLE_MAT4", GL_DOUBLE_MAT4},
    {"GL_DOUBLE_MAT2x3", GL_DOUBLE_MAT2x3},
    {"GL_DOUBLE_MAT2x4", GL_DOUBLE_MAT2x4},
    {"GL_DOUBLE_MAT3x2", GL_DOUBLE_MAT3x2},
    {"GL_DOUBLE_MAT3x4", GL_DOUBLE_MAT3x4},
    {"GL_DOUBLE_MAT4x2", GL_DOUBLE_MAT4x2},
    {"GL_DOUBLE_MAT4x3", GL_DOUBLE_MAT4x3},
    {"GL_MALI_SHADER_BINARY_ARM", GL_MALI_SHADER_BINARY_ARM},
    {"GL_RED_SNORM", GL_RED_SNORM},
    {"GL_RG_SNORM", GL_RG_SNORM},
    {"GL_RGB_SNORM", GL_RGB_SNORM},
    {"GL_RGBA_SNORM", GL_RGBA_SNORM},
    {"GL_R8_SNORM", GL_R8_SNORM},
    {"GL_RG8_SNORM", GL_RG8_SNORM},
    {"GL_RGB8_SNORM", GL_RGB8_SNORM},
    {"GL_RGBA8_SNORM", GL_RGBA8_SNORM},
    {"GL_R16_SNORM", GL_R16_SNORM},
    {"GL_RG16_SNORM", GL_RG16_SNORM},
    {"GL_RGB16_SNORM", GL_RGB16_SNORM},
    {"GL_RGBA16_SNORM", GL_RGBA16_SNORM},
    {"GL_SIGNED_NORMALIZED", GL_SIGNED_NORMALIZED},
    {"GL_PRIMITIVE_RESTART", GL_PRIMITIVE_RESTART},
    {"GL_PRIMITIVE_RESTART_INDEX", GL_PRIMITIVE_RESTART_INDEX},
    {"GL_PERFMON_GLOBAL_MODE_QCOM", GL_PERFMON_GLOBAL_MODE_QCOM},
    {"GL_SHADER_BINARY_VIV", GL_SHADER_BINARY_VIV},
    {"GL_INT8_NV", GL_INT8_NV},
    {"GL_INT8_VEC2_NV", GL_INT8_VEC2_NV},
    {"GL_INT8_VEC3_NV", GL_INT8_VEC3_NV},
    {"GL_INT8_VEC4_NV", GL_INT8_VEC4_NV},
    {"GL_INT16_NV", GL_INT16_NV},
    {"GL_INT16_VEC2_NV", GL_INT16_VEC2_NV},
    {"GL_INT16_VEC3_NV", GL_INT16_VEC3_NV},
    {"GL_INT16_VEC4_NV", GL_INT16_VEC4_NV},
    {"GL_INT64_VEC2_NV", GL_INT64_VEC2_NV},
    {"GL_INT64_VEC3_NV", GL_INT64_VEC3_NV},
    {"GL_INT64_VEC4_NV", GL_INT64_VEC4_NV},
    {"GL_UNSIGNED_INT8_NV", GL_UNSIGNED_INT8_NV},
    {"GL_UNSIGNED_INT8_VEC2_NV", GL_UNSIGNED_INT8_VEC2_NV},
    {"GL_UNSIGNED_INT8_VEC3_NV", GL_UNSIGNED_INT8_VEC3_NV},
    {"GL_UNSIGNED_INT8_VEC4_NV", GL_UNSIGNED_INT8_VEC4_NV},
    {"GL_UNSIGNED_INT16_NV", GL_UNSIGNED_INT16_NV},
    {"GL_UNSIGNED_INT16_VEC2_NV", GL_UNSIGNED_INT16_VEC2_NV},
    {"GL_UNSIGNED_INT16_VEC3_NV", GL_UNSIGNED_INT16_VEC3_NV},
    {"GL_UNSIGNED_INT16_VEC4_NV", GL_UNSIGNED_INT16_VEC4_NV},
    {"GL_UNSIGNED_INT64_VEC2_NV", GL_UNSIGNED_INT64_VEC2_NV},
    {"GL_UNSIGNED_INT64_VEC3_NV", GL_UNSIGNED_INT64_VEC3_NV},
    {"GL_UNSIGNED_INT64_VEC4_NV", GL_UNSIGNED_INT64_VEC4_NV},
    {"GL_FLOAT16_NV", GL_FLOAT16_NV},
    {"GL_FLOAT16_VEC2_NV", GL_FLOAT16_VEC2_NV},
    {"GL_FLOAT16_VEC3_NV", GL_FLOAT16_VEC3_NV},
    {"GL_FLOAT16_VEC4_NV", GL_FLOAT16_VEC4_NV},
    {"GL_DOUBLE_VEC2", GL_DOUBLE_VEC2},
    {"GL_DOUBLE_VEC3", GL_DOUBLE_VEC3},
    {"GL_DOUBLE_VEC4", GL_DOUBLE_VEC4},
    {"GL_SAMPLER_BUFFER_AMD", GL_SAMPLER_BUFFER_AMD},
    {"GL_INT_SAMPLER_BUFFER_AMD", GL_INT_SAMPLER_BUFFER_AMD},
    {"GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD", GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD},
    {"GL_TESSELLATION_MODE_AMD", GL_TESSELLATION_MODE_AMD},
    {"GL_TESSELLATION_FACTOR_AMD", GL_TESSELLATION_FACTOR_AMD},
    {"GL_DISCRETE_AMD", GL_DISCRETE_AMD},
    {"GL_CONTINUOUS_AMD", GL_CONTINUOUS_AMD},
    {"GL_TEXTURE_CUBE_MAP_ARRAY", GL_TEXTURE_CUBE_MAP_ARRAY},
    {"GL_TEXTURE_BINDING_CUBE_MAP_ARRAY", GL_TEXTURE_BINDING_CUBE_MAP_ARRAY},
    {"GL_PROXY_TEXTURE_CUBE_MAP_ARRAY", GL_PROXY_TEXTURE_CUBE_MAP_ARRAY},
    {"GL_SAMPLER_CUBE_MAP_ARRAY", GL_SAMPLER_CUBE_MAP_ARRAY},
    {"GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW", GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW},
    {"GL_INT_SAMPLER_CUBE_MAP_ARRAY", GL_INT_SAMPLER_CUBE_MAP_ARRAY},
    {"GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY", GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY},
    {"GL_ALPHA_SNORM", GL_ALPHA_SNORM},
    {"GL_LUMINANCE_SNORM", GL_LUMINANCE_SNORM},
    {"GL_LUMINANCE_ALPHA_SNORM", GL_LUMINANCE_ALPHA_SNORM},
    {"GL_INTENSITY_SNORM", GL_INTENSITY_SNORM},
    {"GL_ALPHA8_SNORM", GL_ALPHA8_SNORM},
    {"GL_LUMINANCE8_SNORM", GL_LUMINANCE8_SNORM},
    {"GL_LUMINANCE8_ALPHA8_SNORM", GL_LUMINANCE8_ALPHA8_SNORM},
    {"GL_INTENSITY8_SNORM", GL_INTENSITY8_SNORM},
    {"GL_ALPHA16_SNORM", GL_ALPHA16_SNORM},
    {"GL_LUMINANCE16_SNORM", GL_LUMINANCE16_SNORM},
    {"GL_LUMINANCE16_ALPHA16_SNORM", GL_LUMINANCE16_ALPHA16_SNORM},
    {"GL_INTENSITY16_SNORM", GL_INTENSITY16_SNORM},
    {"GL_FACTOR_MIN_AMD", GL_FACTOR_MIN_AMD},
    {"GL_FACTOR_MAX_AMD", GL_FACTOR_MAX_AMD},
    {"GL_DEPTH_CLAMP_NEAR_AMD", GL_DEPTH_CLAMP_NEAR_AMD},
    {"GL_DEPTH_CLAMP_FAR_AMD", GL_DEPTH_CLAMP_FAR_AMD},
    {"GL_VIDEO_BUFFER_NV", GL_VIDEO_BUFFER_NV},
    {"GL_VIDEO_BUFFER_BINDING_NV", GL_VIDEO_BUFFER_BINDING_NV},
    {"GL_FIELD_UPPER_NV", GL_FIELD_UPPER_NV},
    {"GL_FIELD_LOWER_NV", GL_FIELD_LOWER_NV},
    {"GL_NUM_VIDEO_CAPTURE_STREAMS_NV", GL_NUM_VIDEO_CAPTURE_STREAMS_NV},
    {"GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV", GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV},
    {"GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV", GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV},
    {"GL_LAST_VIDEO_CAPTURE_STATUS_NV", GL_LAST_VIDEO_CAPTURE_STATUS_NV},
    {"GL_VIDEO_BUFFER_PITCH_NV", GL_VIDEO_BUFFER_PITCH_NV},
    {"GL_VIDEO_COLOR_CONVERSION_MATRIX_NV", GL_VIDEO_COLOR_CONVERSION_MATRIX_NV},
    {"GL_VIDEO_COLOR_CONVERSION_MAX_NV", GL_VIDEO_COLOR_CONVERSION_MAX_NV},
    {"GL_VIDEO_COLOR_CONVERSION_MIN_NV", GL_VIDEO_COLOR_CONVERSION_MIN_NV},
    {"GL_VIDEO_COLOR_CONVERSION_OFFSET_NV", GL_VIDEO_COLOR_CONVERSION_OFFSET_NV},
    {"GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV", GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV},
    {"GL_PARTIAL_SUCCESS_NV", GL_PARTIAL_SUCCESS_NV},
    {"GL_SUCCESS_NV", GL_SUCCESS_NV},
    {"GL_FAILURE_NV", GL_FAILURE_NV},
    {"GL_YCBYCR8_422_NV", GL_YCBYCR8_422_NV},
    {"GL_YCBAYCR8A_4224_NV", GL_YCBAYCR8A_4224_NV},
    {"GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV", GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV},
    {"GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV", GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV},
    {"GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV", GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV},
    {"GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV", GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV},
    {"GL_Z4Y12Z4CB12Z4CR12_444_NV", GL_Z4Y12Z4CB12Z4CR12_444_NV},
    {"GL_VIDEO_CAPTURE_FRAME_WIDTH_NV", GL_VIDEO_CAPTURE_FRAME_WIDTH_NV},
    {"GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV", GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV},
    {"GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV", GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV},
    {"GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV", GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV},
    {"GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV", GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV},
    {"GL_TEXTURE_COVERAGE_SAMPLES_NV", GL_TEXTURE_COVERAGE_SAMPLES_NV},
    {"GL_TEXTURE_COLOR_SAMPLES_NV", GL_TEXTURE_COLOR_SAMPLES_NV},
    {"GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX", GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX},
    {"GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX", GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX},
    {"GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX", GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX},
    {"GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX", GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX},
    {"GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX", GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX},
    {"GL_IMAGE_1D", GL_IMAGE_1D},
    {"GL_IMAGE_2D", GL_IMAGE_2D},
    {"GL_IMAGE_3D", GL_IMAGE_3D},
    {"GL_IMAGE_2D_RECT", GL_IMAGE_2D_RECT},
    {"GL_IMAGE_CUBE", GL_IMAGE_CUBE},
    {"GL_IMAGE_BUFFER", GL_IMAGE_BUFFER},
    {"GL_IMAGE_1D_ARRAY", GL_IMAGE_1D_ARRAY},
    {"GL_IMAGE_2D_ARRAY", GL_IMAGE_2D_ARRAY},
    {"GL_IMAGE_CUBE_MAP_ARRAY", GL_IMAGE_CUBE_MAP_ARRAY},
    {"GL_IMAGE_2D_MULTISAMPLE", GL_IMAGE_2D_MULTISAMPLE},
    {"GL_IMAGE_2D_MULTISAMPLE_ARRAY", GL_IMAGE_2D_MULTISAMPLE_ARRAY},
    {"GL_INT_IMAGE_1D", GL_INT_IMAGE_1D},
    {"GL_INT_IMAGE_2D", GL_INT_IMAGE_2D},
    {"GL_INT_IMAGE_3D", GL_INT_IMAGE_3D},
    {"GL_INT_IMAGE_2D_RECT", GL_INT_IMAGE_2D_RECT},
    {"GL_INT_IMAGE_CUBE", GL_INT_IMAGE_CUBE},
    {"GL_INT_IMAGE_BUFFER", GL_INT_IMAGE_BUFFER},
    {"GL_INT_IMAGE_1D_ARRAY", GL_INT_IMAGE_1D_ARRAY},
    {"GL_INT_IMAGE_2D_ARRAY", GL_INT_IMAGE_2D_ARRAY},
    {"GL_INT_IMAGE_CUBE_MAP_ARRAY", GL_INT_IMAGE_CUBE_MAP_ARRAY},
    {"GL_INT_IMAGE_2D_MULTISAMPLE", GL_INT_IMAGE_2D_MULTISAMPLE},
    {"GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY", GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY},
    {"GL_UNSIGNED_INT_IMAGE_1D", GL_UNSIGNED_INT_IMAGE_1D},
    {"GL_UNSIGNED_INT_IMAGE_2D", GL_UNSIGNED_INT_IMAGE_2D},
    {"GL_UNSIGNED_INT_IMAGE_3D", GL_UNSIGNED_INT_IMAGE_3D},
    {"GL_UNSIGNED_INT_IMAGE_2D_RECT", GL_UNSIGNED_INT_IMAGE_2D_RECT},
    {"GL_UNSIGNED_INT_IMAGE_CUBE", GL_UNSIGNED_INT_IMAGE_CUBE},
    {"GL_UNSIGNED_INT_IMAGE_BUFFER", GL_UNSIGNED_INT_IMAGE_BUFFER},
    {"GL_UNSIGNED_INT_IMAGE_1D_ARRAY", GL_UNSIGNED_INT_IMAGE_1D_ARRAY},
    {"GL_UNSIGNED_INT_IMAGE_2D_ARRAY", GL_UNSIGNED_INT_IMAGE_2D_ARRAY},
    {"GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY", GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY},
    {"GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE", GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE},
    {"GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY", GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY},
    {"GL_MAX_IMAGE_SAMPLES", GL_MAX_IMAGE_SAMPLES},
    {"GL_IMAGE_BINDING_FORMAT", GL_IMAGE_BINDING_FORMAT},
    {"GL_RGB10_A2UI", GL_RGB10_A2UI},
    {"GL_PATH_FORMAT_SVG_NV", GL_PATH_FORMAT_SVG_NV},
    {"GL_PATH_FORMAT_PS_NV", GL_PATH_FORMAT_PS_NV},
    {"GL_STANDARD_FONT_NAME_NV", GL_STANDARD_FONT_NAME_NV},
    {"GL_SYSTEM_FONT_NAME_NV", GL_SYSTEM_FONT_NAME_NV},
    {"GL_FILE_NAME_NV", GL_FILE_NAME_NV},
    {"GL_PATH_STROKE_WIDTH_NV", GL_PATH_STROKE_WIDTH_NV},
    {"GL_PATH_END_CAPS_NV", GL_PATH_END_CAPS_NV},
    {"GL_PATH_INITIAL_END_CAP_NV", GL_PATH_INITIAL_END_CAP_NV},
    {"GL_PATH_TERMINAL_END_CAP_NV", GL_PATH_TERMINAL_END_CAP_NV},
    {"GL_PATH_JOIN_STYLE_NV", GL_PATH_JOIN_STYLE_NV},
    {"GL_PATH_MITER_LIMIT_NV", GL_PATH_MITER_LIMIT_NV},
    {"GL_PATH_DASH_CAPS_NV", GL_PATH_DASH_CAPS_NV},
    {"GL_PATH_INITIAL_DASH_CAP_NV", GL_PATH_INITIAL_DASH_CAP_NV},
    {"GL_PATH_TERMINAL_DASH_CAP_NV", GL_PATH_TERMINAL_DASH_CAP_NV},
    {"GL_PATH_DASH_OFFSET_NV", GL_PATH_DASH_OFFSET_NV},
    {"GL_PATH_CLIENT_LENGTH_NV", GL_PATH_CLIENT_LENGTH_NV},
    {"GL_PATH_FILL_MODE_NV", GL_PATH_FILL_MODE_NV},
    {"GL_PATH_FILL_MASK_NV", GL_PATH_FILL_MASK_NV},
    {"GL_PATH_FILL_COVER_MODE_NV", GL_PATH_FILL_COVER_MODE_NV},
    {"GL_PATH_STROKE_COVER_MODE_NV", GL_PATH_STROKE_COVER_MODE_NV},
    {"GL_PATH_STROKE_MASK_NV", GL_PATH_STROKE_MASK_NV},
    {"GL_PATH_SAMPLE_QUALITY_NV", GL_PATH_SAMPLE_QUALITY_NV},
    {"GL_PATH_STROKE_OVERSAMPLE_COUNT_NV", GL_PATH_STROKE_OVERSAMPLE_COUNT_NV},
    {"GL_COUNT_UP_NV", GL_COUNT_UP_NV},
    {"GL_COUNT_DOWN_NV", GL_COUNT_DOWN_NV},
    {"GL_PATH_OBJECT_BOUNDING_BOX_NV", GL_PATH_OBJECT_BOUNDING_BOX_NV},
    {"GL_CONVEX_HULL_NV", GL_CONVEX_HULL_NV},
    {"GL_MULTI_HULLS_NV", GL_MULTI_HULLS_NV},
    {"GL_BOUNDING_BOX_NV", GL_BOUNDING_BOX_NV},
    {"GL_TRANSLATE_X_NV", GL_TRANSLATE_X_NV},
    {"GL_TRANSLATE_Y_NV", GL_TRANSLATE_Y_NV},
    {"GL_TRANSLATE_2D_NV", GL_TRANSLATE_2D_NV},
    {"GL_TRANSLATE_3D_NV", GL_TRANSLATE_3D_NV},
    {"GL_AFFINE_2D_NV", GL_AFFINE_2D_NV},
    {"GL_PROJECTIVE_2D_NV", GL_PROJECTIVE_2D_NV},
    {"GL_AFFINE_3D_NV", GL_AFFINE_3D_NV},
    {"GL_PROJECTIVE_3D_NV", GL_PROJECTIVE_3D_NV},
    {"GL_TRANSPOSE_AFFINE_2D_NV", GL_TRANSPOSE_AFFINE_2D_NV},
    {"GL_TRANSPOSE_PROJECTIVE_2D_NV", GL_TRANSPOSE_PROJECTIVE_2D_NV},
    {"GL_TRANSPOSE_AFFINE_3D_NV", GL_TRANSPOSE_AFFINE_3D_NV},
    {"GL_TRANSPOSE_PROJECTIVE_3D_NV", GL_TRANSPOSE_PROJECTIVE_3D_NV},
    {"GL_UTF8_NV", GL_UTF8_NV},
    {"GL_UTF16_NV", GL_UTF16_NV},
    {"GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV", GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV},
    {"GL_PATH_COMMAND_COUNT_NV", GL_PATH_COMMAND_COUNT_NV},
    {"GL_PATH_COORD_COUNT_NV", GL_PATH_COORD_COUNT_NV},
    {"GL_PATH_DASH_ARRAY_COUNT_NV", GL_PATH_DASH_ARRAY_COUNT_NV},
    {"GL_PATH_COMPUTED_LENGTH_NV", GL_PATH_COMPUTED_LENGTH_NV},
    {"GL_PATH_FILL_BOUNDING_BOX_NV", GL_PATH_FILL_BOUNDING_BOX_NV},
    {"GL_PATH_STROKE_BOUNDING_BOX_NV", GL_PATH_STROKE_BOUNDING_BOX_NV},
    {"GL_SQUARE_NV", GL_SQUARE_NV},
    {"GL_ROUND_NV", GL_ROUND_NV},
    {"GL_TRIANGULAR_NV", GL_TRIANGULAR_NV},
    {"GL_BEVEL_NV", GL_BEVEL_NV},
    {"GL_MITER_REVERT_NV", GL_MITER_REVERT_NV},
    {"GL_MITER_TRUNCATE_NV", GL_MITER_TRUNCATE_NV},
    {"GL_SKIP_MISSING_GLYPH_NV", GL_SKIP_MISSING_GLYPH_NV},
    {"GL_USE_MISSING_GLYPH_NV", GL_USE_MISSING_GLYPH_NV},
    {"GL_PATH_ERROR_POSITION_NV", GL_PATH_ERROR_POSITION_NV},
    {"GL_PATH_FOG_GEN_MODE_NV", GL_PATH_FOG_GEN_MODE_NV},
    {"GL_ACCUM_ADJACENT_PAIRS_NV", GL_ACCUM_ADJACENT_PAIRS_NV},
    {"GL_ADJACENT_PAIRS_NV", GL_ADJACENT_PAIRS_NV},
    {"GL_FIRST_TO_REST_NV", GL_FIRST_TO_REST_NV},
    {"GL_PATH_GEN_MODE_NV", GL_PATH_GEN_MODE_NV},
    {"GL_PATH_GEN_COEFF_NV", GL_PATH_GEN_COEFF_NV},
    {"GL_PATH_GEN_COLOR_FORMAT_NV", GL_PATH_GEN_COLOR_FORMAT_NV},
    {"GL_PATH_GEN_COMPONENTS_NV", GL_PATH_GEN_COMPONENTS_NV},
    {"GL_PATH_DASH_OFFSET_RESET_NV", GL_PATH_DASH_OFFSET_RESET_NV},
    {"GL_MOVE_TO_RESETS_NV", GL_MOVE_TO_RESETS_NV},
    {"GL_MOVE_TO_CONTINUES_NV", GL_MOVE_TO_CONTINUES_NV},
    {"GL_PATH_STENCIL_FUNC_NV", GL_PATH_STENCIL_FUNC_NV},
    {"GL_PATH_STENCIL_REF_NV", GL_PATH_STENCIL_REF_NV},
    {"GL_PATH_STENCIL_VALUE_MASK_NV", GL_PATH_STENCIL_VALUE_MASK_NV},
    {"GL_SCALED_RESOLVE_FASTEST_EXT", GL_SCALED_RESOLVE_FASTEST_EXT},
    {"GL_SCALED_RESOLVE_NICEST_EXT", GL_SCALED_RESOLVE_NICEST_EXT},
    {"GL_MIN_MAP_BUFFER_ALIGNMENT", GL_MIN_MAP_BUFFER_ALIGNMENT},
    {"GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV", GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV},
    {"GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV", GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV},
    {"GL_PATH_COVER_DEPTH_FUNC_NV", GL_PATH_COVER_DEPTH_FUNC_NV},
    {"GL_IMAGE_FORMAT_COMPATIBILITY_TYPE", GL_IMAGE_FORMAT_COMPATIBILITY_TYPE},
    {"GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE", GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE},
    {"GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS", GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS},
    {"GL_MAX_VERTEX_IMAGE_UNIFORMS", GL_MAX_VERTEX_IMAGE_UNIFORMS},
    {"GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS", GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS},
    {"GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS", GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS},
    {"GL_MAX_GEOMETRY_IMAGE_UNIFORMS", GL_MAX_GEOMETRY_IMAGE_UNIFORMS},
    {"GL_MAX_FRAGMENT_IMAGE_UNIFORMS", GL_MAX_FRAGMENT_IMAGE_UNIFORMS},
    {"GL_MAX_COMBINED_IMAGE_UNIFORMS", GL_MAX_COMBINED_IMAGE_UNIFORMS},
    {"GL_SHADER_STORAGE_BUFFER", GL_SHADER_STORAGE_BUFFER},
    {"GL_SHADER_STORAGE_BUFFER_BINDING", GL_SHADER_STORAGE_BUFFER_BINDING},
    {"GL_SHADER_STORAGE_BUFFER_START", GL_SHADER_STORAGE_BUFFER_START},
    {"GL_SHADER_STORAGE_BUFFER_SIZE", GL_SHADER_STORAGE_BUFFER_SIZE},
    {"GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS", GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS", GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS", GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS", GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS", GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS", GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS", GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS},
    {"GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS", GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS},
    {"GL_MAX_SHADER_STORAGE_BLOCK_SIZE", GL_MAX_SHADER_STORAGE_BLOCK_SIZE},
    {"GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT", GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT},
    {"GL_SYNC_X11_FENCE_EXT", GL_SYNC_X11_FENCE_EXT},
    {"GL_DEPTH_STENCIL_TEXTURE_MODE", GL_DEPTH_STENCIL_TEXTURE_MODE},
    {"GL_MAX_COMPUTE_LOCAL_INVOCATIONS", GL_MAX_COMPUTE_LOCAL_INVOCATIONS},
    {"GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER", GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER},
    {"GL_DISPATCH_INDIRECT_BUFFER", GL_DISPATCH_INDIRECT_BUFFER},
    {"GL_DISPATCH_INDIRECT_BUFFER_BINDING", GL_DISPATCH_INDIRECT_BUFFER_BINDING},
    {"GL_TEXTURE_2D_MULTISAMPLE", GL_TEXTURE_2D_MULTISAMPLE},
    {"GL_PROXY_TEXTURE_2D_MULTISAMPLE", GL_PROXY_TEXTURE_2D_MULTISAMPLE},
    {"GL_TEXTURE_2D_MULTISAMPLE_ARRAY", GL_TEXTURE_2D_MULTISAMPLE_ARRAY},
    {"GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY", GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY},
    {"GL_TEXTURE_BINDING_2D_MULTISAMPLE", GL_TEXTURE_BINDING_2D_MULTISAMPLE},
    {"GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY", GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY},
    {"GL_TEXTURE_SAMPLES", GL_TEXTURE_SAMPLES},
    {"GL_TEXTURE_FIXED_SAMPLE_LOCATIONS", GL_TEXTURE_FIXED_SAMPLE_LOCATIONS},
    {"GL_SAMPLER_2D_MULTISAMPLE", GL_SAMPLER_2D_MULTISAMPLE},
    {"GL_INT_SAMPLER_2D_MULTISAMPLE", GL_INT_SAMPLER_2D_MULTISAMPLE},
    {"GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE", GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE},
    {"GL_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_SAMPLER_2D_MULTISAMPLE_ARRAY},
    {"GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY},
    {"GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY", GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY},
    {"GL_MAX_COLOR_TEXTURE_SAMPLES", GL_MAX_COLOR_TEXTURE_SAMPLES},
    {"GL_MAX_DEPTH_TEXTURE_SAMPLES", GL_MAX_DEPTH_TEXTURE_SAMPLES},
    {"GL_MAX_INTEGER_SAMPLES", GL_MAX_INTEGER_SAMPLES},
    {"GL_MAX_SERVER_WAIT_TIMEOUT", GL_MAX_SERVER_WAIT_TIMEOUT},
    {"GL_OBJECT_TYPE", GL_OBJECT_TYPE},
    {"GL_SYNC_CONDITION", GL_SYNC_CONDITION},
    {"GL_SYNC_STATUS", GL_SYNC_STATUS},
    {"GL_SYNC_FLAGS", GL_SYNC_FLAGS},
    {"GL_SYNC_FENCE", GL_SYNC_FENCE},
    {"GL_SYNC_GPU_COMMANDS_COMPLETE", GL_SYNC_GPU_COMMANDS_COMPLETE},
    {"GL_UNSIGNALED", GL_UNSIGNALED},
    {"GL_SIGNALED", GL_SIGNALED},
    {"GL_ALREADY_SIGNALED", GL_ALREADY_SIGNALED},
    {"GL_TIMEOUT_EXPIRED", GL_TIMEOUT_EXPIRED},
    {"GL_CONDITION_SATISFIED", GL_CONDITION_SATISFIED},
    {"GL_WAIT_FAILED", GL_WAIT_FAILED},
    {"GL_BUFFER_ACCESS_FLAGS", GL_BUFFER_ACCESS_FLAGS},
    {"GL_BUFFER_MAP_LENGTH", GL_BUFFER_MAP_LENGTH},
    {"GL_BUFFER_MAP_OFFSET", GL_BUFFER_MAP_OFFSET},
    {"GL_MAX_VERTEX_OUTPUT_COMPONENTS", GL_MAX_VERTEX_OUTPUT_COMPONENTS},
    {"GL_MAX_GEOMETRY_INPUT_COMPONENTS", GL_MAX_GEOMETRY_INPUT_COMPONENTS},
    {"GL_MAX_GEOMETRY_OUTPUT_COMPONENTS", GL_MAX_GEOMETRY_OUTPUT_COMPONENTS},
    {"GL_MAX_FRAGMENT_INPUT_COMPONENTS", GL_MAX_FRAGMENT_INPUT_COMPONENTS},
    {"GL_CONTEXT_PROFILE_MASK", GL_CONTEXT_PROFILE_MASK},
    {"GL_UNPACK_COMPRESSED_BLOCK_WIDTH", GL_UNPACK_COMPRESSED_BLOCK_WIDTH},
    {"GL_UNPACK_COMPRESSED_BLOCK_HEIGHT", GL_UNPACK_COMPRESSED_BLOCK_HEIGHT},
    {"GL_UNPACK_COMPRESSED_BLOCK_DEPTH", GL_UNPACK_COMPRESSED_BLOCK_DEPTH},
    {"GL_UNPACK_COMPRESSED_BLOCK_SIZE", GL_UNPACK_COMPRESSED_BLOCK_SIZE},
    {"GL_PACK_COMPRESSED_BLOCK_WIDTH", GL_PACK_COMPRESSED_BLOCK_WIDTH},
    {"GL_PACK_COMPRESSED_BLOCK_HEIGHT", GL_PACK_COMPRESSED_BLOCK_HEIGHT},
    {"GL_PACK_COMPRESSED_BLOCK_DEPTH", GL_PACK_COMPRESSED_BLOCK_DEPTH},
    {"GL_PACK_COMPRESSED_BLOCK_SIZE", GL_PACK_COMPRESSED_BLOCK_SIZE},
    {"GL_TEXTURE_IMMUTABLE_FORMAT", GL_TEXTURE_IMMUTABLE_FORMAT},
    {"GL_SGX_PROGRAM_BINARY_IMG", GL_SGX_PROGRAM_BINARY_IMG},
    {"GL_RENDERBUFFER_SAMPLES_IMG", GL_RENDERBUFFER_SAMPLES_IMG},
    {"GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG", GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG},
    {"GL_MAX_SAMPLES_IMG", GL_MAX_SAMPLES_IMG},
    {"GL_TEXTURE_SAMPLES_IMG", GL_TEXTURE_SAMPLES_IMG},
    {"GL_MAX_DEBUG_MESSAGE_LENGTH", GL_MAX_DEBUG_MESSAGE_LENGTH},
    {"GL_MAX_DEBUG_LOGGED_MESSAGES", GL_MAX_DEBUG_LOGGED_MESSAGES},
    {"GL_DEBUG_LOGGED_MESSAGES", GL_DEBUG_LOGGED_MESSAGES},
    {"GL_DEBUG_SEVERITY_HIGH", GL_DEBUG_SEVERITY_HIGH},
    {"GL_DEBUG_SEVERITY_MEDIUM", GL_DEBUG_SEVERITY_MEDIUM},
    {"GL_DEBUG_SEVERITY_LOW", GL_DEBUG_SEVERITY_LOW},
    {"GL_DEBUG_CATEGORY_API_ERROR_AMD", GL_DEBUG_CATEGORY_API_ERROR_AMD},
    {"GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD", GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD},
    {"GL_DEBUG_CATEGORY_DEPRECATION_AMD", GL_DEBUG_CATEGORY_DEPRECATION_AMD},
    {"GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD", GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD},
    {"GL_DEBUG_CATEGORY_PERFORMANCE_AMD", GL_DEBUG_CATEGORY_PERFORMANCE_AMD},
    {"GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD", GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD},
    {"GL_DEBUG_CATEGORY_APPLICATION_AMD", GL_DEBUG_CATEGORY_APPLICATION_AMD},
    {"GL_DEBUG_CATEGORY_OTHER_AMD", GL_DEBUG_CATEGORY_OTHER_AMD},
    {"GL_BUFFER_OBJECT_EXT", GL_BUFFER_OBJECT_EXT},
    {"GL_PERFORMANCE_MONITOR_AMD", GL_PERFORMANCE_MONITOR_AMD},
    {"GL_QUERY_OBJECT_EXT", GL_QUERY_OBJECT_EXT},
    {"GL_VERTEX_ARRAY_OBJECT_EXT", GL_VERTEX_ARRAY_OBJECT_EXT},
    {"GL_SAMPLER_OBJECT_AMD", GL_SAMPLER_OBJECT_AMD},
    {"GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD", GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD},
    {"GL_TEXTURE_BUFFER_OFFSET", GL_TEXTURE_BUFFER_OFFSET},
    {"GL_TEXTURE_BUFFER_SIZE", GL_TEXTURE_BUFFER_SIZE},
    {"GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT", GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT},
    {"GL_COMPUTE_SHADER", GL_COMPUTE_SHADER},
    {"GL_MAX_COMPUTE_UNIFORM_BLOCKS", GL_MAX_COMPUTE_UNIFORM_BLOCKS},
    {"GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS", GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS},
    {"GL_MAX_COMPUTE_IMAGE_UNIFORMS", GL_MAX_COMPUTE_IMAGE_UNIFORMS},
    {"GL_MAX_COMPUTE_WORK_GROUP_COUNT", GL_MAX_COMPUTE_WORK_GROUP_COUNT},
    {"GL_MAX_COMPUTE_WORK_GROUP_SIZE", GL_MAX_COMPUTE_WORK_GROUP_SIZE},
    {"GL_SHADER_BINARY_DMP", GL_SHADER_BINARY_DMP},
    {"GL_COMPRESSED_R11_EAC", GL_COMPRESSED_R11_EAC},
    {"GL_COMPRESSED_SIGNED_R11_EAC", GL_COMPRESSED_SIGNED_R11_EAC},
    {"GL_COMPRESSED_RG11_EAC", GL_COMPRESSED_RG11_EAC},
    {"GL_COMPRESSED_SIGNED_RG11_EAC", GL_COMPRESSED_SIGNED_RG11_EAC},
    {"GL_COMPRESSED_RGB8_ETC2", GL_COMPRESSED_RGB8_ETC2},
    {"GL_COMPRESSED_SRGB8_ETC2", GL_COMPRESSED_SRGB8_ETC2},
    {"GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2", GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2},
    {"GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2", GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2},
    {"GL_COMPRESSED_RGBA8_ETC2_EAC", GL_COMPRESSED_RGBA8_ETC2_EAC},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC", GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC},
    {"GL_ATOMIC_COUNTER_BUFFER", GL_ATOMIC_COUNTER_BUFFER},
    {"GL_ATOMIC_COUNTER_BUFFER_BINDING", GL_ATOMIC_COUNTER_BUFFER_BINDING},
    {"GL_ATOMIC_COUNTER_BUFFER_START", GL_ATOMIC_COUNTER_BUFFER_START},
    {"GL_ATOMIC_COUNTER_BUFFER_SIZE", GL_ATOMIC_COUNTER_BUFFER_SIZE},
    {"GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE", GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE},
    {"GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS", GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS},
    {"GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES", GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER},
    {"GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER", GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER},
    {"GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS", GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS", GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS", GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS", GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS", GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS", GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS},
    {"GL_MAX_VERTEX_ATOMIC_COUNTERS", GL_MAX_VERTEX_ATOMIC_COUNTERS},
    {"GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS", GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS},
    {"GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS", GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS},
    {"GL_MAX_GEOMETRY_ATOMIC_COUNTERS", GL_MAX_GEOMETRY_ATOMIC_COUNTERS},
    {"GL_MAX_FRAGMENT_ATOMIC_COUNTERS", GL_MAX_FRAGMENT_ATOMIC_COUNTERS},
    {"GL_MAX_COMBINED_ATOMIC_COUNTERS", GL_MAX_COMBINED_ATOMIC_COUNTERS},
    {"GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE", GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE},
    {"GL_ACTIVE_ATOMIC_COUNTER_BUFFERS", GL_ACTIVE_ATOMIC_COUNTER_BUFFERS},
    {"GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX", GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX},
    {"GL_UNSIGNED_INT_ATOMIC_COUNTER", GL_UNSIGNED_INT_ATOMIC_COUNTER},
    {"GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS", GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS},
    {"GL_DEBUG_OUTPUT", GL_DEBUG_OUTPUT},
    {"GL_UNIFORM", GL_UNIFORM},
    {"GL_UNIFORM_BLOCK", GL_UNIFORM_BLOCK},
    {"GL_PROGRAM_INPUT", GL_PROGRAM_INPUT},
    {"GL_PROGRAM_OUTPUT", GL_PROGRAM_OUTPUT},
    {"GL_BUFFER_VARIABLE", GL_BUFFER_VARIABLE},
    {"GL_SHADER_STORAGE_BLOCK", GL_SHADER_STORAGE_BLOCK},
    {"GL_IS_PER_PATCH", GL_IS_PER_PATCH},
    {"GL_VERTEX_SUBROUTINE", GL_VERTEX_SUBROUTINE},
    {"GL_TESS_CONTROL_SUBROUTINE", GL_TESS_CONTROL_SUBROUTINE},
    {"GL_TESS_EVALUATION_SUBROUTINE", GL_TESS_EVALUATION_SUBROUTINE},
    {"GL_GEOMETRY_SUBROUTINE", GL_GEOMETRY_SUBROUTINE},
    {"GL_FRAGMENT_SUBROUTINE", GL_FRAGMENT_SUBROUTINE},
    {"GL_COMPUTE_SUBROUTINE", GL_COMPUTE_SUBROUTINE},
    {"GL_VERTEX_SUBROUTINE_UNIFORM", GL_VERTEX_SUBROUTINE_UNIFORM},
    {"GL_TESS_CONTROL_SUBROUTINE_UNIFORM", GL_TESS_CONTROL_SUBROUTINE_UNIFORM},
    {"GL_TESS_EVALUATION_SUBROUTINE_UNIFORM", GL_TESS_EVALUATION_SUBROUTINE_UNIFORM},
    {"GL_GEOMETRY_SUBROUTINE_UNIFORM", GL_GEOMETRY_SUBROUTINE_UNIFORM},
    {"GL_FRAGMENT_SUBROUTINE_UNIFORM", GL_FRAGMENT_SUBROUTINE_UNIFORM},
    {"GL_COMPUTE_SUBROUTINE_UNIFORM", GL_COMPUTE_SUBROUTINE_UNIFORM},
    {"GL_TRANSFORM_FEEDBACK_VARYING", GL_TRANSFORM_FEEDBACK_VARYING},
    {"GL_ACTIVE_RESOURCES", GL_ACTIVE_RESOURCES},
    {"GL_MAX_NAME_LENGTH", GL_MAX_NAME_LENGTH},
    {"GL_MAX_NUM_ACTIVE_VARIABLES", GL_MAX_NUM_ACTIVE_VARIABLES},
    {"GL_MAX_NUM_COMPATIBLE_SUBROUTINES", GL_MAX_NUM_COMPATIBLE_SUBROUTINES},
    {"GL_NAME_LENGTH", GL_NAME_LENGTH},
    {"GL_TYPE", GL_TYPE},
    {"GL_ARRAY_SIZE", GL_ARRAY_SIZE},
    {"GL_OFFSET", GL_OFFSET},
    {"GL_BLOCK_INDEX", GL_BLOCK_INDEX},
    {"GL_ARRAY_STRIDE", GL_ARRAY_STRIDE},
    {"GL_MATRIX_STRIDE", GL_MATRIX_STRIDE},
    {"GL_IS_ROW_MAJOR", GL_IS_ROW_MAJOR},
    {"GL_ATOMIC_COUNTER_BUFFER_INDEX", GL_ATOMIC_COUNTER_BUFFER_INDEX},
    {"GL_BUFFER_BINDING", GL_BUFFER_BINDING},
    {"GL_BUFFER_DATA_SIZE", GL_BUFFER_DATA_SIZE},
    {"GL_NUM_ACTIVE_VARIABLES", GL_NUM_ACTIVE_VARIABLES},
    {"GL_ACTIVE_VARIABLES", GL_ACTIVE_VARIABLES},
    {"GL_REFERENCED_BY_VERTEX_SHADER", GL_REFERENCED_BY_VERTEX_SHADER},
    {"GL_REFERENCED_BY_TESS_CONTROL_SHADER", GL_REFERENCED_BY_TESS_CONTROL_SHADER},
    {"GL_REFERENCED_BY_TESS_EVALUATION_SHADER", GL_REFERENCED_BY_TESS_EVALUATION_SHADER},
    {"GL_REFERENCED_BY_GEOMETRY_SHADER", GL_REFERENCED_BY_GEOMETRY_SHADER},
    {"GL_REFERENCED_BY_FRAGMENT_SHADER", GL_REFERENCED_BY_FRAGMENT_SHADER},
    {"GL_REFERENCED_BY_COMPUTE_SHADER", GL_REFERENCED_BY_COMPUTE_SHADER},
    {"GL_TOP_LEVEL_ARRAY_SIZE", GL_TOP_LEVEL_ARRAY_SIZE},
    {"GL_TOP_LEVEL_ARRAY_STRIDE", GL_TOP_LEVEL_ARRAY_STRIDE},
    {"GL_LOCATION", GL_LOCATION},
    {"GL_LOCATION_INDEX", GL_LOCATION_INDEX},
    {"GL_FRAMEBUFFER_DEFAULT_WIDTH", GL_FRAMEBUFFER_DEFAULT_WIDTH},
    {"GL_FRAMEBUFFER_DEFAULT_HEIGHT", GL_FRAMEBUFFER_DEFAULT_HEIGHT},
    {"GL_FRAMEBUFFER_DEFAULT_LAYERS", GL_FRAMEBUFFER_DEFAULT_LAYERS},
    {"GL_FRAMEBUFFER_DEFAULT_SAMPLES", GL_FRAMEBUFFER_DEFAULT_SAMPLES},
    {"GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS", GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS},
    {"GL_MAX_FRAMEBUFFER_WIDTH", GL_MAX_FRAMEBUFFER_WIDTH},
    {"GL_MAX_FRAMEBUFFER_HEIGHT", GL_MAX_FRAMEBUFFER_HEIGHT},
    {"GL_MAX_FRAMEBUFFER_LAYERS", GL_MAX_FRAMEBUFFER_LAYERS},
    {"GL_MAX_FRAMEBUFFER_SAMPLES", GL_MAX_FRAMEBUFFER_SAMPLES},
    {"GL_NUM_SAMPLE_COUNTS", GL_NUM_SAMPLE_COUNTS},
    {"GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE", GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE},
    {"GL_TEXTURE_USAGE_ANGLE", GL_TEXTURE_USAGE_ANGLE},
    {"GL_FRAMEBUFFER_ATTACHMENT_ANGLE", GL_FRAMEBUFFER_ATTACHMENT_ANGLE},
    {"GL_PACK_REVERSE_ROW_ORDER_ANGLE", GL_PACK_REVERSE_ROW_ORDER_ANGLE},
    {"GL_COMPRESSED_RGBA_ASTC_4x4_KHR", GL_COMPRESSED_RGBA_ASTC_4x4_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_5x4_KHR", GL_COMPRESSED_RGBA_ASTC_5x4_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_5x5_KHR", GL_COMPRESSED_RGBA_ASTC_5x5_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_6x5_KHR", GL_COMPRESSED_RGBA_ASTC_6x5_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_6x6_KHR", GL_COMPRESSED_RGBA_ASTC_6x6_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_8x5_KHR", GL_COMPRESSED_RGBA_ASTC_8x5_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_8x6_KHR", GL_COMPRESSED_RGBA_ASTC_8x6_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_8x8_KHR", GL_COMPRESSED_RGBA_ASTC_8x8_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_10x5_KHR", GL_COMPRESSED_RGBA_ASTC_10x5_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_10x6_KHR", GL_COMPRESSED_RGBA_ASTC_10x6_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_10x8_KHR", GL_COMPRESSED_RGBA_ASTC_10x8_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_10x10_KHR", GL_COMPRESSED_RGBA_ASTC_10x10_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_12x10_KHR", GL_COMPRESSED_RGBA_ASTC_12x10_KHR},
    {"GL_COMPRESSED_RGBA_ASTC_12x12_KHR", GL_COMPRESSED_RGBA_ASTC_12x12_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR},
    {"GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR", GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR},
    {"GL_RESTART_PATH_NV", GL_RESTART_PATH_NV},
    {"GL_DUP_FIRST_CUBIC_CURVE_TO_NV", GL_DUP_FIRST_CUBIC_CURVE_TO_NV},
    {"GL_DUP_LAST_CUBIC_CURVE_TO_NV", GL_DUP_LAST_CUBIC_CURVE_TO_NV},
    {"GL_RECT_NV", GL_RECT_NV},
    {"GL_CIRCULAR_CCW_ARC_TO_NV", GL_CIRCULAR_CCW_ARC_TO_NV},
    {"GL_CIRCULAR_CW_ARC_TO_NV", GL_CIRCULAR_CW_ARC_TO_NV},
    {"GL_CIRCULAR_TANGENT_ARC_TO_NV", GL_CIRCULAR_TANGENT_ARC_TO_NV},
    {"GL_ARC_TO_NV", GL_ARC_TO_NV},
    {"GL_BUFFER_IMMUTABLE_STORAGE", GL_BUFFER_IMMUTABLE_STORAGE},
    {"GL_BUFFER_STORAGE_FLAGS", GL_BUFFER_STORAGE_FLAGS},
    {"GL_CLEAR_TEXTURE", GL_CLEAR_TEXTURE},
    {"GL_LOCATION_COMPONENT", GL_LOCATION_COMPONENT},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_INDEX", GL_TRANSFORM_FEEDBACK_BUFFER_INDEX},
    {"GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE", GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE},
    {"GL_QUERY_RESULT_NO_WAIT", GL_QUERY_RESULT_NO_WAIT},
    {"GL_QUERY_BUFFER", GL_QUERY_BUFFER},
    {"GL_QUERY_BUFFER_BINDING", GL_QUERY_BUFFER_BINDING},
    {"GL_MIRROR_CLAMP_TO_EDGE", GL_MIRROR_CLAMP_TO_EDGE},
    {"GL_INVALID_INDEX", GL_INVALID_INDEX},
};

static const trace::EnumSig _enumGLenum_sig = {
    1, 3231, _enumGLenum_values
};

static const trace::BitmaskFlag _bitmaskGLbitfield1_flags[] = {
    {"GL_ALL_ATTRIB_BITS", GL_ALL_ATTRIB_BITS},
    {"GL_CURRENT_BIT", GL_CURRENT_BIT},
    {"GL_POINT_BIT", GL_POINT_BIT},
    {"GL_LINE_BIT", GL_LINE_BIT},
    {"GL_POLYGON_BIT", GL_POLYGON_BIT},
    {"GL_POLYGON_STIPPLE_BIT", GL_POLYGON_STIPPLE_BIT},
    {"GL_PIXEL_MODE_BIT", GL_PIXEL_MODE_BIT},
    {"GL_LIGHTING_BIT", GL_LIGHTING_BIT},
    {"GL_FOG_BIT", GL_FOG_BIT},
    {"GL_DEPTH_BUFFER_BIT", GL_DEPTH_BUFFER_BIT},
    {"GL_ACCUM_BUFFER_BIT", GL_ACCUM_BUFFER_BIT},
    {"GL_STENCIL_BUFFER_BIT", GL_STENCIL_BUFFER_BIT},
    {"GL_VIEWPORT_BIT", GL_VIEWPORT_BIT},
    {"GL_TRANSFORM_BIT", GL_TRANSFORM_BIT},
    {"GL_ENABLE_BIT", GL_ENABLE_BIT},
    {"GL_COLOR_BUFFER_BIT", GL_COLOR_BUFFER_BIT},
    {"GL_HINT_BIT", GL_HINT_BIT},
    {"GL_EVAL_BIT", GL_EVAL_BIT},
    {"GL_LIST_BIT", GL_LIST_BIT},
    {"GL_TEXTURE_BIT", GL_TEXTURE_BIT},
    {"GL_SCISSOR_BIT", GL_SCISSOR_BIT},
    {"GL_MULTISAMPLE_BIT", GL_MULTISAMPLE_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield1_sig = {
    0, 22, _bitmaskGLbitfield1_flags
};

static const trace::EnumValue _enumGLboolean_values[] = {
    {"GL_TRUE", GL_TRUE},
    {"GL_FALSE", GL_FALSE},
};

static const trace::EnumSig _enumGLboolean_sig = {
    0, 2, _enumGLboolean_values
};

static const trace::EnumValue _enumGLenum2_values[] = {
    {"GL_NO_ERROR", GL_NO_ERROR},
    {"GL_INVALID_ENUM", GL_INVALID_ENUM},
    {"GL_INVALID_VALUE", GL_INVALID_VALUE},
    {"GL_INVALID_OPERATION", GL_INVALID_OPERATION},
    {"GL_STACK_OVERFLOW", GL_STACK_OVERFLOW},
    {"GL_STACK_UNDERFLOW", GL_STACK_UNDERFLOW},
    {"GL_OUT_OF_MEMORY", GL_OUT_OF_MEMORY},
    {"GL_INVALID_FRAMEBUFFER_OPERATION", GL_INVALID_FRAMEBUFFER_OPERATION},
    {"GL_TABLE_TOO_LARGE", GL_TABLE_TOO_LARGE},
};

static const trace::EnumSig _enumGLenum2_sig = {
    3, 9, _enumGLenum2_values
};

static const trace::EnumValue _enumGLenum1_values[] = {
    {"GL_POINTS", GL_POINTS},
    {"GL_LINES", GL_LINES},
    {"GL_LINE_LOOP", GL_LINE_LOOP},
    {"GL_LINE_STRIP", GL_LINE_STRIP},
    {"GL_TRIANGLES", GL_TRIANGLES},
    {"GL_TRIANGLE_STRIP", GL_TRIANGLE_STRIP},
    {"GL_TRIANGLE_FAN", GL_TRIANGLE_FAN},
    {"GL_QUADS", GL_QUADS},
    {"GL_QUAD_STRIP", GL_QUAD_STRIP},
    {"GL_POLYGON", GL_POLYGON},
    {"GL_LINES_ADJACENCY", GL_LINES_ADJACENCY},
    {"GL_LINE_STRIP_ADJACENCY", GL_LINE_STRIP_ADJACENCY},
    {"GL_TRIANGLES_ADJACENCY", GL_TRIANGLES_ADJACENCY},
    {"GL_TRIANGLE_STRIP_ADJACENCY", GL_TRIANGLE_STRIP_ADJACENCY},
    {"GL_PATCHES", GL_PATCHES},
};

static const trace::EnumSig _enumGLenum1_sig = {
    2, 15, _enumGLenum1_values
};

static const trace::EnumValue _enumGLint2_values[] = {
    {"GL_BGRA", GL_BGRA},
};

static const trace::EnumSig _enumGLint2_sig = {
    4, 1, _enumGLint2_values
};

static const trace::BitmaskFlag _bitmaskGLbitfield2_flags[] = {
    {"GL_CLIENT_ALL_ATTRIB_BITS", GL_CLIENT_ALL_ATTRIB_BITS},
    {"GL_CLIENT_PIXEL_STORE_BIT", GL_CLIENT_PIXEL_STORE_BIT},
    {"GL_CLIENT_VERTEX_ARRAY_BIT", GL_CLIENT_VERTEX_ARRAY_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield2_sig = {
    1, 3, _bitmaskGLbitfield2_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield4_flags[] = {
    {"GL_MAP_READ_BIT", GL_MAP_READ_BIT},
    {"GL_MAP_WRITE_BIT", GL_MAP_WRITE_BIT},
    {"GL_MAP_INVALIDATE_RANGE_BIT", GL_MAP_INVALIDATE_RANGE_BIT},
    {"GL_MAP_INVALIDATE_BUFFER_BIT", GL_MAP_INVALIDATE_BUFFER_BIT},
    {"GL_MAP_FLUSH_EXPLICIT_BIT", GL_MAP_FLUSH_EXPLICIT_BIT},
    {"GL_MAP_UNSYNCHRONIZED_BIT", GL_MAP_UNSYNCHRONIZED_BIT},
    {"GL_MAP_PERSISTENT_BIT", GL_MAP_PERSISTENT_BIT},
    {"GL_MAP_COHERENT_BIT", GL_MAP_COHERENT_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield4_sig = {
    3, 8, _bitmaskGLbitfield4_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield6_flags[] = {
    {"GL_SYNC_FLUSH_COMMANDS_BIT", GL_SYNC_FLUSH_COMMANDS_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield6_sig = {
    5, 1, _bitmaskGLbitfield6_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield3_flags[] = {
    {"GL_ALL_SHADER_BITS", GL_ALL_SHADER_BITS},
    {"GL_VERTEX_SHADER_BIT", GL_VERTEX_SHADER_BIT},
    {"GL_FRAGMENT_SHADER_BIT", GL_FRAGMENT_SHADER_BIT},
    {"GL_GEOMETRY_SHADER_BIT", GL_GEOMETRY_SHADER_BIT},
    {"GL_TESS_CONTROL_SHADER_BIT", GL_TESS_CONTROL_SHADER_BIT},
    {"GL_TESS_EVALUATION_SHADER_BIT", GL_TESS_EVALUATION_SHADER_BIT},
    {"GL_COMPUTE_SHADER_BIT", GL_COMPUTE_SHADER_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield3_sig = {
    2, 7, _bitmaskGLbitfield3_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield7_flags[] = {
    {"GL_ALL_BARRIER_BITS", GL_ALL_BARRIER_BITS},
    {"GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT", GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT},
    {"GL_ELEMENT_ARRAY_BARRIER_BIT", GL_ELEMENT_ARRAY_BARRIER_BIT},
    {"GL_UNIFORM_BARRIER_BIT", GL_UNIFORM_BARRIER_BIT},
    {"GL_TEXTURE_FETCH_BARRIER_BIT", GL_TEXTURE_FETCH_BARRIER_BIT},
    {"GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV", GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV},
    {"GL_SHADER_IMAGE_ACCESS_BARRIER_BIT", GL_SHADER_IMAGE_ACCESS_BARRIER_BIT},
    {"GL_COMMAND_BARRIER_BIT", GL_COMMAND_BARRIER_BIT},
    {"GL_PIXEL_BUFFER_BARRIER_BIT", GL_PIXEL_BUFFER_BARRIER_BIT},
    {"GL_TEXTURE_UPDATE_BARRIER_BIT", GL_TEXTURE_UPDATE_BARRIER_BIT},
    {"GL_BUFFER_UPDATE_BARRIER_BIT", GL_BUFFER_UPDATE_BARRIER_BIT},
    {"GL_FRAMEBUFFER_BARRIER_BIT", GL_FRAMEBUFFER_BARRIER_BIT},
    {"GL_TRANSFORM_FEEDBACK_BARRIER_BIT", GL_TRANSFORM_FEEDBACK_BARRIER_BIT},
    {"GL_ATOMIC_COUNTER_BARRIER_BIT", GL_ATOMIC_COUNTER_BARRIER_BIT},
    {"GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT", GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT},
    {"GL_QUERY_BUFFER_BARRIER_BIT", GL_QUERY_BUFFER_BARRIER_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield7_sig = {
    6, 16, _bitmaskGLbitfield7_flags
};

static void _write__GLuint26(int selector, GLuint const & value) {
    switch (selector) {
    default:
    case GL_TRANSFORM_FEEDBACK:
    case GL_DRAW_PIXELS_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_BUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SHADER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_VERTEX_ARRAY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_QUERY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM_PIPELINE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SAMPLER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_TEXTURE:
    case GL_TEXTURE_1D:
    case GL_TEXTURE_1D_ARRAY:
    case GL_TEXTURE_2D:
    case GL_TEXTURE_2D_MULTISAMPLE:
    case GL_TEXTURE_2D_ARRAY:
    case GL_TEXTURE_RECTANGLE:
    case GL_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_X:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_X:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Y:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Z:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:
    case GL_TEXTURE_CUBE_MAP_ARRAY:
    case GL_TEXTURE_3D:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_RENDERBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FRAMEBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_DISPLAY_LIST:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FENCE_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    }
}

static void _write__GLuint27(int selector, GLuint const & value) {
    switch (selector) {
    default:
    case GL_TRANSFORM_FEEDBACK:
    case GL_DRAW_PIXELS_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_BUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SHADER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_VERTEX_ARRAY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_QUERY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM_PIPELINE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SAMPLER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_TEXTURE:
    case GL_TEXTURE_1D:
    case GL_TEXTURE_1D_ARRAY:
    case GL_TEXTURE_2D:
    case GL_TEXTURE_2D_MULTISAMPLE:
    case GL_TEXTURE_2D_ARRAY:
    case GL_TEXTURE_RECTANGLE:
    case GL_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_X:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_X:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Y:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Z:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:
    case GL_TEXTURE_CUBE_MAP_ARRAY:
    case GL_TEXTURE_3D:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_RENDERBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FRAMEBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_DISPLAY_LIST:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FENCE_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    }
}

static const trace::BitmaskFlag _bitmaskGLbitfield5_flags[] = {
    {"GL_MAP_READ_BIT", GL_MAP_READ_BIT},
    {"GL_MAP_WRITE_BIT", GL_MAP_WRITE_BIT},
    {"GL_MAP_PERSISTENT_BIT", GL_MAP_PERSISTENT_BIT},
    {"GL_MAP_COHERENT_BIT", GL_MAP_COHERENT_BIT},
    {"GL_DYNAMIC_STORAGE_BIT", GL_DYNAMIC_STORAGE_BIT},
    {"GL_CLIENT_STORAGE_BIT", GL_CLIENT_STORAGE_BIT},
};

static const trace::BitmaskSig _bitmaskGLbitfield5_sig = {
    4, 6, _bitmaskGLbitfield5_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield9_flags[] = {
    {"GL_BOLD_BIT_NV", GL_BOLD_BIT_NV},
    {"GL_ITALIC_BIT_NV", GL_ITALIC_BIT_NV},
};

static const trace::BitmaskSig _bitmaskGLbitfield9_sig = {
    8, 2, _bitmaskGLbitfield9_flags
};

static const trace::BitmaskFlag _bitmaskGLbitfield8_flags[] = {
    {"GL_GLYPH_WIDTH_BIT_NV", GL_GLYPH_WIDTH_BIT_NV},
    {"GL_GLYPH_HEIGHT_BIT_NV", GL_GLYPH_HEIGHT_BIT_NV},
    {"GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV", GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV},
    {"GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV", GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV},
    {"GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV", GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV},
    {"GL_GLYPH_VERTICAL_BEARING_X_BIT_NV", GL_GLYPH_VERTICAL_BEARING_X_BIT_NV},
    {"GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV", GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV},
    {"GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV", GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV},
    {"GL_GLYPH_HAS_KERNING_BIT_NV", GL_GLYPH_HAS_KERNING_BIT_NV},
    {"GL_FONT_X_MIN_BOUNDS_BIT_NV", GL_FONT_X_MIN_BOUNDS_BIT_NV},
    {"GL_FONT_Y_MIN_BOUNDS_BIT_NV", GL_FONT_Y_MIN_BOUNDS_BIT_NV},
    {"GL_FONT_X_MAX_BOUNDS_BIT_NV", GL_FONT_X_MAX_BOUNDS_BIT_NV},
    {"GL_FONT_Y_MAX_BOUNDS_BIT_NV", GL_FONT_Y_MAX_BOUNDS_BIT_NV},
    {"GL_FONT_UNITS_PER_EM_BIT_NV", GL_FONT_UNITS_PER_EM_BIT_NV},
    {"GL_FONT_ASCENDER_BIT_NV", GL_FONT_ASCENDER_BIT_NV},
    {"GL_FONT_DESCENDER_BIT_NV", GL_FONT_DESCENDER_BIT_NV},
    {"GL_FONT_HEIGHT_BIT_NV", GL_FONT_HEIGHT_BIT_NV},
    {"GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV", GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV},
    {"GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV", GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV},
    {"GL_FONT_UNDERLINE_POSITION_BIT_NV", GL_FONT_UNDERLINE_POSITION_BIT_NV},
    {"GL_FONT_UNDERLINE_THICKNESS_BIT_NV", GL_FONT_UNDERLINE_THICKNESS_BIT_NV},
    {"GL_FONT_HAS_KERNING_BIT_NV", GL_FONT_HAS_KERNING_BIT_NV},
};

static const trace::BitmaskSig _bitmaskGLbitfield8_sig = {
    7, 22, _bitmaskGLbitfield8_flags
};

static void _write__GLvoid3(int selector, GLvoid * const & value) {
    switch (selector) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<GLvoid *>(value));
        break;
    case GL_COUNTER_TYPE_AMD:
    if (static_cast<GLenum *>(value)) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *static_cast<GLenum *>(value));
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
        break;
    case GL_PERCENTAGE_AMD:
    if (static_cast<float *>(value)) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*static_cast<float *>(value));
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
        break;
    case GL_COUNTER_RANGE_AMD:
    if (static_cast<float *>(value)) {
        size_t _cfloat = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cfloat);
        for (size_t _ifloat = 0; _ifloat < _cfloat; ++_ifloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((static_cast<float *>(value))[_ifloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
        break;
    }
}

static void _write__GLuint52(int selector, GLuint const & value) {
    switch (selector) {
    default:
    case GL_TRANSFORM_FEEDBACK:
    case GL_DRAW_PIXELS_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_BUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SHADER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_VERTEX_ARRAY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_QUERY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM_PIPELINE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SAMPLER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_TEXTURE:
    case GL_TEXTURE_1D:
    case GL_TEXTURE_1D_ARRAY:
    case GL_TEXTURE_2D:
    case GL_TEXTURE_2D_MULTISAMPLE:
    case GL_TEXTURE_2D_ARRAY:
    case GL_TEXTURE_RECTANGLE:
    case GL_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_X:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_X:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Y:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Z:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:
    case GL_TEXTURE_CUBE_MAP_ARRAY:
    case GL_TEXTURE_3D:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_RENDERBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FRAMEBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_DISPLAY_LIST:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FENCE_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    }
}

static void _write__GLuint53(int selector, GLuint const & value) {
    switch (selector) {
    default:
    case GL_TRANSFORM_FEEDBACK:
    case GL_DRAW_PIXELS_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_BUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SHADER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_VERTEX_ARRAY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_QUERY:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_PROGRAM_PIPELINE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_SAMPLER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_TEXTURE:
    case GL_TEXTURE_1D:
    case GL_TEXTURE_1D_ARRAY:
    case GL_TEXTURE_2D:
    case GL_TEXTURE_2D_MULTISAMPLE:
    case GL_TEXTURE_2D_ARRAY:
    case GL_TEXTURE_RECTANGLE:
    case GL_TEXTURE_CUBE_MAP:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_X:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_X:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Y:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Y:
    case GL_TEXTURE_CUBE_MAP_POSITIVE_Z:
    case GL_TEXTURE_CUBE_MAP_NEGATIVE_Z:
    case GL_TEXTURE_CUBE_MAP_ARRAY:
    case GL_TEXTURE_3D:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_RENDERBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FRAMEBUFFER:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_DISPLAY_LIST:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    case GL_FENCE_APPLE:
    trace::localWriter.writeUInt(static_cast<GLuint>(value));
        break;
    }
}


#if REGAL_SYS_OSX
static const trace::EnumValue _enumCGLError_values[] = {
    {"kCGLNoError", kCGLNoError},
    {"kCGLBadAttribute", kCGLBadAttribute},
    {"kCGLBadProperty", kCGLBadProperty},
    {"kCGLBadPixelFormat", kCGLBadPixelFormat},
    {"kCGLBadRendererInfo", kCGLBadRendererInfo},
    {"kCGLBadContext", kCGLBadContext},
    {"kCGLBadDrawable", kCGLBadDrawable},
    {"kCGLBadDisplay", kCGLBadDisplay},
    {"kCGLBadState", kCGLBadState},
    {"kCGLBadValue", kCGLBadValue},
    {"kCGLBadMatch", kCGLBadMatch},
    {"kCGLBadEnumeration", kCGLBadEnumeration},
    {"kCGLBadOffScreen", kCGLBadOffScreen},
    {"kCGLBadFullScreen", kCGLBadFullScreen},
    {"kCGLBadWindow", kCGLBadWindow},
    {"kCGLBadAddress", kCGLBadAddress},
    {"kCGLBadCodeModule", kCGLBadCodeModule},
    {"kCGLBadAlloc", kCGLBadAlloc},
    {"kCGLBadConnection", kCGLBadConnection},
};

static const trace::EnumSig _enumCGLError_sig = {
    18, 19, _enumCGLError_values
};

static const trace::EnumValue _enumCGLOpenGLProfile_values[] = {
    {"kCGLOGLPVersion_Legacy", kCGLOGLPVersion_Legacy},
    {"kCGLOGLPVersion_3_2_Core", kCGLOGLPVersion_3_2_Core},
    {"kCGLOGLPVersion_GL4_Core", kCGLOGLPVersion_GL4_Core},
};

static const trace::EnumSig _enumCGLOpenGLProfile_sig = {
    12, 3, _enumCGLOpenGLProfile_values
};

static const trace::EnumValue _enumCGLPixelFormatAttribute_values[] = {
    {"kCGLPFAAllRenderers", kCGLPFAAllRenderers},
    {"kCGLPFATripleBuffer", kCGLPFATripleBuffer},
    {"kCGLPFADoubleBuffer", kCGLPFADoubleBuffer},
    {"kCGLPFAStereo", kCGLPFAStereo},
    {"kCGLPFAColorSize", kCGLPFAColorSize},
    {"kCGLPFAAlphaSize", kCGLPFAAlphaSize},
    {"kCGLPFADepthSize", kCGLPFADepthSize},
    {"kCGLPFAStencilSize", kCGLPFAStencilSize},
    {"kCGLPFAMinimumPolicy", kCGLPFAMinimumPolicy},
    {"kCGLPFAMaximumPolicy", kCGLPFAMaximumPolicy},
    {"kCGLPFASampleBuffers", kCGLPFASampleBuffers},
    {"kCGLPFASamples", kCGLPFASamples},
    {"kCGLPFAColorFloat", kCGLPFAColorFloat},
    {"kCGLPFAMultisample", kCGLPFAMultisample},
    {"kCGLPFASupersample", kCGLPFASupersample},
    {"kCGLPFASampleAlpha", kCGLPFASampleAlpha},
    {"kCGLPFARendererID", kCGLPFARendererID},
    {"kCGLPFANoRecovery", kCGLPFANoRecovery},
    {"kCGLPFAAccelerated", kCGLPFAAccelerated},
    {"kCGLPFAClosestPolicy", kCGLPFAClosestPolicy},
    {"kCGLPFABackingStore", kCGLPFABackingStore},
    {"kCGLPFABackingVolatile", kCGLPFABackingVolatile},
    {"kCGLPFADisplayMask", kCGLPFADisplayMask},
    {"kCGLPFAAllowOfflineRenderers", kCGLPFAAllowOfflineRenderers},
    {"kCGLPFAAcceleratedCompute", kCGLPFAAcceleratedCompute},
    {"kCGLPFAOpenGLProfile", kCGLPFAOpenGLProfile},
    {"kCGLPFASupportsAutomaticGraphicsSwitching", kCGLPFASupportsAutomaticGraphicsSwitching},
    {"kCGLPFAVirtualScreenCount", kCGLPFAVirtualScreenCount},
    {"kCGLPFAAuxBuffers", kCGLPFAAuxBuffers},
    {"kCGLPFAAccumSize", kCGLPFAAccumSize},
    {"kCGLPFAAuxDepthStencil", kCGLPFAAuxDepthStencil},
    {"kCGLPFAOffScreen", kCGLPFAOffScreen},
    {"kCGLPFAWindow", kCGLPFAWindow},
    {"kCGLPFACompliant", kCGLPFACompliant},
    {"kCGLPFAPBuffer", kCGLPFAPBuffer},
    {"kCGLPFARemotePBuffer", kCGLPFARemotePBuffer},
    {"kCGLPFASingleRenderer", kCGLPFASingleRenderer},
    {"kCGLPFARobust", kCGLPFARobust},
    {"kCGLPFAMPSafe", kCGLPFAMPSafe},
    {"kCGLPFAMultiScreen", kCGLPFAMultiScreen},
    {"kCGLPFAFullScreen", kCGLPFAFullScreen},
};

static const trace::EnumSig _enumCGLPixelFormatAttribute_sig = {
    13, 41, _enumCGLPixelFormatAttribute_values
};

static const trace::EnumValue _enumCGLRendererProperty_values[] = {
    {"kCGLRPOffScreen", kCGLRPOffScreen},
    {"kCGLRPFullScreen", kCGLRPFullScreen},
    {"kCGLRPRendererID", kCGLRPRendererID},
    {"kCGLRPAccelerated", kCGLRPAccelerated},
    {"kCGLRPRobust", kCGLRPRobust},
    {"kCGLRPBackingStore", kCGLRPBackingStore},
    {"kCGLRPMPSafe", kCGLRPMPSafe},
    {"kCGLRPWindow", kCGLRPWindow},
    {"kCGLRPMultiScreen", kCGLRPMultiScreen},
    {"kCGLRPCompliant", kCGLRPCompliant},
    {"kCGLRPDisplayMask", kCGLRPDisplayMask},
    {"kCGLRPBufferModes", kCGLRPBufferModes},
    {"kCGLRPColorModes", kCGLRPColorModes},
    {"kCGLRPAccumModes", kCGLRPAccumModes},
    {"kCGLRPDepthModes", kCGLRPDepthModes},
    {"kCGLRPStencilModes", kCGLRPStencilModes},
    {"kCGLRPMaxAuxBuffers", kCGLRPMaxAuxBuffers},
    {"kCGLRPMaxSampleBuffers", kCGLRPMaxSampleBuffers},
    {"kCGLRPMaxSamples", kCGLRPMaxSamples},
    {"kCGLRPSampleModes", kCGLRPSampleModes},
    {"kCGLRPSampleAlpha", kCGLRPSampleAlpha},
    {"kCGLRPVideoMemory", kCGLRPVideoMemory},
    {"kCGLRPTextureMemory", kCGLRPTextureMemory},
    {"kCGLRPGPUVertProcCapable", kCGLRPGPUVertProcCapable},
    {"kCGLRPGPUFragProcCapable", kCGLRPGPUFragProcCapable},
    {"kCGLRPRendererCount", kCGLRPRendererCount},
    {"kCGLRPOnline", kCGLRPOnline},
    {"kCGLRPAcceleratedCompute", kCGLRPAcceleratedCompute},
    {"kCGLRPVideoMemoryMegabytes", kCGLRPVideoMemoryMegabytes},
    {"kCGLRPTextureMemoryMegabytes", kCGLRPTextureMemoryMegabytes},
    {"kCGLRPMajorGLVersion", kCGLRPMajorGLVersion},
};

static const trace::EnumSig _enumCGLRendererProperty_sig = {
    14, 31, _enumCGLRendererProperty_values
};

static const trace::EnumValue _enumCGLContextEnable_values[] = {
    {"kCGLCESwapRectangle", kCGLCESwapRectangle},
    {"kCGLCESwapLimit", kCGLCESwapLimit},
    {"kCGLCERasterization", kCGLCERasterization},
    {"kCGLCEStateValidation", kCGLCEStateValidation},
    {"kCGLCESurfaceBackingSize", kCGLCESurfaceBackingSize},
    {"kCGLCEDisplayListOptimization", kCGLCEDisplayListOptimization},
    {"kCGLCEMPEngine", kCGLCEMPEngine},
    {"kCGLCECrashOnRemovedFunctions", kCGLCECrashOnRemovedFunctions},
};

static const trace::EnumSig _enumCGLContextEnable_sig = {
    15, 8, _enumCGLContextEnable_values
};

static const trace::EnumValue _enumCGLContextParameter_values[] = {
    {"kCGLCPSwapRectangle", kCGLCPSwapRectangle},
    {"kCGLCPSwapInterval", kCGLCPSwapInterval},
    {"kCGLCPDispatchTableSize", kCGLCPDispatchTableSize},
    {"kCGLCPClientStorage", kCGLCPClientStorage},
    {"kCGLCPSurfaceTexture", kCGLCPSurfaceTexture},
    {"kCGLCPSurfaceOrder", kCGLCPSurfaceOrder},
    {"kCGLCPSurfaceOpacity", kCGLCPSurfaceOpacity},
    {"kCGLCPSurfaceBackingSize", kCGLCPSurfaceBackingSize},
    {"kCGLCPSurfaceSurfaceVolatile", kCGLCPSurfaceSurfaceVolatile},
    {"kCGLCPReclaimResources", kCGLCPReclaimResources},
    {"kCGLCPCurrentRendererID", kCGLCPCurrentRendererID},
    {"kCGLCPGPUVertexProcessing", kCGLCPGPUVertexProcessing},
    {"kCGLCPGPUFragmentProcessing", kCGLCPGPUFragmentProcessing},
    {"kCGLCPHasDrawable", kCGLCPHasDrawable},
    {"kCGLCPMPSwapsInFlight", kCGLCPMPSwapsInFlight},
};

static const trace::EnumSig _enumCGLContextParameter_sig = {
    16, 15, _enumCGLContextParameter_values
};

static const trace::EnumValue _enumCGLGlobalOption_values[] = {
    {"kCGLGOFormatCacheSize", kCGLGOFormatCacheSize},
    {"kCGLGOClearFormatCache", kCGLGOClearFormatCache},
    {"kCGLGORetainRenderers", kCGLGORetainRenderers},
    {"kCGLGOResetLibrary", kCGLGOResetLibrary},
    {"kCGLGOUseErrorHandler", kCGLGOUseErrorHandler},
    {"kCGLGOUseBuildCache", kCGLGOUseBuildCache},
};

static const trace::EnumSig _enumCGLGlobalOption_sig = {
    17, 6, _enumCGLGlobalOption_values
};

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL
static const trace::EnumValue _enumEGLenum_values[] = {
    {"EGL_SUCCESS", EGL_SUCCESS},
    {"EGL_NOT_INITIALIZED", EGL_NOT_INITIALIZED},
    {"EGL_BAD_ACCESS", EGL_BAD_ACCESS},
    {"EGL_BAD_ALLOC", EGL_BAD_ALLOC},
    {"EGL_BAD_ATTRIBUTE", EGL_BAD_ATTRIBUTE},
    {"EGL_BAD_CONFIG", EGL_BAD_CONFIG},
    {"EGL_BAD_CONTEXT", EGL_BAD_CONTEXT},
    {"EGL_BAD_CURRENT_SURFACE", EGL_BAD_CURRENT_SURFACE},
    {"EGL_BAD_DISPLAY", EGL_BAD_DISPLAY},
    {"EGL_BAD_MATCH", EGL_BAD_MATCH},
    {"EGL_BAD_NATIVE_PIXMAP", EGL_BAD_NATIVE_PIXMAP},
    {"EGL_BAD_NATIVE_WINDOW", EGL_BAD_NATIVE_WINDOW},
    {"EGL_BAD_PARAMETER", EGL_BAD_PARAMETER},
    {"EGL_BAD_SURFACE", EGL_BAD_SURFACE},
    {"EGL_CONTEXT_LOST", EGL_CONTEXT_LOST},
    {"EGL_BUFFER_SIZE", EGL_BUFFER_SIZE},
    {"EGL_ALPHA_SIZE", EGL_ALPHA_SIZE},
    {"EGL_BLUE_SIZE", EGL_BLUE_SIZE},
    {"EGL_GREEN_SIZE", EGL_GREEN_SIZE},
    {"EGL_RED_SIZE", EGL_RED_SIZE},
    {"EGL_DEPTH_SIZE", EGL_DEPTH_SIZE},
    {"EGL_STENCIL_SIZE", EGL_STENCIL_SIZE},
    {"EGL_CONFIG_CAVEAT", EGL_CONFIG_CAVEAT},
    {"EGL_CONFIG_ID", EGL_CONFIG_ID},
    {"EGL_LEVEL", EGL_LEVEL},
    {"EGL_MAX_PBUFFER_HEIGHT", EGL_MAX_PBUFFER_HEIGHT},
    {"EGL_MAX_PBUFFER_PIXELS", EGL_MAX_PBUFFER_PIXELS},
    {"EGL_MAX_PBUFFER_WIDTH", EGL_MAX_PBUFFER_WIDTH},
    {"EGL_NATIVE_RENDERABLE", EGL_NATIVE_RENDERABLE},
    {"EGL_NATIVE_VISUAL_ID", EGL_NATIVE_VISUAL_ID},
    {"EGL_NATIVE_VISUAL_TYPE", EGL_NATIVE_VISUAL_TYPE},
    {"EGL_SAMPLES", EGL_SAMPLES},
    {"EGL_SAMPLE_BUFFERS", EGL_SAMPLE_BUFFERS},
    {"EGL_SURFACE_TYPE", EGL_SURFACE_TYPE},
    {"EGL_TRANSPARENT_TYPE", EGL_TRANSPARENT_TYPE},
    {"EGL_TRANSPARENT_BLUE_VALUE", EGL_TRANSPARENT_BLUE_VALUE},
    {"EGL_TRANSPARENT_GREEN_VALUE", EGL_TRANSPARENT_GREEN_VALUE},
    {"EGL_TRANSPARENT_RED_VALUE", EGL_TRANSPARENT_RED_VALUE},
    {"EGL_NONE", EGL_NONE},
    {"EGL_BIND_TO_TEXTURE_RGB", EGL_BIND_TO_TEXTURE_RGB},
    {"EGL_BIND_TO_TEXTURE_RGBA", EGL_BIND_TO_TEXTURE_RGBA},
    {"EGL_MIN_SWAP_INTERVAL", EGL_MIN_SWAP_INTERVAL},
    {"EGL_MAX_SWAP_INTERVAL", EGL_MAX_SWAP_INTERVAL},
    {"EGL_LUMINANCE_SIZE", EGL_LUMINANCE_SIZE},
    {"EGL_ALPHA_MASK_SIZE", EGL_ALPHA_MASK_SIZE},
    {"EGL_COLOR_BUFFER_TYPE", EGL_COLOR_BUFFER_TYPE},
    {"EGL_RENDERABLE_TYPE", EGL_RENDERABLE_TYPE},
    {"EGL_MATCH_NATIVE_PIXMAP", EGL_MATCH_NATIVE_PIXMAP},
    {"EGL_CONFORMANT", EGL_CONFORMANT},
    {"EGL_MATCH_FORMAT_KHR", EGL_MATCH_FORMAT_KHR},
    {"EGL_SLOW_CONFIG", EGL_SLOW_CONFIG},
    {"EGL_NON_CONFORMANT_CONFIG", EGL_NON_CONFORMANT_CONFIG},
    {"EGL_TRANSPARENT_RGB", EGL_TRANSPARENT_RGB},
    {"EGL_VENDOR", EGL_VENDOR},
    {"EGL_VERSION", EGL_VERSION},
    {"EGL_EXTENSIONS", EGL_EXTENSIONS},
    {"EGL_HEIGHT", EGL_HEIGHT},
    {"EGL_WIDTH", EGL_WIDTH},
    {"EGL_LARGEST_PBUFFER", EGL_LARGEST_PBUFFER},
    {"EGL_DRAW", EGL_DRAW},
    {"EGL_READ", EGL_READ},
    {"EGL_CORE_NATIVE_ENGINE", EGL_CORE_NATIVE_ENGINE},
    {"EGL_NO_TEXTURE", EGL_NO_TEXTURE},
    {"EGL_TEXTURE_RGB", EGL_TEXTURE_RGB},
    {"EGL_TEXTURE_RGBA", EGL_TEXTURE_RGBA},
    {"EGL_TEXTURE_2D", EGL_TEXTURE_2D},
    {"EGL_TEXTURE_FORMAT", EGL_TEXTURE_FORMAT},
    {"EGL_TEXTURE_TARGET", EGL_TEXTURE_TARGET},
    {"EGL_MIPMAP_TEXTURE", EGL_MIPMAP_TEXTURE},
    {"EGL_MIPMAP_LEVEL", EGL_MIPMAP_LEVEL},
    {"EGL_BACK_BUFFER", EGL_BACK_BUFFER},
    {"EGL_SINGLE_BUFFER", EGL_SINGLE_BUFFER},
    {"EGL_RENDER_BUFFER", EGL_RENDER_BUFFER},
    {"EGL_VG_COLORSPACE", EGL_VG_COLORSPACE},
    {"EGL_VG_ALPHA_FORMAT", EGL_VG_ALPHA_FORMAT},
    {"EGL_VG_COLORSPACE_sRGB", EGL_VG_COLORSPACE_sRGB},
    {"EGL_VG_COLORSPACE_LINEAR", EGL_VG_COLORSPACE_LINEAR},
    {"EGL_VG_ALPHA_FORMAT_NONPRE", EGL_VG_ALPHA_FORMAT_NONPRE},
    {"EGL_VG_ALPHA_FORMAT_PRE", EGL_VG_ALPHA_FORMAT_PRE},
    {"EGL_CLIENT_APIS", EGL_CLIENT_APIS},
    {"EGL_RGB_BUFFER", EGL_RGB_BUFFER},
    {"EGL_LUMINANCE_BUFFER", EGL_LUMINANCE_BUFFER},
    {"EGL_HORIZONTAL_RESOLUTION", EGL_HORIZONTAL_RESOLUTION},
    {"EGL_VERTICAL_RESOLUTION", EGL_VERTICAL_RESOLUTION},
    {"EGL_PIXEL_ASPECT_RATIO", EGL_PIXEL_ASPECT_RATIO},
    {"EGL_SWAP_BEHAVIOR", EGL_SWAP_BEHAVIOR},
    {"EGL_BUFFER_PRESERVED", EGL_BUFFER_PRESERVED},
    {"EGL_BUFFER_DESTROYED", EGL_BUFFER_DESTROYED},
    {"EGL_OPENVG_IMAGE", EGL_OPENVG_IMAGE},
    {"EGL_CONTEXT_CLIENT_TYPE", EGL_CONTEXT_CLIENT_TYPE},
    {"EGL_CONTEXT_CLIENT_VERSION", EGL_CONTEXT_CLIENT_VERSION},
    {"EGL_MULTISAMPLE_RESOLVE", EGL_MULTISAMPLE_RESOLVE},
    {"EGL_MULTISAMPLE_RESOLVE_DEFAULT", EGL_MULTISAMPLE_RESOLVE_DEFAULT},
    {"EGL_MULTISAMPLE_RESOLVE_BOX", EGL_MULTISAMPLE_RESOLVE_BOX},
    {"EGL_OPENGL_ES_API", EGL_OPENGL_ES_API},
    {"EGL_OPENVG_API", EGL_OPENVG_API},
    {"EGL_OPENGL_API", EGL_OPENGL_API},
    {"EGL_NATIVE_PIXMAP_KHR", EGL_NATIVE_PIXMAP_KHR},
    {"EGL_GL_TEXTURE_2D_KHR", EGL_GL_TEXTURE_2D_KHR},
    {"EGL_GL_TEXTURE_3D_KHR", EGL_GL_TEXTURE_3D_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR", EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR", EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR", EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR", EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR", EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR},
    {"EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR", EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR},
    {"EGL_GL_RENDERBUFFER_KHR", EGL_GL_RENDERBUFFER_KHR},
    {"EGL_VG_PARENT_IMAGE_KHR", EGL_VG_PARENT_IMAGE_KHR},
    {"EGL_GL_TEXTURE_LEVEL_KHR", EGL_GL_TEXTURE_LEVEL_KHR},
    {"EGL_GL_TEXTURE_ZOFFSET_KHR", EGL_GL_TEXTURE_ZOFFSET_KHR},
    {"EGL_POST_SUB_BUFFER_SUPPORTED_NV", EGL_POST_SUB_BUFFER_SUPPORTED_NV},
    {"EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT", EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT},
    {"EGL_FORMAT_RGB_565_EXACT_KHR", EGL_FORMAT_RGB_565_EXACT_KHR},
    {"EGL_FORMAT_RGB_565_KHR", EGL_FORMAT_RGB_565_KHR},
    {"EGL_FORMAT_RGBA_8888_EXACT_KHR", EGL_FORMAT_RGBA_8888_EXACT_KHR},
    {"EGL_FORMAT_RGBA_8888_KHR", EGL_FORMAT_RGBA_8888_KHR},
    {"EGL_MAP_PRESERVE_PIXELS_KHR", EGL_MAP_PRESERVE_PIXELS_KHR},
    {"EGL_LOCK_USAGE_HINT_KHR", EGL_LOCK_USAGE_HINT_KHR},
    {"EGL_BITMAP_POINTER_KHR", EGL_BITMAP_POINTER_KHR},
    {"EGL_BITMAP_PITCH_KHR", EGL_BITMAP_PITCH_KHR},
    {"EGL_BITMAP_ORIGIN_KHR", EGL_BITMAP_ORIGIN_KHR},
    {"EGL_BITMAP_PIXEL_RED_OFFSET_KHR", EGL_BITMAP_PIXEL_RED_OFFSET_KHR},
    {"EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR", EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR},
    {"EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR", EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR},
    {"EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR", EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR},
    {"EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR", EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR},
    {"EGL_LOWER_LEFT_KHR", EGL_LOWER_LEFT_KHR},
    {"EGL_UPPER_LEFT_KHR", EGL_UPPER_LEFT_KHR},
    {"EGL_IMAGE_PRESERVED_KHR", EGL_IMAGE_PRESERVED_KHR},
    {"EGL_COVERAGE_BUFFERS_NV", EGL_COVERAGE_BUFFERS_NV},
    {"EGL_COVERAGE_SAMPLES_NV", EGL_COVERAGE_SAMPLES_NV},
    {"EGL_DEPTH_ENCODING_NV", EGL_DEPTH_ENCODING_NV},
    {"EGL_DEPTH_ENCODING_NONLINEAR_NV", EGL_DEPTH_ENCODING_NONLINEAR_NV},
    {"EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV", EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV},
    {"EGL_SYNC_STATUS_NV", EGL_SYNC_STATUS_NV},
    {"EGL_SIGNALED_NV", EGL_SIGNALED_NV},
    {"EGL_UNSIGNALED_NV", EGL_UNSIGNALED_NV},
    {"EGL_ALREADY_SIGNALED_NV", EGL_ALREADY_SIGNALED_NV},
    {"EGL_TIMEOUT_EXPIRED_NV", EGL_TIMEOUT_EXPIRED_NV},
    {"EGL_CONDITION_SATISFIED_NV", EGL_CONDITION_SATISFIED_NV},
    {"EGL_SYNC_TYPE_NV", EGL_SYNC_TYPE_NV},
    {"EGL_SYNC_CONDITION_NV", EGL_SYNC_CONDITION_NV},
    {"EGL_SYNC_FENCE_NV", EGL_SYNC_FENCE_NV},
    {"EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR", EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR},
    {"EGL_SYNC_STATUS_KHR", EGL_SYNC_STATUS_KHR},
    {"EGL_SIGNALED_KHR", EGL_SIGNALED_KHR},
    {"EGL_UNSIGNALED_KHR", EGL_UNSIGNALED_KHR},
    {"EGL_TIMEOUT_EXPIRED_KHR", EGL_TIMEOUT_EXPIRED_KHR},
    {"EGL_CONDITION_SATISFIED_KHR", EGL_CONDITION_SATISFIED_KHR},
    {"EGL_SYNC_TYPE_KHR", EGL_SYNC_TYPE_KHR},
    {"EGL_SYNC_CONDITION_KHR", EGL_SYNC_CONDITION_KHR},
    {"EGL_SYNC_FENCE_KHR", EGL_SYNC_FENCE_KHR},
    {"EGL_SYNC_REUSABLE_KHR", EGL_SYNC_REUSABLE_KHR},
    {"EGL_CONTEXT_MINOR_VERSION_KHR", EGL_CONTEXT_MINOR_VERSION_KHR},
    {"EGL_CONTEXT_FLAGS_KHR", EGL_CONTEXT_FLAGS_KHR},
    {"EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR", EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR},
    {"EGL_CONTEXT_PRIORITY_LEVEL_IMG", EGL_CONTEXT_PRIORITY_LEVEL_IMG},
    {"EGL_CONTEXT_PRIORITY_HIGH_IMG", EGL_CONTEXT_PRIORITY_HIGH_IMG},
    {"EGL_CONTEXT_PRIORITY_MEDIUM_IMG", EGL_CONTEXT_PRIORITY_MEDIUM_IMG},
    {"EGL_CONTEXT_PRIORITY_LOW_IMG", EGL_CONTEXT_PRIORITY_LOW_IMG},
    {"EGL_BITMAP_PIXEL_SIZE_KHR", EGL_BITMAP_PIXEL_SIZE_KHR},
    {"EGL_COVERAGE_SAMPLE_RESOLVE_NV", EGL_COVERAGE_SAMPLE_RESOLVE_NV},
    {"EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV", EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV},
    {"EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV", EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV},
    {"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT", EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT},
    {"EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR", EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR},
    {"EGL_NO_RESET_NOTIFICATION_EXT", EGL_NO_RESET_NOTIFICATION_EXT},
    {"EGL_NO_RESET_NOTIFICATION_KHR", EGL_NO_RESET_NOTIFICATION_KHR},
    {"EGL_LOSE_CONTEXT_ON_RESET_EXT", EGL_LOSE_CONTEXT_ON_RESET_EXT},
    {"EGL_LOSE_CONTEXT_ON_RESET_KHR", EGL_LOSE_CONTEXT_ON_RESET_KHR},
    {"EGL_DRM_BUFFER_FORMAT_MESA", EGL_DRM_BUFFER_FORMAT_MESA},
    {"EGL_DRM_BUFFER_USE_MESA", EGL_DRM_BUFFER_USE_MESA},
    {"EGL_DRM_BUFFER_FORMAT_ARGB32_MESA", EGL_DRM_BUFFER_FORMAT_ARGB32_MESA},
    {"EGL_DRM_BUFFER_MESA", EGL_DRM_BUFFER_MESA},
    {"EGL_DRM_BUFFER_STRIDE_MESA", EGL_DRM_BUFFER_STRIDE_MESA},
    {"EGL_STREAM_FIFO_LENGTH_KHR", EGL_STREAM_FIFO_LENGTH_KHR},
    {"EGL_STREAM_TIME_NOW_KHR", EGL_STREAM_TIME_NOW_KHR},
    {"EGL_STREAM_TIME_CONSUMER_KHR", EGL_STREAM_TIME_CONSUMER_KHR},
    {"EGL_STREAM_TIME_PRODUCER_KHR", EGL_STREAM_TIME_PRODUCER_KHR},
    {"EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE", EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE},
    {"EGL_CONSUMER_LATENCY_USEC_KHR", EGL_CONSUMER_LATENCY_USEC_KHR},
    {"EGL_PRODUCER_FRAME_KHR", EGL_PRODUCER_FRAME_KHR},
    {"EGL_CONSUMER_FRAME_KHR", EGL_CONSUMER_FRAME_KHR},
    {"EGL_STREAM_STATE_KHR", EGL_STREAM_STATE_KHR},
    {"EGL_STREAM_STATE_CREATED_KHR", EGL_STREAM_STATE_CREATED_KHR},
    {"EGL_STREAM_STATE_CONNECTING_KHR", EGL_STREAM_STATE_CONNECTING_KHR},
    {"EGL_STREAM_STATE_EMPTY_KHR", EGL_STREAM_STATE_EMPTY_KHR},
    {"EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR", EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR},
    {"EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR", EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR},
    {"EGL_STREAM_STATE_DISCONNECTED_KHR", EGL_STREAM_STATE_DISCONNECTED_KHR},
    {"EGL_BAD_STREAM_KHR", EGL_BAD_STREAM_KHR},
    {"EGL_BAD_STATE_KHR", EGL_BAD_STATE_KHR},
    {"EGL_CLIENT_PIXMAP_POINTER_HI", EGL_CLIENT_PIXMAP_POINTER_HI},
    {"EGL_COLOR_FORMAT_HI", EGL_COLOR_FORMAT_HI},
    {"EGL_COLOR_RGB_HI", EGL_COLOR_RGB_HI},
    {"EGL_COLOR_RGBA_HI", EGL_COLOR_RGBA_HI},
    {"EGL_COLOR_ARGB_HI", EGL_COLOR_ARGB_HI},
};

static const trace::EnumSig _enumEGLenum_sig = {
    19, 197, _enumEGLenum_values
};

static const trace::EnumValue _enumEGLBoolean_values[] = {
    {"EGL_FALSE", EGL_FALSE},
    {"EGL_TRUE", EGL_TRUE},
};

static const trace::EnumSig _enumEGLBoolean_sig = {
    20, 2, _enumEGLBoolean_values
};

static const trace::EnumValue _enumint34_values[] = {
    {"EGL_RGB_BUFFER", EGL_RGB_BUFFER},
    {"EGL_LUMINANCE_BUFFER", EGL_LUMINANCE_BUFFER},
};

static const trace::EnumSig _enumint34_sig = {
    25, 2, _enumint34_values
};

static const trace::EnumValue _enumint35_values[] = {
    {"EGL_DONT_CARE", EGL_DONT_CARE},
    {"EGL_NONE", EGL_NONE},
    {"EGL_SLOW_CONFIG", EGL_SLOW_CONFIG},
    {"EGL_NON_CONFORMANT_CONFIG", EGL_NON_CONFORMANT_CONFIG},
};

static const trace::EnumSig _enumint35_sig = {
    26, 4, _enumint35_values
};

static const trace::BitmaskFlag _bitmaskint29_flags[] = {
    {"EGL_OPENGL_BIT", EGL_OPENGL_BIT},
    {"EGL_OPENGL_ES_BIT", EGL_OPENGL_ES_BIT},
    {"EGL_OPENGL_ES2_BIT", EGL_OPENGL_ES2_BIT},
    {"EGL_OPENVG_BIT", EGL_OPENVG_BIT},
};

static const trace::BitmaskSig _bitmaskint29_sig = {
    17, 4, _bitmaskint29_flags
};

static const trace::EnumValue _enumint36_values[] = {
    {"EGL_DONT_CARE", EGL_DONT_CARE},
    {"EGL_TRUE", EGL_TRUE},
    {"EGL_FALSE", EGL_FALSE},
};

static const trace::EnumSig _enumint36_sig = {
    27, 3, _enumint36_values
};

static const trace::BitmaskFlag _bitmaskint28_flags[] = {
    {"EGL_MULTISAMPLE_RESOLVE_BOX_BIT", EGL_MULTISAMPLE_RESOLVE_BOX_BIT},
    {"EGL_PBUFFER_BIT", EGL_PBUFFER_BIT},
    {"EGL_PIXMAP_BIT", EGL_PIXMAP_BIT},
    {"EGL_SWAP_BEHAVIOR_PRESERVED_BIT", EGL_SWAP_BEHAVIOR_PRESERVED_BIT},
    {"EGL_VG_ALPHA_FORMAT_PRE_BIT", EGL_VG_ALPHA_FORMAT_PRE_BIT},
    {"EGL_VG_COLORSPACE_LINEAR_BIT", EGL_VG_COLORSPACE_LINEAR_BIT},
    {"EGL_WINDOW_BIT", EGL_WINDOW_BIT},
};

static const trace::BitmaskSig _bitmaskint28_sig = {
    16, 7, _bitmaskint28_flags
};

static const trace::EnumValue _enumint37_values[] = {
    {"EGL_NONE", EGL_NONE},
    {"EGL_TRANSPARENT_RGB", EGL_TRANSPARENT_RGB},
};

static const trace::EnumSig _enumint37_sig = {
    28, 2, _enumint37_values
};

static const trace::EnumValue _enumint38_values[] = {
    {"EGL_SINGLE_BUFFER", EGL_SINGLE_BUFFER},
    {"EGL_BACK_BUFFER", EGL_BACK_BUFFER},
};

static const trace::EnumSig _enumint38_sig = {
    29, 2, _enumint38_values
};

static const trace::EnumValue _enumint30_values[] = {
    {"EGL_VG_ALPHA_FORMAT_NONPRE", EGL_VG_ALPHA_FORMAT_NONPRE},
    {"EGL_VG_ALPHA_FORMAT_PRE", EGL_VG_ALPHA_FORMAT_PRE},
};

static const trace::EnumSig _enumint30_sig = {
    21, 2, _enumint30_values
};

static const trace::EnumValue _enumint31_values[] = {
    {"EGL_VG_COLORSPACE_sRGB", EGL_VG_COLORSPACE_sRGB},
    {"EGL_VG_COLORSPACE_LINEAR", EGL_VG_COLORSPACE_LINEAR},
};

static const trace::EnumSig _enumint31_sig = {
    22, 2, _enumint31_values
};

static const trace::EnumValue _enumint32_values[] = {
    {"EGL_NO_TEXTURE", EGL_NO_TEXTURE},
    {"EGL_TEXTURE_RGB", EGL_TEXTURE_RGB},
    {"EGL_TEXTURE_RGBA", EGL_TEXTURE_RGBA},
};

static const trace::EnumSig _enumint32_sig = {
    23, 3, _enumint32_values
};

static const trace::EnumValue _enumint33_values[] = {
    {"EGL_TEXTURE_2D", EGL_TEXTURE_2D},
    {"EGL_NO_TEXTURE", EGL_NO_TEXTURE},
};

static const trace::EnumSig _enumint33_sig = {
    24, 2, _enumint33_values
};

static const trace::BitmaskFlag _bitmaskint41_flags[] = {
    {"EGL_READ_SURFACE_BIT_KHR", EGL_READ_SURFACE_BIT_KHR},
    {"EGL_WRITE_SURFACE_BIT_KHR", EGL_WRITE_SURFACE_BIT_KHR},
};

static const trace::BitmaskSig _bitmaskint41_sig = {
    19, 2, _bitmaskint41_flags
};

static const trace::BitmaskFlag _bitmaskint42_flags[] = {
    {"EGL_SIGNALED_NV", EGL_SIGNALED_NV},
    {"EGL_UNSIGNALED_NV", EGL_UNSIGNALED_NV},
};

static const trace::BitmaskSig _bitmaskint42_sig = {
    20, 2, _bitmaskint42_flags
};

static const char * _structstructEGLClientPixmapHI_members[4] = {
    "pData",
    "iWidth",
    "iHeight",
    "iStride",
};
static const trace::StructSig _structstructEGLClientPixmapHI_sig = {
    1, "struct EGLClientPixmapHI", 4, _structstructEGLClientPixmapHI_members
};

static const trace::EnumValue _enumint39_values[] = {
    {"EGL_DRM_BUFFER_FORMAT_ARGB32_MESA", EGL_DRM_BUFFER_FORMAT_ARGB32_MESA},
};

static const trace::EnumSig _enumint39_sig = {
    30, 1, _enumint39_values
};

static const trace::BitmaskFlag _bitmaskint40_flags[] = {
    {"EGL_DRM_BUFFER_USE_SCANOUT_MESA", EGL_DRM_BUFFER_USE_SCANOUT_MESA},
    {"EGL_DRM_BUFFER_USE_SHARE_MESA", EGL_DRM_BUFFER_USE_SHARE_MESA},
};

static const trace::BitmaskSig _bitmaskint40_sig = {
    18, 2, _bitmaskint40_flags
};

#endif // REGAL_SYS_EGL

#if REGAL_SYS_GLX
static const char * _structXVisualInfo_members[10] = {
    "visual",
    "visualid",
    "screen",
    "depth",
    "c_class",
    "red_mask",
    "green_mask",
    "blue_mask",
    "colormap_size",
    "bits_per_rgb",
};
static const trace::StructSig _structXVisualInfo_sig = {
    0, "XVisualInfo", 10, _structXVisualInfo_members
};

static const trace::EnumValue _enumint1_values[] = {
    {"False", False},
    {"True", True},
};

static const trace::EnumSig _enumint1_sig = {
    5, 2, _enumint1_values
};

static const trace::EnumValue _enumint2_values[] = {
    {"GLX_BUFFER_SIZE", GLX_BUFFER_SIZE},
    {"GLX_LEVEL", GLX_LEVEL},
    {"GLX_RGBA", GLX_RGBA},
    {"GLX_DOUBLEBUFFER", GLX_DOUBLEBUFFER},
    {"GLX_STEREO", GLX_STEREO},
    {"GLX_AUX_BUFFERS", GLX_AUX_BUFFERS},
    {"GLX_RED_SIZE", GLX_RED_SIZE},
    {"GLX_GREEN_SIZE", GLX_GREEN_SIZE},
    {"GLX_BLUE_SIZE", GLX_BLUE_SIZE},
    {"GLX_ALPHA_SIZE", GLX_ALPHA_SIZE},
    {"GLX_DEPTH_SIZE", GLX_DEPTH_SIZE},
    {"GLX_STENCIL_SIZE", GLX_STENCIL_SIZE},
    {"GLX_ACCUM_RED_SIZE", GLX_ACCUM_RED_SIZE},
    {"GLX_ACCUM_GREEN_SIZE", GLX_ACCUM_GREEN_SIZE},
    {"GLX_ACCUM_BLUE_SIZE", GLX_ACCUM_BLUE_SIZE},
    {"GLX_ACCUM_ALPHA_SIZE", GLX_ACCUM_ALPHA_SIZE},
    {"GLX_CONFIG_CAVEAT", GLX_CONFIG_CAVEAT},
    {"GLX_X_VISUAL_TYPE", GLX_X_VISUAL_TYPE},
    {"GLX_TRANSPARENT_TYPE", GLX_TRANSPARENT_TYPE},
    {"GLX_TRANSPARENT_INDEX_VALUE", GLX_TRANSPARENT_INDEX_VALUE},
    {"GLX_TRANSPARENT_RED_VALUE", GLX_TRANSPARENT_RED_VALUE},
    {"GLX_TRANSPARENT_GREEN_VALUE", GLX_TRANSPARENT_GREEN_VALUE},
    {"GLX_TRANSPARENT_BLUE_VALUE", GLX_TRANSPARENT_BLUE_VALUE},
    {"GLX_TRANSPARENT_ALPHA_VALUE", GLX_TRANSPARENT_ALPHA_VALUE},
    {"GLX_CONTEXT_MAJOR_VERSION_ARB", GLX_CONTEXT_MAJOR_VERSION_ARB},
    {"GLX_CONTEXT_MINOR_VERSION_ARB", GLX_CONTEXT_MINOR_VERSION_ARB},
    {"GLX_CONTEXT_FLAGS_ARB", GLX_CONTEXT_FLAGS_ARB},
    {"GLX_BIND_TO_TEXTURE_RGB_EXT", GLX_BIND_TO_TEXTURE_RGB_EXT},
    {"GLX_BIND_TO_TEXTURE_RGBA_EXT", GLX_BIND_TO_TEXTURE_RGBA_EXT},
    {"GLX_BIND_TO_MIPMAP_TEXTURE_EXT", GLX_BIND_TO_MIPMAP_TEXTURE_EXT},
    {"GLX_BIND_TO_TEXTURE_TARGETS_EXT", GLX_BIND_TO_TEXTURE_TARGETS_EXT},
    {"GLX_Y_INVERTED_EXT", GLX_Y_INVERTED_EXT},
    {"GLX_TEXTURE_FORMAT_EXT", GLX_TEXTURE_FORMAT_EXT},
    {"GLX_TEXTURE_TARGET_EXT", GLX_TEXTURE_TARGET_EXT},
    {"GLX_MIPMAP_TEXTURE_EXT", GLX_MIPMAP_TEXTURE_EXT},
    {"GLX_TEXTURE_FORMAT_NONE_EXT", GLX_TEXTURE_FORMAT_NONE_EXT},
    {"GLX_TEXTURE_FORMAT_RGB_EXT", GLX_TEXTURE_FORMAT_RGB_EXT},
    {"GLX_TEXTURE_FORMAT_RGBA_EXT", GLX_TEXTURE_FORMAT_RGBA_EXT},
    {"GLX_TEXTURE_1D_EXT", GLX_TEXTURE_1D_EXT},
    {"GLX_TEXTURE_2D_EXT", GLX_TEXTURE_2D_EXT},
    {"GLX_TEXTURE_RECTANGLE_EXT", GLX_TEXTURE_RECTANGLE_EXT},
    {"GLX_FRONT_LEFT_EXT", GLX_FRONT_LEFT_EXT},
    {"GLX_FRONT_RIGHT_EXT", GLX_FRONT_RIGHT_EXT},
    {"GLX_BACK_LEFT_EXT", GLX_BACK_LEFT_EXT},
    {"GLX_BACK_RIGHT_EXT", GLX_BACK_RIGHT_EXT},
    {"GLX_AUX0_EXT", GLX_AUX0_EXT},
    {"GLX_AUX1_EXT", GLX_AUX1_EXT},
    {"GLX_AUX2_EXT", GLX_AUX2_EXT},
    {"GLX_AUX3_EXT", GLX_AUX3_EXT},
    {"GLX_AUX4_EXT", GLX_AUX4_EXT},
    {"GLX_AUX5_EXT", GLX_AUX5_EXT},
    {"GLX_AUX6_EXT", GLX_AUX6_EXT},
    {"GLX_AUX7_EXT", GLX_AUX7_EXT},
    {"GLX_AUX8_EXT", GLX_AUX8_EXT},
    {"GLX_AUX9_EXT", GLX_AUX9_EXT},
    {"GLX_NONE", GLX_NONE},
    {"GLX_SLOW_CONFIG", GLX_SLOW_CONFIG},
    {"GLX_TRUE_COLOR", GLX_TRUE_COLOR},
    {"GLX_DIRECT_COLOR", GLX_DIRECT_COLOR},
    {"GLX_PSEUDO_COLOR", GLX_PSEUDO_COLOR},
    {"GLX_STATIC_COLOR", GLX_STATIC_COLOR},
    {"GLX_GRAY_SCALE", GLX_GRAY_SCALE},
    {"GLX_STATIC_GRAY", GLX_STATIC_GRAY},
    {"GLX_TRANSPARENT_RGB", GLX_TRANSPARENT_RGB},
    {"GLX_TRANSPARENT_INDEX", GLX_TRANSPARENT_INDEX},
    {"GLX_VISUAL_ID", GLX_VISUAL_ID},
    {"GLX_SCREEN", GLX_SCREEN},
    {"GLX_NON_CONFORMANT_CONFIG", GLX_NON_CONFORMANT_CONFIG},
    {"GLX_DRAWABLE_TYPE", GLX_DRAWABLE_TYPE},
    {"GLX_RENDER_TYPE", GLX_RENDER_TYPE},
    {"GLX_X_RENDERABLE", GLX_X_RENDERABLE},
    {"GLX_FBCONFIG_ID", GLX_FBCONFIG_ID},
    {"GLX_RGBA_TYPE", GLX_RGBA_TYPE},
    {"GLX_COLOR_INDEX_TYPE", GLX_COLOR_INDEX_TYPE},
    {"GLX_MAX_PBUFFER_WIDTH", GLX_MAX_PBUFFER_WIDTH},
    {"GLX_MAX_PBUFFER_HEIGHT", GLX_MAX_PBUFFER_HEIGHT},
    {"GLX_MAX_PBUFFER_PIXELS", GLX_MAX_PBUFFER_PIXELS},
    {"GLX_PRESERVED_CONTENTS", GLX_PRESERVED_CONTENTS},
    {"GLX_LARGEST_PBUFFER", GLX_LARGEST_PBUFFER},
    {"GLX_WIDTH", GLX_WIDTH},
    {"GLX_HEIGHT", GLX_HEIGHT},
    {"GLX_EVENT_MASK", GLX_EVENT_MASK},
    {"GLX_DAMAGED", GLX_DAMAGED},
    {"GLX_SAVED", GLX_SAVED},
    {"GLX_WINDOW", GLX_WINDOW},
    {"GLX_PBUFFER", GLX_PBUFFER},
    {"GLX_PBUFFER_HEIGHT", GLX_PBUFFER_HEIGHT},
    {"GLX_PBUFFER_WIDTH", GLX_PBUFFER_WIDTH},
    {"GLX_LOSE_CONTEXT_ON_RESET_ARB", GLX_LOSE_CONTEXT_ON_RESET_ARB},
    {"GLX_NO_RESET_NOTIFICATION_ARB", GLX_NO_RESET_NOTIFICATION_ARB},
    {"GLX_CONTEXT_PROFILE_MASK_ARB", GLX_CONTEXT_PROFILE_MASK_ARB},
    {"GLX_SAMPLE_BUFFERS", GLX_SAMPLE_BUFFERS},
    {"GLX_SAMPLES", GLX_SAMPLES},
    {"GLX_DONT_CARE", GLX_DONT_CARE},
};

static const trace::EnumSig _enumint2_sig = {
    6, 94, _enumint2_values
};

static const trace::EnumValue _enumint3_values[] = {
    {"GLX_BAD_SCREEN", GLX_BAD_SCREEN},
    {"GLX_BAD_ATTRIBUTE", GLX_BAD_ATTRIBUTE},
    {"GLX_NO_EXTENSION", GLX_NO_EXTENSION},
    {"GLX_BAD_VISUAL", GLX_BAD_VISUAL},
    {"GLX_BAD_CONTEXT", GLX_BAD_CONTEXT},
    {"GLX_BAD_VALUE", GLX_BAD_VALUE},
    {"GLX_BAD_ENUM", GLX_BAD_ENUM},
};

static const trace::EnumSig _enumint3_sig = {
    7, 7, _enumint3_values
};

static const trace::EnumValue _enumint4_values[] = {
    {"GLX_VENDOR", GLX_VENDOR},
    {"GLX_VERSION", GLX_VERSION},
    {"GLX_EXTENSIONS", GLX_EXTENSIONS},
};

static const trace::EnumSig _enumint4_sig = {
    8, 3, _enumint4_values
};

static const trace::BitmaskFlag _bitmaskint8_flags[] = {
    {"GLX_RGBA_BIT", GLX_RGBA_BIT},
    {"GLX_COLOR_INDEX_BIT", GLX_COLOR_INDEX_BIT},
};

static const trace::BitmaskSig _bitmaskint8_sig = {
    11, 2, _bitmaskint8_flags
};

static const trace::BitmaskFlag _bitmaskint9_flags[] = {
    {"GLX_WINDOW_BIT", GLX_WINDOW_BIT},
    {"GLX_PIXMAP_BIT", GLX_PIXMAP_BIT},
    {"GLX_PBUFFER_BIT", GLX_PBUFFER_BIT},
};

static const trace::BitmaskSig _bitmaskint9_sig = {
    12, 3, _bitmaskint9_flags
};

static const trace::EnumValue _enumint10_values[] = {
    {"GLX_TRUE_COLOR", GLX_TRUE_COLOR},
    {"GLX_DIRECT_COLOR", GLX_DIRECT_COLOR},
    {"GLX_PSEUDO_COLOR", GLX_PSEUDO_COLOR},
    {"GLX_STATIC_COLOR", GLX_STATIC_COLOR},
};

static const trace::EnumSig _enumint10_sig = {
    9, 4, _enumint10_values
};

static const trace::EnumValue _enumint11_values[] = {
    {"GLX_NONE", GLX_NONE},
    {"GLX_SLOW_CONFIG", GLX_SLOW_CONFIG},
    {"GLX_NON_CONFORMANT_CONFIG", GLX_NON_CONFORMANT_CONFIG},
};

static const trace::EnumSig _enumint11_sig = {
    10, 3, _enumint11_values
};

static const trace::EnumValue _enumint12_values[] = {
    {"GLX_NONE", GLX_NONE},
    {"GLX_TRANSPARENT_RGB", GLX_TRANSPARENT_RGB},
    {"GLX_TRANSPARENT_INDEX", GLX_TRANSPARENT_INDEX},
};

static const trace::EnumSig _enumint12_sig = {
    11, 3, _enumint12_values
};

static const trace::BitmaskFlag _bitmaskint14_flags[] = {
    {"GLX_RGBA_BIT", GLX_RGBA_BIT},
    {"GLX_COLOR_INDEX_BIT", GLX_COLOR_INDEX_BIT},
};

static const trace::BitmaskSig _bitmaskint14_sig = {
    13, 2, _bitmaskint14_flags
};

static const trace::BitmaskFlag _bitmaskint15_flags[] = {
    {"GLX_CONTEXT_DEBUG_BIT_ARB", GLX_CONTEXT_DEBUG_BIT_ARB},
    {"GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB", GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB},
    {"GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB", GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB},
};

static const trace::BitmaskSig _bitmaskint15_sig = {
    14, 3, _bitmaskint15_flags
};

static const trace::BitmaskFlag _bitmaskint16_flags[] = {
    {"GLX_CONTEXT_CORE_PROFILE_BIT_ARB", GLX_CONTEXT_CORE_PROFILE_BIT_ARB},
    {"GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB", GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB},
};

static const trace::BitmaskSig _bitmaskint16_sig = {
    15, 2, _bitmaskint16_flags
};

#endif // REGAL_SYS_GLX

#if REGAL_SYS_WGL
static const trace::EnumValue _enumBOOL_values[] = {
    {"FALSE", FALSE},
    {"TRUE", TRUE},
};

static const trace::EnumSig _enumBOOL_sig = {
    31, 2, _enumBOOL_values
};

static const trace::BitmaskFlag _bitmaskDWORD1_flags[] = {
    {"PFD_DOUBLEBUFFER", PFD_DOUBLEBUFFER},
    {"PFD_STEREO", PFD_STEREO},
    {"PFD_DRAW_TO_WINDOW", PFD_DRAW_TO_WINDOW},
    {"PFD_DRAW_TO_BITMAP", PFD_DRAW_TO_BITMAP},
    {"PFD_SUPPORT_GDI", PFD_SUPPORT_GDI},
    {"PFD_SUPPORT_OPENGL", PFD_SUPPORT_OPENGL},
    {"PFD_GENERIC_FORMAT", PFD_GENERIC_FORMAT},
    {"PFD_NEED_PALETTE", PFD_NEED_PALETTE},
    {"PFD_NEED_SYSTEM_PALETTE", PFD_NEED_SYSTEM_PALETTE},
    {"PFD_SWAP_EXCHANGE", PFD_SWAP_EXCHANGE},
    {"PFD_SWAP_COPY", PFD_SWAP_COPY},
    {"PFD_SWAP_LAYER_BUFFERS", PFD_SWAP_LAYER_BUFFERS},
    {"PFD_GENERIC_ACCELERATED", PFD_GENERIC_ACCELERATED},
    {"PFD_SUPPORT_DIRECTDRAW", PFD_SUPPORT_DIRECTDRAW},
    {"PFD_SUPPORT_COMPOSITION", PFD_SUPPORT_COMPOSITION},
    {"PFD_DEPTH_DONTCARE", PFD_DEPTH_DONTCARE},
    {"PFD_DOUBLEBUFFER_DONTCARE", PFD_DOUBLEBUFFER_DONTCARE},
    {"PFD_STEREO_DONTCARE", PFD_STEREO_DONTCARE},
};

static const trace::BitmaskSig _bitmaskDWORD1_sig = {
    21, 18, _bitmaskDWORD1_flags
};

static const char * _structPIXELFORMATDESCRIPTOR_members[26] = {
    "nSize",
    "nVersion",
    "dwFlags",
    "iPixelType",
    "cColorBits",
    "cRedBits",
    "cRedShift",
    "cGreenBits",
    "cGreenShift",
    "cBlueBits",
    "cBlueShift",
    "cAlphaBits",
    "cAlphaShift",
    "cAccumBits",
    "cAccumRedBits",
    "cAccumGreenBits",
    "cAccumBlueBits",
    "cAccumAlphaBits",
    "cDepthBits",
    "cStencilBits",
    "cAuxBuffers",
    "iLayerType",
    "bReserved",
    "dwLayerMask",
    "dwVisibleMask",
    "dwDamageMask",
};
static const trace::StructSig _structPIXELFORMATDESCRIPTOR_sig = {
    14, "PIXELFORMATDESCRIPTOR", 26, _structPIXELFORMATDESCRIPTOR_members
};

static const char * _structLAYERPLANEDESCRIPTOR_members[24] = {
    "nSize",
    "nVersion",
    "dwFlags",
    "iPixelType",
    "cColorBits",
    "cRedBits",
    "cRedShift",
    "cGreenBits",
    "cGreenShift",
    "cBlueBits",
    "cBlueShift",
    "cAlphaBits",
    "cAlphaShift",
    "cAccumBits",
    "cAccumRedBits",
    "cAccumGreenBits",
    "cAccumBlueBits",
    "cAccumAlphaBits",
    "cDepthBits",
    "cStencilBits",
    "cAuxBuffers",
    "iLayerPlane",
    "bReserved",
    "crTransparent",
};
static const trace::StructSig _structLAYERPLANEDESCRIPTOR_sig = {
    17, "LAYERPLANEDESCRIPTOR", 24, _structLAYERPLANEDESCRIPTOR_members
};

static const char * _structWGLSWAP_members[2] = {
    "hdc",
    "uiFlags",
};
static const trace::StructSig _structWGLSWAP_sig = {
    18, "WGLSWAP", 2, _structWGLSWAP_members
};

static const char * _structPOINTFLOAT_members[2] = {
    "x",
    "y",
};
static const trace::StructSig _structPOINTFLOAT_sig = {
    15, "POINTFLOAT", 2, _structPOINTFLOAT_members
};

static const char * _structGLYPHMETRICSFLOAT_members[5] = {
    "gmfBlackBoxX",
    "gmfBlackBoxY",
    "gmfptGlyphOrigin",
    "gmfCellIncX",
    "gmfCellIncY",
};
static const trace::StructSig _structGLYPHMETRICSFLOAT_sig = {
    16, "GLYPHMETRICSFLOAT", 5, _structGLYPHMETRICSFLOAT_members
};

static const trace::EnumValue _enumint43_values[] = {
    {"WGL_NUMBER_PIXEL_FORMATS_ARB", WGL_NUMBER_PIXEL_FORMATS_ARB},
    {"WGL_DRAW_TO_WINDOW_ARB", WGL_DRAW_TO_WINDOW_ARB},
    {"WGL_DRAW_TO_BITMAP_ARB", WGL_DRAW_TO_BITMAP_ARB},
    {"WGL_ACCELERATION_ARB", WGL_ACCELERATION_ARB},
    {"WGL_NEED_PALETTE_ARB", WGL_NEED_PALETTE_ARB},
    {"WGL_NEED_SYSTEM_PALETTE_ARB", WGL_NEED_SYSTEM_PALETTE_ARB},
    {"WGL_SWAP_LAYER_BUFFERS_ARB", WGL_SWAP_LAYER_BUFFERS_ARB},
    {"WGL_SWAP_METHOD_ARB", WGL_SWAP_METHOD_ARB},
    {"WGL_NUMBER_OVERLAYS_ARB", WGL_NUMBER_OVERLAYS_ARB},
    {"WGL_NUMBER_UNDERLAYS_ARB", WGL_NUMBER_UNDERLAYS_ARB},
    {"WGL_TRANSPARENT_ARB", WGL_TRANSPARENT_ARB},
    {"WGL_TRANSPARENT_VALUE_EXT", WGL_TRANSPARENT_VALUE_EXT},
    {"WGL_SHARE_DEPTH_ARB", WGL_SHARE_DEPTH_ARB},
    {"WGL_SHARE_STENCIL_ARB", WGL_SHARE_STENCIL_ARB},
    {"WGL_SHARE_ACCUM_ARB", WGL_SHARE_ACCUM_ARB},
    {"WGL_SUPPORT_GDI_ARB", WGL_SUPPORT_GDI_ARB},
    {"WGL_SUPPORT_OPENGL_ARB", WGL_SUPPORT_OPENGL_ARB},
    {"WGL_DOUBLE_BUFFER_ARB", WGL_DOUBLE_BUFFER_ARB},
    {"WGL_STEREO_ARB", WGL_STEREO_ARB},
    {"WGL_PIXEL_TYPE_ARB", WGL_PIXEL_TYPE_ARB},
    {"WGL_COLOR_BITS_ARB", WGL_COLOR_BITS_ARB},
    {"WGL_RED_BITS_ARB", WGL_RED_BITS_ARB},
    {"WGL_RED_SHIFT_ARB", WGL_RED_SHIFT_ARB},
    {"WGL_GREEN_BITS_ARB", WGL_GREEN_BITS_ARB},
    {"WGL_GREEN_SHIFT_ARB", WGL_GREEN_SHIFT_ARB},
    {"WGL_BLUE_BITS_ARB", WGL_BLUE_BITS_ARB},
    {"WGL_BLUE_SHIFT_ARB", WGL_BLUE_SHIFT_ARB},
    {"WGL_ALPHA_BITS_ARB", WGL_ALPHA_BITS_ARB},
    {"WGL_ALPHA_SHIFT_ARB", WGL_ALPHA_SHIFT_ARB},
    {"WGL_ACCUM_BITS_ARB", WGL_ACCUM_BITS_ARB},
    {"WGL_ACCUM_RED_BITS_ARB", WGL_ACCUM_RED_BITS_ARB},
    {"WGL_ACCUM_GREEN_BITS_ARB", WGL_ACCUM_GREEN_BITS_ARB},
    {"WGL_ACCUM_BLUE_BITS_ARB", WGL_ACCUM_BLUE_BITS_ARB},
    {"WGL_ACCUM_ALPHA_BITS_ARB", WGL_ACCUM_ALPHA_BITS_ARB},
    {"WGL_DEPTH_BITS_ARB", WGL_DEPTH_BITS_ARB},
    {"WGL_STENCIL_BITS_ARB", WGL_STENCIL_BITS_ARB},
    {"WGL_AUX_BUFFERS_ARB", WGL_AUX_BUFFERS_ARB},
    {"WGL_NO_ACCELERATION_ARB", WGL_NO_ACCELERATION_ARB},
    {"WGL_GENERIC_ACCELERATION_ARB", WGL_GENERIC_ACCELERATION_ARB},
    {"WGL_FULL_ACCELERATION_ARB", WGL_FULL_ACCELERATION_ARB},
    {"WGL_SWAP_EXCHANGE_ARB", WGL_SWAP_EXCHANGE_ARB},
    {"WGL_SWAP_COPY_ARB", WGL_SWAP_COPY_ARB},
    {"WGL_SWAP_UNDEFINED_ARB", WGL_SWAP_UNDEFINED_ARB},
    {"WGL_TYPE_RGBA_ARB", WGL_TYPE_RGBA_ARB},
    {"WGL_TYPE_COLORINDEX_ARB", WGL_TYPE_COLORINDEX_ARB},
    {"WGL_DRAW_TO_PBUFFER_ARB", WGL_DRAW_TO_PBUFFER_ARB},
    {"WGL_MAX_PBUFFER_PIXELS_ARB", WGL_MAX_PBUFFER_PIXELS_ARB},
    {"WGL_MAX_PBUFFER_WIDTH_ARB", WGL_MAX_PBUFFER_WIDTH_ARB},
    {"WGL_MAX_PBUFFER_HEIGHT_ARB", WGL_MAX_PBUFFER_HEIGHT_ARB},
    {"WGL_OPTIMAL_PBUFFER_WIDTH_EXT", WGL_OPTIMAL_PBUFFER_WIDTH_EXT},
    {"WGL_OPTIMAL_PBUFFER_HEIGHT_EXT", WGL_OPTIMAL_PBUFFER_HEIGHT_EXT},
    {"WGL_PBUFFER_LARGEST_ARB", WGL_PBUFFER_LARGEST_ARB},
    {"WGL_PBUFFER_WIDTH_ARB", WGL_PBUFFER_WIDTH_ARB},
    {"WGL_PBUFFER_HEIGHT_ARB", WGL_PBUFFER_HEIGHT_ARB},
    {"WGL_PBUFFER_LOST_ARB", WGL_PBUFFER_LOST_ARB},
    {"WGL_TRANSPARENT_RED_VALUE_ARB", WGL_TRANSPARENT_RED_VALUE_ARB},
    {"WGL_TRANSPARENT_GREEN_VALUE_ARB", WGL_TRANSPARENT_GREEN_VALUE_ARB},
    {"WGL_TRANSPARENT_BLUE_VALUE_ARB", WGL_TRANSPARENT_BLUE_VALUE_ARB},
    {"WGL_TRANSPARENT_ALPHA_VALUE_ARB", WGL_TRANSPARENT_ALPHA_VALUE_ARB},
    {"WGL_TRANSPARENT_INDEX_VALUE_ARB", WGL_TRANSPARENT_INDEX_VALUE_ARB},
    {"WGL_DEPTH_FLOAT_EXT", WGL_DEPTH_FLOAT_EXT},
    {"WGL_SAMPLE_BUFFERS_ARB", WGL_SAMPLE_BUFFERS_ARB},
    {"WGL_SAMPLES_ARB", WGL_SAMPLES_ARB},
    {"WGL_GENLOCK_SOURCE_MULTIVIEW_I3D", WGL_GENLOCK_SOURCE_MULTIVIEW_I3D},
    {"WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D", WGL_GENLOCK_SOURCE_EXTENAL_SYNC_I3D},
    {"WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D", WGL_GENLOCK_SOURCE_EXTENAL_FIELD_I3D},
    {"WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D", WGL_GENLOCK_SOURCE_EXTENAL_TTL_I3D},
    {"WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D", WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D},
    {"WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D", WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D},
    {"WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D", WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D},
    {"WGL_GENLOCK_SOURCE_EDGE_RISING_I3D", WGL_GENLOCK_SOURCE_EDGE_RISING_I3D},
    {"WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D", WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D},
    {"WGL_GAMMA_TABLE_SIZE_I3D", WGL_GAMMA_TABLE_SIZE_I3D},
    {"WGL_GAMMA_EXCLUDE_DESKTOP_I3D", WGL_GAMMA_EXCLUDE_DESKTOP_I3D},
    {"WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D", WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D},
    {"WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D", WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D},
    {"WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D", WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D},
    {"WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D", WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D},
    {"WGL_STEREO_EMITTER_ENABLE_3DL", WGL_STEREO_EMITTER_ENABLE_3DL},
    {"WGL_STEREO_EMITTER_DISABLE_3DL", WGL_STEREO_EMITTER_DISABLE_3DL},
    {"WGL_STEREO_POLARITY_NORMAL_3DL", WGL_STEREO_POLARITY_NORMAL_3DL},
    {"WGL_STEREO_POLARITY_INVERT_3DL", WGL_STEREO_POLARITY_INVERT_3DL},
    {"WGL_SAMPLE_BUFFERS_3DFX", WGL_SAMPLE_BUFFERS_3DFX},
    {"WGL_SAMPLES_3DFX", WGL_SAMPLES_3DFX},
    {"WGL_BIND_TO_TEXTURE_RGB_ARB", WGL_BIND_TO_TEXTURE_RGB_ARB},
    {"WGL_BIND_TO_TEXTURE_RGBA_ARB", WGL_BIND_TO_TEXTURE_RGBA_ARB},
    {"WGL_TEXTURE_FORMAT_ARB", WGL_TEXTURE_FORMAT_ARB},
    {"WGL_TEXTURE_TARGET_ARB", WGL_TEXTURE_TARGET_ARB},
    {"WGL_MIPMAP_TEXTURE_ARB", WGL_MIPMAP_TEXTURE_ARB},
    {"WGL_TEXTURE_RGB_ARB", WGL_TEXTURE_RGB_ARB},
    {"WGL_TEXTURE_RGBA_ARB", WGL_TEXTURE_RGBA_ARB},
    {"WGL_NO_TEXTURE_ARB", WGL_NO_TEXTURE_ARB},
    {"WGL_TEXTURE_CUBE_MAP_ARB", WGL_TEXTURE_CUBE_MAP_ARB},
    {"WGL_TEXTURE_1D_ARB", WGL_TEXTURE_1D_ARB},
    {"WGL_TEXTURE_2D_ARB", WGL_TEXTURE_2D_ARB},
    {"WGL_MIPMAP_LEVEL_ARB", WGL_MIPMAP_LEVEL_ARB},
    {"WGL_CUBE_MAP_FACE_ARB", WGL_CUBE_MAP_FACE_ARB},
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB},
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB},
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB},
    {"WGL_FRONT_LEFT_ARB", WGL_FRONT_LEFT_ARB},
    {"WGL_FRONT_RIGHT_ARB", WGL_FRONT_RIGHT_ARB},
    {"WGL_BACK_LEFT_ARB", WGL_BACK_LEFT_ARB},
    {"WGL_BACK_RIGHT_ARB", WGL_BACK_RIGHT_ARB},
    {"WGL_AUX0_ARB", WGL_AUX0_ARB},
    {"WGL_AUX1_ARB", WGL_AUX1_ARB},
    {"WGL_AUX2_ARB", WGL_AUX2_ARB},
    {"WGL_AUX3_ARB", WGL_AUX3_ARB},
    {"WGL_AUX4_ARB", WGL_AUX4_ARB},
    {"WGL_AUX5_ARB", WGL_AUX5_ARB},
    {"WGL_AUX6_ARB", WGL_AUX6_ARB},
    {"WGL_AUX7_ARB", WGL_AUX7_ARB},
    {"WGL_AUX8_ARB", WGL_AUX8_ARB},
    {"WGL_AUX9_ARB", WGL_AUX9_ARB},
    {"WGL_CONTEXT_MAJOR_VERSION_ARB", WGL_CONTEXT_MAJOR_VERSION_ARB},
    {"WGL_CONTEXT_MINOR_VERSION_ARB", WGL_CONTEXT_MINOR_VERSION_ARB},
    {"WGL_CONTEXT_LAYER_PLANE_ARB", WGL_CONTEXT_LAYER_PLANE_ARB},
    {"WGL_CONTEXT_FLAGS_ARB", WGL_CONTEXT_FLAGS_ARB},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_RGB_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_RGBA_NV},
    {"WGL_TEXTURE_RECTANGLE_NV", WGL_TEXTURE_RECTANGLE_NV},
    {"WGL_BIND_TO_TEXTURE_DEPTH_NV", WGL_BIND_TO_TEXTURE_DEPTH_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_DEPTH_NV},
    {"WGL_DEPTH_TEXTURE_FORMAT_NV", WGL_DEPTH_TEXTURE_FORMAT_NV},
    {"WGL_TEXTURE_DEPTH_COMPONENT_NV", WGL_TEXTURE_DEPTH_COMPONENT_NV},
    {"WGL_DEPTH_COMPONENT_NV", WGL_DEPTH_COMPONENT_NV},
    {"WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT", WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT},
    {"WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB", WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB},
    {"WGL_FLOAT_COMPONENTS_NV", WGL_FLOAT_COMPONENTS_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV},
    {"WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV", WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV},
    {"WGL_TEXTURE_FLOAT_R_NV", WGL_TEXTURE_FLOAT_R_NV},
    {"WGL_TEXTURE_FLOAT_RG_NV", WGL_TEXTURE_FLOAT_RG_NV},
    {"WGL_TEXTURE_FLOAT_RGB_NV", WGL_TEXTURE_FLOAT_RGB_NV},
    {"WGL_TEXTURE_FLOAT_RGBA_NV", WGL_TEXTURE_FLOAT_RGBA_NV},
    {"WGL_COLOR_SAMPLES_NV", WGL_COLOR_SAMPLES_NV},
    {"WGL_BIND_TO_VIDEO_RGB_NV", WGL_BIND_TO_VIDEO_RGB_NV},
    {"WGL_BIND_TO_VIDEO_RGBA_NV", WGL_BIND_TO_VIDEO_RGBA_NV},
    {"WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV", WGL_BIND_TO_VIDEO_RGB_AND_DEPTH_NV},
    {"WGL_VIDEO_OUT_COLOR_NV", WGL_VIDEO_OUT_COLOR_NV},
    {"WGL_VIDEO_OUT_ALPHA_NV", WGL_VIDEO_OUT_ALPHA_NV},
    {"WGL_VIDEO_OUT_DEPTH_NV", WGL_VIDEO_OUT_DEPTH_NV},
    {"WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV", WGL_VIDEO_OUT_COLOR_AND_ALPHA_NV},
    {"WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV", WGL_VIDEO_OUT_COLOR_AND_DEPTH_NV},
    {"WGL_VIDEO_OUT_FRAME", WGL_VIDEO_OUT_FRAME},
    {"WGL_VIDEO_OUT_FIELD_1", WGL_VIDEO_OUT_FIELD_1},
    {"WGL_VIDEO_OUT_FIELD_2", WGL_VIDEO_OUT_FIELD_2},
    {"WGL_VIDEO_OUT_STACKED_FIELDS_1_2", WGL_VIDEO_OUT_STACKED_FIELDS_1_2},
    {"WGL_VIDEO_OUT_STACKED_FIELDS_2_1", WGL_VIDEO_OUT_STACKED_FIELDS_2_1},
    {"WGL_UNIQUE_ID_NV", WGL_UNIQUE_ID_NV},
    {"WGL_NUM_VIDEO_CAPTURE_SLOTS_NV", WGL_NUM_VIDEO_CAPTURE_SLOTS_NV},
    {"WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV", WGL_ERROR_INCOMPATIBLE_AFFINITY_MASKS_NV},
    {"WGL_ERROR_MISSING_AFFINITY_MASK_NV", WGL_ERROR_MISSING_AFFINITY_MASK_NV},
    {"WGL_NUM_VIDEO_SLOTS_NV", WGL_NUM_VIDEO_SLOTS_NV},
    {"WGL_TYPE_RGBA_FLOAT_ARB", WGL_TYPE_RGBA_FLOAT_ARB},
    {"WGL_GPU_FASTEST_TARGET_GPUS_AMD", WGL_GPU_FASTEST_TARGET_GPUS_AMD},
    {"WGL_GPU_RAM_AMD", WGL_GPU_RAM_AMD},
    {"WGL_GPU_CLOCK_AMD", WGL_GPU_CLOCK_AMD},
    {"WGL_GPU_NUM_PIPES_AMD", WGL_GPU_NUM_PIPES_AMD},
    {"WGL_GPU_NUM_SIMD_AMD", WGL_GPU_NUM_SIMD_AMD},
    {"WGL_GPU_NUM_RB_AMD", WGL_GPU_NUM_RB_AMD},
    {"WGL_GPU_NUM_SPI_AMD", WGL_GPU_NUM_SPI_AMD},
};

static const trace::EnumSig _enumint43_sig = {
    33, 167, _enumint43_values
};

static const trace::EnumValue _enumint46_values[] = {
    {"WGL_NO_ACCELERATION_ARB", WGL_NO_ACCELERATION_ARB},
    {"WGL_GENERIC_ACCELERATION_ARB", WGL_GENERIC_ACCELERATION_ARB},
    {"WGL_FULL_ACCELERATION_ARB", WGL_FULL_ACCELERATION_ARB},
};

static const trace::EnumSig _enumint46_sig = {
    34, 3, _enumint46_values
};

static const trace::EnumValue _enumint47_values[] = {
    {"WGL_SWAP_EXCHANGE_ARB", WGL_SWAP_EXCHANGE_ARB},
    {"WGL_SWAP_COPY_ARB", WGL_SWAP_COPY_ARB},
    {"WGL_SWAP_UNDEFINED_ARB", WGL_SWAP_UNDEFINED_ARB},
};

static const trace::EnumSig _enumint47_sig = {
    35, 3, _enumint47_values
};

static const trace::EnumValue _enumint48_values[] = {
    {"WGL_TYPE_RGBA_ARB", WGL_TYPE_RGBA_ARB},
    {"WGL_TYPE_COLORINDEX_ARB", WGL_TYPE_COLORINDEX_ARB},
};

static const trace::EnumSig _enumint48_sig = {
    36, 2, _enumint48_values
};

static const trace::EnumValue _enumint49_values[] = {
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB},
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB},
    {"WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB", WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB},
    {"WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB", WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB},
};

static const trace::EnumSig _enumint49_sig = {
    37, 6, _enumint49_values
};

static const trace::BitmaskFlag _bitmaskint44_flags[] = {
    {"WGL_CONTEXT_DEBUG_BIT_ARB", WGL_CONTEXT_DEBUG_BIT_ARB},
    {"WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB", WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB},
};

static const trace::BitmaskSig _bitmaskint44_sig = {
    22, 2, _bitmaskint44_flags
};

static const trace::BitmaskFlag _bitmaskint45_flags[] = {
    {"WGL_CONTEXT_CORE_PROFILE_BIT_ARB", WGL_CONTEXT_CORE_PROFILE_BIT_ARB},
    {"WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB", WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB},
};

static const trace::BitmaskSig _bitmaskint45_sig = {
    23, 2, _bitmaskint45_flags
};

static const char * _structRECT_members[4] = {
    "left",
    "top",
    "right",
    "bottom",
};
static const trace::StructSig _structRECT_sig = {
    7, "RECT", 4, _structRECT_members
};

static const char * _structGPU_DEVICE_members[5] = {
    "cb",
    "DeviceName",
    "DeviceString",
    "Flags",
    "rcVirtualScreen",
};
static const trace::StructSig _structGPU_DEVICE_sig = {
    19, "GPU_DEVICE", 5, _structGPU_DEVICE_members
};

#endif // REGAL_SYS_WGL

static const char * _glCullFace_args[1] = {"mode"};
static const trace::FunctionSig _glCullFace_sig = {4, "glCullFace", 1, _glCullFace_args};

static const char * _glFrontFace_args[1] = {"mode"};
static const trace::FunctionSig _glFrontFace_sig = {5, "glFrontFace", 1, _glFrontFace_args};

static const char * _glHint_args[2] = {"target", "mode"};
static const trace::FunctionSig _glHint_sig = {6, "glHint", 2, _glHint_args};

static const char * _glLineWidth_args[1] = {"width"};
static const trace::FunctionSig _glLineWidth_sig = {7, "glLineWidth", 1, _glLineWidth_args};

static const char * _glPointSize_args[1] = {"size"};
static const trace::FunctionSig _glPointSize_sig = {8, "glPointSize", 1, _glPointSize_args};

static const char * _glPolygonMode_args[2] = {"face", "mode"};
static const trace::FunctionSig _glPolygonMode_sig = {9, "glPolygonMode", 2, _glPolygonMode_args};

static const char * _glScissor_args[4] = {"x", "y", "width", "height"};
static const trace::FunctionSig _glScissor_sig = {10, "glScissor", 4, _glScissor_args};

static const char * _glTexParameterf_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexParameterf_sig = {11, "glTexParameterf", 3, _glTexParameterf_args};

static const char * _glTexParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterfv_sig = {12, "glTexParameterfv", 3, _glTexParameterfv_args};

static const char * _glTexParameteri_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexParameteri_sig = {13, "glTexParameteri", 3, _glTexParameteri_args};

static const char * _glTexParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameteriv_sig = {14, "glTexParameteriv", 3, _glTexParameteriv_args};

static const char * _glTexImage1D_args[8] = {"target", "level", "internalformat", "width", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage1D_sig = {15, "glTexImage1D", 8, _glTexImage1D_args};

static const char * _glTexImage2D_args[9] = {"target", "level", "internalformat", "width", "height", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage2D_sig = {16, "glTexImage2D", 9, _glTexImage2D_args};

static const char * _glDrawBuffer_args[1] = {"mode"};
static const trace::FunctionSig _glDrawBuffer_sig = {17, "glDrawBuffer", 1, _glDrawBuffer_args};

static const char * _glClear_args[1] = {"mask"};
static const trace::FunctionSig _glClear_sig = {18, "glClear", 1, _glClear_args};

static const char * _glClearColor_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glClearColor_sig = {19, "glClearColor", 4, _glClearColor_args};

static const char * _glClearStencil_args[1] = {"s"};
static const trace::FunctionSig _glClearStencil_sig = {20, "glClearStencil", 1, _glClearStencil_args};

static const char * _glClearDepth_args[1] = {"depth"};
static const trace::FunctionSig _glClearDepth_sig = {21, "glClearDepth", 1, _glClearDepth_args};

static const char * _glStencilMask_args[1] = {"mask"};
static const trace::FunctionSig _glStencilMask_sig = {22, "glStencilMask", 1, _glStencilMask_args};

static const char * _glColorMask_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColorMask_sig = {23, "glColorMask", 4, _glColorMask_args};

static const char * _glDepthMask_args[1] = {"flag"};
static const trace::FunctionSig _glDepthMask_sig = {24, "glDepthMask", 1, _glDepthMask_args};

static const char * _glDisable_args[1] = {"cap"};
static const trace::FunctionSig _glDisable_sig = {25, "glDisable", 1, _glDisable_args};

static const char * _glEnable_args[1] = {"cap"};
static const trace::FunctionSig _glEnable_sig = {26, "glEnable", 1, _glEnable_args};

static const char ** _glFinish_args = NULL;
static const trace::FunctionSig _glFinish_sig = {27, "glFinish", 0, _glFinish_args};

static const char ** _glFlush_args = NULL;
static const trace::FunctionSig _glFlush_sig = {28, "glFlush", 0, _glFlush_args};

static const char * _glBlendFunc_args[2] = {"sfactor", "dfactor"};
static const trace::FunctionSig _glBlendFunc_sig = {29, "glBlendFunc", 2, _glBlendFunc_args};

static const char * _glLogicOp_args[1] = {"opcode"};
static const trace::FunctionSig _glLogicOp_sig = {30, "glLogicOp", 1, _glLogicOp_args};

static const char * _glStencilFunc_args[3] = {"func", "ref", "mask"};
static const trace::FunctionSig _glStencilFunc_sig = {31, "glStencilFunc", 3, _glStencilFunc_args};

static const char * _glStencilOp_args[3] = {"fail", "zfail", "zpass"};
static const trace::FunctionSig _glStencilOp_sig = {32, "glStencilOp", 3, _glStencilOp_args};

static const char * _glDepthFunc_args[1] = {"func"};
static const trace::FunctionSig _glDepthFunc_sig = {33, "glDepthFunc", 1, _glDepthFunc_args};

static const char * _glPixelStoref_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelStoref_sig = {34, "glPixelStoref", 2, _glPixelStoref_args};

static const char * _glPixelStorei_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelStorei_sig = {35, "glPixelStorei", 2, _glPixelStorei_args};

static const char * _glReadBuffer_args[1] = {"mode"};
static const trace::FunctionSig _glReadBuffer_sig = {36, "glReadBuffer", 1, _glReadBuffer_args};

static const char * _glReadPixels_args[7] = {"x", "y", "width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glReadPixels_sig = {37, "glReadPixels", 7, _glReadPixels_args};

static const char * _glGetBooleanv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetBooleanv_sig = {38, "glGetBooleanv", 2, _glGetBooleanv_args};

static const char * _glGetDoublev_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetDoublev_sig = {39, "glGetDoublev", 2, _glGetDoublev_args};

static const char ** _glGetError_args = NULL;
static const trace::FunctionSig _glGetError_sig = {40, "glGetError", 0, _glGetError_args};

static const char * _glGetFloatv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetFloatv_sig = {41, "glGetFloatv", 2, _glGetFloatv_args};

static const char * _glGetIntegerv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetIntegerv_sig = {42, "glGetIntegerv", 2, _glGetIntegerv_args};

static const char * _glGetString_args[1] = {"name"};
static const trace::FunctionSig _glGetString_sig = {43, "glGetString", 1, _glGetString_args};

static const char * _glGetTexImage_args[5] = {"target", "level", "format", "type", "pixels"};
static const trace::FunctionSig _glGetTexImage_sig = {44, "glGetTexImage", 5, _glGetTexImage_args};

static const char * _glGetTexParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterfv_sig = {45, "glGetTexParameterfv", 3, _glGetTexParameterfv_args};

static const char * _glGetTexParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameteriv_sig = {46, "glGetTexParameteriv", 3, _glGetTexParameteriv_args};

static const char * _glGetTexLevelParameterfv_args[4] = {"target", "level", "pname", "params"};
static const trace::FunctionSig _glGetTexLevelParameterfv_sig = {47, "glGetTexLevelParameterfv", 4, _glGetTexLevelParameterfv_args};

static const char * _glGetTexLevelParameteriv_args[4] = {"target", "level", "pname", "params"};
static const trace::FunctionSig _glGetTexLevelParameteriv_sig = {48, "glGetTexLevelParameteriv", 4, _glGetTexLevelParameteriv_args};

static const char * _glIsEnabled_args[1] = {"cap"};
static const trace::FunctionSig _glIsEnabled_sig = {49, "glIsEnabled", 1, _glIsEnabled_args};

static const char * _glDepthRange_args[2] = {"zNear", "zFar"};
static const trace::FunctionSig _glDepthRange_sig = {50, "glDepthRange", 2, _glDepthRange_args};

static const char * _glViewport_args[4] = {"x", "y", "width", "height"};
static const trace::FunctionSig _glViewport_sig = {51, "glViewport", 4, _glViewport_args};

static const char * _glNewList_args[2] = {"list", "mode"};
static const trace::FunctionSig _glNewList_sig = {52, "glNewList", 2, _glNewList_args};

static const char ** _glEndList_args = NULL;
static const trace::FunctionSig _glEndList_sig = {53, "glEndList", 0, _glEndList_args};

static const char * _glCallList_args[1] = {"list"};
static const trace::FunctionSig _glCallList_sig = {54, "glCallList", 1, _glCallList_args};

static const char * _glCallLists_args[3] = {"n", "type", "lists"};
static const trace::FunctionSig _glCallLists_sig = {55, "glCallLists", 3, _glCallLists_args};

static const char * _glDeleteLists_args[2] = {"list", "range"};
static const trace::FunctionSig _glDeleteLists_sig = {56, "glDeleteLists", 2, _glDeleteLists_args};

static const char * _glGenLists_args[1] = {"range"};
static const trace::FunctionSig _glGenLists_sig = {57, "glGenLists", 1, _glGenLists_args};

static const char * _glListBase_args[1] = {"base"};
static const trace::FunctionSig _glListBase_sig = {58, "glListBase", 1, _glListBase_args};

static const char * _glBegin_args[1] = {"mode"};
static const trace::FunctionSig _glBegin_sig = {59, "glBegin", 1, _glBegin_args};

static const char * _glBitmap_args[7] = {"width", "height", "xorig", "yorig", "xmove", "ymove", "bitmap"};
static const trace::FunctionSig _glBitmap_sig = {60, "glBitmap", 7, _glBitmap_args};

static const char * _glColor3b_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3b_sig = {61, "glColor3b", 3, _glColor3b_args};

static const char * _glColor3bv_args[1] = {"v"};
static const trace::FunctionSig _glColor3bv_sig = {62, "glColor3bv", 1, _glColor3bv_args};

static const char * _glColor3d_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3d_sig = {63, "glColor3d", 3, _glColor3d_args};

static const char * _glColor3dv_args[1] = {"v"};
static const trace::FunctionSig _glColor3dv_sig = {64, "glColor3dv", 1, _glColor3dv_args};

static const char * _glColor3f_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3f_sig = {65, "glColor3f", 3, _glColor3f_args};

static const char * _glColor3fv_args[1] = {"v"};
static const trace::FunctionSig _glColor3fv_sig = {66, "glColor3fv", 1, _glColor3fv_args};

static const char * _glColor3i_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3i_sig = {67, "glColor3i", 3, _glColor3i_args};

static const char * _glColor3iv_args[1] = {"v"};
static const trace::FunctionSig _glColor3iv_sig = {68, "glColor3iv", 1, _glColor3iv_args};

static const char * _glColor3s_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3s_sig = {69, "glColor3s", 3, _glColor3s_args};

static const char * _glColor3sv_args[1] = {"v"};
static const trace::FunctionSig _glColor3sv_sig = {70, "glColor3sv", 1, _glColor3sv_args};

static const char * _glColor3ub_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3ub_sig = {71, "glColor3ub", 3, _glColor3ub_args};

static const char * _glColor3ubv_args[1] = {"v"};
static const trace::FunctionSig _glColor3ubv_sig = {72, "glColor3ubv", 1, _glColor3ubv_args};

static const char * _glColor3ui_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3ui_sig = {73, "glColor3ui", 3, _glColor3ui_args};

static const char * _glColor3uiv_args[1] = {"v"};
static const trace::FunctionSig _glColor3uiv_sig = {74, "glColor3uiv", 1, _glColor3uiv_args};

static const char * _glColor3us_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3us_sig = {75, "glColor3us", 3, _glColor3us_args};

static const char * _glColor3usv_args[1] = {"v"};
static const trace::FunctionSig _glColor3usv_sig = {76, "glColor3usv", 1, _glColor3usv_args};

static const char * _glColor4b_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4b_sig = {77, "glColor4b", 4, _glColor4b_args};

static const char * _glColor4bv_args[1] = {"v"};
static const trace::FunctionSig _glColor4bv_sig = {78, "glColor4bv", 1, _glColor4bv_args};

static const char * _glColor4d_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4d_sig = {79, "glColor4d", 4, _glColor4d_args};

static const char * _glColor4dv_args[1] = {"v"};
static const trace::FunctionSig _glColor4dv_sig = {80, "glColor4dv", 1, _glColor4dv_args};

static const char * _glColor4f_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4f_sig = {81, "glColor4f", 4, _glColor4f_args};

static const char * _glColor4fv_args[1] = {"v"};
static const trace::FunctionSig _glColor4fv_sig = {82, "glColor4fv", 1, _glColor4fv_args};

static const char * _glColor4i_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4i_sig = {83, "glColor4i", 4, _glColor4i_args};

static const char * _glColor4iv_args[1] = {"v"};
static const trace::FunctionSig _glColor4iv_sig = {84, "glColor4iv", 1, _glColor4iv_args};

static const char * _glColor4s_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4s_sig = {85, "glColor4s", 4, _glColor4s_args};

static const char * _glColor4sv_args[1] = {"v"};
static const trace::FunctionSig _glColor4sv_sig = {86, "glColor4sv", 1, _glColor4sv_args};

static const char * _glColor4ub_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4ub_sig = {87, "glColor4ub", 4, _glColor4ub_args};

static const char * _glColor4ubv_args[1] = {"v"};
static const trace::FunctionSig _glColor4ubv_sig = {88, "glColor4ubv", 1, _glColor4ubv_args};

static const char * _glColor4ui_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4ui_sig = {89, "glColor4ui", 4, _glColor4ui_args};

static const char * _glColor4uiv_args[1] = {"v"};
static const trace::FunctionSig _glColor4uiv_sig = {90, "glColor4uiv", 1, _glColor4uiv_args};

static const char * _glColor4us_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4us_sig = {91, "glColor4us", 4, _glColor4us_args};

static const char * _glColor4usv_args[1] = {"v"};
static const trace::FunctionSig _glColor4usv_sig = {92, "glColor4usv", 1, _glColor4usv_args};

static const char * _glEdgeFlag_args[1] = {"flag"};
static const trace::FunctionSig _glEdgeFlag_sig = {93, "glEdgeFlag", 1, _glEdgeFlag_args};

static const char * _glEdgeFlagv_args[1] = {"flag"};
static const trace::FunctionSig _glEdgeFlagv_sig = {94, "glEdgeFlagv", 1, _glEdgeFlagv_args};

static const char ** _glEnd_args = NULL;
static const trace::FunctionSig _glEnd_sig = {95, "glEnd", 0, _glEnd_args};

static const char * _glIndexd_args[1] = {"c"};
static const trace::FunctionSig _glIndexd_sig = {96, "glIndexd", 1, _glIndexd_args};

static const char * _glIndexdv_args[1] = {"c"};
static const trace::FunctionSig _glIndexdv_sig = {97, "glIndexdv", 1, _glIndexdv_args};

static const char * _glIndexf_args[1] = {"c"};
static const trace::FunctionSig _glIndexf_sig = {98, "glIndexf", 1, _glIndexf_args};

static const char * _glIndexfv_args[1] = {"c"};
static const trace::FunctionSig _glIndexfv_sig = {99, "glIndexfv", 1, _glIndexfv_args};

static const char * _glIndexi_args[1] = {"c"};
static const trace::FunctionSig _glIndexi_sig = {100, "glIndexi", 1, _glIndexi_args};

static const char * _glIndexiv_args[1] = {"c"};
static const trace::FunctionSig _glIndexiv_sig = {101, "glIndexiv", 1, _glIndexiv_args};

static const char * _glIndexs_args[1] = {"c"};
static const trace::FunctionSig _glIndexs_sig = {102, "glIndexs", 1, _glIndexs_args};

static const char * _glIndexsv_args[1] = {"c"};
static const trace::FunctionSig _glIndexsv_sig = {103, "glIndexsv", 1, _glIndexsv_args};

static const char * _glNormal3b_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3b_sig = {104, "glNormal3b", 3, _glNormal3b_args};

static const char * _glNormal3bv_args[1] = {"v"};
static const trace::FunctionSig _glNormal3bv_sig = {105, "glNormal3bv", 1, _glNormal3bv_args};

static const char * _glNormal3d_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3d_sig = {106, "glNormal3d", 3, _glNormal3d_args};

static const char * _glNormal3dv_args[1] = {"v"};
static const trace::FunctionSig _glNormal3dv_sig = {107, "glNormal3dv", 1, _glNormal3dv_args};

static const char * _glNormal3f_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3f_sig = {108, "glNormal3f", 3, _glNormal3f_args};

static const char * _glNormal3fv_args[1] = {"v"};
static const trace::FunctionSig _glNormal3fv_sig = {109, "glNormal3fv", 1, _glNormal3fv_args};

static const char * _glNormal3i_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3i_sig = {110, "glNormal3i", 3, _glNormal3i_args};

static const char * _glNormal3iv_args[1] = {"v"};
static const trace::FunctionSig _glNormal3iv_sig = {111, "glNormal3iv", 1, _glNormal3iv_args};

static const char * _glNormal3s_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3s_sig = {112, "glNormal3s", 3, _glNormal3s_args};

static const char * _glNormal3sv_args[1] = {"v"};
static const trace::FunctionSig _glNormal3sv_sig = {113, "glNormal3sv", 1, _glNormal3sv_args};

static const char * _glRasterPos2d_args[2] = {"x", "y"};
static const trace::FunctionSig _glRasterPos2d_sig = {114, "glRasterPos2d", 2, _glRasterPos2d_args};

static const char * _glRasterPos2dv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos2dv_sig = {115, "glRasterPos2dv", 1, _glRasterPos2dv_args};

static const char * _glRasterPos2f_args[2] = {"x", "y"};
static const trace::FunctionSig _glRasterPos2f_sig = {116, "glRasterPos2f", 2, _glRasterPos2f_args};

static const char * _glRasterPos2fv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos2fv_sig = {117, "glRasterPos2fv", 1, _glRasterPos2fv_args};

static const char * _glRasterPos2i_args[2] = {"x", "y"};
static const trace::FunctionSig _glRasterPos2i_sig = {118, "glRasterPos2i", 2, _glRasterPos2i_args};

static const char * _glRasterPos2iv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos2iv_sig = {119, "glRasterPos2iv", 1, _glRasterPos2iv_args};

static const char * _glRasterPos2s_args[2] = {"x", "y"};
static const trace::FunctionSig _glRasterPos2s_sig = {120, "glRasterPos2s", 2, _glRasterPos2s_args};

static const char * _glRasterPos2sv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos2sv_sig = {121, "glRasterPos2sv", 1, _glRasterPos2sv_args};

static const char * _glRasterPos3d_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glRasterPos3d_sig = {122, "glRasterPos3d", 3, _glRasterPos3d_args};

static const char * _glRasterPos3dv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos3dv_sig = {123, "glRasterPos3dv", 1, _glRasterPos3dv_args};

static const char * _glRasterPos3f_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glRasterPos3f_sig = {124, "glRasterPos3f", 3, _glRasterPos3f_args};

static const char * _glRasterPos3fv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos3fv_sig = {125, "glRasterPos3fv", 1, _glRasterPos3fv_args};

static const char * _glRasterPos3i_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glRasterPos3i_sig = {126, "glRasterPos3i", 3, _glRasterPos3i_args};

static const char * _glRasterPos3iv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos3iv_sig = {127, "glRasterPos3iv", 1, _glRasterPos3iv_args};

static const char * _glRasterPos3s_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glRasterPos3s_sig = {128, "glRasterPos3s", 3, _glRasterPos3s_args};

static const char * _glRasterPos3sv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos3sv_sig = {129, "glRasterPos3sv", 1, _glRasterPos3sv_args};

static const char * _glRasterPos4d_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glRasterPos4d_sig = {130, "glRasterPos4d", 4, _glRasterPos4d_args};

static const char * _glRasterPos4dv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos4dv_sig = {131, "glRasterPos4dv", 1, _glRasterPos4dv_args};

static const char * _glRasterPos4f_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glRasterPos4f_sig = {132, "glRasterPos4f", 4, _glRasterPos4f_args};

static const char * _glRasterPos4fv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos4fv_sig = {133, "glRasterPos4fv", 1, _glRasterPos4fv_args};

static const char * _glRasterPos4i_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glRasterPos4i_sig = {134, "glRasterPos4i", 4, _glRasterPos4i_args};

static const char * _glRasterPos4iv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos4iv_sig = {135, "glRasterPos4iv", 1, _glRasterPos4iv_args};

static const char * _glRasterPos4s_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glRasterPos4s_sig = {136, "glRasterPos4s", 4, _glRasterPos4s_args};

static const char * _glRasterPos4sv_args[1] = {"v"};
static const trace::FunctionSig _glRasterPos4sv_sig = {137, "glRasterPos4sv", 1, _glRasterPos4sv_args};

static const char * _glRectd_args[4] = {"x1", "y1", "x2", "y2"};
static const trace::FunctionSig _glRectd_sig = {138, "glRectd", 4, _glRectd_args};

static const char * _glRectdv_args[2] = {"v1", "v2"};
static const trace::FunctionSig _glRectdv_sig = {139, "glRectdv", 2, _glRectdv_args};

static const char * _glRectf_args[4] = {"x1", "y1", "x2", "y2"};
static const trace::FunctionSig _glRectf_sig = {140, "glRectf", 4, _glRectf_args};

static const char * _glRectfv_args[2] = {"v1", "v2"};
static const trace::FunctionSig _glRectfv_sig = {141, "glRectfv", 2, _glRectfv_args};

static const char * _glRecti_args[4] = {"x1", "y1", "x2", "y2"};
static const trace::FunctionSig _glRecti_sig = {142, "glRecti", 4, _glRecti_args};

static const char * _glRectiv_args[2] = {"v1", "v2"};
static const trace::FunctionSig _glRectiv_sig = {143, "glRectiv", 2, _glRectiv_args};

static const char * _glRects_args[4] = {"x1", "y1", "x2", "y2"};
static const trace::FunctionSig _glRects_sig = {144, "glRects", 4, _glRects_args};

static const char * _glRectsv_args[2] = {"v1", "v2"};
static const trace::FunctionSig _glRectsv_sig = {145, "glRectsv", 2, _glRectsv_args};

static const char * _glTexCoord1d_args[1] = {"s"};
static const trace::FunctionSig _glTexCoord1d_sig = {146, "glTexCoord1d", 1, _glTexCoord1d_args};

static const char * _glTexCoord1dv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord1dv_sig = {147, "glTexCoord1dv", 1, _glTexCoord1dv_args};

static const char * _glTexCoord1f_args[1] = {"s"};
static const trace::FunctionSig _glTexCoord1f_sig = {148, "glTexCoord1f", 1, _glTexCoord1f_args};

static const char * _glTexCoord1fv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord1fv_sig = {149, "glTexCoord1fv", 1, _glTexCoord1fv_args};

static const char * _glTexCoord1i_args[1] = {"s"};
static const trace::FunctionSig _glTexCoord1i_sig = {150, "glTexCoord1i", 1, _glTexCoord1i_args};

static const char * _glTexCoord1iv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord1iv_sig = {151, "glTexCoord1iv", 1, _glTexCoord1iv_args};

static const char * _glTexCoord1s_args[1] = {"s"};
static const trace::FunctionSig _glTexCoord1s_sig = {152, "glTexCoord1s", 1, _glTexCoord1s_args};

static const char * _glTexCoord1sv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord1sv_sig = {153, "glTexCoord1sv", 1, _glTexCoord1sv_args};

static const char * _glTexCoord2d_args[2] = {"s", "t"};
static const trace::FunctionSig _glTexCoord2d_sig = {154, "glTexCoord2d", 2, _glTexCoord2d_args};

static const char * _glTexCoord2dv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord2dv_sig = {155, "glTexCoord2dv", 1, _glTexCoord2dv_args};

static const char * _glTexCoord2f_args[2] = {"s", "t"};
static const trace::FunctionSig _glTexCoord2f_sig = {156, "glTexCoord2f", 2, _glTexCoord2f_args};

static const char * _glTexCoord2fv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord2fv_sig = {157, "glTexCoord2fv", 1, _glTexCoord2fv_args};

static const char * _glTexCoord2i_args[2] = {"s", "t"};
static const trace::FunctionSig _glTexCoord2i_sig = {158, "glTexCoord2i", 2, _glTexCoord2i_args};

static const char * _glTexCoord2iv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord2iv_sig = {159, "glTexCoord2iv", 1, _glTexCoord2iv_args};

static const char * _glTexCoord2s_args[2] = {"s", "t"};
static const trace::FunctionSig _glTexCoord2s_sig = {160, "glTexCoord2s", 2, _glTexCoord2s_args};

static const char * _glTexCoord2sv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord2sv_sig = {161, "glTexCoord2sv", 1, _glTexCoord2sv_args};

static const char * _glTexCoord3d_args[3] = {"s", "t", "r"};
static const trace::FunctionSig _glTexCoord3d_sig = {162, "glTexCoord3d", 3, _glTexCoord3d_args};

static const char * _glTexCoord3dv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord3dv_sig = {163, "glTexCoord3dv", 1, _glTexCoord3dv_args};

static const char * _glTexCoord3f_args[3] = {"s", "t", "r"};
static const trace::FunctionSig _glTexCoord3f_sig = {164, "glTexCoord3f", 3, _glTexCoord3f_args};

static const char * _glTexCoord3fv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord3fv_sig = {165, "glTexCoord3fv", 1, _glTexCoord3fv_args};

static const char * _glTexCoord3i_args[3] = {"s", "t", "r"};
static const trace::FunctionSig _glTexCoord3i_sig = {166, "glTexCoord3i", 3, _glTexCoord3i_args};

static const char * _glTexCoord3iv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord3iv_sig = {167, "glTexCoord3iv", 1, _glTexCoord3iv_args};

static const char * _glTexCoord3s_args[3] = {"s", "t", "r"};
static const trace::FunctionSig _glTexCoord3s_sig = {168, "glTexCoord3s", 3, _glTexCoord3s_args};

static const char * _glTexCoord3sv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord3sv_sig = {169, "glTexCoord3sv", 1, _glTexCoord3sv_args};

static const char * _glTexCoord4d_args[4] = {"s", "t", "r", "q"};
static const trace::FunctionSig _glTexCoord4d_sig = {170, "glTexCoord4d", 4, _glTexCoord4d_args};

static const char * _glTexCoord4dv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord4dv_sig = {171, "glTexCoord4dv", 1, _glTexCoord4dv_args};

static const char * _glTexCoord4f_args[4] = {"s", "t", "r", "q"};
static const trace::FunctionSig _glTexCoord4f_sig = {172, "glTexCoord4f", 4, _glTexCoord4f_args};

static const char * _glTexCoord4fv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord4fv_sig = {173, "glTexCoord4fv", 1, _glTexCoord4fv_args};

static const char * _glTexCoord4i_args[4] = {"s", "t", "r", "q"};
static const trace::FunctionSig _glTexCoord4i_sig = {174, "glTexCoord4i", 4, _glTexCoord4i_args};

static const char * _glTexCoord4iv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord4iv_sig = {175, "glTexCoord4iv", 1, _glTexCoord4iv_args};

static const char * _glTexCoord4s_args[4] = {"s", "t", "r", "q"};
static const trace::FunctionSig _glTexCoord4s_sig = {176, "glTexCoord4s", 4, _glTexCoord4s_args};

static const char * _glTexCoord4sv_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord4sv_sig = {177, "glTexCoord4sv", 1, _glTexCoord4sv_args};

static const char * _glVertex2d_args[2] = {"x", "y"};
static const trace::FunctionSig _glVertex2d_sig = {178, "glVertex2d", 2, _glVertex2d_args};

static const char * _glVertex2dv_args[1] = {"v"};
static const trace::FunctionSig _glVertex2dv_sig = {179, "glVertex2dv", 1, _glVertex2dv_args};

static const char * _glVertex2f_args[2] = {"x", "y"};
static const trace::FunctionSig _glVertex2f_sig = {180, "glVertex2f", 2, _glVertex2f_args};

static const char * _glVertex2fv_args[1] = {"v"};
static const trace::FunctionSig _glVertex2fv_sig = {181, "glVertex2fv", 1, _glVertex2fv_args};

static const char * _glVertex2i_args[2] = {"x", "y"};
static const trace::FunctionSig _glVertex2i_sig = {182, "glVertex2i", 2, _glVertex2i_args};

static const char * _glVertex2iv_args[1] = {"v"};
static const trace::FunctionSig _glVertex2iv_sig = {183, "glVertex2iv", 1, _glVertex2iv_args};

static const char * _glVertex2s_args[2] = {"x", "y"};
static const trace::FunctionSig _glVertex2s_sig = {184, "glVertex2s", 2, _glVertex2s_args};

static const char * _glVertex2sv_args[1] = {"v"};
static const trace::FunctionSig _glVertex2sv_sig = {185, "glVertex2sv", 1, _glVertex2sv_args};

static const char * _glVertex3d_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glVertex3d_sig = {186, "glVertex3d", 3, _glVertex3d_args};

static const char * _glVertex3dv_args[1] = {"v"};
static const trace::FunctionSig _glVertex3dv_sig = {187, "glVertex3dv", 1, _glVertex3dv_args};

static const char * _glVertex3f_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glVertex3f_sig = {188, "glVertex3f", 3, _glVertex3f_args};

static const char * _glVertex3fv_args[1] = {"v"};
static const trace::FunctionSig _glVertex3fv_sig = {189, "glVertex3fv", 1, _glVertex3fv_args};

static const char * _glVertex3i_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glVertex3i_sig = {190, "glVertex3i", 3, _glVertex3i_args};

static const char * _glVertex3iv_args[1] = {"v"};
static const trace::FunctionSig _glVertex3iv_sig = {191, "glVertex3iv", 1, _glVertex3iv_args};

static const char * _glVertex3s_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glVertex3s_sig = {192, "glVertex3s", 3, _glVertex3s_args};

static const char * _glVertex3sv_args[1] = {"v"};
static const trace::FunctionSig _glVertex3sv_sig = {193, "glVertex3sv", 1, _glVertex3sv_args};

static const char * _glVertex4d_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glVertex4d_sig = {194, "glVertex4d", 4, _glVertex4d_args};

static const char * _glVertex4dv_args[1] = {"v"};
static const trace::FunctionSig _glVertex4dv_sig = {195, "glVertex4dv", 1, _glVertex4dv_args};

static const char * _glVertex4f_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glVertex4f_sig = {196, "glVertex4f", 4, _glVertex4f_args};

static const char * _glVertex4fv_args[1] = {"v"};
static const trace::FunctionSig _glVertex4fv_sig = {197, "glVertex4fv", 1, _glVertex4fv_args};

static const char * _glVertex4i_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glVertex4i_sig = {198, "glVertex4i", 4, _glVertex4i_args};

static const char * _glVertex4iv_args[1] = {"v"};
static const trace::FunctionSig _glVertex4iv_sig = {199, "glVertex4iv", 1, _glVertex4iv_args};

static const char * _glVertex4s_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glVertex4s_sig = {200, "glVertex4s", 4, _glVertex4s_args};

static const char * _glVertex4sv_args[1] = {"v"};
static const trace::FunctionSig _glVertex4sv_sig = {201, "glVertex4sv", 1, _glVertex4sv_args};

static const char * _glClipPlane_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glClipPlane_sig = {202, "glClipPlane", 2, _glClipPlane_args};

static const char * _glColorMaterial_args[2] = {"face", "mode"};
static const trace::FunctionSig _glColorMaterial_sig = {203, "glColorMaterial", 2, _glColorMaterial_args};

static const char * _glFogf_args[2] = {"pname", "param"};
static const trace::FunctionSig _glFogf_sig = {204, "glFogf", 2, _glFogf_args};

static const char * _glFogfv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glFogfv_sig = {205, "glFogfv", 2, _glFogfv_args};

static const char * _glFogi_args[2] = {"pname", "param"};
static const trace::FunctionSig _glFogi_sig = {206, "glFogi", 2, _glFogi_args};

static const char * _glFogiv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glFogiv_sig = {207, "glFogiv", 2, _glFogiv_args};

static const char * _glLightf_args[3] = {"light", "pname", "param"};
static const trace::FunctionSig _glLightf_sig = {208, "glLightf", 3, _glLightf_args};

static const char * _glLightfv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glLightfv_sig = {209, "glLightfv", 3, _glLightfv_args};

static const char * _glLighti_args[3] = {"light", "pname", "param"};
static const trace::FunctionSig _glLighti_sig = {210, "glLighti", 3, _glLighti_args};

static const char * _glLightiv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glLightiv_sig = {211, "glLightiv", 3, _glLightiv_args};

static const char * _glLightModelf_args[2] = {"pname", "param"};
static const trace::FunctionSig _glLightModelf_sig = {212, "glLightModelf", 2, _glLightModelf_args};

static const char * _glLightModelfv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glLightModelfv_sig = {213, "glLightModelfv", 2, _glLightModelfv_args};

static const char * _glLightModeli_args[2] = {"pname", "param"};
static const trace::FunctionSig _glLightModeli_sig = {214, "glLightModeli", 2, _glLightModeli_args};

static const char * _glLightModeliv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glLightModeliv_sig = {215, "glLightModeliv", 2, _glLightModeliv_args};

static const char * _glLineStipple_args[2] = {"factor", "pattern"};
static const trace::FunctionSig _glLineStipple_sig = {216, "glLineStipple", 2, _glLineStipple_args};

static const char * _glMaterialf_args[3] = {"face", "pname", "param"};
static const trace::FunctionSig _glMaterialf_sig = {217, "glMaterialf", 3, _glMaterialf_args};

static const char * _glMaterialfv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glMaterialfv_sig = {218, "glMaterialfv", 3, _glMaterialfv_args};

static const char * _glMateriali_args[3] = {"face", "pname", "param"};
static const trace::FunctionSig _glMateriali_sig = {219, "glMateriali", 3, _glMateriali_args};

static const char * _glMaterialiv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glMaterialiv_sig = {220, "glMaterialiv", 3, _glMaterialiv_args};

static const char * _glPolygonStipple_args[1] = {"mask"};
static const trace::FunctionSig _glPolygonStipple_sig = {221, "glPolygonStipple", 1, _glPolygonStipple_args};

static const char * _glShadeModel_args[1] = {"mode"};
static const trace::FunctionSig _glShadeModel_sig = {222, "glShadeModel", 1, _glShadeModel_args};

static const char * _glTexEnvf_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexEnvf_sig = {223, "glTexEnvf", 3, _glTexEnvf_args};

static const char * _glTexEnvfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexEnvfv_sig = {224, "glTexEnvfv", 3, _glTexEnvfv_args};

static const char * _glTexEnvi_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexEnvi_sig = {225, "glTexEnvi", 3, _glTexEnvi_args};

static const char * _glTexEnviv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexEnviv_sig = {226, "glTexEnviv", 3, _glTexEnviv_args};

static const char * _glTexGend_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGend_sig = {227, "glTexGend", 3, _glTexGend_args};

static const char * _glTexGendv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGendv_sig = {228, "glTexGendv", 3, _glTexGendv_args};

static const char * _glTexGenf_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGenf_sig = {229, "glTexGenf", 3, _glTexGenf_args};

static const char * _glTexGenfv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGenfv_sig = {230, "glTexGenfv", 3, _glTexGenfv_args};

static const char * _glTexGeni_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGeni_sig = {231, "glTexGeni", 3, _glTexGeni_args};

static const char * _glTexGeniv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGeniv_sig = {232, "glTexGeniv", 3, _glTexGeniv_args};

static const char * _glFeedbackBuffer_args[3] = {"size", "type", "buffer"};
static const trace::FunctionSig _glFeedbackBuffer_sig = {233, "glFeedbackBuffer", 3, _glFeedbackBuffer_args};

static const char * _glSelectBuffer_args[2] = {"size", "buffer"};
static const trace::FunctionSig _glSelectBuffer_sig = {234, "glSelectBuffer", 2, _glSelectBuffer_args};

static const char * _glRenderMode_args[1] = {"mode"};
static const trace::FunctionSig _glRenderMode_sig = {235, "glRenderMode", 1, _glRenderMode_args};

static const char ** _glInitNames_args = NULL;
static const trace::FunctionSig _glInitNames_sig = {236, "glInitNames", 0, _glInitNames_args};

static const char * _glLoadName_args[1] = {"name"};
static const trace::FunctionSig _glLoadName_sig = {237, "glLoadName", 1, _glLoadName_args};

static const char * _glPassThrough_args[1] = {"token"};
static const trace::FunctionSig _glPassThrough_sig = {238, "glPassThrough", 1, _glPassThrough_args};

static const char ** _glPopName_args = NULL;
static const trace::FunctionSig _glPopName_sig = {239, "glPopName", 0, _glPopName_args};

static const char * _glPushName_args[1] = {"name"};
static const trace::FunctionSig _glPushName_sig = {240, "glPushName", 1, _glPushName_args};

static const char * _glClearAccum_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glClearAccum_sig = {241, "glClearAccum", 4, _glClearAccum_args};

static const char * _glClearIndex_args[1] = {"c"};
static const trace::FunctionSig _glClearIndex_sig = {242, "glClearIndex", 1, _glClearIndex_args};

static const char * _glIndexMask_args[1] = {"mask"};
static const trace::FunctionSig _glIndexMask_sig = {243, "glIndexMask", 1, _glIndexMask_args};

static const char * _glAccum_args[2] = {"op", "value"};
static const trace::FunctionSig _glAccum_sig = {244, "glAccum", 2, _glAccum_args};

static const char ** _glPopAttrib_args = NULL;
static const trace::FunctionSig _glPopAttrib_sig = {245, "glPopAttrib", 0, _glPopAttrib_args};

static const char * _glPushAttrib_args[1] = {"mask"};
static const trace::FunctionSig _glPushAttrib_sig = {246, "glPushAttrib", 1, _glPushAttrib_args};

static const char * _glMap1d_args[6] = {"target", "u1", "u2", "stride", "order", "points"};
static const trace::FunctionSig _glMap1d_sig = {247, "glMap1d", 6, _glMap1d_args};

static const char * _glMap1f_args[6] = {"target", "u1", "u2", "stride", "order", "points"};
static const trace::FunctionSig _glMap1f_sig = {248, "glMap1f", 6, _glMap1f_args};

static const char * _glMap2d_args[10] = {"target", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "points"};
static const trace::FunctionSig _glMap2d_sig = {249, "glMap2d", 10, _glMap2d_args};

static const char * _glMap2f_args[10] = {"target", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "points"};
static const trace::FunctionSig _glMap2f_sig = {250, "glMap2f", 10, _glMap2f_args};

static const char * _glMapGrid1d_args[3] = {"un", "u1", "u2"};
static const trace::FunctionSig _glMapGrid1d_sig = {251, "glMapGrid1d", 3, _glMapGrid1d_args};

static const char * _glMapGrid1f_args[3] = {"un", "u1", "u2"};
static const trace::FunctionSig _glMapGrid1f_sig = {252, "glMapGrid1f", 3, _glMapGrid1f_args};

static const char * _glMapGrid2d_args[6] = {"un", "u1", "u2", "vn", "v1", "v2"};
static const trace::FunctionSig _glMapGrid2d_sig = {253, "glMapGrid2d", 6, _glMapGrid2d_args};

static const char * _glMapGrid2f_args[6] = {"un", "u1", "u2", "vn", "v1", "v2"};
static const trace::FunctionSig _glMapGrid2f_sig = {254, "glMapGrid2f", 6, _glMapGrid2f_args};

static const char * _glEvalCoord1d_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord1d_sig = {255, "glEvalCoord1d", 1, _glEvalCoord1d_args};

static const char * _glEvalCoord1dv_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord1dv_sig = {256, "glEvalCoord1dv", 1, _glEvalCoord1dv_args};

static const char * _glEvalCoord1f_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord1f_sig = {257, "glEvalCoord1f", 1, _glEvalCoord1f_args};

static const char * _glEvalCoord1fv_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord1fv_sig = {258, "glEvalCoord1fv", 1, _glEvalCoord1fv_args};

static const char * _glEvalCoord2d_args[2] = {"u", "v"};
static const trace::FunctionSig _glEvalCoord2d_sig = {259, "glEvalCoord2d", 2, _glEvalCoord2d_args};

static const char * _glEvalCoord2dv_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord2dv_sig = {260, "glEvalCoord2dv", 1, _glEvalCoord2dv_args};

static const char * _glEvalCoord2f_args[2] = {"u", "v"};
static const trace::FunctionSig _glEvalCoord2f_sig = {261, "glEvalCoord2f", 2, _glEvalCoord2f_args};

static const char * _glEvalCoord2fv_args[1] = {"u"};
static const trace::FunctionSig _glEvalCoord2fv_sig = {262, "glEvalCoord2fv", 1, _glEvalCoord2fv_args};

static const char * _glEvalMesh1_args[3] = {"mode", "i1", "i2"};
static const trace::FunctionSig _glEvalMesh1_sig = {263, "glEvalMesh1", 3, _glEvalMesh1_args};

static const char * _glEvalPoint1_args[1] = {"i"};
static const trace::FunctionSig _glEvalPoint1_sig = {264, "glEvalPoint1", 1, _glEvalPoint1_args};

static const char * _glEvalMesh2_args[5] = {"mode", "i1", "i2", "j1", "j2"};
static const trace::FunctionSig _glEvalMesh2_sig = {265, "glEvalMesh2", 5, _glEvalMesh2_args};

static const char * _glEvalPoint2_args[2] = {"i", "j"};
static const trace::FunctionSig _glEvalPoint2_sig = {266, "glEvalPoint2", 2, _glEvalPoint2_args};

static const char * _glAlphaFunc_args[2] = {"func", "ref"};
static const trace::FunctionSig _glAlphaFunc_sig = {267, "glAlphaFunc", 2, _glAlphaFunc_args};

static const char * _glPixelZoom_args[2] = {"xfactor", "yfactor"};
static const trace::FunctionSig _glPixelZoom_sig = {268, "glPixelZoom", 2, _glPixelZoom_args};

static const char * _glPixelTransferf_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelTransferf_sig = {269, "glPixelTransferf", 2, _glPixelTransferf_args};

static const char * _glPixelTransferi_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelTransferi_sig = {270, "glPixelTransferi", 2, _glPixelTransferi_args};

static const char * _glPixelMapfv_args[3] = {"map", "mapsize", "values"};
static const trace::FunctionSig _glPixelMapfv_sig = {271, "glPixelMapfv", 3, _glPixelMapfv_args};

static const char * _glPixelMapuiv_args[3] = {"map", "mapsize", "values"};
static const trace::FunctionSig _glPixelMapuiv_sig = {272, "glPixelMapuiv", 3, _glPixelMapuiv_args};

static const char * _glPixelMapusv_args[3] = {"map", "mapsize", "values"};
static const trace::FunctionSig _glPixelMapusv_sig = {273, "glPixelMapusv", 3, _glPixelMapusv_args};

static const char * _glCopyPixels_args[5] = {"x", "y", "width", "height", "type"};
static const trace::FunctionSig _glCopyPixels_sig = {274, "glCopyPixels", 5, _glCopyPixels_args};

static const char * _glDrawPixels_args[5] = {"width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glDrawPixels_sig = {275, "glDrawPixels", 5, _glDrawPixels_args};

static const char * _glGetClipPlane_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glGetClipPlane_sig = {276, "glGetClipPlane", 2, _glGetClipPlane_args};

static const char * _glGetLightfv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glGetLightfv_sig = {277, "glGetLightfv", 3, _glGetLightfv_args};

static const char * _glGetLightiv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glGetLightiv_sig = {278, "glGetLightiv", 3, _glGetLightiv_args};

static const char * _glGetMapdv_args[3] = {"target", "query", "v"};
static const trace::FunctionSig _glGetMapdv_sig = {279, "glGetMapdv", 3, _glGetMapdv_args};

static const char * _glGetMapfv_args[3] = {"target", "query", "v"};
static const trace::FunctionSig _glGetMapfv_sig = {280, "glGetMapfv", 3, _glGetMapfv_args};

static const char * _glGetMapiv_args[3] = {"target", "query", "v"};
static const trace::FunctionSig _glGetMapiv_sig = {281, "glGetMapiv", 3, _glGetMapiv_args};

static const char * _glGetMaterialfv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glGetMaterialfv_sig = {282, "glGetMaterialfv", 3, _glGetMaterialfv_args};

static const char * _glGetMaterialiv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glGetMaterialiv_sig = {283, "glGetMaterialiv", 3, _glGetMaterialiv_args};

static const char * _glGetPixelMapfv_args[2] = {"map", "values"};
static const trace::FunctionSig _glGetPixelMapfv_sig = {284, "glGetPixelMapfv", 2, _glGetPixelMapfv_args};

static const char * _glGetPixelMapuiv_args[2] = {"map", "values"};
static const trace::FunctionSig _glGetPixelMapuiv_sig = {285, "glGetPixelMapuiv", 2, _glGetPixelMapuiv_args};

static const char * _glGetPixelMapusv_args[2] = {"map", "values"};
static const trace::FunctionSig _glGetPixelMapusv_sig = {286, "glGetPixelMapusv", 2, _glGetPixelMapusv_args};

static const char * _glGetPolygonStipple_args[1] = {"mask"};
static const trace::FunctionSig _glGetPolygonStipple_sig = {287, "glGetPolygonStipple", 1, _glGetPolygonStipple_args};

static const char * _glGetTexEnvfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexEnvfv_sig = {288, "glGetTexEnvfv", 3, _glGetTexEnvfv_args};

static const char * _glGetTexEnviv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexEnviv_sig = {289, "glGetTexEnviv", 3, _glGetTexEnviv_args};

static const char * _glGetTexGendv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGendv_sig = {290, "glGetTexGendv", 3, _glGetTexGendv_args};

static const char * _glGetTexGenfv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGenfv_sig = {291, "glGetTexGenfv", 3, _glGetTexGenfv_args};

static const char * _glGetTexGeniv_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGeniv_sig = {292, "glGetTexGeniv", 3, _glGetTexGeniv_args};

static const char * _glIsList_args[1] = {"list"};
static const trace::FunctionSig _glIsList_sig = {293, "glIsList", 1, _glIsList_args};

static const char * _glFrustum_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glFrustum_sig = {294, "glFrustum", 6, _glFrustum_args};

static const char ** _glLoadIdentity_args = NULL;
static const trace::FunctionSig _glLoadIdentity_sig = {295, "glLoadIdentity", 0, _glLoadIdentity_args};

static const char * _glLoadMatrixf_args[1] = {"m"};
static const trace::FunctionSig _glLoadMatrixf_sig = {296, "glLoadMatrixf", 1, _glLoadMatrixf_args};

static const char * _glLoadMatrixd_args[1] = {"m"};
static const trace::FunctionSig _glLoadMatrixd_sig = {297, "glLoadMatrixd", 1, _glLoadMatrixd_args};

static const char * _glMatrixMode_args[1] = {"mode"};
static const trace::FunctionSig _glMatrixMode_sig = {298, "glMatrixMode", 1, _glMatrixMode_args};

static const char * _glMultMatrixf_args[1] = {"m"};
static const trace::FunctionSig _glMultMatrixf_sig = {299, "glMultMatrixf", 1, _glMultMatrixf_args};

static const char * _glMultMatrixd_args[1] = {"m"};
static const trace::FunctionSig _glMultMatrixd_sig = {300, "glMultMatrixd", 1, _glMultMatrixd_args};

static const char * _glOrtho_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glOrtho_sig = {301, "glOrtho", 6, _glOrtho_args};

static const char ** _glPopMatrix_args = NULL;
static const trace::FunctionSig _glPopMatrix_sig = {302, "glPopMatrix", 0, _glPopMatrix_args};

static const char ** _glPushMatrix_args = NULL;
static const trace::FunctionSig _glPushMatrix_sig = {303, "glPushMatrix", 0, _glPushMatrix_args};

static const char * _glRotated_args[4] = {"angle", "x", "y", "z"};
static const trace::FunctionSig _glRotated_sig = {304, "glRotated", 4, _glRotated_args};

static const char * _glRotatef_args[4] = {"angle", "x", "y", "z"};
static const trace::FunctionSig _glRotatef_sig = {305, "glRotatef", 4, _glRotatef_args};

static const char * _glScaled_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glScaled_sig = {306, "glScaled", 3, _glScaled_args};

static const char * _glScalef_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glScalef_sig = {307, "glScalef", 3, _glScalef_args};

static const char * _glTranslated_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glTranslated_sig = {308, "glTranslated", 3, _glTranslated_args};

static const char * _glTranslatef_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glTranslatef_sig = {309, "glTranslatef", 3, _glTranslatef_args};

static const char * _glDrawArrays_args[3] = {"mode", "first", "count"};
static const trace::FunctionSig _glDrawArrays_sig = {310, "glDrawArrays", 3, _glDrawArrays_args};

static const char * _glDrawElements_args[4] = {"mode", "count", "type", "indices"};
static const trace::FunctionSig _glDrawElements_sig = {311, "glDrawElements", 4, _glDrawElements_args};

static const char * _glGetPointerv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetPointerv_sig = {312, "glGetPointerv", 2, _glGetPointerv_args};

static const char * _glPolygonOffset_args[2] = {"factor", "units"};
static const trace::FunctionSig _glPolygonOffset_sig = {313, "glPolygonOffset", 2, _glPolygonOffset_args};

static const char * _glCopyTexImage1D_args[7] = {"target", "level", "internalformat", "x", "y", "width", "border"};
static const trace::FunctionSig _glCopyTexImage1D_sig = {314, "glCopyTexImage1D", 7, _glCopyTexImage1D_args};

static const char * _glCopyTexImage2D_args[8] = {"target", "level", "internalformat", "x", "y", "width", "height", "border"};
static const trace::FunctionSig _glCopyTexImage2D_sig = {315, "glCopyTexImage2D", 8, _glCopyTexImage2D_args};

static const char * _glCopyTexSubImage1D_args[6] = {"target", "level", "xoffset", "x", "y", "width"};
static const trace::FunctionSig _glCopyTexSubImage1D_sig = {316, "glCopyTexSubImage1D", 6, _glCopyTexSubImage1D_args};

static const char * _glCopyTexSubImage2D_args[8] = {"target", "level", "xoffset", "yoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTexSubImage2D_sig = {317, "glCopyTexSubImage2D", 8, _glCopyTexSubImage2D_args};

static const char * _glTexSubImage1D_args[7] = {"target", "level", "xoffset", "width", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage1D_sig = {318, "glTexSubImage1D", 7, _glTexSubImage1D_args};

static const char * _glTexSubImage2D_args[9] = {"target", "level", "xoffset", "yoffset", "width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage2D_sig = {319, "glTexSubImage2D", 9, _glTexSubImage2D_args};

static const char * _glBindTexture_args[2] = {"target", "texture"};
static const trace::FunctionSig _glBindTexture_sig = {320, "glBindTexture", 2, _glBindTexture_args};

static const char * _glDeleteTextures_args[2] = {"n", "textures"};
static const trace::FunctionSig _glDeleteTextures_sig = {321, "glDeleteTextures", 2, _glDeleteTextures_args};

static const char * _glGenTextures_args[2] = {"n", "textures"};
static const trace::FunctionSig _glGenTextures_sig = {322, "glGenTextures", 2, _glGenTextures_args};

static const char * _glIsTexture_args[1] = {"texture"};
static const trace::FunctionSig _glIsTexture_sig = {323, "glIsTexture", 1, _glIsTexture_args};

static const char * _glArrayElement_args[1] = {"i"};
static const trace::FunctionSig _glArrayElement_sig = {324, "glArrayElement", 1, _glArrayElement_args};

static const char * _glColorPointer_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glColorPointer_sig = {325, "glColorPointer", 4, _glColorPointer_args};

static const char * _glDisableClientState_args[1] = {"array"};
static const trace::FunctionSig _glDisableClientState_sig = {326, "glDisableClientState", 1, _glDisableClientState_args};

static const char * _glEdgeFlagPointer_args[2] = {"stride", "pointer"};
static const trace::FunctionSig _glEdgeFlagPointer_sig = {327, "glEdgeFlagPointer", 2, _glEdgeFlagPointer_args};

static const char * _glEnableClientState_args[1] = {"array"};
static const trace::FunctionSig _glEnableClientState_sig = {328, "glEnableClientState", 1, _glEnableClientState_args};

static const char * _glIndexPointer_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glIndexPointer_sig = {329, "glIndexPointer", 3, _glIndexPointer_args};

static const char * _glInterleavedArrays_args[3] = {"format", "stride", "pointer"};
static const trace::FunctionSig _glInterleavedArrays_sig = {330, "glInterleavedArrays", 3, _glInterleavedArrays_args};

static const char * _glNormalPointer_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glNormalPointer_sig = {331, "glNormalPointer", 3, _glNormalPointer_args};

static const char * _glTexCoordPointer_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glTexCoordPointer_sig = {332, "glTexCoordPointer", 4, _glTexCoordPointer_args};

static const char * _glVertexPointer_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexPointer_sig = {333, "glVertexPointer", 4, _glVertexPointer_args};

static const char * _glAreTexturesResident_args[3] = {"n", "textures", "residences"};
static const trace::FunctionSig _glAreTexturesResident_sig = {334, "glAreTexturesResident", 3, _glAreTexturesResident_args};

static const char * _glPrioritizeTextures_args[3] = {"n", "textures", "priorities"};
static const trace::FunctionSig _glPrioritizeTextures_sig = {335, "glPrioritizeTextures", 3, _glPrioritizeTextures_args};

static const char * _glIndexub_args[1] = {"c"};
static const trace::FunctionSig _glIndexub_sig = {336, "glIndexub", 1, _glIndexub_args};

static const char * _glIndexubv_args[1] = {"c"};
static const trace::FunctionSig _glIndexubv_sig = {337, "glIndexubv", 1, _glIndexubv_args};

static const char ** _glPopClientAttrib_args = NULL;
static const trace::FunctionSig _glPopClientAttrib_sig = {338, "glPopClientAttrib", 0, _glPopClientAttrib_args};

static const char * _glPushClientAttrib_args[1] = {"mask"};
static const trace::FunctionSig _glPushClientAttrib_sig = {339, "glPushClientAttrib", 1, _glPushClientAttrib_args};

static const char * _glBlendColor_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glBlendColor_sig = {340, "glBlendColor", 4, _glBlendColor_args};

static const char * _glBlendEquation_args[1] = {"mode"};
static const trace::FunctionSig _glBlendEquation_sig = {341, "glBlendEquation", 1, _glBlendEquation_args};

static const char * _glDrawRangeElements_args[6] = {"mode", "start", "end", "count", "type", "indices"};
static const trace::FunctionSig _glDrawRangeElements_sig = {342, "glDrawRangeElements", 6, _glDrawRangeElements_args};

static const char * _glTexImage3D_args[10] = {"target", "level", "internalformat", "width", "height", "depth", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage3D_sig = {343, "glTexImage3D", 10, _glTexImage3D_args};

static const char * _glTexSubImage3D_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage3D_sig = {344, "glTexSubImage3D", 11, _glTexSubImage3D_args};

static const char * _glCopyTexSubImage3D_args[9] = {"target", "level", "xoffset", "yoffset", "zoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTexSubImage3D_sig = {345, "glCopyTexSubImage3D", 9, _glCopyTexSubImage3D_args};

static const char * _glColorTable_args[6] = {"target", "internalformat", "width", "format", "type", "table"};
static const trace::FunctionSig _glColorTable_sig = {346, "glColorTable", 6, _glColorTable_args};

static const char * _glColorTableParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glColorTableParameterfv_sig = {347, "glColorTableParameterfv", 3, _glColorTableParameterfv_args};

static const char * _glColorTableParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glColorTableParameteriv_sig = {348, "glColorTableParameteriv", 3, _glColorTableParameteriv_args};

static const char * _glCopyColorTable_args[5] = {"target", "internalformat", "x", "y", "width"};
static const trace::FunctionSig _glCopyColorTable_sig = {349, "glCopyColorTable", 5, _glCopyColorTable_args};

static const char * _glGetColorTable_args[4] = {"target", "format", "type", "table"};
static const trace::FunctionSig _glGetColorTable_sig = {350, "glGetColorTable", 4, _glGetColorTable_args};

static const char * _glGetColorTableParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameterfv_sig = {351, "glGetColorTableParameterfv", 3, _glGetColorTableParameterfv_args};

static const char * _glGetColorTableParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameteriv_sig = {352, "glGetColorTableParameteriv", 3, _glGetColorTableParameteriv_args};

static const char * _glColorSubTable_args[6] = {"target", "start", "count", "format", "type", "data"};
static const trace::FunctionSig _glColorSubTable_sig = {353, "glColorSubTable", 6, _glColorSubTable_args};

static const char * _glCopyColorSubTable_args[5] = {"target", "start", "x", "y", "width"};
static const trace::FunctionSig _glCopyColorSubTable_sig = {354, "glCopyColorSubTable", 5, _glCopyColorSubTable_args};

static const char * _glConvolutionFilter1D_args[6] = {"target", "internalformat", "width", "format", "type", "image"};
static const trace::FunctionSig _glConvolutionFilter1D_sig = {355, "glConvolutionFilter1D", 6, _glConvolutionFilter1D_args};

static const char * _glConvolutionFilter2D_args[7] = {"target", "internalformat", "width", "height", "format", "type", "image"};
static const trace::FunctionSig _glConvolutionFilter2D_sig = {356, "glConvolutionFilter2D", 7, _glConvolutionFilter2D_args};

static const char * _glConvolutionParameterf_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameterf_sig = {357, "glConvolutionParameterf", 3, _glConvolutionParameterf_args};

static const char * _glConvolutionParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameterfv_sig = {358, "glConvolutionParameterfv", 3, _glConvolutionParameterfv_args};

static const char * _glConvolutionParameteri_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameteri_sig = {359, "glConvolutionParameteri", 3, _glConvolutionParameteri_args};

static const char * _glConvolutionParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameteriv_sig = {360, "glConvolutionParameteriv", 3, _glConvolutionParameteriv_args};

static const char * _glCopyConvolutionFilter1D_args[5] = {"target", "internalformat", "x", "y", "width"};
static const trace::FunctionSig _glCopyConvolutionFilter1D_sig = {361, "glCopyConvolutionFilter1D", 5, _glCopyConvolutionFilter1D_args};

static const char * _glCopyConvolutionFilter2D_args[6] = {"target", "internalformat", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyConvolutionFilter2D_sig = {362, "glCopyConvolutionFilter2D", 6, _glCopyConvolutionFilter2D_args};

static const char * _glGetConvolutionFilter_args[4] = {"target", "format", "type", "image"};
static const trace::FunctionSig _glGetConvolutionFilter_sig = {363, "glGetConvolutionFilter", 4, _glGetConvolutionFilter_args};

static const char * _glGetConvolutionParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetConvolutionParameterfv_sig = {364, "glGetConvolutionParameterfv", 3, _glGetConvolutionParameterfv_args};

static const char * _glGetConvolutionParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetConvolutionParameteriv_sig = {365, "glGetConvolutionParameteriv", 3, _glGetConvolutionParameteriv_args};

static const char * _glGetSeparableFilter_args[6] = {"target", "format", "type", "row", "column", "span"};
static const trace::FunctionSig _glGetSeparableFilter_sig = {366, "glGetSeparableFilter", 6, _glGetSeparableFilter_args};

static const char * _glSeparableFilter2D_args[8] = {"target", "internalformat", "width", "height", "format", "type", "row", "column"};
static const trace::FunctionSig _glSeparableFilter2D_sig = {367, "glSeparableFilter2D", 8, _glSeparableFilter2D_args};

static const char * _glGetHistogram_args[5] = {"target", "reset", "format", "type", "values"};
static const trace::FunctionSig _glGetHistogram_sig = {368, "glGetHistogram", 5, _glGetHistogram_args};

static const char * _glGetHistogramParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetHistogramParameterfv_sig = {369, "glGetHistogramParameterfv", 3, _glGetHistogramParameterfv_args};

static const char * _glGetHistogramParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetHistogramParameteriv_sig = {370, "glGetHistogramParameteriv", 3, _glGetHistogramParameteriv_args};

static const char * _glGetMinmax_args[5] = {"target", "reset", "format", "type", "values"};
static const trace::FunctionSig _glGetMinmax_sig = {371, "glGetMinmax", 5, _glGetMinmax_args};

static const char * _glGetMinmaxParameterfv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMinmaxParameterfv_sig = {372, "glGetMinmaxParameterfv", 3, _glGetMinmaxParameterfv_args};

static const char * _glGetMinmaxParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMinmaxParameteriv_sig = {373, "glGetMinmaxParameteriv", 3, _glGetMinmaxParameteriv_args};

static const char * _glHistogram_args[4] = {"target", "width", "internalformat", "sink"};
static const trace::FunctionSig _glHistogram_sig = {374, "glHistogram", 4, _glHistogram_args};

static const char * _glMinmax_args[3] = {"target", "internalformat", "sink"};
static const trace::FunctionSig _glMinmax_sig = {375, "glMinmax", 3, _glMinmax_args};

static const char * _glResetHistogram_args[1] = {"target"};
static const trace::FunctionSig _glResetHistogram_sig = {376, "glResetHistogram", 1, _glResetHistogram_args};

static const char * _glResetMinmax_args[1] = {"target"};
static const trace::FunctionSig _glResetMinmax_sig = {377, "glResetMinmax", 1, _glResetMinmax_args};

static const char * _glActiveTexture_args[1] = {"texture"};
static const trace::FunctionSig _glActiveTexture_sig = {378, "glActiveTexture", 1, _glActiveTexture_args};

static const char * _glSampleCoverage_args[2] = {"value", "invert"};
static const trace::FunctionSig _glSampleCoverage_sig = {379, "glSampleCoverage", 2, _glSampleCoverage_args};

static const char * _glCompressedTexImage3D_args[9] = {"target", "level", "internalformat", "width", "height", "depth", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage3D_sig = {380, "glCompressedTexImage3D", 9, _glCompressedTexImage3D_args};

static const char * _glCompressedTexImage2D_args[8] = {"target", "level", "internalformat", "width", "height", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage2D_sig = {381, "glCompressedTexImage2D", 8, _glCompressedTexImage2D_args};

static const char * _glCompressedTexImage1D_args[7] = {"target", "level", "internalformat", "width", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage1D_sig = {382, "glCompressedTexImage1D", 7, _glCompressedTexImage1D_args};

static const char * _glCompressedTexSubImage3D_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage3D_sig = {383, "glCompressedTexSubImage3D", 11, _glCompressedTexSubImage3D_args};

static const char * _glCompressedTexSubImage2D_args[9] = {"target", "level", "xoffset", "yoffset", "width", "height", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage2D_sig = {384, "glCompressedTexSubImage2D", 9, _glCompressedTexSubImage2D_args};

static const char * _glCompressedTexSubImage1D_args[7] = {"target", "level", "xoffset", "width", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage1D_sig = {385, "glCompressedTexSubImage1D", 7, _glCompressedTexSubImage1D_args};

static const char * _glGetCompressedTexImage_args[3] = {"target", "level", "img"};
static const trace::FunctionSig _glGetCompressedTexImage_sig = {386, "glGetCompressedTexImage", 3, _glGetCompressedTexImage_args};

static const char * _glClientActiveTexture_args[1] = {"texture"};
static const trace::FunctionSig _glClientActiveTexture_sig = {387, "glClientActiveTexture", 1, _glClientActiveTexture_args};

static const char * _glMultiTexCoord1d_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1d_sig = {388, "glMultiTexCoord1d", 2, _glMultiTexCoord1d_args};

static const char * _glMultiTexCoord1dv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1dv_sig = {389, "glMultiTexCoord1dv", 2, _glMultiTexCoord1dv_args};

static const char * _glMultiTexCoord1f_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1f_sig = {390, "glMultiTexCoord1f", 2, _glMultiTexCoord1f_args};

static const char * _glMultiTexCoord1fv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1fv_sig = {391, "glMultiTexCoord1fv", 2, _glMultiTexCoord1fv_args};

static const char * _glMultiTexCoord1i_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1i_sig = {392, "glMultiTexCoord1i", 2, _glMultiTexCoord1i_args};

static const char * _glMultiTexCoord1iv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1iv_sig = {393, "glMultiTexCoord1iv", 2, _glMultiTexCoord1iv_args};

static const char * _glMultiTexCoord1s_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1s_sig = {394, "glMultiTexCoord1s", 2, _glMultiTexCoord1s_args};

static const char * _glMultiTexCoord1sv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1sv_sig = {395, "glMultiTexCoord1sv", 2, _glMultiTexCoord1sv_args};

static const char * _glMultiTexCoord2d_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2d_sig = {396, "glMultiTexCoord2d", 3, _glMultiTexCoord2d_args};

static const char * _glMultiTexCoord2dv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2dv_sig = {397, "glMultiTexCoord2dv", 2, _glMultiTexCoord2dv_args};

static const char * _glMultiTexCoord2f_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2f_sig = {398, "glMultiTexCoord2f", 3, _glMultiTexCoord2f_args};

static const char * _glMultiTexCoord2fv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2fv_sig = {399, "glMultiTexCoord2fv", 2, _glMultiTexCoord2fv_args};

static const char * _glMultiTexCoord2i_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2i_sig = {400, "glMultiTexCoord2i", 3, _glMultiTexCoord2i_args};

static const char * _glMultiTexCoord2iv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2iv_sig = {401, "glMultiTexCoord2iv", 2, _glMultiTexCoord2iv_args};

static const char * _glMultiTexCoord2s_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2s_sig = {402, "glMultiTexCoord2s", 3, _glMultiTexCoord2s_args};

static const char * _glMultiTexCoord2sv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2sv_sig = {403, "glMultiTexCoord2sv", 2, _glMultiTexCoord2sv_args};

static const char * _glMultiTexCoord3d_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3d_sig = {404, "glMultiTexCoord3d", 4, _glMultiTexCoord3d_args};

static const char * _glMultiTexCoord3dv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3dv_sig = {405, "glMultiTexCoord3dv", 2, _glMultiTexCoord3dv_args};

static const char * _glMultiTexCoord3f_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3f_sig = {406, "glMultiTexCoord3f", 4, _glMultiTexCoord3f_args};

static const char * _glMultiTexCoord3fv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3fv_sig = {407, "glMultiTexCoord3fv", 2, _glMultiTexCoord3fv_args};

static const char * _glMultiTexCoord3i_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3i_sig = {408, "glMultiTexCoord3i", 4, _glMultiTexCoord3i_args};

static const char * _glMultiTexCoord3iv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3iv_sig = {409, "glMultiTexCoord3iv", 2, _glMultiTexCoord3iv_args};

static const char * _glMultiTexCoord3s_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3s_sig = {410, "glMultiTexCoord3s", 4, _glMultiTexCoord3s_args};

static const char * _glMultiTexCoord3sv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3sv_sig = {411, "glMultiTexCoord3sv", 2, _glMultiTexCoord3sv_args};

static const char * _glMultiTexCoord4d_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4d_sig = {412, "glMultiTexCoord4d", 5, _glMultiTexCoord4d_args};

static const char * _glMultiTexCoord4dv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4dv_sig = {413, "glMultiTexCoord4dv", 2, _glMultiTexCoord4dv_args};

static const char * _glMultiTexCoord4f_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4f_sig = {414, "glMultiTexCoord4f", 5, _glMultiTexCoord4f_args};

static const char * _glMultiTexCoord4fv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4fv_sig = {415, "glMultiTexCoord4fv", 2, _glMultiTexCoord4fv_args};

static const char * _glMultiTexCoord4i_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4i_sig = {416, "glMultiTexCoord4i", 5, _glMultiTexCoord4i_args};

static const char * _glMultiTexCoord4iv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4iv_sig = {417, "glMultiTexCoord4iv", 2, _glMultiTexCoord4iv_args};

static const char * _glMultiTexCoord4s_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4s_sig = {418, "glMultiTexCoord4s", 5, _glMultiTexCoord4s_args};

static const char * _glMultiTexCoord4sv_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4sv_sig = {419, "glMultiTexCoord4sv", 2, _glMultiTexCoord4sv_args};

static const char * _glLoadTransposeMatrixf_args[1] = {"m"};
static const trace::FunctionSig _glLoadTransposeMatrixf_sig = {420, "glLoadTransposeMatrixf", 1, _glLoadTransposeMatrixf_args};

static const char * _glLoadTransposeMatrixd_args[1] = {"m"};
static const trace::FunctionSig _glLoadTransposeMatrixd_sig = {421, "glLoadTransposeMatrixd", 1, _glLoadTransposeMatrixd_args};

static const char * _glMultTransposeMatrixf_args[1] = {"m"};
static const trace::FunctionSig _glMultTransposeMatrixf_sig = {422, "glMultTransposeMatrixf", 1, _glMultTransposeMatrixf_args};

static const char * _glMultTransposeMatrixd_args[1] = {"m"};
static const trace::FunctionSig _glMultTransposeMatrixd_sig = {423, "glMultTransposeMatrixd", 1, _glMultTransposeMatrixd_args};

static const char * _glBlendFuncSeparate_args[4] = {"sfactorRGB", "dfactorRGB", "sfactorAlpha", "dfactorAlpha"};
static const trace::FunctionSig _glBlendFuncSeparate_sig = {424, "glBlendFuncSeparate", 4, _glBlendFuncSeparate_args};

static const char * _glMultiDrawArrays_args[4] = {"mode", "first", "count", "drawcount"};
static const trace::FunctionSig _glMultiDrawArrays_sig = {425, "glMultiDrawArrays", 4, _glMultiDrawArrays_args};

static const char * _glMultiDrawElements_args[5] = {"mode", "count", "type", "indices", "drawcount"};
static const trace::FunctionSig _glMultiDrawElements_sig = {426, "glMultiDrawElements", 5, _glMultiDrawElements_args};

static const char * _glPointParameterf_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameterf_sig = {427, "glPointParameterf", 2, _glPointParameterf_args};

static const char * _glPointParameterfv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterfv_sig = {428, "glPointParameterfv", 2, _glPointParameterfv_args};

static const char * _glPointParameteri_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameteri_sig = {429, "glPointParameteri", 2, _glPointParameteri_args};

static const char * _glPointParameteriv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameteriv_sig = {430, "glPointParameteriv", 2, _glPointParameteriv_args};

static const char * _glFogCoordf_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoordf_sig = {431, "glFogCoordf", 1, _glFogCoordf_args};

static const char * _glFogCoordfv_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoordfv_sig = {432, "glFogCoordfv", 1, _glFogCoordfv_args};

static const char * _glFogCoordd_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoordd_sig = {433, "glFogCoordd", 1, _glFogCoordd_args};

static const char * _glFogCoorddv_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoorddv_sig = {434, "glFogCoorddv", 1, _glFogCoorddv_args};

static const char * _glFogCoordPointer_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glFogCoordPointer_sig = {435, "glFogCoordPointer", 3, _glFogCoordPointer_args};

static const char * _glSecondaryColor3b_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3b_sig = {436, "glSecondaryColor3b", 3, _glSecondaryColor3b_args};

static const char * _glSecondaryColor3bv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3bv_sig = {437, "glSecondaryColor3bv", 1, _glSecondaryColor3bv_args};

static const char * _glSecondaryColor3d_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3d_sig = {438, "glSecondaryColor3d", 3, _glSecondaryColor3d_args};

static const char * _glSecondaryColor3dv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3dv_sig = {439, "glSecondaryColor3dv", 1, _glSecondaryColor3dv_args};

static const char * _glSecondaryColor3f_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3f_sig = {440, "glSecondaryColor3f", 3, _glSecondaryColor3f_args};

static const char * _glSecondaryColor3fv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3fv_sig = {441, "glSecondaryColor3fv", 1, _glSecondaryColor3fv_args};

static const char * _glSecondaryColor3i_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3i_sig = {442, "glSecondaryColor3i", 3, _glSecondaryColor3i_args};

static const char * _glSecondaryColor3iv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3iv_sig = {443, "glSecondaryColor3iv", 1, _glSecondaryColor3iv_args};

static const char * _glSecondaryColor3s_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3s_sig = {444, "glSecondaryColor3s", 3, _glSecondaryColor3s_args};

static const char * _glSecondaryColor3sv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3sv_sig = {445, "glSecondaryColor3sv", 1, _glSecondaryColor3sv_args};

static const char * _glSecondaryColor3ub_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3ub_sig = {446, "glSecondaryColor3ub", 3, _glSecondaryColor3ub_args};

static const char * _glSecondaryColor3ubv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3ubv_sig = {447, "glSecondaryColor3ubv", 1, _glSecondaryColor3ubv_args};

static const char * _glSecondaryColor3ui_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3ui_sig = {448, "glSecondaryColor3ui", 3, _glSecondaryColor3ui_args};

static const char * _glSecondaryColor3uiv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3uiv_sig = {449, "glSecondaryColor3uiv", 1, _glSecondaryColor3uiv_args};

static const char * _glSecondaryColor3us_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3us_sig = {450, "glSecondaryColor3us", 3, _glSecondaryColor3us_args};

static const char * _glSecondaryColor3usv_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3usv_sig = {451, "glSecondaryColor3usv", 1, _glSecondaryColor3usv_args};

static const char * _glSecondaryColorPointer_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glSecondaryColorPointer_sig = {452, "glSecondaryColorPointer", 4, _glSecondaryColorPointer_args};

static const char * _glWindowPos2d_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2d_sig = {453, "glWindowPos2d", 2, _glWindowPos2d_args};

static const char * _glWindowPos2dv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2dv_sig = {454, "glWindowPos2dv", 1, _glWindowPos2dv_args};

static const char * _glWindowPos2f_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2f_sig = {455, "glWindowPos2f", 2, _glWindowPos2f_args};

static const char * _glWindowPos2fv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2fv_sig = {456, "glWindowPos2fv", 1, _glWindowPos2fv_args};

static const char * _glWindowPos2i_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2i_sig = {457, "glWindowPos2i", 2, _glWindowPos2i_args};

static const char * _glWindowPos2iv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2iv_sig = {458, "glWindowPos2iv", 1, _glWindowPos2iv_args};

static const char * _glWindowPos2s_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2s_sig = {459, "glWindowPos2s", 2, _glWindowPos2s_args};

static const char * _glWindowPos2sv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2sv_sig = {460, "glWindowPos2sv", 1, _glWindowPos2sv_args};

static const char * _glWindowPos3d_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3d_sig = {461, "glWindowPos3d", 3, _glWindowPos3d_args};

static const char * _glWindowPos3dv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3dv_sig = {462, "glWindowPos3dv", 1, _glWindowPos3dv_args};

static const char * _glWindowPos3f_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3f_sig = {463, "glWindowPos3f", 3, _glWindowPos3f_args};

static const char * _glWindowPos3fv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3fv_sig = {464, "glWindowPos3fv", 1, _glWindowPos3fv_args};

static const char * _glWindowPos3i_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3i_sig = {465, "glWindowPos3i", 3, _glWindowPos3i_args};

static const char * _glWindowPos3iv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3iv_sig = {466, "glWindowPos3iv", 1, _glWindowPos3iv_args};

static const char * _glWindowPos3s_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3s_sig = {467, "glWindowPos3s", 3, _glWindowPos3s_args};

static const char * _glWindowPos3sv_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3sv_sig = {468, "glWindowPos3sv", 1, _glWindowPos3sv_args};

static const char * _glGenQueries_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenQueries_sig = {469, "glGenQueries", 2, _glGenQueries_args};

static const char * _glDeleteQueries_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteQueries_sig = {470, "glDeleteQueries", 2, _glDeleteQueries_args};

static const char * _glIsQuery_args[1] = {"id"};
static const trace::FunctionSig _glIsQuery_sig = {471, "glIsQuery", 1, _glIsQuery_args};

static const char * _glBeginQuery_args[2] = {"target", "id"};
static const trace::FunctionSig _glBeginQuery_sig = {472, "glBeginQuery", 2, _glBeginQuery_args};

static const char * _glEndQuery_args[1] = {"target"};
static const trace::FunctionSig _glEndQuery_sig = {473, "glEndQuery", 1, _glEndQuery_args};

static const char * _glGetQueryiv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetQueryiv_sig = {474, "glGetQueryiv", 3, _glGetQueryiv_args};

static const char * _glGetQueryObjectiv_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectiv_sig = {475, "glGetQueryObjectiv", 3, _glGetQueryObjectiv_args};

static const char * _glGetQueryObjectuiv_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectuiv_sig = {476, "glGetQueryObjectuiv", 3, _glGetQueryObjectuiv_args};

static const char * _glBindBuffer_args[2] = {"target", "buffer"};
static const trace::FunctionSig _glBindBuffer_sig = {477, "glBindBuffer", 2, _glBindBuffer_args};

static const char * _glDeleteBuffers_args[2] = {"n", "buffer"};
static const trace::FunctionSig _glDeleteBuffers_sig = {478, "glDeleteBuffers", 2, _glDeleteBuffers_args};

static const char * _glGenBuffers_args[2] = {"n", "buffer"};
static const trace::FunctionSig _glGenBuffers_sig = {479, "glGenBuffers", 2, _glGenBuffers_args};

static const char * _glIsBuffer_args[1] = {"buffer"};
static const trace::FunctionSig _glIsBuffer_sig = {480, "glIsBuffer", 1, _glIsBuffer_args};

static const char * _glBufferData_args[4] = {"target", "size", "data", "usage"};
static const trace::FunctionSig _glBufferData_sig = {481, "glBufferData", 4, _glBufferData_args};

static const char * _glBufferSubData_args[4] = {"target", "offset", "size", "data"};
static const trace::FunctionSig _glBufferSubData_sig = {482, "glBufferSubData", 4, _glBufferSubData_args};

static const char * _glGetBufferSubData_args[4] = {"target", "offset", "size", "data"};
static const trace::FunctionSig _glGetBufferSubData_sig = {483, "glGetBufferSubData", 4, _glGetBufferSubData_args};

static const char * _glMapBuffer_args[2] = {"target", "access"};
static const trace::FunctionSig _glMapBuffer_sig = {484, "glMapBuffer", 2, _glMapBuffer_args};

static const char * _glUnmapBuffer_args[1] = {"target"};
static const trace::FunctionSig _glUnmapBuffer_sig = {485, "glUnmapBuffer", 1, _glUnmapBuffer_args};

static const char * _glGetBufferParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferParameteriv_sig = {486, "glGetBufferParameteriv", 3, _glGetBufferParameteriv_args};

static const char * _glGetBufferPointerv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferPointerv_sig = {487, "glGetBufferPointerv", 3, _glGetBufferPointerv_args};

static const char * _glBlendEquationSeparate_args[2] = {"modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparate_sig = {488, "glBlendEquationSeparate", 2, _glBlendEquationSeparate_args};

static const char * _glDrawBuffers_args[2] = {"n", "bufs"};
static const trace::FunctionSig _glDrawBuffers_sig = {489, "glDrawBuffers", 2, _glDrawBuffers_args};

static const char * _glStencilOpSeparate_args[4] = {"face", "sfail", "dpfail", "dppass"};
static const trace::FunctionSig _glStencilOpSeparate_sig = {490, "glStencilOpSeparate", 4, _glStencilOpSeparate_args};

static const char * _glStencilFuncSeparate_args[4] = {"face", "func", "ref", "mask"};
static const trace::FunctionSig _glStencilFuncSeparate_sig = {491, "glStencilFuncSeparate", 4, _glStencilFuncSeparate_args};

static const char * _glStencilMaskSeparate_args[2] = {"face", "mask"};
static const trace::FunctionSig _glStencilMaskSeparate_sig = {492, "glStencilMaskSeparate", 2, _glStencilMaskSeparate_args};

static const char * _glAttachShader_args[2] = {"program", "shader"};
static const trace::FunctionSig _glAttachShader_sig = {493, "glAttachShader", 2, _glAttachShader_args};

static const char * _glBindAttribLocation_args[3] = {"program", "index", "name"};
static const trace::FunctionSig _glBindAttribLocation_sig = {494, "glBindAttribLocation", 3, _glBindAttribLocation_args};

static const char * _glCompileShader_args[1] = {"shader"};
static const trace::FunctionSig _glCompileShader_sig = {495, "glCompileShader", 1, _glCompileShader_args};

static const char ** _glCreateProgram_args = NULL;
static const trace::FunctionSig _glCreateProgram_sig = {496, "glCreateProgram", 0, _glCreateProgram_args};

static const char * _glCreateShader_args[1] = {"type"};
static const trace::FunctionSig _glCreateShader_sig = {497, "glCreateShader", 1, _glCreateShader_args};

static const char * _glDeleteProgram_args[1] = {"program"};
static const trace::FunctionSig _glDeleteProgram_sig = {498, "glDeleteProgram", 1, _glDeleteProgram_args};

static const char * _glDeleteShader_args[1] = {"shader"};
static const trace::FunctionSig _glDeleteShader_sig = {499, "glDeleteShader", 1, _glDeleteShader_args};

static const char * _glDetachShader_args[2] = {"program", "shader"};
static const trace::FunctionSig _glDetachShader_sig = {500, "glDetachShader", 2, _glDetachShader_args};

static const char * _glDisableVertexAttribArray_args[1] = {"index"};
static const trace::FunctionSig _glDisableVertexAttribArray_sig = {501, "glDisableVertexAttribArray", 1, _glDisableVertexAttribArray_args};

static const char * _glEnableVertexAttribArray_args[1] = {"index"};
static const trace::FunctionSig _glEnableVertexAttribArray_sig = {502, "glEnableVertexAttribArray", 1, _glEnableVertexAttribArray_args};

static const char * _glGetActiveAttrib_args[7] = {"program", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetActiveAttrib_sig = {503, "glGetActiveAttrib", 7, _glGetActiveAttrib_args};

static const char * _glGetActiveUniform_args[7] = {"program", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetActiveUniform_sig = {504, "glGetActiveUniform", 7, _glGetActiveUniform_args};

static const char * _glGetAttachedShaders_args[4] = {"program", "maxCount", "count", "obj"};
static const trace::FunctionSig _glGetAttachedShaders_sig = {505, "glGetAttachedShaders", 4, _glGetAttachedShaders_args};

static const char * _glGetAttribLocation_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetAttribLocation_sig = {506, "glGetAttribLocation", 2, _glGetAttribLocation_args};

static const char * _glGetProgramiv_args[3] = {"program", "pname", "params"};
static const trace::FunctionSig _glGetProgramiv_sig = {507, "glGetProgramiv", 3, _glGetProgramiv_args};

static const char * _glGetProgramInfoLog_args[4] = {"program", "bufSize", "length", "infoLog"};
static const trace::FunctionSig _glGetProgramInfoLog_sig = {508, "glGetProgramInfoLog", 4, _glGetProgramInfoLog_args};

static const char * _glGetShaderiv_args[3] = {"shader", "pname", "params"};
static const trace::FunctionSig _glGetShaderiv_sig = {509, "glGetShaderiv", 3, _glGetShaderiv_args};

static const char * _glGetShaderInfoLog_args[4] = {"shader", "bufSize", "length", "infoLog"};
static const trace::FunctionSig _glGetShaderInfoLog_sig = {510, "glGetShaderInfoLog", 4, _glGetShaderInfoLog_args};

static const char * _glGetShaderSource_args[4] = {"shader", "bufSize", "length", "source"};
static const trace::FunctionSig _glGetShaderSource_sig = {511, "glGetShaderSource", 4, _glGetShaderSource_args};

static const char * _glGetUniformLocation_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetUniformLocation_sig = {512, "glGetUniformLocation", 2, _glGetUniformLocation_args};

static const char * _glGetUniformfv_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformfv_sig = {513, "glGetUniformfv", 3, _glGetUniformfv_args};

static const char * _glGetUniformiv_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformiv_sig = {514, "glGetUniformiv", 3, _glGetUniformiv_args};

static const char * _glGetVertexAttribdv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribdv_sig = {515, "glGetVertexAttribdv", 3, _glGetVertexAttribdv_args};

static const char * _glGetVertexAttribfv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribfv_sig = {516, "glGetVertexAttribfv", 3, _glGetVertexAttribfv_args};

static const char * _glGetVertexAttribiv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribiv_sig = {517, "glGetVertexAttribiv", 3, _glGetVertexAttribiv_args};

static const char * _glGetVertexAttribPointerv_args[3] = {"index", "pname", "pointer"};
static const trace::FunctionSig _glGetVertexAttribPointerv_sig = {518, "glGetVertexAttribPointerv", 3, _glGetVertexAttribPointerv_args};

static const char * _glIsProgram_args[1] = {"program"};
static const trace::FunctionSig _glIsProgram_sig = {519, "glIsProgram", 1, _glIsProgram_args};

static const char * _glIsShader_args[1] = {"shader"};
static const trace::FunctionSig _glIsShader_sig = {520, "glIsShader", 1, _glIsShader_args};

static const char * _glLinkProgram_args[1] = {"program"};
static const trace::FunctionSig _glLinkProgram_sig = {521, "glLinkProgram", 1, _glLinkProgram_args};

static const char * _glShaderSource_args[4] = {"shader", "count", "string", "length"};
static const trace::FunctionSig _glShaderSource_sig = {522, "glShaderSource", 4, _glShaderSource_args};

static const char * _glUseProgram_args[1] = {"program"};
static const trace::FunctionSig _glUseProgram_sig = {523, "glUseProgram", 1, _glUseProgram_args};

static const char * _glUniform1f_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1f_sig = {524, "glUniform1f", 2, _glUniform1f_args};

static const char * _glUniform2f_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2f_sig = {525, "glUniform2f", 3, _glUniform2f_args};

static const char * _glUniform3f_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3f_sig = {526, "glUniform3f", 4, _glUniform3f_args};

static const char * _glUniform4f_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4f_sig = {527, "glUniform4f", 5, _glUniform4f_args};

static const char * _glUniform1i_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1i_sig = {528, "glUniform1i", 2, _glUniform1i_args};

static const char * _glUniform2i_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2i_sig = {529, "glUniform2i", 3, _glUniform2i_args};

static const char * _glUniform3i_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3i_sig = {530, "glUniform3i", 4, _glUniform3i_args};

static const char * _glUniform4i_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4i_sig = {531, "glUniform4i", 5, _glUniform4i_args};

static const char * _glUniform1fv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1fv_sig = {532, "glUniform1fv", 3, _glUniform1fv_args};

static const char * _glUniform2fv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2fv_sig = {533, "glUniform2fv", 3, _glUniform2fv_args};

static const char * _glUniform3fv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3fv_sig = {534, "glUniform3fv", 3, _glUniform3fv_args};

static const char * _glUniform4fv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4fv_sig = {535, "glUniform4fv", 3, _glUniform4fv_args};

static const char * _glUniform1iv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1iv_sig = {536, "glUniform1iv", 3, _glUniform1iv_args};

static const char * _glUniform2iv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2iv_sig = {537, "glUniform2iv", 3, _glUniform2iv_args};

static const char * _glUniform3iv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3iv_sig = {538, "glUniform3iv", 3, _glUniform3iv_args};

static const char * _glUniform4iv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4iv_sig = {539, "glUniform4iv", 3, _glUniform4iv_args};

static const char * _glUniformMatrix2fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2fv_sig = {540, "glUniformMatrix2fv", 4, _glUniformMatrix2fv_args};

static const char * _glUniformMatrix3fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3fv_sig = {541, "glUniformMatrix3fv", 4, _glUniformMatrix3fv_args};

static const char * _glUniformMatrix4fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4fv_sig = {542, "glUniformMatrix4fv", 4, _glUniformMatrix4fv_args};

static const char * _glValidateProgram_args[1] = {"program"};
static const trace::FunctionSig _glValidateProgram_sig = {543, "glValidateProgram", 1, _glValidateProgram_args};

static const char * _glVertexAttrib1d_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1d_sig = {544, "glVertexAttrib1d", 2, _glVertexAttrib1d_args};

static const char * _glVertexAttrib1dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1dv_sig = {545, "glVertexAttrib1dv", 2, _glVertexAttrib1dv_args};

static const char * _glVertexAttrib1f_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1f_sig = {546, "glVertexAttrib1f", 2, _glVertexAttrib1f_args};

static const char * _glVertexAttrib1fv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1fv_sig = {547, "glVertexAttrib1fv", 2, _glVertexAttrib1fv_args};

static const char * _glVertexAttrib1s_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1s_sig = {548, "glVertexAttrib1s", 2, _glVertexAttrib1s_args};

static const char * _glVertexAttrib1sv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1sv_sig = {549, "glVertexAttrib1sv", 2, _glVertexAttrib1sv_args};

static const char * _glVertexAttrib2d_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2d_sig = {550, "glVertexAttrib2d", 3, _glVertexAttrib2d_args};

static const char * _glVertexAttrib2dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2dv_sig = {551, "glVertexAttrib2dv", 2, _glVertexAttrib2dv_args};

static const char * _glVertexAttrib2f_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2f_sig = {552, "glVertexAttrib2f", 3, _glVertexAttrib2f_args};

static const char * _glVertexAttrib2fv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2fv_sig = {553, "glVertexAttrib2fv", 2, _glVertexAttrib2fv_args};

static const char * _glVertexAttrib2s_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2s_sig = {554, "glVertexAttrib2s", 3, _glVertexAttrib2s_args};

static const char * _glVertexAttrib2sv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2sv_sig = {555, "glVertexAttrib2sv", 2, _glVertexAttrib2sv_args};

static const char * _glVertexAttrib3d_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3d_sig = {556, "glVertexAttrib3d", 4, _glVertexAttrib3d_args};

static const char * _glVertexAttrib3dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3dv_sig = {557, "glVertexAttrib3dv", 2, _glVertexAttrib3dv_args};

static const char * _glVertexAttrib3f_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3f_sig = {558, "glVertexAttrib3f", 4, _glVertexAttrib3f_args};

static const char * _glVertexAttrib3fv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3fv_sig = {559, "glVertexAttrib3fv", 2, _glVertexAttrib3fv_args};

static const char * _glVertexAttrib3s_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3s_sig = {560, "glVertexAttrib3s", 4, _glVertexAttrib3s_args};

static const char * _glVertexAttrib3sv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3sv_sig = {561, "glVertexAttrib3sv", 2, _glVertexAttrib3sv_args};

static const char * _glVertexAttrib4Nbv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Nbv_sig = {562, "glVertexAttrib4Nbv", 2, _glVertexAttrib4Nbv_args};

static const char * _glVertexAttrib4Niv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Niv_sig = {563, "glVertexAttrib4Niv", 2, _glVertexAttrib4Niv_args};

static const char * _glVertexAttrib4Nsv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Nsv_sig = {564, "glVertexAttrib4Nsv", 2, _glVertexAttrib4Nsv_args};

static const char * _glVertexAttrib4Nub_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4Nub_sig = {565, "glVertexAttrib4Nub", 5, _glVertexAttrib4Nub_args};

static const char * _glVertexAttrib4Nubv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Nubv_sig = {566, "glVertexAttrib4Nubv", 2, _glVertexAttrib4Nubv_args};

static const char * _glVertexAttrib4Nuiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Nuiv_sig = {567, "glVertexAttrib4Nuiv", 2, _glVertexAttrib4Nuiv_args};

static const char * _glVertexAttrib4Nusv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4Nusv_sig = {568, "glVertexAttrib4Nusv", 2, _glVertexAttrib4Nusv_args};

static const char * _glVertexAttrib4bv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4bv_sig = {569, "glVertexAttrib4bv", 2, _glVertexAttrib4bv_args};

static const char * _glVertexAttrib4d_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4d_sig = {570, "glVertexAttrib4d", 5, _glVertexAttrib4d_args};

static const char * _glVertexAttrib4dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4dv_sig = {571, "glVertexAttrib4dv", 2, _glVertexAttrib4dv_args};

static const char * _glVertexAttrib4f_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4f_sig = {572, "glVertexAttrib4f", 5, _glVertexAttrib4f_args};

static const char * _glVertexAttrib4fv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4fv_sig = {573, "glVertexAttrib4fv", 2, _glVertexAttrib4fv_args};

static const char * _glVertexAttrib4iv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4iv_sig = {574, "glVertexAttrib4iv", 2, _glVertexAttrib4iv_args};

static const char * _glVertexAttrib4s_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4s_sig = {575, "glVertexAttrib4s", 5, _glVertexAttrib4s_args};

static const char * _glVertexAttrib4sv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4sv_sig = {576, "glVertexAttrib4sv", 2, _glVertexAttrib4sv_args};

static const char * _glVertexAttrib4ubv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4ubv_sig = {577, "glVertexAttrib4ubv", 2, _glVertexAttrib4ubv_args};

static const char * _glVertexAttrib4uiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4uiv_sig = {578, "glVertexAttrib4uiv", 2, _glVertexAttrib4uiv_args};

static const char * _glVertexAttrib4usv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4usv_sig = {579, "glVertexAttrib4usv", 2, _glVertexAttrib4usv_args};

static const char * _glVertexAttribPointer_args[6] = {"index", "size", "type", "normalized", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribPointer_sig = {580, "glVertexAttribPointer", 6, _glVertexAttribPointer_args};

static const char * _glUniformMatrix2x3fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2x3fv_sig = {581, "glUniformMatrix2x3fv", 4, _glUniformMatrix2x3fv_args};

static const char * _glUniformMatrix3x2fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3x2fv_sig = {582, "glUniformMatrix3x2fv", 4, _glUniformMatrix3x2fv_args};

static const char * _glUniformMatrix2x4fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2x4fv_sig = {583, "glUniformMatrix2x4fv", 4, _glUniformMatrix2x4fv_args};

static const char * _glUniformMatrix4x2fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4x2fv_sig = {584, "glUniformMatrix4x2fv", 4, _glUniformMatrix4x2fv_args};

static const char * _glUniformMatrix3x4fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3x4fv_sig = {585, "glUniformMatrix3x4fv", 4, _glUniformMatrix3x4fv_args};

static const char * _glUniformMatrix4x3fv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4x3fv_sig = {586, "glUniformMatrix4x3fv", 4, _glUniformMatrix4x3fv_args};

static const char * _glColorMaski_args[5] = {"index", "r", "g", "b", "a"};
static const trace::FunctionSig _glColorMaski_sig = {587, "glColorMaski", 5, _glColorMaski_args};

static const char * _glGetBooleani_v_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetBooleani_v_sig = {588, "glGetBooleani_v", 3, _glGetBooleani_v_args};

static const char * _glGetIntegeri_v_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetIntegeri_v_sig = {589, "glGetIntegeri_v", 3, _glGetIntegeri_v_args};

static const char * _glEnablei_args[2] = {"target", "index"};
static const trace::FunctionSig _glEnablei_sig = {590, "glEnablei", 2, _glEnablei_args};

static const char * _glDisablei_args[2] = {"target", "index"};
static const trace::FunctionSig _glDisablei_sig = {591, "glDisablei", 2, _glDisablei_args};

static const char * _glIsEnabledi_args[2] = {"target", "index"};
static const trace::FunctionSig _glIsEnabledi_sig = {592, "glIsEnabledi", 2, _glIsEnabledi_args};

static const char * _glBeginTransformFeedback_args[1] = {"primitiveMode"};
static const trace::FunctionSig _glBeginTransformFeedback_sig = {593, "glBeginTransformFeedback", 1, _glBeginTransformFeedback_args};

static const char ** _glEndTransformFeedback_args = NULL;
static const trace::FunctionSig _glEndTransformFeedback_sig = {594, "glEndTransformFeedback", 0, _glEndTransformFeedback_args};

static const char * _glBindBufferRange_args[5] = {"target", "index", "buffer", "offset", "size"};
static const trace::FunctionSig _glBindBufferRange_sig = {595, "glBindBufferRange", 5, _glBindBufferRange_args};

static const char * _glBindBufferBase_args[3] = {"target", "index", "buffer"};
static const trace::FunctionSig _glBindBufferBase_sig = {596, "glBindBufferBase", 3, _glBindBufferBase_args};

static const char * _glTransformFeedbackVaryings_args[4] = {"program", "count", "varyings", "bufferMode"};
static const trace::FunctionSig _glTransformFeedbackVaryings_sig = {597, "glTransformFeedbackVaryings", 4, _glTransformFeedbackVaryings_args};

static const char * _glGetTransformFeedbackVarying_args[7] = {"program", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetTransformFeedbackVarying_sig = {598, "glGetTransformFeedbackVarying", 7, _glGetTransformFeedbackVarying_args};

static const char * _glClampColor_args[2] = {"target", "clamp"};
static const trace::FunctionSig _glClampColor_sig = {599, "glClampColor", 2, _glClampColor_args};

static const char * _glBeginConditionalRender_args[2] = {"id", "mode"};
static const trace::FunctionSig _glBeginConditionalRender_sig = {600, "glBeginConditionalRender", 2, _glBeginConditionalRender_args};

static const char ** _glEndConditionalRender_args = NULL;
static const trace::FunctionSig _glEndConditionalRender_sig = {601, "glEndConditionalRender", 0, _glEndConditionalRender_args};

static const char * _glVertexAttribIPointer_args[5] = {"index", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribIPointer_sig = {602, "glVertexAttribIPointer", 5, _glVertexAttribIPointer_args};

static const char * _glGetVertexAttribIiv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribIiv_sig = {603, "glGetVertexAttribIiv", 3, _glGetVertexAttribIiv_args};

static const char * _glGetVertexAttribIuiv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribIuiv_sig = {604, "glGetVertexAttribIuiv", 3, _glGetVertexAttribIuiv_args};

static const char * _glVertexAttribI1i_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribI1i_sig = {605, "glVertexAttribI1i", 2, _glVertexAttribI1i_args};

static const char * _glVertexAttribI2i_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribI2i_sig = {606, "glVertexAttribI2i", 3, _glVertexAttribI2i_args};

static const char * _glVertexAttribI3i_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribI3i_sig = {607, "glVertexAttribI3i", 4, _glVertexAttribI3i_args};

static const char * _glVertexAttribI4i_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribI4i_sig = {608, "glVertexAttribI4i", 5, _glVertexAttribI4i_args};

static const char * _glVertexAttribI1ui_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribI1ui_sig = {609, "glVertexAttribI1ui", 2, _glVertexAttribI1ui_args};

static const char * _glVertexAttribI2ui_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribI2ui_sig = {610, "glVertexAttribI2ui", 3, _glVertexAttribI2ui_args};

static const char * _glVertexAttribI3ui_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribI3ui_sig = {611, "glVertexAttribI3ui", 4, _glVertexAttribI3ui_args};

static const char * _glVertexAttribI4ui_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribI4ui_sig = {612, "glVertexAttribI4ui", 5, _glVertexAttribI4ui_args};

static const char * _glVertexAttribI1iv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI1iv_sig = {613, "glVertexAttribI1iv", 2, _glVertexAttribI1iv_args};

static const char * _glVertexAttribI2iv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI2iv_sig = {614, "glVertexAttribI2iv", 2, _glVertexAttribI2iv_args};

static const char * _glVertexAttribI3iv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI3iv_sig = {615, "glVertexAttribI3iv", 2, _glVertexAttribI3iv_args};

static const char * _glVertexAttribI4iv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4iv_sig = {616, "glVertexAttribI4iv", 2, _glVertexAttribI4iv_args};

static const char * _glVertexAttribI1uiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI1uiv_sig = {617, "glVertexAttribI1uiv", 2, _glVertexAttribI1uiv_args};

static const char * _glVertexAttribI2uiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI2uiv_sig = {618, "glVertexAttribI2uiv", 2, _glVertexAttribI2uiv_args};

static const char * _glVertexAttribI3uiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI3uiv_sig = {619, "glVertexAttribI3uiv", 2, _glVertexAttribI3uiv_args};

static const char * _glVertexAttribI4uiv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4uiv_sig = {620, "glVertexAttribI4uiv", 2, _glVertexAttribI4uiv_args};

static const char * _glVertexAttribI4bv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4bv_sig = {621, "glVertexAttribI4bv", 2, _glVertexAttribI4bv_args};

static const char * _glVertexAttribI4sv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4sv_sig = {622, "glVertexAttribI4sv", 2, _glVertexAttribI4sv_args};

static const char * _glVertexAttribI4ubv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4ubv_sig = {623, "glVertexAttribI4ubv", 2, _glVertexAttribI4ubv_args};

static const char * _glVertexAttribI4usv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4usv_sig = {624, "glVertexAttribI4usv", 2, _glVertexAttribI4usv_args};

static const char * _glGetUniformuiv_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformuiv_sig = {625, "glGetUniformuiv", 3, _glGetUniformuiv_args};

static const char * _glBindFragDataLocation_args[3] = {"program", "color", "name"};
static const trace::FunctionSig _glBindFragDataLocation_sig = {626, "glBindFragDataLocation", 3, _glBindFragDataLocation_args};

static const char * _glGetFragDataLocation_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetFragDataLocation_sig = {627, "glGetFragDataLocation", 2, _glGetFragDataLocation_args};

static const char * _glUniform1ui_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1ui_sig = {628, "glUniform1ui", 2, _glUniform1ui_args};

static const char * _glUniform2ui_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2ui_sig = {629, "glUniform2ui", 3, _glUniform2ui_args};

static const char * _glUniform3ui_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3ui_sig = {630, "glUniform3ui", 4, _glUniform3ui_args};

static const char * _glUniform4ui_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4ui_sig = {631, "glUniform4ui", 5, _glUniform4ui_args};

static const char * _glUniform1uiv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1uiv_sig = {632, "glUniform1uiv", 3, _glUniform1uiv_args};

static const char * _glUniform2uiv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2uiv_sig = {633, "glUniform2uiv", 3, _glUniform2uiv_args};

static const char * _glUniform3uiv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3uiv_sig = {634, "glUniform3uiv", 3, _glUniform3uiv_args};

static const char * _glUniform4uiv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4uiv_sig = {635, "glUniform4uiv", 3, _glUniform4uiv_args};

static const char * _glTexParameterIiv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterIiv_sig = {636, "glTexParameterIiv", 3, _glTexParameterIiv_args};

static const char * _glTexParameterIuiv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterIuiv_sig = {637, "glTexParameterIuiv", 3, _glTexParameterIuiv_args};

static const char * _glGetTexParameterIiv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterIiv_sig = {638, "glGetTexParameterIiv", 3, _glGetTexParameterIiv_args};

static const char * _glGetTexParameterIuiv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterIuiv_sig = {639, "glGetTexParameterIuiv", 3, _glGetTexParameterIuiv_args};

static const char * _glClearBufferiv_args[3] = {"buffer", "drawbuffer", "value"};
static const trace::FunctionSig _glClearBufferiv_sig = {640, "glClearBufferiv", 3, _glClearBufferiv_args};

static const char * _glClearBufferuiv_args[3] = {"buffer", "drawbuffer", "value"};
static const trace::FunctionSig _glClearBufferuiv_sig = {641, "glClearBufferuiv", 3, _glClearBufferuiv_args};

static const char * _glClearBufferfv_args[3] = {"buffer", "drawbuffer", "value"};
static const trace::FunctionSig _glClearBufferfv_sig = {642, "glClearBufferfv", 3, _glClearBufferfv_args};

static const char * _glClearBufferfi_args[4] = {"buffer", "drawbuffer", "depth", "stencil"};
static const trace::FunctionSig _glClearBufferfi_sig = {643, "glClearBufferfi", 4, _glClearBufferfi_args};

static const char * _glGetStringi_args[2] = {"name", "index"};
static const trace::FunctionSig _glGetStringi_sig = {644, "glGetStringi", 2, _glGetStringi_args};

static const char * _glDrawArraysInstanced_args[4] = {"mode", "first", "count", "primcount"};
static const trace::FunctionSig _glDrawArraysInstanced_sig = {645, "glDrawArraysInstanced", 4, _glDrawArraysInstanced_args};

static const char * _glDrawElementsInstanced_args[5] = {"mode", "count", "type", "indices", "primcount"};
static const trace::FunctionSig _glDrawElementsInstanced_sig = {646, "glDrawElementsInstanced", 5, _glDrawElementsInstanced_args};

static const char * _glTexBuffer_args[3] = {"target", "internalformat", "buffer"};
static const trace::FunctionSig _glTexBuffer_sig = {647, "glTexBuffer", 3, _glTexBuffer_args};

static const char * _glPrimitiveRestartIndex_args[1] = {"index"};
static const trace::FunctionSig _glPrimitiveRestartIndex_sig = {648, "glPrimitiveRestartIndex", 1, _glPrimitiveRestartIndex_args};

static const char * _glGetInteger64i_v_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetInteger64i_v_sig = {649, "glGetInteger64i_v", 3, _glGetInteger64i_v_args};

static const char * _glGetBufferParameteri64v_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferParameteri64v_sig = {650, "glGetBufferParameteri64v", 3, _glGetBufferParameteri64v_args};

static const char * _glFramebufferTexture_args[4] = {"target", "attachment", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture_sig = {651, "glFramebufferTexture", 4, _glFramebufferTexture_args};

static const char * _glVertexAttribDivisor_args[2] = {"index", "divisor"};
static const trace::FunctionSig _glVertexAttribDivisor_sig = {652, "glVertexAttribDivisor", 2, _glVertexAttribDivisor_args};

static const char * _glMinSampleShading_args[1] = {"value"};
static const trace::FunctionSig _glMinSampleShading_sig = {653, "glMinSampleShading", 1, _glMinSampleShading_args};

static const char * _glBlendEquationi_args[2] = {"buf", "mode"};
static const trace::FunctionSig _glBlendEquationi_sig = {654, "glBlendEquationi", 2, _glBlendEquationi_args};

static const char * _glBlendEquationSeparatei_args[3] = {"buf", "modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparatei_sig = {655, "glBlendEquationSeparatei", 3, _glBlendEquationSeparatei_args};

static const char * _glBlendFunci_args[3] = {"buf", "src", "dst"};
static const trace::FunctionSig _glBlendFunci_sig = {656, "glBlendFunci", 3, _glBlendFunci_args};

static const char * _glBlendFuncSeparatei_args[5] = {"buf", "srcRGB", "dstRGB", "srcAlpha", "dstAlpha"};
static const trace::FunctionSig _glBlendFuncSeparatei_sig = {657, "glBlendFuncSeparatei", 5, _glBlendFuncSeparatei_args};

static const char * _glActiveTextureARB_args[1] = {"texture"};
static const trace::FunctionSig _glActiveTextureARB_sig = {658, "glActiveTextureARB", 1, _glActiveTextureARB_args};

static const char * _glClientActiveTextureARB_args[1] = {"texture"};
static const trace::FunctionSig _glClientActiveTextureARB_sig = {659, "glClientActiveTextureARB", 1, _glClientActiveTextureARB_args};

static const char * _glMultiTexCoord1dARB_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1dARB_sig = {660, "glMultiTexCoord1dARB", 2, _glMultiTexCoord1dARB_args};

static const char * _glMultiTexCoord1dvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1dvARB_sig = {661, "glMultiTexCoord1dvARB", 2, _glMultiTexCoord1dvARB_args};

static const char * _glMultiTexCoord1fARB_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1fARB_sig = {662, "glMultiTexCoord1fARB", 2, _glMultiTexCoord1fARB_args};

static const char * _glMultiTexCoord1fvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1fvARB_sig = {663, "glMultiTexCoord1fvARB", 2, _glMultiTexCoord1fvARB_args};

static const char * _glMultiTexCoord1iARB_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1iARB_sig = {664, "glMultiTexCoord1iARB", 2, _glMultiTexCoord1iARB_args};

static const char * _glMultiTexCoord1ivARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1ivARB_sig = {665, "glMultiTexCoord1ivARB", 2, _glMultiTexCoord1ivARB_args};

static const char * _glMultiTexCoord1sARB_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1sARB_sig = {666, "glMultiTexCoord1sARB", 2, _glMultiTexCoord1sARB_args};

static const char * _glMultiTexCoord1svARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1svARB_sig = {667, "glMultiTexCoord1svARB", 2, _glMultiTexCoord1svARB_args};

static const char * _glMultiTexCoord2dARB_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2dARB_sig = {668, "glMultiTexCoord2dARB", 3, _glMultiTexCoord2dARB_args};

static const char * _glMultiTexCoord2dvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2dvARB_sig = {669, "glMultiTexCoord2dvARB", 2, _glMultiTexCoord2dvARB_args};

static const char * _glMultiTexCoord2fARB_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2fARB_sig = {670, "glMultiTexCoord2fARB", 3, _glMultiTexCoord2fARB_args};

static const char * _glMultiTexCoord2fvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2fvARB_sig = {671, "glMultiTexCoord2fvARB", 2, _glMultiTexCoord2fvARB_args};

static const char * _glMultiTexCoord2iARB_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2iARB_sig = {672, "glMultiTexCoord2iARB", 3, _glMultiTexCoord2iARB_args};

static const char * _glMultiTexCoord2ivARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2ivARB_sig = {673, "glMultiTexCoord2ivARB", 2, _glMultiTexCoord2ivARB_args};

static const char * _glMultiTexCoord2sARB_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2sARB_sig = {674, "glMultiTexCoord2sARB", 3, _glMultiTexCoord2sARB_args};

static const char * _glMultiTexCoord2svARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2svARB_sig = {675, "glMultiTexCoord2svARB", 2, _glMultiTexCoord2svARB_args};

static const char * _glMultiTexCoord3dARB_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3dARB_sig = {676, "glMultiTexCoord3dARB", 4, _glMultiTexCoord3dARB_args};

static const char * _glMultiTexCoord3dvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3dvARB_sig = {677, "glMultiTexCoord3dvARB", 2, _glMultiTexCoord3dvARB_args};

static const char * _glMultiTexCoord3fARB_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3fARB_sig = {678, "glMultiTexCoord3fARB", 4, _glMultiTexCoord3fARB_args};

static const char * _glMultiTexCoord3fvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3fvARB_sig = {679, "glMultiTexCoord3fvARB", 2, _glMultiTexCoord3fvARB_args};

static const char * _glMultiTexCoord3iARB_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3iARB_sig = {680, "glMultiTexCoord3iARB", 4, _glMultiTexCoord3iARB_args};

static const char * _glMultiTexCoord3ivARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3ivARB_sig = {681, "glMultiTexCoord3ivARB", 2, _glMultiTexCoord3ivARB_args};

static const char * _glMultiTexCoord3sARB_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3sARB_sig = {682, "glMultiTexCoord3sARB", 4, _glMultiTexCoord3sARB_args};

static const char * _glMultiTexCoord3svARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3svARB_sig = {683, "glMultiTexCoord3svARB", 2, _glMultiTexCoord3svARB_args};

static const char * _glMultiTexCoord4dARB_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4dARB_sig = {684, "glMultiTexCoord4dARB", 5, _glMultiTexCoord4dARB_args};

static const char * _glMultiTexCoord4dvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4dvARB_sig = {685, "glMultiTexCoord4dvARB", 2, _glMultiTexCoord4dvARB_args};

static const char * _glMultiTexCoord4fARB_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4fARB_sig = {686, "glMultiTexCoord4fARB", 5, _glMultiTexCoord4fARB_args};

static const char * _glMultiTexCoord4fvARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4fvARB_sig = {687, "glMultiTexCoord4fvARB", 2, _glMultiTexCoord4fvARB_args};

static const char * _glMultiTexCoord4iARB_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4iARB_sig = {688, "glMultiTexCoord4iARB", 5, _glMultiTexCoord4iARB_args};

static const char * _glMultiTexCoord4ivARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4ivARB_sig = {689, "glMultiTexCoord4ivARB", 2, _glMultiTexCoord4ivARB_args};

static const char * _glMultiTexCoord4sARB_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4sARB_sig = {690, "glMultiTexCoord4sARB", 5, _glMultiTexCoord4sARB_args};

static const char * _glMultiTexCoord4svARB_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4svARB_sig = {691, "glMultiTexCoord4svARB", 2, _glMultiTexCoord4svARB_args};

static const char * _glLoadTransposeMatrixfARB_args[1] = {"m"};
static const trace::FunctionSig _glLoadTransposeMatrixfARB_sig = {692, "glLoadTransposeMatrixfARB", 1, _glLoadTransposeMatrixfARB_args};

static const char * _glLoadTransposeMatrixdARB_args[1] = {"m"};
static const trace::FunctionSig _glLoadTransposeMatrixdARB_sig = {693, "glLoadTransposeMatrixdARB", 1, _glLoadTransposeMatrixdARB_args};

static const char * _glMultTransposeMatrixfARB_args[1] = {"m"};
static const trace::FunctionSig _glMultTransposeMatrixfARB_sig = {694, "glMultTransposeMatrixfARB", 1, _glMultTransposeMatrixfARB_args};

static const char * _glMultTransposeMatrixdARB_args[1] = {"m"};
static const trace::FunctionSig _glMultTransposeMatrixdARB_sig = {695, "glMultTransposeMatrixdARB", 1, _glMultTransposeMatrixdARB_args};

static const char * _glSampleCoverageARB_args[2] = {"value", "invert"};
static const trace::FunctionSig _glSampleCoverageARB_sig = {696, "glSampleCoverageARB", 2, _glSampleCoverageARB_args};

static const char * _glCompressedTexImage3DARB_args[9] = {"target", "level", "internalformat", "width", "height", "depth", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage3DARB_sig = {697, "glCompressedTexImage3DARB", 9, _glCompressedTexImage3DARB_args};

static const char * _glCompressedTexImage2DARB_args[8] = {"target", "level", "internalformat", "width", "height", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage2DARB_sig = {698, "glCompressedTexImage2DARB", 8, _glCompressedTexImage2DARB_args};

static const char * _glCompressedTexImage1DARB_args[7] = {"target", "level", "internalformat", "width", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage1DARB_sig = {699, "glCompressedTexImage1DARB", 7, _glCompressedTexImage1DARB_args};

static const char * _glCompressedTexSubImage3DARB_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage3DARB_sig = {700, "glCompressedTexSubImage3DARB", 11, _glCompressedTexSubImage3DARB_args};

static const char * _glCompressedTexSubImage2DARB_args[9] = {"target", "level", "xoffset", "yoffset", "width", "height", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage2DARB_sig = {701, "glCompressedTexSubImage2DARB", 9, _glCompressedTexSubImage2DARB_args};

static const char * _glCompressedTexSubImage1DARB_args[7] = {"target", "level", "xoffset", "width", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage1DARB_sig = {702, "glCompressedTexSubImage1DARB", 7, _glCompressedTexSubImage1DARB_args};

static const char * _glGetCompressedTexImageARB_args[3] = {"target", "level", "img"};
static const trace::FunctionSig _glGetCompressedTexImageARB_sig = {703, "glGetCompressedTexImageARB", 3, _glGetCompressedTexImageARB_args};

static const char * _glPointParameterfARB_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameterfARB_sig = {704, "glPointParameterfARB", 2, _glPointParameterfARB_args};

static const char * _glPointParameterfvARB_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterfvARB_sig = {705, "glPointParameterfvARB", 2, _glPointParameterfvARB_args};

static const char * _glWeightbvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightbvARB_sig = {706, "glWeightbvARB", 2, _glWeightbvARB_args};

static const char * _glWeightsvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightsvARB_sig = {707, "glWeightsvARB", 2, _glWeightsvARB_args};

static const char * _glWeightivARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightivARB_sig = {708, "glWeightivARB", 2, _glWeightivARB_args};

static const char * _glWeightfvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightfvARB_sig = {709, "glWeightfvARB", 2, _glWeightfvARB_args};

static const char * _glWeightdvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightdvARB_sig = {710, "glWeightdvARB", 2, _glWeightdvARB_args};

static const char * _glWeightubvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightubvARB_sig = {711, "glWeightubvARB", 2, _glWeightubvARB_args};

static const char * _glWeightusvARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightusvARB_sig = {712, "glWeightusvARB", 2, _glWeightusvARB_args};

static const char * _glWeightuivARB_args[2] = {"size", "weights"};
static const trace::FunctionSig _glWeightuivARB_sig = {713, "glWeightuivARB", 2, _glWeightuivARB_args};

static const char * _glWeightPointerARB_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glWeightPointerARB_sig = {714, "glWeightPointerARB", 4, _glWeightPointerARB_args};

static const char * _glVertexBlendARB_args[1] = {"count"};
static const trace::FunctionSig _glVertexBlendARB_sig = {715, "glVertexBlendARB", 1, _glVertexBlendARB_args};

static const char * _glCurrentPaletteMatrixARB_args[1] = {"index"};
static const trace::FunctionSig _glCurrentPaletteMatrixARB_sig = {716, "glCurrentPaletteMatrixARB", 1, _glCurrentPaletteMatrixARB_args};

static const char * _glMatrixIndexubvARB_args[2] = {"size", "indices"};
static const trace::FunctionSig _glMatrixIndexubvARB_sig = {717, "glMatrixIndexubvARB", 2, _glMatrixIndexubvARB_args};

static const char * _glMatrixIndexusvARB_args[2] = {"size", "indices"};
static const trace::FunctionSig _glMatrixIndexusvARB_sig = {718, "glMatrixIndexusvARB", 2, _glMatrixIndexusvARB_args};

static const char * _glMatrixIndexuivARB_args[2] = {"size", "indices"};
static const trace::FunctionSig _glMatrixIndexuivARB_sig = {719, "glMatrixIndexuivARB", 2, _glMatrixIndexuivARB_args};

static const char * _glMatrixIndexPointerARB_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glMatrixIndexPointerARB_sig = {720, "glMatrixIndexPointerARB", 4, _glMatrixIndexPointerARB_args};

static const char * _glWindowPos2dARB_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2dARB_sig = {721, "glWindowPos2dARB", 2, _glWindowPos2dARB_args};

static const char * _glWindowPos2dvARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2dvARB_sig = {722, "glWindowPos2dvARB", 1, _glWindowPos2dvARB_args};

static const char * _glWindowPos2fARB_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2fARB_sig = {723, "glWindowPos2fARB", 2, _glWindowPos2fARB_args};

static const char * _glWindowPos2fvARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2fvARB_sig = {724, "glWindowPos2fvARB", 1, _glWindowPos2fvARB_args};

static const char * _glWindowPos2iARB_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2iARB_sig = {725, "glWindowPos2iARB", 2, _glWindowPos2iARB_args};

static const char * _glWindowPos2ivARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2ivARB_sig = {726, "glWindowPos2ivARB", 1, _glWindowPos2ivARB_args};

static const char * _glWindowPos2sARB_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2sARB_sig = {727, "glWindowPos2sARB", 2, _glWindowPos2sARB_args};

static const char * _glWindowPos2svARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2svARB_sig = {728, "glWindowPos2svARB", 1, _glWindowPos2svARB_args};

static const char * _glWindowPos3dARB_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3dARB_sig = {729, "glWindowPos3dARB", 3, _glWindowPos3dARB_args};

static const char * _glWindowPos3dvARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3dvARB_sig = {730, "glWindowPos3dvARB", 1, _glWindowPos3dvARB_args};

static const char * _glWindowPos3fARB_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3fARB_sig = {731, "glWindowPos3fARB", 3, _glWindowPos3fARB_args};

static const char * _glWindowPos3fvARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3fvARB_sig = {732, "glWindowPos3fvARB", 1, _glWindowPos3fvARB_args};

static const char * _glWindowPos3iARB_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3iARB_sig = {733, "glWindowPos3iARB", 3, _glWindowPos3iARB_args};

static const char * _glWindowPos3ivARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3ivARB_sig = {734, "glWindowPos3ivARB", 1, _glWindowPos3ivARB_args};

static const char * _glWindowPos3sARB_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3sARB_sig = {735, "glWindowPos3sARB", 3, _glWindowPos3sARB_args};

static const char * _glWindowPos3svARB_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3svARB_sig = {736, "glWindowPos3svARB", 1, _glWindowPos3svARB_args};

static const char * _glVertexAttrib1dARB_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1dARB_sig = {737, "glVertexAttrib1dARB", 2, _glVertexAttrib1dARB_args};

static const char * _glVertexAttrib1dvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1dvARB_sig = {738, "glVertexAttrib1dvARB", 2, _glVertexAttrib1dvARB_args};

static const char * _glVertexAttrib1fARB_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1fARB_sig = {739, "glVertexAttrib1fARB", 2, _glVertexAttrib1fARB_args};

static const char * _glVertexAttrib1fvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1fvARB_sig = {740, "glVertexAttrib1fvARB", 2, _glVertexAttrib1fvARB_args};

static const char * _glVertexAttrib1sARB_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1sARB_sig = {741, "glVertexAttrib1sARB", 2, _glVertexAttrib1sARB_args};

static const char * _glVertexAttrib1svARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1svARB_sig = {742, "glVertexAttrib1svARB", 2, _glVertexAttrib1svARB_args};

static const char * _glVertexAttrib2dARB_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2dARB_sig = {743, "glVertexAttrib2dARB", 3, _glVertexAttrib2dARB_args};

static const char * _glVertexAttrib2dvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2dvARB_sig = {744, "glVertexAttrib2dvARB", 2, _glVertexAttrib2dvARB_args};

static const char * _glVertexAttrib2fARB_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2fARB_sig = {745, "glVertexAttrib2fARB", 3, _glVertexAttrib2fARB_args};

static const char * _glVertexAttrib2fvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2fvARB_sig = {746, "glVertexAttrib2fvARB", 2, _glVertexAttrib2fvARB_args};

static const char * _glVertexAttrib2sARB_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2sARB_sig = {747, "glVertexAttrib2sARB", 3, _glVertexAttrib2sARB_args};

static const char * _glVertexAttrib2svARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2svARB_sig = {748, "glVertexAttrib2svARB", 2, _glVertexAttrib2svARB_args};

static const char * _glVertexAttrib3dARB_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3dARB_sig = {749, "glVertexAttrib3dARB", 4, _glVertexAttrib3dARB_args};

static const char * _glVertexAttrib3dvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3dvARB_sig = {750, "glVertexAttrib3dvARB", 2, _glVertexAttrib3dvARB_args};

static const char * _glVertexAttrib3fARB_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3fARB_sig = {751, "glVertexAttrib3fARB", 4, _glVertexAttrib3fARB_args};

static const char * _glVertexAttrib3fvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3fvARB_sig = {752, "glVertexAttrib3fvARB", 2, _glVertexAttrib3fvARB_args};

static const char * _glVertexAttrib3sARB_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3sARB_sig = {753, "glVertexAttrib3sARB", 4, _glVertexAttrib3sARB_args};

static const char * _glVertexAttrib3svARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3svARB_sig = {754, "glVertexAttrib3svARB", 2, _glVertexAttrib3svARB_args};

static const char * _glVertexAttrib4NbvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NbvARB_sig = {755, "glVertexAttrib4NbvARB", 2, _glVertexAttrib4NbvARB_args};

static const char * _glVertexAttrib4NivARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NivARB_sig = {756, "glVertexAttrib4NivARB", 2, _glVertexAttrib4NivARB_args};

static const char * _glVertexAttrib4NsvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NsvARB_sig = {757, "glVertexAttrib4NsvARB", 2, _glVertexAttrib4NsvARB_args};

static const char * _glVertexAttrib4NubARB_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4NubARB_sig = {758, "glVertexAttrib4NubARB", 5, _glVertexAttrib4NubARB_args};

static const char * _glVertexAttrib4NubvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NubvARB_sig = {759, "glVertexAttrib4NubvARB", 2, _glVertexAttrib4NubvARB_args};

static const char * _glVertexAttrib4NuivARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NuivARB_sig = {760, "glVertexAttrib4NuivARB", 2, _glVertexAttrib4NuivARB_args};

static const char * _glVertexAttrib4NusvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4NusvARB_sig = {761, "glVertexAttrib4NusvARB", 2, _glVertexAttrib4NusvARB_args};

static const char * _glVertexAttrib4bvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4bvARB_sig = {762, "glVertexAttrib4bvARB", 2, _glVertexAttrib4bvARB_args};

static const char * _glVertexAttrib4dARB_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4dARB_sig = {763, "glVertexAttrib4dARB", 5, _glVertexAttrib4dARB_args};

static const char * _glVertexAttrib4dvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4dvARB_sig = {764, "glVertexAttrib4dvARB", 2, _glVertexAttrib4dvARB_args};

static const char * _glVertexAttrib4fARB_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4fARB_sig = {765, "glVertexAttrib4fARB", 5, _glVertexAttrib4fARB_args};

static const char * _glVertexAttrib4fvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4fvARB_sig = {766, "glVertexAttrib4fvARB", 2, _glVertexAttrib4fvARB_args};

static const char * _glVertexAttrib4ivARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4ivARB_sig = {767, "glVertexAttrib4ivARB", 2, _glVertexAttrib4ivARB_args};

static const char * _glVertexAttrib4sARB_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4sARB_sig = {768, "glVertexAttrib4sARB", 5, _glVertexAttrib4sARB_args};

static const char * _glVertexAttrib4svARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4svARB_sig = {769, "glVertexAttrib4svARB", 2, _glVertexAttrib4svARB_args};

static const char * _glVertexAttrib4ubvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4ubvARB_sig = {770, "glVertexAttrib4ubvARB", 2, _glVertexAttrib4ubvARB_args};

static const char * _glVertexAttrib4uivARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4uivARB_sig = {771, "glVertexAttrib4uivARB", 2, _glVertexAttrib4uivARB_args};

static const char * _glVertexAttrib4usvARB_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4usvARB_sig = {772, "glVertexAttrib4usvARB", 2, _glVertexAttrib4usvARB_args};

static const char * _glVertexAttribPointerARB_args[6] = {"index", "size", "type", "normalized", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribPointerARB_sig = {773, "glVertexAttribPointerARB", 6, _glVertexAttribPointerARB_args};

static const char * _glEnableVertexAttribArrayARB_args[1] = {"index"};
static const trace::FunctionSig _glEnableVertexAttribArrayARB_sig = {774, "glEnableVertexAttribArrayARB", 1, _glEnableVertexAttribArrayARB_args};

static const char * _glDisableVertexAttribArrayARB_args[1] = {"index"};
static const trace::FunctionSig _glDisableVertexAttribArrayARB_sig = {775, "glDisableVertexAttribArrayARB", 1, _glDisableVertexAttribArrayARB_args};

static const char * _glProgramStringARB_args[4] = {"target", "format", "len", "string"};
static const trace::FunctionSig _glProgramStringARB_sig = {776, "glProgramStringARB", 4, _glProgramStringARB_args};

static const char * _glBindProgramARB_args[2] = {"target", "program"};
static const trace::FunctionSig _glBindProgramARB_sig = {777, "glBindProgramARB", 2, _glBindProgramARB_args};

static const char * _glDeleteProgramsARB_args[2] = {"n", "programs"};
static const trace::FunctionSig _glDeleteProgramsARB_sig = {778, "glDeleteProgramsARB", 2, _glDeleteProgramsARB_args};

static const char * _glGenProgramsARB_args[2] = {"n", "programs"};
static const trace::FunctionSig _glGenProgramsARB_sig = {779, "glGenProgramsARB", 2, _glGenProgramsARB_args};

static const char * _glProgramEnvParameter4dARB_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramEnvParameter4dARB_sig = {780, "glProgramEnvParameter4dARB", 6, _glProgramEnvParameter4dARB_args};

static const char * _glProgramEnvParameter4dvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramEnvParameter4dvARB_sig = {781, "glProgramEnvParameter4dvARB", 3, _glProgramEnvParameter4dvARB_args};

static const char * _glProgramEnvParameter4fARB_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramEnvParameter4fARB_sig = {782, "glProgramEnvParameter4fARB", 6, _glProgramEnvParameter4fARB_args};

static const char * _glProgramEnvParameter4fvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramEnvParameter4fvARB_sig = {783, "glProgramEnvParameter4fvARB", 3, _glProgramEnvParameter4fvARB_args};

static const char * _glProgramLocalParameter4dARB_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramLocalParameter4dARB_sig = {784, "glProgramLocalParameter4dARB", 6, _glProgramLocalParameter4dARB_args};

static const char * _glProgramLocalParameter4dvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramLocalParameter4dvARB_sig = {785, "glProgramLocalParameter4dvARB", 3, _glProgramLocalParameter4dvARB_args};

static const char * _glProgramLocalParameter4fARB_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramLocalParameter4fARB_sig = {786, "glProgramLocalParameter4fARB", 6, _glProgramLocalParameter4fARB_args};

static const char * _glProgramLocalParameter4fvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramLocalParameter4fvARB_sig = {787, "glProgramLocalParameter4fvARB", 3, _glProgramLocalParameter4fvARB_args};

static const char * _glGetProgramEnvParameterdvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramEnvParameterdvARB_sig = {788, "glGetProgramEnvParameterdvARB", 3, _glGetProgramEnvParameterdvARB_args};

static const char * _glGetProgramEnvParameterfvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramEnvParameterfvARB_sig = {789, "glGetProgramEnvParameterfvARB", 3, _glGetProgramEnvParameterfvARB_args};

static const char * _glGetProgramLocalParameterdvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramLocalParameterdvARB_sig = {790, "glGetProgramLocalParameterdvARB", 3, _glGetProgramLocalParameterdvARB_args};

static const char * _glGetProgramLocalParameterfvARB_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramLocalParameterfvARB_sig = {791, "glGetProgramLocalParameterfvARB", 3, _glGetProgramLocalParameterfvARB_args};

static const char * _glGetProgramivARB_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetProgramivARB_sig = {792, "glGetProgramivARB", 3, _glGetProgramivARB_args};

static const char * _glGetProgramStringARB_args[3] = {"target", "pname", "string"};
static const trace::FunctionSig _glGetProgramStringARB_sig = {793, "glGetProgramStringARB", 3, _glGetProgramStringARB_args};

static const char * _glGetVertexAttribdvARB_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribdvARB_sig = {794, "glGetVertexAttribdvARB", 3, _glGetVertexAttribdvARB_args};

static const char * _glGetVertexAttribfvARB_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribfvARB_sig = {795, "glGetVertexAttribfvARB", 3, _glGetVertexAttribfvARB_args};

static const char * _glGetVertexAttribivARB_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribivARB_sig = {796, "glGetVertexAttribivARB", 3, _glGetVertexAttribivARB_args};

static const char * _glGetVertexAttribPointervARB_args[3] = {"index", "pname", "pointer"};
static const trace::FunctionSig _glGetVertexAttribPointervARB_sig = {797, "glGetVertexAttribPointervARB", 3, _glGetVertexAttribPointervARB_args};

static const char * _glIsProgramARB_args[1] = {"program"};
static const trace::FunctionSig _glIsProgramARB_sig = {798, "glIsProgramARB", 1, _glIsProgramARB_args};

static const char * _glBindBufferARB_args[2] = {"target", "buffer"};
static const trace::FunctionSig _glBindBufferARB_sig = {799, "glBindBufferARB", 2, _glBindBufferARB_args};

static const char * _glDeleteBuffersARB_args[2] = {"n", "buffers"};
static const trace::FunctionSig _glDeleteBuffersARB_sig = {800, "glDeleteBuffersARB", 2, _glDeleteBuffersARB_args};

static const char * _glGenBuffersARB_args[2] = {"n", "buffers"};
static const trace::FunctionSig _glGenBuffersARB_sig = {801, "glGenBuffersARB", 2, _glGenBuffersARB_args};

static const char * _glIsBufferARB_args[1] = {"buffer"};
static const trace::FunctionSig _glIsBufferARB_sig = {802, "glIsBufferARB", 1, _glIsBufferARB_args};

static const char * _glBufferDataARB_args[4] = {"target", "size", "data", "usage"};
static const trace::FunctionSig _glBufferDataARB_sig = {803, "glBufferDataARB", 4, _glBufferDataARB_args};

static const char * _glBufferSubDataARB_args[4] = {"target", "offset", "size", "data"};
static const trace::FunctionSig _glBufferSubDataARB_sig = {804, "glBufferSubDataARB", 4, _glBufferSubDataARB_args};

static const char * _glGetBufferSubDataARB_args[4] = {"target", "offset", "size", "data"};
static const trace::FunctionSig _glGetBufferSubDataARB_sig = {805, "glGetBufferSubDataARB", 4, _glGetBufferSubDataARB_args};

static const char * _glMapBufferARB_args[2] = {"target", "access"};
static const trace::FunctionSig _glMapBufferARB_sig = {806, "glMapBufferARB", 2, _glMapBufferARB_args};

static const char * _glUnmapBufferARB_args[1] = {"target"};
static const trace::FunctionSig _glUnmapBufferARB_sig = {807, "glUnmapBufferARB", 1, _glUnmapBufferARB_args};

static const char * _glGetBufferParameterivARB_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferParameterivARB_sig = {808, "glGetBufferParameterivARB", 3, _glGetBufferParameterivARB_args};

static const char * _glGetBufferPointervARB_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferPointervARB_sig = {809, "glGetBufferPointervARB", 3, _glGetBufferPointervARB_args};

static const char * _glGenQueriesARB_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenQueriesARB_sig = {810, "glGenQueriesARB", 2, _glGenQueriesARB_args};

static const char * _glDeleteQueriesARB_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteQueriesARB_sig = {811, "glDeleteQueriesARB", 2, _glDeleteQueriesARB_args};

static const char * _glIsQueryARB_args[1] = {"id"};
static const trace::FunctionSig _glIsQueryARB_sig = {812, "glIsQueryARB", 1, _glIsQueryARB_args};

static const char * _glBeginQueryARB_args[2] = {"target", "id"};
static const trace::FunctionSig _glBeginQueryARB_sig = {813, "glBeginQueryARB", 2, _glBeginQueryARB_args};

static const char * _glEndQueryARB_args[1] = {"target"};
static const trace::FunctionSig _glEndQueryARB_sig = {814, "glEndQueryARB", 1, _glEndQueryARB_args};

static const char * _glGetQueryivARB_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetQueryivARB_sig = {815, "glGetQueryivARB", 3, _glGetQueryivARB_args};

static const char * _glGetQueryObjectivARB_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectivARB_sig = {816, "glGetQueryObjectivARB", 3, _glGetQueryObjectivARB_args};

static const char * _glGetQueryObjectuivARB_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectuivARB_sig = {817, "glGetQueryObjectuivARB", 3, _glGetQueryObjectuivARB_args};

static const char * _glDeleteObjectARB_args[1] = {"obj"};
static const trace::FunctionSig _glDeleteObjectARB_sig = {818, "glDeleteObjectARB", 1, _glDeleteObjectARB_args};

static const char * _glGetHandleARB_args[1] = {"pname"};
static const trace::FunctionSig _glGetHandleARB_sig = {819, "glGetHandleARB", 1, _glGetHandleARB_args};

static const char * _glDetachObjectARB_args[2] = {"containerObj", "attachedObj"};
static const trace::FunctionSig _glDetachObjectARB_sig = {820, "glDetachObjectARB", 2, _glDetachObjectARB_args};

static const char * _glCreateShaderObjectARB_args[1] = {"shaderType"};
static const trace::FunctionSig _glCreateShaderObjectARB_sig = {821, "glCreateShaderObjectARB", 1, _glCreateShaderObjectARB_args};

static const char * _glShaderSourceARB_args[4] = {"shaderObj", "count", "string", "length"};
static const trace::FunctionSig _glShaderSourceARB_sig = {822, "glShaderSourceARB", 4, _glShaderSourceARB_args};

static const char * _glCompileShaderARB_args[1] = {"shaderObj"};
static const trace::FunctionSig _glCompileShaderARB_sig = {823, "glCompileShaderARB", 1, _glCompileShaderARB_args};

static const char ** _glCreateProgramObjectARB_args = NULL;
static const trace::FunctionSig _glCreateProgramObjectARB_sig = {824, "glCreateProgramObjectARB", 0, _glCreateProgramObjectARB_args};

static const char * _glAttachObjectARB_args[2] = {"containerObj", "obj"};
static const trace::FunctionSig _glAttachObjectARB_sig = {825, "glAttachObjectARB", 2, _glAttachObjectARB_args};

static const char * _glLinkProgramARB_args[1] = {"programObj"};
static const trace::FunctionSig _glLinkProgramARB_sig = {826, "glLinkProgramARB", 1, _glLinkProgramARB_args};

static const char * _glUseProgramObjectARB_args[1] = {"programObj"};
static const trace::FunctionSig _glUseProgramObjectARB_sig = {827, "glUseProgramObjectARB", 1, _glUseProgramObjectARB_args};

static const char * _glValidateProgramARB_args[1] = {"programObj"};
static const trace::FunctionSig _glValidateProgramARB_sig = {828, "glValidateProgramARB", 1, _glValidateProgramARB_args};

static const char * _glUniform1fARB_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1fARB_sig = {829, "glUniform1fARB", 2, _glUniform1fARB_args};

static const char * _glUniform2fARB_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2fARB_sig = {830, "glUniform2fARB", 3, _glUniform2fARB_args};

static const char * _glUniform3fARB_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3fARB_sig = {831, "glUniform3fARB", 4, _glUniform3fARB_args};

static const char * _glUniform4fARB_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4fARB_sig = {832, "glUniform4fARB", 5, _glUniform4fARB_args};

static const char * _glUniform1iARB_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1iARB_sig = {833, "glUniform1iARB", 2, _glUniform1iARB_args};

static const char * _glUniform2iARB_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2iARB_sig = {834, "glUniform2iARB", 3, _glUniform2iARB_args};

static const char * _glUniform3iARB_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3iARB_sig = {835, "glUniform3iARB", 4, _glUniform3iARB_args};

static const char * _glUniform4iARB_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4iARB_sig = {836, "glUniform4iARB", 5, _glUniform4iARB_args};

static const char * _glUniform1fvARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1fvARB_sig = {837, "glUniform1fvARB", 3, _glUniform1fvARB_args};

static const char * _glUniform2fvARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2fvARB_sig = {838, "glUniform2fvARB", 3, _glUniform2fvARB_args};

static const char * _glUniform3fvARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3fvARB_sig = {839, "glUniform3fvARB", 3, _glUniform3fvARB_args};

static const char * _glUniform4fvARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4fvARB_sig = {840, "glUniform4fvARB", 3, _glUniform4fvARB_args};

static const char * _glUniform1ivARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1ivARB_sig = {841, "glUniform1ivARB", 3, _glUniform1ivARB_args};

static const char * _glUniform2ivARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2ivARB_sig = {842, "glUniform2ivARB", 3, _glUniform2ivARB_args};

static const char * _glUniform3ivARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3ivARB_sig = {843, "glUniform3ivARB", 3, _glUniform3ivARB_args};

static const char * _glUniform4ivARB_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4ivARB_sig = {844, "glUniform4ivARB", 3, _glUniform4ivARB_args};

static const char * _glUniformMatrix2fvARB_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2fvARB_sig = {845, "glUniformMatrix2fvARB", 4, _glUniformMatrix2fvARB_args};

static const char * _glUniformMatrix3fvARB_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3fvARB_sig = {846, "glUniformMatrix3fvARB", 4, _glUniformMatrix3fvARB_args};

static const char * _glUniformMatrix4fvARB_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4fvARB_sig = {847, "glUniformMatrix4fvARB", 4, _glUniformMatrix4fvARB_args};

static const char * _glGetObjectParameterfvARB_args[3] = {"obj", "pname", "params"};
static const trace::FunctionSig _glGetObjectParameterfvARB_sig = {848, "glGetObjectParameterfvARB", 3, _glGetObjectParameterfvARB_args};

static const char * _glGetObjectParameterivARB_args[3] = {"obj", "pname", "params"};
static const trace::FunctionSig _glGetObjectParameterivARB_sig = {849, "glGetObjectParameterivARB", 3, _glGetObjectParameterivARB_args};

static const char * _glGetInfoLogARB_args[4] = {"obj", "maxLength", "length", "infoLog"};
static const trace::FunctionSig _glGetInfoLogARB_sig = {850, "glGetInfoLogARB", 4, _glGetInfoLogARB_args};

static const char * _glGetAttachedObjectsARB_args[4] = {"containerObj", "maxCount", "count", "obj"};
static const trace::FunctionSig _glGetAttachedObjectsARB_sig = {851, "glGetAttachedObjectsARB", 4, _glGetAttachedObjectsARB_args};

static const char * _glGetUniformLocationARB_args[2] = {"programObj", "name"};
static const trace::FunctionSig _glGetUniformLocationARB_sig = {852, "glGetUniformLocationARB", 2, _glGetUniformLocationARB_args};

static const char * _glGetActiveUniformARB_args[7] = {"programObj", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetActiveUniformARB_sig = {853, "glGetActiveUniformARB", 7, _glGetActiveUniformARB_args};

static const char * _glGetUniformfvARB_args[3] = {"programObj", "location", "params"};
static const trace::FunctionSig _glGetUniformfvARB_sig = {854, "glGetUniformfvARB", 3, _glGetUniformfvARB_args};

static const char * _glGetUniformivARB_args[3] = {"programObj", "location", "params"};
static const trace::FunctionSig _glGetUniformivARB_sig = {855, "glGetUniformivARB", 3, _glGetUniformivARB_args};

static const char * _glGetShaderSourceARB_args[4] = {"obj", "bufSize", "length", "source"};
static const trace::FunctionSig _glGetShaderSourceARB_sig = {856, "glGetShaderSourceARB", 4, _glGetShaderSourceARB_args};

static const char * _glBindAttribLocationARB_args[3] = {"programObj", "index", "name"};
static const trace::FunctionSig _glBindAttribLocationARB_sig = {857, "glBindAttribLocationARB", 3, _glBindAttribLocationARB_args};

static const char * _glGetActiveAttribARB_args[7] = {"programObj", "index", "maxLength", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetActiveAttribARB_sig = {858, "glGetActiveAttribARB", 7, _glGetActiveAttribARB_args};

static const char * _glGetAttribLocationARB_args[2] = {"programObj", "name"};
static const trace::FunctionSig _glGetAttribLocationARB_sig = {859, "glGetAttribLocationARB", 2, _glGetAttribLocationARB_args};

static const char * _glDrawBuffersARB_args[2] = {"n", "bufs"};
static const trace::FunctionSig _glDrawBuffersARB_sig = {860, "glDrawBuffersARB", 2, _glDrawBuffersARB_args};

static const char * _glClampColorARB_args[2] = {"target", "clamp"};
static const trace::FunctionSig _glClampColorARB_sig = {861, "glClampColorARB", 2, _glClampColorARB_args};

static const char * _glDrawArraysInstancedARB_args[4] = {"mode", "first", "count", "primcount"};
static const trace::FunctionSig _glDrawArraysInstancedARB_sig = {862, "glDrawArraysInstancedARB", 4, _glDrawArraysInstancedARB_args};

static const char * _glDrawElementsInstancedARB_args[5] = {"mode", "count", "type", "indices", "primcount"};
static const trace::FunctionSig _glDrawElementsInstancedARB_sig = {863, "glDrawElementsInstancedARB", 5, _glDrawElementsInstancedARB_args};

static const char * _glIsRenderbuffer_args[1] = {"renderbuffer"};
static const trace::FunctionSig _glIsRenderbuffer_sig = {864, "glIsRenderbuffer", 1, _glIsRenderbuffer_args};

static const char * _glBindRenderbuffer_args[2] = {"target", "renderbuffer"};
static const trace::FunctionSig _glBindRenderbuffer_sig = {865, "glBindRenderbuffer", 2, _glBindRenderbuffer_args};

static const char * _glDeleteRenderbuffers_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glDeleteRenderbuffers_sig = {866, "glDeleteRenderbuffers", 2, _glDeleteRenderbuffers_args};

static const char * _glGenRenderbuffers_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glGenRenderbuffers_sig = {867, "glGenRenderbuffers", 2, _glGenRenderbuffers_args};

static const char * _glRenderbufferStorage_args[4] = {"target", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorage_sig = {868, "glRenderbufferStorage", 4, _glRenderbufferStorage_args};

static const char * _glGetRenderbufferParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetRenderbufferParameteriv_sig = {869, "glGetRenderbufferParameteriv", 3, _glGetRenderbufferParameteriv_args};

static const char * _glIsFramebuffer_args[1] = {"framebuffer"};
static const trace::FunctionSig _glIsFramebuffer_sig = {870, "glIsFramebuffer", 1, _glIsFramebuffer_args};

static const char * _glBindFramebuffer_args[2] = {"target", "framebuffer"};
static const trace::FunctionSig _glBindFramebuffer_sig = {871, "glBindFramebuffer", 2, _glBindFramebuffer_args};

static const char * _glDeleteFramebuffers_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glDeleteFramebuffers_sig = {872, "glDeleteFramebuffers", 2, _glDeleteFramebuffers_args};

static const char * _glGenFramebuffers_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glGenFramebuffers_sig = {873, "glGenFramebuffers", 2, _glGenFramebuffers_args};

static const char * _glCheckFramebufferStatus_args[1] = {"target"};
static const trace::FunctionSig _glCheckFramebufferStatus_sig = {874, "glCheckFramebufferStatus", 1, _glCheckFramebufferStatus_args};

static const char * _glFramebufferTexture1D_args[5] = {"target", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture1D_sig = {875, "glFramebufferTexture1D", 5, _glFramebufferTexture1D_args};

static const char * _glFramebufferTexture2D_args[5] = {"target", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture2D_sig = {876, "glFramebufferTexture2D", 5, _glFramebufferTexture2D_args};

static const char * _glFramebufferTexture3D_args[6] = {"target", "attachment", "textarget", "texture", "level", "zoffset"};
static const trace::FunctionSig _glFramebufferTexture3D_sig = {877, "glFramebufferTexture3D", 6, _glFramebufferTexture3D_args};

static const char * _glFramebufferRenderbuffer_args[4] = {"target", "attachment", "renderbuffertarget", "renderbuffer"};
static const trace::FunctionSig _glFramebufferRenderbuffer_sig = {878, "glFramebufferRenderbuffer", 4, _glFramebufferRenderbuffer_args};

static const char * _glGetFramebufferAttachmentParameteriv_args[4] = {"target", "attachment", "pname", "params"};
static const trace::FunctionSig _glGetFramebufferAttachmentParameteriv_sig = {879, "glGetFramebufferAttachmentParameteriv", 4, _glGetFramebufferAttachmentParameteriv_args};

static const char * _glGenerateMipmap_args[1] = {"target"};
static const trace::FunctionSig _glGenerateMipmap_sig = {880, "glGenerateMipmap", 1, _glGenerateMipmap_args};

static const char * _glBlitFramebuffer_args[10] = {"srcX0", "srcY0", "srcX1", "srcY1", "dstX0", "dstY0", "dstX1", "dstY1", "mask", "filter"};
static const trace::FunctionSig _glBlitFramebuffer_sig = {881, "glBlitFramebuffer", 10, _glBlitFramebuffer_args};

static const char * _glRenderbufferStorageMultisample_args[5] = {"target", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisample_sig = {882, "glRenderbufferStorageMultisample", 5, _glRenderbufferStorageMultisample_args};

static const char * _glFramebufferTextureLayer_args[5] = {"target", "attachment", "texture", "level", "layer"};
static const trace::FunctionSig _glFramebufferTextureLayer_sig = {883, "glFramebufferTextureLayer", 5, _glFramebufferTextureLayer_args};

static const char * _glProgramParameteriARB_args[3] = {"program", "pname", "value"};
static const trace::FunctionSig _glProgramParameteriARB_sig = {884, "glProgramParameteriARB", 3, _glProgramParameteriARB_args};

static const char * _glFramebufferTextureARB_args[4] = {"target", "attachment", "texture", "level"};
static const trace::FunctionSig _glFramebufferTextureARB_sig = {885, "glFramebufferTextureARB", 4, _glFramebufferTextureARB_args};

static const char * _glFramebufferTextureLayerARB_args[5] = {"target", "attachment", "texture", "level", "layer"};
static const trace::FunctionSig _glFramebufferTextureLayerARB_sig = {886, "glFramebufferTextureLayerARB", 5, _glFramebufferTextureLayerARB_args};

static const char * _glFramebufferTextureFaceARB_args[5] = {"target", "attachment", "texture", "level", "face"};
static const trace::FunctionSig _glFramebufferTextureFaceARB_sig = {887, "glFramebufferTextureFaceARB", 5, _glFramebufferTextureFaceARB_args};

static const char * _glVertexAttribDivisorARB_args[2] = {"index", "divisor"};
static const trace::FunctionSig _glVertexAttribDivisorARB_sig = {888, "glVertexAttribDivisorARB", 2, _glVertexAttribDivisorARB_args};

static const char * _glMapBufferRange_args[4] = {"target", "offset", "length", "access"};
static const trace::FunctionSig _glMapBufferRange_sig = {889, "glMapBufferRange", 4, _glMapBufferRange_args};

static const char * _glFlushMappedBufferRange_args[3] = {"target", "offset", "length"};
static const trace::FunctionSig _glFlushMappedBufferRange_sig = {890, "glFlushMappedBufferRange", 3, _glFlushMappedBufferRange_args};

static const char * _glTexBufferARB_args[3] = {"target", "internalformat", "buffer"};
static const trace::FunctionSig _glTexBufferARB_sig = {891, "glTexBufferARB", 3, _glTexBufferARB_args};

static const char * _glBindVertexArray_args[1] = {"array"};
static const trace::FunctionSig _glBindVertexArray_sig = {892, "glBindVertexArray", 1, _glBindVertexArray_args};

static const char * _glDeleteVertexArrays_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glDeleteVertexArrays_sig = {893, "glDeleteVertexArrays", 2, _glDeleteVertexArrays_args};

static const char * _glGenVertexArrays_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glGenVertexArrays_sig = {894, "glGenVertexArrays", 2, _glGenVertexArrays_args};

static const char * _glIsVertexArray_args[1] = {"array"};
static const trace::FunctionSig _glIsVertexArray_sig = {895, "glIsVertexArray", 1, _glIsVertexArray_args};

static const char * _glGetUniformIndices_args[4] = {"program", "uniformCount", "uniformNames", "uniformIndices"};
static const trace::FunctionSig _glGetUniformIndices_sig = {896, "glGetUniformIndices", 4, _glGetUniformIndices_args};

static const char * _glGetActiveUniformsiv_args[5] = {"program", "uniformCount", "uniformIndices", "pname", "params"};
static const trace::FunctionSig _glGetActiveUniformsiv_sig = {897, "glGetActiveUniformsiv", 5, _glGetActiveUniformsiv_args};

static const char * _glGetActiveUniformName_args[5] = {"program", "uniformIndex", "bufSize", "length", "uniformName"};
static const trace::FunctionSig _glGetActiveUniformName_sig = {898, "glGetActiveUniformName", 5, _glGetActiveUniformName_args};

static const char * _glGetUniformBlockIndex_args[2] = {"program", "uniformBlockName"};
static const trace::FunctionSig _glGetUniformBlockIndex_sig = {899, "glGetUniformBlockIndex", 2, _glGetUniformBlockIndex_args};

static const char * _glGetActiveUniformBlockiv_args[4] = {"program", "uniformBlockIndex", "pname", "params"};
static const trace::FunctionSig _glGetActiveUniformBlockiv_sig = {900, "glGetActiveUniformBlockiv", 4, _glGetActiveUniformBlockiv_args};

static const char * _glGetActiveUniformBlockName_args[5] = {"program", "uniformBlockIndex", "bufSize", "length", "uniformBlockName"};
static const trace::FunctionSig _glGetActiveUniformBlockName_sig = {901, "glGetActiveUniformBlockName", 5, _glGetActiveUniformBlockName_args};

static const char * _glUniformBlockBinding_args[3] = {"program", "uniformBlockIndex", "uniformBlockBinding"};
static const trace::FunctionSig _glUniformBlockBinding_sig = {902, "glUniformBlockBinding", 3, _glUniformBlockBinding_args};

static const char * _glCopyBufferSubData_args[5] = {"readTarget", "writeTarget", "readOffset", "writeOffset", "size"};
static const trace::FunctionSig _glCopyBufferSubData_sig = {903, "glCopyBufferSubData", 5, _glCopyBufferSubData_args};

static const char * _glDrawElementsBaseVertex_args[5] = {"mode", "count", "type", "indices", "basevertex"};
static const trace::FunctionSig _glDrawElementsBaseVertex_sig = {904, "glDrawElementsBaseVertex", 5, _glDrawElementsBaseVertex_args};

static const char * _glDrawRangeElementsBaseVertex_args[7] = {"mode", "start", "end", "count", "type", "indices", "basevertex"};
static const trace::FunctionSig _glDrawRangeElementsBaseVertex_sig = {905, "glDrawRangeElementsBaseVertex", 7, _glDrawRangeElementsBaseVertex_args};

static const char * _glDrawElementsInstancedBaseVertex_args[6] = {"mode", "count", "type", "indices", "primcount", "basevertex"};
static const trace::FunctionSig _glDrawElementsInstancedBaseVertex_sig = {906, "glDrawElementsInstancedBaseVertex", 6, _glDrawElementsInstancedBaseVertex_args};

static const char * _glMultiDrawElementsBaseVertex_args[6] = {"mode", "count", "type", "indices", "drawcount", "basevertex"};
static const trace::FunctionSig _glMultiDrawElementsBaseVertex_sig = {907, "glMultiDrawElementsBaseVertex", 6, _glMultiDrawElementsBaseVertex_args};

static const char * _glProvokingVertex_args[1] = {"mode"};
static const trace::FunctionSig _glProvokingVertex_sig = {908, "glProvokingVertex", 1, _glProvokingVertex_args};

static const char * _glFenceSync_args[2] = {"condition", "flags"};
static const trace::FunctionSig _glFenceSync_sig = {909, "glFenceSync", 2, _glFenceSync_args};

static const char * _glIsSync_args[1] = {"sync"};
static const trace::FunctionSig _glIsSync_sig = {910, "glIsSync", 1, _glIsSync_args};

static const char * _glDeleteSync_args[1] = {"sync"};
static const trace::FunctionSig _glDeleteSync_sig = {911, "glDeleteSync", 1, _glDeleteSync_args};

static const char * _glClientWaitSync_args[3] = {"sync", "flags", "timeout"};
static const trace::FunctionSig _glClientWaitSync_sig = {912, "glClientWaitSync", 3, _glClientWaitSync_args};

static const char * _glWaitSync_args[3] = {"sync", "flags", "timeout"};
static const trace::FunctionSig _glWaitSync_sig = {913, "glWaitSync", 3, _glWaitSync_args};

static const char * _glGetInteger64v_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetInteger64v_sig = {914, "glGetInteger64v", 2, _glGetInteger64v_args};

static const char * _glGetSynciv_args[5] = {"sync", "pname", "bufSize", "length", "values"};
static const trace::FunctionSig _glGetSynciv_sig = {915, "glGetSynciv", 5, _glGetSynciv_args};

static const char * _glTexImage2DMultisample_args[6] = {"target", "samples", "internalformat", "width", "height", "fixedsamplelocations"};
static const trace::FunctionSig _glTexImage2DMultisample_sig = {916, "glTexImage2DMultisample", 6, _glTexImage2DMultisample_args};

static const char * _glTexImage3DMultisample_args[7] = {"target", "samples", "internalformat", "width", "height", "depth", "fixedsamplelocations"};
static const trace::FunctionSig _glTexImage3DMultisample_sig = {917, "glTexImage3DMultisample", 7, _glTexImage3DMultisample_args};

static const char * _glGetMultisamplefv_args[3] = {"pname", "index", "val"};
static const trace::FunctionSig _glGetMultisamplefv_sig = {918, "glGetMultisamplefv", 3, _glGetMultisamplefv_args};

static const char * _glSampleMaski_args[2] = {"index", "mask"};
static const trace::FunctionSig _glSampleMaski_sig = {919, "glSampleMaski", 2, _glSampleMaski_args};

static const char * _glBlendEquationiARB_args[2] = {"buf", "mode"};
static const trace::FunctionSig _glBlendEquationiARB_sig = {920, "glBlendEquationiARB", 2, _glBlendEquationiARB_args};

static const char * _glBlendEquationSeparateiARB_args[3] = {"buf", "modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparateiARB_sig = {921, "glBlendEquationSeparateiARB", 3, _glBlendEquationSeparateiARB_args};

static const char * _glBlendFunciARB_args[3] = {"buf", "src", "dst"};
static const trace::FunctionSig _glBlendFunciARB_sig = {922, "glBlendFunciARB", 3, _glBlendFunciARB_args};

static const char * _glBlendFuncSeparateiARB_args[5] = {"buf", "srcRGB", "dstRGB", "srcAlpha", "dstAlpha"};
static const trace::FunctionSig _glBlendFuncSeparateiARB_sig = {923, "glBlendFuncSeparateiARB", 5, _glBlendFuncSeparateiARB_args};

static const char * _glMinSampleShadingARB_args[1] = {"value"};
static const trace::FunctionSig _glMinSampleShadingARB_sig = {924, "glMinSampleShadingARB", 1, _glMinSampleShadingARB_args};

static const char * _glNamedStringARB_args[5] = {"type", "namelen", "name", "stringlen", "string"};
static const trace::FunctionSig _glNamedStringARB_sig = {925, "glNamedStringARB", 5, _glNamedStringARB_args};

static const char * _glDeleteNamedStringARB_args[2] = {"namelen", "name"};
static const trace::FunctionSig _glDeleteNamedStringARB_sig = {926, "glDeleteNamedStringARB", 2, _glDeleteNamedStringARB_args};

static const char * _glCompileShaderIncludeARB_args[4] = {"shader", "count", "path", "length"};
static const trace::FunctionSig _glCompileShaderIncludeARB_sig = {927, "glCompileShaderIncludeARB", 4, _glCompileShaderIncludeARB_args};

static const char * _glIsNamedStringARB_args[2] = {"namelen", "name"};
static const trace::FunctionSig _glIsNamedStringARB_sig = {928, "glIsNamedStringARB", 2, _glIsNamedStringARB_args};

static const char * _glGetNamedStringARB_args[5] = {"namelen", "name", "bufSize", "stringlen", "string"};
static const trace::FunctionSig _glGetNamedStringARB_sig = {929, "glGetNamedStringARB", 5, _glGetNamedStringARB_args};

static const char * _glGetNamedStringivARB_args[4] = {"namelen", "name", "pname", "params"};
static const trace::FunctionSig _glGetNamedStringivARB_sig = {930, "glGetNamedStringivARB", 4, _glGetNamedStringivARB_args};

static const char * _glBindFragDataLocationIndexed_args[4] = {"program", "colorNumber", "index", "name"};
static const trace::FunctionSig _glBindFragDataLocationIndexed_sig = {931, "glBindFragDataLocationIndexed", 4, _glBindFragDataLocationIndexed_args};

static const char * _glGetFragDataIndex_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetFragDataIndex_sig = {932, "glGetFragDataIndex", 2, _glGetFragDataIndex_args};

static const char * _glGenSamplers_args[2] = {"count", "samplers"};
static const trace::FunctionSig _glGenSamplers_sig = {933, "glGenSamplers", 2, _glGenSamplers_args};

static const char * _glDeleteSamplers_args[2] = {"count", "samplers"};
static const trace::FunctionSig _glDeleteSamplers_sig = {934, "glDeleteSamplers", 2, _glDeleteSamplers_args};

static const char * _glIsSampler_args[1] = {"sampler"};
static const trace::FunctionSig _glIsSampler_sig = {935, "glIsSampler", 1, _glIsSampler_args};

static const char * _glBindSampler_args[2] = {"unit", "sampler"};
static const trace::FunctionSig _glBindSampler_sig = {936, "glBindSampler", 2, _glBindSampler_args};

static const char * _glSamplerParameteri_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameteri_sig = {937, "glSamplerParameteri", 3, _glSamplerParameteri_args};

static const char * _glSamplerParameteriv_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameteriv_sig = {938, "glSamplerParameteriv", 3, _glSamplerParameteriv_args};

static const char * _glSamplerParameterf_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameterf_sig = {939, "glSamplerParameterf", 3, _glSamplerParameterf_args};

static const char * _glSamplerParameterfv_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameterfv_sig = {940, "glSamplerParameterfv", 3, _glSamplerParameterfv_args};

static const char * _glSamplerParameterIiv_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameterIiv_sig = {941, "glSamplerParameterIiv", 3, _glSamplerParameterIiv_args};

static const char * _glSamplerParameterIuiv_args[3] = {"sampler", "pname", "param"};
static const trace::FunctionSig _glSamplerParameterIuiv_sig = {942, "glSamplerParameterIuiv", 3, _glSamplerParameterIuiv_args};

static const char * _glGetSamplerParameteriv_args[3] = {"sampler", "pname", "params"};
static const trace::FunctionSig _glGetSamplerParameteriv_sig = {943, "glGetSamplerParameteriv", 3, _glGetSamplerParameteriv_args};

static const char * _glGetSamplerParameterIiv_args[3] = {"sampler", "pname", "params"};
static const trace::FunctionSig _glGetSamplerParameterIiv_sig = {944, "glGetSamplerParameterIiv", 3, _glGetSamplerParameterIiv_args};

static const char * _glGetSamplerParameterfv_args[3] = {"sampler", "pname", "params"};
static const trace::FunctionSig _glGetSamplerParameterfv_sig = {945, "glGetSamplerParameterfv", 3, _glGetSamplerParameterfv_args};

static const char * _glGetSamplerParameterIuiv_args[3] = {"sampler", "pname", "params"};
static const trace::FunctionSig _glGetSamplerParameterIuiv_sig = {946, "glGetSamplerParameterIuiv", 3, _glGetSamplerParameterIuiv_args};

static const char * _glQueryCounter_args[2] = {"id", "target"};
static const trace::FunctionSig _glQueryCounter_sig = {947, "glQueryCounter", 2, _glQueryCounter_args};

static const char * _glGetQueryObjecti64v_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjecti64v_sig = {948, "glGetQueryObjecti64v", 3, _glGetQueryObjecti64v_args};

static const char * _glGetQueryObjectui64v_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectui64v_sig = {949, "glGetQueryObjectui64v", 3, _glGetQueryObjectui64v_args};

static const char * _glVertexP2ui_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP2ui_sig = {950, "glVertexP2ui", 2, _glVertexP2ui_args};

static const char * _glVertexP2uiv_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP2uiv_sig = {951, "glVertexP2uiv", 2, _glVertexP2uiv_args};

static const char * _glVertexP3ui_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP3ui_sig = {952, "glVertexP3ui", 2, _glVertexP3ui_args};

static const char * _glVertexP3uiv_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP3uiv_sig = {953, "glVertexP3uiv", 2, _glVertexP3uiv_args};

static const char * _glVertexP4ui_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP4ui_sig = {954, "glVertexP4ui", 2, _glVertexP4ui_args};

static const char * _glVertexP4uiv_args[2] = {"type", "value"};
static const trace::FunctionSig _glVertexP4uiv_sig = {955, "glVertexP4uiv", 2, _glVertexP4uiv_args};

static const char * _glTexCoordP1ui_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP1ui_sig = {956, "glTexCoordP1ui", 2, _glTexCoordP1ui_args};

static const char * _glTexCoordP1uiv_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP1uiv_sig = {957, "glTexCoordP1uiv", 2, _glTexCoordP1uiv_args};

static const char * _glTexCoordP2ui_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP2ui_sig = {958, "glTexCoordP2ui", 2, _glTexCoordP2ui_args};

static const char * _glTexCoordP2uiv_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP2uiv_sig = {959, "glTexCoordP2uiv", 2, _glTexCoordP2uiv_args};

static const char * _glTexCoordP3ui_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP3ui_sig = {960, "glTexCoordP3ui", 2, _glTexCoordP3ui_args};

static const char * _glTexCoordP3uiv_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP3uiv_sig = {961, "glTexCoordP3uiv", 2, _glTexCoordP3uiv_args};

static const char * _glTexCoordP4ui_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP4ui_sig = {962, "glTexCoordP4ui", 2, _glTexCoordP4ui_args};

static const char * _glTexCoordP4uiv_args[2] = {"type", "coords"};
static const trace::FunctionSig _glTexCoordP4uiv_sig = {963, "glTexCoordP4uiv", 2, _glTexCoordP4uiv_args};

static const char * _glMultiTexCoordP1ui_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP1ui_sig = {964, "glMultiTexCoordP1ui", 3, _glMultiTexCoordP1ui_args};

static const char * _glMultiTexCoordP1uiv_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP1uiv_sig = {965, "glMultiTexCoordP1uiv", 3, _glMultiTexCoordP1uiv_args};

static const char * _glMultiTexCoordP2ui_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP2ui_sig = {966, "glMultiTexCoordP2ui", 3, _glMultiTexCoordP2ui_args};

static const char * _glMultiTexCoordP2uiv_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP2uiv_sig = {967, "glMultiTexCoordP2uiv", 3, _glMultiTexCoordP2uiv_args};

static const char * _glMultiTexCoordP3ui_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP3ui_sig = {968, "glMultiTexCoordP3ui", 3, _glMultiTexCoordP3ui_args};

static const char * _glMultiTexCoordP3uiv_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP3uiv_sig = {969, "glMultiTexCoordP3uiv", 3, _glMultiTexCoordP3uiv_args};

static const char * _glMultiTexCoordP4ui_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP4ui_sig = {970, "glMultiTexCoordP4ui", 3, _glMultiTexCoordP4ui_args};

static const char * _glMultiTexCoordP4uiv_args[3] = {"texture", "type", "coords"};
static const trace::FunctionSig _glMultiTexCoordP4uiv_sig = {971, "glMultiTexCoordP4uiv", 3, _glMultiTexCoordP4uiv_args};

static const char * _glNormalP3ui_args[2] = {"type", "coords"};
static const trace::FunctionSig _glNormalP3ui_sig = {972, "glNormalP3ui", 2, _glNormalP3ui_args};

static const char * _glNormalP3uiv_args[2] = {"type", "coords"};
static const trace::FunctionSig _glNormalP3uiv_sig = {973, "glNormalP3uiv", 2, _glNormalP3uiv_args};

static const char * _glColorP3ui_args[2] = {"type", "color"};
static const trace::FunctionSig _glColorP3ui_sig = {974, "glColorP3ui", 2, _glColorP3ui_args};

static const char * _glColorP3uiv_args[2] = {"type", "color"};
static const trace::FunctionSig _glColorP3uiv_sig = {975, "glColorP3uiv", 2, _glColorP3uiv_args};

static const char * _glColorP4ui_args[2] = {"type", "color"};
static const trace::FunctionSig _glColorP4ui_sig = {976, "glColorP4ui", 2, _glColorP4ui_args};

static const char * _glColorP4uiv_args[2] = {"type", "color"};
static const trace::FunctionSig _glColorP4uiv_sig = {977, "glColorP4uiv", 2, _glColorP4uiv_args};

static const char * _glSecondaryColorP3ui_args[2] = {"type", "color"};
static const trace::FunctionSig _glSecondaryColorP3ui_sig = {978, "glSecondaryColorP3ui", 2, _glSecondaryColorP3ui_args};

static const char * _glSecondaryColorP3uiv_args[2] = {"type", "color"};
static const trace::FunctionSig _glSecondaryColorP3uiv_sig = {979, "glSecondaryColorP3uiv", 2, _glSecondaryColorP3uiv_args};

static const char * _glVertexAttribP1ui_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP1ui_sig = {980, "glVertexAttribP1ui", 4, _glVertexAttribP1ui_args};

static const char * _glVertexAttribP1uiv_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP1uiv_sig = {981, "glVertexAttribP1uiv", 4, _glVertexAttribP1uiv_args};

static const char * _glVertexAttribP2ui_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP2ui_sig = {982, "glVertexAttribP2ui", 4, _glVertexAttribP2ui_args};

static const char * _glVertexAttribP2uiv_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP2uiv_sig = {983, "glVertexAttribP2uiv", 4, _glVertexAttribP2uiv_args};

static const char * _glVertexAttribP3ui_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP3ui_sig = {984, "glVertexAttribP3ui", 4, _glVertexAttribP3ui_args};

static const char * _glVertexAttribP3uiv_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP3uiv_sig = {985, "glVertexAttribP3uiv", 4, _glVertexAttribP3uiv_args};

static const char * _glVertexAttribP4ui_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP4ui_sig = {986, "glVertexAttribP4ui", 4, _glVertexAttribP4ui_args};

static const char * _glVertexAttribP4uiv_args[4] = {"index", "type", "normalized", "value"};
static const trace::FunctionSig _glVertexAttribP4uiv_sig = {987, "glVertexAttribP4uiv", 4, _glVertexAttribP4uiv_args};

static const char * _glDrawArraysIndirect_args[2] = {"mode", "indirect"};
static const trace::FunctionSig _glDrawArraysIndirect_sig = {988, "glDrawArraysIndirect", 2, _glDrawArraysIndirect_args};

static const char * _glDrawElementsIndirect_args[3] = {"mode", "type", "indirect"};
static const trace::FunctionSig _glDrawElementsIndirect_sig = {989, "glDrawElementsIndirect", 3, _glDrawElementsIndirect_args};

static const char * _glUniform1d_args[2] = {"location", "x"};
static const trace::FunctionSig _glUniform1d_sig = {990, "glUniform1d", 2, _glUniform1d_args};

static const char * _glUniform2d_args[3] = {"location", "x", "y"};
static const trace::FunctionSig _glUniform2d_sig = {991, "glUniform2d", 3, _glUniform2d_args};

static const char * _glUniform3d_args[4] = {"location", "x", "y", "z"};
static const trace::FunctionSig _glUniform3d_sig = {992, "glUniform3d", 4, _glUniform3d_args};

static const char * _glUniform4d_args[5] = {"location", "x", "y", "z", "w"};
static const trace::FunctionSig _glUniform4d_sig = {993, "glUniform4d", 5, _glUniform4d_args};

static const char * _glUniform1dv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1dv_sig = {994, "glUniform1dv", 3, _glUniform1dv_args};

static const char * _glUniform2dv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2dv_sig = {995, "glUniform2dv", 3, _glUniform2dv_args};

static const char * _glUniform3dv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3dv_sig = {996, "glUniform3dv", 3, _glUniform3dv_args};

static const char * _glUniform4dv_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4dv_sig = {997, "glUniform4dv", 3, _glUniform4dv_args};

static const char * _glUniformMatrix2dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2dv_sig = {998, "glUniformMatrix2dv", 4, _glUniformMatrix2dv_args};

static const char * _glUniformMatrix3dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3dv_sig = {999, "glUniformMatrix3dv", 4, _glUniformMatrix3dv_args};

static const char * _glUniformMatrix4dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4dv_sig = {1000, "glUniformMatrix4dv", 4, _glUniformMatrix4dv_args};

static const char * _glUniformMatrix2x3dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2x3dv_sig = {1001, "glUniformMatrix2x3dv", 4, _glUniformMatrix2x3dv_args};

static const char * _glUniformMatrix2x4dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix2x4dv_sig = {1002, "glUniformMatrix2x4dv", 4, _glUniformMatrix2x4dv_args};

static const char * _glUniformMatrix3x2dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3x2dv_sig = {1003, "glUniformMatrix3x2dv", 4, _glUniformMatrix3x2dv_args};

static const char * _glUniformMatrix3x4dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix3x4dv_sig = {1004, "glUniformMatrix3x4dv", 4, _glUniformMatrix3x4dv_args};

static const char * _glUniformMatrix4x2dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4x2dv_sig = {1005, "glUniformMatrix4x2dv", 4, _glUniformMatrix4x2dv_args};

static const char * _glUniformMatrix4x3dv_args[4] = {"location", "count", "transpose", "value"};
static const trace::FunctionSig _glUniformMatrix4x3dv_sig = {1006, "glUniformMatrix4x3dv", 4, _glUniformMatrix4x3dv_args};

static const char * _glGetUniformdv_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformdv_sig = {1007, "glGetUniformdv", 3, _glGetUniformdv_args};

static const char * _glGetSubroutineUniformLocation_args[3] = {"program", "shadertype", "name"};
static const trace::FunctionSig _glGetSubroutineUniformLocation_sig = {1008, "glGetSubroutineUniformLocation", 3, _glGetSubroutineUniformLocation_args};

static const char * _glGetSubroutineIndex_args[3] = {"program", "shadertype", "name"};
static const trace::FunctionSig _glGetSubroutineIndex_sig = {1009, "glGetSubroutineIndex", 3, _glGetSubroutineIndex_args};

static const char * _glGetActiveSubroutineUniformiv_args[5] = {"program", "shadertype", "index", "pname", "values"};
static const trace::FunctionSig _glGetActiveSubroutineUniformiv_sig = {1010, "glGetActiveSubroutineUniformiv", 5, _glGetActiveSubroutineUniformiv_args};

static const char * _glGetActiveSubroutineUniformName_args[6] = {"program", "shadertype", "index", "bufsize", "length", "name"};
static const trace::FunctionSig _glGetActiveSubroutineUniformName_sig = {1011, "glGetActiveSubroutineUniformName", 6, _glGetActiveSubroutineUniformName_args};

static const char * _glGetActiveSubroutineName_args[6] = {"program", "shadertype", "index", "bufsize", "length", "name"};
static const trace::FunctionSig _glGetActiveSubroutineName_sig = {1012, "glGetActiveSubroutineName", 6, _glGetActiveSubroutineName_args};

static const char * _glUniformSubroutinesuiv_args[3] = {"shadertype", "count", "indices"};
static const trace::FunctionSig _glUniformSubroutinesuiv_sig = {1013, "glUniformSubroutinesuiv", 3, _glUniformSubroutinesuiv_args};

static const char * _glGetUniformSubroutineuiv_args[3] = {"shadertype", "location", "params"};
static const trace::FunctionSig _glGetUniformSubroutineuiv_sig = {1014, "glGetUniformSubroutineuiv", 3, _glGetUniformSubroutineuiv_args};

static const char * _glGetProgramStageiv_args[4] = {"program", "shadertype", "pname", "values"};
static const trace::FunctionSig _glGetProgramStageiv_sig = {1015, "glGetProgramStageiv", 4, _glGetProgramStageiv_args};

static const char * _glPatchParameteri_args[2] = {"pname", "value"};
static const trace::FunctionSig _glPatchParameteri_sig = {1016, "glPatchParameteri", 2, _glPatchParameteri_args};

static const char * _glPatchParameterfv_args[2] = {"pname", "values"};
static const trace::FunctionSig _glPatchParameterfv_sig = {1017, "glPatchParameterfv", 2, _glPatchParameterfv_args};

static const char * _glBindTransformFeedback_args[2] = {"target", "id"};
static const trace::FunctionSig _glBindTransformFeedback_sig = {1018, "glBindTransformFeedback", 2, _glBindTransformFeedback_args};

static const char * _glDeleteTransformFeedbacks_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteTransformFeedbacks_sig = {1019, "glDeleteTransformFeedbacks", 2, _glDeleteTransformFeedbacks_args};

static const char * _glGenTransformFeedbacks_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenTransformFeedbacks_sig = {1020, "glGenTransformFeedbacks", 2, _glGenTransformFeedbacks_args};

static const char * _glIsTransformFeedback_args[1] = {"id"};
static const trace::FunctionSig _glIsTransformFeedback_sig = {1021, "glIsTransformFeedback", 1, _glIsTransformFeedback_args};

static const char ** _glPauseTransformFeedback_args = NULL;
static const trace::FunctionSig _glPauseTransformFeedback_sig = {1022, "glPauseTransformFeedback", 0, _glPauseTransformFeedback_args};

static const char ** _glResumeTransformFeedback_args = NULL;
static const trace::FunctionSig _glResumeTransformFeedback_sig = {1023, "glResumeTransformFeedback", 0, _glResumeTransformFeedback_args};

static const char * _glDrawTransformFeedback_args[2] = {"mode", "id"};
static const trace::FunctionSig _glDrawTransformFeedback_sig = {1024, "glDrawTransformFeedback", 2, _glDrawTransformFeedback_args};

static const char * _glDrawTransformFeedbackStream_args[3] = {"mode", "id", "stream"};
static const trace::FunctionSig _glDrawTransformFeedbackStream_sig = {1025, "glDrawTransformFeedbackStream", 3, _glDrawTransformFeedbackStream_args};

static const char * _glBeginQueryIndexed_args[3] = {"target", "index", "id"};
static const trace::FunctionSig _glBeginQueryIndexed_sig = {1026, "glBeginQueryIndexed", 3, _glBeginQueryIndexed_args};

static const char * _glEndQueryIndexed_args[2] = {"target", "index"};
static const trace::FunctionSig _glEndQueryIndexed_sig = {1027, "glEndQueryIndexed", 2, _glEndQueryIndexed_args};

static const char * _glGetQueryIndexediv_args[4] = {"target", "index", "pname", "params"};
static const trace::FunctionSig _glGetQueryIndexediv_sig = {1028, "glGetQueryIndexediv", 4, _glGetQueryIndexediv_args};

static const char ** _glReleaseShaderCompiler_args = NULL;
static const trace::FunctionSig _glReleaseShaderCompiler_sig = {1029, "glReleaseShaderCompiler", 0, _glReleaseShaderCompiler_args};

static const char * _glShaderBinary_args[5] = {"count", "shaders", "binaryformat", "binary", "length"};
static const trace::FunctionSig _glShaderBinary_sig = {1030, "glShaderBinary", 5, _glShaderBinary_args};

static const char * _glGetShaderPrecisionFormat_args[4] = {"shadertype", "precisiontype", "range", "precision"};
static const trace::FunctionSig _glGetShaderPrecisionFormat_sig = {1031, "glGetShaderPrecisionFormat", 4, _glGetShaderPrecisionFormat_args};

static const char * _glDepthRangef_args[2] = {"n", "f"};
static const trace::FunctionSig _glDepthRangef_sig = {1032, "glDepthRangef", 2, _glDepthRangef_args};

static const char * _glClearDepthf_args[1] = {"d"};
static const trace::FunctionSig _glClearDepthf_sig = {1033, "glClearDepthf", 1, _glClearDepthf_args};

static const char * _glGetProgramBinary_args[5] = {"program", "bufSize", "length", "binaryFormat", "binary"};
static const trace::FunctionSig _glGetProgramBinary_sig = {1034, "glGetProgramBinary", 5, _glGetProgramBinary_args};

static const char * _glProgramBinary_args[4] = {"program", "binaryFormat", "binary", "length"};
static const trace::FunctionSig _glProgramBinary_sig = {1035, "glProgramBinary", 4, _glProgramBinary_args};

static const char * _glProgramParameteri_args[3] = {"program", "pname", "value"};
static const trace::FunctionSig _glProgramParameteri_sig = {1036, "glProgramParameteri", 3, _glProgramParameteri_args};

static const char * _glUseProgramStages_args[3] = {"pipeline", "stages", "program"};
static const trace::FunctionSig _glUseProgramStages_sig = {1037, "glUseProgramStages", 3, _glUseProgramStages_args};

static const char * _glActiveShaderProgram_args[2] = {"pipeline", "program"};
static const trace::FunctionSig _glActiveShaderProgram_sig = {1038, "glActiveShaderProgram", 2, _glActiveShaderProgram_args};

static const char * _glCreateShaderProgramv_args[3] = {"type", "count", "strings"};
static const trace::FunctionSig _glCreateShaderProgramv_sig = {1039, "glCreateShaderProgramv", 3, _glCreateShaderProgramv_args};

static const char * _glBindProgramPipeline_args[1] = {"pipeline"};
static const trace::FunctionSig _glBindProgramPipeline_sig = {1040, "glBindProgramPipeline", 1, _glBindProgramPipeline_args};

static const char * _glDeleteProgramPipelines_args[2] = {"n", "pipelines"};
static const trace::FunctionSig _glDeleteProgramPipelines_sig = {1041, "glDeleteProgramPipelines", 2, _glDeleteProgramPipelines_args};

static const char * _glGenProgramPipelines_args[2] = {"n", "pipelines"};
static const trace::FunctionSig _glGenProgramPipelines_sig = {1042, "glGenProgramPipelines", 2, _glGenProgramPipelines_args};

static const char * _glIsProgramPipeline_args[1] = {"pipeline"};
static const trace::FunctionSig _glIsProgramPipeline_sig = {1043, "glIsProgramPipeline", 1, _glIsProgramPipeline_args};

static const char * _glGetProgramPipelineiv_args[3] = {"pipeline", "pname", "params"};
static const trace::FunctionSig _glGetProgramPipelineiv_sig = {1044, "glGetProgramPipelineiv", 3, _glGetProgramPipelineiv_args};

static const char * _glProgramUniform1i_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1i_sig = {1045, "glProgramUniform1i", 3, _glProgramUniform1i_args};

static const char * _glProgramUniform1iv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1iv_sig = {1046, "glProgramUniform1iv", 4, _glProgramUniform1iv_args};

static const char * _glProgramUniform1f_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1f_sig = {1047, "glProgramUniform1f", 3, _glProgramUniform1f_args};

static const char * _glProgramUniform1fv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1fv_sig = {1048, "glProgramUniform1fv", 4, _glProgramUniform1fv_args};

static const char * _glProgramUniform1d_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1d_sig = {1049, "glProgramUniform1d", 3, _glProgramUniform1d_args};

static const char * _glProgramUniform1dv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1dv_sig = {1050, "glProgramUniform1dv", 4, _glProgramUniform1dv_args};

static const char * _glProgramUniform1ui_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1ui_sig = {1051, "glProgramUniform1ui", 3, _glProgramUniform1ui_args};

static const char * _glProgramUniform1uiv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1uiv_sig = {1052, "glProgramUniform1uiv", 4, _glProgramUniform1uiv_args};

static const char * _glProgramUniform2i_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2i_sig = {1053, "glProgramUniform2i", 4, _glProgramUniform2i_args};

static const char * _glProgramUniform2iv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2iv_sig = {1054, "glProgramUniform2iv", 4, _glProgramUniform2iv_args};

static const char * _glProgramUniform2f_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2f_sig = {1055, "glProgramUniform2f", 4, _glProgramUniform2f_args};

static const char * _glProgramUniform2fv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2fv_sig = {1056, "glProgramUniform2fv", 4, _glProgramUniform2fv_args};

static const char * _glProgramUniform2d_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2d_sig = {1057, "glProgramUniform2d", 4, _glProgramUniform2d_args};

static const char * _glProgramUniform2dv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2dv_sig = {1058, "glProgramUniform2dv", 4, _glProgramUniform2dv_args};

static const char * _glProgramUniform2ui_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2ui_sig = {1059, "glProgramUniform2ui", 4, _glProgramUniform2ui_args};

static const char * _glProgramUniform2uiv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2uiv_sig = {1060, "glProgramUniform2uiv", 4, _glProgramUniform2uiv_args};

static const char * _glProgramUniform3i_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3i_sig = {1061, "glProgramUniform3i", 5, _glProgramUniform3i_args};

static const char * _glProgramUniform3iv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3iv_sig = {1062, "glProgramUniform3iv", 4, _glProgramUniform3iv_args};

static const char * _glProgramUniform3f_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3f_sig = {1063, "glProgramUniform3f", 5, _glProgramUniform3f_args};

static const char * _glProgramUniform3fv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3fv_sig = {1064, "glProgramUniform3fv", 4, _glProgramUniform3fv_args};

static const char * _glProgramUniform3d_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3d_sig = {1065, "glProgramUniform3d", 5, _glProgramUniform3d_args};

static const char * _glProgramUniform3dv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3dv_sig = {1066, "glProgramUniform3dv", 4, _glProgramUniform3dv_args};

static const char * _glProgramUniform3ui_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3ui_sig = {1067, "glProgramUniform3ui", 5, _glProgramUniform3ui_args};

static const char * _glProgramUniform3uiv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3uiv_sig = {1068, "glProgramUniform3uiv", 4, _glProgramUniform3uiv_args};

static const char * _glProgramUniform4i_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4i_sig = {1069, "glProgramUniform4i", 6, _glProgramUniform4i_args};

static const char * _glProgramUniform4iv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4iv_sig = {1070, "glProgramUniform4iv", 4, _glProgramUniform4iv_args};

static const char * _glProgramUniform4f_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4f_sig = {1071, "glProgramUniform4f", 6, _glProgramUniform4f_args};

static const char * _glProgramUniform4fv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4fv_sig = {1072, "glProgramUniform4fv", 4, _glProgramUniform4fv_args};

static const char * _glProgramUniform4d_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4d_sig = {1073, "glProgramUniform4d", 6, _glProgramUniform4d_args};

static const char * _glProgramUniform4dv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4dv_sig = {1074, "glProgramUniform4dv", 4, _glProgramUniform4dv_args};

static const char * _glProgramUniform4ui_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4ui_sig = {1075, "glProgramUniform4ui", 6, _glProgramUniform4ui_args};

static const char * _glProgramUniform4uiv_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4uiv_sig = {1076, "glProgramUniform4uiv", 4, _glProgramUniform4uiv_args};

static const char * _glProgramUniformMatrix2fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2fv_sig = {1077, "glProgramUniformMatrix2fv", 5, _glProgramUniformMatrix2fv_args};

static const char * _glProgramUniformMatrix3fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3fv_sig = {1078, "glProgramUniformMatrix3fv", 5, _glProgramUniformMatrix3fv_args};

static const char * _glProgramUniformMatrix4fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4fv_sig = {1079, "glProgramUniformMatrix4fv", 5, _glProgramUniformMatrix4fv_args};

static const char * _glProgramUniformMatrix2dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2dv_sig = {1080, "glProgramUniformMatrix2dv", 5, _glProgramUniformMatrix2dv_args};

static const char * _glProgramUniformMatrix3dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3dv_sig = {1081, "glProgramUniformMatrix3dv", 5, _glProgramUniformMatrix3dv_args};

static const char * _glProgramUniformMatrix4dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4dv_sig = {1082, "glProgramUniformMatrix4dv", 5, _glProgramUniformMatrix4dv_args};

static const char * _glProgramUniformMatrix2x3fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x3fv_sig = {1083, "glProgramUniformMatrix2x3fv", 5, _glProgramUniformMatrix2x3fv_args};

static const char * _glProgramUniformMatrix3x2fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x2fv_sig = {1084, "glProgramUniformMatrix3x2fv", 5, _glProgramUniformMatrix3x2fv_args};

static const char * _glProgramUniformMatrix2x4fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x4fv_sig = {1085, "glProgramUniformMatrix2x4fv", 5, _glProgramUniformMatrix2x4fv_args};

static const char * _glProgramUniformMatrix4x2fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x2fv_sig = {1086, "glProgramUniformMatrix4x2fv", 5, _glProgramUniformMatrix4x2fv_args};

static const char * _glProgramUniformMatrix3x4fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x4fv_sig = {1087, "glProgramUniformMatrix3x4fv", 5, _glProgramUniformMatrix3x4fv_args};

static const char * _glProgramUniformMatrix4x3fv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x3fv_sig = {1088, "glProgramUniformMatrix4x3fv", 5, _glProgramUniformMatrix4x3fv_args};

static const char * _glProgramUniformMatrix2x3dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x3dv_sig = {1089, "glProgramUniformMatrix2x3dv", 5, _glProgramUniformMatrix2x3dv_args};

static const char * _glProgramUniformMatrix3x2dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x2dv_sig = {1090, "glProgramUniformMatrix3x2dv", 5, _glProgramUniformMatrix3x2dv_args};

static const char * _glProgramUniformMatrix2x4dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x4dv_sig = {1091, "glProgramUniformMatrix2x4dv", 5, _glProgramUniformMatrix2x4dv_args};

static const char * _glProgramUniformMatrix4x2dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x2dv_sig = {1092, "glProgramUniformMatrix4x2dv", 5, _glProgramUniformMatrix4x2dv_args};

static const char * _glProgramUniformMatrix3x4dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x4dv_sig = {1093, "glProgramUniformMatrix3x4dv", 5, _glProgramUniformMatrix3x4dv_args};

static const char * _glProgramUniformMatrix4x3dv_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x3dv_sig = {1094, "glProgramUniformMatrix4x3dv", 5, _glProgramUniformMatrix4x3dv_args};

static const char * _glValidateProgramPipeline_args[1] = {"pipeline"};
static const trace::FunctionSig _glValidateProgramPipeline_sig = {1095, "glValidateProgramPipeline", 1, _glValidateProgramPipeline_args};

static const char * _glGetProgramPipelineInfoLog_args[4] = {"pipeline", "bufSize", "length", "infoLog"};
static const trace::FunctionSig _glGetProgramPipelineInfoLog_sig = {1096, "glGetProgramPipelineInfoLog", 4, _glGetProgramPipelineInfoLog_args};

static const char * _glVertexAttribL1d_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribL1d_sig = {1097, "glVertexAttribL1d", 2, _glVertexAttribL1d_args};

static const char * _glVertexAttribL2d_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribL2d_sig = {1098, "glVertexAttribL2d", 3, _glVertexAttribL2d_args};

static const char * _glVertexAttribL3d_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribL3d_sig = {1099, "glVertexAttribL3d", 4, _glVertexAttribL3d_args};

static const char * _glVertexAttribL4d_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribL4d_sig = {1100, "glVertexAttribL4d", 5, _glVertexAttribL4d_args};

static const char * _glVertexAttribL1dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL1dv_sig = {1101, "glVertexAttribL1dv", 2, _glVertexAttribL1dv_args};

static const char * _glVertexAttribL2dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL2dv_sig = {1102, "glVertexAttribL2dv", 2, _glVertexAttribL2dv_args};

static const char * _glVertexAttribL3dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL3dv_sig = {1103, "glVertexAttribL3dv", 2, _glVertexAttribL3dv_args};

static const char * _glVertexAttribL4dv_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL4dv_sig = {1104, "glVertexAttribL4dv", 2, _glVertexAttribL4dv_args};

static const char * _glVertexAttribLPointer_args[5] = {"index", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribLPointer_sig = {1105, "glVertexAttribLPointer", 5, _glVertexAttribLPointer_args};

static const char * _glGetVertexAttribLdv_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribLdv_sig = {1106, "glGetVertexAttribLdv", 3, _glGetVertexAttribLdv_args};

static const char * _glViewportArrayv_args[3] = {"first", "count", "v"};
static const trace::FunctionSig _glViewportArrayv_sig = {1107, "glViewportArrayv", 3, _glViewportArrayv_args};

static const char * _glViewportIndexedf_args[5] = {"index", "x", "y", "w", "h"};
static const trace::FunctionSig _glViewportIndexedf_sig = {1108, "glViewportIndexedf", 5, _glViewportIndexedf_args};

static const char * _glViewportIndexedfv_args[2] = {"index", "v"};
static const trace::FunctionSig _glViewportIndexedfv_sig = {1109, "glViewportIndexedfv", 2, _glViewportIndexedfv_args};

static const char * _glScissorArrayv_args[3] = {"first", "count", "v"};
static const trace::FunctionSig _glScissorArrayv_sig = {1110, "glScissorArrayv", 3, _glScissorArrayv_args};

static const char * _glScissorIndexed_args[5] = {"index", "left", "bottom", "width", "height"};
static const trace::FunctionSig _glScissorIndexed_sig = {1111, "glScissorIndexed", 5, _glScissorIndexed_args};

static const char * _glScissorIndexedv_args[2] = {"index", "v"};
static const trace::FunctionSig _glScissorIndexedv_sig = {1112, "glScissorIndexedv", 2, _glScissorIndexedv_args};

static const char * _glDepthRangeArrayv_args[3] = {"first", "count", "v"};
static const trace::FunctionSig _glDepthRangeArrayv_sig = {1113, "glDepthRangeArrayv", 3, _glDepthRangeArrayv_args};

static const char * _glDepthRangeIndexed_args[3] = {"index", "n", "f"};
static const trace::FunctionSig _glDepthRangeIndexed_sig = {1114, "glDepthRangeIndexed", 3, _glDepthRangeIndexed_args};

static const char * _glGetFloati_v_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetFloati_v_sig = {1115, "glGetFloati_v", 3, _glGetFloati_v_args};

static const char * _glGetDoublei_v_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetDoublei_v_sig = {1116, "glGetDoublei_v", 3, _glGetDoublei_v_args};

static const char * _glDebugMessageControlARB_args[6] = {"source", "type", "severity", "count", "ids", "enabled"};
static const trace::FunctionSig _glDebugMessageControlARB_sig = {1117, "glDebugMessageControlARB", 6, _glDebugMessageControlARB_args};

static const char * _glDebugMessageInsertARB_args[6] = {"source", "type", "id", "severity", "length", "buf"};
static const trace::FunctionSig _glDebugMessageInsertARB_sig = {1118, "glDebugMessageInsertARB", 6, _glDebugMessageInsertARB_args};

static const char * _glDebugMessageCallbackARB_args[2] = {"callback", "userParam"};
static const trace::FunctionSig _glDebugMessageCallbackARB_sig = {1119, "glDebugMessageCallbackARB", 2, _glDebugMessageCallbackARB_args};

static const char * _glGetDebugMessageLogARB_args[8] = {"count", "bufsize", "sources", "types", "ids", "severities", "lengths", "messageLog"};
static const trace::FunctionSig _glGetDebugMessageLogARB_sig = {1120, "glGetDebugMessageLogARB", 8, _glGetDebugMessageLogARB_args};

static const char ** _glGetGraphicsResetStatusARB_args = NULL;
static const trace::FunctionSig _glGetGraphicsResetStatusARB_sig = {1121, "glGetGraphicsResetStatusARB", 0, _glGetGraphicsResetStatusARB_args};

static const char * _glGetnMapdvARB_args[4] = {"target", "query", "bufSize", "v"};
static const trace::FunctionSig _glGetnMapdvARB_sig = {1122, "glGetnMapdvARB", 4, _glGetnMapdvARB_args};

static const char * _glGetnMapfvARB_args[4] = {"target", "query", "bufSize", "v"};
static const trace::FunctionSig _glGetnMapfvARB_sig = {1123, "glGetnMapfvARB", 4, _glGetnMapfvARB_args};

static const char * _glGetnMapivARB_args[4] = {"target", "query", "bufSize", "v"};
static const trace::FunctionSig _glGetnMapivARB_sig = {1124, "glGetnMapivARB", 4, _glGetnMapivARB_args};

static const char * _glGetnPixelMapfvARB_args[3] = {"map", "bufSize", "values"};
static const trace::FunctionSig _glGetnPixelMapfvARB_sig = {1125, "glGetnPixelMapfvARB", 3, _glGetnPixelMapfvARB_args};

static const char * _glGetnPixelMapuivARB_args[3] = {"map", "bufSize", "values"};
static const trace::FunctionSig _glGetnPixelMapuivARB_sig = {1126, "glGetnPixelMapuivARB", 3, _glGetnPixelMapuivARB_args};

static const char * _glGetnPixelMapusvARB_args[3] = {"map", "bufSize", "values"};
static const trace::FunctionSig _glGetnPixelMapusvARB_sig = {1127, "glGetnPixelMapusvARB", 3, _glGetnPixelMapusvARB_args};

static const char * _glGetnPolygonStippleARB_args[2] = {"bufSize", "pattern"};
static const trace::FunctionSig _glGetnPolygonStippleARB_sig = {1128, "glGetnPolygonStippleARB", 2, _glGetnPolygonStippleARB_args};

static const char * _glGetnColorTableARB_args[5] = {"target", "format", "type", "bufSize", "table"};
static const trace::FunctionSig _glGetnColorTableARB_sig = {1129, "glGetnColorTableARB", 5, _glGetnColorTableARB_args};

static const char * _glGetnConvolutionFilterARB_args[5] = {"target", "format", "type", "bufSize", "image"};
static const trace::FunctionSig _glGetnConvolutionFilterARB_sig = {1130, "glGetnConvolutionFilterARB", 5, _glGetnConvolutionFilterARB_args};

static const char * _glGetnSeparableFilterARB_args[8] = {"target", "format", "type", "rowBufSize", "row", "columnBufSize", "column", "span"};
static const trace::FunctionSig _glGetnSeparableFilterARB_sig = {1131, "glGetnSeparableFilterARB", 8, _glGetnSeparableFilterARB_args};

static const char * _glGetnHistogramARB_args[6] = {"target", "reset", "format", "type", "bufSize", "values"};
static const trace::FunctionSig _glGetnHistogramARB_sig = {1132, "glGetnHistogramARB", 6, _glGetnHistogramARB_args};

static const char * _glGetnMinmaxARB_args[6] = {"target", "reset", "format", "type", "bufSize", "values"};
static const trace::FunctionSig _glGetnMinmaxARB_sig = {1133, "glGetnMinmaxARB", 6, _glGetnMinmaxARB_args};

static const char * _glGetnTexImageARB_args[6] = {"target", "level", "format", "type", "bufSize", "img"};
static const trace::FunctionSig _glGetnTexImageARB_sig = {1134, "glGetnTexImageARB", 6, _glGetnTexImageARB_args};

static const char * _glReadnPixelsARB_args[8] = {"x", "y", "width", "height", "format", "type", "bufSize", "data"};
static const trace::FunctionSig _glReadnPixelsARB_sig = {1135, "glReadnPixelsARB", 8, _glReadnPixelsARB_args};

static const char * _glGetnCompressedTexImageARB_args[4] = {"target", "lod", "bufSize", "img"};
static const trace::FunctionSig _glGetnCompressedTexImageARB_sig = {1136, "glGetnCompressedTexImageARB", 4, _glGetnCompressedTexImageARB_args};

static const char * _glGetnUniformfvARB_args[4] = {"program", "location", "bufSize", "params"};
static const trace::FunctionSig _glGetnUniformfvARB_sig = {1137, "glGetnUniformfvARB", 4, _glGetnUniformfvARB_args};

static const char * _glGetnUniformivARB_args[4] = {"program", "location", "bufSize", "params"};
static const trace::FunctionSig _glGetnUniformivARB_sig = {1138, "glGetnUniformivARB", 4, _glGetnUniformivARB_args};

static const char * _glGetnUniformuivARB_args[4] = {"program", "location", "bufSize", "params"};
static const trace::FunctionSig _glGetnUniformuivARB_sig = {1139, "glGetnUniformuivARB", 4, _glGetnUniformuivARB_args};

static const char * _glGetnUniformdvARB_args[4] = {"program", "location", "bufSize", "params"};
static const trace::FunctionSig _glGetnUniformdvARB_sig = {1140, "glGetnUniformdvARB", 4, _glGetnUniformdvARB_args};

static const char * _glDrawArraysInstancedBaseInstance_args[5] = {"mode", "first", "count", "primcount", "baseinstance"};
static const trace::FunctionSig _glDrawArraysInstancedBaseInstance_sig = {1141, "glDrawArraysInstancedBaseInstance", 5, _glDrawArraysInstancedBaseInstance_args};

static const char * _glDrawElementsInstancedBaseInstance_args[6] = {"mode", "count", "type", "indices", "primcount", "baseinstance"};
static const trace::FunctionSig _glDrawElementsInstancedBaseInstance_sig = {1142, "glDrawElementsInstancedBaseInstance", 6, _glDrawElementsInstancedBaseInstance_args};

static const char * _glDrawElementsInstancedBaseVertexBaseInstance_args[7] = {"mode", "count", "type", "indices", "primcount", "basevertex", "baseinstance"};
static const trace::FunctionSig _glDrawElementsInstancedBaseVertexBaseInstance_sig = {1143, "glDrawElementsInstancedBaseVertexBaseInstance", 7, _glDrawElementsInstancedBaseVertexBaseInstance_args};

static const char * _glDrawTransformFeedbackInstanced_args[3] = {"mode", "id", "primcount"};
static const trace::FunctionSig _glDrawTransformFeedbackInstanced_sig = {1144, "glDrawTransformFeedbackInstanced", 3, _glDrawTransformFeedbackInstanced_args};

static const char * _glDrawTransformFeedbackStreamInstanced_args[4] = {"mode", "id", "stream", "primcount"};
static const trace::FunctionSig _glDrawTransformFeedbackStreamInstanced_sig = {1145, "glDrawTransformFeedbackStreamInstanced", 4, _glDrawTransformFeedbackStreamInstanced_args};

static const char * _glGetInternalformativ_args[5] = {"target", "internalformat", "pname", "bufSize", "params"};
static const trace::FunctionSig _glGetInternalformativ_sig = {1146, "glGetInternalformativ", 5, _glGetInternalformativ_args};

static const char * _glGetActiveAtomicCounterBufferiv_args[4] = {"program", "bufferIndex", "pname", "params"};
static const trace::FunctionSig _glGetActiveAtomicCounterBufferiv_sig = {1147, "glGetActiveAtomicCounterBufferiv", 4, _glGetActiveAtomicCounterBufferiv_args};

static const char * _glBindImageTexture_args[7] = {"unit", "texture", "level", "layered", "layer", "access", "format"};
static const trace::FunctionSig _glBindImageTexture_sig = {1148, "glBindImageTexture", 7, _glBindImageTexture_args};

static const char * _glMemoryBarrier_args[1] = {"barriers"};
static const trace::FunctionSig _glMemoryBarrier_sig = {1149, "glMemoryBarrier", 1, _glMemoryBarrier_args};

static const char * _glTexStorage1D_args[4] = {"target", "levels", "internalformat", "width"};
static const trace::FunctionSig _glTexStorage1D_sig = {1150, "glTexStorage1D", 4, _glTexStorage1D_args};

static const char * _glTexStorage2D_args[5] = {"target", "levels", "internalformat", "width", "height"};
static const trace::FunctionSig _glTexStorage2D_sig = {1151, "glTexStorage2D", 5, _glTexStorage2D_args};

static const char * _glTexStorage3D_args[6] = {"target", "levels", "internalformat", "width", "height", "depth"};
static const trace::FunctionSig _glTexStorage3D_sig = {1152, "glTexStorage3D", 6, _glTexStorage3D_args};

static const char * _glTextureStorage1DEXT_args[5] = {"texture", "target", "levels", "internalformat", "width"};
static const trace::FunctionSig _glTextureStorage1DEXT_sig = {1153, "glTextureStorage1DEXT", 5, _glTextureStorage1DEXT_args};

static const char * _glTextureStorage2DEXT_args[6] = {"texture", "target", "levels", "internalformat", "width", "height"};
static const trace::FunctionSig _glTextureStorage2DEXT_sig = {1154, "glTextureStorage2DEXT", 6, _glTextureStorage2DEXT_args};

static const char * _glTextureStorage3DEXT_args[7] = {"texture", "target", "levels", "internalformat", "width", "height", "depth"};
static const trace::FunctionSig _glTextureStorage3DEXT_sig = {1155, "glTextureStorage3DEXT", 7, _glTextureStorage3DEXT_args};

static const char * _glDebugMessageControl_args[6] = {"source", "type", "severity", "count", "ids", "enabled"};
static const trace::FunctionSig _glDebugMessageControl_sig = {1156, "glDebugMessageControl", 6, _glDebugMessageControl_args};

static const char * _glDebugMessageInsert_args[6] = {"source", "type", "id", "severity", "length", "buf"};
static const trace::FunctionSig _glDebugMessageInsert_sig = {1157, "glDebugMessageInsert", 6, _glDebugMessageInsert_args};

static const char * _glDebugMessageCallback_args[2] = {"callback", "userParam"};
static const trace::FunctionSig _glDebugMessageCallback_sig = {1158, "glDebugMessageCallback", 2, _glDebugMessageCallback_args};

static const char * _glGetDebugMessageLog_args[8] = {"count", "bufsize", "sources", "types", "ids", "severities", "lengths", "messageLog"};
static const trace::FunctionSig _glGetDebugMessageLog_sig = {1159, "glGetDebugMessageLog", 8, _glGetDebugMessageLog_args};

static const char * _glPushDebugGroup_args[4] = {"source", "id", "length", "message"};
static const trace::FunctionSig _glPushDebugGroup_sig = {1160, "glPushDebugGroup", 4, _glPushDebugGroup_args};

static const char ** _glPopDebugGroup_args = NULL;
static const trace::FunctionSig _glPopDebugGroup_sig = {1161, "glPopDebugGroup", 0, _glPopDebugGroup_args};

static const char * _glObjectLabel_args[4] = {"identifier", "name", "length", "label"};
static const trace::FunctionSig _glObjectLabel_sig = {1162, "glObjectLabel", 4, _glObjectLabel_args};

static const char * _glGetObjectLabel_args[5] = {"identifier", "name", "bufSize", "length", "label"};
static const trace::FunctionSig _glGetObjectLabel_sig = {1163, "glGetObjectLabel", 5, _glGetObjectLabel_args};

static const char * _glObjectPtrLabel_args[3] = {"ptr", "length", "label"};
static const trace::FunctionSig _glObjectPtrLabel_sig = {1164, "glObjectPtrLabel", 3, _glObjectPtrLabel_args};

static const char * _glGetObjectPtrLabel_args[4] = {"ptr", "bufSize", "length", "label"};
static const trace::FunctionSig _glGetObjectPtrLabel_sig = {1165, "glGetObjectPtrLabel", 4, _glGetObjectPtrLabel_args};

static const char * _glClearBufferData_args[5] = {"target", "internalformat", "format", "type", "data"};
static const trace::FunctionSig _glClearBufferData_sig = {1166, "glClearBufferData", 5, _glClearBufferData_args};

static const char * _glClearBufferSubData_args[7] = {"target", "internalformat", "offset", "size", "format", "type", "data"};
static const trace::FunctionSig _glClearBufferSubData_sig = {1167, "glClearBufferSubData", 7, _glClearBufferSubData_args};

static const char * _glClearNamedBufferDataEXT_args[5] = {"buffer", "internalformat", "format", "type", "data"};
static const trace::FunctionSig _glClearNamedBufferDataEXT_sig = {1168, "glClearNamedBufferDataEXT", 5, _glClearNamedBufferDataEXT_args};

static const char * _glClearNamedBufferSubDataEXT_args[7] = {"buffer", "internalformat", "offset", "size", "format", "type", "data"};
static const trace::FunctionSig _glClearNamedBufferSubDataEXT_sig = {1169, "glClearNamedBufferSubDataEXT", 7, _glClearNamedBufferSubDataEXT_args};

static const char * _glDispatchCompute_args[3] = {"num_groups_x", "num_groups_y", "num_groups_z"};
static const trace::FunctionSig _glDispatchCompute_sig = {1170, "glDispatchCompute", 3, _glDispatchCompute_args};

static const char * _glDispatchComputeIndirect_args[1] = {"indirect"};
static const trace::FunctionSig _glDispatchComputeIndirect_sig = {1171, "glDispatchComputeIndirect", 1, _glDispatchComputeIndirect_args};

static const char * _glCopyImageSubData_args[15] = {"srcName", "srcTarget", "srcLevel", "srcX", "srcY", "srcZ", "dstName", "dstTarget", "dstLevel", "dstX", "dstY", "dstZ", "srcWidth", "srcHeight", "srcDepth"};
static const trace::FunctionSig _glCopyImageSubData_sig = {1172, "glCopyImageSubData", 15, _glCopyImageSubData_args};

static const char * _glTextureView_args[8] = {"texture", "target", "origtexture", "internalformat", "minlevel", "numlevels", "minlayer", "numlayers"};
static const trace::FunctionSig _glTextureView_sig = {1173, "glTextureView", 8, _glTextureView_args};

static const char * _glBindVertexBuffer_args[4] = {"bindingindex", "buffer", "offset", "stride"};
static const trace::FunctionSig _glBindVertexBuffer_sig = {1174, "glBindVertexBuffer", 4, _glBindVertexBuffer_args};

static const char * _glVertexAttribFormat_args[5] = {"attribindex", "size", "type", "normalized", "relativeoffset"};
static const trace::FunctionSig _glVertexAttribFormat_sig = {1175, "glVertexAttribFormat", 5, _glVertexAttribFormat_args};

static const char * _glVertexAttribIFormat_args[4] = {"attribindex", "size", "type", "relativeoffset"};
static const trace::FunctionSig _glVertexAttribIFormat_sig = {1176, "glVertexAttribIFormat", 4, _glVertexAttribIFormat_args};

static const char * _glVertexAttribLFormat_args[4] = {"attribindex", "size", "type", "relativeoffset"};
static const trace::FunctionSig _glVertexAttribLFormat_sig = {1177, "glVertexAttribLFormat", 4, _glVertexAttribLFormat_args};

static const char * _glVertexAttribBinding_args[2] = {"attribindex", "bindingindex"};
static const trace::FunctionSig _glVertexAttribBinding_sig = {1178, "glVertexAttribBinding", 2, _glVertexAttribBinding_args};

static const char * _glVertexBindingDivisor_args[2] = {"bindingindex", "divisor"};
static const trace::FunctionSig _glVertexBindingDivisor_sig = {1179, "glVertexBindingDivisor", 2, _glVertexBindingDivisor_args};

static const char * _glVertexArrayBindVertexBufferEXT_args[5] = {"vaobj", "bindingindex", "buffer", "offset", "stride"};
static const trace::FunctionSig _glVertexArrayBindVertexBufferEXT_sig = {1180, "glVertexArrayBindVertexBufferEXT", 5, _glVertexArrayBindVertexBufferEXT_args};

static const char * _glVertexArrayVertexAttribFormatEXT_args[6] = {"vaobj", "attribindex", "size", "type", "normalized", "relativeoffset"};
static const trace::FunctionSig _glVertexArrayVertexAttribFormatEXT_sig = {1181, "glVertexArrayVertexAttribFormatEXT", 6, _glVertexArrayVertexAttribFormatEXT_args};

static const char * _glVertexArrayVertexAttribIFormatEXT_args[5] = {"vaobj", "attribindex", "size", "type", "relativeoffset"};
static const trace::FunctionSig _glVertexArrayVertexAttribIFormatEXT_sig = {1182, "glVertexArrayVertexAttribIFormatEXT", 5, _glVertexArrayVertexAttribIFormatEXT_args};

static const char * _glVertexArrayVertexAttribLFormatEXT_args[5] = {"vaobj", "attribindex", "size", "type", "relativeoffset"};
static const trace::FunctionSig _glVertexArrayVertexAttribLFormatEXT_sig = {1183, "glVertexArrayVertexAttribLFormatEXT", 5, _glVertexArrayVertexAttribLFormatEXT_args};

static const char * _glVertexArrayVertexAttribBindingEXT_args[3] = {"vaobj", "attribindex", "bindingindex"};
static const trace::FunctionSig _glVertexArrayVertexAttribBindingEXT_sig = {1184, "glVertexArrayVertexAttribBindingEXT", 3, _glVertexArrayVertexAttribBindingEXT_args};

static const char * _glVertexArrayVertexBindingDivisorEXT_args[3] = {"vaobj", "bindingindex", "divisor"};
static const trace::FunctionSig _glVertexArrayVertexBindingDivisorEXT_sig = {1185, "glVertexArrayVertexBindingDivisorEXT", 3, _glVertexArrayVertexBindingDivisorEXT_args};

static const char * _glFramebufferParameteri_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glFramebufferParameteri_sig = {1186, "glFramebufferParameteri", 3, _glFramebufferParameteri_args};

static const char * _glGetFramebufferParameteriv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetFramebufferParameteriv_sig = {1187, "glGetFramebufferParameteriv", 3, _glGetFramebufferParameteriv_args};

static const char * _glNamedFramebufferParameteriEXT_args[3] = {"framebuffer", "pname", "param"};
static const trace::FunctionSig _glNamedFramebufferParameteriEXT_sig = {1188, "glNamedFramebufferParameteriEXT", 3, _glNamedFramebufferParameteriEXT_args};

static const char * _glGetNamedFramebufferParameterivEXT_args[3] = {"framebuffer", "pname", "params"};
static const trace::FunctionSig _glGetNamedFramebufferParameterivEXT_sig = {1189, "glGetNamedFramebufferParameterivEXT", 3, _glGetNamedFramebufferParameterivEXT_args};

static const char * _glGetInternalformati64v_args[5] = {"target", "internalformat", "pname", "bufSize", "params"};
static const trace::FunctionSig _glGetInternalformati64v_sig = {1190, "glGetInternalformati64v", 5, _glGetInternalformati64v_args};

static const char * _glInvalidateTexSubImage_args[8] = {"texture", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth"};
static const trace::FunctionSig _glInvalidateTexSubImage_sig = {1191, "glInvalidateTexSubImage", 8, _glInvalidateTexSubImage_args};

static const char * _glInvalidateTexImage_args[2] = {"texture", "level"};
static const trace::FunctionSig _glInvalidateTexImage_sig = {1192, "glInvalidateTexImage", 2, _glInvalidateTexImage_args};

static const char * _glInvalidateBufferSubData_args[3] = {"buffer", "offset", "length"};
static const trace::FunctionSig _glInvalidateBufferSubData_sig = {1193, "glInvalidateBufferSubData", 3, _glInvalidateBufferSubData_args};

static const char * _glInvalidateBufferData_args[1] = {"buffer"};
static const trace::FunctionSig _glInvalidateBufferData_sig = {1194, "glInvalidateBufferData", 1, _glInvalidateBufferData_args};

static const char * _glInvalidateFramebuffer_args[3] = {"target", "numAttachments", "attachments"};
static const trace::FunctionSig _glInvalidateFramebuffer_sig = {1195, "glInvalidateFramebuffer", 3, _glInvalidateFramebuffer_args};

static const char * _glInvalidateSubFramebuffer_args[7] = {"target", "numAttachments", "attachments", "x", "y", "width", "height"};
static const trace::FunctionSig _glInvalidateSubFramebuffer_sig = {1196, "glInvalidateSubFramebuffer", 7, _glInvalidateSubFramebuffer_args};

static const char * _glMultiDrawArraysIndirect_args[4] = {"mode", "indirect", "drawcount", "stride"};
static const trace::FunctionSig _glMultiDrawArraysIndirect_sig = {1197, "glMultiDrawArraysIndirect", 4, _glMultiDrawArraysIndirect_args};

static const char * _glMultiDrawElementsIndirect_args[5] = {"mode", "type", "indirect", "drawcount", "stride"};
static const trace::FunctionSig _glMultiDrawElementsIndirect_sig = {1198, "glMultiDrawElementsIndirect", 5, _glMultiDrawElementsIndirect_args};

static const char * _glGetProgramInterfaceiv_args[4] = {"program", "programInterface", "pname", "params"};
static const trace::FunctionSig _glGetProgramInterfaceiv_sig = {1199, "glGetProgramInterfaceiv", 4, _glGetProgramInterfaceiv_args};

static const char * _glGetProgramResourceIndex_args[3] = {"program", "programInterface", "name"};
static const trace::FunctionSig _glGetProgramResourceIndex_sig = {1200, "glGetProgramResourceIndex", 3, _glGetProgramResourceIndex_args};

static const char * _glGetProgramResourceName_args[6] = {"program", "programInterface", "index", "bufSize", "length", "name"};
static const trace::FunctionSig _glGetProgramResourceName_sig = {1201, "glGetProgramResourceName", 6, _glGetProgramResourceName_args};

static const char * _glGetProgramResourceiv_args[8] = {"program", "programInterface", "index", "propCount", "props", "bufSize", "length", "params"};
static const trace::FunctionSig _glGetProgramResourceiv_sig = {1202, "glGetProgramResourceiv", 8, _glGetProgramResourceiv_args};

static const char * _glGetProgramResourceLocation_args[3] = {"program", "programInterface", "name"};
static const trace::FunctionSig _glGetProgramResourceLocation_sig = {1203, "glGetProgramResourceLocation", 3, _glGetProgramResourceLocation_args};

static const char * _glGetProgramResourceLocationIndex_args[3] = {"program", "programInterface", "name"};
static const trace::FunctionSig _glGetProgramResourceLocationIndex_sig = {1204, "glGetProgramResourceLocationIndex", 3, _glGetProgramResourceLocationIndex_args};

static const char * _glShaderStorageBlockBinding_args[3] = {"program", "storageBlockIndex", "storageBlockBinding"};
static const trace::FunctionSig _glShaderStorageBlockBinding_sig = {1205, "glShaderStorageBlockBinding", 3, _glShaderStorageBlockBinding_args};

static const char * _glTexBufferRange_args[5] = {"target", "internalformat", "buffer", "offset", "size"};
static const trace::FunctionSig _glTexBufferRange_sig = {1206, "glTexBufferRange", 5, _glTexBufferRange_args};

static const char * _glTextureBufferRangeEXT_args[6] = {"texture", "target", "internalformat", "buffer", "offset", "size"};
static const trace::FunctionSig _glTextureBufferRangeEXT_sig = {1207, "glTextureBufferRangeEXT", 6, _glTextureBufferRangeEXT_args};

static const char * _glTexStorage2DMultisample_args[6] = {"target", "samples", "internalformat", "width", "height", "fixedsamplelocations"};
static const trace::FunctionSig _glTexStorage2DMultisample_sig = {1208, "glTexStorage2DMultisample", 6, _glTexStorage2DMultisample_args};

static const char * _glTexStorage3DMultisample_args[7] = {"target", "samples", "internalformat", "width", "height", "depth", "fixedsamplelocations"};
static const trace::FunctionSig _glTexStorage3DMultisample_sig = {1209, "glTexStorage3DMultisample", 7, _glTexStorage3DMultisample_args};

static const char * _glTextureStorage2DMultisampleEXT_args[7] = {"texture", "target", "samples", "internalformat", "width", "height", "fixedsamplelocations"};
static const trace::FunctionSig _glTextureStorage2DMultisampleEXT_sig = {1210, "glTextureStorage2DMultisampleEXT", 7, _glTextureStorage2DMultisampleEXT_args};

static const char * _glTextureStorage3DMultisampleEXT_args[8] = {"texture", "target", "samples", "internalformat", "width", "height", "depth", "fixedsamplelocations"};
static const trace::FunctionSig _glTextureStorage3DMultisampleEXT_sig = {1211, "glTextureStorage3DMultisampleEXT", 8, _glTextureStorage3DMultisampleEXT_args};

static const char * _glBindBuffersBase_args[4] = {"target", "first", "count", "buffers"};
static const trace::FunctionSig _glBindBuffersBase_sig = {1212, "glBindBuffersBase", 4, _glBindBuffersBase_args};

static const char * _glBindBuffersRange_args[6] = {"target", "first", "count", "buffers", "offsets", "sizes"};
static const trace::FunctionSig _glBindBuffersRange_sig = {1213, "glBindBuffersRange", 6, _glBindBuffersRange_args};

static const char * _glBindImageTextures_args[3] = {"first", "count", "textures"};
static const trace::FunctionSig _glBindImageTextures_sig = {1214, "glBindImageTextures", 3, _glBindImageTextures_args};

static const char * _glBindSamplers_args[3] = {"first", "count", "samplers"};
static const trace::FunctionSig _glBindSamplers_sig = {1215, "glBindSamplers", 3, _glBindSamplers_args};

static const char * _glBindTextures_args[3] = {"first", "count", "textures"};
static const trace::FunctionSig _glBindTextures_sig = {1216, "glBindTextures", 3, _glBindTextures_args};

static const char * _glBindVertexBuffers_args[5] = {"first", "count", "buffers", "offsets", "strides"};
static const trace::FunctionSig _glBindVertexBuffers_sig = {1217, "glBindVertexBuffers", 5, _glBindVertexBuffers_args};

static const char * _glBufferStorage_args[4] = {"target", "size", "data", "flags"};
static const trace::FunctionSig _glBufferStorage_sig = {1218, "glBufferStorage", 4, _glBufferStorage_args};

static const char * _glNamedBufferStorageEXT_args[4] = {"buffer", "size", "data", "flags"};
static const trace::FunctionSig _glNamedBufferStorageEXT_sig = {1219, "glNamedBufferStorageEXT", 4, _glNamedBufferStorageEXT_args};

static const char * _glClearTexImage_args[5] = {"texture", "level", "format", "type", "data"};
static const trace::FunctionSig _glClearTexImage_sig = {1220, "glClearTexImage", 5, _glClearTexImage_args};

static const char * _glClearTexSubImage_args[11] = {"texture", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "data"};
static const trace::FunctionSig _glClearTexSubImage_sig = {1221, "glClearTexSubImage", 11, _glClearTexSubImage_args};

static const char * _glBlendColorEXT_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glBlendColorEXT_sig = {1222, "glBlendColorEXT", 4, _glBlendColorEXT_args};

static const char * _glPolygonOffsetEXT_args[2] = {"factor", "bias"};
static const trace::FunctionSig _glPolygonOffsetEXT_sig = {1223, "glPolygonOffsetEXT", 2, _glPolygonOffsetEXT_args};

static const char * _glTexImage3DEXT_args[10] = {"target", "level", "internalformat", "width", "height", "depth", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage3DEXT_sig = {1224, "glTexImage3DEXT", 10, _glTexImage3DEXT_args};

static const char * _glTexSubImage3DEXT_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage3DEXT_sig = {1225, "glTexSubImage3DEXT", 11, _glTexSubImage3DEXT_args};

static const char * _glGetTexFilterFuncSGIS_args[3] = {"target", "filter", "weights"};
static const trace::FunctionSig _glGetTexFilterFuncSGIS_sig = {1226, "glGetTexFilterFuncSGIS", 3, _glGetTexFilterFuncSGIS_args};

static const char * _glTexFilterFuncSGIS_args[4] = {"target", "filter", "n", "weights"};
static const trace::FunctionSig _glTexFilterFuncSGIS_sig = {1227, "glTexFilterFuncSGIS", 4, _glTexFilterFuncSGIS_args};

static const char * _glTexSubImage1DEXT_args[7] = {"target", "level", "xoffset", "width", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage1DEXT_sig = {1228, "glTexSubImage1DEXT", 7, _glTexSubImage1DEXT_args};

static const char * _glTexSubImage2DEXT_args[9] = {"target", "level", "xoffset", "yoffset", "width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage2DEXT_sig = {1229, "glTexSubImage2DEXT", 9, _glTexSubImage2DEXT_args};

static const char * _glCopyTexImage1DEXT_args[7] = {"target", "level", "internalformat", "x", "y", "width", "border"};
static const trace::FunctionSig _glCopyTexImage1DEXT_sig = {1230, "glCopyTexImage1DEXT", 7, _glCopyTexImage1DEXT_args};

static const char * _glCopyTexImage2DEXT_args[8] = {"target", "level", "internalformat", "x", "y", "width", "height", "border"};
static const trace::FunctionSig _glCopyTexImage2DEXT_sig = {1231, "glCopyTexImage2DEXT", 8, _glCopyTexImage2DEXT_args};

static const char * _glCopyTexSubImage1DEXT_args[6] = {"target", "level", "xoffset", "x", "y", "width"};
static const trace::FunctionSig _glCopyTexSubImage1DEXT_sig = {1232, "glCopyTexSubImage1DEXT", 6, _glCopyTexSubImage1DEXT_args};

static const char * _glCopyTexSubImage2DEXT_args[8] = {"target", "level", "xoffset", "yoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTexSubImage2DEXT_sig = {1233, "glCopyTexSubImage2DEXT", 8, _glCopyTexSubImage2DEXT_args};

static const char * _glCopyTexSubImage3DEXT_args[9] = {"target", "level", "xoffset", "yoffset", "zoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTexSubImage3DEXT_sig = {1234, "glCopyTexSubImage3DEXT", 9, _glCopyTexSubImage3DEXT_args};

static const char * _glGetHistogramEXT_args[5] = {"target", "reset", "format", "type", "values"};
static const trace::FunctionSig _glGetHistogramEXT_sig = {1235, "glGetHistogramEXT", 5, _glGetHistogramEXT_args};

static const char * _glGetHistogramParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetHistogramParameterfvEXT_sig = {1236, "glGetHistogramParameterfvEXT", 3, _glGetHistogramParameterfvEXT_args};

static const char * _glGetHistogramParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetHistogramParameterivEXT_sig = {1237, "glGetHistogramParameterivEXT", 3, _glGetHistogramParameterivEXT_args};

static const char * _glGetMinmaxEXT_args[5] = {"target", "reset", "format", "type", "values"};
static const trace::FunctionSig _glGetMinmaxEXT_sig = {1238, "glGetMinmaxEXT", 5, _glGetMinmaxEXT_args};

static const char * _glGetMinmaxParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMinmaxParameterfvEXT_sig = {1239, "glGetMinmaxParameterfvEXT", 3, _glGetMinmaxParameterfvEXT_args};

static const char * _glGetMinmaxParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMinmaxParameterivEXT_sig = {1240, "glGetMinmaxParameterivEXT", 3, _glGetMinmaxParameterivEXT_args};

static const char * _glHistogramEXT_args[4] = {"target", "width", "internalformat", "sink"};
static const trace::FunctionSig _glHistogramEXT_sig = {1241, "glHistogramEXT", 4, _glHistogramEXT_args};

static const char * _glMinmaxEXT_args[3] = {"target", "internalformat", "sink"};
static const trace::FunctionSig _glMinmaxEXT_sig = {1242, "glMinmaxEXT", 3, _glMinmaxEXT_args};

static const char * _glResetHistogramEXT_args[1] = {"target"};
static const trace::FunctionSig _glResetHistogramEXT_sig = {1243, "glResetHistogramEXT", 1, _glResetHistogramEXT_args};

static const char * _glResetMinmaxEXT_args[1] = {"target"};
static const trace::FunctionSig _glResetMinmaxEXT_sig = {1244, "glResetMinmaxEXT", 1, _glResetMinmaxEXT_args};

static const char * _glConvolutionFilter1DEXT_args[6] = {"target", "internalformat", "width", "format", "type", "image"};
static const trace::FunctionSig _glConvolutionFilter1DEXT_sig = {1245, "glConvolutionFilter1DEXT", 6, _glConvolutionFilter1DEXT_args};

static const char * _glConvolutionFilter2DEXT_args[7] = {"target", "internalformat", "width", "height", "format", "type", "image"};
static const trace::FunctionSig _glConvolutionFilter2DEXT_sig = {1246, "glConvolutionFilter2DEXT", 7, _glConvolutionFilter2DEXT_args};

static const char * _glConvolutionParameterfEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameterfEXT_sig = {1247, "glConvolutionParameterfEXT", 3, _glConvolutionParameterfEXT_args};

static const char * _glConvolutionParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameterfvEXT_sig = {1248, "glConvolutionParameterfvEXT", 3, _glConvolutionParameterfvEXT_args};

static const char * _glConvolutionParameteriEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameteriEXT_sig = {1249, "glConvolutionParameteriEXT", 3, _glConvolutionParameteriEXT_args};

static const char * _glConvolutionParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glConvolutionParameterivEXT_sig = {1250, "glConvolutionParameterivEXT", 3, _glConvolutionParameterivEXT_args};

static const char * _glCopyConvolutionFilter1DEXT_args[5] = {"target", "internalformat", "x", "y", "width"};
static const trace::FunctionSig _glCopyConvolutionFilter1DEXT_sig = {1251, "glCopyConvolutionFilter1DEXT", 5, _glCopyConvolutionFilter1DEXT_args};

static const char * _glCopyConvolutionFilter2DEXT_args[6] = {"target", "internalformat", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyConvolutionFilter2DEXT_sig = {1252, "glCopyConvolutionFilter2DEXT", 6, _glCopyConvolutionFilter2DEXT_args};

static const char * _glGetConvolutionFilterEXT_args[4] = {"target", "format", "type", "image"};
static const trace::FunctionSig _glGetConvolutionFilterEXT_sig = {1253, "glGetConvolutionFilterEXT", 4, _glGetConvolutionFilterEXT_args};

static const char * _glGetConvolutionParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetConvolutionParameterfvEXT_sig = {1254, "glGetConvolutionParameterfvEXT", 3, _glGetConvolutionParameterfvEXT_args};

static const char * _glGetConvolutionParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetConvolutionParameterivEXT_sig = {1255, "glGetConvolutionParameterivEXT", 3, _glGetConvolutionParameterivEXT_args};

static const char * _glGetSeparableFilterEXT_args[6] = {"target", "format", "type", "row", "column", "span"};
static const trace::FunctionSig _glGetSeparableFilterEXT_sig = {1256, "glGetSeparableFilterEXT", 6, _glGetSeparableFilterEXT_args};

static const char * _glSeparableFilter2DEXT_args[8] = {"target", "internalformat", "width", "height", "format", "type", "row", "column"};
static const trace::FunctionSig _glSeparableFilter2DEXT_sig = {1257, "glSeparableFilter2DEXT", 8, _glSeparableFilter2DEXT_args};

static const char * _glColorTableSGI_args[6] = {"target", "internalformat", "width", "format", "type", "table"};
static const trace::FunctionSig _glColorTableSGI_sig = {1258, "glColorTableSGI", 6, _glColorTableSGI_args};

static const char * _glColorTableParameterfvSGI_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glColorTableParameterfvSGI_sig = {1259, "glColorTableParameterfvSGI", 3, _glColorTableParameterfvSGI_args};

static const char * _glColorTableParameterivSGI_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glColorTableParameterivSGI_sig = {1260, "glColorTableParameterivSGI", 3, _glColorTableParameterivSGI_args};

static const char * _glCopyColorTableSGI_args[5] = {"target", "internalformat", "x", "y", "width"};
static const trace::FunctionSig _glCopyColorTableSGI_sig = {1261, "glCopyColorTableSGI", 5, _glCopyColorTableSGI_args};

static const char * _glGetColorTableSGI_args[4] = {"target", "format", "type", "table"};
static const trace::FunctionSig _glGetColorTableSGI_sig = {1262, "glGetColorTableSGI", 4, _glGetColorTableSGI_args};

static const char * _glGetColorTableParameterfvSGI_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameterfvSGI_sig = {1263, "glGetColorTableParameterfvSGI", 3, _glGetColorTableParameterfvSGI_args};

static const char * _glGetColorTableParameterivSGI_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameterivSGI_sig = {1264, "glGetColorTableParameterivSGI", 3, _glGetColorTableParameterivSGI_args};

static const char * _glPixelTexGenSGIX_args[1] = {"mode"};
static const trace::FunctionSig _glPixelTexGenSGIX_sig = {1265, "glPixelTexGenSGIX", 1, _glPixelTexGenSGIX_args};

static const char * _glPixelTexGenParameteriSGIS_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelTexGenParameteriSGIS_sig = {1266, "glPixelTexGenParameteriSGIS", 2, _glPixelTexGenParameteriSGIS_args};

static const char * _glPixelTexGenParameterivSGIS_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPixelTexGenParameterivSGIS_sig = {1267, "glPixelTexGenParameterivSGIS", 2, _glPixelTexGenParameterivSGIS_args};

static const char * _glPixelTexGenParameterfSGIS_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPixelTexGenParameterfSGIS_sig = {1268, "glPixelTexGenParameterfSGIS", 2, _glPixelTexGenParameterfSGIS_args};

static const char * _glPixelTexGenParameterfvSGIS_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPixelTexGenParameterfvSGIS_sig = {1269, "glPixelTexGenParameterfvSGIS", 2, _glPixelTexGenParameterfvSGIS_args};

static const char * _glGetPixelTexGenParameterivSGIS_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetPixelTexGenParameterivSGIS_sig = {1270, "glGetPixelTexGenParameterivSGIS", 2, _glGetPixelTexGenParameterivSGIS_args};

static const char * _glGetPixelTexGenParameterfvSGIS_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetPixelTexGenParameterfvSGIS_sig = {1271, "glGetPixelTexGenParameterfvSGIS", 2, _glGetPixelTexGenParameterfvSGIS_args};

static const char * _glTexImage4DSGIS_args[11] = {"target", "level", "internalformat", "width", "height", "depth", "size4d", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage4DSGIS_sig = {1272, "glTexImage4DSGIS", 11, _glTexImage4DSGIS_args};

static const char * _glTexSubImage4DSGIS_args[13] = {"target", "level", "xoffset", "yoffset", "zoffset", "woffset", "width", "height", "depth", "size4d", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage4DSGIS_sig = {1273, "glTexSubImage4DSGIS", 13, _glTexSubImage4DSGIS_args};

static const char * _glAreTexturesResidentEXT_args[3] = {"n", "textures", "residences"};
static const trace::FunctionSig _glAreTexturesResidentEXT_sig = {1274, "glAreTexturesResidentEXT", 3, _glAreTexturesResidentEXT_args};

static const char * _glBindTextureEXT_args[2] = {"target", "texture"};
static const trace::FunctionSig _glBindTextureEXT_sig = {1275, "glBindTextureEXT", 2, _glBindTextureEXT_args};

static const char * _glDeleteTexturesEXT_args[2] = {"n", "textures"};
static const trace::FunctionSig _glDeleteTexturesEXT_sig = {1276, "glDeleteTexturesEXT", 2, _glDeleteTexturesEXT_args};

static const char * _glGenTexturesEXT_args[2] = {"n", "textures"};
static const trace::FunctionSig _glGenTexturesEXT_sig = {1277, "glGenTexturesEXT", 2, _glGenTexturesEXT_args};

static const char * _glIsTextureEXT_args[1] = {"texture"};
static const trace::FunctionSig _glIsTextureEXT_sig = {1278, "glIsTextureEXT", 1, _glIsTextureEXT_args};

static const char * _glPrioritizeTexturesEXT_args[3] = {"n", "textures", "priorities"};
static const trace::FunctionSig _glPrioritizeTexturesEXT_sig = {1279, "glPrioritizeTexturesEXT", 3, _glPrioritizeTexturesEXT_args};

static const char * _glDetailTexFuncSGIS_args[3] = {"target", "n", "points"};
static const trace::FunctionSig _glDetailTexFuncSGIS_sig = {1280, "glDetailTexFuncSGIS", 3, _glDetailTexFuncSGIS_args};

static const char * _glGetDetailTexFuncSGIS_args[2] = {"target", "points"};
static const trace::FunctionSig _glGetDetailTexFuncSGIS_sig = {1281, "glGetDetailTexFuncSGIS", 2, _glGetDetailTexFuncSGIS_args};

static const char * _glSharpenTexFuncSGIS_args[3] = {"target", "n", "points"};
static const trace::FunctionSig _glSharpenTexFuncSGIS_sig = {1282, "glSharpenTexFuncSGIS", 3, _glSharpenTexFuncSGIS_args};

static const char * _glGetSharpenTexFuncSGIS_args[2] = {"target", "points"};
static const trace::FunctionSig _glGetSharpenTexFuncSGIS_sig = {1283, "glGetSharpenTexFuncSGIS", 2, _glGetSharpenTexFuncSGIS_args};

static const char * _glSampleMaskSGIS_args[2] = {"value", "invert"};
static const trace::FunctionSig _glSampleMaskSGIS_sig = {1284, "glSampleMaskSGIS", 2, _glSampleMaskSGIS_args};

static const char * _glSamplePatternSGIS_args[1] = {"pattern"};
static const trace::FunctionSig _glSamplePatternSGIS_sig = {1285, "glSamplePatternSGIS", 1, _glSamplePatternSGIS_args};

static const char * _glArrayElementEXT_args[1] = {"i"};
static const trace::FunctionSig _glArrayElementEXT_sig = {1286, "glArrayElementEXT", 1, _glArrayElementEXT_args};

static const char * _glColorPointerEXT_args[5] = {"size", "type", "stride", "count", "pointer"};
static const trace::FunctionSig _glColorPointerEXT_sig = {1287, "glColorPointerEXT", 5, _glColorPointerEXT_args};

static const char * _glDrawArraysEXT_args[3] = {"mode", "first", "count"};
static const trace::FunctionSig _glDrawArraysEXT_sig = {1288, "glDrawArraysEXT", 3, _glDrawArraysEXT_args};

static const char * _glEdgeFlagPointerEXT_args[3] = {"stride", "count", "pointer"};
static const trace::FunctionSig _glEdgeFlagPointerEXT_sig = {1289, "glEdgeFlagPointerEXT", 3, _glEdgeFlagPointerEXT_args};

static const char * _glGetPointervEXT_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetPointervEXT_sig = {1290, "glGetPointervEXT", 2, _glGetPointervEXT_args};

static const char * _glIndexPointerEXT_args[4] = {"type", "stride", "count", "pointer"};
static const trace::FunctionSig _glIndexPointerEXT_sig = {1291, "glIndexPointerEXT", 4, _glIndexPointerEXT_args};

static const char * _glNormalPointerEXT_args[4] = {"type", "stride", "count", "pointer"};
static const trace::FunctionSig _glNormalPointerEXT_sig = {1292, "glNormalPointerEXT", 4, _glNormalPointerEXT_args};

static const char * _glTexCoordPointerEXT_args[5] = {"size", "type", "stride", "count", "pointer"};
static const trace::FunctionSig _glTexCoordPointerEXT_sig = {1293, "glTexCoordPointerEXT", 5, _glTexCoordPointerEXT_args};

static const char * _glVertexPointerEXT_args[5] = {"size", "type", "stride", "count", "pointer"};
static const trace::FunctionSig _glVertexPointerEXT_sig = {1294, "glVertexPointerEXT", 5, _glVertexPointerEXT_args};

static const char * _glBlendEquationEXT_args[1] = {"mode"};
static const trace::FunctionSig _glBlendEquationEXT_sig = {1295, "glBlendEquationEXT", 1, _glBlendEquationEXT_args};

static const char * _glSpriteParameterfSGIX_args[2] = {"pname", "param"};
static const trace::FunctionSig _glSpriteParameterfSGIX_sig = {1296, "glSpriteParameterfSGIX", 2, _glSpriteParameterfSGIX_args};

static const char * _glSpriteParameterfvSGIX_args[2] = {"pname", "params"};
static const trace::FunctionSig _glSpriteParameterfvSGIX_sig = {1297, "glSpriteParameterfvSGIX", 2, _glSpriteParameterfvSGIX_args};

static const char * _glSpriteParameteriSGIX_args[2] = {"pname", "param"};
static const trace::FunctionSig _glSpriteParameteriSGIX_sig = {1298, "glSpriteParameteriSGIX", 2, _glSpriteParameteriSGIX_args};

static const char * _glSpriteParameterivSGIX_args[2] = {"pname", "params"};
static const trace::FunctionSig _glSpriteParameterivSGIX_sig = {1299, "glSpriteParameterivSGIX", 2, _glSpriteParameterivSGIX_args};

static const char * _glPointParameterfEXT_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameterfEXT_sig = {1300, "glPointParameterfEXT", 2, _glPointParameterfEXT_args};

static const char * _glPointParameterfvEXT_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterfvEXT_sig = {1301, "glPointParameterfvEXT", 2, _glPointParameterfvEXT_args};

static const char * _glPointParameterfSGIS_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameterfSGIS_sig = {1302, "glPointParameterfSGIS", 2, _glPointParameterfSGIS_args};

static const char * _glPointParameterfvSGIS_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterfvSGIS_sig = {1303, "glPointParameterfvSGIS", 2, _glPointParameterfvSGIS_args};

static const char ** _glGetInstrumentsSGIX_args = NULL;
static const trace::FunctionSig _glGetInstrumentsSGIX_sig = {1304, "glGetInstrumentsSGIX", 0, _glGetInstrumentsSGIX_args};

static const char * _glInstrumentsBufferSGIX_args[2] = {"size", "buffer"};
static const trace::FunctionSig _glInstrumentsBufferSGIX_sig = {1305, "glInstrumentsBufferSGIX", 2, _glInstrumentsBufferSGIX_args};

static const char * _glPollInstrumentsSGIX_args[1] = {"marker_p"};
static const trace::FunctionSig _glPollInstrumentsSGIX_sig = {1306, "glPollInstrumentsSGIX", 1, _glPollInstrumentsSGIX_args};

static const char * _glReadInstrumentsSGIX_args[1] = {"marker"};
static const trace::FunctionSig _glReadInstrumentsSGIX_sig = {1307, "glReadInstrumentsSGIX", 1, _glReadInstrumentsSGIX_args};

static const char ** _glStartInstrumentsSGIX_args = NULL;
static const trace::FunctionSig _glStartInstrumentsSGIX_sig = {1308, "glStartInstrumentsSGIX", 0, _glStartInstrumentsSGIX_args};

static const char * _glStopInstrumentsSGIX_args[1] = {"marker"};
static const trace::FunctionSig _glStopInstrumentsSGIX_sig = {1309, "glStopInstrumentsSGIX", 1, _glStopInstrumentsSGIX_args};

static const char * _glFrameZoomSGIX_args[1] = {"factor"};
static const trace::FunctionSig _glFrameZoomSGIX_sig = {1310, "glFrameZoomSGIX", 1, _glFrameZoomSGIX_args};

static const char ** _glTagSampleBufferSGIX_args = NULL;
static const trace::FunctionSig _glTagSampleBufferSGIX_sig = {1311, "glTagSampleBufferSGIX", 0, _glTagSampleBufferSGIX_args};

static const char * _glDeformationMap3dSGIX_args[14] = {"target", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "w1", "w2", "wstride", "worder", "points"};
static const trace::FunctionSig _glDeformationMap3dSGIX_sig = {1312, "glDeformationMap3dSGIX", 14, _glDeformationMap3dSGIX_args};

static const char * _glDeformationMap3fSGIX_args[14] = {"target", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "w1", "w2", "wstride", "worder", "points"};
static const trace::FunctionSig _glDeformationMap3fSGIX_sig = {1313, "glDeformationMap3fSGIX", 14, _glDeformationMap3fSGIX_args};

static const char * _glDeformSGIX_args[1] = {"mask"};
static const trace::FunctionSig _glDeformSGIX_sig = {1314, "glDeformSGIX", 1, _glDeformSGIX_args};

static const char * _glLoadIdentityDeformationMapSGIX_args[1] = {"mask"};
static const trace::FunctionSig _glLoadIdentityDeformationMapSGIX_sig = {1315, "glLoadIdentityDeformationMapSGIX", 1, _glLoadIdentityDeformationMapSGIX_args};

static const char * _glReferencePlaneSGIX_args[1] = {"equation"};
static const trace::FunctionSig _glReferencePlaneSGIX_sig = {1316, "glReferencePlaneSGIX", 1, _glReferencePlaneSGIX_args};

static const char ** _glFlushRasterSGIX_args = NULL;
static const trace::FunctionSig _glFlushRasterSGIX_sig = {1317, "glFlushRasterSGIX", 0, _glFlushRasterSGIX_args};

static const char * _glFogFuncSGIS_args[2] = {"n", "points"};
static const trace::FunctionSig _glFogFuncSGIS_sig = {1318, "glFogFuncSGIS", 2, _glFogFuncSGIS_args};

static const char * _glGetFogFuncSGIS_args[1] = {"points"};
static const trace::FunctionSig _glGetFogFuncSGIS_sig = {1319, "glGetFogFuncSGIS", 1, _glGetFogFuncSGIS_args};

static const char * _glImageTransformParameteriHP_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glImageTransformParameteriHP_sig = {1320, "glImageTransformParameteriHP", 3, _glImageTransformParameteriHP_args};

static const char * _glImageTransformParameterfHP_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glImageTransformParameterfHP_sig = {1321, "glImageTransformParameterfHP", 3, _glImageTransformParameterfHP_args};

static const char * _glImageTransformParameterivHP_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glImageTransformParameterivHP_sig = {1322, "glImageTransformParameterivHP", 3, _glImageTransformParameterivHP_args};

static const char * _glImageTransformParameterfvHP_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glImageTransformParameterfvHP_sig = {1323, "glImageTransformParameterfvHP", 3, _glImageTransformParameterfvHP_args};

static const char * _glGetImageTransformParameterivHP_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetImageTransformParameterivHP_sig = {1324, "glGetImageTransformParameterivHP", 3, _glGetImageTransformParameterivHP_args};

static const char * _glGetImageTransformParameterfvHP_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetImageTransformParameterfvHP_sig = {1325, "glGetImageTransformParameterfvHP", 3, _glGetImageTransformParameterfvHP_args};

static const char * _glColorSubTableEXT_args[6] = {"target", "start", "count", "format", "type", "data"};
static const trace::FunctionSig _glColorSubTableEXT_sig = {1326, "glColorSubTableEXT", 6, _glColorSubTableEXT_args};

static const char * _glCopyColorSubTableEXT_args[5] = {"target", "start", "x", "y", "width"};
static const trace::FunctionSig _glCopyColorSubTableEXT_sig = {1327, "glCopyColorSubTableEXT", 5, _glCopyColorSubTableEXT_args};

static const char * _glHintPGI_args[2] = {"target", "mode"};
static const trace::FunctionSig _glHintPGI_sig = {1328, "glHintPGI", 2, _glHintPGI_args};

static const char * _glColorTableEXT_args[6] = {"target", "internalformat", "width", "format", "type", "table"};
static const trace::FunctionSig _glColorTableEXT_sig = {1329, "glColorTableEXT", 6, _glColorTableEXT_args};

static const char * _glGetColorTableEXT_args[4] = {"target", "format", "type", "data"};
static const trace::FunctionSig _glGetColorTableEXT_sig = {1330, "glGetColorTableEXT", 4, _glGetColorTableEXT_args};

static const char * _glGetColorTableParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameterivEXT_sig = {1331, "glGetColorTableParameterivEXT", 3, _glGetColorTableParameterivEXT_args};

static const char * _glGetColorTableParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetColorTableParameterfvEXT_sig = {1332, "glGetColorTableParameterfvEXT", 3, _glGetColorTableParameterfvEXT_args};

static const char * _glGetListParameterfvSGIX_args[3] = {"list", "pname", "params"};
static const trace::FunctionSig _glGetListParameterfvSGIX_sig = {1333, "glGetListParameterfvSGIX", 3, _glGetListParameterfvSGIX_args};

static const char * _glGetListParameterivSGIX_args[3] = {"list", "pname", "params"};
static const trace::FunctionSig _glGetListParameterivSGIX_sig = {1334, "glGetListParameterivSGIX", 3, _glGetListParameterivSGIX_args};

static const char * _glListParameterfSGIX_args[3] = {"list", "pname", "param"};
static const trace::FunctionSig _glListParameterfSGIX_sig = {1335, "glListParameterfSGIX", 3, _glListParameterfSGIX_args};

static const char * _glListParameterfvSGIX_args[3] = {"list", "pname", "params"};
static const trace::FunctionSig _glListParameterfvSGIX_sig = {1336, "glListParameterfvSGIX", 3, _glListParameterfvSGIX_args};

static const char * _glListParameteriSGIX_args[3] = {"list", "pname", "param"};
static const trace::FunctionSig _glListParameteriSGIX_sig = {1337, "glListParameteriSGIX", 3, _glListParameteriSGIX_args};

static const char * _glListParameterivSGIX_args[3] = {"list", "pname", "params"};
static const trace::FunctionSig _glListParameterivSGIX_sig = {1338, "glListParameterivSGIX", 3, _glListParameterivSGIX_args};

static const char * _glIndexMaterialEXT_args[2] = {"face", "mode"};
static const trace::FunctionSig _glIndexMaterialEXT_sig = {1339, "glIndexMaterialEXT", 2, _glIndexMaterialEXT_args};

static const char * _glIndexFuncEXT_args[2] = {"func", "ref"};
static const trace::FunctionSig _glIndexFuncEXT_sig = {1340, "glIndexFuncEXT", 2, _glIndexFuncEXT_args};

static const char * _glLockArraysEXT_args[2] = {"first", "count"};
static const trace::FunctionSig _glLockArraysEXT_sig = {1341, "glLockArraysEXT", 2, _glLockArraysEXT_args};

static const char ** _glUnlockArraysEXT_args = NULL;
static const trace::FunctionSig _glUnlockArraysEXT_sig = {1342, "glUnlockArraysEXT", 0, _glUnlockArraysEXT_args};

static const char * _glCullParameterdvEXT_args[2] = {"pname", "params"};
static const trace::FunctionSig _glCullParameterdvEXT_sig = {1343, "glCullParameterdvEXT", 2, _glCullParameterdvEXT_args};

static const char * _glCullParameterfvEXT_args[2] = {"pname", "params"};
static const trace::FunctionSig _glCullParameterfvEXT_sig = {1344, "glCullParameterfvEXT", 2, _glCullParameterfvEXT_args};

static const char * _glFragmentColorMaterialSGIX_args[2] = {"face", "mode"};
static const trace::FunctionSig _glFragmentColorMaterialSGIX_sig = {1345, "glFragmentColorMaterialSGIX", 2, _glFragmentColorMaterialSGIX_args};

static const char * _glFragmentLightfSGIX_args[3] = {"light", "pname", "param"};
static const trace::FunctionSig _glFragmentLightfSGIX_sig = {1346, "glFragmentLightfSGIX", 3, _glFragmentLightfSGIX_args};

static const char * _glFragmentLightfvSGIX_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glFragmentLightfvSGIX_sig = {1347, "glFragmentLightfvSGIX", 3, _glFragmentLightfvSGIX_args};

static const char * _glFragmentLightiSGIX_args[3] = {"light", "pname", "param"};
static const trace::FunctionSig _glFragmentLightiSGIX_sig = {1348, "glFragmentLightiSGIX", 3, _glFragmentLightiSGIX_args};

static const char * _glFragmentLightivSGIX_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glFragmentLightivSGIX_sig = {1349, "glFragmentLightivSGIX", 3, _glFragmentLightivSGIX_args};

static const char * _glFragmentLightModelfSGIX_args[2] = {"pname", "param"};
static const trace::FunctionSig _glFragmentLightModelfSGIX_sig = {1350, "glFragmentLightModelfSGIX", 2, _glFragmentLightModelfSGIX_args};

static const char * _glFragmentLightModelfvSGIX_args[2] = {"pname", "params"};
static const trace::FunctionSig _glFragmentLightModelfvSGIX_sig = {1351, "glFragmentLightModelfvSGIX", 2, _glFragmentLightModelfvSGIX_args};

static const char * _glFragmentLightModeliSGIX_args[2] = {"pname", "param"};
static const trace::FunctionSig _glFragmentLightModeliSGIX_sig = {1352, "glFragmentLightModeliSGIX", 2, _glFragmentLightModeliSGIX_args};

static const char * _glFragmentLightModelivSGIX_args[2] = {"pname", "params"};
static const trace::FunctionSig _glFragmentLightModelivSGIX_sig = {1353, "glFragmentLightModelivSGIX", 2, _glFragmentLightModelivSGIX_args};

static const char * _glFragmentMaterialfSGIX_args[3] = {"face", "pname", "param"};
static const trace::FunctionSig _glFragmentMaterialfSGIX_sig = {1354, "glFragmentMaterialfSGIX", 3, _glFragmentMaterialfSGIX_args};

static const char * _glFragmentMaterialfvSGIX_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glFragmentMaterialfvSGIX_sig = {1355, "glFragmentMaterialfvSGIX", 3, _glFragmentMaterialfvSGIX_args};

static const char * _glFragmentMaterialiSGIX_args[3] = {"face", "pname", "param"};
static const trace::FunctionSig _glFragmentMaterialiSGIX_sig = {1356, "glFragmentMaterialiSGIX", 3, _glFragmentMaterialiSGIX_args};

static const char * _glFragmentMaterialivSGIX_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glFragmentMaterialivSGIX_sig = {1357, "glFragmentMaterialivSGIX", 3, _glFragmentMaterialivSGIX_args};

static const char * _glGetFragmentLightfvSGIX_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glGetFragmentLightfvSGIX_sig = {1358, "glGetFragmentLightfvSGIX", 3, _glGetFragmentLightfvSGIX_args};

static const char * _glGetFragmentLightivSGIX_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glGetFragmentLightivSGIX_sig = {1359, "glGetFragmentLightivSGIX", 3, _glGetFragmentLightivSGIX_args};

static const char * _glGetFragmentMaterialfvSGIX_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glGetFragmentMaterialfvSGIX_sig = {1360, "glGetFragmentMaterialfvSGIX", 3, _glGetFragmentMaterialfvSGIX_args};

static const char * _glGetFragmentMaterialivSGIX_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glGetFragmentMaterialivSGIX_sig = {1361, "glGetFragmentMaterialivSGIX", 3, _glGetFragmentMaterialivSGIX_args};

static const char * _glLightEnviSGIX_args[2] = {"pname", "param"};
static const trace::FunctionSig _glLightEnviSGIX_sig = {1362, "glLightEnviSGIX", 2, _glLightEnviSGIX_args};

static const char * _glDrawRangeElementsEXT_args[6] = {"mode", "start", "end", "count", "type", "indices"};
static const trace::FunctionSig _glDrawRangeElementsEXT_sig = {1363, "glDrawRangeElementsEXT", 6, _glDrawRangeElementsEXT_args};

static const char * _glApplyTextureEXT_args[1] = {"mode"};
static const trace::FunctionSig _glApplyTextureEXT_sig = {1364, "glApplyTextureEXT", 1, _glApplyTextureEXT_args};

static const char * _glTextureLightEXT_args[1] = {"pname"};
static const trace::FunctionSig _glTextureLightEXT_sig = {1365, "glTextureLightEXT", 1, _glTextureLightEXT_args};

static const char * _glTextureMaterialEXT_args[2] = {"face", "mode"};
static const trace::FunctionSig _glTextureMaterialEXT_sig = {1366, "glTextureMaterialEXT", 2, _glTextureMaterialEXT_args};

static const char * _glAsyncMarkerSGIX_args[1] = {"marker"};
static const trace::FunctionSig _glAsyncMarkerSGIX_sig = {1367, "glAsyncMarkerSGIX", 1, _glAsyncMarkerSGIX_args};

static const char * _glFinishAsyncSGIX_args[1] = {"markerp"};
static const trace::FunctionSig _glFinishAsyncSGIX_sig = {1368, "glFinishAsyncSGIX", 1, _glFinishAsyncSGIX_args};

static const char * _glPollAsyncSGIX_args[1] = {"markerp"};
static const trace::FunctionSig _glPollAsyncSGIX_sig = {1369, "glPollAsyncSGIX", 1, _glPollAsyncSGIX_args};

static const char * _glGenAsyncMarkersSGIX_args[1] = {"range"};
static const trace::FunctionSig _glGenAsyncMarkersSGIX_sig = {1370, "glGenAsyncMarkersSGIX", 1, _glGenAsyncMarkersSGIX_args};

static const char * _glDeleteAsyncMarkersSGIX_args[2] = {"marker", "range"};
static const trace::FunctionSig _glDeleteAsyncMarkersSGIX_sig = {1371, "glDeleteAsyncMarkersSGIX", 2, _glDeleteAsyncMarkersSGIX_args};

static const char * _glIsAsyncMarkerSGIX_args[1] = {"marker"};
static const trace::FunctionSig _glIsAsyncMarkerSGIX_sig = {1372, "glIsAsyncMarkerSGIX", 1, _glIsAsyncMarkerSGIX_args};

static const char * _glVertexPointervINTEL_args[3] = {"size", "type", "pointer"};
static const trace::FunctionSig _glVertexPointervINTEL_sig = {1373, "glVertexPointervINTEL", 3, _glVertexPointervINTEL_args};

static const char * _glNormalPointervINTEL_args[2] = {"type", "pointer"};
static const trace::FunctionSig _glNormalPointervINTEL_sig = {1374, "glNormalPointervINTEL", 2, _glNormalPointervINTEL_args};

static const char * _glColorPointervINTEL_args[3] = {"size", "type", "pointer"};
static const trace::FunctionSig _glColorPointervINTEL_sig = {1375, "glColorPointervINTEL", 3, _glColorPointervINTEL_args};

static const char * _glTexCoordPointervINTEL_args[3] = {"size", "type", "pointer"};
static const trace::FunctionSig _glTexCoordPointervINTEL_sig = {1376, "glTexCoordPointervINTEL", 3, _glTexCoordPointervINTEL_args};

static const char * _glPixelTransformParameteriEXT_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glPixelTransformParameteriEXT_sig = {1377, "glPixelTransformParameteriEXT", 3, _glPixelTransformParameteriEXT_args};

static const char * _glPixelTransformParameterfEXT_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glPixelTransformParameterfEXT_sig = {1378, "glPixelTransformParameterfEXT", 3, _glPixelTransformParameterfEXT_args};

static const char * _glPixelTransformParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glPixelTransformParameterivEXT_sig = {1379, "glPixelTransformParameterivEXT", 3, _glPixelTransformParameterivEXT_args};

static const char * _glPixelTransformParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glPixelTransformParameterfvEXT_sig = {1380, "glPixelTransformParameterfvEXT", 3, _glPixelTransformParameterfvEXT_args};

static const char * _glGetPixelTransformParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetPixelTransformParameterivEXT_sig = {1381, "glGetPixelTransformParameterivEXT", 3, _glGetPixelTransformParameterivEXT_args};

static const char * _glGetPixelTransformParameterfvEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetPixelTransformParameterfvEXT_sig = {1382, "glGetPixelTransformParameterfvEXT", 3, _glGetPixelTransformParameterfvEXT_args};

static const char * _glSecondaryColor3bEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3bEXT_sig = {1383, "glSecondaryColor3bEXT", 3, _glSecondaryColor3bEXT_args};

static const char * _glSecondaryColor3bvEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3bvEXT_sig = {1384, "glSecondaryColor3bvEXT", 1, _glSecondaryColor3bvEXT_args};

static const char * _glSecondaryColor3dEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3dEXT_sig = {1385, "glSecondaryColor3dEXT", 3, _glSecondaryColor3dEXT_args};

static const char * _glSecondaryColor3dvEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3dvEXT_sig = {1386, "glSecondaryColor3dvEXT", 1, _glSecondaryColor3dvEXT_args};

static const char * _glSecondaryColor3fEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3fEXT_sig = {1387, "glSecondaryColor3fEXT", 3, _glSecondaryColor3fEXT_args};

static const char * _glSecondaryColor3fvEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3fvEXT_sig = {1388, "glSecondaryColor3fvEXT", 1, _glSecondaryColor3fvEXT_args};

static const char * _glSecondaryColor3iEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3iEXT_sig = {1389, "glSecondaryColor3iEXT", 3, _glSecondaryColor3iEXT_args};

static const char * _glSecondaryColor3ivEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3ivEXT_sig = {1390, "glSecondaryColor3ivEXT", 1, _glSecondaryColor3ivEXT_args};

static const char * _glSecondaryColor3sEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3sEXT_sig = {1391, "glSecondaryColor3sEXT", 3, _glSecondaryColor3sEXT_args};

static const char * _glSecondaryColor3svEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3svEXT_sig = {1392, "glSecondaryColor3svEXT", 1, _glSecondaryColor3svEXT_args};

static const char * _glSecondaryColor3ubEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3ubEXT_sig = {1393, "glSecondaryColor3ubEXT", 3, _glSecondaryColor3ubEXT_args};

static const char * _glSecondaryColor3ubvEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3ubvEXT_sig = {1394, "glSecondaryColor3ubvEXT", 1, _glSecondaryColor3ubvEXT_args};

static const char * _glSecondaryColor3uiEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3uiEXT_sig = {1395, "glSecondaryColor3uiEXT", 3, _glSecondaryColor3uiEXT_args};

static const char * _glSecondaryColor3uivEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3uivEXT_sig = {1396, "glSecondaryColor3uivEXT", 1, _glSecondaryColor3uivEXT_args};

static const char * _glSecondaryColor3usEXT_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3usEXT_sig = {1397, "glSecondaryColor3usEXT", 3, _glSecondaryColor3usEXT_args};

static const char * _glSecondaryColor3usvEXT_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3usvEXT_sig = {1398, "glSecondaryColor3usvEXT", 1, _glSecondaryColor3usvEXT_args};

static const char * _glSecondaryColorPointerEXT_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glSecondaryColorPointerEXT_sig = {1399, "glSecondaryColorPointerEXT", 4, _glSecondaryColorPointerEXT_args};

static const char * _glTextureNormalEXT_args[1] = {"mode"};
static const trace::FunctionSig _glTextureNormalEXT_sig = {1400, "glTextureNormalEXT", 1, _glTextureNormalEXT_args};

static const char * _glMultiDrawArraysEXT_args[4] = {"mode", "first", "count", "primcount"};
static const trace::FunctionSig _glMultiDrawArraysEXT_sig = {1401, "glMultiDrawArraysEXT", 4, _glMultiDrawArraysEXT_args};

static const char * _glMultiDrawElementsEXT_args[5] = {"mode", "count", "type", "indices", "primcount"};
static const trace::FunctionSig _glMultiDrawElementsEXT_sig = {1402, "glMultiDrawElementsEXT", 5, _glMultiDrawElementsEXT_args};

static const char * _glFogCoordfEXT_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoordfEXT_sig = {1403, "glFogCoordfEXT", 1, _glFogCoordfEXT_args};

static const char * _glFogCoordfvEXT_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoordfvEXT_sig = {1404, "glFogCoordfvEXT", 1, _glFogCoordfvEXT_args};

static const char * _glFogCoorddEXT_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoorddEXT_sig = {1405, "glFogCoorddEXT", 1, _glFogCoorddEXT_args};

static const char * _glFogCoorddvEXT_args[1] = {"coord"};
static const trace::FunctionSig _glFogCoorddvEXT_sig = {1406, "glFogCoorddvEXT", 1, _glFogCoorddvEXT_args};

static const char * _glFogCoordPointerEXT_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glFogCoordPointerEXT_sig = {1407, "glFogCoordPointerEXT", 3, _glFogCoordPointerEXT_args};

static const char * _glTangent3bEXT_args[3] = {"tx", "ty", "tz"};
static const trace::FunctionSig _glTangent3bEXT_sig = {1408, "glTangent3bEXT", 3, _glTangent3bEXT_args};

static const char * _glTangent3bvEXT_args[1] = {"v"};
static const trace::FunctionSig _glTangent3bvEXT_sig = {1409, "glTangent3bvEXT", 1, _glTangent3bvEXT_args};

static const char * _glTangent3dEXT_args[3] = {"tx", "ty", "tz"};
static const trace::FunctionSig _glTangent3dEXT_sig = {1410, "glTangent3dEXT", 3, _glTangent3dEXT_args};

static const char * _glTangent3dvEXT_args[1] = {"v"};
static const trace::FunctionSig _glTangent3dvEXT_sig = {1411, "glTangent3dvEXT", 1, _glTangent3dvEXT_args};

static const char * _glTangent3fEXT_args[3] = {"tx", "ty", "tz"};
static const trace::FunctionSig _glTangent3fEXT_sig = {1412, "glTangent3fEXT", 3, _glTangent3fEXT_args};

static const char * _glTangent3fvEXT_args[1] = {"v"};
static const trace::FunctionSig _glTangent3fvEXT_sig = {1413, "glTangent3fvEXT", 1, _glTangent3fvEXT_args};

static const char * _glTangent3iEXT_args[3] = {"tx", "ty", "tz"};
static const trace::FunctionSig _glTangent3iEXT_sig = {1414, "glTangent3iEXT", 3, _glTangent3iEXT_args};

static const char * _glTangent3ivEXT_args[1] = {"v"};
static const trace::FunctionSig _glTangent3ivEXT_sig = {1415, "glTangent3ivEXT", 1, _glTangent3ivEXT_args};

static const char * _glTangent3sEXT_args[3] = {"tx", "ty", "tz"};
static const trace::FunctionSig _glTangent3sEXT_sig = {1416, "glTangent3sEXT", 3, _glTangent3sEXT_args};

static const char * _glTangent3svEXT_args[1] = {"v"};
static const trace::FunctionSig _glTangent3svEXT_sig = {1417, "glTangent3svEXT", 1, _glTangent3svEXT_args};

static const char * _glBinormal3bEXT_args[3] = {"bx", "by", "bz"};
static const trace::FunctionSig _glBinormal3bEXT_sig = {1418, "glBinormal3bEXT", 3, _glBinormal3bEXT_args};

static const char * _glBinormal3bvEXT_args[1] = {"v"};
static const trace::FunctionSig _glBinormal3bvEXT_sig = {1419, "glBinormal3bvEXT", 1, _glBinormal3bvEXT_args};

static const char * _glBinormal3dEXT_args[3] = {"bx", "by", "bz"};
static const trace::FunctionSig _glBinormal3dEXT_sig = {1420, "glBinormal3dEXT", 3, _glBinormal3dEXT_args};

static const char * _glBinormal3dvEXT_args[1] = {"v"};
static const trace::FunctionSig _glBinormal3dvEXT_sig = {1421, "glBinormal3dvEXT", 1, _glBinormal3dvEXT_args};

static const char * _glBinormal3fEXT_args[3] = {"bx", "by", "bz"};
static const trace::FunctionSig _glBinormal3fEXT_sig = {1422, "glBinormal3fEXT", 3, _glBinormal3fEXT_args};

static const char * _glBinormal3fvEXT_args[1] = {"v"};
static const trace::FunctionSig _glBinormal3fvEXT_sig = {1423, "glBinormal3fvEXT", 1, _glBinormal3fvEXT_args};

static const char * _glBinormal3iEXT_args[3] = {"bx", "by", "bz"};
static const trace::FunctionSig _glBinormal3iEXT_sig = {1424, "glBinormal3iEXT", 3, _glBinormal3iEXT_args};

static const char * _glBinormal3ivEXT_args[1] = {"v"};
static const trace::FunctionSig _glBinormal3ivEXT_sig = {1425, "glBinormal3ivEXT", 1, _glBinormal3ivEXT_args};

static const char * _glBinormal3sEXT_args[3] = {"bx", "by", "bz"};
static const trace::FunctionSig _glBinormal3sEXT_sig = {1426, "glBinormal3sEXT", 3, _glBinormal3sEXT_args};

static const char * _glBinormal3svEXT_args[1] = {"v"};
static const trace::FunctionSig _glBinormal3svEXT_sig = {1427, "glBinormal3svEXT", 1, _glBinormal3svEXT_args};

static const char * _glTangentPointerEXT_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glTangentPointerEXT_sig = {1428, "glTangentPointerEXT", 3, _glTangentPointerEXT_args};

static const char * _glBinormalPointerEXT_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glBinormalPointerEXT_sig = {1429, "glBinormalPointerEXT", 3, _glBinormalPointerEXT_args};

static const char ** _glFinishTextureSUNX_args = NULL;
static const trace::FunctionSig _glFinishTextureSUNX_sig = {1430, "glFinishTextureSUNX", 0, _glFinishTextureSUNX_args};

static const char * _glGlobalAlphaFactorbSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactorbSUN_sig = {1431, "glGlobalAlphaFactorbSUN", 1, _glGlobalAlphaFactorbSUN_args};

static const char * _glGlobalAlphaFactorsSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactorsSUN_sig = {1432, "glGlobalAlphaFactorsSUN", 1, _glGlobalAlphaFactorsSUN_args};

static const char * _glGlobalAlphaFactoriSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactoriSUN_sig = {1433, "glGlobalAlphaFactoriSUN", 1, _glGlobalAlphaFactoriSUN_args};

static const char * _glGlobalAlphaFactorfSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactorfSUN_sig = {1434, "glGlobalAlphaFactorfSUN", 1, _glGlobalAlphaFactorfSUN_args};

static const char * _glGlobalAlphaFactordSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactordSUN_sig = {1435, "glGlobalAlphaFactordSUN", 1, _glGlobalAlphaFactordSUN_args};

static const char * _glGlobalAlphaFactorubSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactorubSUN_sig = {1436, "glGlobalAlphaFactorubSUN", 1, _glGlobalAlphaFactorubSUN_args};

static const char * _glGlobalAlphaFactorusSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactorusSUN_sig = {1437, "glGlobalAlphaFactorusSUN", 1, _glGlobalAlphaFactorusSUN_args};

static const char * _glGlobalAlphaFactoruiSUN_args[1] = {"factor"};
static const trace::FunctionSig _glGlobalAlphaFactoruiSUN_sig = {1438, "glGlobalAlphaFactoruiSUN", 1, _glGlobalAlphaFactoruiSUN_args};

static const char * _glReplacementCodeuiSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeuiSUN_sig = {1439, "glReplacementCodeuiSUN", 1, _glReplacementCodeuiSUN_args};

static const char * _glReplacementCodeusSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeusSUN_sig = {1440, "glReplacementCodeusSUN", 1, _glReplacementCodeusSUN_args};

static const char * _glReplacementCodeubSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeubSUN_sig = {1441, "glReplacementCodeubSUN", 1, _glReplacementCodeubSUN_args};

static const char * _glReplacementCodeuivSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeuivSUN_sig = {1442, "glReplacementCodeuivSUN", 1, _glReplacementCodeuivSUN_args};

static const char * _glReplacementCodeusvSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeusvSUN_sig = {1443, "glReplacementCodeusvSUN", 1, _glReplacementCodeusvSUN_args};

static const char * _glReplacementCodeubvSUN_args[1] = {"code"};
static const trace::FunctionSig _glReplacementCodeubvSUN_sig = {1444, "glReplacementCodeubvSUN", 1, _glReplacementCodeubvSUN_args};

static const char * _glReplacementCodePointerSUN_args[3] = {"type", "stride", "pointer"};
static const trace::FunctionSig _glReplacementCodePointerSUN_sig = {1445, "glReplacementCodePointerSUN", 3, _glReplacementCodePointerSUN_args};

static const char * _glColor4ubVertex2fSUN_args[6] = {"r", "g", "b", "a", "x", "y"};
static const trace::FunctionSig _glColor4ubVertex2fSUN_sig = {1446, "glColor4ubVertex2fSUN", 6, _glColor4ubVertex2fSUN_args};

static const char * _glColor4ubVertex2fvSUN_args[2] = {"c", "v"};
static const trace::FunctionSig _glColor4ubVertex2fvSUN_sig = {1447, "glColor4ubVertex2fvSUN", 2, _glColor4ubVertex2fvSUN_args};

static const char * _glColor4ubVertex3fSUN_args[7] = {"r", "g", "b", "a", "x", "y", "z"};
static const trace::FunctionSig _glColor4ubVertex3fSUN_sig = {1448, "glColor4ubVertex3fSUN", 7, _glColor4ubVertex3fSUN_args};

static const char * _glColor4ubVertex3fvSUN_args[2] = {"c", "v"};
static const trace::FunctionSig _glColor4ubVertex3fvSUN_sig = {1449, "glColor4ubVertex3fvSUN", 2, _glColor4ubVertex3fvSUN_args};

static const char * _glColor3fVertex3fSUN_args[6] = {"r", "g", "b", "x", "y", "z"};
static const trace::FunctionSig _glColor3fVertex3fSUN_sig = {1450, "glColor3fVertex3fSUN", 6, _glColor3fVertex3fSUN_args};

static const char * _glColor3fVertex3fvSUN_args[2] = {"c", "v"};
static const trace::FunctionSig _glColor3fVertex3fvSUN_sig = {1451, "glColor3fVertex3fvSUN", 2, _glColor3fVertex3fvSUN_args};

static const char * _glNormal3fVertex3fSUN_args[6] = {"nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glNormal3fVertex3fSUN_sig = {1452, "glNormal3fVertex3fSUN", 6, _glNormal3fVertex3fSUN_args};

static const char * _glNormal3fVertex3fvSUN_args[2] = {"n", "v"};
static const trace::FunctionSig _glNormal3fVertex3fvSUN_sig = {1453, "glNormal3fVertex3fvSUN", 2, _glNormal3fVertex3fvSUN_args};

static const char * _glColor4fNormal3fVertex3fSUN_args[10] = {"r", "g", "b", "a", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glColor4fNormal3fVertex3fSUN_sig = {1454, "glColor4fNormal3fVertex3fSUN", 10, _glColor4fNormal3fVertex3fSUN_args};

static const char * _glColor4fNormal3fVertex3fvSUN_args[3] = {"c", "n", "v"};
static const trace::FunctionSig _glColor4fNormal3fVertex3fvSUN_sig = {1455, "glColor4fNormal3fVertex3fvSUN", 3, _glColor4fNormal3fVertex3fvSUN_args};

static const char * _glTexCoord2fVertex3fSUN_args[5] = {"s", "t", "x", "y", "z"};
static const trace::FunctionSig _glTexCoord2fVertex3fSUN_sig = {1456, "glTexCoord2fVertex3fSUN", 5, _glTexCoord2fVertex3fSUN_args};

static const char * _glTexCoord2fVertex3fvSUN_args[2] = {"tc", "v"};
static const trace::FunctionSig _glTexCoord2fVertex3fvSUN_sig = {1457, "glTexCoord2fVertex3fvSUN", 2, _glTexCoord2fVertex3fvSUN_args};

static const char * _glTexCoord4fVertex4fSUN_args[8] = {"s", "t", "p", "q", "x", "y", "z", "w"};
static const trace::FunctionSig _glTexCoord4fVertex4fSUN_sig = {1458, "glTexCoord4fVertex4fSUN", 8, _glTexCoord4fVertex4fSUN_args};

static const char * _glTexCoord4fVertex4fvSUN_args[2] = {"tc", "v"};
static const trace::FunctionSig _glTexCoord4fVertex4fvSUN_sig = {1459, "glTexCoord4fVertex4fvSUN", 2, _glTexCoord4fVertex4fvSUN_args};

static const char * _glTexCoord2fColor4ubVertex3fSUN_args[9] = {"s", "t", "r", "g", "b", "a", "x", "y", "z"};
static const trace::FunctionSig _glTexCoord2fColor4ubVertex3fSUN_sig = {1460, "glTexCoord2fColor4ubVertex3fSUN", 9, _glTexCoord2fColor4ubVertex3fSUN_args};

static const char * _glTexCoord2fColor4ubVertex3fvSUN_args[3] = {"tc", "c", "v"};
static const trace::FunctionSig _glTexCoord2fColor4ubVertex3fvSUN_sig = {1461, "glTexCoord2fColor4ubVertex3fvSUN", 3, _glTexCoord2fColor4ubVertex3fvSUN_args};

static const char * _glTexCoord2fColor3fVertex3fSUN_args[8] = {"s", "t", "r", "g", "b", "x", "y", "z"};
static const trace::FunctionSig _glTexCoord2fColor3fVertex3fSUN_sig = {1462, "glTexCoord2fColor3fVertex3fSUN", 8, _glTexCoord2fColor3fVertex3fSUN_args};

static const char * _glTexCoord2fColor3fVertex3fvSUN_args[3] = {"tc", "c", "v"};
static const trace::FunctionSig _glTexCoord2fColor3fVertex3fvSUN_sig = {1463, "glTexCoord2fColor3fVertex3fvSUN", 3, _glTexCoord2fColor3fVertex3fvSUN_args};

static const char * _glTexCoord2fNormal3fVertex3fSUN_args[8] = {"s", "t", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glTexCoord2fNormal3fVertex3fSUN_sig = {1464, "glTexCoord2fNormal3fVertex3fSUN", 8, _glTexCoord2fNormal3fVertex3fSUN_args};

static const char * _glTexCoord2fNormal3fVertex3fvSUN_args[3] = {"tc", "n", "v"};
static const trace::FunctionSig _glTexCoord2fNormal3fVertex3fvSUN_sig = {1465, "glTexCoord2fNormal3fVertex3fvSUN", 3, _glTexCoord2fNormal3fVertex3fvSUN_args};

static const char * _glTexCoord2fColor4fNormal3fVertex3fSUN_args[12] = {"s", "t", "r", "g", "b", "a", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glTexCoord2fColor4fNormal3fVertex3fSUN_sig = {1466, "glTexCoord2fColor4fNormal3fVertex3fSUN", 12, _glTexCoord2fColor4fNormal3fVertex3fSUN_args};

static const char * _glTexCoord2fColor4fNormal3fVertex3fvSUN_args[4] = {"tc", "c", "n", "v"};
static const trace::FunctionSig _glTexCoord2fColor4fNormal3fVertex3fvSUN_sig = {1467, "glTexCoord2fColor4fNormal3fVertex3fvSUN", 4, _glTexCoord2fColor4fNormal3fVertex3fvSUN_args};

static const char * _glTexCoord4fColor4fNormal3fVertex4fSUN_args[15] = {"s", "t", "p", "q", "r", "g", "b", "a", "nx", "ny", "nz", "x", "y", "z", "w"};
static const trace::FunctionSig _glTexCoord4fColor4fNormal3fVertex4fSUN_sig = {1468, "glTexCoord4fColor4fNormal3fVertex4fSUN", 15, _glTexCoord4fColor4fNormal3fVertex4fSUN_args};

static const char * _glTexCoord4fColor4fNormal3fVertex4fvSUN_args[4] = {"tc", "c", "n", "v"};
static const trace::FunctionSig _glTexCoord4fColor4fNormal3fVertex4fvSUN_sig = {1469, "glTexCoord4fColor4fNormal3fVertex4fvSUN", 4, _glTexCoord4fColor4fNormal3fVertex4fvSUN_args};

static const char * _glReplacementCodeuiVertex3fSUN_args[4] = {"rc", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiVertex3fSUN_sig = {1470, "glReplacementCodeuiVertex3fSUN", 4, _glReplacementCodeuiVertex3fSUN_args};

static const char * _glReplacementCodeuiVertex3fvSUN_args[2] = {"rc", "v"};
static const trace::FunctionSig _glReplacementCodeuiVertex3fvSUN_sig = {1471, "glReplacementCodeuiVertex3fvSUN", 2, _glReplacementCodeuiVertex3fvSUN_args};

static const char * _glReplacementCodeuiColor4ubVertex3fSUN_args[8] = {"rc", "r", "g", "b", "a", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiColor4ubVertex3fSUN_sig = {1472, "glReplacementCodeuiColor4ubVertex3fSUN", 8, _glReplacementCodeuiColor4ubVertex3fSUN_args};

static const char * _glReplacementCodeuiColor4ubVertex3fvSUN_args[3] = {"rc", "c", "v"};
static const trace::FunctionSig _glReplacementCodeuiColor4ubVertex3fvSUN_sig = {1473, "glReplacementCodeuiColor4ubVertex3fvSUN", 3, _glReplacementCodeuiColor4ubVertex3fvSUN_args};

static const char * _glReplacementCodeuiColor3fVertex3fSUN_args[7] = {"rc", "r", "g", "b", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiColor3fVertex3fSUN_sig = {1474, "glReplacementCodeuiColor3fVertex3fSUN", 7, _glReplacementCodeuiColor3fVertex3fSUN_args};

static const char * _glReplacementCodeuiColor3fVertex3fvSUN_args[3] = {"rc", "c", "v"};
static const trace::FunctionSig _glReplacementCodeuiColor3fVertex3fvSUN_sig = {1475, "glReplacementCodeuiColor3fVertex3fvSUN", 3, _glReplacementCodeuiColor3fVertex3fvSUN_args};

static const char * _glReplacementCodeuiNormal3fVertex3fSUN_args[7] = {"rc", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiNormal3fVertex3fSUN_sig = {1476, "glReplacementCodeuiNormal3fVertex3fSUN", 7, _glReplacementCodeuiNormal3fVertex3fSUN_args};

static const char * _glReplacementCodeuiNormal3fVertex3fvSUN_args[3] = {"rc", "n", "v"};
static const trace::FunctionSig _glReplacementCodeuiNormal3fVertex3fvSUN_sig = {1477, "glReplacementCodeuiNormal3fVertex3fvSUN", 3, _glReplacementCodeuiNormal3fVertex3fvSUN_args};

static const char * _glReplacementCodeuiColor4fNormal3fVertex3fSUN_args[11] = {"rc", "r", "g", "b", "a", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiColor4fNormal3fVertex3fSUN_sig = {1478, "glReplacementCodeuiColor4fNormal3fVertex3fSUN", 11, _glReplacementCodeuiColor4fNormal3fVertex3fSUN_args};

static const char * _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_args[4] = {"rc", "c", "n", "v"};
static const trace::FunctionSig _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_sig = {1479, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN", 4, _glReplacementCodeuiColor4fNormal3fVertex3fvSUN_args};

static const char * _glReplacementCodeuiTexCoord2fVertex3fSUN_args[6] = {"rc", "s", "t", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fVertex3fSUN_sig = {1480, "glReplacementCodeuiTexCoord2fVertex3fSUN", 6, _glReplacementCodeuiTexCoord2fVertex3fSUN_args};

static const char * _glReplacementCodeuiTexCoord2fVertex3fvSUN_args[3] = {"rc", "tc", "v"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fVertex3fvSUN_sig = {1481, "glReplacementCodeuiTexCoord2fVertex3fvSUN", 3, _glReplacementCodeuiTexCoord2fVertex3fvSUN_args};

static const char * _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_args[9] = {"rc", "s", "t", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_sig = {1482, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", 9, _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_args};

static const char * _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_args[4] = {"rc", "tc", "n", "v"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_sig = {1483, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", 4, _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_args};

static const char * _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_args[13] = {"rc", "s", "t", "r", "g", "b", "a", "nx", "ny", "nz", "x", "y", "z"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_sig = {1484, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", 13, _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_args};

static const char * _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_args[5] = {"rc", "tc", "c", "n", "v"};
static const trace::FunctionSig _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_sig = {1485, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", 5, _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_args};

static const char * _glBlendFuncSeparateEXT_args[4] = {"sfactorRGB", "dfactorRGB", "sfactorAlpha", "dfactorAlpha"};
static const trace::FunctionSig _glBlendFuncSeparateEXT_sig = {1486, "glBlendFuncSeparateEXT", 4, _glBlendFuncSeparateEXT_args};

static const char * _glBlendFuncSeparateINGR_args[4] = {"sfactorRGB", "dfactorRGB", "sfactorAlpha", "dfactorAlpha"};
static const trace::FunctionSig _glBlendFuncSeparateINGR_sig = {1487, "glBlendFuncSeparateINGR", 4, _glBlendFuncSeparateINGR_args};

static const char * _glVertexWeightfEXT_args[1] = {"weight"};
static const trace::FunctionSig _glVertexWeightfEXT_sig = {1488, "glVertexWeightfEXT", 1, _glVertexWeightfEXT_args};

static const char * _glVertexWeightfvEXT_args[1] = {"weight"};
static const trace::FunctionSig _glVertexWeightfvEXT_sig = {1489, "glVertexWeightfvEXT", 1, _glVertexWeightfvEXT_args};

static const char * _glVertexWeightPointerEXT_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexWeightPointerEXT_sig = {1490, "glVertexWeightPointerEXT", 4, _glVertexWeightPointerEXT_args};

static const char ** _glFlushVertexArrayRangeNV_args = NULL;
static const trace::FunctionSig _glFlushVertexArrayRangeNV_sig = {1491, "glFlushVertexArrayRangeNV", 0, _glFlushVertexArrayRangeNV_args};

static const char * _glVertexArrayRangeNV_args[2] = {"length", "pointer"};
static const trace::FunctionSig _glVertexArrayRangeNV_sig = {1492, "glVertexArrayRangeNV", 2, _glVertexArrayRangeNV_args};

static const char * _glCombinerParameterfvNV_args[2] = {"pname", "params"};
static const trace::FunctionSig _glCombinerParameterfvNV_sig = {1493, "glCombinerParameterfvNV", 2, _glCombinerParameterfvNV_args};

static const char * _glCombinerParameterfNV_args[2] = {"pname", "param"};
static const trace::FunctionSig _glCombinerParameterfNV_sig = {1494, "glCombinerParameterfNV", 2, _glCombinerParameterfNV_args};

static const char * _glCombinerParameterivNV_args[2] = {"pname", "params"};
static const trace::FunctionSig _glCombinerParameterivNV_sig = {1495, "glCombinerParameterivNV", 2, _glCombinerParameterivNV_args};

static const char * _glCombinerParameteriNV_args[2] = {"pname", "param"};
static const trace::FunctionSig _glCombinerParameteriNV_sig = {1496, "glCombinerParameteriNV", 2, _glCombinerParameteriNV_args};

static const char * _glCombinerInputNV_args[6] = {"stage", "portion", "variable", "input", "mapping", "componentUsage"};
static const trace::FunctionSig _glCombinerInputNV_sig = {1497, "glCombinerInputNV", 6, _glCombinerInputNV_args};

static const char * _glCombinerOutputNV_args[10] = {"stage", "portion", "abOutput", "cdOutput", "sumOutput", "scale", "bias", "abDotProduct", "cdDotProduct", "muxSum"};
static const trace::FunctionSig _glCombinerOutputNV_sig = {1498, "glCombinerOutputNV", 10, _glCombinerOutputNV_args};

static const char * _glFinalCombinerInputNV_args[4] = {"variable", "input", "mapping", "componentUsage"};
static const trace::FunctionSig _glFinalCombinerInputNV_sig = {1499, "glFinalCombinerInputNV", 4, _glFinalCombinerInputNV_args};

static const char * _glGetCombinerInputParameterfvNV_args[5] = {"stage", "portion", "variable", "pname", "params"};
static const trace::FunctionSig _glGetCombinerInputParameterfvNV_sig = {1500, "glGetCombinerInputParameterfvNV", 5, _glGetCombinerInputParameterfvNV_args};

static const char * _glGetCombinerInputParameterivNV_args[5] = {"stage", "portion", "variable", "pname", "params"};
static const trace::FunctionSig _glGetCombinerInputParameterivNV_sig = {1501, "glGetCombinerInputParameterivNV", 5, _glGetCombinerInputParameterivNV_args};

static const char * _glGetCombinerOutputParameterfvNV_args[4] = {"stage", "portion", "pname", "params"};
static const trace::FunctionSig _glGetCombinerOutputParameterfvNV_sig = {1502, "glGetCombinerOutputParameterfvNV", 4, _glGetCombinerOutputParameterfvNV_args};

static const char * _glGetCombinerOutputParameterivNV_args[4] = {"stage", "portion", "pname", "params"};
static const trace::FunctionSig _glGetCombinerOutputParameterivNV_sig = {1503, "glGetCombinerOutputParameterivNV", 4, _glGetCombinerOutputParameterivNV_args};

static const char * _glGetFinalCombinerInputParameterfvNV_args[3] = {"variable", "pname", "params"};
static const trace::FunctionSig _glGetFinalCombinerInputParameterfvNV_sig = {1504, "glGetFinalCombinerInputParameterfvNV", 3, _glGetFinalCombinerInputParameterfvNV_args};

static const char * _glGetFinalCombinerInputParameterivNV_args[3] = {"variable", "pname", "params"};
static const trace::FunctionSig _glGetFinalCombinerInputParameterivNV_sig = {1505, "glGetFinalCombinerInputParameterivNV", 3, _glGetFinalCombinerInputParameterivNV_args};

static const char * _glGenPathsNV_args[1] = {"range"};
static const trace::FunctionSig _glGenPathsNV_sig = {1506, "glGenPathsNV", 1, _glGenPathsNV_args};

static const char * _glDeletePathsNV_args[2] = {"path", "range"};
static const trace::FunctionSig _glDeletePathsNV_sig = {1507, "glDeletePathsNV", 2, _glDeletePathsNV_args};

static const char * _glIsPathNV_args[1] = {"path"};
static const trace::FunctionSig _glIsPathNV_sig = {1508, "glIsPathNV", 1, _glIsPathNV_args};

static const char * _glPathCommandsNV_args[6] = {"path", "numCommands", "commands", "numCoords", "coordType", "coords"};
static const trace::FunctionSig _glPathCommandsNV_sig = {1509, "glPathCommandsNV", 6, _glPathCommandsNV_args};

static const char * _glPathCoordsNV_args[4] = {"path", "numCoords", "coordType", "coords"};
static const trace::FunctionSig _glPathCoordsNV_sig = {1510, "glPathCoordsNV", 4, _glPathCoordsNV_args};

static const char * _glPathSubCommandsNV_args[8] = {"path", "commandStart", "commandsToDelete", "numCommands", "commands", "numCoords", "coordType", "coords"};
static const trace::FunctionSig _glPathSubCommandsNV_sig = {1511, "glPathSubCommandsNV", 8, _glPathSubCommandsNV_args};

static const char * _glPathSubCoordsNV_args[5] = {"path", "coordStart", "numCoords", "coordType", "coords"};
static const trace::FunctionSig _glPathSubCoordsNV_sig = {1512, "glPathSubCoordsNV", 5, _glPathSubCoordsNV_args};

static const char * _glPathStringNV_args[4] = {"path", "format", "length", "pathString"};
static const trace::FunctionSig _glPathStringNV_sig = {1513, "glPathStringNV", 4, _glPathStringNV_args};

static const char * _glPathGlyphsNV_args[10] = {"firstPathName", "fontTarget", "fontName", "fontStyle", "numGlyphs", "type", "charcodes", "handleMissingGlyphs", "pathParameterTemplate", "emScale"};
static const trace::FunctionSig _glPathGlyphsNV_sig = {1514, "glPathGlyphsNV", 10, _glPathGlyphsNV_args};

static const char * _glPathGlyphRangeNV_args[9] = {"firstPathName", "fontTarget", "fontName", "fontStyle", "firstGlyph", "numGlyphs", "handleMissingGlyphs", "pathParameterTemplate", "emScale"};
static const trace::FunctionSig _glPathGlyphRangeNV_sig = {1515, "glPathGlyphRangeNV", 9, _glPathGlyphRangeNV_args};

static const char * _glWeightPathsNV_args[4] = {"resultPath", "numPaths", "paths", "weights"};
static const trace::FunctionSig _glWeightPathsNV_sig = {1516, "glWeightPathsNV", 4, _glWeightPathsNV_args};

static const char * _glCopyPathNV_args[2] = {"resultPath", "srcPath"};
static const trace::FunctionSig _glCopyPathNV_sig = {1517, "glCopyPathNV", 2, _glCopyPathNV_args};

static const char * _glInterpolatePathsNV_args[4] = {"resultPath", "pathA", "pathB", "weight"};
static const trace::FunctionSig _glInterpolatePathsNV_sig = {1518, "glInterpolatePathsNV", 4, _glInterpolatePathsNV_args};

static const char * _glTransformPathNV_args[4] = {"resultPath", "srcPath", "transformType", "transformValues"};
static const trace::FunctionSig _glTransformPathNV_sig = {1519, "glTransformPathNV", 4, _glTransformPathNV_args};

static const char * _glPathParameterivNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glPathParameterivNV_sig = {1520, "glPathParameterivNV", 3, _glPathParameterivNV_args};

static const char * _glPathParameteriNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glPathParameteriNV_sig = {1521, "glPathParameteriNV", 3, _glPathParameteriNV_args};

static const char * _glPathParameterfvNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glPathParameterfvNV_sig = {1522, "glPathParameterfvNV", 3, _glPathParameterfvNV_args};

static const char * _glPathParameterfNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glPathParameterfNV_sig = {1523, "glPathParameterfNV", 3, _glPathParameterfNV_args};

static const char * _glPathDashArrayNV_args[3] = {"path", "dashCount", "dashArray"};
static const trace::FunctionSig _glPathDashArrayNV_sig = {1524, "glPathDashArrayNV", 3, _glPathDashArrayNV_args};

static const char * _glPathStencilFuncNV_args[3] = {"func", "ref", "mask"};
static const trace::FunctionSig _glPathStencilFuncNV_sig = {1525, "glPathStencilFuncNV", 3, _glPathStencilFuncNV_args};

static const char * _glPathStencilDepthOffsetNV_args[2] = {"factor", "units"};
static const trace::FunctionSig _glPathStencilDepthOffsetNV_sig = {1526, "glPathStencilDepthOffsetNV", 2, _glPathStencilDepthOffsetNV_args};

static const char * _glStencilFillPathNV_args[3] = {"path", "fillMode", "mask"};
static const trace::FunctionSig _glStencilFillPathNV_sig = {1527, "glStencilFillPathNV", 3, _glStencilFillPathNV_args};

static const char * _glStencilStrokePathNV_args[3] = {"path", "reference", "mask"};
static const trace::FunctionSig _glStencilStrokePathNV_sig = {1528, "glStencilStrokePathNV", 3, _glStencilStrokePathNV_args};

static const char * _glStencilFillPathInstancedNV_args[8] = {"numPaths", "pathNameType", "paths", "pathBase", "fillMode", "mask", "transformType", "transformValues"};
static const trace::FunctionSig _glStencilFillPathInstancedNV_sig = {1529, "glStencilFillPathInstancedNV", 8, _glStencilFillPathInstancedNV_args};

static const char * _glStencilStrokePathInstancedNV_args[8] = {"numPaths", "pathNameType", "paths", "pathBase", "reference", "mask", "transformType", "transformValues"};
static const trace::FunctionSig _glStencilStrokePathInstancedNV_sig = {1530, "glStencilStrokePathInstancedNV", 8, _glStencilStrokePathInstancedNV_args};

static const char * _glPathCoverDepthFuncNV_args[1] = {"zfunc"};
static const trace::FunctionSig _glPathCoverDepthFuncNV_sig = {1531, "glPathCoverDepthFuncNV", 1, _glPathCoverDepthFuncNV_args};

static const char * _glPathColorGenNV_args[4] = {"color", "genMode", "colorFormat", "coeffs"};
static const trace::FunctionSig _glPathColorGenNV_sig = {1532, "glPathColorGenNV", 4, _glPathColorGenNV_args};

static const char * _glPathTexGenNV_args[4] = {"texCoordSet", "genMode", "components", "coeffs"};
static const trace::FunctionSig _glPathTexGenNV_sig = {1533, "glPathTexGenNV", 4, _glPathTexGenNV_args};

static const char * _glPathFogGenNV_args[1] = {"genMode"};
static const trace::FunctionSig _glPathFogGenNV_sig = {1534, "glPathFogGenNV", 1, _glPathFogGenNV_args};

static const char * _glCoverFillPathNV_args[2] = {"path", "coverMode"};
static const trace::FunctionSig _glCoverFillPathNV_sig = {1535, "glCoverFillPathNV", 2, _glCoverFillPathNV_args};

static const char * _glCoverStrokePathNV_args[2] = {"path", "coverMode"};
static const trace::FunctionSig _glCoverStrokePathNV_sig = {1536, "glCoverStrokePathNV", 2, _glCoverStrokePathNV_args};

static const char * _glCoverFillPathInstancedNV_args[7] = {"numPaths", "pathNameType", "paths", "pathBase", "coverMode", "transformType", "transformValues"};
static const trace::FunctionSig _glCoverFillPathInstancedNV_sig = {1537, "glCoverFillPathInstancedNV", 7, _glCoverFillPathInstancedNV_args};

static const char * _glCoverStrokePathInstancedNV_args[7] = {"numPaths", "pathNameType", "paths", "pathBase", "coverMode", "transformType", "transformValues"};
static const trace::FunctionSig _glCoverStrokePathInstancedNV_sig = {1538, "glCoverStrokePathInstancedNV", 7, _glCoverStrokePathInstancedNV_args};

static const char * _glGetPathParameterivNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glGetPathParameterivNV_sig = {1539, "glGetPathParameterivNV", 3, _glGetPathParameterivNV_args};

static const char * _glGetPathParameterfvNV_args[3] = {"path", "pname", "value"};
static const trace::FunctionSig _glGetPathParameterfvNV_sig = {1540, "glGetPathParameterfvNV", 3, _glGetPathParameterfvNV_args};

static const char * _glGetPathCommandsNV_args[2] = {"path", "commands"};
static const trace::FunctionSig _glGetPathCommandsNV_sig = {1541, "glGetPathCommandsNV", 2, _glGetPathCommandsNV_args};

static const char * _glGetPathCoordsNV_args[2] = {"path", "coords"};
static const trace::FunctionSig _glGetPathCoordsNV_sig = {1542, "glGetPathCoordsNV", 2, _glGetPathCoordsNV_args};

static const char * _glGetPathDashArrayNV_args[2] = {"path", "dashArray"};
static const trace::FunctionSig _glGetPathDashArrayNV_sig = {1543, "glGetPathDashArrayNV", 2, _glGetPathDashArrayNV_args};

static const char * _glGetPathMetricsNV_args[7] = {"metricQueryMask", "numPaths", "pathNameType", "paths", "pathBase", "stride", "metrics"};
static const trace::FunctionSig _glGetPathMetricsNV_sig = {1544, "glGetPathMetricsNV", 7, _glGetPathMetricsNV_args};

static const char * _glGetPathMetricRangeNV_args[5] = {"metricQueryMask", "firstPathName", "numPaths", "stride", "metrics"};
static const trace::FunctionSig _glGetPathMetricRangeNV_sig = {1545, "glGetPathMetricRangeNV", 5, _glGetPathMetricRangeNV_args};

static const char * _glGetPathSpacingNV_args[9] = {"pathListMode", "numPaths", "pathNameType", "paths", "pathBase", "advanceScale", "kerningScale", "transformType", "returnedSpacing"};
static const trace::FunctionSig _glGetPathSpacingNV_sig = {1546, "glGetPathSpacingNV", 9, _glGetPathSpacingNV_args};

static const char * _glGetPathColorGenivNV_args[3] = {"color", "pname", "value"};
static const trace::FunctionSig _glGetPathColorGenivNV_sig = {1547, "glGetPathColorGenivNV", 3, _glGetPathColorGenivNV_args};

static const char * _glGetPathColorGenfvNV_args[3] = {"color", "pname", "value"};
static const trace::FunctionSig _glGetPathColorGenfvNV_sig = {1548, "glGetPathColorGenfvNV", 3, _glGetPathColorGenfvNV_args};

static const char * _glGetPathTexGenivNV_args[3] = {"texCoordSet", "pname", "value"};
static const trace::FunctionSig _glGetPathTexGenivNV_sig = {1549, "glGetPathTexGenivNV", 3, _glGetPathTexGenivNV_args};

static const char * _glGetPathTexGenfvNV_args[3] = {"texCoordSet", "pname", "value"};
static const trace::FunctionSig _glGetPathTexGenfvNV_sig = {1550, "glGetPathTexGenfvNV", 3, _glGetPathTexGenfvNV_args};

static const char * _glIsPointInFillPathNV_args[4] = {"path", "mask", "x", "y"};
static const trace::FunctionSig _glIsPointInFillPathNV_sig = {1551, "glIsPointInFillPathNV", 4, _glIsPointInFillPathNV_args};

static const char * _glIsPointInStrokePathNV_args[3] = {"path", "x", "y"};
static const trace::FunctionSig _glIsPointInStrokePathNV_sig = {1552, "glIsPointInStrokePathNV", 3, _glIsPointInStrokePathNV_args};

static const char * _glGetPathLengthNV_args[3] = {"path", "startSegment", "numSegments"};
static const trace::FunctionSig _glGetPathLengthNV_sig = {1553, "glGetPathLengthNV", 3, _glGetPathLengthNV_args};

static const char * _glPointAlongPathNV_args[8] = {"path", "startSegment", "numSegments", "distance", "x", "y", "tangentX", "tangentY"};
static const trace::FunctionSig _glPointAlongPathNV_sig = {1554, "glPointAlongPathNV", 8, _glPointAlongPathNV_args};

static const char ** _glResizeBuffersMESA_args = NULL;
static const trace::FunctionSig _glResizeBuffersMESA_sig = {1555, "glResizeBuffersMESA", 0, _glResizeBuffersMESA_args};

static const char * _glWindowPos2dMESA_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2dMESA_sig = {1556, "glWindowPos2dMESA", 2, _glWindowPos2dMESA_args};

static const char * _glWindowPos2dvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2dvMESA_sig = {1557, "glWindowPos2dvMESA", 1, _glWindowPos2dvMESA_args};

static const char * _glWindowPos2fMESA_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2fMESA_sig = {1558, "glWindowPos2fMESA", 2, _glWindowPos2fMESA_args};

static const char * _glWindowPos2fvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2fvMESA_sig = {1559, "glWindowPos2fvMESA", 1, _glWindowPos2fvMESA_args};

static const char * _glWindowPos2iMESA_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2iMESA_sig = {1560, "glWindowPos2iMESA", 2, _glWindowPos2iMESA_args};

static const char * _glWindowPos2ivMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2ivMESA_sig = {1561, "glWindowPos2ivMESA", 1, _glWindowPos2ivMESA_args};

static const char * _glWindowPos2sMESA_args[2] = {"x", "y"};
static const trace::FunctionSig _glWindowPos2sMESA_sig = {1562, "glWindowPos2sMESA", 2, _glWindowPos2sMESA_args};

static const char * _glWindowPos2svMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos2svMESA_sig = {1563, "glWindowPos2svMESA", 1, _glWindowPos2svMESA_args};

static const char * _glWindowPos3dMESA_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3dMESA_sig = {1564, "glWindowPos3dMESA", 3, _glWindowPos3dMESA_args};

static const char * _glWindowPos3dvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3dvMESA_sig = {1565, "glWindowPos3dvMESA", 1, _glWindowPos3dvMESA_args};

static const char * _glWindowPos3fMESA_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3fMESA_sig = {1566, "glWindowPos3fMESA", 3, _glWindowPos3fMESA_args};

static const char * _glWindowPos3fvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3fvMESA_sig = {1567, "glWindowPos3fvMESA", 1, _glWindowPos3fvMESA_args};

static const char * _glWindowPos3iMESA_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3iMESA_sig = {1568, "glWindowPos3iMESA", 3, _glWindowPos3iMESA_args};

static const char * _glWindowPos3ivMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3ivMESA_sig = {1569, "glWindowPos3ivMESA", 1, _glWindowPos3ivMESA_args};

static const char * _glWindowPos3sMESA_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glWindowPos3sMESA_sig = {1570, "glWindowPos3sMESA", 3, _glWindowPos3sMESA_args};

static const char * _glWindowPos3svMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos3svMESA_sig = {1571, "glWindowPos3svMESA", 1, _glWindowPos3svMESA_args};

static const char * _glWindowPos4dMESA_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glWindowPos4dMESA_sig = {1572, "glWindowPos4dMESA", 4, _glWindowPos4dMESA_args};

static const char * _glWindowPos4dvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos4dvMESA_sig = {1573, "glWindowPos4dvMESA", 1, _glWindowPos4dvMESA_args};

static const char * _glWindowPos4fMESA_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glWindowPos4fMESA_sig = {1574, "glWindowPos4fMESA", 4, _glWindowPos4fMESA_args};

static const char * _glWindowPos4fvMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos4fvMESA_sig = {1575, "glWindowPos4fvMESA", 1, _glWindowPos4fvMESA_args};

static const char * _glWindowPos4iMESA_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glWindowPos4iMESA_sig = {1576, "glWindowPos4iMESA", 4, _glWindowPos4iMESA_args};

static const char * _glWindowPos4ivMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos4ivMESA_sig = {1577, "glWindowPos4ivMESA", 1, _glWindowPos4ivMESA_args};

static const char * _glWindowPos4sMESA_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glWindowPos4sMESA_sig = {1578, "glWindowPos4sMESA", 4, _glWindowPos4sMESA_args};

static const char * _glWindowPos4svMESA_args[1] = {"v"};
static const trace::FunctionSig _glWindowPos4svMESA_sig = {1579, "glWindowPos4svMESA", 1, _glWindowPos4svMESA_args};

static const char * _glMultiModeDrawArraysIBM_args[5] = {"mode", "first", "count", "primcount", "modestride"};
static const trace::FunctionSig _glMultiModeDrawArraysIBM_sig = {1580, "glMultiModeDrawArraysIBM", 5, _glMultiModeDrawArraysIBM_args};

static const char * _glMultiModeDrawElementsIBM_args[6] = {"mode", "count", "type", "indices", "primcount", "modestride"};
static const trace::FunctionSig _glMultiModeDrawElementsIBM_sig = {1581, "glMultiModeDrawElementsIBM", 6, _glMultiModeDrawElementsIBM_args};

static const char * _glColorPointerListIBM_args[5] = {"size", "type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glColorPointerListIBM_sig = {1582, "glColorPointerListIBM", 5, _glColorPointerListIBM_args};

static const char * _glSecondaryColorPointerListIBM_args[5] = {"size", "type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glSecondaryColorPointerListIBM_sig = {1583, "glSecondaryColorPointerListIBM", 5, _glSecondaryColorPointerListIBM_args};

static const char * _glEdgeFlagPointerListIBM_args[3] = {"stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glEdgeFlagPointerListIBM_sig = {1584, "glEdgeFlagPointerListIBM", 3, _glEdgeFlagPointerListIBM_args};

static const char * _glFogCoordPointerListIBM_args[4] = {"type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glFogCoordPointerListIBM_sig = {1585, "glFogCoordPointerListIBM", 4, _glFogCoordPointerListIBM_args};

static const char * _glIndexPointerListIBM_args[4] = {"type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glIndexPointerListIBM_sig = {1586, "glIndexPointerListIBM", 4, _glIndexPointerListIBM_args};

static const char * _glNormalPointerListIBM_args[4] = {"type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glNormalPointerListIBM_sig = {1587, "glNormalPointerListIBM", 4, _glNormalPointerListIBM_args};

static const char * _glTexCoordPointerListIBM_args[5] = {"size", "type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glTexCoordPointerListIBM_sig = {1588, "glTexCoordPointerListIBM", 5, _glTexCoordPointerListIBM_args};

static const char * _glVertexPointerListIBM_args[5] = {"size", "type", "stride", "pointer", "ptrstride"};
static const trace::FunctionSig _glVertexPointerListIBM_sig = {1589, "glVertexPointerListIBM", 5, _glVertexPointerListIBM_args};

static const char * _glTbufferMask3DFX_args[1] = {"mask"};
static const trace::FunctionSig _glTbufferMask3DFX_sig = {1590, "glTbufferMask3DFX", 1, _glTbufferMask3DFX_args};

static const char * _glSampleMaskEXT_args[2] = {"value", "invert"};
static const trace::FunctionSig _glSampleMaskEXT_sig = {1591, "glSampleMaskEXT", 2, _glSampleMaskEXT_args};

static const char * _glSamplePatternEXT_args[1] = {"pattern"};
static const trace::FunctionSig _glSamplePatternEXT_sig = {1592, "glSamplePatternEXT", 1, _glSamplePatternEXT_args};

static const char * _glTextureColorMaskSGIS_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glTextureColorMaskSGIS_sig = {1593, "glTextureColorMaskSGIS", 4, _glTextureColorMaskSGIS_args};

static const char * _glIglooInterfaceSGIX_args[2] = {"pname", "params"};
static const trace::FunctionSig _glIglooInterfaceSGIX_sig = {1594, "glIglooInterfaceSGIX", 2, _glIglooInterfaceSGIX_args};

static const char * _glDeleteFencesNV_args[2] = {"n", "fences"};
static const trace::FunctionSig _glDeleteFencesNV_sig = {1595, "glDeleteFencesNV", 2, _glDeleteFencesNV_args};

static const char * _glGenFencesNV_args[2] = {"n", "fences"};
static const trace::FunctionSig _glGenFencesNV_sig = {1596, "glGenFencesNV", 2, _glGenFencesNV_args};

static const char * _glIsFenceNV_args[1] = {"fence"};
static const trace::FunctionSig _glIsFenceNV_sig = {1597, "glIsFenceNV", 1, _glIsFenceNV_args};

static const char * _glTestFenceNV_args[1] = {"fence"};
static const trace::FunctionSig _glTestFenceNV_sig = {1598, "glTestFenceNV", 1, _glTestFenceNV_args};

static const char * _glGetFenceivNV_args[3] = {"fence", "pname", "params"};
static const trace::FunctionSig _glGetFenceivNV_sig = {1599, "glGetFenceivNV", 3, _glGetFenceivNV_args};

static const char * _glFinishFenceNV_args[1] = {"fence"};
static const trace::FunctionSig _glFinishFenceNV_sig = {1600, "glFinishFenceNV", 1, _glFinishFenceNV_args};

static const char * _glSetFenceNV_args[2] = {"fence", "condition"};
static const trace::FunctionSig _glSetFenceNV_sig = {1601, "glSetFenceNV", 2, _glSetFenceNV_args};

static const char * _glMapControlPointsNV_args[9] = {"target", "index", "type", "ustride", "vstride", "uorder", "vorder", "packed", "points"};
static const trace::FunctionSig _glMapControlPointsNV_sig = {1602, "glMapControlPointsNV", 9, _glMapControlPointsNV_args};

static const char * _glMapParameterivNV_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glMapParameterivNV_sig = {1603, "glMapParameterivNV", 3, _glMapParameterivNV_args};

static const char * _glMapParameterfvNV_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glMapParameterfvNV_sig = {1604, "glMapParameterfvNV", 3, _glMapParameterfvNV_args};

static const char * _glGetMapControlPointsNV_args[7] = {"target", "index", "type", "ustride", "vstride", "packed", "points"};
static const trace::FunctionSig _glGetMapControlPointsNV_sig = {1605, "glGetMapControlPointsNV", 7, _glGetMapControlPointsNV_args};

static const char * _glGetMapParameterivNV_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMapParameterivNV_sig = {1606, "glGetMapParameterivNV", 3, _glGetMapParameterivNV_args};

static const char * _glGetMapParameterfvNV_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetMapParameterfvNV_sig = {1607, "glGetMapParameterfvNV", 3, _glGetMapParameterfvNV_args};

static const char * _glGetMapAttribParameterivNV_args[4] = {"target", "index", "pname", "params"};
static const trace::FunctionSig _glGetMapAttribParameterivNV_sig = {1608, "glGetMapAttribParameterivNV", 4, _glGetMapAttribParameterivNV_args};

static const char * _glGetMapAttribParameterfvNV_args[4] = {"target", "index", "pname", "params"};
static const trace::FunctionSig _glGetMapAttribParameterfvNV_sig = {1609, "glGetMapAttribParameterfvNV", 4, _glGetMapAttribParameterfvNV_args};

static const char * _glEvalMapsNV_args[2] = {"target", "mode"};
static const trace::FunctionSig _glEvalMapsNV_sig = {1610, "glEvalMapsNV", 2, _glEvalMapsNV_args};

static const char * _glCombinerStageParameterfvNV_args[3] = {"stage", "pname", "params"};
static const trace::FunctionSig _glCombinerStageParameterfvNV_sig = {1611, "glCombinerStageParameterfvNV", 3, _glCombinerStageParameterfvNV_args};

static const char * _glGetCombinerStageParameterfvNV_args[3] = {"stage", "pname", "params"};
static const trace::FunctionSig _glGetCombinerStageParameterfvNV_sig = {1612, "glGetCombinerStageParameterfvNV", 3, _glGetCombinerStageParameterfvNV_args};

static const char * _glAreProgramsResidentNV_args[3] = {"n", "ids", "residences"};
static const trace::FunctionSig _glAreProgramsResidentNV_sig = {1613, "glAreProgramsResidentNV", 3, _glAreProgramsResidentNV_args};

static const char * _glBindProgramNV_args[2] = {"target", "program"};
static const trace::FunctionSig _glBindProgramNV_sig = {1614, "glBindProgramNV", 2, _glBindProgramNV_args};

static const char * _glDeleteProgramsNV_args[2] = {"n", "programs"};
static const trace::FunctionSig _glDeleteProgramsNV_sig = {1615, "glDeleteProgramsNV", 2, _glDeleteProgramsNV_args};

static const char * _glExecuteProgramNV_args[3] = {"target", "id", "params"};
static const trace::FunctionSig _glExecuteProgramNV_sig = {1616, "glExecuteProgramNV", 3, _glExecuteProgramNV_args};

static const char * _glGenProgramsNV_args[2] = {"n", "programs"};
static const trace::FunctionSig _glGenProgramsNV_sig = {1617, "glGenProgramsNV", 2, _glGenProgramsNV_args};

static const char * _glGetProgramParameterdvNV_args[4] = {"target", "index", "pname", "params"};
static const trace::FunctionSig _glGetProgramParameterdvNV_sig = {1618, "glGetProgramParameterdvNV", 4, _glGetProgramParameterdvNV_args};

static const char * _glGetProgramParameterfvNV_args[4] = {"target", "index", "pname", "params"};
static const trace::FunctionSig _glGetProgramParameterfvNV_sig = {1619, "glGetProgramParameterfvNV", 4, _glGetProgramParameterfvNV_args};

static const char * _glGetProgramivNV_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetProgramivNV_sig = {1620, "glGetProgramivNV", 3, _glGetProgramivNV_args};

static const char * _glGetProgramStringNV_args[3] = {"id", "pname", "program"};
static const trace::FunctionSig _glGetProgramStringNV_sig = {1621, "glGetProgramStringNV", 3, _glGetProgramStringNV_args};

static const char * _glGetTrackMatrixivNV_args[4] = {"target", "address", "pname", "params"};
static const trace::FunctionSig _glGetTrackMatrixivNV_sig = {1622, "glGetTrackMatrixivNV", 4, _glGetTrackMatrixivNV_args};

static const char * _glGetVertexAttribdvNV_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribdvNV_sig = {1623, "glGetVertexAttribdvNV", 3, _glGetVertexAttribdvNV_args};

static const char * _glGetVertexAttribfvNV_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribfvNV_sig = {1624, "glGetVertexAttribfvNV", 3, _glGetVertexAttribfvNV_args};

static const char * _glGetVertexAttribivNV_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribivNV_sig = {1625, "glGetVertexAttribivNV", 3, _glGetVertexAttribivNV_args};

static const char * _glGetVertexAttribPointervNV_args[3] = {"index", "pname", "pointer"};
static const trace::FunctionSig _glGetVertexAttribPointervNV_sig = {1626, "glGetVertexAttribPointervNV", 3, _glGetVertexAttribPointervNV_args};

static const char * _glIsProgramNV_args[1] = {"program"};
static const trace::FunctionSig _glIsProgramNV_sig = {1627, "glIsProgramNV", 1, _glIsProgramNV_args};

static const char * _glLoadProgramNV_args[4] = {"target", "id", "len", "program"};
static const trace::FunctionSig _glLoadProgramNV_sig = {1628, "glLoadProgramNV", 4, _glLoadProgramNV_args};

static const char * _glProgramParameter4dNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramParameter4dNV_sig = {1629, "glProgramParameter4dNV", 6, _glProgramParameter4dNV_args};

static const char * _glProgramParameter4dvNV_args[3] = {"target", "index", "v"};
static const trace::FunctionSig _glProgramParameter4dvNV_sig = {1630, "glProgramParameter4dvNV", 3, _glProgramParameter4dvNV_args};

static const char * _glProgramParameter4fNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramParameter4fNV_sig = {1631, "glProgramParameter4fNV", 6, _glProgramParameter4fNV_args};

static const char * _glProgramParameter4fvNV_args[3] = {"target", "index", "v"};
static const trace::FunctionSig _glProgramParameter4fvNV_sig = {1632, "glProgramParameter4fvNV", 3, _glProgramParameter4fvNV_args};

static const char * _glProgramParameters4dvNV_args[4] = {"target", "index", "count", "v"};
static const trace::FunctionSig _glProgramParameters4dvNV_sig = {1633, "glProgramParameters4dvNV", 4, _glProgramParameters4dvNV_args};

static const char * _glProgramParameters4fvNV_args[4] = {"target", "index", "count", "v"};
static const trace::FunctionSig _glProgramParameters4fvNV_sig = {1634, "glProgramParameters4fvNV", 4, _glProgramParameters4fvNV_args};

static const char * _glRequestResidentProgramsNV_args[2] = {"n", "programs"};
static const trace::FunctionSig _glRequestResidentProgramsNV_sig = {1635, "glRequestResidentProgramsNV", 2, _glRequestResidentProgramsNV_args};

static const char * _glTrackMatrixNV_args[4] = {"target", "address", "matrix", "transform"};
static const trace::FunctionSig _glTrackMatrixNV_sig = {1636, "glTrackMatrixNV", 4, _glTrackMatrixNV_args};

static const char * _glVertexAttribPointerNV_args[5] = {"index", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribPointerNV_sig = {1637, "glVertexAttribPointerNV", 5, _glVertexAttribPointerNV_args};

static const char * _glVertexAttrib1dNV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1dNV_sig = {1638, "glVertexAttrib1dNV", 2, _glVertexAttrib1dNV_args};

static const char * _glVertexAttrib1dvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1dvNV_sig = {1639, "glVertexAttrib1dvNV", 2, _glVertexAttrib1dvNV_args};

static const char * _glVertexAttrib1fNV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1fNV_sig = {1640, "glVertexAttrib1fNV", 2, _glVertexAttrib1fNV_args};

static const char * _glVertexAttrib1fvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1fvNV_sig = {1641, "glVertexAttrib1fvNV", 2, _glVertexAttrib1fvNV_args};

static const char * _glVertexAttrib1sNV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1sNV_sig = {1642, "glVertexAttrib1sNV", 2, _glVertexAttrib1sNV_args};

static const char * _glVertexAttrib1svNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1svNV_sig = {1643, "glVertexAttrib1svNV", 2, _glVertexAttrib1svNV_args};

static const char * _glVertexAttrib2dNV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2dNV_sig = {1644, "glVertexAttrib2dNV", 3, _glVertexAttrib2dNV_args};

static const char * _glVertexAttrib2dvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2dvNV_sig = {1645, "glVertexAttrib2dvNV", 2, _glVertexAttrib2dvNV_args};

static const char * _glVertexAttrib2fNV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2fNV_sig = {1646, "glVertexAttrib2fNV", 3, _glVertexAttrib2fNV_args};

static const char * _glVertexAttrib2fvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2fvNV_sig = {1647, "glVertexAttrib2fvNV", 2, _glVertexAttrib2fvNV_args};

static const char * _glVertexAttrib2sNV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2sNV_sig = {1648, "glVertexAttrib2sNV", 3, _glVertexAttrib2sNV_args};

static const char * _glVertexAttrib2svNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2svNV_sig = {1649, "glVertexAttrib2svNV", 2, _glVertexAttrib2svNV_args};

static const char * _glVertexAttrib3dNV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3dNV_sig = {1650, "glVertexAttrib3dNV", 4, _glVertexAttrib3dNV_args};

static const char * _glVertexAttrib3dvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3dvNV_sig = {1651, "glVertexAttrib3dvNV", 2, _glVertexAttrib3dvNV_args};

static const char * _glVertexAttrib3fNV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3fNV_sig = {1652, "glVertexAttrib3fNV", 4, _glVertexAttrib3fNV_args};

static const char * _glVertexAttrib3fvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3fvNV_sig = {1653, "glVertexAttrib3fvNV", 2, _glVertexAttrib3fvNV_args};

static const char * _glVertexAttrib3sNV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3sNV_sig = {1654, "glVertexAttrib3sNV", 4, _glVertexAttrib3sNV_args};

static const char * _glVertexAttrib3svNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3svNV_sig = {1655, "glVertexAttrib3svNV", 2, _glVertexAttrib3svNV_args};

static const char * _glVertexAttrib4dNV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4dNV_sig = {1656, "glVertexAttrib4dNV", 5, _glVertexAttrib4dNV_args};

static const char * _glVertexAttrib4dvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4dvNV_sig = {1657, "glVertexAttrib4dvNV", 2, _glVertexAttrib4dvNV_args};

static const char * _glVertexAttrib4fNV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4fNV_sig = {1658, "glVertexAttrib4fNV", 5, _glVertexAttrib4fNV_args};

static const char * _glVertexAttrib4fvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4fvNV_sig = {1659, "glVertexAttrib4fvNV", 2, _glVertexAttrib4fvNV_args};

static const char * _glVertexAttrib4sNV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4sNV_sig = {1660, "glVertexAttrib4sNV", 5, _glVertexAttrib4sNV_args};

static const char * _glVertexAttrib4svNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4svNV_sig = {1661, "glVertexAttrib4svNV", 2, _glVertexAttrib4svNV_args};

static const char * _glVertexAttrib4ubNV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4ubNV_sig = {1662, "glVertexAttrib4ubNV", 5, _glVertexAttrib4ubNV_args};

static const char * _glVertexAttrib4ubvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4ubvNV_sig = {1663, "glVertexAttrib4ubvNV", 2, _glVertexAttrib4ubvNV_args};

static const char * _glVertexAttribs1dvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs1dvNV_sig = {1664, "glVertexAttribs1dvNV", 3, _glVertexAttribs1dvNV_args};

static const char * _glVertexAttribs1fvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs1fvNV_sig = {1665, "glVertexAttribs1fvNV", 3, _glVertexAttribs1fvNV_args};

static const char * _glVertexAttribs1svNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs1svNV_sig = {1666, "glVertexAttribs1svNV", 3, _glVertexAttribs1svNV_args};

static const char * _glVertexAttribs2dvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs2dvNV_sig = {1667, "glVertexAttribs2dvNV", 3, _glVertexAttribs2dvNV_args};

static const char * _glVertexAttribs2fvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs2fvNV_sig = {1668, "glVertexAttribs2fvNV", 3, _glVertexAttribs2fvNV_args};

static const char * _glVertexAttribs2svNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs2svNV_sig = {1669, "glVertexAttribs2svNV", 3, _glVertexAttribs2svNV_args};

static const char * _glVertexAttribs3dvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs3dvNV_sig = {1670, "glVertexAttribs3dvNV", 3, _glVertexAttribs3dvNV_args};

static const char * _glVertexAttribs3fvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs3fvNV_sig = {1671, "glVertexAttribs3fvNV", 3, _glVertexAttribs3fvNV_args};

static const char * _glVertexAttribs3svNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs3svNV_sig = {1672, "glVertexAttribs3svNV", 3, _glVertexAttribs3svNV_args};

static const char * _glVertexAttribs4dvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs4dvNV_sig = {1673, "glVertexAttribs4dvNV", 3, _glVertexAttribs4dvNV_args};

static const char * _glVertexAttribs4fvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs4fvNV_sig = {1674, "glVertexAttribs4fvNV", 3, _glVertexAttribs4fvNV_args};

static const char * _glVertexAttribs4svNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs4svNV_sig = {1675, "glVertexAttribs4svNV", 3, _glVertexAttribs4svNV_args};

static const char * _glVertexAttribs4ubvNV_args[3] = {"index", "count", "v"};
static const trace::FunctionSig _glVertexAttribs4ubvNV_sig = {1676, "glVertexAttribs4ubvNV", 3, _glVertexAttribs4ubvNV_args};

static const char * _glTexBumpParameterivATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glTexBumpParameterivATI_sig = {1677, "glTexBumpParameterivATI", 2, _glTexBumpParameterivATI_args};

static const char * _glTexBumpParameterfvATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glTexBumpParameterfvATI_sig = {1678, "glTexBumpParameterfvATI", 2, _glTexBumpParameterfvATI_args};

static const char * _glGetTexBumpParameterivATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glGetTexBumpParameterivATI_sig = {1679, "glGetTexBumpParameterivATI", 2, _glGetTexBumpParameterivATI_args};

static const char * _glGetTexBumpParameterfvATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glGetTexBumpParameterfvATI_sig = {1680, "glGetTexBumpParameterfvATI", 2, _glGetTexBumpParameterfvATI_args};

static const char * _glGenFragmentShadersATI_args[1] = {"range"};
static const trace::FunctionSig _glGenFragmentShadersATI_sig = {1681, "glGenFragmentShadersATI", 1, _glGenFragmentShadersATI_args};

static const char * _glBindFragmentShaderATI_args[1] = {"id"};
static const trace::FunctionSig _glBindFragmentShaderATI_sig = {1682, "glBindFragmentShaderATI", 1, _glBindFragmentShaderATI_args};

static const char * _glDeleteFragmentShaderATI_args[1] = {"id"};
static const trace::FunctionSig _glDeleteFragmentShaderATI_sig = {1683, "glDeleteFragmentShaderATI", 1, _glDeleteFragmentShaderATI_args};

static const char ** _glBeginFragmentShaderATI_args = NULL;
static const trace::FunctionSig _glBeginFragmentShaderATI_sig = {1684, "glBeginFragmentShaderATI", 0, _glBeginFragmentShaderATI_args};

static const char ** _glEndFragmentShaderATI_args = NULL;
static const trace::FunctionSig _glEndFragmentShaderATI_sig = {1685, "glEndFragmentShaderATI", 0, _glEndFragmentShaderATI_args};

static const char * _glPassTexCoordATI_args[3] = {"dst", "coord", "swizzle"};
static const trace::FunctionSig _glPassTexCoordATI_sig = {1686, "glPassTexCoordATI", 3, _glPassTexCoordATI_args};

static const char * _glSampleMapATI_args[3] = {"dst", "interp", "swizzle"};
static const trace::FunctionSig _glSampleMapATI_sig = {1687, "glSampleMapATI", 3, _glSampleMapATI_args};

static const char * _glColorFragmentOp1ATI_args[7] = {"op", "dst", "dstMask", "dstMod", "arg1", "arg1Rep", "arg1Mod"};
static const trace::FunctionSig _glColorFragmentOp1ATI_sig = {1688, "glColorFragmentOp1ATI", 7, _glColorFragmentOp1ATI_args};

static const char * _glColorFragmentOp2ATI_args[10] = {"op", "dst", "dstMask", "dstMod", "arg1", "arg1Rep", "arg1Mod", "arg2", "arg2Rep", "arg2Mod"};
static const trace::FunctionSig _glColorFragmentOp2ATI_sig = {1689, "glColorFragmentOp2ATI", 10, _glColorFragmentOp2ATI_args};

static const char * _glColorFragmentOp3ATI_args[13] = {"op", "dst", "dstMask", "dstMod", "arg1", "arg1Rep", "arg1Mod", "arg2", "arg2Rep", "arg2Mod", "arg3", "arg3Rep", "arg3Mod"};
static const trace::FunctionSig _glColorFragmentOp3ATI_sig = {1690, "glColorFragmentOp3ATI", 13, _glColorFragmentOp3ATI_args};

static const char * _glAlphaFragmentOp1ATI_args[6] = {"op", "dst", "dstMod", "arg1", "arg1Rep", "arg1Mod"};
static const trace::FunctionSig _glAlphaFragmentOp1ATI_sig = {1691, "glAlphaFragmentOp1ATI", 6, _glAlphaFragmentOp1ATI_args};

static const char * _glAlphaFragmentOp2ATI_args[9] = {"op", "dst", "dstMod", "arg1", "arg1Rep", "arg1Mod", "arg2", "arg2Rep", "arg2Mod"};
static const trace::FunctionSig _glAlphaFragmentOp2ATI_sig = {1692, "glAlphaFragmentOp2ATI", 9, _glAlphaFragmentOp2ATI_args};

static const char * _glAlphaFragmentOp3ATI_args[12] = {"op", "dst", "dstMod", "arg1", "arg1Rep", "arg1Mod", "arg2", "arg2Rep", "arg2Mod", "arg3", "arg3Rep", "arg3Mod"};
static const trace::FunctionSig _glAlphaFragmentOp3ATI_sig = {1693, "glAlphaFragmentOp3ATI", 12, _glAlphaFragmentOp3ATI_args};

static const char * _glSetFragmentShaderConstantATI_args[2] = {"dst", "value"};
static const trace::FunctionSig _glSetFragmentShaderConstantATI_sig = {1694, "glSetFragmentShaderConstantATI", 2, _glSetFragmentShaderConstantATI_args};

static const char * _glPNTrianglesiATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPNTrianglesiATI_sig = {1695, "glPNTrianglesiATI", 2, _glPNTrianglesiATI_args};

static const char * _glPNTrianglesfATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPNTrianglesfATI_sig = {1696, "glPNTrianglesfATI", 2, _glPNTrianglesfATI_args};

static const char * _glNewObjectBufferATI_args[3] = {"size", "pointer", "usage"};
static const trace::FunctionSig _glNewObjectBufferATI_sig = {1697, "glNewObjectBufferATI", 3, _glNewObjectBufferATI_args};

static const char * _glIsObjectBufferATI_args[1] = {"buffer"};
static const trace::FunctionSig _glIsObjectBufferATI_sig = {1698, "glIsObjectBufferATI", 1, _glIsObjectBufferATI_args};

static const char * _glUpdateObjectBufferATI_args[5] = {"buffer", "offset", "size", "pointer", "preserve"};
static const trace::FunctionSig _glUpdateObjectBufferATI_sig = {1699, "glUpdateObjectBufferATI", 5, _glUpdateObjectBufferATI_args};

static const char * _glGetObjectBufferfvATI_args[3] = {"buffer", "pname", "params"};
static const trace::FunctionSig _glGetObjectBufferfvATI_sig = {1700, "glGetObjectBufferfvATI", 3, _glGetObjectBufferfvATI_args};

static const char * _glGetObjectBufferivATI_args[3] = {"buffer", "pname", "params"};
static const trace::FunctionSig _glGetObjectBufferivATI_sig = {1701, "glGetObjectBufferivATI", 3, _glGetObjectBufferivATI_args};

static const char * _glFreeObjectBufferATI_args[1] = {"buffer"};
static const trace::FunctionSig _glFreeObjectBufferATI_sig = {1702, "glFreeObjectBufferATI", 1, _glFreeObjectBufferATI_args};

static const char * _glArrayObjectATI_args[6] = {"array", "size", "type", "stride", "buffer", "offset"};
static const trace::FunctionSig _glArrayObjectATI_sig = {1703, "glArrayObjectATI", 6, _glArrayObjectATI_args};

static const char * _glGetArrayObjectfvATI_args[3] = {"array", "pname", "params"};
static const trace::FunctionSig _glGetArrayObjectfvATI_sig = {1704, "glGetArrayObjectfvATI", 3, _glGetArrayObjectfvATI_args};

static const char * _glGetArrayObjectivATI_args[3] = {"array", "pname", "params"};
static const trace::FunctionSig _glGetArrayObjectivATI_sig = {1705, "glGetArrayObjectivATI", 3, _glGetArrayObjectivATI_args};

static const char * _glVariantArrayObjectATI_args[5] = {"id", "type", "stride", "buffer", "offset"};
static const trace::FunctionSig _glVariantArrayObjectATI_sig = {1706, "glVariantArrayObjectATI", 5, _glVariantArrayObjectATI_args};

static const char * _glGetVariantArrayObjectfvATI_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetVariantArrayObjectfvATI_sig = {1707, "glGetVariantArrayObjectfvATI", 3, _glGetVariantArrayObjectfvATI_args};

static const char * _glGetVariantArrayObjectivATI_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetVariantArrayObjectivATI_sig = {1708, "glGetVariantArrayObjectivATI", 3, _glGetVariantArrayObjectivATI_args};

static const char ** _glBeginVertexShaderEXT_args = NULL;
static const trace::FunctionSig _glBeginVertexShaderEXT_sig = {1709, "glBeginVertexShaderEXT", 0, _glBeginVertexShaderEXT_args};

static const char ** _glEndVertexShaderEXT_args = NULL;
static const trace::FunctionSig _glEndVertexShaderEXT_sig = {1710, "glEndVertexShaderEXT", 0, _glEndVertexShaderEXT_args};

static const char * _glBindVertexShaderEXT_args[1] = {"id"};
static const trace::FunctionSig _glBindVertexShaderEXT_sig = {1711, "glBindVertexShaderEXT", 1, _glBindVertexShaderEXT_args};

static const char * _glGenVertexShadersEXT_args[1] = {"range"};
static const trace::FunctionSig _glGenVertexShadersEXT_sig = {1712, "glGenVertexShadersEXT", 1, _glGenVertexShadersEXT_args};

static const char * _glDeleteVertexShaderEXT_args[1] = {"id"};
static const trace::FunctionSig _glDeleteVertexShaderEXT_sig = {1713, "glDeleteVertexShaderEXT", 1, _glDeleteVertexShaderEXT_args};

static const char * _glShaderOp1EXT_args[3] = {"op", "res", "arg1"};
static const trace::FunctionSig _glShaderOp1EXT_sig = {1714, "glShaderOp1EXT", 3, _glShaderOp1EXT_args};

static const char * _glShaderOp2EXT_args[4] = {"op", "res", "arg1", "arg2"};
static const trace::FunctionSig _glShaderOp2EXT_sig = {1715, "glShaderOp2EXT", 4, _glShaderOp2EXT_args};

static const char * _glShaderOp3EXT_args[5] = {"op", "res", "arg1", "arg2", "arg3"};
static const trace::FunctionSig _glShaderOp3EXT_sig = {1716, "glShaderOp3EXT", 5, _glShaderOp3EXT_args};

static const char * _glSwizzleEXT_args[6] = {"res", "in", "outX", "outY", "outZ", "outW"};
static const trace::FunctionSig _glSwizzleEXT_sig = {1717, "glSwizzleEXT", 6, _glSwizzleEXT_args};

static const char * _glWriteMaskEXT_args[6] = {"res", "in", "outX", "outY", "outZ", "outW"};
static const trace::FunctionSig _glWriteMaskEXT_sig = {1718, "glWriteMaskEXT", 6, _glWriteMaskEXT_args};

static const char * _glInsertComponentEXT_args[3] = {"res", "src", "num"};
static const trace::FunctionSig _glInsertComponentEXT_sig = {1719, "glInsertComponentEXT", 3, _glInsertComponentEXT_args};

static const char * _glExtractComponentEXT_args[3] = {"res", "src", "num"};
static const trace::FunctionSig _glExtractComponentEXT_sig = {1720, "glExtractComponentEXT", 3, _glExtractComponentEXT_args};

static const char * _glGenSymbolsEXT_args[4] = {"datatype", "storagetype", "range", "components"};
static const trace::FunctionSig _glGenSymbolsEXT_sig = {1721, "glGenSymbolsEXT", 4, _glGenSymbolsEXT_args};

static const char * _glSetInvariantEXT_args[3] = {"id", "type", "addr"};
static const trace::FunctionSig _glSetInvariantEXT_sig = {1722, "glSetInvariantEXT", 3, _glSetInvariantEXT_args};

static const char * _glSetLocalConstantEXT_args[3] = {"id", "type", "addr"};
static const trace::FunctionSig _glSetLocalConstantEXT_sig = {1723, "glSetLocalConstantEXT", 3, _glSetLocalConstantEXT_args};

static const char * _glVariantbvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantbvEXT_sig = {1724, "glVariantbvEXT", 2, _glVariantbvEXT_args};

static const char * _glVariantsvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantsvEXT_sig = {1725, "glVariantsvEXT", 2, _glVariantsvEXT_args};

static const char * _glVariantivEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantivEXT_sig = {1726, "glVariantivEXT", 2, _glVariantivEXT_args};

static const char * _glVariantfvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantfvEXT_sig = {1727, "glVariantfvEXT", 2, _glVariantfvEXT_args};

static const char * _glVariantdvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantdvEXT_sig = {1728, "glVariantdvEXT", 2, _glVariantdvEXT_args};

static const char * _glVariantubvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantubvEXT_sig = {1729, "glVariantubvEXT", 2, _glVariantubvEXT_args};

static const char * _glVariantusvEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantusvEXT_sig = {1730, "glVariantusvEXT", 2, _glVariantusvEXT_args};

static const char * _glVariantuivEXT_args[2] = {"id", "addr"};
static const trace::FunctionSig _glVariantuivEXT_sig = {1731, "glVariantuivEXT", 2, _glVariantuivEXT_args};

static const char * _glVariantPointerEXT_args[4] = {"id", "type", "stride", "addr"};
static const trace::FunctionSig _glVariantPointerEXT_sig = {1732, "glVariantPointerEXT", 4, _glVariantPointerEXT_args};

static const char * _glEnableVariantClientStateEXT_args[1] = {"id"};
static const trace::FunctionSig _glEnableVariantClientStateEXT_sig = {1733, "glEnableVariantClientStateEXT", 1, _glEnableVariantClientStateEXT_args};

static const char * _glDisableVariantClientStateEXT_args[1] = {"id"};
static const trace::FunctionSig _glDisableVariantClientStateEXT_sig = {1734, "glDisableVariantClientStateEXT", 1, _glDisableVariantClientStateEXT_args};

static const char * _glBindLightParameterEXT_args[2] = {"light", "value"};
static const trace::FunctionSig _glBindLightParameterEXT_sig = {1735, "glBindLightParameterEXT", 2, _glBindLightParameterEXT_args};

static const char * _glBindMaterialParameterEXT_args[2] = {"face", "value"};
static const trace::FunctionSig _glBindMaterialParameterEXT_sig = {1736, "glBindMaterialParameterEXT", 2, _glBindMaterialParameterEXT_args};

static const char * _glBindTexGenParameterEXT_args[3] = {"unit", "coord", "value"};
static const trace::FunctionSig _glBindTexGenParameterEXT_sig = {1737, "glBindTexGenParameterEXT", 3, _glBindTexGenParameterEXT_args};

static const char * _glBindTextureUnitParameterEXT_args[2] = {"unit", "value"};
static const trace::FunctionSig _glBindTextureUnitParameterEXT_sig = {1738, "glBindTextureUnitParameterEXT", 2, _glBindTextureUnitParameterEXT_args};

static const char * _glBindParameterEXT_args[1] = {"value"};
static const trace::FunctionSig _glBindParameterEXT_sig = {1739, "glBindParameterEXT", 1, _glBindParameterEXT_args};

static const char * _glIsVariantEnabledEXT_args[2] = {"id", "cap"};
static const trace::FunctionSig _glIsVariantEnabledEXT_sig = {1740, "glIsVariantEnabledEXT", 2, _glIsVariantEnabledEXT_args};

static const char * _glGetVariantBooleanvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetVariantBooleanvEXT_sig = {1741, "glGetVariantBooleanvEXT", 3, _glGetVariantBooleanvEXT_args};

static const char * _glGetVariantIntegervEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetVariantIntegervEXT_sig = {1742, "glGetVariantIntegervEXT", 3, _glGetVariantIntegervEXT_args};

static const char * _glGetVariantFloatvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetVariantFloatvEXT_sig = {1743, "glGetVariantFloatvEXT", 3, _glGetVariantFloatvEXT_args};

static const char * _glGetVariantPointervEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetVariantPointervEXT_sig = {1744, "glGetVariantPointervEXT", 3, _glGetVariantPointervEXT_args};

static const char * _glGetInvariantBooleanvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetInvariantBooleanvEXT_sig = {1745, "glGetInvariantBooleanvEXT", 3, _glGetInvariantBooleanvEXT_args};

static const char * _glGetInvariantIntegervEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetInvariantIntegervEXT_sig = {1746, "glGetInvariantIntegervEXT", 3, _glGetInvariantIntegervEXT_args};

static const char * _glGetInvariantFloatvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetInvariantFloatvEXT_sig = {1747, "glGetInvariantFloatvEXT", 3, _glGetInvariantFloatvEXT_args};

static const char * _glGetLocalConstantBooleanvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetLocalConstantBooleanvEXT_sig = {1748, "glGetLocalConstantBooleanvEXT", 3, _glGetLocalConstantBooleanvEXT_args};

static const char * _glGetLocalConstantIntegervEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetLocalConstantIntegervEXT_sig = {1749, "glGetLocalConstantIntegervEXT", 3, _glGetLocalConstantIntegervEXT_args};

static const char * _glGetLocalConstantFloatvEXT_args[3] = {"id", "value", "data"};
static const trace::FunctionSig _glGetLocalConstantFloatvEXT_sig = {1750, "glGetLocalConstantFloatvEXT", 3, _glGetLocalConstantFloatvEXT_args};

static const char * _glVertexStream1sATI_args[2] = {"stream", "x"};
static const trace::FunctionSig _glVertexStream1sATI_sig = {1751, "glVertexStream1sATI", 2, _glVertexStream1sATI_args};

static const char * _glVertexStream1svATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream1svATI_sig = {1752, "glVertexStream1svATI", 2, _glVertexStream1svATI_args};

static const char * _glVertexStream1iATI_args[2] = {"stream", "x"};
static const trace::FunctionSig _glVertexStream1iATI_sig = {1753, "glVertexStream1iATI", 2, _glVertexStream1iATI_args};

static const char * _glVertexStream1ivATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream1ivATI_sig = {1754, "glVertexStream1ivATI", 2, _glVertexStream1ivATI_args};

static const char * _glVertexStream1fATI_args[2] = {"stream", "x"};
static const trace::FunctionSig _glVertexStream1fATI_sig = {1755, "glVertexStream1fATI", 2, _glVertexStream1fATI_args};

static const char * _glVertexStream1fvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream1fvATI_sig = {1756, "glVertexStream1fvATI", 2, _glVertexStream1fvATI_args};

static const char * _glVertexStream1dATI_args[2] = {"stream", "x"};
static const trace::FunctionSig _glVertexStream1dATI_sig = {1757, "glVertexStream1dATI", 2, _glVertexStream1dATI_args};

static const char * _glVertexStream1dvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream1dvATI_sig = {1758, "glVertexStream1dvATI", 2, _glVertexStream1dvATI_args};

static const char * _glVertexStream2sATI_args[3] = {"stream", "x", "y"};
static const trace::FunctionSig _glVertexStream2sATI_sig = {1759, "glVertexStream2sATI", 3, _glVertexStream2sATI_args};

static const char * _glVertexStream2svATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream2svATI_sig = {1760, "glVertexStream2svATI", 2, _glVertexStream2svATI_args};

static const char * _glVertexStream2iATI_args[3] = {"stream", "x", "y"};
static const trace::FunctionSig _glVertexStream2iATI_sig = {1761, "glVertexStream2iATI", 3, _glVertexStream2iATI_args};

static const char * _glVertexStream2ivATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream2ivATI_sig = {1762, "glVertexStream2ivATI", 2, _glVertexStream2ivATI_args};

static const char * _glVertexStream2fATI_args[3] = {"stream", "x", "y"};
static const trace::FunctionSig _glVertexStream2fATI_sig = {1763, "glVertexStream2fATI", 3, _glVertexStream2fATI_args};

static const char * _glVertexStream2fvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream2fvATI_sig = {1764, "glVertexStream2fvATI", 2, _glVertexStream2fvATI_args};

static const char * _glVertexStream2dATI_args[3] = {"stream", "x", "y"};
static const trace::FunctionSig _glVertexStream2dATI_sig = {1765, "glVertexStream2dATI", 3, _glVertexStream2dATI_args};

static const char * _glVertexStream2dvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream2dvATI_sig = {1766, "glVertexStream2dvATI", 2, _glVertexStream2dvATI_args};

static const char * _glVertexStream3sATI_args[4] = {"stream", "x", "y", "z"};
static const trace::FunctionSig _glVertexStream3sATI_sig = {1767, "glVertexStream3sATI", 4, _glVertexStream3sATI_args};

static const char * _glVertexStream3svATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream3svATI_sig = {1768, "glVertexStream3svATI", 2, _glVertexStream3svATI_args};

static const char * _glVertexStream3iATI_args[4] = {"stream", "x", "y", "z"};
static const trace::FunctionSig _glVertexStream3iATI_sig = {1769, "glVertexStream3iATI", 4, _glVertexStream3iATI_args};

static const char * _glVertexStream3ivATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream3ivATI_sig = {1770, "glVertexStream3ivATI", 2, _glVertexStream3ivATI_args};

static const char * _glVertexStream3fATI_args[4] = {"stream", "x", "y", "z"};
static const trace::FunctionSig _glVertexStream3fATI_sig = {1771, "glVertexStream3fATI", 4, _glVertexStream3fATI_args};

static const char * _glVertexStream3fvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream3fvATI_sig = {1772, "glVertexStream3fvATI", 2, _glVertexStream3fvATI_args};

static const char * _glVertexStream3dATI_args[4] = {"stream", "x", "y", "z"};
static const trace::FunctionSig _glVertexStream3dATI_sig = {1773, "glVertexStream3dATI", 4, _glVertexStream3dATI_args};

static const char * _glVertexStream3dvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream3dvATI_sig = {1774, "glVertexStream3dvATI", 2, _glVertexStream3dvATI_args};

static const char * _glVertexStream4sATI_args[5] = {"stream", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexStream4sATI_sig = {1775, "glVertexStream4sATI", 5, _glVertexStream4sATI_args};

static const char * _glVertexStream4svATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream4svATI_sig = {1776, "glVertexStream4svATI", 2, _glVertexStream4svATI_args};

static const char * _glVertexStream4iATI_args[5] = {"stream", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexStream4iATI_sig = {1777, "glVertexStream4iATI", 5, _glVertexStream4iATI_args};

static const char * _glVertexStream4ivATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream4ivATI_sig = {1778, "glVertexStream4ivATI", 2, _glVertexStream4ivATI_args};

static const char * _glVertexStream4fATI_args[5] = {"stream", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexStream4fATI_sig = {1779, "glVertexStream4fATI", 5, _glVertexStream4fATI_args};

static const char * _glVertexStream4fvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream4fvATI_sig = {1780, "glVertexStream4fvATI", 2, _glVertexStream4fvATI_args};

static const char * _glVertexStream4dATI_args[5] = {"stream", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexStream4dATI_sig = {1781, "glVertexStream4dATI", 5, _glVertexStream4dATI_args};

static const char * _glVertexStream4dvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glVertexStream4dvATI_sig = {1782, "glVertexStream4dvATI", 2, _glVertexStream4dvATI_args};

static const char * _glNormalStream3bATI_args[4] = {"stream", "nx", "ny", "nz"};
static const trace::FunctionSig _glNormalStream3bATI_sig = {1783, "glNormalStream3bATI", 4, _glNormalStream3bATI_args};

static const char * _glNormalStream3bvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glNormalStream3bvATI_sig = {1784, "glNormalStream3bvATI", 2, _glNormalStream3bvATI_args};

static const char * _glNormalStream3sATI_args[4] = {"stream", "nx", "ny", "nz"};
static const trace::FunctionSig _glNormalStream3sATI_sig = {1785, "glNormalStream3sATI", 4, _glNormalStream3sATI_args};

static const char * _glNormalStream3svATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glNormalStream3svATI_sig = {1786, "glNormalStream3svATI", 2, _glNormalStream3svATI_args};

static const char * _glNormalStream3iATI_args[4] = {"stream", "nx", "ny", "nz"};
static const trace::FunctionSig _glNormalStream3iATI_sig = {1787, "glNormalStream3iATI", 4, _glNormalStream3iATI_args};

static const char * _glNormalStream3ivATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glNormalStream3ivATI_sig = {1788, "glNormalStream3ivATI", 2, _glNormalStream3ivATI_args};

static const char * _glNormalStream3fATI_args[4] = {"stream", "nx", "ny", "nz"};
static const trace::FunctionSig _glNormalStream3fATI_sig = {1789, "glNormalStream3fATI", 4, _glNormalStream3fATI_args};

static const char * _glNormalStream3fvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glNormalStream3fvATI_sig = {1790, "glNormalStream3fvATI", 2, _glNormalStream3fvATI_args};

static const char * _glNormalStream3dATI_args[4] = {"stream", "nx", "ny", "nz"};
static const trace::FunctionSig _glNormalStream3dATI_sig = {1791, "glNormalStream3dATI", 4, _glNormalStream3dATI_args};

static const char * _glNormalStream3dvATI_args[2] = {"stream", "coords"};
static const trace::FunctionSig _glNormalStream3dvATI_sig = {1792, "glNormalStream3dvATI", 2, _glNormalStream3dvATI_args};

static const char * _glClientActiveVertexStreamATI_args[1] = {"stream"};
static const trace::FunctionSig _glClientActiveVertexStreamATI_sig = {1793, "glClientActiveVertexStreamATI", 1, _glClientActiveVertexStreamATI_args};

static const char * _glVertexBlendEnviATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glVertexBlendEnviATI_sig = {1794, "glVertexBlendEnviATI", 2, _glVertexBlendEnviATI_args};

static const char * _glVertexBlendEnvfATI_args[2] = {"pname", "param"};
static const trace::FunctionSig _glVertexBlendEnvfATI_sig = {1795, "glVertexBlendEnvfATI", 2, _glVertexBlendEnvfATI_args};

static const char * _glElementPointerATI_args[2] = {"type", "pointer"};
static const trace::FunctionSig _glElementPointerATI_sig = {1796, "glElementPointerATI", 2, _glElementPointerATI_args};

static const char * _glDrawElementArrayATI_args[2] = {"mode", "count"};
static const trace::FunctionSig _glDrawElementArrayATI_sig = {1797, "glDrawElementArrayATI", 2, _glDrawElementArrayATI_args};

static const char * _glDrawRangeElementArrayATI_args[4] = {"mode", "start", "end", "count"};
static const trace::FunctionSig _glDrawRangeElementArrayATI_sig = {1798, "glDrawRangeElementArrayATI", 4, _glDrawRangeElementArrayATI_args};

static const char * _glDrawMeshArraysSUN_args[4] = {"mode", "first", "count", "width"};
static const trace::FunctionSig _glDrawMeshArraysSUN_sig = {1799, "glDrawMeshArraysSUN", 4, _glDrawMeshArraysSUN_args};

static const char * _glGenOcclusionQueriesNV_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenOcclusionQueriesNV_sig = {1800, "glGenOcclusionQueriesNV", 2, _glGenOcclusionQueriesNV_args};

static const char * _glDeleteOcclusionQueriesNV_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteOcclusionQueriesNV_sig = {1801, "glDeleteOcclusionQueriesNV", 2, _glDeleteOcclusionQueriesNV_args};

static const char * _glIsOcclusionQueryNV_args[1] = {"id"};
static const trace::FunctionSig _glIsOcclusionQueryNV_sig = {1802, "glIsOcclusionQueryNV", 1, _glIsOcclusionQueryNV_args};

static const char * _glBeginOcclusionQueryNV_args[1] = {"id"};
static const trace::FunctionSig _glBeginOcclusionQueryNV_sig = {1803, "glBeginOcclusionQueryNV", 1, _glBeginOcclusionQueryNV_args};

static const char ** _glEndOcclusionQueryNV_args = NULL;
static const trace::FunctionSig _glEndOcclusionQueryNV_sig = {1804, "glEndOcclusionQueryNV", 0, _glEndOcclusionQueryNV_args};

static const char * _glGetOcclusionQueryivNV_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetOcclusionQueryivNV_sig = {1805, "glGetOcclusionQueryivNV", 3, _glGetOcclusionQueryivNV_args};

static const char * _glGetOcclusionQueryuivNV_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetOcclusionQueryuivNV_sig = {1806, "glGetOcclusionQueryuivNV", 3, _glGetOcclusionQueryuivNV_args};

static const char * _glPointParameteriNV_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameteriNV_sig = {1807, "glPointParameteriNV", 2, _glPointParameteriNV_args};

static const char * _glPointParameterivNV_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterivNV_sig = {1808, "glPointParameterivNV", 2, _glPointParameterivNV_args};

static const char * _glActiveStencilFaceEXT_args[1] = {"face"};
static const trace::FunctionSig _glActiveStencilFaceEXT_sig = {1809, "glActiveStencilFaceEXT", 1, _glActiveStencilFaceEXT_args};

static const char * _glElementPointerAPPLE_args[2] = {"type", "pointer"};
static const trace::FunctionSig _glElementPointerAPPLE_sig = {1810, "glElementPointerAPPLE", 2, _glElementPointerAPPLE_args};

static const char * _glDrawElementArrayAPPLE_args[3] = {"mode", "first", "count"};
static const trace::FunctionSig _glDrawElementArrayAPPLE_sig = {1811, "glDrawElementArrayAPPLE", 3, _glDrawElementArrayAPPLE_args};

static const char * _glDrawRangeElementArrayAPPLE_args[5] = {"mode", "start", "end", "first", "count"};
static const trace::FunctionSig _glDrawRangeElementArrayAPPLE_sig = {1812, "glDrawRangeElementArrayAPPLE", 5, _glDrawRangeElementArrayAPPLE_args};

static const char * _glMultiDrawElementArrayAPPLE_args[4] = {"mode", "first", "count", "primcount"};
static const trace::FunctionSig _glMultiDrawElementArrayAPPLE_sig = {1813, "glMultiDrawElementArrayAPPLE", 4, _glMultiDrawElementArrayAPPLE_args};

static const char * _glMultiDrawRangeElementArrayAPPLE_args[6] = {"mode", "start", "end", "first", "count", "primcount"};
static const trace::FunctionSig _glMultiDrawRangeElementArrayAPPLE_sig = {1814, "glMultiDrawRangeElementArrayAPPLE", 6, _glMultiDrawRangeElementArrayAPPLE_args};

static const char * _glGenFencesAPPLE_args[2] = {"n", "fences"};
static const trace::FunctionSig _glGenFencesAPPLE_sig = {1815, "glGenFencesAPPLE", 2, _glGenFencesAPPLE_args};

static const char * _glDeleteFencesAPPLE_args[2] = {"n", "fences"};
static const trace::FunctionSig _glDeleteFencesAPPLE_sig = {1816, "glDeleteFencesAPPLE", 2, _glDeleteFencesAPPLE_args};

static const char * _glSetFenceAPPLE_args[1] = {"fence"};
static const trace::FunctionSig _glSetFenceAPPLE_sig = {1817, "glSetFenceAPPLE", 1, _glSetFenceAPPLE_args};

static const char * _glIsFenceAPPLE_args[1] = {"fence"};
static const trace::FunctionSig _glIsFenceAPPLE_sig = {1818, "glIsFenceAPPLE", 1, _glIsFenceAPPLE_args};

static const char * _glTestFenceAPPLE_args[1] = {"fence"};
static const trace::FunctionSig _glTestFenceAPPLE_sig = {1819, "glTestFenceAPPLE", 1, _glTestFenceAPPLE_args};

static const char * _glFinishFenceAPPLE_args[1] = {"fence"};
static const trace::FunctionSig _glFinishFenceAPPLE_sig = {1820, "glFinishFenceAPPLE", 1, _glFinishFenceAPPLE_args};

static const char * _glTestObjectAPPLE_args[2] = {"object", "name"};
static const trace::FunctionSig _glTestObjectAPPLE_sig = {1821, "glTestObjectAPPLE", 2, _glTestObjectAPPLE_args};

static const char * _glFinishObjectAPPLE_args[2] = {"object", "name"};
static const trace::FunctionSig _glFinishObjectAPPLE_sig = {1822, "glFinishObjectAPPLE", 2, _glFinishObjectAPPLE_args};

static const char * _glBindVertexArrayAPPLE_args[1] = {"array"};
static const trace::FunctionSig _glBindVertexArrayAPPLE_sig = {1823, "glBindVertexArrayAPPLE", 1, _glBindVertexArrayAPPLE_args};

static const char * _glDeleteVertexArraysAPPLE_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glDeleteVertexArraysAPPLE_sig = {1824, "glDeleteVertexArraysAPPLE", 2, _glDeleteVertexArraysAPPLE_args};

static const char * _glGenVertexArraysAPPLE_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glGenVertexArraysAPPLE_sig = {1825, "glGenVertexArraysAPPLE", 2, _glGenVertexArraysAPPLE_args};

static const char * _glIsVertexArrayAPPLE_args[1] = {"array"};
static const trace::FunctionSig _glIsVertexArrayAPPLE_sig = {1826, "glIsVertexArrayAPPLE", 1, _glIsVertexArrayAPPLE_args};

static const char * _glVertexArrayRangeAPPLE_args[2] = {"length", "pointer"};
static const trace::FunctionSig _glVertexArrayRangeAPPLE_sig = {1827, "glVertexArrayRangeAPPLE", 2, _glVertexArrayRangeAPPLE_args};

static const char * _glFlushVertexArrayRangeAPPLE_args[2] = {"length", "pointer"};
static const trace::FunctionSig _glFlushVertexArrayRangeAPPLE_sig = {1828, "glFlushVertexArrayRangeAPPLE", 2, _glFlushVertexArrayRangeAPPLE_args};

static const char * _glVertexArrayParameteriAPPLE_args[2] = {"pname", "param"};
static const trace::FunctionSig _glVertexArrayParameteriAPPLE_sig = {1829, "glVertexArrayParameteriAPPLE", 2, _glVertexArrayParameteriAPPLE_args};

static const char ** _glFlushRenderAPPLE_args = NULL;
static const trace::FunctionSig _glFlushRenderAPPLE_sig = {1830, "glFlushRenderAPPLE", 0, _glFlushRenderAPPLE_args};

static const char ** _glFinishRenderAPPLE_args = NULL;
static const trace::FunctionSig _glFinishRenderAPPLE_sig = {1831, "glFinishRenderAPPLE", 0, _glFinishRenderAPPLE_args};

static const char ** _glSwapAPPLE_args = NULL;
static const trace::FunctionSig _glSwapAPPLE_sig = {1832, "glSwapAPPLE", 0, _glSwapAPPLE_args};

static const char * _glDrawBuffersATI_args[2] = {"n", "bufs"};
static const trace::FunctionSig _glDrawBuffersATI_sig = {1833, "glDrawBuffersATI", 2, _glDrawBuffersATI_args};

static const char * _glProgramNamedParameter4fNV_args[7] = {"id", "len", "name", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramNamedParameter4fNV_sig = {1834, "glProgramNamedParameter4fNV", 7, _glProgramNamedParameter4fNV_args};

static const char * _glProgramNamedParameter4dNV_args[7] = {"id", "len", "name", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramNamedParameter4dNV_sig = {1835, "glProgramNamedParameter4dNV", 7, _glProgramNamedParameter4dNV_args};

static const char * _glProgramNamedParameter4fvNV_args[4] = {"id", "len", "name", "v"};
static const trace::FunctionSig _glProgramNamedParameter4fvNV_sig = {1836, "glProgramNamedParameter4fvNV", 4, _glProgramNamedParameter4fvNV_args};

static const char * _glProgramNamedParameter4dvNV_args[4] = {"id", "len", "name", "v"};
static const trace::FunctionSig _glProgramNamedParameter4dvNV_sig = {1837, "glProgramNamedParameter4dvNV", 4, _glProgramNamedParameter4dvNV_args};

static const char * _glGetProgramNamedParameterdvNV_args[4] = {"id", "len", "name", "params"};
static const trace::FunctionSig _glGetProgramNamedParameterdvNV_sig = {1838, "glGetProgramNamedParameterdvNV", 4, _glGetProgramNamedParameterdvNV_args};

static const char * _glGetProgramNamedParameterfvNV_args[4] = {"id", "len", "name", "params"};
static const trace::FunctionSig _glGetProgramNamedParameterfvNV_sig = {1839, "glGetProgramNamedParameterfvNV", 4, _glGetProgramNamedParameterfvNV_args};

static const char * _glVertex2hNV_args[2] = {"x", "y"};
static const trace::FunctionSig _glVertex2hNV_sig = {1840, "glVertex2hNV", 2, _glVertex2hNV_args};

static const char * _glVertex2hvNV_args[1] = {"v"};
static const trace::FunctionSig _glVertex2hvNV_sig = {1841, "glVertex2hvNV", 1, _glVertex2hvNV_args};

static const char * _glVertex3hNV_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glVertex3hNV_sig = {1842, "glVertex3hNV", 3, _glVertex3hNV_args};

static const char * _glVertex3hvNV_args[1] = {"v"};
static const trace::FunctionSig _glVertex3hvNV_sig = {1843, "glVertex3hvNV", 1, _glVertex3hvNV_args};

static const char * _glVertex4hNV_args[4] = {"x", "y", "z", "w"};
static const trace::FunctionSig _glVertex4hNV_sig = {1844, "glVertex4hNV", 4, _glVertex4hNV_args};

static const char * _glVertex4hvNV_args[1] = {"v"};
static const trace::FunctionSig _glVertex4hvNV_sig = {1845, "glVertex4hvNV", 1, _glVertex4hvNV_args};

static const char * _glNormal3hNV_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3hNV_sig = {1846, "glNormal3hNV", 3, _glNormal3hNV_args};

static const char * _glNormal3hvNV_args[1] = {"v"};
static const trace::FunctionSig _glNormal3hvNV_sig = {1847, "glNormal3hvNV", 1, _glNormal3hvNV_args};

static const char * _glColor3hNV_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glColor3hNV_sig = {1848, "glColor3hNV", 3, _glColor3hNV_args};

static const char * _glColor3hvNV_args[1] = {"v"};
static const trace::FunctionSig _glColor3hvNV_sig = {1849, "glColor3hvNV", 1, _glColor3hvNV_args};

static const char * _glColor4hNV_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4hNV_sig = {1850, "glColor4hNV", 4, _glColor4hNV_args};

static const char * _glColor4hvNV_args[1] = {"v"};
static const trace::FunctionSig _glColor4hvNV_sig = {1851, "glColor4hvNV", 1, _glColor4hvNV_args};

static const char * _glTexCoord1hNV_args[1] = {"s"};
static const trace::FunctionSig _glTexCoord1hNV_sig = {1852, "glTexCoord1hNV", 1, _glTexCoord1hNV_args};

static const char * _glTexCoord1hvNV_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord1hvNV_sig = {1853, "glTexCoord1hvNV", 1, _glTexCoord1hvNV_args};

static const char * _glTexCoord2hNV_args[2] = {"s", "t"};
static const trace::FunctionSig _glTexCoord2hNV_sig = {1854, "glTexCoord2hNV", 2, _glTexCoord2hNV_args};

static const char * _glTexCoord2hvNV_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord2hvNV_sig = {1855, "glTexCoord2hvNV", 1, _glTexCoord2hvNV_args};

static const char * _glTexCoord3hNV_args[3] = {"s", "t", "r"};
static const trace::FunctionSig _glTexCoord3hNV_sig = {1856, "glTexCoord3hNV", 3, _glTexCoord3hNV_args};

static const char * _glTexCoord3hvNV_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord3hvNV_sig = {1857, "glTexCoord3hvNV", 1, _glTexCoord3hvNV_args};

static const char * _glTexCoord4hNV_args[4] = {"s", "t", "r", "q"};
static const trace::FunctionSig _glTexCoord4hNV_sig = {1858, "glTexCoord4hNV", 4, _glTexCoord4hNV_args};

static const char * _glTexCoord4hvNV_args[1] = {"v"};
static const trace::FunctionSig _glTexCoord4hvNV_sig = {1859, "glTexCoord4hvNV", 1, _glTexCoord4hvNV_args};

static const char * _glMultiTexCoord1hNV_args[2] = {"target", "s"};
static const trace::FunctionSig _glMultiTexCoord1hNV_sig = {1860, "glMultiTexCoord1hNV", 2, _glMultiTexCoord1hNV_args};

static const char * _glMultiTexCoord1hvNV_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord1hvNV_sig = {1861, "glMultiTexCoord1hvNV", 2, _glMultiTexCoord1hvNV_args};

static const char * _glMultiTexCoord2hNV_args[3] = {"target", "s", "t"};
static const trace::FunctionSig _glMultiTexCoord2hNV_sig = {1862, "glMultiTexCoord2hNV", 3, _glMultiTexCoord2hNV_args};

static const char * _glMultiTexCoord2hvNV_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord2hvNV_sig = {1863, "glMultiTexCoord2hvNV", 2, _glMultiTexCoord2hvNV_args};

static const char * _glMultiTexCoord3hNV_args[4] = {"target", "s", "t", "r"};
static const trace::FunctionSig _glMultiTexCoord3hNV_sig = {1864, "glMultiTexCoord3hNV", 4, _glMultiTexCoord3hNV_args};

static const char * _glMultiTexCoord3hvNV_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord3hvNV_sig = {1865, "glMultiTexCoord3hvNV", 2, _glMultiTexCoord3hvNV_args};

static const char * _glMultiTexCoord4hNV_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4hNV_sig = {1866, "glMultiTexCoord4hNV", 5, _glMultiTexCoord4hNV_args};

static const char * _glMultiTexCoord4hvNV_args[2] = {"target", "v"};
static const trace::FunctionSig _glMultiTexCoord4hvNV_sig = {1867, "glMultiTexCoord4hvNV", 2, _glMultiTexCoord4hvNV_args};

static const char * _glFogCoordhNV_args[1] = {"fog"};
static const trace::FunctionSig _glFogCoordhNV_sig = {1868, "glFogCoordhNV", 1, _glFogCoordhNV_args};

static const char * _glFogCoordhvNV_args[1] = {"fog"};
static const trace::FunctionSig _glFogCoordhvNV_sig = {1869, "glFogCoordhvNV", 1, _glFogCoordhvNV_args};

static const char * _glSecondaryColor3hNV_args[3] = {"red", "green", "blue"};
static const trace::FunctionSig _glSecondaryColor3hNV_sig = {1870, "glSecondaryColor3hNV", 3, _glSecondaryColor3hNV_args};

static const char * _glSecondaryColor3hvNV_args[1] = {"v"};
static const trace::FunctionSig _glSecondaryColor3hvNV_sig = {1871, "glSecondaryColor3hvNV", 1, _glSecondaryColor3hvNV_args};

static const char * _glVertexWeighthNV_args[1] = {"weight"};
static const trace::FunctionSig _glVertexWeighthNV_sig = {1872, "glVertexWeighthNV", 1, _glVertexWeighthNV_args};

static const char * _glVertexWeighthvNV_args[1] = {"weight"};
static const trace::FunctionSig _glVertexWeighthvNV_sig = {1873, "glVertexWeighthvNV", 1, _glVertexWeighthvNV_args};

static const char * _glVertexAttrib1hNV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttrib1hNV_sig = {1874, "glVertexAttrib1hNV", 2, _glVertexAttrib1hNV_args};

static const char * _glVertexAttrib1hvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib1hvNV_sig = {1875, "glVertexAttrib1hvNV", 2, _glVertexAttrib1hvNV_args};

static const char * _glVertexAttrib2hNV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttrib2hNV_sig = {1876, "glVertexAttrib2hNV", 3, _glVertexAttrib2hNV_args};

static const char * _glVertexAttrib2hvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib2hvNV_sig = {1877, "glVertexAttrib2hvNV", 2, _glVertexAttrib2hvNV_args};

static const char * _glVertexAttrib3hNV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttrib3hNV_sig = {1878, "glVertexAttrib3hNV", 4, _glVertexAttrib3hNV_args};

static const char * _glVertexAttrib3hvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib3hvNV_sig = {1879, "glVertexAttrib3hvNV", 2, _glVertexAttrib3hvNV_args};

static const char * _glVertexAttrib4hNV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttrib4hNV_sig = {1880, "glVertexAttrib4hNV", 5, _glVertexAttrib4hNV_args};

static const char * _glVertexAttrib4hvNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttrib4hvNV_sig = {1881, "glVertexAttrib4hvNV", 2, _glVertexAttrib4hvNV_args};

static const char * _glVertexAttribs1hvNV_args[3] = {"index", "n", "v"};
static const trace::FunctionSig _glVertexAttribs1hvNV_sig = {1882, "glVertexAttribs1hvNV", 3, _glVertexAttribs1hvNV_args};

static const char * _glVertexAttribs2hvNV_args[3] = {"index", "n", "v"};
static const trace::FunctionSig _glVertexAttribs2hvNV_sig = {1883, "glVertexAttribs2hvNV", 3, _glVertexAttribs2hvNV_args};

static const char * _glVertexAttribs3hvNV_args[3] = {"index", "n", "v"};
static const trace::FunctionSig _glVertexAttribs3hvNV_sig = {1884, "glVertexAttribs3hvNV", 3, _glVertexAttribs3hvNV_args};

static const char * _glVertexAttribs4hvNV_args[3] = {"index", "n", "v"};
static const trace::FunctionSig _glVertexAttribs4hvNV_sig = {1885, "glVertexAttribs4hvNV", 3, _glVertexAttribs4hvNV_args};

static const char * _glPixelDataRangeNV_args[3] = {"target", "length", "pointer"};
static const trace::FunctionSig _glPixelDataRangeNV_sig = {1886, "glPixelDataRangeNV", 3, _glPixelDataRangeNV_args};

static const char * _glFlushPixelDataRangeNV_args[1] = {"target"};
static const trace::FunctionSig _glFlushPixelDataRangeNV_sig = {1887, "glFlushPixelDataRangeNV", 1, _glFlushPixelDataRangeNV_args};

static const char ** _glPrimitiveRestartNV_args = NULL;
static const trace::FunctionSig _glPrimitiveRestartNV_sig = {1888, "glPrimitiveRestartNV", 0, _glPrimitiveRestartNV_args};

static const char * _glPrimitiveRestartIndexNV_args[1] = {"index"};
static const trace::FunctionSig _glPrimitiveRestartIndexNV_sig = {1889, "glPrimitiveRestartIndexNV", 1, _glPrimitiveRestartIndexNV_args};

static const char * _glMapObjectBufferATI_args[1] = {"buffer"};
static const trace::FunctionSig _glMapObjectBufferATI_sig = {1890, "glMapObjectBufferATI", 1, _glMapObjectBufferATI_args};

static const char * _glUnmapObjectBufferATI_args[1] = {"buffer"};
static const trace::FunctionSig _glUnmapObjectBufferATI_sig = {1891, "glUnmapObjectBufferATI", 1, _glUnmapObjectBufferATI_args};

static const char * _glStencilOpSeparateATI_args[4] = {"face", "sfail", "dpfail", "dppass"};
static const trace::FunctionSig _glStencilOpSeparateATI_sig = {1892, "glStencilOpSeparateATI", 4, _glStencilOpSeparateATI_args};

static const char * _glStencilFuncSeparateATI_args[4] = {"frontfunc", "backfunc", "ref", "mask"};
static const trace::FunctionSig _glStencilFuncSeparateATI_sig = {1893, "glStencilFuncSeparateATI", 4, _glStencilFuncSeparateATI_args};

static const char * _glVertexAttribArrayObjectATI_args[7] = {"index", "size", "type", "normalized", "stride", "buffer", "offset"};
static const trace::FunctionSig _glVertexAttribArrayObjectATI_sig = {1894, "glVertexAttribArrayObjectATI", 7, _glVertexAttribArrayObjectATI_args};

static const char * _glGetVertexAttribArrayObjectfvATI_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribArrayObjectfvATI_sig = {1895, "glGetVertexAttribArrayObjectfvATI", 3, _glGetVertexAttribArrayObjectfvATI_args};

static const char * _glGetVertexAttribArrayObjectivATI_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribArrayObjectivATI_sig = {1896, "glGetVertexAttribArrayObjectivATI", 3, _glGetVertexAttribArrayObjectivATI_args};

static const char * _glDepthBoundsEXT_args[2] = {"zmin", "zmax"};
static const trace::FunctionSig _glDepthBoundsEXT_sig = {1897, "glDepthBoundsEXT", 2, _glDepthBoundsEXT_args};

static const char * _glBlendEquationSeparateEXT_args[2] = {"modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparateEXT_sig = {1898, "glBlendEquationSeparateEXT", 2, _glBlendEquationSeparateEXT_args};

static const char * _glIsRenderbufferEXT_args[1] = {"renderbuffer"};
static const trace::FunctionSig _glIsRenderbufferEXT_sig = {1899, "glIsRenderbufferEXT", 1, _glIsRenderbufferEXT_args};

static const char * _glBindRenderbufferEXT_args[2] = {"target", "renderbuffer"};
static const trace::FunctionSig _glBindRenderbufferEXT_sig = {1900, "glBindRenderbufferEXT", 2, _glBindRenderbufferEXT_args};

static const char * _glDeleteRenderbuffersEXT_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glDeleteRenderbuffersEXT_sig = {1901, "glDeleteRenderbuffersEXT", 2, _glDeleteRenderbuffersEXT_args};

static const char * _glGenRenderbuffersEXT_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glGenRenderbuffersEXT_sig = {1902, "glGenRenderbuffersEXT", 2, _glGenRenderbuffersEXT_args};

static const char * _glRenderbufferStorageEXT_args[4] = {"target", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageEXT_sig = {1903, "glRenderbufferStorageEXT", 4, _glRenderbufferStorageEXT_args};

static const char * _glGetRenderbufferParameterivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetRenderbufferParameterivEXT_sig = {1904, "glGetRenderbufferParameterivEXT", 3, _glGetRenderbufferParameterivEXT_args};

static const char * _glIsFramebufferEXT_args[1] = {"framebuffer"};
static const trace::FunctionSig _glIsFramebufferEXT_sig = {1905, "glIsFramebufferEXT", 1, _glIsFramebufferEXT_args};

static const char * _glBindFramebufferEXT_args[2] = {"target", "framebuffer"};
static const trace::FunctionSig _glBindFramebufferEXT_sig = {1906, "glBindFramebufferEXT", 2, _glBindFramebufferEXT_args};

static const char * _glDeleteFramebuffersEXT_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glDeleteFramebuffersEXT_sig = {1907, "glDeleteFramebuffersEXT", 2, _glDeleteFramebuffersEXT_args};

static const char * _glGenFramebuffersEXT_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glGenFramebuffersEXT_sig = {1908, "glGenFramebuffersEXT", 2, _glGenFramebuffersEXT_args};

static const char * _glCheckFramebufferStatusEXT_args[1] = {"target"};
static const trace::FunctionSig _glCheckFramebufferStatusEXT_sig = {1909, "glCheckFramebufferStatusEXT", 1, _glCheckFramebufferStatusEXT_args};

static const char * _glFramebufferTexture1DEXT_args[5] = {"target", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture1DEXT_sig = {1910, "glFramebufferTexture1DEXT", 5, _glFramebufferTexture1DEXT_args};

static const char * _glFramebufferTexture2DEXT_args[5] = {"target", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture2DEXT_sig = {1911, "glFramebufferTexture2DEXT", 5, _glFramebufferTexture2DEXT_args};

static const char * _glFramebufferTexture3DEXT_args[6] = {"target", "attachment", "textarget", "texture", "level", "zoffset"};
static const trace::FunctionSig _glFramebufferTexture3DEXT_sig = {1912, "glFramebufferTexture3DEXT", 6, _glFramebufferTexture3DEXT_args};

static const char * _glFramebufferRenderbufferEXT_args[4] = {"target", "attachment", "renderbuffertarget", "renderbuffer"};
static const trace::FunctionSig _glFramebufferRenderbufferEXT_sig = {1913, "glFramebufferRenderbufferEXT", 4, _glFramebufferRenderbufferEXT_args};

static const char * _glGetFramebufferAttachmentParameterivEXT_args[4] = {"target", "attachment", "pname", "params"};
static const trace::FunctionSig _glGetFramebufferAttachmentParameterivEXT_sig = {1914, "glGetFramebufferAttachmentParameterivEXT", 4, _glGetFramebufferAttachmentParameterivEXT_args};

static const char * _glGenerateMipmapEXT_args[1] = {"target"};
static const trace::FunctionSig _glGenerateMipmapEXT_sig = {1915, "glGenerateMipmapEXT", 1, _glGenerateMipmapEXT_args};

static const char * _glStringMarkerGREMEDY_args[2] = {"len", "string"};
static const trace::FunctionSig _glStringMarkerGREMEDY_sig = {1916, "glStringMarkerGREMEDY", 2, _glStringMarkerGREMEDY_args};

static const char * _glStencilClearTagEXT_args[2] = {"stencilTagBits", "stencilClearTag"};
static const trace::FunctionSig _glStencilClearTagEXT_sig = {1917, "glStencilClearTagEXT", 2, _glStencilClearTagEXT_args};

static const char * _glBlitFramebufferEXT_args[10] = {"srcX0", "srcY0", "srcX1", "srcY1", "dstX0", "dstY0", "dstX1", "dstY1", "mask", "filter"};
static const trace::FunctionSig _glBlitFramebufferEXT_sig = {1918, "glBlitFramebufferEXT", 10, _glBlitFramebufferEXT_args};

static const char * _glRenderbufferStorageMultisampleEXT_args[5] = {"target", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisampleEXT_sig = {1919, "glRenderbufferStorageMultisampleEXT", 5, _glRenderbufferStorageMultisampleEXT_args};

static const char * _glGetQueryObjecti64vEXT_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjecti64vEXT_sig = {1920, "glGetQueryObjecti64vEXT", 3, _glGetQueryObjecti64vEXT_args};

static const char * _glGetQueryObjectui64vEXT_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectui64vEXT_sig = {1921, "glGetQueryObjectui64vEXT", 3, _glGetQueryObjectui64vEXT_args};

static const char * _glProgramEnvParameters4fvEXT_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramEnvParameters4fvEXT_sig = {1922, "glProgramEnvParameters4fvEXT", 4, _glProgramEnvParameters4fvEXT_args};

static const char * _glProgramLocalParameters4fvEXT_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramLocalParameters4fvEXT_sig = {1923, "glProgramLocalParameters4fvEXT", 4, _glProgramLocalParameters4fvEXT_args};

static const char * _glBufferParameteriAPPLE_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glBufferParameteriAPPLE_sig = {1924, "glBufferParameteriAPPLE", 3, _glBufferParameteriAPPLE_args};

static const char * _glFlushMappedBufferRangeAPPLE_args[3] = {"target", "offset", "size"};
static const trace::FunctionSig _glFlushMappedBufferRangeAPPLE_sig = {1925, "glFlushMappedBufferRangeAPPLE", 3, _glFlushMappedBufferRangeAPPLE_args};

static const char * _glProgramLocalParameterI4iNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramLocalParameterI4iNV_sig = {1926, "glProgramLocalParameterI4iNV", 6, _glProgramLocalParameterI4iNV_args};

static const char * _glProgramLocalParameterI4ivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramLocalParameterI4ivNV_sig = {1927, "glProgramLocalParameterI4ivNV", 3, _glProgramLocalParameterI4ivNV_args};

static const char * _glProgramLocalParametersI4ivNV_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramLocalParametersI4ivNV_sig = {1928, "glProgramLocalParametersI4ivNV", 4, _glProgramLocalParametersI4ivNV_args};

static const char * _glProgramLocalParameterI4uiNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramLocalParameterI4uiNV_sig = {1929, "glProgramLocalParameterI4uiNV", 6, _glProgramLocalParameterI4uiNV_args};

static const char * _glProgramLocalParameterI4uivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramLocalParameterI4uivNV_sig = {1930, "glProgramLocalParameterI4uivNV", 3, _glProgramLocalParameterI4uivNV_args};

static const char * _glProgramLocalParametersI4uivNV_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramLocalParametersI4uivNV_sig = {1931, "glProgramLocalParametersI4uivNV", 4, _glProgramLocalParametersI4uivNV_args};

static const char * _glProgramEnvParameterI4iNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramEnvParameterI4iNV_sig = {1932, "glProgramEnvParameterI4iNV", 6, _glProgramEnvParameterI4iNV_args};

static const char * _glProgramEnvParameterI4ivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramEnvParameterI4ivNV_sig = {1933, "glProgramEnvParameterI4ivNV", 3, _glProgramEnvParameterI4ivNV_args};

static const char * _glProgramEnvParametersI4ivNV_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramEnvParametersI4ivNV_sig = {1934, "glProgramEnvParametersI4ivNV", 4, _glProgramEnvParametersI4ivNV_args};

static const char * _glProgramEnvParameterI4uiNV_args[6] = {"target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramEnvParameterI4uiNV_sig = {1935, "glProgramEnvParameterI4uiNV", 6, _glProgramEnvParameterI4uiNV_args};

static const char * _glProgramEnvParameterI4uivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glProgramEnvParameterI4uivNV_sig = {1936, "glProgramEnvParameterI4uivNV", 3, _glProgramEnvParameterI4uivNV_args};

static const char * _glProgramEnvParametersI4uivNV_args[4] = {"target", "index", "count", "params"};
static const trace::FunctionSig _glProgramEnvParametersI4uivNV_sig = {1937, "glProgramEnvParametersI4uivNV", 4, _glProgramEnvParametersI4uivNV_args};

static const char * _glGetProgramLocalParameterIivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramLocalParameterIivNV_sig = {1938, "glGetProgramLocalParameterIivNV", 3, _glGetProgramLocalParameterIivNV_args};

static const char * _glGetProgramLocalParameterIuivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramLocalParameterIuivNV_sig = {1939, "glGetProgramLocalParameterIuivNV", 3, _glGetProgramLocalParameterIuivNV_args};

static const char * _glGetProgramEnvParameterIivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramEnvParameterIivNV_sig = {1940, "glGetProgramEnvParameterIivNV", 3, _glGetProgramEnvParameterIivNV_args};

static const char * _glGetProgramEnvParameterIuivNV_args[3] = {"target", "index", "params"};
static const trace::FunctionSig _glGetProgramEnvParameterIuivNV_sig = {1941, "glGetProgramEnvParameterIuivNV", 3, _glGetProgramEnvParameterIuivNV_args};

static const char * _glProgramVertexLimitNV_args[2] = {"target", "limit"};
static const trace::FunctionSig _glProgramVertexLimitNV_sig = {1942, "glProgramVertexLimitNV", 2, _glProgramVertexLimitNV_args};

static const char * _glFramebufferTextureEXT_args[4] = {"target", "attachment", "texture", "level"};
static const trace::FunctionSig _glFramebufferTextureEXT_sig = {1943, "glFramebufferTextureEXT", 4, _glFramebufferTextureEXT_args};

static const char * _glFramebufferTextureLayerEXT_args[5] = {"target", "attachment", "texture", "level", "layer"};
static const trace::FunctionSig _glFramebufferTextureLayerEXT_sig = {1944, "glFramebufferTextureLayerEXT", 5, _glFramebufferTextureLayerEXT_args};

static const char * _glFramebufferTextureFaceEXT_args[5] = {"target", "attachment", "texture", "level", "face"};
static const trace::FunctionSig _glFramebufferTextureFaceEXT_sig = {1945, "glFramebufferTextureFaceEXT", 5, _glFramebufferTextureFaceEXT_args};

static const char * _glProgramParameteriEXT_args[3] = {"program", "pname", "value"};
static const trace::FunctionSig _glProgramParameteriEXT_sig = {1946, "glProgramParameteriEXT", 3, _glProgramParameteriEXT_args};

static const char * _glVertexAttribI1iEXT_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribI1iEXT_sig = {1947, "glVertexAttribI1iEXT", 2, _glVertexAttribI1iEXT_args};

static const char * _glVertexAttribI2iEXT_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribI2iEXT_sig = {1948, "glVertexAttribI2iEXT", 3, _glVertexAttribI2iEXT_args};

static const char * _glVertexAttribI3iEXT_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribI3iEXT_sig = {1949, "glVertexAttribI3iEXT", 4, _glVertexAttribI3iEXT_args};

static const char * _glVertexAttribI4iEXT_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribI4iEXT_sig = {1950, "glVertexAttribI4iEXT", 5, _glVertexAttribI4iEXT_args};

static const char * _glVertexAttribI1uiEXT_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribI1uiEXT_sig = {1951, "glVertexAttribI1uiEXT", 2, _glVertexAttribI1uiEXT_args};

static const char * _glVertexAttribI2uiEXT_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribI2uiEXT_sig = {1952, "glVertexAttribI2uiEXT", 3, _glVertexAttribI2uiEXT_args};

static const char * _glVertexAttribI3uiEXT_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribI3uiEXT_sig = {1953, "glVertexAttribI3uiEXT", 4, _glVertexAttribI3uiEXT_args};

static const char * _glVertexAttribI4uiEXT_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribI4uiEXT_sig = {1954, "glVertexAttribI4uiEXT", 5, _glVertexAttribI4uiEXT_args};

static const char * _glVertexAttribI1ivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI1ivEXT_sig = {1955, "glVertexAttribI1ivEXT", 2, _glVertexAttribI1ivEXT_args};

static const char * _glVertexAttribI2ivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI2ivEXT_sig = {1956, "glVertexAttribI2ivEXT", 2, _glVertexAttribI2ivEXT_args};

static const char * _glVertexAttribI3ivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI3ivEXT_sig = {1957, "glVertexAttribI3ivEXT", 2, _glVertexAttribI3ivEXT_args};

static const char * _glVertexAttribI4ivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4ivEXT_sig = {1958, "glVertexAttribI4ivEXT", 2, _glVertexAttribI4ivEXT_args};

static const char * _glVertexAttribI1uivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI1uivEXT_sig = {1959, "glVertexAttribI1uivEXT", 2, _glVertexAttribI1uivEXT_args};

static const char * _glVertexAttribI2uivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI2uivEXT_sig = {1960, "glVertexAttribI2uivEXT", 2, _glVertexAttribI2uivEXT_args};

static const char * _glVertexAttribI3uivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI3uivEXT_sig = {1961, "glVertexAttribI3uivEXT", 2, _glVertexAttribI3uivEXT_args};

static const char * _glVertexAttribI4uivEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4uivEXT_sig = {1962, "glVertexAttribI4uivEXT", 2, _glVertexAttribI4uivEXT_args};

static const char * _glVertexAttribI4bvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4bvEXT_sig = {1963, "glVertexAttribI4bvEXT", 2, _glVertexAttribI4bvEXT_args};

static const char * _glVertexAttribI4svEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4svEXT_sig = {1964, "glVertexAttribI4svEXT", 2, _glVertexAttribI4svEXT_args};

static const char * _glVertexAttribI4ubvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4ubvEXT_sig = {1965, "glVertexAttribI4ubvEXT", 2, _glVertexAttribI4ubvEXT_args};

static const char * _glVertexAttribI4usvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribI4usvEXT_sig = {1966, "glVertexAttribI4usvEXT", 2, _glVertexAttribI4usvEXT_args};

static const char * _glVertexAttribIPointerEXT_args[5] = {"index", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribIPointerEXT_sig = {1967, "glVertexAttribIPointerEXT", 5, _glVertexAttribIPointerEXT_args};

static const char * _glGetVertexAttribIivEXT_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribIivEXT_sig = {1968, "glGetVertexAttribIivEXT", 3, _glGetVertexAttribIivEXT_args};

static const char * _glGetVertexAttribIuivEXT_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribIuivEXT_sig = {1969, "glGetVertexAttribIuivEXT", 3, _glGetVertexAttribIuivEXT_args};

static const char * _glGetUniformuivEXT_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformuivEXT_sig = {1970, "glGetUniformuivEXT", 3, _glGetUniformuivEXT_args};

static const char * _glBindFragDataLocationEXT_args[3] = {"program", "color", "name"};
static const trace::FunctionSig _glBindFragDataLocationEXT_sig = {1971, "glBindFragDataLocationEXT", 3, _glBindFragDataLocationEXT_args};

static const char * _glGetFragDataLocationEXT_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetFragDataLocationEXT_sig = {1972, "glGetFragDataLocationEXT", 2, _glGetFragDataLocationEXT_args};

static const char * _glUniform1uiEXT_args[2] = {"location", "v0"};
static const trace::FunctionSig _glUniform1uiEXT_sig = {1973, "glUniform1uiEXT", 2, _glUniform1uiEXT_args};

static const char * _glUniform2uiEXT_args[3] = {"location", "v0", "v1"};
static const trace::FunctionSig _glUniform2uiEXT_sig = {1974, "glUniform2uiEXT", 3, _glUniform2uiEXT_args};

static const char * _glUniform3uiEXT_args[4] = {"location", "v0", "v1", "v2"};
static const trace::FunctionSig _glUniform3uiEXT_sig = {1975, "glUniform3uiEXT", 4, _glUniform3uiEXT_args};

static const char * _glUniform4uiEXT_args[5] = {"location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glUniform4uiEXT_sig = {1976, "glUniform4uiEXT", 5, _glUniform4uiEXT_args};

static const char * _glUniform1uivEXT_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1uivEXT_sig = {1977, "glUniform1uivEXT", 3, _glUniform1uivEXT_args};

static const char * _glUniform2uivEXT_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2uivEXT_sig = {1978, "glUniform2uivEXT", 3, _glUniform2uivEXT_args};

static const char * _glUniform3uivEXT_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3uivEXT_sig = {1979, "glUniform3uivEXT", 3, _glUniform3uivEXT_args};

static const char * _glUniform4uivEXT_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4uivEXT_sig = {1980, "glUniform4uivEXT", 3, _glUniform4uivEXT_args};

static const char * _glDrawArraysInstancedEXT_args[4] = {"mode", "start", "count", "primcount"};
static const trace::FunctionSig _glDrawArraysInstancedEXT_sig = {1981, "glDrawArraysInstancedEXT", 4, _glDrawArraysInstancedEXT_args};

static const char * _glDrawElementsInstancedEXT_args[5] = {"mode", "count", "type", "indices", "primcount"};
static const trace::FunctionSig _glDrawElementsInstancedEXT_sig = {1982, "glDrawElementsInstancedEXT", 5, _glDrawElementsInstancedEXT_args};

static const char * _glTexBufferEXT_args[3] = {"target", "internalformat", "buffer"};
static const trace::FunctionSig _glTexBufferEXT_sig = {1983, "glTexBufferEXT", 3, _glTexBufferEXT_args};

static const char * _glDepthRangedNV_args[2] = {"zNear", "zFar"};
static const trace::FunctionSig _glDepthRangedNV_sig = {1984, "glDepthRangedNV", 2, _glDepthRangedNV_args};

static const char * _glClearDepthdNV_args[1] = {"depth"};
static const trace::FunctionSig _glClearDepthdNV_sig = {1985, "glClearDepthdNV", 1, _glClearDepthdNV_args};

static const char * _glDepthBoundsdNV_args[2] = {"zmin", "zmax"};
static const trace::FunctionSig _glDepthBoundsdNV_sig = {1986, "glDepthBoundsdNV", 2, _glDepthBoundsdNV_args};

static const char * _glRenderbufferStorageMultisampleCoverageNV_args[6] = {"target", "coverageSamples", "colorSamples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisampleCoverageNV_sig = {1987, "glRenderbufferStorageMultisampleCoverageNV", 6, _glRenderbufferStorageMultisampleCoverageNV_args};

static const char * _glProgramBufferParametersfvNV_args[5] = {"target", "buffer", "index", "count", "params"};
static const trace::FunctionSig _glProgramBufferParametersfvNV_sig = {1988, "glProgramBufferParametersfvNV", 5, _glProgramBufferParametersfvNV_args};

static const char * _glProgramBufferParametersIivNV_args[5] = {"target", "buffer", "index", "count", "params"};
static const trace::FunctionSig _glProgramBufferParametersIivNV_sig = {1989, "glProgramBufferParametersIivNV", 5, _glProgramBufferParametersIivNV_args};

static const char * _glProgramBufferParametersIuivNV_args[5] = {"target", "buffer", "index", "count", "params"};
static const trace::FunctionSig _glProgramBufferParametersIuivNV_sig = {1990, "glProgramBufferParametersIuivNV", 5, _glProgramBufferParametersIuivNV_args};

static const char * _glColorMaskIndexedEXT_args[5] = {"index", "r", "g", "b", "a"};
static const trace::FunctionSig _glColorMaskIndexedEXT_sig = {1991, "glColorMaskIndexedEXT", 5, _glColorMaskIndexedEXT_args};

static const char * _glGetBooleanIndexedvEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetBooleanIndexedvEXT_sig = {1992, "glGetBooleanIndexedvEXT", 3, _glGetBooleanIndexedvEXT_args};

static const char * _glGetIntegerIndexedvEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetIntegerIndexedvEXT_sig = {1993, "glGetIntegerIndexedvEXT", 3, _glGetIntegerIndexedvEXT_args};

static const char * _glEnableIndexedEXT_args[2] = {"target", "index"};
static const trace::FunctionSig _glEnableIndexedEXT_sig = {1994, "glEnableIndexedEXT", 2, _glEnableIndexedEXT_args};

static const char * _glDisableIndexedEXT_args[2] = {"target", "index"};
static const trace::FunctionSig _glDisableIndexedEXT_sig = {1995, "glDisableIndexedEXT", 2, _glDisableIndexedEXT_args};

static const char * _glIsEnabledIndexedEXT_args[2] = {"target", "index"};
static const trace::FunctionSig _glIsEnabledIndexedEXT_sig = {1996, "glIsEnabledIndexedEXT", 2, _glIsEnabledIndexedEXT_args};

static const char * _glBeginTransformFeedbackNV_args[1] = {"primitiveMode"};
static const trace::FunctionSig _glBeginTransformFeedbackNV_sig = {1997, "glBeginTransformFeedbackNV", 1, _glBeginTransformFeedbackNV_args};

static const char ** _glEndTransformFeedbackNV_args = NULL;
static const trace::FunctionSig _glEndTransformFeedbackNV_sig = {1998, "glEndTransformFeedbackNV", 0, _glEndTransformFeedbackNV_args};

static const char * _glTransformFeedbackAttribsNV_args[3] = {"count", "attribs", "bufferMode"};
static const trace::FunctionSig _glTransformFeedbackAttribsNV_sig = {1999, "glTransformFeedbackAttribsNV", 3, _glTransformFeedbackAttribsNV_args};

static const char * _glBindBufferRangeNV_args[5] = {"target", "index", "buffer", "offset", "size"};
static const trace::FunctionSig _glBindBufferRangeNV_sig = {2000, "glBindBufferRangeNV", 5, _glBindBufferRangeNV_args};

static const char * _glBindBufferOffsetNV_args[4] = {"target", "index", "buffer", "offset"};
static const trace::FunctionSig _glBindBufferOffsetNV_sig = {2001, "glBindBufferOffsetNV", 4, _glBindBufferOffsetNV_args};

static const char * _glBindBufferBaseNV_args[3] = {"target", "index", "buffer"};
static const trace::FunctionSig _glBindBufferBaseNV_sig = {2002, "glBindBufferBaseNV", 3, _glBindBufferBaseNV_args};

static const char * _glTransformFeedbackVaryingsNV_args[4] = {"program", "count", "locations", "bufferMode"};
static const trace::FunctionSig _glTransformFeedbackVaryingsNV_sig = {2003, "glTransformFeedbackVaryingsNV", 4, _glTransformFeedbackVaryingsNV_args};

static const char * _glActiveVaryingNV_args[2] = {"program", "name"};
static const trace::FunctionSig _glActiveVaryingNV_sig = {2004, "glActiveVaryingNV", 2, _glActiveVaryingNV_args};

static const char * _glGetVaryingLocationNV_args[2] = {"program", "name"};
static const trace::FunctionSig _glGetVaryingLocationNV_sig = {2005, "glGetVaryingLocationNV", 2, _glGetVaryingLocationNV_args};

static const char * _glGetActiveVaryingNV_args[7] = {"program", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetActiveVaryingNV_sig = {2006, "glGetActiveVaryingNV", 7, _glGetActiveVaryingNV_args};

static const char * _glGetTransformFeedbackVaryingNV_args[3] = {"program", "index", "location"};
static const trace::FunctionSig _glGetTransformFeedbackVaryingNV_sig = {2007, "glGetTransformFeedbackVaryingNV", 3, _glGetTransformFeedbackVaryingNV_args};

static const char * _glTransformFeedbackStreamAttribsNV_args[5] = {"count", "attribs", "nbuffers", "bufstreams", "bufferMode"};
static const trace::FunctionSig _glTransformFeedbackStreamAttribsNV_sig = {2008, "glTransformFeedbackStreamAttribsNV", 5, _glTransformFeedbackStreamAttribsNV_args};

static const char * _glUniformBufferEXT_args[3] = {"program", "location", "buffer"};
static const trace::FunctionSig _glUniformBufferEXT_sig = {2009, "glUniformBufferEXT", 3, _glUniformBufferEXT_args};

static const char * _glGetUniformBufferSizeEXT_args[2] = {"program", "location"};
static const trace::FunctionSig _glGetUniformBufferSizeEXT_sig = {2010, "glGetUniformBufferSizeEXT", 2, _glGetUniformBufferSizeEXT_args};

static const char * _glGetUniformOffsetEXT_args[2] = {"program", "location"};
static const trace::FunctionSig _glGetUniformOffsetEXT_sig = {2011, "glGetUniformOffsetEXT", 2, _glGetUniformOffsetEXT_args};

static const char * _glTexParameterIivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterIivEXT_sig = {2012, "glTexParameterIivEXT", 3, _glTexParameterIivEXT_args};

static const char * _glTexParameterIuivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterIuivEXT_sig = {2013, "glTexParameterIuivEXT", 3, _glTexParameterIuivEXT_args};

static const char * _glGetTexParameterIivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterIivEXT_sig = {2014, "glGetTexParameterIivEXT", 3, _glGetTexParameterIivEXT_args};

static const char * _glGetTexParameterIuivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterIuivEXT_sig = {2015, "glGetTexParameterIuivEXT", 3, _glGetTexParameterIuivEXT_args};

static const char * _glClearColorIiEXT_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glClearColorIiEXT_sig = {2016, "glClearColorIiEXT", 4, _glClearColorIiEXT_args};

static const char * _glClearColorIuiEXT_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glClearColorIuiEXT_sig = {2017, "glClearColorIuiEXT", 4, _glClearColorIuiEXT_args};

static const char ** _glFrameTerminatorGREMEDY_args = NULL;
static const trace::FunctionSig _glFrameTerminatorGREMEDY_sig = {2018, "glFrameTerminatorGREMEDY", 0, _glFrameTerminatorGREMEDY_args};

static const char * _glBeginConditionalRenderNV_args[2] = {"id", "mode"};
static const trace::FunctionSig _glBeginConditionalRenderNV_sig = {2019, "glBeginConditionalRenderNV", 2, _glBeginConditionalRenderNV_args};

static const char ** _glEndConditionalRenderNV_args = NULL;
static const trace::FunctionSig _glEndConditionalRenderNV_sig = {2020, "glEndConditionalRenderNV", 0, _glEndConditionalRenderNV_args};

static const char * _glPresentFrameKeyedNV_args[11] = {"video_slot", "minPresentTime", "beginPresentTimeId", "presentDurationId", "type", "target0", "fill0", "key0", "target1", "fill1", "key1"};
static const trace::FunctionSig _glPresentFrameKeyedNV_sig = {2021, "glPresentFrameKeyedNV", 11, _glPresentFrameKeyedNV_args};

static const char * _glPresentFrameDualFillNV_args[13] = {"video_slot", "minPresentTime", "beginPresentTimeId", "presentDurationId", "type", "target0", "fill0", "target1", "fill1", "target2", "fill2", "target3", "fill3"};
static const trace::FunctionSig _glPresentFrameDualFillNV_sig = {2022, "glPresentFrameDualFillNV", 13, _glPresentFrameDualFillNV_args};

static const char * _glGetVideoivNV_args[3] = {"video_slot", "pname", "params"};
static const trace::FunctionSig _glGetVideoivNV_sig = {2023, "glGetVideoivNV", 3, _glGetVideoivNV_args};

static const char * _glGetVideouivNV_args[3] = {"video_slot", "pname", "params"};
static const trace::FunctionSig _glGetVideouivNV_sig = {2024, "glGetVideouivNV", 3, _glGetVideouivNV_args};

static const char * _glGetVideoi64vNV_args[3] = {"video_slot", "pname", "params"};
static const trace::FunctionSig _glGetVideoi64vNV_sig = {2025, "glGetVideoi64vNV", 3, _glGetVideoi64vNV_args};

static const char * _glGetVideoui64vNV_args[3] = {"video_slot", "pname", "params"};
static const trace::FunctionSig _glGetVideoui64vNV_sig = {2026, "glGetVideoui64vNV", 3, _glGetVideoui64vNV_args};

static const char * _glBeginTransformFeedbackEXT_args[1] = {"primitiveMode"};
static const trace::FunctionSig _glBeginTransformFeedbackEXT_sig = {2027, "glBeginTransformFeedbackEXT", 1, _glBeginTransformFeedbackEXT_args};

static const char ** _glEndTransformFeedbackEXT_args = NULL;
static const trace::FunctionSig _glEndTransformFeedbackEXT_sig = {2028, "glEndTransformFeedbackEXT", 0, _glEndTransformFeedbackEXT_args};

static const char * _glBindBufferRangeEXT_args[5] = {"target", "index", "buffer", "offset", "size"};
static const trace::FunctionSig _glBindBufferRangeEXT_sig = {2029, "glBindBufferRangeEXT", 5, _glBindBufferRangeEXT_args};

static const char * _glBindBufferOffsetEXT_args[4] = {"target", "index", "buffer", "offset"};
static const trace::FunctionSig _glBindBufferOffsetEXT_sig = {2030, "glBindBufferOffsetEXT", 4, _glBindBufferOffsetEXT_args};

static const char * _glBindBufferBaseEXT_args[3] = {"target", "index", "buffer"};
static const trace::FunctionSig _glBindBufferBaseEXT_sig = {2031, "glBindBufferBaseEXT", 3, _glBindBufferBaseEXT_args};

static const char * _glTransformFeedbackVaryingsEXT_args[4] = {"program", "count", "varyings", "bufferMode"};
static const trace::FunctionSig _glTransformFeedbackVaryingsEXT_sig = {2032, "glTransformFeedbackVaryingsEXT", 4, _glTransformFeedbackVaryingsEXT_args};

static const char * _glGetTransformFeedbackVaryingEXT_args[7] = {"program", "index", "bufSize", "length", "size", "type", "name"};
static const trace::FunctionSig _glGetTransformFeedbackVaryingEXT_sig = {2033, "glGetTransformFeedbackVaryingEXT", 7, _glGetTransformFeedbackVaryingEXT_args};

static const char * _glClientAttribDefaultEXT_args[1] = {"mask"};
static const trace::FunctionSig _glClientAttribDefaultEXT_sig = {2034, "glClientAttribDefaultEXT", 1, _glClientAttribDefaultEXT_args};

static const char * _glPushClientAttribDefaultEXT_args[1] = {"mask"};
static const trace::FunctionSig _glPushClientAttribDefaultEXT_sig = {2035, "glPushClientAttribDefaultEXT", 1, _glPushClientAttribDefaultEXT_args};

static const char * _glMatrixLoadfEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixLoadfEXT_sig = {2036, "glMatrixLoadfEXT", 2, _glMatrixLoadfEXT_args};

static const char * _glMatrixLoaddEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixLoaddEXT_sig = {2037, "glMatrixLoaddEXT", 2, _glMatrixLoaddEXT_args};

static const char * _glMatrixMultfEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixMultfEXT_sig = {2038, "glMatrixMultfEXT", 2, _glMatrixMultfEXT_args};

static const char * _glMatrixMultdEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixMultdEXT_sig = {2039, "glMatrixMultdEXT", 2, _glMatrixMultdEXT_args};

static const char * _glMatrixLoadIdentityEXT_args[1] = {"mode"};
static const trace::FunctionSig _glMatrixLoadIdentityEXT_sig = {2040, "glMatrixLoadIdentityEXT", 1, _glMatrixLoadIdentityEXT_args};

static const char * _glMatrixRotatefEXT_args[5] = {"mode", "angle", "x", "y", "z"};
static const trace::FunctionSig _glMatrixRotatefEXT_sig = {2041, "glMatrixRotatefEXT", 5, _glMatrixRotatefEXT_args};

static const char * _glMatrixRotatedEXT_args[5] = {"mode", "angle", "x", "y", "z"};
static const trace::FunctionSig _glMatrixRotatedEXT_sig = {2042, "glMatrixRotatedEXT", 5, _glMatrixRotatedEXT_args};

static const char * _glMatrixScalefEXT_args[4] = {"mode", "x", "y", "z"};
static const trace::FunctionSig _glMatrixScalefEXT_sig = {2043, "glMatrixScalefEXT", 4, _glMatrixScalefEXT_args};

static const char * _glMatrixScaledEXT_args[4] = {"mode", "x", "y", "z"};
static const trace::FunctionSig _glMatrixScaledEXT_sig = {2044, "glMatrixScaledEXT", 4, _glMatrixScaledEXT_args};

static const char * _glMatrixTranslatefEXT_args[4] = {"mode", "x", "y", "z"};
static const trace::FunctionSig _glMatrixTranslatefEXT_sig = {2045, "glMatrixTranslatefEXT", 4, _glMatrixTranslatefEXT_args};

static const char * _glMatrixTranslatedEXT_args[4] = {"mode", "x", "y", "z"};
static const trace::FunctionSig _glMatrixTranslatedEXT_sig = {2046, "glMatrixTranslatedEXT", 4, _glMatrixTranslatedEXT_args};

static const char * _glMatrixFrustumEXT_args[7] = {"mode", "left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glMatrixFrustumEXT_sig = {2047, "glMatrixFrustumEXT", 7, _glMatrixFrustumEXT_args};

static const char * _glMatrixOrthoEXT_args[7] = {"mode", "left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glMatrixOrthoEXT_sig = {2048, "glMatrixOrthoEXT", 7, _glMatrixOrthoEXT_args};

static const char * _glMatrixPopEXT_args[1] = {"mode"};
static const trace::FunctionSig _glMatrixPopEXT_sig = {2049, "glMatrixPopEXT", 1, _glMatrixPopEXT_args};

static const char * _glMatrixPushEXT_args[1] = {"mode"};
static const trace::FunctionSig _glMatrixPushEXT_sig = {2050, "glMatrixPushEXT", 1, _glMatrixPushEXT_args};

static const char * _glMatrixLoadTransposefEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixLoadTransposefEXT_sig = {2051, "glMatrixLoadTransposefEXT", 2, _glMatrixLoadTransposefEXT_args};

static const char * _glMatrixLoadTransposedEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixLoadTransposedEXT_sig = {2052, "glMatrixLoadTransposedEXT", 2, _glMatrixLoadTransposedEXT_args};

static const char * _glMatrixMultTransposefEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixMultTransposefEXT_sig = {2053, "glMatrixMultTransposefEXT", 2, _glMatrixMultTransposefEXT_args};

static const char * _glMatrixMultTransposedEXT_args[2] = {"mode", "m"};
static const trace::FunctionSig _glMatrixMultTransposedEXT_sig = {2054, "glMatrixMultTransposedEXT", 2, _glMatrixMultTransposedEXT_args};

static const char * _glTextureParameterfEXT_args[4] = {"texture", "target", "pname", "param"};
static const trace::FunctionSig _glTextureParameterfEXT_sig = {2055, "glTextureParameterfEXT", 4, _glTextureParameterfEXT_args};

static const char * _glTextureParameterfvEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glTextureParameterfvEXT_sig = {2056, "glTextureParameterfvEXT", 4, _glTextureParameterfvEXT_args};

static const char * _glTextureParameteriEXT_args[4] = {"texture", "target", "pname", "param"};
static const trace::FunctionSig _glTextureParameteriEXT_sig = {2057, "glTextureParameteriEXT", 4, _glTextureParameteriEXT_args};

static const char * _glTextureParameterivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glTextureParameterivEXT_sig = {2058, "glTextureParameterivEXT", 4, _glTextureParameterivEXT_args};

static const char * _glTextureImage1DEXT_args[9] = {"texture", "target", "level", "internalformat", "width", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureImage1DEXT_sig = {2059, "glTextureImage1DEXT", 9, _glTextureImage1DEXT_args};

static const char * _glTextureImage2DEXT_args[10] = {"texture", "target", "level", "internalformat", "width", "height", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureImage2DEXT_sig = {2060, "glTextureImage2DEXT", 10, _glTextureImage2DEXT_args};

static const char * _glTextureSubImage1DEXT_args[8] = {"texture", "target", "level", "xoffset", "width", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureSubImage1DEXT_sig = {2061, "glTextureSubImage1DEXT", 8, _glTextureSubImage1DEXT_args};

static const char * _glTextureSubImage2DEXT_args[10] = {"texture", "target", "level", "xoffset", "yoffset", "width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureSubImage2DEXT_sig = {2062, "glTextureSubImage2DEXT", 10, _glTextureSubImage2DEXT_args};

static const char * _glCopyTextureImage1DEXT_args[8] = {"texture", "target", "level", "internalformat", "x", "y", "width", "border"};
static const trace::FunctionSig _glCopyTextureImage1DEXT_sig = {2063, "glCopyTextureImage1DEXT", 8, _glCopyTextureImage1DEXT_args};

static const char * _glCopyTextureImage2DEXT_args[9] = {"texture", "target", "level", "internalformat", "x", "y", "width", "height", "border"};
static const trace::FunctionSig _glCopyTextureImage2DEXT_sig = {2064, "glCopyTextureImage2DEXT", 9, _glCopyTextureImage2DEXT_args};

static const char * _glCopyTextureSubImage1DEXT_args[7] = {"texture", "target", "level", "xoffset", "x", "y", "width"};
static const trace::FunctionSig _glCopyTextureSubImage1DEXT_sig = {2065, "glCopyTextureSubImage1DEXT", 7, _glCopyTextureSubImage1DEXT_args};

static const char * _glCopyTextureSubImage2DEXT_args[9] = {"texture", "target", "level", "xoffset", "yoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTextureSubImage2DEXT_sig = {2066, "glCopyTextureSubImage2DEXT", 9, _glCopyTextureSubImage2DEXT_args};

static const char * _glGetTextureImageEXT_args[6] = {"texture", "target", "level", "format", "type", "pixels"};
static const trace::FunctionSig _glGetTextureImageEXT_sig = {2067, "glGetTextureImageEXT", 6, _glGetTextureImageEXT_args};

static const char * _glGetTextureParameterfvEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glGetTextureParameterfvEXT_sig = {2068, "glGetTextureParameterfvEXT", 4, _glGetTextureParameterfvEXT_args};

static const char * _glGetTextureParameterivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glGetTextureParameterivEXT_sig = {2069, "glGetTextureParameterivEXT", 4, _glGetTextureParameterivEXT_args};

static const char * _glGetTextureLevelParameterfvEXT_args[5] = {"texture", "target", "level", "pname", "params"};
static const trace::FunctionSig _glGetTextureLevelParameterfvEXT_sig = {2070, "glGetTextureLevelParameterfvEXT", 5, _glGetTextureLevelParameterfvEXT_args};

static const char * _glGetTextureLevelParameterivEXT_args[5] = {"texture", "target", "level", "pname", "params"};
static const trace::FunctionSig _glGetTextureLevelParameterivEXT_sig = {2071, "glGetTextureLevelParameterivEXT", 5, _glGetTextureLevelParameterivEXT_args};

static const char * _glTextureImage3DEXT_args[11] = {"texture", "target", "level", "internalformat", "width", "height", "depth", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureImage3DEXT_sig = {2072, "glTextureImage3DEXT", 11, _glTextureImage3DEXT_args};

static const char * _glTextureSubImage3DEXT_args[12] = {"texture", "target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "pixels"};
static const trace::FunctionSig _glTextureSubImage3DEXT_sig = {2073, "glTextureSubImage3DEXT", 12, _glTextureSubImage3DEXT_args};

static const char * _glCopyTextureSubImage3DEXT_args[10] = {"texture", "target", "level", "xoffset", "yoffset", "zoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTextureSubImage3DEXT_sig = {2074, "glCopyTextureSubImage3DEXT", 10, _glCopyTextureSubImage3DEXT_args};

static const char * _glMultiTexParameterfEXT_args[4] = {"texunit", "target", "pname", "param"};
static const trace::FunctionSig _glMultiTexParameterfEXT_sig = {2075, "glMultiTexParameterfEXT", 4, _glMultiTexParameterfEXT_args};

static const char * _glMultiTexParameterfvEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexParameterfvEXT_sig = {2076, "glMultiTexParameterfvEXT", 4, _glMultiTexParameterfvEXT_args};

static const char * _glMultiTexParameteriEXT_args[4] = {"texunit", "target", "pname", "param"};
static const trace::FunctionSig _glMultiTexParameteriEXT_sig = {2077, "glMultiTexParameteriEXT", 4, _glMultiTexParameteriEXT_args};

static const char * _glMultiTexParameterivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexParameterivEXT_sig = {2078, "glMultiTexParameterivEXT", 4, _glMultiTexParameterivEXT_args};

static const char * _glMultiTexImage1DEXT_args[9] = {"texunit", "target", "level", "internalformat", "width", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexImage1DEXT_sig = {2079, "glMultiTexImage1DEXT", 9, _glMultiTexImage1DEXT_args};

static const char * _glMultiTexImage2DEXT_args[10] = {"texunit", "target", "level", "internalformat", "width", "height", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexImage2DEXT_sig = {2080, "glMultiTexImage2DEXT", 10, _glMultiTexImage2DEXT_args};

static const char * _glMultiTexSubImage1DEXT_args[8] = {"texunit", "target", "level", "xoffset", "width", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexSubImage1DEXT_sig = {2081, "glMultiTexSubImage1DEXT", 8, _glMultiTexSubImage1DEXT_args};

static const char * _glMultiTexSubImage2DEXT_args[10] = {"texunit", "target", "level", "xoffset", "yoffset", "width", "height", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexSubImage2DEXT_sig = {2082, "glMultiTexSubImage2DEXT", 10, _glMultiTexSubImage2DEXT_args};

static const char * _glCopyMultiTexImage1DEXT_args[8] = {"texunit", "target", "level", "internalformat", "x", "y", "width", "border"};
static const trace::FunctionSig _glCopyMultiTexImage1DEXT_sig = {2083, "glCopyMultiTexImage1DEXT", 8, _glCopyMultiTexImage1DEXT_args};

static const char * _glCopyMultiTexImage2DEXT_args[9] = {"texunit", "target", "level", "internalformat", "x", "y", "width", "height", "border"};
static const trace::FunctionSig _glCopyMultiTexImage2DEXT_sig = {2084, "glCopyMultiTexImage2DEXT", 9, _glCopyMultiTexImage2DEXT_args};

static const char * _glCopyMultiTexSubImage1DEXT_args[7] = {"texunit", "target", "level", "xoffset", "x", "y", "width"};
static const trace::FunctionSig _glCopyMultiTexSubImage1DEXT_sig = {2085, "glCopyMultiTexSubImage1DEXT", 7, _glCopyMultiTexSubImage1DEXT_args};

static const char * _glCopyMultiTexSubImage2DEXT_args[9] = {"texunit", "target", "level", "xoffset", "yoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyMultiTexSubImage2DEXT_sig = {2086, "glCopyMultiTexSubImage2DEXT", 9, _glCopyMultiTexSubImage2DEXT_args};

static const char * _glGetMultiTexImageEXT_args[6] = {"texunit", "target", "level", "format", "type", "pixels"};
static const trace::FunctionSig _glGetMultiTexImageEXT_sig = {2087, "glGetMultiTexImageEXT", 6, _glGetMultiTexImageEXT_args};

static const char * _glGetMultiTexParameterfvEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexParameterfvEXT_sig = {2088, "glGetMultiTexParameterfvEXT", 4, _glGetMultiTexParameterfvEXT_args};

static const char * _glGetMultiTexParameterivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexParameterivEXT_sig = {2089, "glGetMultiTexParameterivEXT", 4, _glGetMultiTexParameterivEXT_args};

static const char * _glGetMultiTexLevelParameterfvEXT_args[5] = {"texunit", "target", "level", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexLevelParameterfvEXT_sig = {2090, "glGetMultiTexLevelParameterfvEXT", 5, _glGetMultiTexLevelParameterfvEXT_args};

static const char * _glGetMultiTexLevelParameterivEXT_args[5] = {"texunit", "target", "level", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexLevelParameterivEXT_sig = {2091, "glGetMultiTexLevelParameterivEXT", 5, _glGetMultiTexLevelParameterivEXT_args};

static const char * _glMultiTexImage3DEXT_args[11] = {"texunit", "target", "level", "internalformat", "width", "height", "depth", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexImage3DEXT_sig = {2092, "glMultiTexImage3DEXT", 11, _glMultiTexImage3DEXT_args};

static const char * _glMultiTexSubImage3DEXT_args[12] = {"texunit", "target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "pixels"};
static const trace::FunctionSig _glMultiTexSubImage3DEXT_sig = {2093, "glMultiTexSubImage3DEXT", 12, _glMultiTexSubImage3DEXT_args};

static const char * _glCopyMultiTexSubImage3DEXT_args[10] = {"texunit", "target", "level", "xoffset", "yoffset", "zoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyMultiTexSubImage3DEXT_sig = {2094, "glCopyMultiTexSubImage3DEXT", 10, _glCopyMultiTexSubImage3DEXT_args};

static const char * _glBindMultiTextureEXT_args[3] = {"texunit", "target", "texture"};
static const trace::FunctionSig _glBindMultiTextureEXT_sig = {2095, "glBindMultiTextureEXT", 3, _glBindMultiTextureEXT_args};

static const char * _glEnableClientStateIndexedEXT_args[2] = {"array", "index"};
static const trace::FunctionSig _glEnableClientStateIndexedEXT_sig = {2096, "glEnableClientStateIndexedEXT", 2, _glEnableClientStateIndexedEXT_args};

static const char * _glDisableClientStateIndexedEXT_args[2] = {"array", "index"};
static const trace::FunctionSig _glDisableClientStateIndexedEXT_sig = {2097, "glDisableClientStateIndexedEXT", 2, _glDisableClientStateIndexedEXT_args};

static const char * _glEnableClientStateiEXT_args[2] = {"array", "index"};
static const trace::FunctionSig _glEnableClientStateiEXT_sig = {2098, "glEnableClientStateiEXT", 2, _glEnableClientStateiEXT_args};

static const char * _glDisableClientStateiEXT_args[2] = {"array", "index"};
static const trace::FunctionSig _glDisableClientStateiEXT_sig = {2099, "glDisableClientStateiEXT", 2, _glDisableClientStateiEXT_args};

static const char * _glMultiTexCoordPointerEXT_args[5] = {"texunit", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glMultiTexCoordPointerEXT_sig = {2100, "glMultiTexCoordPointerEXT", 5, _glMultiTexCoordPointerEXT_args};

static const char * _glMultiTexEnvfEXT_args[4] = {"texunit", "target", "pname", "param"};
static const trace::FunctionSig _glMultiTexEnvfEXT_sig = {2101, "glMultiTexEnvfEXT", 4, _glMultiTexEnvfEXT_args};

static const char * _glMultiTexEnvfvEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexEnvfvEXT_sig = {2102, "glMultiTexEnvfvEXT", 4, _glMultiTexEnvfvEXT_args};

static const char * _glMultiTexEnviEXT_args[4] = {"texunit", "target", "pname", "param"};
static const trace::FunctionSig _glMultiTexEnviEXT_sig = {2103, "glMultiTexEnviEXT", 4, _glMultiTexEnviEXT_args};

static const char * _glMultiTexEnvivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexEnvivEXT_sig = {2104, "glMultiTexEnvivEXT", 4, _glMultiTexEnvivEXT_args};

static const char * _glMultiTexGendEXT_args[4] = {"texunit", "coord", "pname", "param"};
static const trace::FunctionSig _glMultiTexGendEXT_sig = {2105, "glMultiTexGendEXT", 4, _glMultiTexGendEXT_args};

static const char * _glMultiTexGendvEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glMultiTexGendvEXT_sig = {2106, "glMultiTexGendvEXT", 4, _glMultiTexGendvEXT_args};

static const char * _glMultiTexGenfEXT_args[4] = {"texunit", "coord", "pname", "param"};
static const trace::FunctionSig _glMultiTexGenfEXT_sig = {2107, "glMultiTexGenfEXT", 4, _glMultiTexGenfEXT_args};

static const char * _glMultiTexGenfvEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glMultiTexGenfvEXT_sig = {2108, "glMultiTexGenfvEXT", 4, _glMultiTexGenfvEXT_args};

static const char * _glMultiTexGeniEXT_args[4] = {"texunit", "coord", "pname", "param"};
static const trace::FunctionSig _glMultiTexGeniEXT_sig = {2109, "glMultiTexGeniEXT", 4, _glMultiTexGeniEXT_args};

static const char * _glMultiTexGenivEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glMultiTexGenivEXT_sig = {2110, "glMultiTexGenivEXT", 4, _glMultiTexGenivEXT_args};

static const char * _glGetMultiTexEnvfvEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexEnvfvEXT_sig = {2111, "glGetMultiTexEnvfvEXT", 4, _glGetMultiTexEnvfvEXT_args};

static const char * _glGetMultiTexEnvivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexEnvivEXT_sig = {2112, "glGetMultiTexEnvivEXT", 4, _glGetMultiTexEnvivEXT_args};

static const char * _glGetMultiTexGendvEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexGendvEXT_sig = {2113, "glGetMultiTexGendvEXT", 4, _glGetMultiTexGendvEXT_args};

static const char * _glGetMultiTexGenfvEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexGenfvEXT_sig = {2114, "glGetMultiTexGenfvEXT", 4, _glGetMultiTexGenfvEXT_args};

static const char * _glGetMultiTexGenivEXT_args[4] = {"texunit", "coord", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexGenivEXT_sig = {2115, "glGetMultiTexGenivEXT", 4, _glGetMultiTexGenivEXT_args};

static const char * _glGetFloatIndexedvEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetFloatIndexedvEXT_sig = {2116, "glGetFloatIndexedvEXT", 3, _glGetFloatIndexedvEXT_args};

static const char * _glGetDoubleIndexedvEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetDoubleIndexedvEXT_sig = {2117, "glGetDoubleIndexedvEXT", 3, _glGetDoubleIndexedvEXT_args};

static const char * _glGetPointerIndexedvEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetPointerIndexedvEXT_sig = {2118, "glGetPointerIndexedvEXT", 3, _glGetPointerIndexedvEXT_args};

static const char * _glGetFloati_vEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetFloati_vEXT_sig = {2119, "glGetFloati_vEXT", 3, _glGetFloati_vEXT_args};

static const char * _glGetDoublei_vEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetDoublei_vEXT_sig = {2120, "glGetDoublei_vEXT", 3, _glGetDoublei_vEXT_args};

static const char * _glGetPointeri_vEXT_args[3] = {"target", "index", "data"};
static const trace::FunctionSig _glGetPointeri_vEXT_sig = {2121, "glGetPointeri_vEXT", 3, _glGetPointeri_vEXT_args};

static const char * _glCompressedTextureImage3DEXT_args[10] = {"texture", "target", "level", "internalformat", "width", "height", "depth", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureImage3DEXT_sig = {2122, "glCompressedTextureImage3DEXT", 10, _glCompressedTextureImage3DEXT_args};

static const char * _glCompressedTextureImage2DEXT_args[9] = {"texture", "target", "level", "internalformat", "width", "height", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureImage2DEXT_sig = {2123, "glCompressedTextureImage2DEXT", 9, _glCompressedTextureImage2DEXT_args};

static const char * _glCompressedTextureImage1DEXT_args[8] = {"texture", "target", "level", "internalformat", "width", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureImage1DEXT_sig = {2124, "glCompressedTextureImage1DEXT", 8, _glCompressedTextureImage1DEXT_args};

static const char * _glCompressedTextureSubImage3DEXT_args[12] = {"texture", "target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureSubImage3DEXT_sig = {2125, "glCompressedTextureSubImage3DEXT", 12, _glCompressedTextureSubImage3DEXT_args};

static const char * _glCompressedTextureSubImage2DEXT_args[10] = {"texture", "target", "level", "xoffset", "yoffset", "width", "height", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureSubImage2DEXT_sig = {2126, "glCompressedTextureSubImage2DEXT", 10, _glCompressedTextureSubImage2DEXT_args};

static const char * _glCompressedTextureSubImage1DEXT_args[8] = {"texture", "target", "level", "xoffset", "width", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedTextureSubImage1DEXT_sig = {2127, "glCompressedTextureSubImage1DEXT", 8, _glCompressedTextureSubImage1DEXT_args};

static const char * _glGetCompressedTextureImageEXT_args[4] = {"texture", "target", "lod", "img"};
static const trace::FunctionSig _glGetCompressedTextureImageEXT_sig = {2128, "glGetCompressedTextureImageEXT", 4, _glGetCompressedTextureImageEXT_args};

static const char * _glCompressedMultiTexImage3DEXT_args[10] = {"texunit", "target", "level", "internalformat", "width", "height", "depth", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexImage3DEXT_sig = {2129, "glCompressedMultiTexImage3DEXT", 10, _glCompressedMultiTexImage3DEXT_args};

static const char * _glCompressedMultiTexImage2DEXT_args[9] = {"texunit", "target", "level", "internalformat", "width", "height", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexImage2DEXT_sig = {2130, "glCompressedMultiTexImage2DEXT", 9, _glCompressedMultiTexImage2DEXT_args};

static const char * _glCompressedMultiTexImage1DEXT_args[8] = {"texunit", "target", "level", "internalformat", "width", "border", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexImage1DEXT_sig = {2131, "glCompressedMultiTexImage1DEXT", 8, _glCompressedMultiTexImage1DEXT_args};

static const char * _glCompressedMultiTexSubImage3DEXT_args[12] = {"texunit", "target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexSubImage3DEXT_sig = {2132, "glCompressedMultiTexSubImage3DEXT", 12, _glCompressedMultiTexSubImage3DEXT_args};

static const char * _glCompressedMultiTexSubImage2DEXT_args[10] = {"texunit", "target", "level", "xoffset", "yoffset", "width", "height", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexSubImage2DEXT_sig = {2133, "glCompressedMultiTexSubImage2DEXT", 10, _glCompressedMultiTexSubImage2DEXT_args};

static const char * _glCompressedMultiTexSubImage1DEXT_args[8] = {"texunit", "target", "level", "xoffset", "width", "format", "imageSize", "bits"};
static const trace::FunctionSig _glCompressedMultiTexSubImage1DEXT_sig = {2134, "glCompressedMultiTexSubImage1DEXT", 8, _glCompressedMultiTexSubImage1DEXT_args};

static const char * _glGetCompressedMultiTexImageEXT_args[4] = {"texunit", "target", "lod", "img"};
static const trace::FunctionSig _glGetCompressedMultiTexImageEXT_sig = {2135, "glGetCompressedMultiTexImageEXT", 4, _glGetCompressedMultiTexImageEXT_args};

static const char * _glNamedProgramStringEXT_args[5] = {"program", "target", "format", "len", "string"};
static const trace::FunctionSig _glNamedProgramStringEXT_sig = {2136, "glNamedProgramStringEXT", 5, _glNamedProgramStringEXT_args};

static const char * _glNamedProgramLocalParameter4dEXT_args[7] = {"program", "target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glNamedProgramLocalParameter4dEXT_sig = {2137, "glNamedProgramLocalParameter4dEXT", 7, _glNamedProgramLocalParameter4dEXT_args};

static const char * _glNamedProgramLocalParameter4dvEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glNamedProgramLocalParameter4dvEXT_sig = {2138, "glNamedProgramLocalParameter4dvEXT", 4, _glNamedProgramLocalParameter4dvEXT_args};

static const char * _glNamedProgramLocalParameter4fEXT_args[7] = {"program", "target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glNamedProgramLocalParameter4fEXT_sig = {2139, "glNamedProgramLocalParameter4fEXT", 7, _glNamedProgramLocalParameter4fEXT_args};

static const char * _glNamedProgramLocalParameter4fvEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glNamedProgramLocalParameter4fvEXT_sig = {2140, "glNamedProgramLocalParameter4fvEXT", 4, _glNamedProgramLocalParameter4fvEXT_args};

static const char * _glGetNamedProgramLocalParameterdvEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glGetNamedProgramLocalParameterdvEXT_sig = {2141, "glGetNamedProgramLocalParameterdvEXT", 4, _glGetNamedProgramLocalParameterdvEXT_args};

static const char * _glGetNamedProgramLocalParameterfvEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glGetNamedProgramLocalParameterfvEXT_sig = {2142, "glGetNamedProgramLocalParameterfvEXT", 4, _glGetNamedProgramLocalParameterfvEXT_args};

static const char * _glGetNamedProgramivEXT_args[4] = {"program", "target", "pname", "params"};
static const trace::FunctionSig _glGetNamedProgramivEXT_sig = {2143, "glGetNamedProgramivEXT", 4, _glGetNamedProgramivEXT_args};

static const char * _glGetNamedProgramStringEXT_args[4] = {"program", "target", "pname", "string"};
static const trace::FunctionSig _glGetNamedProgramStringEXT_sig = {2144, "glGetNamedProgramStringEXT", 4, _glGetNamedProgramStringEXT_args};

static const char * _glNamedProgramLocalParameters4fvEXT_args[5] = {"program", "target", "index", "count", "params"};
static const trace::FunctionSig _glNamedProgramLocalParameters4fvEXT_sig = {2145, "glNamedProgramLocalParameters4fvEXT", 5, _glNamedProgramLocalParameters4fvEXT_args};

static const char * _glNamedProgramLocalParameterI4iEXT_args[7] = {"program", "target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glNamedProgramLocalParameterI4iEXT_sig = {2146, "glNamedProgramLocalParameterI4iEXT", 7, _glNamedProgramLocalParameterI4iEXT_args};

static const char * _glNamedProgramLocalParameterI4ivEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glNamedProgramLocalParameterI4ivEXT_sig = {2147, "glNamedProgramLocalParameterI4ivEXT", 4, _glNamedProgramLocalParameterI4ivEXT_args};

static const char * _glNamedProgramLocalParametersI4ivEXT_args[5] = {"program", "target", "index", "count", "params"};
static const trace::FunctionSig _glNamedProgramLocalParametersI4ivEXT_sig = {2148, "glNamedProgramLocalParametersI4ivEXT", 5, _glNamedProgramLocalParametersI4ivEXT_args};

static const char * _glNamedProgramLocalParameterI4uiEXT_args[7] = {"program", "target", "index", "x", "y", "z", "w"};
static const trace::FunctionSig _glNamedProgramLocalParameterI4uiEXT_sig = {2149, "glNamedProgramLocalParameterI4uiEXT", 7, _glNamedProgramLocalParameterI4uiEXT_args};

static const char * _glNamedProgramLocalParameterI4uivEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glNamedProgramLocalParameterI4uivEXT_sig = {2150, "glNamedProgramLocalParameterI4uivEXT", 4, _glNamedProgramLocalParameterI4uivEXT_args};

static const char * _glNamedProgramLocalParametersI4uivEXT_args[5] = {"program", "target", "index", "count", "params"};
static const trace::FunctionSig _glNamedProgramLocalParametersI4uivEXT_sig = {2151, "glNamedProgramLocalParametersI4uivEXT", 5, _glNamedProgramLocalParametersI4uivEXT_args};

static const char * _glGetNamedProgramLocalParameterIivEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glGetNamedProgramLocalParameterIivEXT_sig = {2152, "glGetNamedProgramLocalParameterIivEXT", 4, _glGetNamedProgramLocalParameterIivEXT_args};

static const char * _glGetNamedProgramLocalParameterIuivEXT_args[4] = {"program", "target", "index", "params"};
static const trace::FunctionSig _glGetNamedProgramLocalParameterIuivEXT_sig = {2153, "glGetNamedProgramLocalParameterIuivEXT", 4, _glGetNamedProgramLocalParameterIuivEXT_args};

static const char * _glTextureParameterIivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glTextureParameterIivEXT_sig = {2154, "glTextureParameterIivEXT", 4, _glTextureParameterIivEXT_args};

static const char * _glTextureParameterIuivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glTextureParameterIuivEXT_sig = {2155, "glTextureParameterIuivEXT", 4, _glTextureParameterIuivEXT_args};

static const char * _glGetTextureParameterIivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glGetTextureParameterIivEXT_sig = {2156, "glGetTextureParameterIivEXT", 4, _glGetTextureParameterIivEXT_args};

static const char * _glGetTextureParameterIuivEXT_args[4] = {"texture", "target", "pname", "params"};
static const trace::FunctionSig _glGetTextureParameterIuivEXT_sig = {2157, "glGetTextureParameterIuivEXT", 4, _glGetTextureParameterIuivEXT_args};

static const char * _glMultiTexParameterIivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexParameterIivEXT_sig = {2158, "glMultiTexParameterIivEXT", 4, _glMultiTexParameterIivEXT_args};

static const char * _glMultiTexParameterIuivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glMultiTexParameterIuivEXT_sig = {2159, "glMultiTexParameterIuivEXT", 4, _glMultiTexParameterIuivEXT_args};

static const char * _glGetMultiTexParameterIivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexParameterIivEXT_sig = {2160, "glGetMultiTexParameterIivEXT", 4, _glGetMultiTexParameterIivEXT_args};

static const char * _glGetMultiTexParameterIuivEXT_args[4] = {"texunit", "target", "pname", "params"};
static const trace::FunctionSig _glGetMultiTexParameterIuivEXT_sig = {2161, "glGetMultiTexParameterIuivEXT", 4, _glGetMultiTexParameterIuivEXT_args};

static const char * _glProgramUniform1fEXT_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1fEXT_sig = {2162, "glProgramUniform1fEXT", 3, _glProgramUniform1fEXT_args};

static const char * _glProgramUniform2fEXT_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2fEXT_sig = {2163, "glProgramUniform2fEXT", 4, _glProgramUniform2fEXT_args};

static const char * _glProgramUniform3fEXT_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3fEXT_sig = {2164, "glProgramUniform3fEXT", 5, _glProgramUniform3fEXT_args};

static const char * _glProgramUniform4fEXT_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4fEXT_sig = {2165, "glProgramUniform4fEXT", 6, _glProgramUniform4fEXT_args};

static const char * _glProgramUniform1iEXT_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1iEXT_sig = {2166, "glProgramUniform1iEXT", 3, _glProgramUniform1iEXT_args};

static const char * _glProgramUniform2iEXT_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2iEXT_sig = {2167, "glProgramUniform2iEXT", 4, _glProgramUniform2iEXT_args};

static const char * _glProgramUniform3iEXT_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3iEXT_sig = {2168, "glProgramUniform3iEXT", 5, _glProgramUniform3iEXT_args};

static const char * _glProgramUniform4iEXT_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4iEXT_sig = {2169, "glProgramUniform4iEXT", 6, _glProgramUniform4iEXT_args};

static const char * _glProgramUniform1fvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1fvEXT_sig = {2170, "glProgramUniform1fvEXT", 4, _glProgramUniform1fvEXT_args};

static const char * _glProgramUniform2fvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2fvEXT_sig = {2171, "glProgramUniform2fvEXT", 4, _glProgramUniform2fvEXT_args};

static const char * _glProgramUniform3fvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3fvEXT_sig = {2172, "glProgramUniform3fvEXT", 4, _glProgramUniform3fvEXT_args};

static const char * _glProgramUniform4fvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4fvEXT_sig = {2173, "glProgramUniform4fvEXT", 4, _glProgramUniform4fvEXT_args};

static const char * _glProgramUniform1ivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1ivEXT_sig = {2174, "glProgramUniform1ivEXT", 4, _glProgramUniform1ivEXT_args};

static const char * _glProgramUniform2ivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2ivEXT_sig = {2175, "glProgramUniform2ivEXT", 4, _glProgramUniform2ivEXT_args};

static const char * _glProgramUniform3ivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3ivEXT_sig = {2176, "glProgramUniform3ivEXT", 4, _glProgramUniform3ivEXT_args};

static const char * _glProgramUniform4ivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4ivEXT_sig = {2177, "glProgramUniform4ivEXT", 4, _glProgramUniform4ivEXT_args};

static const char * _glProgramUniformMatrix2fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2fvEXT_sig = {2178, "glProgramUniformMatrix2fvEXT", 5, _glProgramUniformMatrix2fvEXT_args};

static const char * _glProgramUniformMatrix3fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3fvEXT_sig = {2179, "glProgramUniformMatrix3fvEXT", 5, _glProgramUniformMatrix3fvEXT_args};

static const char * _glProgramUniformMatrix4fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4fvEXT_sig = {2180, "glProgramUniformMatrix4fvEXT", 5, _glProgramUniformMatrix4fvEXT_args};

static const char * _glProgramUniformMatrix2x3fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x3fvEXT_sig = {2181, "glProgramUniformMatrix2x3fvEXT", 5, _glProgramUniformMatrix2x3fvEXT_args};

static const char * _glProgramUniformMatrix3x2fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x2fvEXT_sig = {2182, "glProgramUniformMatrix3x2fvEXT", 5, _glProgramUniformMatrix3x2fvEXT_args};

static const char * _glProgramUniformMatrix2x4fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x4fvEXT_sig = {2183, "glProgramUniformMatrix2x4fvEXT", 5, _glProgramUniformMatrix2x4fvEXT_args};

static const char * _glProgramUniformMatrix4x2fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x2fvEXT_sig = {2184, "glProgramUniformMatrix4x2fvEXT", 5, _glProgramUniformMatrix4x2fvEXT_args};

static const char * _glProgramUniformMatrix3x4fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x4fvEXT_sig = {2185, "glProgramUniformMatrix3x4fvEXT", 5, _glProgramUniformMatrix3x4fvEXT_args};

static const char * _glProgramUniformMatrix4x3fvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x3fvEXT_sig = {2186, "glProgramUniformMatrix4x3fvEXT", 5, _glProgramUniformMatrix4x3fvEXT_args};

static const char * _glProgramUniform1uiEXT_args[3] = {"program", "location", "v0"};
static const trace::FunctionSig _glProgramUniform1uiEXT_sig = {2187, "glProgramUniform1uiEXT", 3, _glProgramUniform1uiEXT_args};

static const char * _glProgramUniform2uiEXT_args[4] = {"program", "location", "v0", "v1"};
static const trace::FunctionSig _glProgramUniform2uiEXT_sig = {2188, "glProgramUniform2uiEXT", 4, _glProgramUniform2uiEXT_args};

static const char * _glProgramUniform3uiEXT_args[5] = {"program", "location", "v0", "v1", "v2"};
static const trace::FunctionSig _glProgramUniform3uiEXT_sig = {2189, "glProgramUniform3uiEXT", 5, _glProgramUniform3uiEXT_args};

static const char * _glProgramUniform4uiEXT_args[6] = {"program", "location", "v0", "v1", "v2", "v3"};
static const trace::FunctionSig _glProgramUniform4uiEXT_sig = {2190, "glProgramUniform4uiEXT", 6, _glProgramUniform4uiEXT_args};

static const char * _glProgramUniform1uivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1uivEXT_sig = {2191, "glProgramUniform1uivEXT", 4, _glProgramUniform1uivEXT_args};

static const char * _glProgramUniform2uivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2uivEXT_sig = {2192, "glProgramUniform2uivEXT", 4, _glProgramUniform2uivEXT_args};

static const char * _glProgramUniform3uivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3uivEXT_sig = {2193, "glProgramUniform3uivEXT", 4, _glProgramUniform3uivEXT_args};

static const char * _glProgramUniform4uivEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4uivEXT_sig = {2194, "glProgramUniform4uivEXT", 4, _glProgramUniform4uivEXT_args};

static const char * _glNamedBufferDataEXT_args[4] = {"buffer", "size", "data", "usage"};
static const trace::FunctionSig _glNamedBufferDataEXT_sig = {2195, "glNamedBufferDataEXT", 4, _glNamedBufferDataEXT_args};

static const char * _glNamedBufferSubDataEXT_args[4] = {"buffer", "offset", "size", "data"};
static const trace::FunctionSig _glNamedBufferSubDataEXT_sig = {2196, "glNamedBufferSubDataEXT", 4, _glNamedBufferSubDataEXT_args};

static const char * _glMapNamedBufferEXT_args[2] = {"buffer", "access"};
static const trace::FunctionSig _glMapNamedBufferEXT_sig = {2197, "glMapNamedBufferEXT", 2, _glMapNamedBufferEXT_args};

static const char * _glUnmapNamedBufferEXT_args[1] = {"buffer"};
static const trace::FunctionSig _glUnmapNamedBufferEXT_sig = {2198, "glUnmapNamedBufferEXT", 1, _glUnmapNamedBufferEXT_args};

static const char * _glMapNamedBufferRangeEXT_args[4] = {"buffer", "offset", "length", "access"};
static const trace::FunctionSig _glMapNamedBufferRangeEXT_sig = {2199, "glMapNamedBufferRangeEXT", 4, _glMapNamedBufferRangeEXT_args};

static const char * _glFlushMappedNamedBufferRangeEXT_args[3] = {"buffer", "offset", "length"};
static const trace::FunctionSig _glFlushMappedNamedBufferRangeEXT_sig = {2200, "glFlushMappedNamedBufferRangeEXT", 3, _glFlushMappedNamedBufferRangeEXT_args};

static const char * _glNamedCopyBufferSubDataEXT_args[5] = {"readBuffer", "writeBuffer", "readOffset", "writeOffset", "size"};
static const trace::FunctionSig _glNamedCopyBufferSubDataEXT_sig = {2201, "glNamedCopyBufferSubDataEXT", 5, _glNamedCopyBufferSubDataEXT_args};

static const char * _glGetNamedBufferParameterivEXT_args[3] = {"buffer", "pname", "params"};
static const trace::FunctionSig _glGetNamedBufferParameterivEXT_sig = {2202, "glGetNamedBufferParameterivEXT", 3, _glGetNamedBufferParameterivEXT_args};

static const char * _glGetNamedBufferPointervEXT_args[3] = {"buffer", "pname", "params"};
static const trace::FunctionSig _glGetNamedBufferPointervEXT_sig = {2203, "glGetNamedBufferPointervEXT", 3, _glGetNamedBufferPointervEXT_args};

static const char * _glGetNamedBufferSubDataEXT_args[4] = {"buffer", "offset", "size", "data"};
static const trace::FunctionSig _glGetNamedBufferSubDataEXT_sig = {2204, "glGetNamedBufferSubDataEXT", 4, _glGetNamedBufferSubDataEXT_args};

static const char * _glTextureBufferEXT_args[4] = {"texture", "target", "internalformat", "buffer"};
static const trace::FunctionSig _glTextureBufferEXT_sig = {2205, "glTextureBufferEXT", 4, _glTextureBufferEXT_args};

static const char * _glMultiTexBufferEXT_args[4] = {"texunit", "target", "internalformat", "buffer"};
static const trace::FunctionSig _glMultiTexBufferEXT_sig = {2206, "glMultiTexBufferEXT", 4, _glMultiTexBufferEXT_args};

static const char * _glNamedRenderbufferStorageEXT_args[4] = {"renderbuffer", "internalformat", "width", "height"};
static const trace::FunctionSig _glNamedRenderbufferStorageEXT_sig = {2207, "glNamedRenderbufferStorageEXT", 4, _glNamedRenderbufferStorageEXT_args};

static const char * _glGetNamedRenderbufferParameterivEXT_args[3] = {"renderbuffer", "pname", "params"};
static const trace::FunctionSig _glGetNamedRenderbufferParameterivEXT_sig = {2208, "glGetNamedRenderbufferParameterivEXT", 3, _glGetNamedRenderbufferParameterivEXT_args};

static const char * _glCheckNamedFramebufferStatusEXT_args[2] = {"framebuffer", "target"};
static const trace::FunctionSig _glCheckNamedFramebufferStatusEXT_sig = {2209, "glCheckNamedFramebufferStatusEXT", 2, _glCheckNamedFramebufferStatusEXT_args};

static const char * _glNamedFramebufferTexture1DEXT_args[5] = {"framebuffer", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glNamedFramebufferTexture1DEXT_sig = {2210, "glNamedFramebufferTexture1DEXT", 5, _glNamedFramebufferTexture1DEXT_args};

static const char * _glNamedFramebufferTexture2DEXT_args[5] = {"framebuffer", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glNamedFramebufferTexture2DEXT_sig = {2211, "glNamedFramebufferTexture2DEXT", 5, _glNamedFramebufferTexture2DEXT_args};

static const char * _glNamedFramebufferTexture3DEXT_args[6] = {"framebuffer", "attachment", "textarget", "texture", "level", "zoffset"};
static const trace::FunctionSig _glNamedFramebufferTexture3DEXT_sig = {2212, "glNamedFramebufferTexture3DEXT", 6, _glNamedFramebufferTexture3DEXT_args};

static const char * _glNamedFramebufferRenderbufferEXT_args[4] = {"framebuffer", "attachment", "renderbuffertarget", "renderbuffer"};
static const trace::FunctionSig _glNamedFramebufferRenderbufferEXT_sig = {2213, "glNamedFramebufferRenderbufferEXT", 4, _glNamedFramebufferRenderbufferEXT_args};

static const char * _glGetNamedFramebufferAttachmentParameterivEXT_args[4] = {"framebuffer", "attachment", "pname", "params"};
static const trace::FunctionSig _glGetNamedFramebufferAttachmentParameterivEXT_sig = {2214, "glGetNamedFramebufferAttachmentParameterivEXT", 4, _glGetNamedFramebufferAttachmentParameterivEXT_args};

static const char * _glGenerateTextureMipmapEXT_args[2] = {"texture", "target"};
static const trace::FunctionSig _glGenerateTextureMipmapEXT_sig = {2215, "glGenerateTextureMipmapEXT", 2, _glGenerateTextureMipmapEXT_args};

static const char * _glGenerateMultiTexMipmapEXT_args[2] = {"texunit", "target"};
static const trace::FunctionSig _glGenerateMultiTexMipmapEXT_sig = {2216, "glGenerateMultiTexMipmapEXT", 2, _glGenerateMultiTexMipmapEXT_args};

static const char * _glFramebufferDrawBufferEXT_args[2] = {"framebuffer", "mode"};
static const trace::FunctionSig _glFramebufferDrawBufferEXT_sig = {2217, "glFramebufferDrawBufferEXT", 2, _glFramebufferDrawBufferEXT_args};

static const char * _glFramebufferDrawBuffersEXT_args[3] = {"framebuffer", "n", "bufs"};
static const trace::FunctionSig _glFramebufferDrawBuffersEXT_sig = {2218, "glFramebufferDrawBuffersEXT", 3, _glFramebufferDrawBuffersEXT_args};

static const char * _glFramebufferReadBufferEXT_args[2] = {"framebuffer", "mode"};
static const trace::FunctionSig _glFramebufferReadBufferEXT_sig = {2219, "glFramebufferReadBufferEXT", 2, _glFramebufferReadBufferEXT_args};

static const char * _glGetFramebufferParameterivEXT_args[3] = {"framebuffer", "pname", "params"};
static const trace::FunctionSig _glGetFramebufferParameterivEXT_sig = {2220, "glGetFramebufferParameterivEXT", 3, _glGetFramebufferParameterivEXT_args};

static const char * _glNamedRenderbufferStorageMultisampleEXT_args[5] = {"renderbuffer", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glNamedRenderbufferStorageMultisampleEXT_sig = {2221, "glNamedRenderbufferStorageMultisampleEXT", 5, _glNamedRenderbufferStorageMultisampleEXT_args};

static const char * _glNamedRenderbufferStorageMultisampleCoverageEXT_args[6] = {"renderbuffer", "coverageSamples", "colorSamples", "internalformat", "width", "height"};
static const trace::FunctionSig _glNamedRenderbufferStorageMultisampleCoverageEXT_sig = {2222, "glNamedRenderbufferStorageMultisampleCoverageEXT", 6, _glNamedRenderbufferStorageMultisampleCoverageEXT_args};

static const char * _glNamedFramebufferTextureEXT_args[4] = {"framebuffer", "attachment", "texture", "level"};
static const trace::FunctionSig _glNamedFramebufferTextureEXT_sig = {2223, "glNamedFramebufferTextureEXT", 4, _glNamedFramebufferTextureEXT_args};

static const char * _glNamedFramebufferTextureLayerEXT_args[5] = {"framebuffer", "attachment", "texture", "level", "layer"};
static const trace::FunctionSig _glNamedFramebufferTextureLayerEXT_sig = {2224, "glNamedFramebufferTextureLayerEXT", 5, _glNamedFramebufferTextureLayerEXT_args};

static const char * _glNamedFramebufferTextureFaceEXT_args[5] = {"framebuffer", "attachment", "texture", "level", "face"};
static const trace::FunctionSig _glNamedFramebufferTextureFaceEXT_sig = {2225, "glNamedFramebufferTextureFaceEXT", 5, _glNamedFramebufferTextureFaceEXT_args};

static const char * _glTextureRenderbufferEXT_args[3] = {"texture", "target", "renderbuffer"};
static const trace::FunctionSig _glTextureRenderbufferEXT_sig = {2226, "glTextureRenderbufferEXT", 3, _glTextureRenderbufferEXT_args};

static const char * _glMultiTexRenderbufferEXT_args[3] = {"texunit", "target", "renderbuffer"};
static const trace::FunctionSig _glMultiTexRenderbufferEXT_sig = {2227, "glMultiTexRenderbufferEXT", 3, _glMultiTexRenderbufferEXT_args};

static const char * _glProgramUniform1dEXT_args[3] = {"program", "location", "x"};
static const trace::FunctionSig _glProgramUniform1dEXT_sig = {2228, "glProgramUniform1dEXT", 3, _glProgramUniform1dEXT_args};

static const char * _glProgramUniform2dEXT_args[4] = {"program", "location", "x", "y"};
static const trace::FunctionSig _glProgramUniform2dEXT_sig = {2229, "glProgramUniform2dEXT", 4, _glProgramUniform2dEXT_args};

static const char * _glProgramUniform3dEXT_args[5] = {"program", "location", "x", "y", "z"};
static const trace::FunctionSig _glProgramUniform3dEXT_sig = {2230, "glProgramUniform3dEXT", 5, _glProgramUniform3dEXT_args};

static const char * _glProgramUniform4dEXT_args[6] = {"program", "location", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramUniform4dEXT_sig = {2231, "glProgramUniform4dEXT", 6, _glProgramUniform4dEXT_args};

static const char * _glProgramUniform1dvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1dvEXT_sig = {2232, "glProgramUniform1dvEXT", 4, _glProgramUniform1dvEXT_args};

static const char * _glProgramUniform2dvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2dvEXT_sig = {2233, "glProgramUniform2dvEXT", 4, _glProgramUniform2dvEXT_args};

static const char * _glProgramUniform3dvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3dvEXT_sig = {2234, "glProgramUniform3dvEXT", 4, _glProgramUniform3dvEXT_args};

static const char * _glProgramUniform4dvEXT_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4dvEXT_sig = {2235, "glProgramUniform4dvEXT", 4, _glProgramUniform4dvEXT_args};

static const char * _glProgramUniformMatrix2dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2dvEXT_sig = {2236, "glProgramUniformMatrix2dvEXT", 5, _glProgramUniformMatrix2dvEXT_args};

static const char * _glProgramUniformMatrix3dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3dvEXT_sig = {2237, "glProgramUniformMatrix3dvEXT", 5, _glProgramUniformMatrix3dvEXT_args};

static const char * _glProgramUniformMatrix4dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4dvEXT_sig = {2238, "glProgramUniformMatrix4dvEXT", 5, _glProgramUniformMatrix4dvEXT_args};

static const char * _glProgramUniformMatrix2x3dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x3dvEXT_sig = {2239, "glProgramUniformMatrix2x3dvEXT", 5, _glProgramUniformMatrix2x3dvEXT_args};

static const char * _glProgramUniformMatrix2x4dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix2x4dvEXT_sig = {2240, "glProgramUniformMatrix2x4dvEXT", 5, _glProgramUniformMatrix2x4dvEXT_args};

static const char * _glProgramUniformMatrix3x2dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x2dvEXT_sig = {2241, "glProgramUniformMatrix3x2dvEXT", 5, _glProgramUniformMatrix3x2dvEXT_args};

static const char * _glProgramUniformMatrix3x4dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix3x4dvEXT_sig = {2242, "glProgramUniformMatrix3x4dvEXT", 5, _glProgramUniformMatrix3x4dvEXT_args};

static const char * _glProgramUniformMatrix4x2dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x2dvEXT_sig = {2243, "glProgramUniformMatrix4x2dvEXT", 5, _glProgramUniformMatrix4x2dvEXT_args};

static const char * _glProgramUniformMatrix4x3dvEXT_args[5] = {"program", "location", "count", "transpose", "value"};
static const trace::FunctionSig _glProgramUniformMatrix4x3dvEXT_sig = {2244, "glProgramUniformMatrix4x3dvEXT", 5, _glProgramUniformMatrix4x3dvEXT_args};

static const char * _glVertexArrayVertexOffsetEXT_args[6] = {"vaobj", "buffer", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayVertexOffsetEXT_sig = {2245, "glVertexArrayVertexOffsetEXT", 6, _glVertexArrayVertexOffsetEXT_args};

static const char * _glVertexArrayColorOffsetEXT_args[6] = {"vaobj", "buffer", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayColorOffsetEXT_sig = {2246, "glVertexArrayColorOffsetEXT", 6, _glVertexArrayColorOffsetEXT_args};

static const char * _glVertexArrayEdgeFlagOffsetEXT_args[4] = {"vaobj", "buffer", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayEdgeFlagOffsetEXT_sig = {2247, "glVertexArrayEdgeFlagOffsetEXT", 4, _glVertexArrayEdgeFlagOffsetEXT_args};

static const char * _glVertexArrayIndexOffsetEXT_args[5] = {"vaobj", "buffer", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayIndexOffsetEXT_sig = {2248, "glVertexArrayIndexOffsetEXT", 5, _glVertexArrayIndexOffsetEXT_args};

static const char * _glVertexArrayNormalOffsetEXT_args[5] = {"vaobj", "buffer", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayNormalOffsetEXT_sig = {2249, "glVertexArrayNormalOffsetEXT", 5, _glVertexArrayNormalOffsetEXT_args};

static const char * _glVertexArrayTexCoordOffsetEXT_args[6] = {"vaobj", "buffer", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayTexCoordOffsetEXT_sig = {2250, "glVertexArrayTexCoordOffsetEXT", 6, _glVertexArrayTexCoordOffsetEXT_args};

static const char * _glVertexArrayMultiTexCoordOffsetEXT_args[7] = {"vaobj", "buffer", "texunit", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayMultiTexCoordOffsetEXT_sig = {2251, "glVertexArrayMultiTexCoordOffsetEXT", 7, _glVertexArrayMultiTexCoordOffsetEXT_args};

static const char * _glVertexArrayFogCoordOffsetEXT_args[5] = {"vaobj", "buffer", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayFogCoordOffsetEXT_sig = {2252, "glVertexArrayFogCoordOffsetEXT", 5, _glVertexArrayFogCoordOffsetEXT_args};

static const char * _glVertexArraySecondaryColorOffsetEXT_args[6] = {"vaobj", "buffer", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArraySecondaryColorOffsetEXT_sig = {2253, "glVertexArraySecondaryColorOffsetEXT", 6, _glVertexArraySecondaryColorOffsetEXT_args};

static const char * _glVertexArrayVertexAttribOffsetEXT_args[8] = {"vaobj", "buffer", "index", "size", "type", "normalized", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayVertexAttribOffsetEXT_sig = {2254, "glVertexArrayVertexAttribOffsetEXT", 8, _glVertexArrayVertexAttribOffsetEXT_args};

static const char * _glVertexArrayVertexAttribIOffsetEXT_args[7] = {"vaobj", "buffer", "index", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayVertexAttribIOffsetEXT_sig = {2255, "glVertexArrayVertexAttribIOffsetEXT", 7, _glVertexArrayVertexAttribIOffsetEXT_args};

static const char * _glEnableVertexArrayEXT_args[2] = {"vaobj", "array"};
static const trace::FunctionSig _glEnableVertexArrayEXT_sig = {2256, "glEnableVertexArrayEXT", 2, _glEnableVertexArrayEXT_args};

static const char * _glDisableVertexArrayEXT_args[2] = {"vaobj", "array"};
static const trace::FunctionSig _glDisableVertexArrayEXT_sig = {2257, "glDisableVertexArrayEXT", 2, _glDisableVertexArrayEXT_args};

static const char * _glEnableVertexArrayAttribEXT_args[2] = {"vaobj", "index"};
static const trace::FunctionSig _glEnableVertexArrayAttribEXT_sig = {2258, "glEnableVertexArrayAttribEXT", 2, _glEnableVertexArrayAttribEXT_args};

static const char * _glDisableVertexArrayAttribEXT_args[2] = {"vaobj", "index"};
static const trace::FunctionSig _glDisableVertexArrayAttribEXT_sig = {2259, "glDisableVertexArrayAttribEXT", 2, _glDisableVertexArrayAttribEXT_args};

static const char * _glGetVertexArrayIntegervEXT_args[3] = {"vaobj", "pname", "param"};
static const trace::FunctionSig _glGetVertexArrayIntegervEXT_sig = {2260, "glGetVertexArrayIntegervEXT", 3, _glGetVertexArrayIntegervEXT_args};

static const char * _glGetVertexArrayPointervEXT_args[3] = {"vaobj", "pname", "param"};
static const trace::FunctionSig _glGetVertexArrayPointervEXT_sig = {2261, "glGetVertexArrayPointervEXT", 3, _glGetVertexArrayPointervEXT_args};

static const char * _glGetVertexArrayIntegeri_vEXT_args[4] = {"vaobj", "index", "pname", "param"};
static const trace::FunctionSig _glGetVertexArrayIntegeri_vEXT_sig = {2262, "glGetVertexArrayIntegeri_vEXT", 4, _glGetVertexArrayIntegeri_vEXT_args};

static const char * _glGetVertexArrayPointeri_vEXT_args[4] = {"vaobj", "index", "pname", "param"};
static const trace::FunctionSig _glGetVertexArrayPointeri_vEXT_sig = {2263, "glGetVertexArrayPointeri_vEXT", 4, _glGetVertexArrayPointeri_vEXT_args};

static const char * _glGetMultisamplefvNV_args[3] = {"pname", "index", "val"};
static const trace::FunctionSig _glGetMultisamplefvNV_sig = {2264, "glGetMultisamplefvNV", 3, _glGetMultisamplefvNV_args};

static const char * _glSampleMaskIndexedNV_args[2] = {"index", "mask"};
static const trace::FunctionSig _glSampleMaskIndexedNV_sig = {2265, "glSampleMaskIndexedNV", 2, _glSampleMaskIndexedNV_args};

static const char * _glTexRenderbufferNV_args[2] = {"target", "renderbuffer"};
static const trace::FunctionSig _glTexRenderbufferNV_sig = {2266, "glTexRenderbufferNV", 2, _glTexRenderbufferNV_args};

static const char * _glBindTransformFeedbackNV_args[2] = {"target", "id"};
static const trace::FunctionSig _glBindTransformFeedbackNV_sig = {2267, "glBindTransformFeedbackNV", 2, _glBindTransformFeedbackNV_args};

static const char * _glDeleteTransformFeedbacksNV_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteTransformFeedbacksNV_sig = {2268, "glDeleteTransformFeedbacksNV", 2, _glDeleteTransformFeedbacksNV_args};

static const char * _glGenTransformFeedbacksNV_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenTransformFeedbacksNV_sig = {2269, "glGenTransformFeedbacksNV", 2, _glGenTransformFeedbacksNV_args};

static const char * _glIsTransformFeedbackNV_args[1] = {"id"};
static const trace::FunctionSig _glIsTransformFeedbackNV_sig = {2270, "glIsTransformFeedbackNV", 1, _glIsTransformFeedbackNV_args};

static const char ** _glPauseTransformFeedbackNV_args = NULL;
static const trace::FunctionSig _glPauseTransformFeedbackNV_sig = {2271, "glPauseTransformFeedbackNV", 0, _glPauseTransformFeedbackNV_args};

static const char ** _glResumeTransformFeedbackNV_args = NULL;
static const trace::FunctionSig _glResumeTransformFeedbackNV_sig = {2272, "glResumeTransformFeedbackNV", 0, _glResumeTransformFeedbackNV_args};

static const char * _glDrawTransformFeedbackNV_args[2] = {"mode", "id"};
static const trace::FunctionSig _glDrawTransformFeedbackNV_sig = {2273, "glDrawTransformFeedbackNV", 2, _glDrawTransformFeedbackNV_args};

static const char * _glGetPerfMonitorGroupsAMD_args[3] = {"numGroups", "groupsSize", "groups"};
static const trace::FunctionSig _glGetPerfMonitorGroupsAMD_sig = {2274, "glGetPerfMonitorGroupsAMD", 3, _glGetPerfMonitorGroupsAMD_args};

static const char * _glGetPerfMonitorCountersAMD_args[5] = {"group", "numCounters", "maxActiveCounters", "counterSize", "counters"};
static const trace::FunctionSig _glGetPerfMonitorCountersAMD_sig = {2275, "glGetPerfMonitorCountersAMD", 5, _glGetPerfMonitorCountersAMD_args};

static const char * _glGetPerfMonitorGroupStringAMD_args[4] = {"group", "bufSize", "length", "groupString"};
static const trace::FunctionSig _glGetPerfMonitorGroupStringAMD_sig = {2276, "glGetPerfMonitorGroupStringAMD", 4, _glGetPerfMonitorGroupStringAMD_args};

static const char * _glGetPerfMonitorCounterStringAMD_args[5] = {"group", "counter", "bufSize", "length", "counterString"};
static const trace::FunctionSig _glGetPerfMonitorCounterStringAMD_sig = {2277, "glGetPerfMonitorCounterStringAMD", 5, _glGetPerfMonitorCounterStringAMD_args};

static const char * _glGetPerfMonitorCounterInfoAMD_args[4] = {"group", "counter", "pname", "data"};
static const trace::FunctionSig _glGetPerfMonitorCounterInfoAMD_sig = {2278, "glGetPerfMonitorCounterInfoAMD", 4, _glGetPerfMonitorCounterInfoAMD_args};

static const char * _glGenPerfMonitorsAMD_args[2] = {"n", "monitors"};
static const trace::FunctionSig _glGenPerfMonitorsAMD_sig = {2279, "glGenPerfMonitorsAMD", 2, _glGenPerfMonitorsAMD_args};

static const char * _glDeletePerfMonitorsAMD_args[2] = {"n", "monitors"};
static const trace::FunctionSig _glDeletePerfMonitorsAMD_sig = {2280, "glDeletePerfMonitorsAMD", 2, _glDeletePerfMonitorsAMD_args};

static const char * _glSelectPerfMonitorCountersAMD_args[5] = {"monitor", "enable", "group", "numCounters", "counterList"};
static const trace::FunctionSig _glSelectPerfMonitorCountersAMD_sig = {2281, "glSelectPerfMonitorCountersAMD", 5, _glSelectPerfMonitorCountersAMD_args};

static const char * _glBeginPerfMonitorAMD_args[1] = {"monitor"};
static const trace::FunctionSig _glBeginPerfMonitorAMD_sig = {2282, "glBeginPerfMonitorAMD", 1, _glBeginPerfMonitorAMD_args};

static const char * _glEndPerfMonitorAMD_args[1] = {"monitor"};
static const trace::FunctionSig _glEndPerfMonitorAMD_sig = {2283, "glEndPerfMonitorAMD", 1, _glEndPerfMonitorAMD_args};

static const char * _glGetPerfMonitorCounterDataAMD_args[5] = {"monitor", "pname", "dataSize", "data", "bytesWritten"};
static const trace::FunctionSig _glGetPerfMonitorCounterDataAMD_sig = {2284, "glGetPerfMonitorCounterDataAMD", 5, _glGetPerfMonitorCounterDataAMD_args};

static const char * _glTessellationFactorAMD_args[1] = {"factor"};
static const trace::FunctionSig _glTessellationFactorAMD_sig = {2285, "glTessellationFactorAMD", 1, _glTessellationFactorAMD_args};

static const char * _glTessellationModeAMD_args[1] = {"mode"};
static const trace::FunctionSig _glTessellationModeAMD_sig = {2286, "glTessellationModeAMD", 1, _glTessellationModeAMD_args};

static const char * _glProvokingVertexEXT_args[1] = {"mode"};
static const trace::FunctionSig _glProvokingVertexEXT_sig = {2287, "glProvokingVertexEXT", 1, _glProvokingVertexEXT_args};

static const char * _glBlendFuncIndexedAMD_args[3] = {"buf", "src", "dst"};
static const trace::FunctionSig _glBlendFuncIndexedAMD_sig = {2288, "glBlendFuncIndexedAMD", 3, _glBlendFuncIndexedAMD_args};

static const char * _glBlendFuncSeparateIndexedAMD_args[5] = {"buf", "srcRGB", "dstRGB", "srcAlpha", "dstAlpha"};
static const trace::FunctionSig _glBlendFuncSeparateIndexedAMD_sig = {2289, "glBlendFuncSeparateIndexedAMD", 5, _glBlendFuncSeparateIndexedAMD_args};

static const char * _glBlendEquationIndexedAMD_args[2] = {"buf", "mode"};
static const trace::FunctionSig _glBlendEquationIndexedAMD_sig = {2290, "glBlendEquationIndexedAMD", 2, _glBlendEquationIndexedAMD_args};

static const char * _glBlendEquationSeparateIndexedAMD_args[3] = {"buf", "modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparateIndexedAMD_sig = {2291, "glBlendEquationSeparateIndexedAMD", 3, _glBlendEquationSeparateIndexedAMD_args};

static const char * _glTextureRangeAPPLE_args[3] = {"target", "length", "pointer"};
static const trace::FunctionSig _glTextureRangeAPPLE_sig = {2292, "glTextureRangeAPPLE", 3, _glTextureRangeAPPLE_args};

static const char * _glGetTexParameterPointervAPPLE_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterPointervAPPLE_sig = {2293, "glGetTexParameterPointervAPPLE", 3, _glGetTexParameterPointervAPPLE_args};

static const char * _glEnableVertexAttribAPPLE_args[2] = {"index", "pname"};
static const trace::FunctionSig _glEnableVertexAttribAPPLE_sig = {2294, "glEnableVertexAttribAPPLE", 2, _glEnableVertexAttribAPPLE_args};

static const char * _glDisableVertexAttribAPPLE_args[2] = {"index", "pname"};
static const trace::FunctionSig _glDisableVertexAttribAPPLE_sig = {2295, "glDisableVertexAttribAPPLE", 2, _glDisableVertexAttribAPPLE_args};

static const char * _glIsVertexAttribEnabledAPPLE_args[2] = {"index", "pname"};
static const trace::FunctionSig _glIsVertexAttribEnabledAPPLE_sig = {2296, "glIsVertexAttribEnabledAPPLE", 2, _glIsVertexAttribEnabledAPPLE_args};

static const char * _glMapVertexAttrib1dAPPLE_args[7] = {"index", "size", "u1", "u2", "stride", "order", "points"};
static const trace::FunctionSig _glMapVertexAttrib1dAPPLE_sig = {2297, "glMapVertexAttrib1dAPPLE", 7, _glMapVertexAttrib1dAPPLE_args};

static const char * _glMapVertexAttrib1fAPPLE_args[7] = {"index", "size", "u1", "u2", "stride", "order", "points"};
static const trace::FunctionSig _glMapVertexAttrib1fAPPLE_sig = {2298, "glMapVertexAttrib1fAPPLE", 7, _glMapVertexAttrib1fAPPLE_args};

static const char * _glMapVertexAttrib2dAPPLE_args[11] = {"index", "size", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "points"};
static const trace::FunctionSig _glMapVertexAttrib2dAPPLE_sig = {2299, "glMapVertexAttrib2dAPPLE", 11, _glMapVertexAttrib2dAPPLE_args};

static const char * _glMapVertexAttrib2fAPPLE_args[11] = {"index", "size", "u1", "u2", "ustride", "uorder", "v1", "v2", "vstride", "vorder", "points"};
static const trace::FunctionSig _glMapVertexAttrib2fAPPLE_sig = {2300, "glMapVertexAttrib2fAPPLE", 11, _glMapVertexAttrib2fAPPLE_args};

static const char * _glObjectPurgeableAPPLE_args[3] = {"objectType", "name", "option"};
static const trace::FunctionSig _glObjectPurgeableAPPLE_sig = {2301, "glObjectPurgeableAPPLE", 3, _glObjectPurgeableAPPLE_args};

static const char * _glObjectUnpurgeableAPPLE_args[3] = {"objectType", "name", "option"};
static const trace::FunctionSig _glObjectUnpurgeableAPPLE_sig = {2302, "glObjectUnpurgeableAPPLE", 3, _glObjectUnpurgeableAPPLE_args};

static const char * _glGetObjectParameterivAPPLE_args[4] = {"objectType", "name", "pname", "params"};
static const trace::FunctionSig _glGetObjectParameterivAPPLE_sig = {2303, "glGetObjectParameterivAPPLE", 4, _glGetObjectParameterivAPPLE_args};

static const char * _glBeginVideoCaptureNV_args[1] = {"video_capture_slot"};
static const trace::FunctionSig _glBeginVideoCaptureNV_sig = {2304, "glBeginVideoCaptureNV", 1, _glBeginVideoCaptureNV_args};

static const char * _glBindVideoCaptureStreamBufferNV_args[4] = {"video_capture_slot", "stream", "frame_region", "offset"};
static const trace::FunctionSig _glBindVideoCaptureStreamBufferNV_sig = {2305, "glBindVideoCaptureStreamBufferNV", 4, _glBindVideoCaptureStreamBufferNV_args};

static const char * _glBindVideoCaptureStreamTextureNV_args[5] = {"video_capture_slot", "stream", "frame_region", "target", "texture"};
static const trace::FunctionSig _glBindVideoCaptureStreamTextureNV_sig = {2306, "glBindVideoCaptureStreamTextureNV", 5, _glBindVideoCaptureStreamTextureNV_args};

static const char * _glEndVideoCaptureNV_args[1] = {"video_capture_slot"};
static const trace::FunctionSig _glEndVideoCaptureNV_sig = {2307, "glEndVideoCaptureNV", 1, _glEndVideoCaptureNV_args};

static const char * _glGetVideoCaptureivNV_args[3] = {"video_capture_slot", "pname", "params"};
static const trace::FunctionSig _glGetVideoCaptureivNV_sig = {2308, "glGetVideoCaptureivNV", 3, _glGetVideoCaptureivNV_args};

static const char * _glGetVideoCaptureStreamivNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glGetVideoCaptureStreamivNV_sig = {2309, "glGetVideoCaptureStreamivNV", 4, _glGetVideoCaptureStreamivNV_args};

static const char * _glGetVideoCaptureStreamfvNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glGetVideoCaptureStreamfvNV_sig = {2310, "glGetVideoCaptureStreamfvNV", 4, _glGetVideoCaptureStreamfvNV_args};

static const char * _glGetVideoCaptureStreamdvNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glGetVideoCaptureStreamdvNV_sig = {2311, "glGetVideoCaptureStreamdvNV", 4, _glGetVideoCaptureStreamdvNV_args};

static const char * _glVideoCaptureNV_args[3] = {"video_capture_slot", "sequence_num", "capture_time"};
static const trace::FunctionSig _glVideoCaptureNV_sig = {2312, "glVideoCaptureNV", 3, _glVideoCaptureNV_args};

static const char * _glVideoCaptureStreamParameterivNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glVideoCaptureStreamParameterivNV_sig = {2313, "glVideoCaptureStreamParameterivNV", 4, _glVideoCaptureStreamParameterivNV_args};

static const char * _glVideoCaptureStreamParameterfvNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glVideoCaptureStreamParameterfvNV_sig = {2314, "glVideoCaptureStreamParameterfvNV", 4, _glVideoCaptureStreamParameterfvNV_args};

static const char * _glVideoCaptureStreamParameterdvNV_args[4] = {"video_capture_slot", "stream", "pname", "params"};
static const trace::FunctionSig _glVideoCaptureStreamParameterdvNV_sig = {2315, "glVideoCaptureStreamParameterdvNV", 4, _glVideoCaptureStreamParameterdvNV_args};

static const char * _glCopyImageSubDataNV_args[15] = {"srcName", "srcTarget", "srcLevel", "srcX", "srcY", "srcZ", "dstName", "dstTarget", "dstLevel", "dstX", "dstY", "dstZ", "width", "height", "depth"};
static const trace::FunctionSig _glCopyImageSubDataNV_sig = {2316, "glCopyImageSubDataNV", 15, _glCopyImageSubDataNV_args};

static const char * _glUseShaderProgramEXT_args[2] = {"type", "program"};
static const trace::FunctionSig _glUseShaderProgramEXT_sig = {2317, "glUseShaderProgramEXT", 2, _glUseShaderProgramEXT_args};

static const char * _glActiveProgramEXT_args[1] = {"program"};
static const trace::FunctionSig _glActiveProgramEXT_sig = {2318, "glActiveProgramEXT", 1, _glActiveProgramEXT_args};

static const char * _glCreateShaderProgramEXT_args[2] = {"type", "string"};
static const trace::FunctionSig _glCreateShaderProgramEXT_sig = {2319, "glCreateShaderProgramEXT", 2, _glCreateShaderProgramEXT_args};

static const char * _glMakeBufferResidentNV_args[2] = {"target", "access"};
static const trace::FunctionSig _glMakeBufferResidentNV_sig = {2320, "glMakeBufferResidentNV", 2, _glMakeBufferResidentNV_args};

static const char * _glMakeBufferNonResidentNV_args[1] = {"target"};
static const trace::FunctionSig _glMakeBufferNonResidentNV_sig = {2321, "glMakeBufferNonResidentNV", 1, _glMakeBufferNonResidentNV_args};

static const char * _glIsBufferResidentNV_args[1] = {"target"};
static const trace::FunctionSig _glIsBufferResidentNV_sig = {2322, "glIsBufferResidentNV", 1, _glIsBufferResidentNV_args};

static const char * _glMakeNamedBufferResidentNV_args[2] = {"buffer", "access"};
static const trace::FunctionSig _glMakeNamedBufferResidentNV_sig = {2323, "glMakeNamedBufferResidentNV", 2, _glMakeNamedBufferResidentNV_args};

static const char * _glMakeNamedBufferNonResidentNV_args[1] = {"buffer"};
static const trace::FunctionSig _glMakeNamedBufferNonResidentNV_sig = {2324, "glMakeNamedBufferNonResidentNV", 1, _glMakeNamedBufferNonResidentNV_args};

static const char * _glIsNamedBufferResidentNV_args[1] = {"buffer"};
static const trace::FunctionSig _glIsNamedBufferResidentNV_sig = {2325, "glIsNamedBufferResidentNV", 1, _glIsNamedBufferResidentNV_args};

static const char * _glGetBufferParameterui64vNV_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferParameterui64vNV_sig = {2326, "glGetBufferParameterui64vNV", 3, _glGetBufferParameterui64vNV_args};

static const char * _glGetNamedBufferParameterui64vNV_args[3] = {"buffer", "pname", "params"};
static const trace::FunctionSig _glGetNamedBufferParameterui64vNV_sig = {2327, "glGetNamedBufferParameterui64vNV", 3, _glGetNamedBufferParameterui64vNV_args};

static const char * _glGetIntegerui64vNV_args[2] = {"value", "result"};
static const trace::FunctionSig _glGetIntegerui64vNV_sig = {2328, "glGetIntegerui64vNV", 2, _glGetIntegerui64vNV_args};

static const char * _glUniformui64NV_args[2] = {"location", "value"};
static const trace::FunctionSig _glUniformui64NV_sig = {2329, "glUniformui64NV", 2, _glUniformui64NV_args};

static const char * _glUniformui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniformui64vNV_sig = {2330, "glUniformui64vNV", 3, _glUniformui64vNV_args};

static const char * _glGetUniformui64vNV_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformui64vNV_sig = {2331, "glGetUniformui64vNV", 3, _glGetUniformui64vNV_args};

static const char * _glProgramUniformui64NV_args[3] = {"program", "location", "value"};
static const trace::FunctionSig _glProgramUniformui64NV_sig = {2332, "glProgramUniformui64NV", 3, _glProgramUniformui64NV_args};

static const char * _glProgramUniformui64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniformui64vNV_sig = {2333, "glProgramUniformui64vNV", 4, _glProgramUniformui64vNV_args};

static const char * _glBufferAddressRangeNV_args[4] = {"pname", "index", "address", "length"};
static const trace::FunctionSig _glBufferAddressRangeNV_sig = {2334, "glBufferAddressRangeNV", 4, _glBufferAddressRangeNV_args};

static const char * _glVertexFormatNV_args[3] = {"size", "type", "stride"};
static const trace::FunctionSig _glVertexFormatNV_sig = {2335, "glVertexFormatNV", 3, _glVertexFormatNV_args};

static const char * _glNormalFormatNV_args[2] = {"type", "stride"};
static const trace::FunctionSig _glNormalFormatNV_sig = {2336, "glNormalFormatNV", 2, _glNormalFormatNV_args};

static const char * _glColorFormatNV_args[3] = {"size", "type", "stride"};
static const trace::FunctionSig _glColorFormatNV_sig = {2337, "glColorFormatNV", 3, _glColorFormatNV_args};

static const char * _glIndexFormatNV_args[2] = {"type", "stride"};
static const trace::FunctionSig _glIndexFormatNV_sig = {2338, "glIndexFormatNV", 2, _glIndexFormatNV_args};

static const char * _glTexCoordFormatNV_args[3] = {"size", "type", "stride"};
static const trace::FunctionSig _glTexCoordFormatNV_sig = {2339, "glTexCoordFormatNV", 3, _glTexCoordFormatNV_args};

static const char * _glEdgeFlagFormatNV_args[1] = {"stride"};
static const trace::FunctionSig _glEdgeFlagFormatNV_sig = {2340, "glEdgeFlagFormatNV", 1, _glEdgeFlagFormatNV_args};

static const char * _glSecondaryColorFormatNV_args[3] = {"size", "type", "stride"};
static const trace::FunctionSig _glSecondaryColorFormatNV_sig = {2341, "glSecondaryColorFormatNV", 3, _glSecondaryColorFormatNV_args};

static const char * _glFogCoordFormatNV_args[2] = {"type", "stride"};
static const trace::FunctionSig _glFogCoordFormatNV_sig = {2342, "glFogCoordFormatNV", 2, _glFogCoordFormatNV_args};

static const char * _glVertexAttribFormatNV_args[5] = {"index", "size", "type", "normalized", "stride"};
static const trace::FunctionSig _glVertexAttribFormatNV_sig = {2343, "glVertexAttribFormatNV", 5, _glVertexAttribFormatNV_args};

static const char * _glVertexAttribIFormatNV_args[4] = {"index", "size", "type", "stride"};
static const trace::FunctionSig _glVertexAttribIFormatNV_sig = {2344, "glVertexAttribIFormatNV", 4, _glVertexAttribIFormatNV_args};

static const char * _glGetIntegerui64i_vNV_args[3] = {"value", "index", "result"};
static const trace::FunctionSig _glGetIntegerui64i_vNV_sig = {2345, "glGetIntegerui64i_vNV", 3, _glGetIntegerui64i_vNV_args};

static const char ** _glTextureBarrierNV_args = NULL;
static const trace::FunctionSig _glTextureBarrierNV_sig = {2346, "glTextureBarrierNV", 0, _glTextureBarrierNV_args};

static const char * _glBindImageTextureEXT_args[7] = {"index", "texture", "level", "layered", "layer", "access", "format"};
static const trace::FunctionSig _glBindImageTextureEXT_sig = {2347, "glBindImageTextureEXT", 7, _glBindImageTextureEXT_args};

static const char * _glMemoryBarrierEXT_args[1] = {"barriers"};
static const trace::FunctionSig _glMemoryBarrierEXT_sig = {2348, "glMemoryBarrierEXT", 1, _glMemoryBarrierEXT_args};

static const char * _glVertexAttribL1dEXT_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribL1dEXT_sig = {2349, "glVertexAttribL1dEXT", 2, _glVertexAttribL1dEXT_args};

static const char * _glVertexAttribL2dEXT_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribL2dEXT_sig = {2350, "glVertexAttribL2dEXT", 3, _glVertexAttribL2dEXT_args};

static const char * _glVertexAttribL3dEXT_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribL3dEXT_sig = {2351, "glVertexAttribL3dEXT", 4, _glVertexAttribL3dEXT_args};

static const char * _glVertexAttribL4dEXT_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribL4dEXT_sig = {2352, "glVertexAttribL4dEXT", 5, _glVertexAttribL4dEXT_args};

static const char * _glVertexAttribL1dvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL1dvEXT_sig = {2353, "glVertexAttribL1dvEXT", 2, _glVertexAttribL1dvEXT_args};

static const char * _glVertexAttribL2dvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL2dvEXT_sig = {2354, "glVertexAttribL2dvEXT", 2, _glVertexAttribL2dvEXT_args};

static const char * _glVertexAttribL3dvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL3dvEXT_sig = {2355, "glVertexAttribL3dvEXT", 2, _glVertexAttribL3dvEXT_args};

static const char * _glVertexAttribL4dvEXT_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL4dvEXT_sig = {2356, "glVertexAttribL4dvEXT", 2, _glVertexAttribL4dvEXT_args};

static const char * _glVertexAttribLPointerEXT_args[5] = {"index", "size", "type", "stride", "pointer"};
static const trace::FunctionSig _glVertexAttribLPointerEXT_sig = {2357, "glVertexAttribLPointerEXT", 5, _glVertexAttribLPointerEXT_args};

static const char * _glGetVertexAttribLdvEXT_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribLdvEXT_sig = {2358, "glGetVertexAttribLdvEXT", 3, _glGetVertexAttribLdvEXT_args};

static const char * _glVertexArrayVertexAttribLOffsetEXT_args[7] = {"vaobj", "buffer", "index", "size", "type", "stride", "offset"};
static const trace::FunctionSig _glVertexArrayVertexAttribLOffsetEXT_sig = {2359, "glVertexArrayVertexAttribLOffsetEXT", 7, _glVertexArrayVertexAttribLOffsetEXT_args};

static const char * _glProgramSubroutineParametersuivNV_args[3] = {"target", "count", "params"};
static const trace::FunctionSig _glProgramSubroutineParametersuivNV_sig = {2360, "glProgramSubroutineParametersuivNV", 3, _glProgramSubroutineParametersuivNV_args};

static const char * _glGetProgramSubroutineParameteruivNV_args[3] = {"target", "index", "param"};
static const trace::FunctionSig _glGetProgramSubroutineParameteruivNV_sig = {2361, "glGetProgramSubroutineParameteruivNV", 3, _glGetProgramSubroutineParameteruivNV_args};

static const char * _glUniform1i64NV_args[2] = {"location", "x"};
static const trace::FunctionSig _glUniform1i64NV_sig = {2362, "glUniform1i64NV", 2, _glUniform1i64NV_args};

static const char * _glUniform2i64NV_args[3] = {"location", "x", "y"};
static const trace::FunctionSig _glUniform2i64NV_sig = {2363, "glUniform2i64NV", 3, _glUniform2i64NV_args};

static const char * _glUniform3i64NV_args[4] = {"location", "x", "y", "z"};
static const trace::FunctionSig _glUniform3i64NV_sig = {2364, "glUniform3i64NV", 4, _glUniform3i64NV_args};

static const char * _glUniform4i64NV_args[5] = {"location", "x", "y", "z", "w"};
static const trace::FunctionSig _glUniform4i64NV_sig = {2365, "glUniform4i64NV", 5, _glUniform4i64NV_args};

static const char * _glUniform1i64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1i64vNV_sig = {2366, "glUniform1i64vNV", 3, _glUniform1i64vNV_args};

static const char * _glUniform2i64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2i64vNV_sig = {2367, "glUniform2i64vNV", 3, _glUniform2i64vNV_args};

static const char * _glUniform3i64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3i64vNV_sig = {2368, "glUniform3i64vNV", 3, _glUniform3i64vNV_args};

static const char * _glUniform4i64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4i64vNV_sig = {2369, "glUniform4i64vNV", 3, _glUniform4i64vNV_args};

static const char * _glUniform1ui64NV_args[2] = {"location", "x"};
static const trace::FunctionSig _glUniform1ui64NV_sig = {2370, "glUniform1ui64NV", 2, _glUniform1ui64NV_args};

static const char * _glUniform2ui64NV_args[3] = {"location", "x", "y"};
static const trace::FunctionSig _glUniform2ui64NV_sig = {2371, "glUniform2ui64NV", 3, _glUniform2ui64NV_args};

static const char * _glUniform3ui64NV_args[4] = {"location", "x", "y", "z"};
static const trace::FunctionSig _glUniform3ui64NV_sig = {2372, "glUniform3ui64NV", 4, _glUniform3ui64NV_args};

static const char * _glUniform4ui64NV_args[5] = {"location", "x", "y", "z", "w"};
static const trace::FunctionSig _glUniform4ui64NV_sig = {2373, "glUniform4ui64NV", 5, _glUniform4ui64NV_args};

static const char * _glUniform1ui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform1ui64vNV_sig = {2374, "glUniform1ui64vNV", 3, _glUniform1ui64vNV_args};

static const char * _glUniform2ui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform2ui64vNV_sig = {2375, "glUniform2ui64vNV", 3, _glUniform2ui64vNV_args};

static const char * _glUniform3ui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform3ui64vNV_sig = {2376, "glUniform3ui64vNV", 3, _glUniform3ui64vNV_args};

static const char * _glUniform4ui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniform4ui64vNV_sig = {2377, "glUniform4ui64vNV", 3, _glUniform4ui64vNV_args};

static const char * _glGetUniformi64vNV_args[3] = {"program", "location", "params"};
static const trace::FunctionSig _glGetUniformi64vNV_sig = {2378, "glGetUniformi64vNV", 3, _glGetUniformi64vNV_args};

static const char * _glProgramUniform1i64NV_args[3] = {"program", "location", "x"};
static const trace::FunctionSig _glProgramUniform1i64NV_sig = {2379, "glProgramUniform1i64NV", 3, _glProgramUniform1i64NV_args};

static const char * _glProgramUniform2i64NV_args[4] = {"program", "location", "x", "y"};
static const trace::FunctionSig _glProgramUniform2i64NV_sig = {2380, "glProgramUniform2i64NV", 4, _glProgramUniform2i64NV_args};

static const char * _glProgramUniform3i64NV_args[5] = {"program", "location", "x", "y", "z"};
static const trace::FunctionSig _glProgramUniform3i64NV_sig = {2381, "glProgramUniform3i64NV", 5, _glProgramUniform3i64NV_args};

static const char * _glProgramUniform4i64NV_args[6] = {"program", "location", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramUniform4i64NV_sig = {2382, "glProgramUniform4i64NV", 6, _glProgramUniform4i64NV_args};

static const char * _glProgramUniform1i64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1i64vNV_sig = {2383, "glProgramUniform1i64vNV", 4, _glProgramUniform1i64vNV_args};

static const char * _glProgramUniform2i64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2i64vNV_sig = {2384, "glProgramUniform2i64vNV", 4, _glProgramUniform2i64vNV_args};

static const char * _glProgramUniform3i64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3i64vNV_sig = {2385, "glProgramUniform3i64vNV", 4, _glProgramUniform3i64vNV_args};

static const char * _glProgramUniform4i64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4i64vNV_sig = {2386, "glProgramUniform4i64vNV", 4, _glProgramUniform4i64vNV_args};

static const char * _glProgramUniform1ui64NV_args[3] = {"program", "location", "x"};
static const trace::FunctionSig _glProgramUniform1ui64NV_sig = {2387, "glProgramUniform1ui64NV", 3, _glProgramUniform1ui64NV_args};

static const char * _glProgramUniform2ui64NV_args[4] = {"program", "location", "x", "y"};
static const trace::FunctionSig _glProgramUniform2ui64NV_sig = {2388, "glProgramUniform2ui64NV", 4, _glProgramUniform2ui64NV_args};

static const char * _glProgramUniform3ui64NV_args[5] = {"program", "location", "x", "y", "z"};
static const trace::FunctionSig _glProgramUniform3ui64NV_sig = {2389, "glProgramUniform3ui64NV", 5, _glProgramUniform3ui64NV_args};

static const char * _glProgramUniform4ui64NV_args[6] = {"program", "location", "x", "y", "z", "w"};
static const trace::FunctionSig _glProgramUniform4ui64NV_sig = {2390, "glProgramUniform4ui64NV", 6, _glProgramUniform4ui64NV_args};

static const char * _glProgramUniform1ui64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform1ui64vNV_sig = {2391, "glProgramUniform1ui64vNV", 4, _glProgramUniform1ui64vNV_args};

static const char * _glProgramUniform2ui64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform2ui64vNV_sig = {2392, "glProgramUniform2ui64vNV", 4, _glProgramUniform2ui64vNV_args};

static const char * _glProgramUniform3ui64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform3ui64vNV_sig = {2393, "glProgramUniform3ui64vNV", 4, _glProgramUniform3ui64vNV_args};

static const char * _glProgramUniform4ui64vNV_args[4] = {"program", "location", "count", "value"};
static const trace::FunctionSig _glProgramUniform4ui64vNV_sig = {2394, "glProgramUniform4ui64vNV", 4, _glProgramUniform4ui64vNV_args};

static const char * _glVertexAttribL1i64NV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribL1i64NV_sig = {2395, "glVertexAttribL1i64NV", 2, _glVertexAttribL1i64NV_args};

static const char * _glVertexAttribL2i64NV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribL2i64NV_sig = {2396, "glVertexAttribL2i64NV", 3, _glVertexAttribL2i64NV_args};

static const char * _glVertexAttribL3i64NV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribL3i64NV_sig = {2397, "glVertexAttribL3i64NV", 4, _glVertexAttribL3i64NV_args};

static const char * _glVertexAttribL4i64NV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribL4i64NV_sig = {2398, "glVertexAttribL4i64NV", 5, _glVertexAttribL4i64NV_args};

static const char * _glVertexAttribL1i64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL1i64vNV_sig = {2399, "glVertexAttribL1i64vNV", 2, _glVertexAttribL1i64vNV_args};

static const char * _glVertexAttribL2i64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL2i64vNV_sig = {2400, "glVertexAttribL2i64vNV", 2, _glVertexAttribL2i64vNV_args};

static const char * _glVertexAttribL3i64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL3i64vNV_sig = {2401, "glVertexAttribL3i64vNV", 2, _glVertexAttribL3i64vNV_args};

static const char * _glVertexAttribL4i64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL4i64vNV_sig = {2402, "glVertexAttribL4i64vNV", 2, _glVertexAttribL4i64vNV_args};

static const char * _glVertexAttribL1ui64NV_args[2] = {"index", "x"};
static const trace::FunctionSig _glVertexAttribL1ui64NV_sig = {2403, "glVertexAttribL1ui64NV", 2, _glVertexAttribL1ui64NV_args};

static const char * _glVertexAttribL2ui64NV_args[3] = {"index", "x", "y"};
static const trace::FunctionSig _glVertexAttribL2ui64NV_sig = {2404, "glVertexAttribL2ui64NV", 3, _glVertexAttribL2ui64NV_args};

static const char * _glVertexAttribL3ui64NV_args[4] = {"index", "x", "y", "z"};
static const trace::FunctionSig _glVertexAttribL3ui64NV_sig = {2405, "glVertexAttribL3ui64NV", 4, _glVertexAttribL3ui64NV_args};

static const char * _glVertexAttribL4ui64NV_args[5] = {"index", "x", "y", "z", "w"};
static const trace::FunctionSig _glVertexAttribL4ui64NV_sig = {2406, "glVertexAttribL4ui64NV", 5, _glVertexAttribL4ui64NV_args};

static const char * _glVertexAttribL1ui64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL1ui64vNV_sig = {2407, "glVertexAttribL1ui64vNV", 2, _glVertexAttribL1ui64vNV_args};

static const char * _glVertexAttribL2ui64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL2ui64vNV_sig = {2408, "glVertexAttribL2ui64vNV", 2, _glVertexAttribL2ui64vNV_args};

static const char * _glVertexAttribL3ui64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL3ui64vNV_sig = {2409, "glVertexAttribL3ui64vNV", 2, _glVertexAttribL3ui64vNV_args};

static const char * _glVertexAttribL4ui64vNV_args[2] = {"index", "v"};
static const trace::FunctionSig _glVertexAttribL4ui64vNV_sig = {2410, "glVertexAttribL4ui64vNV", 2, _glVertexAttribL4ui64vNV_args};

static const char * _glGetVertexAttribLi64vNV_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribLi64vNV_sig = {2411, "glGetVertexAttribLi64vNV", 3, _glGetVertexAttribLi64vNV_args};

static const char * _glGetVertexAttribLui64vNV_args[3] = {"index", "pname", "params"};
static const trace::FunctionSig _glGetVertexAttribLui64vNV_sig = {2412, "glGetVertexAttribLui64vNV", 3, _glGetVertexAttribLui64vNV_args};

static const char * _glVertexAttribLFormatNV_args[4] = {"index", "size", "type", "stride"};
static const trace::FunctionSig _glVertexAttribLFormatNV_sig = {2413, "glVertexAttribLFormatNV", 4, _glVertexAttribLFormatNV_args};

static const char * _glGenNamesAMD_args[3] = {"identifier", "num", "names"};
static const trace::FunctionSig _glGenNamesAMD_sig = {2414, "glGenNamesAMD", 3, _glGenNamesAMD_args};

static const char * _glDeleteNamesAMD_args[3] = {"identifier", "num", "names"};
static const trace::FunctionSig _glDeleteNamesAMD_sig = {2415, "glDeleteNamesAMD", 3, _glDeleteNamesAMD_args};

static const char * _glIsNameAMD_args[2] = {"identifier", "name"};
static const trace::FunctionSig _glIsNameAMD_sig = {2416, "glIsNameAMD", 2, _glIsNameAMD_args};

static const char * _glDebugMessageEnableAMD_args[5] = {"category", "severity", "count", "ids", "enabled"};
static const trace::FunctionSig _glDebugMessageEnableAMD_sig = {2417, "glDebugMessageEnableAMD", 5, _glDebugMessageEnableAMD_args};

static const char * _glDebugMessageInsertAMD_args[5] = {"category", "severity", "id", "length", "buf"};
static const trace::FunctionSig _glDebugMessageInsertAMD_sig = {2418, "glDebugMessageInsertAMD", 5, _glDebugMessageInsertAMD_args};

static const char * _glDebugMessageCallbackAMD_args[2] = {"callback", "userParam"};
static const trace::FunctionSig _glDebugMessageCallbackAMD_sig = {2419, "glDebugMessageCallbackAMD", 2, _glDebugMessageCallbackAMD_args};

static const char * _glGetDebugMessageLogAMD_args[7] = {"count", "bufsize", "categories", "severities", "ids", "lengths", "message"};
static const trace::FunctionSig _glGetDebugMessageLogAMD_sig = {2420, "glGetDebugMessageLogAMD", 7, _glGetDebugMessageLogAMD_args};

static const char * _glTexImage2DMultisampleCoverageNV_args[7] = {"target", "coverageSamples", "colorSamples", "internalFormat", "width", "height", "fixedSampleLocations"};
static const trace::FunctionSig _glTexImage2DMultisampleCoverageNV_sig = {2421, "glTexImage2DMultisampleCoverageNV", 7, _glTexImage2DMultisampleCoverageNV_args};

static const char * _glTexImage3DMultisampleCoverageNV_args[8] = {"target", "coverageSamples", "colorSamples", "internalFormat", "width", "height", "depth", "fixedSampleLocations"};
static const trace::FunctionSig _glTexImage3DMultisampleCoverageNV_sig = {2422, "glTexImage3DMultisampleCoverageNV", 8, _glTexImage3DMultisampleCoverageNV_args};

static const char * _glTextureImage2DMultisampleNV_args[7] = {"texture", "target", "samples", "internalFormat", "width", "height", "fixedSampleLocations"};
static const trace::FunctionSig _glTextureImage2DMultisampleNV_sig = {2423, "glTextureImage2DMultisampleNV", 7, _glTextureImage2DMultisampleNV_args};

static const char * _glTextureImage3DMultisampleNV_args[8] = {"texture", "target", "samples", "internalFormat", "width", "height", "depth", "fixedSampleLocations"};
static const trace::FunctionSig _glTextureImage3DMultisampleNV_sig = {2424, "glTextureImage3DMultisampleNV", 8, _glTextureImage3DMultisampleNV_args};

static const char * _glTextureImage2DMultisampleCoverageNV_args[8] = {"texture", "target", "coverageSamples", "colorSamples", "internalFormat", "width", "height", "fixedSampleLocations"};
static const trace::FunctionSig _glTextureImage2DMultisampleCoverageNV_sig = {2425, "glTextureImage2DMultisampleCoverageNV", 8, _glTextureImage2DMultisampleCoverageNV_args};

static const char * _glTextureImage3DMultisampleCoverageNV_args[9] = {"texture", "target", "coverageSamples", "colorSamples", "internalFormat", "width", "height", "depth", "fixedSampleLocations"};
static const trace::FunctionSig _glTextureImage3DMultisampleCoverageNV_sig = {2426, "glTextureImage3DMultisampleCoverageNV", 9, _glTextureImage3DMultisampleCoverageNV_args};

static const char * _glSetMultisamplefvAMD_args[3] = {"pname", "index", "val"};
static const trace::FunctionSig _glSetMultisamplefvAMD_sig = {2427, "glSetMultisamplefvAMD", 3, _glSetMultisamplefvAMD_args};

static const char * _glImportSyncEXT_args[3] = {"external_sync_type", "external_sync", "flags"};
static const trace::FunctionSig _glImportSyncEXT_sig = {2428, "glImportSyncEXT", 3, _glImportSyncEXT_args};

static const char * _glMultiDrawArraysIndirectAMD_args[4] = {"mode", "indirect", "primcount", "stride"};
static const trace::FunctionSig _glMultiDrawArraysIndirectAMD_sig = {2429, "glMultiDrawArraysIndirectAMD", 4, _glMultiDrawArraysIndirectAMD_args};

static const char * _glMultiDrawElementsIndirectAMD_args[5] = {"mode", "type", "indirect", "primcount", "stride"};
static const trace::FunctionSig _glMultiDrawElementsIndirectAMD_sig = {2430, "glMultiDrawElementsIndirectAMD", 5, _glMultiDrawElementsIndirectAMD_args};

static const char * _glStencilOpValueAMD_args[2] = {"face", "value"};
static const trace::FunctionSig _glStencilOpValueAMD_sig = {2431, "glStencilOpValueAMD", 2, _glStencilOpValueAMD_args};

static const char * _glGetTextureHandleNV_args[1] = {"texture"};
static const trace::FunctionSig _glGetTextureHandleNV_sig = {2432, "glGetTextureHandleNV", 1, _glGetTextureHandleNV_args};

static const char * _glGetTextureSamplerHandleNV_args[2] = {"texture", "sampler"};
static const trace::FunctionSig _glGetTextureSamplerHandleNV_sig = {2433, "glGetTextureSamplerHandleNV", 2, _glGetTextureSamplerHandleNV_args};

static const char * _glMakeTextureHandleResidentNV_args[1] = {"handle"};
static const trace::FunctionSig _glMakeTextureHandleResidentNV_sig = {2434, "glMakeTextureHandleResidentNV", 1, _glMakeTextureHandleResidentNV_args};

static const char * _glMakeTextureHandleNonResidentNV_args[1] = {"handle"};
static const trace::FunctionSig _glMakeTextureHandleNonResidentNV_sig = {2435, "glMakeTextureHandleNonResidentNV", 1, _glMakeTextureHandleNonResidentNV_args};

static const char * _glGetImageHandleNV_args[5] = {"texture", "level", "layered", "layer", "format"};
static const trace::FunctionSig _glGetImageHandleNV_sig = {2436, "glGetImageHandleNV", 5, _glGetImageHandleNV_args};

static const char * _glMakeImageHandleResidentNV_args[2] = {"handle", "access"};
static const trace::FunctionSig _glMakeImageHandleResidentNV_sig = {2437, "glMakeImageHandleResidentNV", 2, _glMakeImageHandleResidentNV_args};

static const char * _glMakeImageHandleNonResidentNV_args[1] = {"handle"};
static const trace::FunctionSig _glMakeImageHandleNonResidentNV_sig = {2438, "glMakeImageHandleNonResidentNV", 1, _glMakeImageHandleNonResidentNV_args};

static const char * _glUniformHandleui64NV_args[2] = {"location", "value"};
static const trace::FunctionSig _glUniformHandleui64NV_sig = {2439, "glUniformHandleui64NV", 2, _glUniformHandleui64NV_args};

static const char * _glUniformHandleui64vNV_args[3] = {"location", "count", "value"};
static const trace::FunctionSig _glUniformHandleui64vNV_sig = {2440, "glUniformHandleui64vNV", 3, _glUniformHandleui64vNV_args};

static const char * _glProgramUniformHandleui64NV_args[3] = {"program", "location", "value"};
static const trace::FunctionSig _glProgramUniformHandleui64NV_sig = {2441, "glProgramUniformHandleui64NV", 3, _glProgramUniformHandleui64NV_args};

static const char * _glProgramUniformHandleui64vNV_args[4] = {"program", "location", "count", "values"};
static const trace::FunctionSig _glProgramUniformHandleui64vNV_sig = {2442, "glProgramUniformHandleui64vNV", 4, _glProgramUniformHandleui64vNV_args};

static const char * _glIsTextureHandleResidentNV_args[1] = {"handle"};
static const trace::FunctionSig _glIsTextureHandleResidentNV_sig = {2443, "glIsTextureHandleResidentNV", 1, _glIsTextureHandleResidentNV_args};

static const char * _glIsImageHandleResidentNV_args[1] = {"handle"};
static const trace::FunctionSig _glIsImageHandleResidentNV_sig = {2444, "glIsImageHandleResidentNV", 1, _glIsImageHandleResidentNV_args};

static const char * _glBeginConditionalRenderNVX_args[1] = {"id"};
static const trace::FunctionSig _glBeginConditionalRenderNVX_sig = {2445, "glBeginConditionalRenderNVX", 1, _glBeginConditionalRenderNVX_args};

static const char ** _glEndConditionalRenderNVX_args = NULL;
static const trace::FunctionSig _glEndConditionalRenderNVX_sig = {2446, "glEndConditionalRenderNVX", 0, _glEndConditionalRenderNVX_args};

static const char * _glTexStorageSparseAMD_args[7] = {"target", "internalFormat", "width", "height", "depth", "layers", "flags"};
static const trace::FunctionSig _glTexStorageSparseAMD_sig = {2447, "glTexStorageSparseAMD", 7, _glTexStorageSparseAMD_args};

static const char * _glTextureStorageSparseAMD_args[8] = {"texture", "target", "internalFormat", "width", "height", "depth", "layers", "flags"};
static const trace::FunctionSig _glTextureStorageSparseAMD_sig = {2448, "glTextureStorageSparseAMD", 8, _glTextureStorageSparseAMD_args};

static const char * _glDrawTextureNV_args[11] = {"texture", "sampler", "x0", "y0", "x1", "y1", "z", "s0", "t0", "s1", "t1"};
static const trace::FunctionSig _glDrawTextureNV_sig = {2449, "glDrawTextureNV", 11, _glDrawTextureNV_args};

static const char * _glNewBufferRegion_args[1] = {"type"};
static const trace::FunctionSig _glNewBufferRegion_sig = {2450, "glNewBufferRegion", 1, _glNewBufferRegion_args};

static const char * _glDeleteBufferRegion_args[1] = {"region"};
static const trace::FunctionSig _glDeleteBufferRegion_sig = {2451, "glDeleteBufferRegion", 1, _glDeleteBufferRegion_args};

static const char * _glReadBufferRegion_args[5] = {"region", "x", "y", "width", "height"};
static const trace::FunctionSig _glReadBufferRegion_sig = {2452, "glReadBufferRegion", 5, _glReadBufferRegion_args};

static const char * _glDrawBufferRegion_args[7] = {"region", "x", "y", "width", "height", "xDest", "yDest"};
static const trace::FunctionSig _glDrawBufferRegion_sig = {2453, "glDrawBufferRegion", 7, _glDrawBufferRegion_args};

static const char ** _glBufferRegionEnabled_args = NULL;
static const trace::FunctionSig _glBufferRegionEnabled_sig = {2454, "glBufferRegionEnabled", 0, _glBufferRegionEnabled_args};

static const char * _glAddSwapHintRectWIN_args[4] = {"x", "y", "width", "height"};
static const trace::FunctionSig _glAddSwapHintRectWIN_sig = {2455, "glAddSwapHintRectWIN", 4, _glAddSwapHintRectWIN_args};

static const char * _glFrustumf_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glFrustumf_sig = {2456, "glFrustumf", 6, _glFrustumf_args};

static const char * _glOrthof_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glOrthof_sig = {2457, "glOrthof", 6, _glOrthof_args};

static const char * _glClipPlanef_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glClipPlanef_sig = {2458, "glClipPlanef", 2, _glClipPlanef_args};

static const char * _glGetClipPlanef_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glGetClipPlanef_sig = {2459, "glGetClipPlanef", 2, _glGetClipPlanef_args};

static const char * _glAlphaFuncx_args[2] = {"func", "ref"};
static const trace::FunctionSig _glAlphaFuncx_sig = {2460, "glAlphaFuncx", 2, _glAlphaFuncx_args};

static const char * _glClearColorx_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glClearColorx_sig = {2461, "glClearColorx", 4, _glClearColorx_args};

static const char * _glClearDepthx_args[1] = {"depth"};
static const trace::FunctionSig _glClearDepthx_sig = {2462, "glClearDepthx", 1, _glClearDepthx_args};

static const char * _glColor4x_args[4] = {"red", "green", "blue", "alpha"};
static const trace::FunctionSig _glColor4x_sig = {2463, "glColor4x", 4, _glColor4x_args};

static const char * _glDepthRangex_args[2] = {"zNear", "zFar"};
static const trace::FunctionSig _glDepthRangex_sig = {2464, "glDepthRangex", 2, _glDepthRangex_args};

static const char * _glFogx_args[2] = {"pname", "param"};
static const trace::FunctionSig _glFogx_sig = {2465, "glFogx", 2, _glFogx_args};

static const char * _glFogxv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glFogxv_sig = {2466, "glFogxv", 2, _glFogxv_args};

static const char * _glFrustumx_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glFrustumx_sig = {2467, "glFrustumx", 6, _glFrustumx_args};

static const char * _glLightModelx_args[2] = {"pname", "param"};
static const trace::FunctionSig _glLightModelx_sig = {2468, "glLightModelx", 2, _glLightModelx_args};

static const char * _glLightModelxv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glLightModelxv_sig = {2469, "glLightModelxv", 2, _glLightModelxv_args};

static const char * _glLightx_args[3] = {"light", "pname", "param"};
static const trace::FunctionSig _glLightx_sig = {2470, "glLightx", 3, _glLightx_args};

static const char * _glLightxv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glLightxv_sig = {2471, "glLightxv", 3, _glLightxv_args};

static const char * _glLineWidthx_args[1] = {"width"};
static const trace::FunctionSig _glLineWidthx_sig = {2472, "glLineWidthx", 1, _glLineWidthx_args};

static const char * _glLoadMatrixx_args[1] = {"m"};
static const trace::FunctionSig _glLoadMatrixx_sig = {2473, "glLoadMatrixx", 1, _glLoadMatrixx_args};

static const char * _glMaterialx_args[3] = {"face", "pname", "param"};
static const trace::FunctionSig _glMaterialx_sig = {2474, "glMaterialx", 3, _glMaterialx_args};

static const char * _glMaterialxv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glMaterialxv_sig = {2475, "glMaterialxv", 3, _glMaterialxv_args};

static const char * _glMultMatrixx_args[1] = {"m"};
static const trace::FunctionSig _glMultMatrixx_sig = {2476, "glMultMatrixx", 1, _glMultMatrixx_args};

static const char * _glMultiTexCoord4x_args[5] = {"target", "s", "t", "r", "q"};
static const trace::FunctionSig _glMultiTexCoord4x_sig = {2477, "glMultiTexCoord4x", 5, _glMultiTexCoord4x_args};

static const char * _glNormal3x_args[3] = {"nx", "ny", "nz"};
static const trace::FunctionSig _glNormal3x_sig = {2478, "glNormal3x", 3, _glNormal3x_args};

static const char * _glOrthox_args[6] = {"left", "right", "bottom", "top", "zNear", "zFar"};
static const trace::FunctionSig _glOrthox_sig = {2479, "glOrthox", 6, _glOrthox_args};

static const char * _glPointSizex_args[1] = {"size"};
static const trace::FunctionSig _glPointSizex_sig = {2480, "glPointSizex", 1, _glPointSizex_args};

static const char * _glPolygonOffsetx_args[2] = {"factor", "units"};
static const trace::FunctionSig _glPolygonOffsetx_sig = {2481, "glPolygonOffsetx", 2, _glPolygonOffsetx_args};

static const char * _glRotatex_args[4] = {"angle", "x", "y", "z"};
static const trace::FunctionSig _glRotatex_sig = {2482, "glRotatex", 4, _glRotatex_args};

static const char * _glSampleCoveragex_args[2] = {"value", "invert"};
static const trace::FunctionSig _glSampleCoveragex_sig = {2483, "glSampleCoveragex", 2, _glSampleCoveragex_args};

static const char * _glScalex_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glScalex_sig = {2484, "glScalex", 3, _glScalex_args};

static const char * _glTexEnvx_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexEnvx_sig = {2485, "glTexEnvx", 3, _glTexEnvx_args};

static const char * _glTexEnvxv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexEnvxv_sig = {2486, "glTexEnvxv", 3, _glTexEnvxv_args};

static const char * _glTexParameterx_args[3] = {"target", "pname", "param"};
static const trace::FunctionSig _glTexParameterx_sig = {2487, "glTexParameterx", 3, _glTexParameterx_args};

static const char * _glTranslatex_args[3] = {"x", "y", "z"};
static const trace::FunctionSig _glTranslatex_sig = {2488, "glTranslatex", 3, _glTranslatex_args};

static const char * _glClipPlanex_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glClipPlanex_sig = {2489, "glClipPlanex", 2, _glClipPlanex_args};

static const char * _glGetClipPlanex_args[2] = {"plane", "equation"};
static const trace::FunctionSig _glGetClipPlanex_sig = {2490, "glGetClipPlanex", 2, _glGetClipPlanex_args};

static const char * _glGetFixedv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glGetFixedv_sig = {2491, "glGetFixedv", 2, _glGetFixedv_args};

static const char * _glGetLightxv_args[3] = {"light", "pname", "params"};
static const trace::FunctionSig _glGetLightxv_sig = {2492, "glGetLightxv", 3, _glGetLightxv_args};

static const char * _glGetMaterialxv_args[3] = {"face", "pname", "params"};
static const trace::FunctionSig _glGetMaterialxv_sig = {2493, "glGetMaterialxv", 3, _glGetMaterialxv_args};

static const char * _glGetTexEnvxv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexEnvxv_sig = {2494, "glGetTexEnvxv", 3, _glGetTexEnvxv_args};

static const char * _glGetTexParameterxv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetTexParameterxv_sig = {2495, "glGetTexParameterxv", 3, _glGetTexParameterxv_args};

static const char * _glPointParameterx_args[2] = {"pname", "param"};
static const trace::FunctionSig _glPointParameterx_sig = {2496, "glPointParameterx", 2, _glPointParameterx_args};

static const char * _glPointParameterxv_args[2] = {"pname", "params"};
static const trace::FunctionSig _glPointParameterxv_sig = {2497, "glPointParameterxv", 2, _glPointParameterxv_args};

static const char * _glTexParameterxv_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glTexParameterxv_sig = {2498, "glTexParameterxv", 3, _glTexParameterxv_args};

static const char * _glBlendEquationSeparateOES_args[2] = {"modeRGB", "modeAlpha"};
static const trace::FunctionSig _glBlendEquationSeparateOES_sig = {2499, "glBlendEquationSeparateOES", 2, _glBlendEquationSeparateOES_args};

static const char * _glBlendFuncSeparateOES_args[4] = {"sfactorRGB", "dfactorRGB", "sfactorAlpha", "dfactorAlpha"};
static const trace::FunctionSig _glBlendFuncSeparateOES_sig = {2500, "glBlendFuncSeparateOES", 4, _glBlendFuncSeparateOES_args};

static const char * _glBlendEquationOES_args[1] = {"mode"};
static const trace::FunctionSig _glBlendEquationOES_sig = {2501, "glBlendEquationOES", 1, _glBlendEquationOES_args};

static const char * _glIsRenderbufferOES_args[1] = {"renderbuffer"};
static const trace::FunctionSig _glIsRenderbufferOES_sig = {2502, "glIsRenderbufferOES", 1, _glIsRenderbufferOES_args};

static const char * _glBindRenderbufferOES_args[2] = {"target", "renderbuffer"};
static const trace::FunctionSig _glBindRenderbufferOES_sig = {2503, "glBindRenderbufferOES", 2, _glBindRenderbufferOES_args};

static const char * _glDeleteRenderbuffersOES_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glDeleteRenderbuffersOES_sig = {2504, "glDeleteRenderbuffersOES", 2, _glDeleteRenderbuffersOES_args};

static const char * _glGenRenderbuffersOES_args[2] = {"n", "renderbuffers"};
static const trace::FunctionSig _glGenRenderbuffersOES_sig = {2505, "glGenRenderbuffersOES", 2, _glGenRenderbuffersOES_args};

static const char * _glRenderbufferStorageOES_args[4] = {"target", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageOES_sig = {2506, "glRenderbufferStorageOES", 4, _glRenderbufferStorageOES_args};

static const char * _glGetRenderbufferParameterivOES_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetRenderbufferParameterivOES_sig = {2507, "glGetRenderbufferParameterivOES", 3, _glGetRenderbufferParameterivOES_args};

static const char * _glIsFramebufferOES_args[1] = {"framebuffer"};
static const trace::FunctionSig _glIsFramebufferOES_sig = {2508, "glIsFramebufferOES", 1, _glIsFramebufferOES_args};

static const char * _glBindFramebufferOES_args[2] = {"target", "framebuffer"};
static const trace::FunctionSig _glBindFramebufferOES_sig = {2509, "glBindFramebufferOES", 2, _glBindFramebufferOES_args};

static const char * _glDeleteFramebuffersOES_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glDeleteFramebuffersOES_sig = {2510, "glDeleteFramebuffersOES", 2, _glDeleteFramebuffersOES_args};

static const char * _glGenFramebuffersOES_args[2] = {"n", "framebuffers"};
static const trace::FunctionSig _glGenFramebuffersOES_sig = {2511, "glGenFramebuffersOES", 2, _glGenFramebuffersOES_args};

static const char * _glCheckFramebufferStatusOES_args[1] = {"target"};
static const trace::FunctionSig _glCheckFramebufferStatusOES_sig = {2512, "glCheckFramebufferStatusOES", 1, _glCheckFramebufferStatusOES_args};

static const char * _glFramebufferTexture2DOES_args[5] = {"target", "attachment", "textarget", "texture", "level"};
static const trace::FunctionSig _glFramebufferTexture2DOES_sig = {2513, "glFramebufferTexture2DOES", 5, _glFramebufferTexture2DOES_args};

static const char * _glFramebufferRenderbufferOES_args[4] = {"target", "attachment", "renderbuffertarget", "renderbuffer"};
static const trace::FunctionSig _glFramebufferRenderbufferOES_sig = {2514, "glFramebufferRenderbufferOES", 4, _glFramebufferRenderbufferOES_args};

static const char * _glGetFramebufferAttachmentParameterivOES_args[4] = {"target", "attachment", "pname", "params"};
static const trace::FunctionSig _glGetFramebufferAttachmentParameterivOES_sig = {2515, "glGetFramebufferAttachmentParameterivOES", 4, _glGetFramebufferAttachmentParameterivOES_args};

static const char * _glGenerateMipmapOES_args[1] = {"target"};
static const trace::FunctionSig _glGenerateMipmapOES_sig = {2516, "glGenerateMipmapOES", 1, _glGenerateMipmapOES_args};

static const char * _glCurrentPaletteMatrixOES_args[1] = {"index"};
static const trace::FunctionSig _glCurrentPaletteMatrixOES_sig = {2517, "glCurrentPaletteMatrixOES", 1, _glCurrentPaletteMatrixOES_args};

static const char ** _glLoadPaletteFromModelViewMatrixOES_args = NULL;
static const trace::FunctionSig _glLoadPaletteFromModelViewMatrixOES_sig = {2518, "glLoadPaletteFromModelViewMatrixOES", 0, _glLoadPaletteFromModelViewMatrixOES_args};

static const char * _glMatrixIndexPointerOES_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glMatrixIndexPointerOES_sig = {2519, "glMatrixIndexPointerOES", 4, _glMatrixIndexPointerOES_args};

static const char * _glWeightPointerOES_args[4] = {"size", "type", "stride", "pointer"};
static const trace::FunctionSig _glWeightPointerOES_sig = {2520, "glWeightPointerOES", 4, _glWeightPointerOES_args};

static const char * _glPointSizePointerOES_args[3] = {"type", "stride", "ptr"};
static const trace::FunctionSig _glPointSizePointerOES_sig = {2521, "glPointSizePointerOES", 3, _glPointSizePointerOES_args};

static const char * _glQueryMatrixxOES_args[2] = {"mantissa", "exponent"};
static const trace::FunctionSig _glQueryMatrixxOES_sig = {2522, "glQueryMatrixxOES", 2, _glQueryMatrixxOES_args};

static const char * _glTexGenfOES_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGenfOES_sig = {2523, "glTexGenfOES", 3, _glTexGenfOES_args};

static const char * _glTexGenfvOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGenfvOES_sig = {2524, "glTexGenfvOES", 3, _glTexGenfvOES_args};

static const char * _glTexGeniOES_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGeniOES_sig = {2525, "glTexGeniOES", 3, _glTexGeniOES_args};

static const char * _glTexGenivOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGenivOES_sig = {2526, "glTexGenivOES", 3, _glTexGenivOES_args};

static const char * _glTexGenxOES_args[3] = {"coord", "pname", "param"};
static const trace::FunctionSig _glTexGenxOES_sig = {2527, "glTexGenxOES", 3, _glTexGenxOES_args};

static const char * _glTexGenxvOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glTexGenxvOES_sig = {2528, "glTexGenxvOES", 3, _glTexGenxvOES_args};

static const char * _glGetTexGenfvOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGenfvOES_sig = {2529, "glGetTexGenfvOES", 3, _glGetTexGenfvOES_args};

static const char * _glGetTexGenivOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGenivOES_sig = {2530, "glGetTexGenivOES", 3, _glGetTexGenivOES_args};

static const char * _glGetTexGenxvOES_args[3] = {"coord", "pname", "params"};
static const trace::FunctionSig _glGetTexGenxvOES_sig = {2531, "glGetTexGenxvOES", 3, _glGetTexGenxvOES_args};

static const char * _glGetBufferPointervOES_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetBufferPointervOES_sig = {2532, "glGetBufferPointervOES", 3, _glGetBufferPointervOES_args};

static const char * _glMapBufferOES_args[2] = {"target", "access"};
static const trace::FunctionSig _glMapBufferOES_sig = {2533, "glMapBufferOES", 2, _glMapBufferOES_args};

static const char * _glUnmapBufferOES_args[1] = {"target"};
static const trace::FunctionSig _glUnmapBufferOES_sig = {2534, "glUnmapBufferOES", 1, _glUnmapBufferOES_args};

static const char * _glTexImage3DOES_args[10] = {"target", "level", "internalformat", "width", "height", "depth", "border", "format", "type", "pixels"};
static const trace::FunctionSig _glTexImage3DOES_sig = {2535, "glTexImage3DOES", 10, _glTexImage3DOES_args};

static const char * _glTexSubImage3DOES_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "type", "pixels"};
static const trace::FunctionSig _glTexSubImage3DOES_sig = {2536, "glTexSubImage3DOES", 11, _glTexSubImage3DOES_args};

static const char * _glCopyTexSubImage3DOES_args[9] = {"target", "level", "xoffset", "yoffset", "zoffset", "x", "y", "width", "height"};
static const trace::FunctionSig _glCopyTexSubImage3DOES_sig = {2537, "glCopyTexSubImage3DOES", 9, _glCopyTexSubImage3DOES_args};

static const char * _glCompressedTexImage3DOES_args[9] = {"target", "level", "internalformat", "width", "height", "depth", "border", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexImage3DOES_sig = {2538, "glCompressedTexImage3DOES", 9, _glCompressedTexImage3DOES_args};

static const char * _glCompressedTexSubImage3DOES_args[11] = {"target", "level", "xoffset", "yoffset", "zoffset", "width", "height", "depth", "format", "imageSize", "data"};
static const trace::FunctionSig _glCompressedTexSubImage3DOES_sig = {2539, "glCompressedTexSubImage3DOES", 11, _glCompressedTexSubImage3DOES_args};

static const char * _glFramebufferTexture3DOES_args[6] = {"target", "attachment", "textarget", "texture", "level", "zoffset"};
static const trace::FunctionSig _glFramebufferTexture3DOES_sig = {2540, "glFramebufferTexture3DOES", 6, _glFramebufferTexture3DOES_args};

static const char * _glGetProgramBinaryOES_args[5] = {"program", "bufSize", "length", "binaryFormat", "binary"};
static const trace::FunctionSig _glGetProgramBinaryOES_sig = {2541, "glGetProgramBinaryOES", 5, _glGetProgramBinaryOES_args};

static const char * _glProgramBinaryOES_args[4] = {"program", "binaryFormat", "binary", "length"};
static const trace::FunctionSig _glProgramBinaryOES_sig = {2542, "glProgramBinaryOES", 4, _glProgramBinaryOES_args};

static const char * _glDrawTexfOES_args[5] = {"x", "y", "z", "width", "height"};
static const trace::FunctionSig _glDrawTexfOES_sig = {2543, "glDrawTexfOES", 5, _glDrawTexfOES_args};

static const char * _glDrawTexfvOES_args[1] = {"coords"};
static const trace::FunctionSig _glDrawTexfvOES_sig = {2544, "glDrawTexfvOES", 1, _glDrawTexfvOES_args};

static const char * _glDrawTexiOES_args[5] = {"x", "y", "z", "width", "height"};
static const trace::FunctionSig _glDrawTexiOES_sig = {2545, "glDrawTexiOES", 5, _glDrawTexiOES_args};

static const char * _glDrawTexivOES_args[1] = {"coords"};
static const trace::FunctionSig _glDrawTexivOES_sig = {2546, "glDrawTexivOES", 1, _glDrawTexivOES_args};

static const char * _glDrawTexsOES_args[5] = {"x", "y", "z", "width", "height"};
static const trace::FunctionSig _glDrawTexsOES_sig = {2547, "glDrawTexsOES", 5, _glDrawTexsOES_args};

static const char * _glDrawTexsvOES_args[1] = {"coords"};
static const trace::FunctionSig _glDrawTexsvOES_sig = {2548, "glDrawTexsvOES", 1, _glDrawTexsvOES_args};

static const char * _glDiscardFramebufferEXT_args[3] = {"target", "numAttachments", "attachments"};
static const trace::FunctionSig _glDiscardFramebufferEXT_sig = {2549, "glDiscardFramebufferEXT", 3, _glDiscardFramebufferEXT_args};

static const char * _glBindVertexArrayOES_args[1] = {"array"};
static const trace::FunctionSig _glBindVertexArrayOES_sig = {2550, "glBindVertexArrayOES", 1, _glBindVertexArrayOES_args};

static const char * _glDeleteVertexArraysOES_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glDeleteVertexArraysOES_sig = {2551, "glDeleteVertexArraysOES", 2, _glDeleteVertexArraysOES_args};

static const char * _glGenVertexArraysOES_args[2] = {"n", "arrays"};
static const trace::FunctionSig _glGenVertexArraysOES_sig = {2552, "glGenVertexArraysOES", 2, _glGenVertexArraysOES_args};

static const char * _glIsVertexArrayOES_args[1] = {"array"};
static const trace::FunctionSig _glIsVertexArrayOES_sig = {2553, "glIsVertexArrayOES", 1, _glIsVertexArrayOES_args};

static const char * _glCoverageMaskNV_args[1] = {"mask"};
static const trace::FunctionSig _glCoverageMaskNV_sig = {2554, "glCoverageMaskNV", 1, _glCoverageMaskNV_args};

static const char * _glCoverageOperationNV_args[1] = {"operation"};
static const trace::FunctionSig _glCoverageOperationNV_sig = {2555, "glCoverageOperationNV", 1, _glCoverageOperationNV_args};

static const char * _glRenderbufferStorageMultisampleIMG_args[5] = {"target", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisampleIMG_sig = {2556, "glRenderbufferStorageMultisampleIMG", 5, _glRenderbufferStorageMultisampleIMG_args};

static const char * _glFramebufferTexture2DMultisampleIMG_args[6] = {"target", "attachment", "textarget", "texture", "level", "samples"};
static const trace::FunctionSig _glFramebufferTexture2DMultisampleIMG_sig = {2557, "glFramebufferTexture2DMultisampleIMG", 6, _glFramebufferTexture2DMultisampleIMG_args};

static const char * _glRenderbufferStorageMultisampleAPPLE_args[5] = {"target", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisampleAPPLE_sig = {2558, "glRenderbufferStorageMultisampleAPPLE", 5, _glRenderbufferStorageMultisampleAPPLE_args};

static const char ** _glResolveMultisampleFramebufferAPPLE_args = NULL;
static const trace::FunctionSig _glResolveMultisampleFramebufferAPPLE_sig = {2559, "glResolveMultisampleFramebufferAPPLE", 0, _glResolveMultisampleFramebufferAPPLE_args};

static const char * _glBlitFramebufferANGLE_args[10] = {"srcX0", "srcY0", "srcX1", "srcY1", "dstX0", "dstY0", "dstX1", "dstY1", "mask", "filter"};
static const trace::FunctionSig _glBlitFramebufferANGLE_sig = {2560, "glBlitFramebufferANGLE", 10, _glBlitFramebufferANGLE_args};

static const char * _glRenderbufferStorageMultisampleANGLE_args[5] = {"target", "samples", "internalformat", "width", "height"};
static const trace::FunctionSig _glRenderbufferStorageMultisampleANGLE_sig = {2561, "glRenderbufferStorageMultisampleANGLE", 5, _glRenderbufferStorageMultisampleANGLE_args};

static const char * _glDrawBuffersNV_args[2] = {"n", "bufs"};
static const trace::FunctionSig _glDrawBuffersNV_sig = {2562, "glDrawBuffersNV", 2, _glDrawBuffersNV_args};

static const char * _glReadBufferNV_args[1] = {"mode"};
static const trace::FunctionSig _glReadBufferNV_sig = {2563, "glReadBufferNV", 1, _glReadBufferNV_args};

static const char * _glLabelObjectEXT_args[4] = {"type", "object", "length", "label"};
static const trace::FunctionSig _glLabelObjectEXT_sig = {2564, "glLabelObjectEXT", 4, _glLabelObjectEXT_args};

static const char * _glGetObjectLabelEXT_args[5] = {"type", "object", "bufSize", "length", "label"};
static const trace::FunctionSig _glGetObjectLabelEXT_sig = {2565, "glGetObjectLabelEXT", 5, _glGetObjectLabelEXT_args};

static const char * _glInsertEventMarkerEXT_args[2] = {"length", "marker"};
static const trace::FunctionSig _glInsertEventMarkerEXT_sig = {2566, "glInsertEventMarkerEXT", 2, _glInsertEventMarkerEXT_args};

static const char * _glPushGroupMarkerEXT_args[2] = {"length", "marker"};
static const trace::FunctionSig _glPushGroupMarkerEXT_sig = {2567, "glPushGroupMarkerEXT", 2, _glPushGroupMarkerEXT_args};

static const char ** _glPopGroupMarkerEXT_args = NULL;
static const trace::FunctionSig _glPopGroupMarkerEXT_sig = {2568, "glPopGroupMarkerEXT", 0, _glPopGroupMarkerEXT_args};

static const char * _glGenQueriesEXT_args[2] = {"n", "ids"};
static const trace::FunctionSig _glGenQueriesEXT_sig = {2569, "glGenQueriesEXT", 2, _glGenQueriesEXT_args};

static const char * _glDeleteQueriesEXT_args[2] = {"n", "ids"};
static const trace::FunctionSig _glDeleteQueriesEXT_sig = {2570, "glDeleteQueriesEXT", 2, _glDeleteQueriesEXT_args};

static const char * _glIsQueryEXT_args[1] = {"id"};
static const trace::FunctionSig _glIsQueryEXT_sig = {2571, "glIsQueryEXT", 1, _glIsQueryEXT_args};

static const char * _glBeginQueryEXT_args[2] = {"target", "id"};
static const trace::FunctionSig _glBeginQueryEXT_sig = {2572, "glBeginQueryEXT", 2, _glBeginQueryEXT_args};

static const char * _glEndQueryEXT_args[1] = {"target"};
static const trace::FunctionSig _glEndQueryEXT_sig = {2573, "glEndQueryEXT", 1, _glEndQueryEXT_args};

static const char * _glGetQueryivEXT_args[3] = {"target", "pname", "params"};
static const trace::FunctionSig _glGetQueryivEXT_sig = {2574, "glGetQueryivEXT", 3, _glGetQueryivEXT_args};

static const char * _glGetQueryObjectuivEXT_args[3] = {"id", "pname", "params"};
static const trace::FunctionSig _glGetQueryObjectuivEXT_sig = {2575, "glGetQueryObjectuivEXT", 3, _glGetQueryObjectuivEXT_args};

static const char * _glUseProgramStagesEXT_args[3] = {"pipeline", "stages", "program"};
static const trace::FunctionSig _glUseProgramStagesEXT_sig = {2576, "glUseProgramStagesEXT", 3, _glUseProgramStagesEXT_args};

static const char * _glActiveShaderProgramEXT_args[2] = {"pipeline", "program"};
static const trace::FunctionSig _glActiveShaderProgramEXT_sig = {2577, "glActiveShaderProgramEXT", 2, _glActiveShaderProgramEXT_args};

static const char * _glCreateShaderProgramvEXT_args[3] = {"type", "count", "strings"};
static const trace::FunctionSig _glCreateShaderProgramvEXT_sig = {2578, "glCreateShaderProgramvEXT", 3, _glCreateShaderProgramvEXT_args};

static const char * _glBindProgramPipelineEXT_args[1] = {"pipeline"};
static const trace::FunctionSig _glBindProgramPipelineEXT_sig = {2579, "glBindProgramPipelineEXT", 1, _glBindProgramPipelineEXT_args};

static const char * _glDeleteProgramPipelinesEXT_args[2] = {"n", "pipelines"};
static const trace::FunctionSig _glDeleteProgramPipelinesEXT_sig = {2580, "glDeleteProgramPipelinesEXT", 2, _glDeleteProgramPipelinesEXT_args};

static const char * _glGenProgramPipelinesEXT_args[2] = {"n", "pipelines"};
static const trace::FunctionSig _glGenProgramPipelinesEXT_sig = {2581, "glGenProgramPipelinesEXT", 2, _glGenProgramPipelinesEXT_args};

static const char * _glIsProgramPipelineEXT_args[1] = {"pipeline"};
static const trace::FunctionSig _glIsProgramPipelineEXT_sig = {2582, "glIsProgramPipelineEXT", 1, _glIsProgramPipelineEXT_args};

static const char * _glGetProgramPipelineivEXT_args[3] = {"pipeline", "pname", "params"};
static const trace::FunctionSig _glGetProgramPipelineivEXT_sig = {2583, "glGetProgramPipelineivEXT", 3, _glGetProgramPipelineivEXT_args};

static const char * _glValidateProgramPipelineEXT_args[1] = {"pipeline"};
static const trace::FunctionSig _glValidateProgramPipelineEXT_sig = {2584, "glValidateProgramPipelineEXT", 1, _glValidateProgramPipelineEXT_args};

static const char * _glGetProgramPipelineInfoLogEXT_args[4] = {"pipeline", "bufSize", "length", "infoLog"};
static const trace::FunctionSig _glGetProgramPipelineInfoLogEXT_sig = {2585, "glGetProgramPipelineInfoLogEXT", 4, _glGetProgramPipelineInfoLogEXT_args};

static const char * _glFramebufferTexture2DMultisampleEXT_args[6] = {"target", "attachment", "textarget", "texture", "level", "samples"};
static const trace::FunctionSig _glFramebufferTexture2DMultisampleEXT_sig = {2586, "glFramebufferTexture2DMultisampleEXT", 6, _glFramebufferTexture2DMultisampleEXT_args};

static const char * _glTexStorage1DEXT_args[4] = {"target", "levels", "internalformat", "width"};
static const trace::FunctionSig _glTexStorage1DEXT_sig = {2587, "glTexStorage1DEXT", 4, _glTexStorage1DEXT_args};

static const char * _glTexStorage2DEXT_args[5] = {"target", "levels", "internalformat", "width", "height"};
static const trace::FunctionSig _glTexStorage2DEXT_sig = {2588, "glTexStorage2DEXT", 5, _glTexStorage2DEXT_args};

static const char * _glTexStorage3DEXT_args[6] = {"target", "levels", "internalformat", "width", "height", "depth"};
static const trace::FunctionSig _glTexStorage3DEXT_sig = {2589, "glTexStorage3DEXT", 6, _glTexStorage3DEXT_args};


#if REGAL_SYS_OSX
static const char * _CGLSetCurrentContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLSetCurrentContext_sig = {2590, "CGLSetCurrentContext", 1, _CGLSetCurrentContext_args};

static const char ** _CGLGetCurrentContext_args = NULL;
static const trace::FunctionSig _CGLGetCurrentContext_sig = {2591, "CGLGetCurrentContext", 0, _CGLGetCurrentContext_args};

static const char * _CGLChoosePixelFormat_args[3] = {"attribs", "pix", "npix"};
static const trace::FunctionSig _CGLChoosePixelFormat_sig = {2592, "CGLChoosePixelFormat", 3, _CGLChoosePixelFormat_args};

static const char * _CGLDestroyPixelFormat_args[1] = {"pix"};
static const trace::FunctionSig _CGLDestroyPixelFormat_sig = {2593, "CGLDestroyPixelFormat", 1, _CGLDestroyPixelFormat_args};

static const char * _CGLDescribePixelFormat_args[4] = {"pix", "pix_num", "attrib", "value"};
static const trace::FunctionSig _CGLDescribePixelFormat_sig = {2594, "CGLDescribePixelFormat", 4, _CGLDescribePixelFormat_args};

static const char * _CGLReleasePixelFormat_args[1] = {"pix"};
static const trace::FunctionSig _CGLReleasePixelFormat_sig = {2595, "CGLReleasePixelFormat", 1, _CGLReleasePixelFormat_args};

static const char * _CGLRetainPixelFormat_args[1] = {"pix"};
static const trace::FunctionSig _CGLRetainPixelFormat_sig = {2596, "CGLRetainPixelFormat", 1, _CGLRetainPixelFormat_args};

static const char * _CGLGetPixelFormatRetainCount_args[1] = {"pix"};
static const trace::FunctionSig _CGLGetPixelFormatRetainCount_sig = {2597, "CGLGetPixelFormatRetainCount", 1, _CGLGetPixelFormatRetainCount_args};

static const char * _CGLQueryRendererInfo_args[3] = {"display_mask", "rend", "nrend"};
static const trace::FunctionSig _CGLQueryRendererInfo_sig = {2598, "CGLQueryRendererInfo", 3, _CGLQueryRendererInfo_args};

static const char * _CGLDestroyRendererInfo_args[1] = {"rend"};
static const trace::FunctionSig _CGLDestroyRendererInfo_sig = {2599, "CGLDestroyRendererInfo", 1, _CGLDestroyRendererInfo_args};

static const char * _CGLDescribeRenderer_args[4] = {"rend", "rend_num", "prop", "value"};
static const trace::FunctionSig _CGLDescribeRenderer_sig = {2600, "CGLDescribeRenderer", 4, _CGLDescribeRenderer_args};

static const char * _CGLCreateContext_args[3] = {"pix", "share", "ctx"};
static const trace::FunctionSig _CGLCreateContext_sig = {2601, "CGLCreateContext", 3, _CGLCreateContext_args};

static const char * _CGLDestroyContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLDestroyContext_sig = {2602, "CGLDestroyContext", 1, _CGLDestroyContext_args};

static const char * _CGLCopyContext_args[3] = {"src", "dst", "mask"};
static const trace::FunctionSig _CGLCopyContext_sig = {2603, "CGLCopyContext", 3, _CGLCopyContext_args};

static const char * _CGLRetainContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLRetainContext_sig = {2604, "CGLRetainContext", 1, _CGLRetainContext_args};

static const char * _CGLReleaseContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLReleaseContext_sig = {2605, "CGLReleaseContext", 1, _CGLReleaseContext_args};

static const char * _CGLGetContextRetainCount_args[1] = {"ctx"};
static const trace::FunctionSig _CGLGetContextRetainCount_sig = {2606, "CGLGetContextRetainCount", 1, _CGLGetContextRetainCount_args};

static const char * _CGLGetPixelFormat_args[1] = {"ctx"};
static const trace::FunctionSig _CGLGetPixelFormat_sig = {2607, "CGLGetPixelFormat", 1, _CGLGetPixelFormat_args};

static const char * _CGLCreatePBuffer_args[6] = {"width", "height", "target", "internalFormat", "max_level", "pbuffer"};
static const trace::FunctionSig _CGLCreatePBuffer_sig = {2608, "CGLCreatePBuffer", 6, _CGLCreatePBuffer_args};

static const char * _CGLDestroyPBuffer_args[1] = {"pbuffer"};
static const trace::FunctionSig _CGLDestroyPBuffer_sig = {2609, "CGLDestroyPBuffer", 1, _CGLDestroyPBuffer_args};

static const char * _CGLDescribePBuffer_args[6] = {"obj", "width", "height", "target", "internalFormat", "mipmap"};
static const trace::FunctionSig _CGLDescribePBuffer_sig = {2610, "CGLDescribePBuffer", 6, _CGLDescribePBuffer_args};

static const char * _CGLTexImagePBuffer_args[3] = {"ctx", "pbuffer", "source"};
static const trace::FunctionSig _CGLTexImagePBuffer_sig = {2611, "CGLTexImagePBuffer", 3, _CGLTexImagePBuffer_args};

static const char * _CGLRetainPBuffer_args[1] = {"pbuffer"};
static const trace::FunctionSig _CGLRetainPBuffer_sig = {2612, "CGLRetainPBuffer", 1, _CGLRetainPBuffer_args};

static const char * _CGLReleasePBuffer_args[1] = {"pbuffer"};
static const trace::FunctionSig _CGLReleasePBuffer_sig = {2613, "CGLReleasePBuffer", 1, _CGLReleasePBuffer_args};

static const char * _CGLGetPBufferRetainCount_args[1] = {"pbuffer"};
static const trace::FunctionSig _CGLGetPBufferRetainCount_sig = {2614, "CGLGetPBufferRetainCount", 1, _CGLGetPBufferRetainCount_args};

static const char * _CGLSetOffScreen_args[5] = {"ctx", "width", "height", "rowbytes", "baseaddr"};
static const trace::FunctionSig _CGLSetOffScreen_sig = {2615, "CGLSetOffScreen", 5, _CGLSetOffScreen_args};

static const char * _CGLGetOffScreen_args[5] = {"ctx", "width", "height", "rowbytes", "baseaddr"};
static const trace::FunctionSig _CGLGetOffScreen_sig = {2616, "CGLGetOffScreen", 5, _CGLGetOffScreen_args};

static const char * _CGLSetFullScreen_args[1] = {"ctx"};
static const trace::FunctionSig _CGLSetFullScreen_sig = {2617, "CGLSetFullScreen", 1, _CGLSetFullScreen_args};

static const char * _CGLSetFullScreenOnDisplay_args[2] = {"ctx", "display_mask"};
static const trace::FunctionSig _CGLSetFullScreenOnDisplay_sig = {2618, "CGLSetFullScreenOnDisplay", 2, _CGLSetFullScreenOnDisplay_args};

static const char * _CGLSetPBuffer_args[5] = {"ctx", "pbuffer", "face", "level", "screen"};
static const trace::FunctionSig _CGLSetPBuffer_sig = {2619, "CGLSetPBuffer", 5, _CGLSetPBuffer_args};

static const char * _CGLGetPBuffer_args[5] = {"ctx", "pbuffer", "face", "level", "screen"};
static const trace::FunctionSig _CGLGetPBuffer_sig = {2620, "CGLGetPBuffer", 5, _CGLGetPBuffer_args};

static const char * _CGLClearDrawable_args[1] = {"ctx"};
static const trace::FunctionSig _CGLClearDrawable_sig = {2621, "CGLClearDrawable", 1, _CGLClearDrawable_args};

static const char * _CGLFlushDrawable_args[1] = {"ctx"};
static const trace::FunctionSig _CGLFlushDrawable_sig = {2622, "CGLFlushDrawable", 1, _CGLFlushDrawable_args};

static const char * _CGLEnable_args[2] = {"ctx", "pname"};
static const trace::FunctionSig _CGLEnable_sig = {2623, "CGLEnable", 2, _CGLEnable_args};

static const char * _CGLDisable_args[2] = {"ctx", "pname"};
static const trace::FunctionSig _CGLDisable_sig = {2624, "CGLDisable", 2, _CGLDisable_args};

static const char * _CGLIsEnabled_args[3] = {"ctx", "pname", "enable"};
static const trace::FunctionSig _CGLIsEnabled_sig = {2625, "CGLIsEnabled", 3, _CGLIsEnabled_args};

static const char * _CGLSetParameter_args[3] = {"ctx", "pname", "params"};
static const trace::FunctionSig _CGLSetParameter_sig = {2626, "CGLSetParameter", 3, _CGLSetParameter_args};

static const char * _CGLGetParameter_args[3] = {"ctx", "pname", "params"};
static const trace::FunctionSig _CGLGetParameter_sig = {2627, "CGLGetParameter", 3, _CGLGetParameter_args};

static const char * _CGLSetVirtualScreen_args[2] = {"ctx", "screen"};
static const trace::FunctionSig _CGLSetVirtualScreen_sig = {2628, "CGLSetVirtualScreen", 2, _CGLSetVirtualScreen_args};

static const char * _CGLGetVirtualScreen_args[2] = {"ctx", "screen"};
static const trace::FunctionSig _CGLGetVirtualScreen_sig = {2629, "CGLGetVirtualScreen", 2, _CGLGetVirtualScreen_args};

static const char * _CGLSetGlobalOption_args[2] = {"pname", "params"};
static const trace::FunctionSig _CGLSetGlobalOption_sig = {2630, "CGLSetGlobalOption", 2, _CGLSetGlobalOption_args};

static const char * _CGLGetGlobalOption_args[2] = {"pname", "params"};
static const trace::FunctionSig _CGLGetGlobalOption_sig = {2631, "CGLGetGlobalOption", 2, _CGLGetGlobalOption_args};

static const char * _CGLSetOption_args[2] = {"pname", "param"};
static const trace::FunctionSig _CGLSetOption_sig = {2632, "CGLSetOption", 2, _CGLSetOption_args};

static const char * _CGLGetOption_args[2] = {"pname", "param"};
static const trace::FunctionSig _CGLGetOption_sig = {2633, "CGLGetOption", 2, _CGLGetOption_args};

static const char * _CGLLockContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLLockContext_sig = {2634, "CGLLockContext", 1, _CGLLockContext_args};

static const char * _CGLUnlockContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLUnlockContext_sig = {2635, "CGLUnlockContext", 1, _CGLUnlockContext_args};

static const char * _CGLGetVersion_args[2] = {"majorvers", "minorvers"};
static const trace::FunctionSig _CGLGetVersion_sig = {2636, "CGLGetVersion", 2, _CGLGetVersion_args};

static const char * _CGLErrorString_args[1] = {"error"};
static const trace::FunctionSig _CGLErrorString_sig = {2637, "CGLErrorString", 1, _CGLErrorString_args};

static const char * _CGLTexImageIOSurface2D_args[9] = {"ctx", "target", "internal_format", "width", "height", "format", "type", "ioSurface", "plane"};
static const trace::FunctionSig _CGLTexImageIOSurface2D_sig = {2638, "CGLTexImageIOSurface2D", 9, _CGLTexImageIOSurface2D_args};

static const char * _CGLGetShareGroup_args[1] = {"ctx"};
static const trace::FunctionSig _CGLGetShareGroup_sig = {2639, "CGLGetShareGroup", 1, _CGLGetShareGroup_args};

static const char * _CGLSetSurface_args[4] = {"ctx", "cid", "wid", "sid"};
static const trace::FunctionSig _CGLSetSurface_sig = {2640, "CGLSetSurface", 4, _CGLSetSurface_args};

static const char * _CGLGetSurface_args[4] = {"ctx", "cid", "wid", "sid"};
static const trace::FunctionSig _CGLGetSurface_sig = {2641, "CGLGetSurface", 4, _CGLGetSurface_args};

static const char * _CGLUpdateContext_args[1] = {"ctx"};
static const trace::FunctionSig _CGLUpdateContext_sig = {2642, "CGLUpdateContext", 1, _CGLUpdateContext_args};

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL
static const char ** _eglGetError_args = NULL;
static const trace::FunctionSig _eglGetError_sig = {2643, "eglGetError", 0, _eglGetError_args};

static const char * _eglGetDisplay_args[1] = {"display_id"};
static const trace::FunctionSig _eglGetDisplay_sig = {2644, "eglGetDisplay", 1, _eglGetDisplay_args};

static const char * _eglInitialize_args[3] = {"dpy", "major", "minor"};
static const trace::FunctionSig _eglInitialize_sig = {2645, "eglInitialize", 3, _eglInitialize_args};

static const char * _eglTerminate_args[1] = {"dpy"};
static const trace::FunctionSig _eglTerminate_sig = {2646, "eglTerminate", 1, _eglTerminate_args};

static const char * _eglQueryString_args[2] = {"dpy", "name"};
static const trace::FunctionSig _eglQueryString_sig = {2647, "eglQueryString", 2, _eglQueryString_args};

static const char * _eglGetConfigs_args[4] = {"dpy", "configs", "config_size", "num_config"};
static const trace::FunctionSig _eglGetConfigs_sig = {2648, "eglGetConfigs", 4, _eglGetConfigs_args};

static const char * _eglChooseConfig_args[5] = {"dpy", "attrib_list", "configs", "config_size", "num_config"};
static const trace::FunctionSig _eglChooseConfig_sig = {2649, "eglChooseConfig", 5, _eglChooseConfig_args};

static const char * _eglGetConfigAttrib_args[4] = {"dpy", "config", "attribute", "value"};
static const trace::FunctionSig _eglGetConfigAttrib_sig = {2650, "eglGetConfigAttrib", 4, _eglGetConfigAttrib_args};

static const char * _eglCreateWindowSurface_args[4] = {"dpy", "config", "win", "attrib_list"};
static const trace::FunctionSig _eglCreateWindowSurface_sig = {2651, "eglCreateWindowSurface", 4, _eglCreateWindowSurface_args};

static const char * _eglCreatePbufferSurface_args[3] = {"dpy", "config", "attrib_list"};
static const trace::FunctionSig _eglCreatePbufferSurface_sig = {2652, "eglCreatePbufferSurface", 3, _eglCreatePbufferSurface_args};

static const char * _eglCreatePixmapSurface_args[4] = {"dpy", "config", "pixmap", "attrib_list"};
static const trace::FunctionSig _eglCreatePixmapSurface_sig = {2653, "eglCreatePixmapSurface", 4, _eglCreatePixmapSurface_args};

static const char * _eglDestroySurface_args[2] = {"dpy", "surface"};
static const trace::FunctionSig _eglDestroySurface_sig = {2654, "eglDestroySurface", 2, _eglDestroySurface_args};

static const char * _eglQuerySurface_args[4] = {"dpy", "surface", "attribute", "value"};
static const trace::FunctionSig _eglQuerySurface_sig = {2655, "eglQuerySurface", 4, _eglQuerySurface_args};

static const char * _eglBindAPI_args[1] = {"api"};
static const trace::FunctionSig _eglBindAPI_sig = {2656, "eglBindAPI", 1, _eglBindAPI_args};

static const char ** _eglQueryAPI_args = NULL;
static const trace::FunctionSig _eglQueryAPI_sig = {2657, "eglQueryAPI", 0, _eglQueryAPI_args};

static const char ** _eglWaitClient_args = NULL;
static const trace::FunctionSig _eglWaitClient_sig = {2658, "eglWaitClient", 0, _eglWaitClient_args};

static const char ** _eglReleaseThread_args = NULL;
static const trace::FunctionSig _eglReleaseThread_sig = {2659, "eglReleaseThread", 0, _eglReleaseThread_args};

static const char * _eglCreatePbufferFromClientBuffer_args[5] = {"dpy", "buftype", "buffer", "config", "attrib_list"};
static const trace::FunctionSig _eglCreatePbufferFromClientBuffer_sig = {2660, "eglCreatePbufferFromClientBuffer", 5, _eglCreatePbufferFromClientBuffer_args};

static const char * _eglSurfaceAttrib_args[4] = {"dpy", "surface", "attribute", "value"};
static const trace::FunctionSig _eglSurfaceAttrib_sig = {2661, "eglSurfaceAttrib", 4, _eglSurfaceAttrib_args};

static const char * _eglBindTexImage_args[3] = {"dpy", "surface", "buffer"};
static const trace::FunctionSig _eglBindTexImage_sig = {2662, "eglBindTexImage", 3, _eglBindTexImage_args};

static const char * _eglReleaseTexImage_args[3] = {"dpy", "surface", "buffer"};
static const trace::FunctionSig _eglReleaseTexImage_sig = {2663, "eglReleaseTexImage", 3, _eglReleaseTexImage_args};

static const char * _eglSwapInterval_args[2] = {"dpy", "interval"};
static const trace::FunctionSig _eglSwapInterval_sig = {2664, "eglSwapInterval", 2, _eglSwapInterval_args};

static const char * _eglCreateContext_args[4] = {"dpy", "config", "share_context", "attrib_list"};
static const trace::FunctionSig _eglCreateContext_sig = {2665, "eglCreateContext", 4, _eglCreateContext_args};

static const char * _eglDestroyContext_args[2] = {"dpy", "ctx"};
static const trace::FunctionSig _eglDestroyContext_sig = {2666, "eglDestroyContext", 2, _eglDestroyContext_args};

static const char * _eglMakeCurrent_args[4] = {"dpy", "draw", "read", "ctx"};
static const trace::FunctionSig _eglMakeCurrent_sig = {2667, "eglMakeCurrent", 4, _eglMakeCurrent_args};

static const char ** _eglGetCurrentContext_args = NULL;
static const trace::FunctionSig _eglGetCurrentContext_sig = {2668, "eglGetCurrentContext", 0, _eglGetCurrentContext_args};

static const char * _eglGetCurrentSurface_args[1] = {"readdraw"};
static const trace::FunctionSig _eglGetCurrentSurface_sig = {2669, "eglGetCurrentSurface", 1, _eglGetCurrentSurface_args};

static const char ** _eglGetCurrentDisplay_args = NULL;
static const trace::FunctionSig _eglGetCurrentDisplay_sig = {2670, "eglGetCurrentDisplay", 0, _eglGetCurrentDisplay_args};

static const char * _eglQueryContext_args[4] = {"dpy", "ctx", "attribute", "value"};
static const trace::FunctionSig _eglQueryContext_sig = {2671, "eglQueryContext", 4, _eglQueryContext_args};

static const char ** _eglWaitGL_args = NULL;
static const trace::FunctionSig _eglWaitGL_sig = {2672, "eglWaitGL", 0, _eglWaitGL_args};

static const char * _eglWaitNative_args[1] = {"engine"};
static const trace::FunctionSig _eglWaitNative_sig = {2673, "eglWaitNative", 1, _eglWaitNative_args};

static const char * _eglSwapBuffers_args[2] = {"dpy", "surface"};
static const trace::FunctionSig _eglSwapBuffers_sig = {2674, "eglSwapBuffers", 2, _eglSwapBuffers_args};

static const char * _eglCopyBuffers_args[3] = {"dpy", "surface", "target"};
static const trace::FunctionSig _eglCopyBuffers_sig = {2675, "eglCopyBuffers", 3, _eglCopyBuffers_args};

static const char * _eglGetProcAddress_args[1] = {"procname"};
static const trace::FunctionSig _eglGetProcAddress_sig = {2676, "eglGetProcAddress", 1, _eglGetProcAddress_args};

static const char * _eglLockSurfaceKHR_args[3] = {"display", "surface", "attrib_list"};
static const trace::FunctionSig _eglLockSurfaceKHR_sig = {2677, "eglLockSurfaceKHR", 3, _eglLockSurfaceKHR_args};

static const char * _eglUnlockSurfaceKHR_args[2] = {"display", "surface"};
static const trace::FunctionSig _eglUnlockSurfaceKHR_sig = {2678, "eglUnlockSurfaceKHR", 2, _eglUnlockSurfaceKHR_args};

static const char * _eglCreateImageKHR_args[5] = {"dpy", "ctx", "target", "buffer", "attrib_list"};
static const trace::FunctionSig _eglCreateImageKHR_sig = {2679, "eglCreateImageKHR", 5, _eglCreateImageKHR_args};

static const char * _eglDestroyImageKHR_args[2] = {"dpy", "image"};
static const trace::FunctionSig _eglDestroyImageKHR_sig = {2680, "eglDestroyImageKHR", 2, _eglDestroyImageKHR_args};

static const char * _eglCreateSyncKHR_args[3] = {"dpy", "type", "attrib_list"};
static const trace::FunctionSig _eglCreateSyncKHR_sig = {2681, "eglCreateSyncKHR", 3, _eglCreateSyncKHR_args};

static const char * _eglDestroySyncKHR_args[2] = {"dpy", "sync"};
static const trace::FunctionSig _eglDestroySyncKHR_sig = {2682, "eglDestroySyncKHR", 2, _eglDestroySyncKHR_args};

static const char * _eglClientWaitSyncKHR_args[4] = {"dpy", "sync", "flags", "timeout"};
static const trace::FunctionSig _eglClientWaitSyncKHR_sig = {2683, "eglClientWaitSyncKHR", 4, _eglClientWaitSyncKHR_args};

static const char * _eglSignalSyncKHR_args[3] = {"dpy", "sync", "mode"};
static const trace::FunctionSig _eglSignalSyncKHR_sig = {2684, "eglSignalSyncKHR", 3, _eglSignalSyncKHR_args};

static const char * _eglGetSyncAttribKHR_args[4] = {"dpy", "sync", "attribute", "value"};
static const trace::FunctionSig _eglGetSyncAttribKHR_sig = {2685, "eglGetSyncAttribKHR", 4, _eglGetSyncAttribKHR_args};

static const char * _eglCreateFenceSyncNV_args[3] = {"dpy", "condition", "attrib_list"};
static const trace::FunctionSig _eglCreateFenceSyncNV_sig = {2686, "eglCreateFenceSyncNV", 3, _eglCreateFenceSyncNV_args};

static const char * _eglDestroySyncNV_args[1] = {"sync"};
static const trace::FunctionSig _eglDestroySyncNV_sig = {2687, "eglDestroySyncNV", 1, _eglDestroySyncNV_args};

static const char * _eglFenceNV_args[1] = {"sync"};
static const trace::FunctionSig _eglFenceNV_sig = {2688, "eglFenceNV", 1, _eglFenceNV_args};

static const char * _eglClientWaitSyncNV_args[3] = {"sync", "flags", "timeout"};
static const trace::FunctionSig _eglClientWaitSyncNV_sig = {2689, "eglClientWaitSyncNV", 3, _eglClientWaitSyncNV_args};

static const char * _eglSignalSyncNV_args[2] = {"sync", "mode"};
static const trace::FunctionSig _eglSignalSyncNV_sig = {2690, "eglSignalSyncNV", 2, _eglSignalSyncNV_args};

static const char * _eglGetSyncAttribNV_args[3] = {"sync", "attribute", "value"};
static const trace::FunctionSig _eglGetSyncAttribNV_sig = {2691, "eglGetSyncAttribNV", 3, _eglGetSyncAttribNV_args};

static const char * _eglCreatePixmapSurfaceHI_args[3] = {"dpy", "config", "pixmap"};
static const trace::FunctionSig _eglCreatePixmapSurfaceHI_sig = {2692, "eglCreatePixmapSurfaceHI", 3, _eglCreatePixmapSurfaceHI_args};

static const char * _eglCreateDRMImageMESA_args[2] = {"dpy", "attrib_list"};
static const trace::FunctionSig _eglCreateDRMImageMESA_sig = {2693, "eglCreateDRMImageMESA", 2, _eglCreateDRMImageMESA_args};

static const char * _eglExportDRMImageMESA_args[5] = {"dpy", "image", "name", "handle", "stride"};
static const trace::FunctionSig _eglExportDRMImageMESA_sig = {2694, "eglExportDRMImageMESA", 5, _eglExportDRMImageMESA_args};

static const char * _eglPostSubBufferNV_args[6] = {"dpy", "surface", "x", "y", "width", "height"};
static const trace::FunctionSig _eglPostSubBufferNV_sig = {2695, "eglPostSubBufferNV", 6, _eglPostSubBufferNV_args};

static const char * _eglQuerySurfacePointerANGLE_args[4] = {"dpy", "surface", "attribute", "value"};
static const trace::FunctionSig _eglQuerySurfacePointerANGLE_sig = {2696, "eglQuerySurfacePointerANGLE", 4, _eglQuerySurfacePointerANGLE_args};

static const char ** _eglGetSystemTimeFrequencyNV_args = NULL;
static const trace::FunctionSig _eglGetSystemTimeFrequencyNV_sig = {2697, "eglGetSystemTimeFrequencyNV", 0, _eglGetSystemTimeFrequencyNV_args};

static const char ** _eglGetSystemTimeNV_args = NULL;
static const trace::FunctionSig _eglGetSystemTimeNV_sig = {2698, "eglGetSystemTimeNV", 0, _eglGetSystemTimeNV_args};

static const char * _glEGLImageTargetTexture2DOES_args[2] = {"target", "image"};
static const trace::FunctionSig _glEGLImageTargetTexture2DOES_sig = {2699, "glEGLImageTargetTexture2DOES", 2, _glEGLImageTargetTexture2DOES_args};

static const char * _glEGLImageTargetRenderbufferStorageOES_args[2] = {"target", "image"};
static const trace::FunctionSig _glEGLImageTargetRenderbufferStorageOES_sig = {2700, "glEGLImageTargetRenderbufferStorageOES", 2, _glEGLImageTargetRenderbufferStorageOES_args};

#endif // REGAL_SYS_EGL

#if REGAL_SYS_GLX
static const char * _glXChooseVisual_args[3] = {"dpy", "screen", "attribList"};
static const trace::FunctionSig _glXChooseVisual_sig = {2701, "glXChooseVisual", 3, _glXChooseVisual_args};

static const char * _glXCreateContext_args[4] = {"dpy", "vis", "shareList", "direct"};
static const trace::FunctionSig _glXCreateContext_sig = {2702, "glXCreateContext", 4, _glXCreateContext_args};

static const char * _glXDestroyContext_args[2] = {"dpy", "ctx"};
static const trace::FunctionSig _glXDestroyContext_sig = {2703, "glXDestroyContext", 2, _glXDestroyContext_args};

static const char * _glXMakeCurrent_args[3] = {"dpy", "drawable", "ctx"};
static const trace::FunctionSig _glXMakeCurrent_sig = {2704, "glXMakeCurrent", 3, _glXMakeCurrent_args};

static const char * _glXCopyContext_args[4] = {"dpy", "src", "dst", "mask"};
static const trace::FunctionSig _glXCopyContext_sig = {2705, "glXCopyContext", 4, _glXCopyContext_args};

static const char * _glXSwapBuffers_args[2] = {"dpy", "drawable"};
static const trace::FunctionSig _glXSwapBuffers_sig = {2706, "glXSwapBuffers", 2, _glXSwapBuffers_args};

static const char * _glXCreateGLXPixmap_args[3] = {"dpy", "visual", "pixmap"};
static const trace::FunctionSig _glXCreateGLXPixmap_sig = {2707, "glXCreateGLXPixmap", 3, _glXCreateGLXPixmap_args};

static const char * _glXDestroyGLXPixmap_args[2] = {"dpy", "pixmap"};
static const trace::FunctionSig _glXDestroyGLXPixmap_sig = {2708, "glXDestroyGLXPixmap", 2, _glXDestroyGLXPixmap_args};

static const char * _glXQueryExtension_args[3] = {"dpy", "errorb", "event"};
static const trace::FunctionSig _glXQueryExtension_sig = {2709, "glXQueryExtension", 3, _glXQueryExtension_args};

static const char * _glXQueryVersion_args[3] = {"dpy", "maj", "min"};
static const trace::FunctionSig _glXQueryVersion_sig = {2710, "glXQueryVersion", 3, _glXQueryVersion_args};

static const char * _glXIsDirect_args[2] = {"dpy", "ctx"};
static const trace::FunctionSig _glXIsDirect_sig = {2711, "glXIsDirect", 2, _glXIsDirect_args};

static const char * _glXGetConfig_args[4] = {"dpy", "visual", "attrib", "value"};
static const trace::FunctionSig _glXGetConfig_sig = {2712, "glXGetConfig", 4, _glXGetConfig_args};

static const char ** _glXGetCurrentContext_args = NULL;
static const trace::FunctionSig _glXGetCurrentContext_sig = {2713, "glXGetCurrentContext", 0, _glXGetCurrentContext_args};

static const char ** _glXGetCurrentDrawable_args = NULL;
static const trace::FunctionSig _glXGetCurrentDrawable_sig = {2714, "glXGetCurrentDrawable", 0, _glXGetCurrentDrawable_args};

static const char ** _glXWaitGL_args = NULL;
static const trace::FunctionSig _glXWaitGL_sig = {2715, "glXWaitGL", 0, _glXWaitGL_args};

static const char ** _glXWaitX_args = NULL;
static const trace::FunctionSig _glXWaitX_sig = {2716, "glXWaitX", 0, _glXWaitX_args};

static const char * _glXUseXFont_args[4] = {"font", "first", "count", "list"};
static const trace::FunctionSig _glXUseXFont_sig = {2717, "glXUseXFont", 4, _glXUseXFont_args};

static const char * _glXQueryExtensionsString_args[2] = {"dpy", "screen"};
static const trace::FunctionSig _glXQueryExtensionsString_sig = {2718, "glXQueryExtensionsString", 2, _glXQueryExtensionsString_args};

static const char * _glXQueryServerString_args[3] = {"dpy", "screen", "name"};
static const trace::FunctionSig _glXQueryServerString_sig = {2719, "glXQueryServerString", 3, _glXQueryServerString_args};

static const char * _glXGetClientString_args[2] = {"dpy", "name"};
static const trace::FunctionSig _glXGetClientString_sig = {2720, "glXGetClientString", 2, _glXGetClientString_args};

static const char ** _glXGetCurrentDisplay_args = NULL;
static const trace::FunctionSig _glXGetCurrentDisplay_sig = {2721, "glXGetCurrentDisplay", 0, _glXGetCurrentDisplay_args};

static const char * _glXChooseFBConfig_args[4] = {"dpy", "screen", "attribList", "nitems"};
static const trace::FunctionSig _glXChooseFBConfig_sig = {2722, "glXChooseFBConfig", 4, _glXChooseFBConfig_args};

static const char * _glXGetFBConfigAttrib_args[4] = {"dpy", "config", "attribute", "value"};
static const trace::FunctionSig _glXGetFBConfigAttrib_sig = {2723, "glXGetFBConfigAttrib", 4, _glXGetFBConfigAttrib_args};

static const char * _glXGetFBConfigs_args[3] = {"dpy", "screen", "nelements"};
static const trace::FunctionSig _glXGetFBConfigs_sig = {2724, "glXGetFBConfigs", 3, _glXGetFBConfigs_args};

static const char * _glXGetVisualFromFBConfig_args[2] = {"dpy", "config"};
static const trace::FunctionSig _glXGetVisualFromFBConfig_sig = {2725, "glXGetVisualFromFBConfig", 2, _glXGetVisualFromFBConfig_args};

static const char * _glXCreateWindow_args[4] = {"dpy", "config", "win", "attribList"};
static const trace::FunctionSig _glXCreateWindow_sig = {2726, "glXCreateWindow", 4, _glXCreateWindow_args};

static const char * _glXDestroyWindow_args[2] = {"dpy", "window"};
static const trace::FunctionSig _glXDestroyWindow_sig = {2727, "glXDestroyWindow", 2, _glXDestroyWindow_args};

static const char * _glXCreatePixmap_args[4] = {"dpy", "config", "pixmap", "attribList"};
static const trace::FunctionSig _glXCreatePixmap_sig = {2728, "glXCreatePixmap", 4, _glXCreatePixmap_args};

static const char * _glXDestroyPixmap_args[2] = {"dpy", "pixmap"};
static const trace::FunctionSig _glXDestroyPixmap_sig = {2729, "glXDestroyPixmap", 2, _glXDestroyPixmap_args};

static const char * _glXCreatePbuffer_args[3] = {"dpy", "config", "attribList"};
static const trace::FunctionSig _glXCreatePbuffer_sig = {2730, "glXCreatePbuffer", 3, _glXCreatePbuffer_args};

static const char * _glXDestroyPbuffer_args[2] = {"dpy", "pbuf"};
static const trace::FunctionSig _glXDestroyPbuffer_sig = {2731, "glXDestroyPbuffer", 2, _glXDestroyPbuffer_args};

static const char * _glXQueryDrawable_args[4] = {"dpy", "draw", "attribute", "value"};
static const trace::FunctionSig _glXQueryDrawable_sig = {2732, "glXQueryDrawable", 4, _glXQueryDrawable_args};

static const char * _glXCreateNewContext_args[5] = {"dpy", "config", "renderType", "shareList", "direct"};
static const trace::FunctionSig _glXCreateNewContext_sig = {2733, "glXCreateNewContext", 5, _glXCreateNewContext_args};

static const char * _glXMakeContextCurrent_args[4] = {"dpy", "draw", "read", "ctx"};
static const trace::FunctionSig _glXMakeContextCurrent_sig = {2734, "glXMakeContextCurrent", 4, _glXMakeContextCurrent_args};

static const char ** _glXGetCurrentReadDrawable_args = NULL;
static const trace::FunctionSig _glXGetCurrentReadDrawable_sig = {2735, "glXGetCurrentReadDrawable", 0, _glXGetCurrentReadDrawable_args};

static const char * _glXQueryContext_args[4] = {"dpy", "ctx", "attribute", "value"};
static const trace::FunctionSig _glXQueryContext_sig = {2736, "glXQueryContext", 4, _glXQueryContext_args};

static const char * _glXSelectEvent_args[3] = {"dpy", "drawable", "mask"};
static const trace::FunctionSig _glXSelectEvent_sig = {2737, "glXSelectEvent", 3, _glXSelectEvent_args};

static const char * _glXGetSelectedEvent_args[3] = {"dpy", "drawable", "mask"};
static const trace::FunctionSig _glXGetSelectedEvent_sig = {2738, "glXGetSelectedEvent", 3, _glXGetSelectedEvent_args};

static const char * _glXCreateContextAttribsARB_args[5] = {"dpy", "config", "share_context", "direct", "attrib_list"};
static const trace::FunctionSig _glXCreateContextAttribsARB_sig = {2739, "glXCreateContextAttribsARB", 5, _glXCreateContextAttribsARB_args};

static const char * _glXSwapIntervalSGI_args[1] = {"interval"};
static const trace::FunctionSig _glXSwapIntervalSGI_sig = {2740, "glXSwapIntervalSGI", 1, _glXSwapIntervalSGI_args};

static const char * _glXGetVideoSyncSGI_args[1] = {"count"};
static const trace::FunctionSig _glXGetVideoSyncSGI_sig = {2741, "glXGetVideoSyncSGI", 1, _glXGetVideoSyncSGI_args};

static const char * _glXWaitVideoSyncSGI_args[3] = {"divisor", "remainder", "count"};
static const trace::FunctionSig _glXWaitVideoSyncSGI_sig = {2742, "glXWaitVideoSyncSGI", 3, _glXWaitVideoSyncSGI_args};

static const char * _glXMakeCurrentReadSGI_args[4] = {"dpy", "draw", "read", "ctx"};
static const trace::FunctionSig _glXMakeCurrentReadSGI_sig = {2743, "glXMakeCurrentReadSGI", 4, _glXMakeCurrentReadSGI_args};

static const char ** _glXGetCurrentReadDrawableSGI_args = NULL;
static const trace::FunctionSig _glXGetCurrentReadDrawableSGI_sig = {2744, "glXGetCurrentReadDrawableSGI", 0, _glXGetCurrentReadDrawableSGI_args};

static const char ** _glXGetCurrentDisplayEXT_args = NULL;
static const trace::FunctionSig _glXGetCurrentDisplayEXT_sig = {2745, "glXGetCurrentDisplayEXT", 0, _glXGetCurrentDisplayEXT_args};

static const char * _glXQueryContextInfoEXT_args[4] = {"dpy", "context", "attribute", "value"};
static const trace::FunctionSig _glXQueryContextInfoEXT_sig = {2746, "glXQueryContextInfoEXT", 4, _glXQueryContextInfoEXT_args};

static const char * _glXGetContextIDEXT_args[1] = {"context"};
static const trace::FunctionSig _glXGetContextIDEXT_sig = {2747, "glXGetContextIDEXT", 1, _glXGetContextIDEXT_args};

static const char * _glXImportContextEXT_args[2] = {"dpy", "contextID"};
static const trace::FunctionSig _glXImportContextEXT_sig = {2748, "glXImportContextEXT", 2, _glXImportContextEXT_args};

static const char * _glXFreeContextEXT_args[2] = {"dpy", "context"};
static const trace::FunctionSig _glXFreeContextEXT_sig = {2749, "glXFreeContextEXT", 2, _glXFreeContextEXT_args};

static const char * _glXGetFBConfigAttribSGIX_args[4] = {"dpy", "config", "attribute", "value"};
static const trace::FunctionSig _glXGetFBConfigAttribSGIX_sig = {2750, "glXGetFBConfigAttribSGIX", 4, _glXGetFBConfigAttribSGIX_args};

static const char * _glXChooseFBConfigSGIX_args[4] = {"dpy", "screen", "attrib_list", "nelements"};
static const trace::FunctionSig _glXChooseFBConfigSGIX_sig = {2751, "glXChooseFBConfigSGIX", 4, _glXChooseFBConfigSGIX_args};

static const char * _glXCreateGLXPixmapWithConfigSGIX_args[3] = {"dpy", "config", "pixmap"};
static const trace::FunctionSig _glXCreateGLXPixmapWithConfigSGIX_sig = {2752, "glXCreateGLXPixmapWithConfigSGIX", 3, _glXCreateGLXPixmapWithConfigSGIX_args};

static const char * _glXCreateContextWithConfigSGIX_args[5] = {"dpy", "config", "render_type", "share_list", "direct"};
static const trace::FunctionSig _glXCreateContextWithConfigSGIX_sig = {2753, "glXCreateContextWithConfigSGIX", 5, _glXCreateContextWithConfigSGIX_args};

static const char * _glXGetVisualFromFBConfigSGIX_args[2] = {"dpy", "config"};
static const trace::FunctionSig _glXGetVisualFromFBConfigSGIX_sig = {2754, "glXGetVisualFromFBConfigSGIX", 2, _glXGetVisualFromFBConfigSGIX_args};

static const char * _glXGetFBConfigFromVisualSGIX_args[2] = {"dpy", "vis"};
static const trace::FunctionSig _glXGetFBConfigFromVisualSGIX_sig = {2755, "glXGetFBConfigFromVisualSGIX", 2, _glXGetFBConfigFromVisualSGIX_args};

static const char * _glXCreateGLXPbufferSGIX_args[5] = {"dpy", "config", "width", "height", "attrib_list"};
static const trace::FunctionSig _glXCreateGLXPbufferSGIX_sig = {2756, "glXCreateGLXPbufferSGIX", 5, _glXCreateGLXPbufferSGIX_args};

static const char * _glXDestroyGLXPbufferSGIX_args[2] = {"dpy", "pbuf"};
static const trace::FunctionSig _glXDestroyGLXPbufferSGIX_sig = {2757, "glXDestroyGLXPbufferSGIX", 2, _glXDestroyGLXPbufferSGIX_args};

static const char * _glXQueryGLXPbufferSGIX_args[4] = {"dpy", "pbuf", "attribute", "value"};
static const trace::FunctionSig _glXQueryGLXPbufferSGIX_sig = {2758, "glXQueryGLXPbufferSGIX", 4, _glXQueryGLXPbufferSGIX_args};

static const char * _glXSelectEventSGIX_args[3] = {"dpy", "drawable", "mask"};
static const trace::FunctionSig _glXSelectEventSGIX_sig = {2759, "glXSelectEventSGIX", 3, _glXSelectEventSGIX_args};

static const char * _glXGetSelectedEventSGIX_args[3] = {"dpy", "drawable", "mask"};
static const trace::FunctionSig _glXGetSelectedEventSGIX_sig = {2760, "glXGetSelectedEventSGIX", 3, _glXGetSelectedEventSGIX_args};

static const char * _glXCushionSGI_args[3] = {"dpy", "window", "cushion"};
static const trace::FunctionSig _glXCushionSGI_sig = {2761, "glXCushionSGI", 3, _glXCushionSGI_args};

static const char * _glXBindChannelToWindowSGIX_args[4] = {"display", "screen", "channel", "window"};
static const trace::FunctionSig _glXBindChannelToWindowSGIX_sig = {2762, "glXBindChannelToWindowSGIX", 4, _glXBindChannelToWindowSGIX_args};

static const char * _glXChannelRectSGIX_args[7] = {"display", "screen", "channel", "x", "y", "w", "h"};
static const trace::FunctionSig _glXChannelRectSGIX_sig = {2763, "glXChannelRectSGIX", 7, _glXChannelRectSGIX_args};

static const char * _glXQueryChannelRectSGIX_args[7] = {"display", "screen", "channel", "dx", "dy", "dw", "dh"};
static const trace::FunctionSig _glXQueryChannelRectSGIX_sig = {2764, "glXQueryChannelRectSGIX", 7, _glXQueryChannelRectSGIX_args};

static const char * _glXQueryChannelDeltasSGIX_args[7] = {"display", "screen", "channel", "x", "y", "w", "h"};
static const trace::FunctionSig _glXQueryChannelDeltasSGIX_sig = {2765, "glXQueryChannelDeltasSGIX", 7, _glXQueryChannelDeltasSGIX_args};

static const char * _glXChannelRectSyncSGIX_args[4] = {"display", "screen", "channel", "synctype"};
static const trace::FunctionSig _glXChannelRectSyncSGIX_sig = {2766, "glXChannelRectSyncSGIX", 4, _glXChannelRectSyncSGIX_args};

static const char * _glXJoinSwapGroupSGIX_args[3] = {"dpy", "drawable", "member"};
static const trace::FunctionSig _glXJoinSwapGroupSGIX_sig = {2767, "glXJoinSwapGroupSGIX", 3, _glXJoinSwapGroupSGIX_args};

static const char * _glXBindSwapBarrierSGIX_args[3] = {"dpy", "drawable", "barrier"};
static const trace::FunctionSig _glXBindSwapBarrierSGIX_sig = {2768, "glXBindSwapBarrierSGIX", 3, _glXBindSwapBarrierSGIX_args};

static const char * _glXQueryMaxSwapBarriersSGIX_args[3] = {"dpy", "screen", "max"};
static const trace::FunctionSig _glXQueryMaxSwapBarriersSGIX_sig = {2769, "glXQueryMaxSwapBarriersSGIX", 3, _glXQueryMaxSwapBarriersSGIX_args};

static const char * _glXCopySubBufferMESA_args[6] = {"dpy", "drawable", "x", "y", "width", "height"};
static const trace::FunctionSig _glXCopySubBufferMESA_sig = {2770, "glXCopySubBufferMESA", 6, _glXCopySubBufferMESA_args};

static const char * _glXCreateGLXPixmapMESA_args[4] = {"dpy", "visual", "pixmap", "cmap"};
static const trace::FunctionSig _glXCreateGLXPixmapMESA_sig = {2771, "glXCreateGLXPixmapMESA", 4, _glXCreateGLXPixmapMESA_args};

static const char * _glXReleaseBuffersMESA_args[2] = {"dpy", "drawable"};
static const trace::FunctionSig _glXReleaseBuffersMESA_sig = {2772, "glXReleaseBuffersMESA", 2, _glXReleaseBuffersMESA_args};

static const char * _glXSet3DfxModeMESA_args[1] = {"mode"};
static const trace::FunctionSig _glXSet3DfxModeMESA_sig = {2773, "glXSet3DfxModeMESA", 1, _glXSet3DfxModeMESA_args};

static const char * _glXSwapIntervalMESA_args[1] = {"interval"};
static const trace::FunctionSig _glXSwapIntervalMESA_sig = {2774, "glXSwapIntervalMESA", 1, _glXSwapIntervalMESA_args};

static const char ** _glXGetSwapIntervalMESA_args = NULL;
static const trace::FunctionSig _glXGetSwapIntervalMESA_sig = {2775, "glXGetSwapIntervalMESA", 0, _glXGetSwapIntervalMESA_args};

static const char * _glXGetSyncValuesOML_args[5] = {"dpy", "drawable", "ust", "msc", "sbc"};
static const trace::FunctionSig _glXGetSyncValuesOML_sig = {2776, "glXGetSyncValuesOML", 5, _glXGetSyncValuesOML_args};

static const char * _glXGetMscRateOML_args[4] = {"dpy", "drawable", "numerator", "denominator"};
static const trace::FunctionSig _glXGetMscRateOML_sig = {2777, "glXGetMscRateOML", 4, _glXGetMscRateOML_args};

static const char * _glXSwapBuffersMscOML_args[5] = {"dpy", "drawable", "target_msc", "divisor", "remainder"};
static const trace::FunctionSig _glXSwapBuffersMscOML_sig = {2778, "glXSwapBuffersMscOML", 5, _glXSwapBuffersMscOML_args};

static const char * _glXWaitForMscOML_args[8] = {"dpy", "drawable", "target_msc", "divisor", "remainder", "ust", "msc", "sbc"};
static const trace::FunctionSig _glXWaitForMscOML_sig = {2779, "glXWaitForMscOML", 8, _glXWaitForMscOML_args};

static const char * _glXWaitForSbcOML_args[6] = {"dpy", "drawable", "target_sbc", "ust", "msc", "sbc"};
static const trace::FunctionSig _glXWaitForSbcOML_sig = {2780, "glXWaitForSbcOML", 6, _glXWaitForSbcOML_args};

static const char * _glXGetAGPOffsetMESA_args[1] = {"pointer"};
static const trace::FunctionSig _glXGetAGPOffsetMESA_sig = {2781, "glXGetAGPOffsetMESA", 1, _glXGetAGPOffsetMESA_args};

static const char * _glXBindTexImageEXT_args[4] = {"display", "drawable", "buffer", "attrib_list"};
static const trace::FunctionSig _glXBindTexImageEXT_sig = {2782, "glXBindTexImageEXT", 4, _glXBindTexImageEXT_args};

static const char * _glXReleaseTexImageEXT_args[3] = {"display", "drawable", "buffer"};
static const trace::FunctionSig _glXReleaseTexImageEXT_sig = {2783, "glXReleaseTexImageEXT", 3, _glXReleaseTexImageEXT_args};

static const char * _glXEnumerateVideoDevicesNV_args[3] = {"dpy", "screen", "nelements"};
static const trace::FunctionSig _glXEnumerateVideoDevicesNV_sig = {2784, "glXEnumerateVideoDevicesNV", 3, _glXEnumerateVideoDevicesNV_args};

static const char * _glXBindVideoDeviceNV_args[4] = {"dpy", "video_slot", "video_device", "attrib_list"};
static const trace::FunctionSig _glXBindVideoDeviceNV_sig = {2785, "glXBindVideoDeviceNV", 4, _glXBindVideoDeviceNV_args};

static const char * _glXGetVideoDeviceNV_args[4] = {"dpy", "screen", "numVideoDevices", "pVideoDevice"};
static const trace::FunctionSig _glXGetVideoDeviceNV_sig = {2786, "glXGetVideoDeviceNV", 4, _glXGetVideoDeviceNV_args};

static const char * _glXReleaseVideoDeviceNV_args[3] = {"dpy", "screen", "VideoDevice"};
static const trace::FunctionSig _glXReleaseVideoDeviceNV_sig = {2787, "glXReleaseVideoDeviceNV", 3, _glXReleaseVideoDeviceNV_args};

static const char * _glXBindVideoImageNV_args[4] = {"dpy", "VideoDevice", "pbuf", "iVideoBuffer"};
static const trace::FunctionSig _glXBindVideoImageNV_sig = {2788, "glXBindVideoImageNV", 4, _glXBindVideoImageNV_args};

static const char * _glXReleaseVideoImageNV_args[2] = {"dpy", "pbuf"};
static const trace::FunctionSig _glXReleaseVideoImageNV_sig = {2789, "glXReleaseVideoImageNV", 2, _glXReleaseVideoImageNV_args};

static const char * _glXSendPbufferToVideoNV_args[5] = {"dpy", "pbuf", "iBufferType", "pulCounterPbuffer", "bBlock"};
static const trace::FunctionSig _glXSendPbufferToVideoNV_sig = {2790, "glXSendPbufferToVideoNV", 5, _glXSendPbufferToVideoNV_args};

static const char * _glXGetVideoInfoNV_args[5] = {"dpy", "screen", "VideoDevice", "pulCounterOutputPbuffer", "pulCounterOutputVideo"};
static const trace::FunctionSig _glXGetVideoInfoNV_sig = {2791, "glXGetVideoInfoNV", 5, _glXGetVideoInfoNV_args};

static const char * _glXJoinSwapGroupNV_args[3] = {"dpy", "drawable", "group"};
static const trace::FunctionSig _glXJoinSwapGroupNV_sig = {2792, "glXJoinSwapGroupNV", 3, _glXJoinSwapGroupNV_args};

static const char * _glXBindSwapBarrierNV_args[3] = {"dpy", "group", "barrier"};
static const trace::FunctionSig _glXBindSwapBarrierNV_sig = {2793, "glXBindSwapBarrierNV", 3, _glXBindSwapBarrierNV_args};

static const char * _glXQuerySwapGroupNV_args[4] = {"dpy", "drawable", "group", "barrier"};
static const trace::FunctionSig _glXQuerySwapGroupNV_sig = {2794, "glXQuerySwapGroupNV", 4, _glXQuerySwapGroupNV_args};

static const char * _glXQueryMaxSwapGroupsNV_args[4] = {"dpy", "screen", "maxGroups", "maxBarriers"};
static const trace::FunctionSig _glXQueryMaxSwapGroupsNV_sig = {2795, "glXQueryMaxSwapGroupsNV", 4, _glXQueryMaxSwapGroupsNV_args};

static const char * _glXQueryFrameCountNV_args[3] = {"dpy", "screen", "count"};
static const trace::FunctionSig _glXQueryFrameCountNV_sig = {2796, "glXQueryFrameCountNV", 3, _glXQueryFrameCountNV_args};

static const char * _glXResetFrameCountNV_args[2] = {"dpy", "screen"};
static const trace::FunctionSig _glXResetFrameCountNV_sig = {2797, "glXResetFrameCountNV", 2, _glXResetFrameCountNV_args};

static const char * _glXBindVideoCaptureDeviceNV_args[3] = {"dpy", "video_capture_slot", "device"};
static const trace::FunctionSig _glXBindVideoCaptureDeviceNV_sig = {2798, "glXBindVideoCaptureDeviceNV", 3, _glXBindVideoCaptureDeviceNV_args};

static const char * _glXEnumerateVideoCaptureDevicesNV_args[3] = {"dpy", "screen", "nelements"};
static const trace::FunctionSig _glXEnumerateVideoCaptureDevicesNV_sig = {2799, "glXEnumerateVideoCaptureDevicesNV", 3, _glXEnumerateVideoCaptureDevicesNV_args};

static const char * _glXLockVideoCaptureDeviceNV_args[2] = {"dpy", "device"};
static const trace::FunctionSig _glXLockVideoCaptureDeviceNV_sig = {2800, "glXLockVideoCaptureDeviceNV", 2, _glXLockVideoCaptureDeviceNV_args};

static const char * _glXQueryVideoCaptureDeviceNV_args[4] = {"dpy", "device", "attribute", "value"};
static const trace::FunctionSig _glXQueryVideoCaptureDeviceNV_sig = {2801, "glXQueryVideoCaptureDeviceNV", 4, _glXQueryVideoCaptureDeviceNV_args};

static const char * _glXReleaseVideoCaptureDeviceNV_args[2] = {"dpy", "device"};
static const trace::FunctionSig _glXReleaseVideoCaptureDeviceNV_sig = {2802, "glXReleaseVideoCaptureDeviceNV", 2, _glXReleaseVideoCaptureDeviceNV_args};

static const char * _glXSwapIntervalEXT_args[3] = {"dpy", "drawable", "interval"};
static const trace::FunctionSig _glXSwapIntervalEXT_sig = {2803, "glXSwapIntervalEXT", 3, _glXSwapIntervalEXT_args};

static const char * _glXCopyImageSubDataNV_args[18] = {"dpy", "srcCtx", "srcName", "srcTarget", "srcLevel", "srcX", "srcY", "srcZ", "dstCtx", "dstName", "dstTarget", "dstLevel", "dstX", "dstY", "dstZ", "width", "height", "depth"};
static const trace::FunctionSig _glXCopyImageSubDataNV_sig = {2804, "glXCopyImageSubDataNV", 18, _glXCopyImageSubDataNV_args};

static const char * _glXAllocateMemoryNV_args[4] = {"size", "readfreq", "writefreq", "priority"};
static const trace::FunctionSig _glXAllocateMemoryNV_sig = {2805, "glXAllocateMemoryNV", 4, _glXAllocateMemoryNV_args};

static const char * _glXFreeMemoryNV_args[1] = {"pointer"};
static const trace::FunctionSig _glXFreeMemoryNV_sig = {2806, "glXFreeMemoryNV", 1, _glXFreeMemoryNV_args};

static const char * _glXGetProcAddressARB_args[1] = {"procName"};
static const trace::FunctionSig _glXGetProcAddressARB_sig = {2807, "glXGetProcAddressARB", 1, _glXGetProcAddressARB_args};

static const char * _glXGetProcAddress_args[1] = {"procName"};
static const trace::FunctionSig _glXGetProcAddress_sig = {2808, "glXGetProcAddress", 1, _glXGetProcAddress_args};

#endif // REGAL_SYS_GLX

#if REGAL_SYS_WGL
static const char * _wglCreateContext_args[1] = {"hdc"};
static const trace::FunctionSig _wglCreateContext_sig = {2809, "wglCreateContext", 1, _wglCreateContext_args};

static const char * _wglDeleteContext_args[1] = {"hglrc"};
static const trace::FunctionSig _wglDeleteContext_sig = {2810, "wglDeleteContext", 1, _wglDeleteContext_args};

static const char ** _wglGetCurrentContext_args = NULL;
static const trace::FunctionSig _wglGetCurrentContext_sig = {2811, "wglGetCurrentContext", 0, _wglGetCurrentContext_args};

static const char * _wglMakeCurrent_args[2] = {"hdc", "hglrc"};
static const trace::FunctionSig _wglMakeCurrent_sig = {2812, "wglMakeCurrent", 2, _wglMakeCurrent_args};

static const char * _wglCopyContext_args[3] = {"hglrcSrc", "hglrcDst", "mask"};
static const trace::FunctionSig _wglCopyContext_sig = {2813, "wglCopyContext", 3, _wglCopyContext_args};

static const char * _wglChoosePixelFormat_args[2] = {"hdc", "ppfd"};
static const trace::FunctionSig _wglChoosePixelFormat_sig = {2814, "wglChoosePixelFormat", 2, _wglChoosePixelFormat_args};

static const char * _wglDescribePixelFormat_args[4] = {"hdc", "iPixelFormat", "nBytes", "ppfd"};
static const trace::FunctionSig _wglDescribePixelFormat_sig = {2815, "wglDescribePixelFormat", 4, _wglDescribePixelFormat_args};

static const char ** _wglGetCurrentDC_args = NULL;
static const trace::FunctionSig _wglGetCurrentDC_sig = {2816, "wglGetCurrentDC", 0, _wglGetCurrentDC_args};

static const char * _wglGetDefaultProcAddress_args[1] = {"lpszProc"};
static const trace::FunctionSig _wglGetDefaultProcAddress_sig = {2817, "wglGetDefaultProcAddress", 1, _wglGetDefaultProcAddress_args};

static const char * _wglGetPixelFormat_args[1] = {"hdc"};
static const trace::FunctionSig _wglGetPixelFormat_sig = {2818, "wglGetPixelFormat", 1, _wglGetPixelFormat_args};

static const char * _wglSetPixelFormat_args[3] = {"hdc", "iPixelFormat", "ppfd"};
static const trace::FunctionSig _wglSetPixelFormat_sig = {2819, "wglSetPixelFormat", 3, _wglSetPixelFormat_args};

static const char * _wglSwapBuffers_args[1] = {"hdc"};
static const trace::FunctionSig _wglSwapBuffers_sig = {2820, "wglSwapBuffers", 1, _wglSwapBuffers_args};

static const char * _wglShareLists_args[2] = {"hglrc1", "hglrc2"};
static const trace::FunctionSig _wglShareLists_sig = {2821, "wglShareLists", 2, _wglShareLists_args};

static const char * _wglCreateLayerContext_args[2] = {"hdc", "iLayerPlane"};
static const trace::FunctionSig _wglCreateLayerContext_sig = {2822, "wglCreateLayerContext", 2, _wglCreateLayerContext_args};

static const char * _wglDescribeLayerPlane_args[5] = {"hdc", "iPixelFormat", "iLayerPlane", "nBytes", "plpd"};
static const trace::FunctionSig _wglDescribeLayerPlane_sig = {2823, "wglDescribeLayerPlane", 5, _wglDescribeLayerPlane_args};

static const char * _wglSetLayerPaletteEntries_args[5] = {"hdc", "iLayerPlane", "iStart", "cEntries", "pcr"};
static const trace::FunctionSig _wglSetLayerPaletteEntries_sig = {2824, "wglSetLayerPaletteEntries", 5, _wglSetLayerPaletteEntries_args};

static const char * _wglGetLayerPaletteEntries_args[5] = {"hdc", "iLayerPlane", "iStart", "cEntries", "pcr"};
static const trace::FunctionSig _wglGetLayerPaletteEntries_sig = {2825, "wglGetLayerPaletteEntries", 5, _wglGetLayerPaletteEntries_args};

static const char * _wglRealizeLayerPalette_args[3] = {"hdc", "iLayerPlane", "bRealize"};
static const trace::FunctionSig _wglRealizeLayerPalette_sig = {2826, "wglRealizeLayerPalette", 3, _wglRealizeLayerPalette_args};

static const char * _wglSwapLayerBuffers_args[2] = {"hdc", "fuPlanes"};
static const trace::FunctionSig _wglSwapLayerBuffers_sig = {2827, "wglSwapLayerBuffers", 2, _wglSwapLayerBuffers_args};

static const char * _wglUseFontBitmapsA_args[4] = {"hdc", "first", "count", "listBase"};
static const trace::FunctionSig _wglUseFontBitmapsA_sig = {2828, "wglUseFontBitmapsA", 4, _wglUseFontBitmapsA_args};

static const char * _wglUseFontBitmapsW_args[4] = {"hdc", "first", "count", "listBase"};
static const trace::FunctionSig _wglUseFontBitmapsW_sig = {2829, "wglUseFontBitmapsW", 4, _wglUseFontBitmapsW_args};

static const char * _wglSwapMultipleBuffers_args[2] = {"n", "ps"};
static const trace::FunctionSig _wglSwapMultipleBuffers_sig = {2830, "wglSwapMultipleBuffers", 2, _wglSwapMultipleBuffers_args};

static const char * _wglUseFontOutlinesA_args[8] = {"hdc", "first", "count", "listBase", "deviation", "extrusion", "format", "lpgmf"};
static const trace::FunctionSig _wglUseFontOutlinesA_sig = {2831, "wglUseFontOutlinesA", 8, _wglUseFontOutlinesA_args};

static const char * _wglUseFontOutlinesW_args[8] = {"hdc", "first", "count", "listBase", "deviation", "extrusion", "format", "lpgmf"};
static const trace::FunctionSig _wglUseFontOutlinesW_sig = {2832, "wglUseFontOutlinesW", 8, _wglUseFontOutlinesW_args};

static const char * _wglCreateBufferRegionARB_args[3] = {"hDC", "iLayerPlane", "uType"};
static const trace::FunctionSig _wglCreateBufferRegionARB_sig = {2833, "wglCreateBufferRegionARB", 3, _wglCreateBufferRegionARB_args};

static const char * _wglDeleteBufferRegionARB_args[1] = {"hRegion"};
static const trace::FunctionSig _wglDeleteBufferRegionARB_sig = {2834, "wglDeleteBufferRegionARB", 1, _wglDeleteBufferRegionARB_args};

static const char * _wglSaveBufferRegionARB_args[5] = {"hRegion", "x", "y", "width", "height"};
static const trace::FunctionSig _wglSaveBufferRegionARB_sig = {2835, "wglSaveBufferRegionARB", 5, _wglSaveBufferRegionARB_args};

static const char * _wglRestoreBufferRegionARB_args[7] = {"hRegion", "x", "y", "width", "height", "xSrc", "ySrc"};
static const trace::FunctionSig _wglRestoreBufferRegionARB_sig = {2836, "wglRestoreBufferRegionARB", 7, _wglRestoreBufferRegionARB_args};

static const char * _wglGetExtensionsStringARB_args[1] = {"hdc"};
static const trace::FunctionSig _wglGetExtensionsStringARB_sig = {2837, "wglGetExtensionsStringARB", 1, _wglGetExtensionsStringARB_args};

static const char * _wglGetPixelFormatAttribivARB_args[6] = {"hdc", "iPixelFormat", "iLayerPlane", "nAttributes", "piAttributes", "piValues"};
static const trace::FunctionSig _wglGetPixelFormatAttribivARB_sig = {2838, "wglGetPixelFormatAttribivARB", 6, _wglGetPixelFormatAttribivARB_args};

static const char * _wglGetPixelFormatAttribfvARB_args[6] = {"hdc", "iPixelFormat", "iLayerPlane", "nAttributes", "piAttributes", "pfValues"};
static const trace::FunctionSig _wglGetPixelFormatAttribfvARB_sig = {2839, "wglGetPixelFormatAttribfvARB", 6, _wglGetPixelFormatAttribfvARB_args};

static const char * _wglChoosePixelFormatARB_args[6] = {"hdc", "piAttribIList", "pfAttribFList", "nMaxFormats", "piFormats", "nNumFormats"};
static const trace::FunctionSig _wglChoosePixelFormatARB_sig = {2840, "wglChoosePixelFormatARB", 6, _wglChoosePixelFormatARB_args};

static const char * _wglMakeContextCurrentARB_args[3] = {"hDrawDC", "hReadDC", "hglrc"};
static const trace::FunctionSig _wglMakeContextCurrentARB_sig = {2841, "wglMakeContextCurrentARB", 3, _wglMakeContextCurrentARB_args};

static const char ** _wglGetCurrentReadDCARB_args = NULL;
static const trace::FunctionSig _wglGetCurrentReadDCARB_sig = {2842, "wglGetCurrentReadDCARB", 0, _wglGetCurrentReadDCARB_args};

static const char * _wglCreatePbufferARB_args[5] = {"hDC", "iPixelFormat", "iWidth", "iHeight", "piAttribList"};
static const trace::FunctionSig _wglCreatePbufferARB_sig = {2843, "wglCreatePbufferARB", 5, _wglCreatePbufferARB_args};

static const char * _wglGetPbufferDCARB_args[1] = {"hPbuffer"};
static const trace::FunctionSig _wglGetPbufferDCARB_sig = {2844, "wglGetPbufferDCARB", 1, _wglGetPbufferDCARB_args};

static const char * _wglReleasePbufferDCARB_args[2] = {"hPbuffer", "hDC"};
static const trace::FunctionSig _wglReleasePbufferDCARB_sig = {2845, "wglReleasePbufferDCARB", 2, _wglReleasePbufferDCARB_args};

static const char * _wglDestroyPbufferARB_args[1] = {"hPbuffer"};
static const trace::FunctionSig _wglDestroyPbufferARB_sig = {2846, "wglDestroyPbufferARB", 1, _wglDestroyPbufferARB_args};

static const char * _wglQueryPbufferARB_args[3] = {"hPbuffer", "iAttribute", "piValue"};
static const trace::FunctionSig _wglQueryPbufferARB_sig = {2847, "wglQueryPbufferARB", 3, _wglQueryPbufferARB_args};

static const char * _wglBindTexImageARB_args[2] = {"hPbuffer", "iBuffer"};
static const trace::FunctionSig _wglBindTexImageARB_sig = {2848, "wglBindTexImageARB", 2, _wglBindTexImageARB_args};

static const char * _wglReleaseTexImageARB_args[2] = {"hPbuffer", "iBuffer"};
static const trace::FunctionSig _wglReleaseTexImageARB_sig = {2849, "wglReleaseTexImageARB", 2, _wglReleaseTexImageARB_args};

static const char * _wglSetPbufferAttribARB_args[2] = {"hPbuffer", "piAttribList"};
static const trace::FunctionSig _wglSetPbufferAttribARB_sig = {2850, "wglSetPbufferAttribARB", 2, _wglSetPbufferAttribARB_args};

static const char * _wglCreateContextAttribsARB_args[3] = {"hDC", "hShareContext", "attribList"};
static const trace::FunctionSig _wglCreateContextAttribsARB_sig = {2851, "wglCreateContextAttribsARB", 3, _wglCreateContextAttribsARB_args};

static const char * _wglCreateDisplayColorTableEXT_args[1] = {"id"};
static const trace::FunctionSig _wglCreateDisplayColorTableEXT_sig = {2852, "wglCreateDisplayColorTableEXT", 1, _wglCreateDisplayColorTableEXT_args};

static const char * _wglLoadDisplayColorTableEXT_args[2] = {"table", "length"};
static const trace::FunctionSig _wglLoadDisplayColorTableEXT_sig = {2853, "wglLoadDisplayColorTableEXT", 2, _wglLoadDisplayColorTableEXT_args};

static const char * _wglBindDisplayColorTableEXT_args[1] = {"id"};
static const trace::FunctionSig _wglBindDisplayColorTableEXT_sig = {2854, "wglBindDisplayColorTableEXT", 1, _wglBindDisplayColorTableEXT_args};

static const char * _wglDestroyDisplayColorTableEXT_args[1] = {"id"};
static const trace::FunctionSig _wglDestroyDisplayColorTableEXT_sig = {2855, "wglDestroyDisplayColorTableEXT", 1, _wglDestroyDisplayColorTableEXT_args};

static const char ** _wglGetExtensionsStringEXT_args = NULL;
static const trace::FunctionSig _wglGetExtensionsStringEXT_sig = {2856, "wglGetExtensionsStringEXT", 0, _wglGetExtensionsStringEXT_args};

static const char * _wglMakeContextCurrentEXT_args[3] = {"hDrawDC", "hReadDC", "hglrc"};
static const trace::FunctionSig _wglMakeContextCurrentEXT_sig = {2857, "wglMakeContextCurrentEXT", 3, _wglMakeContextCurrentEXT_args};

static const char ** _wglGetCurrentReadDCEXT_args = NULL;
static const trace::FunctionSig _wglGetCurrentReadDCEXT_sig = {2858, "wglGetCurrentReadDCEXT", 0, _wglGetCurrentReadDCEXT_args};

static const char * _wglCreatePbufferEXT_args[5] = {"hDC", "iPixelFormat", "iWidth", "iHeight", "piAttribList"};
static const trace::FunctionSig _wglCreatePbufferEXT_sig = {2859, "wglCreatePbufferEXT", 5, _wglCreatePbufferEXT_args};

static const char * _wglGetPbufferDCEXT_args[1] = {"hPbuffer"};
static const trace::FunctionSig _wglGetPbufferDCEXT_sig = {2860, "wglGetPbufferDCEXT", 1, _wglGetPbufferDCEXT_args};

static const char * _wglReleasePbufferDCEXT_args[2] = {"hPbuffer", "hDC"};
static const trace::FunctionSig _wglReleasePbufferDCEXT_sig = {2861, "wglReleasePbufferDCEXT", 2, _wglReleasePbufferDCEXT_args};

static const char * _wglDestroyPbufferEXT_args[1] = {"hPbuffer"};
static const trace::FunctionSig _wglDestroyPbufferEXT_sig = {2862, "wglDestroyPbufferEXT", 1, _wglDestroyPbufferEXT_args};

static const char * _wglQueryPbufferEXT_args[3] = {"hPbuffer", "iAttribute", "piValue"};
static const trace::FunctionSig _wglQueryPbufferEXT_sig = {2863, "wglQueryPbufferEXT", 3, _wglQueryPbufferEXT_args};

static const char * _wglGetPixelFormatAttribivEXT_args[6] = {"hdc", "iPixelFormat", "iLayerPlane", "nAttributes", "piAttributes", "piValues"};
static const trace::FunctionSig _wglGetPixelFormatAttribivEXT_sig = {2864, "wglGetPixelFormatAttribivEXT", 6, _wglGetPixelFormatAttribivEXT_args};

static const char * _wglGetPixelFormatAttribfvEXT_args[6] = {"hdc", "iPixelFormat", "iLayerPlane", "nAttributes", "piAttributes", "pfValues"};
static const trace::FunctionSig _wglGetPixelFormatAttribfvEXT_sig = {2865, "wglGetPixelFormatAttribfvEXT", 6, _wglGetPixelFormatAttribfvEXT_args};

static const char * _wglChoosePixelFormatEXT_args[6] = {"hdc", "piAttribIList", "pfAttribFList", "nMaxFormats", "piFormats", "nNumFormats"};
static const trace::FunctionSig _wglChoosePixelFormatEXT_sig = {2866, "wglChoosePixelFormatEXT", 6, _wglChoosePixelFormatEXT_args};

static const char * _wglSwapIntervalEXT_args[1] = {"interval"};
static const trace::FunctionSig _wglSwapIntervalEXT_sig = {2867, "wglSwapIntervalEXT", 1, _wglSwapIntervalEXT_args};

static const char ** _wglGetSwapIntervalEXT_args = NULL;
static const trace::FunctionSig _wglGetSwapIntervalEXT_sig = {2868, "wglGetSwapIntervalEXT", 0, _wglGetSwapIntervalEXT_args};

static const char * _wglAllocateMemoryNV_args[4] = {"size", "readfreq", "writefreq", "priority"};
static const trace::FunctionSig _wglAllocateMemoryNV_sig = {2869, "wglAllocateMemoryNV", 4, _wglAllocateMemoryNV_args};

static const char * _wglFreeMemoryNV_args[1] = {"pointer"};
static const trace::FunctionSig _wglFreeMemoryNV_sig = {2870, "wglFreeMemoryNV", 1, _wglFreeMemoryNV_args};

static const char * _wglGetSyncValuesOML_args[4] = {"hdc", "ust", "msc", "sbc"};
static const trace::FunctionSig _wglGetSyncValuesOML_sig = {2871, "wglGetSyncValuesOML", 4, _wglGetSyncValuesOML_args};

static const char * _wglGetMscRateOML_args[3] = {"hdc", "numerator", "denominator"};
static const trace::FunctionSig _wglGetMscRateOML_sig = {2872, "wglGetMscRateOML", 3, _wglGetMscRateOML_args};

static const char * _wglSwapBuffersMscOML_args[4] = {"hdc", "target_msc", "divisor", "remainder"};
static const trace::FunctionSig _wglSwapBuffersMscOML_sig = {2873, "wglSwapBuffersMscOML", 4, _wglSwapBuffersMscOML_args};

static const char * _wglSwapLayerBuffersMscOML_args[5] = {"hdc", "fuPlanes", "target_msc", "divisor", "remainder"};
static const trace::FunctionSig _wglSwapLayerBuffersMscOML_sig = {2874, "wglSwapLayerBuffersMscOML", 5, _wglSwapLayerBuffersMscOML_args};

static const char * _wglWaitForMscOML_args[7] = {"hdc", "target_msc", "divisor", "remainder", "ust", "msc", "sbc"};
static const trace::FunctionSig _wglWaitForMscOML_sig = {2875, "wglWaitForMscOML", 7, _wglWaitForMscOML_args};

static const char * _wglWaitForSbcOML_args[5] = {"hdc", "target_sbc", "ust", "msc", "sbc"};
static const trace::FunctionSig _wglWaitForSbcOML_sig = {2876, "wglWaitForSbcOML", 5, _wglWaitForSbcOML_args};

static const char * _wglGetDigitalVideoParametersI3D_args[3] = {"hDC", "iAttribute", "piValue"};
static const trace::FunctionSig _wglGetDigitalVideoParametersI3D_sig = {2877, "wglGetDigitalVideoParametersI3D", 3, _wglGetDigitalVideoParametersI3D_args};

static const char * _wglSetDigitalVideoParametersI3D_args[3] = {"hDC", "iAttribute", "piValue"};
static const trace::FunctionSig _wglSetDigitalVideoParametersI3D_sig = {2878, "wglSetDigitalVideoParametersI3D", 3, _wglSetDigitalVideoParametersI3D_args};

static const char * _wglGetGammaTableParametersI3D_args[3] = {"hDC", "iAttribute", "piValue"};
static const trace::FunctionSig _wglGetGammaTableParametersI3D_sig = {2879, "wglGetGammaTableParametersI3D", 3, _wglGetGammaTableParametersI3D_args};

static const char * _wglSetGammaTableParametersI3D_args[3] = {"hDC", "iAttribute", "piValue"};
static const trace::FunctionSig _wglSetGammaTableParametersI3D_sig = {2880, "wglSetGammaTableParametersI3D", 3, _wglSetGammaTableParametersI3D_args};

static const char * _wglGetGammaTableI3D_args[5] = {"hDC", "iEntries", "puRed", "puGreen", "puBlue"};
static const trace::FunctionSig _wglGetGammaTableI3D_sig = {2881, "wglGetGammaTableI3D", 5, _wglGetGammaTableI3D_args};

static const char * _wglSetGammaTableI3D_args[5] = {"hDC", "iEntries", "puRed", "puGreen", "puBlue"};
static const trace::FunctionSig _wglSetGammaTableI3D_sig = {2882, "wglSetGammaTableI3D", 5, _wglSetGammaTableI3D_args};

static const char * _wglEnableGenlockI3D_args[1] = {"hDC"};
static const trace::FunctionSig _wglEnableGenlockI3D_sig = {2883, "wglEnableGenlockI3D", 1, _wglEnableGenlockI3D_args};

static const char * _wglDisableGenlockI3D_args[1] = {"hDC"};
static const trace::FunctionSig _wglDisableGenlockI3D_sig = {2884, "wglDisableGenlockI3D", 1, _wglDisableGenlockI3D_args};

static const char * _wglIsEnabledGenlockI3D_args[2] = {"hDC", "pFlag"};
static const trace::FunctionSig _wglIsEnabledGenlockI3D_sig = {2885, "wglIsEnabledGenlockI3D", 2, _wglIsEnabledGenlockI3D_args};

static const char * _wglGenlockSourceI3D_args[2] = {"hDC", "uSource"};
static const trace::FunctionSig _wglGenlockSourceI3D_sig = {2886, "wglGenlockSourceI3D", 2, _wglGenlockSourceI3D_args};

static const char * _wglGetGenlockSourceI3D_args[2] = {"hDC", "uSource"};
static const trace::FunctionSig _wglGetGenlockSourceI3D_sig = {2887, "wglGetGenlockSourceI3D", 2, _wglGetGenlockSourceI3D_args};

static const char * _wglGenlockSourceEdgeI3D_args[2] = {"hDC", "uEdge"};
static const trace::FunctionSig _wglGenlockSourceEdgeI3D_sig = {2888, "wglGenlockSourceEdgeI3D", 2, _wglGenlockSourceEdgeI3D_args};

static const char * _wglGetGenlockSourceEdgeI3D_args[2] = {"hDC", "uEdge"};
static const trace::FunctionSig _wglGetGenlockSourceEdgeI3D_sig = {2889, "wglGetGenlockSourceEdgeI3D", 2, _wglGetGenlockSourceEdgeI3D_args};

static const char * _wglGenlockSampleRateI3D_args[2] = {"hDC", "uRate"};
static const trace::FunctionSig _wglGenlockSampleRateI3D_sig = {2890, "wglGenlockSampleRateI3D", 2, _wglGenlockSampleRateI3D_args};

static const char * _wglGetGenlockSampleRateI3D_args[2] = {"hDC", "uRate"};
static const trace::FunctionSig _wglGetGenlockSampleRateI3D_sig = {2891, "wglGetGenlockSampleRateI3D", 2, _wglGetGenlockSampleRateI3D_args};

static const char * _wglGenlockSourceDelayI3D_args[2] = {"hDC", "uDelay"};
static const trace::FunctionSig _wglGenlockSourceDelayI3D_sig = {2892, "wglGenlockSourceDelayI3D", 2, _wglGenlockSourceDelayI3D_args};

static const char * _wglGetGenlockSourceDelayI3D_args[2] = {"hDC", "uDelay"};
static const trace::FunctionSig _wglGetGenlockSourceDelayI3D_sig = {2893, "wglGetGenlockSourceDelayI3D", 2, _wglGetGenlockSourceDelayI3D_args};

static const char * _wglQueryGenlockMaxSourceDelayI3D_args[3] = {"hDC", "uMaxLineDelay", "uMaxPixelDelay"};
static const trace::FunctionSig _wglQueryGenlockMaxSourceDelayI3D_sig = {2894, "wglQueryGenlockMaxSourceDelayI3D", 3, _wglQueryGenlockMaxSourceDelayI3D_args};

static const char * _wglCreateImageBufferI3D_args[3] = {"hDC", "dwSize", "uFlags"};
static const trace::FunctionSig _wglCreateImageBufferI3D_sig = {2895, "wglCreateImageBufferI3D", 3, _wglCreateImageBufferI3D_args};

static const char * _wglDestroyImageBufferI3D_args[2] = {"hDC", "pAddress"};
static const trace::FunctionSig _wglDestroyImageBufferI3D_sig = {2896, "wglDestroyImageBufferI3D", 2, _wglDestroyImageBufferI3D_args};

static const char * _wglAssociateImageBufferEventsI3D_args[5] = {"hDC", "pEvent", "pAddress", "pSize", "count"};
static const trace::FunctionSig _wglAssociateImageBufferEventsI3D_sig = {2897, "wglAssociateImageBufferEventsI3D", 5, _wglAssociateImageBufferEventsI3D_args};

static const char * _wglReleaseImageBufferEventsI3D_args[3] = {"hDC", "pAddress", "count"};
static const trace::FunctionSig _wglReleaseImageBufferEventsI3D_sig = {2898, "wglReleaseImageBufferEventsI3D", 3, _wglReleaseImageBufferEventsI3D_args};

static const char ** _wglEnableFrameLockI3D_args = NULL;
static const trace::FunctionSig _wglEnableFrameLockI3D_sig = {2899, "wglEnableFrameLockI3D", 0, _wglEnableFrameLockI3D_args};

static const char ** _wglDisableFrameLockI3D_args = NULL;
static const trace::FunctionSig _wglDisableFrameLockI3D_sig = {2900, "wglDisableFrameLockI3D", 0, _wglDisableFrameLockI3D_args};

static const char * _wglIsEnabledFrameLockI3D_args[1] = {"pFlag"};
static const trace::FunctionSig _wglIsEnabledFrameLockI3D_sig = {2901, "wglIsEnabledFrameLockI3D", 1, _wglIsEnabledFrameLockI3D_args};

static const char * _wglQueryFrameLockMasterI3D_args[1] = {"pFlag"};
static const trace::FunctionSig _wglQueryFrameLockMasterI3D_sig = {2902, "wglQueryFrameLockMasterI3D", 1, _wglQueryFrameLockMasterI3D_args};

static const char * _wglGetFrameUsageI3D_args[1] = {"pUsage"};
static const trace::FunctionSig _wglGetFrameUsageI3D_sig = {2903, "wglGetFrameUsageI3D", 1, _wglGetFrameUsageI3D_args};

static const char ** _wglBeginFrameTrackingI3D_args = NULL;
static const trace::FunctionSig _wglBeginFrameTrackingI3D_sig = {2904, "wglBeginFrameTrackingI3D", 0, _wglBeginFrameTrackingI3D_args};

static const char ** _wglEndFrameTrackingI3D_args = NULL;
static const trace::FunctionSig _wglEndFrameTrackingI3D_sig = {2905, "wglEndFrameTrackingI3D", 0, _wglEndFrameTrackingI3D_args};

static const char * _wglQueryFrameTrackingI3D_args[3] = {"pFrameCount", "pMissedFrames", "pLastMissedUsage"};
static const trace::FunctionSig _wglQueryFrameTrackingI3D_sig = {2906, "wglQueryFrameTrackingI3D", 3, _wglQueryFrameTrackingI3D_args};

static const char * _wglSetStereoEmitterState3DL_args[2] = {"hDC", "uState"};
static const trace::FunctionSig _wglSetStereoEmitterState3DL_sig = {2907, "wglSetStereoEmitterState3DL", 2, _wglSetStereoEmitterState3DL_args};

static const char * _wglEnumerateVideoDevicesNV_args[2] = {"hDC", "phDeviceList"};
static const trace::FunctionSig _wglEnumerateVideoDevicesNV_sig = {2908, "wglEnumerateVideoDevicesNV", 2, _wglEnumerateVideoDevicesNV_args};

static const char * _wglBindVideoDeviceNV_args[4] = {"hDC", "uVideoSlot", "hVideoDevice", "piAttribList"};
static const trace::FunctionSig _wglBindVideoDeviceNV_sig = {2909, "wglBindVideoDeviceNV", 4, _wglBindVideoDeviceNV_args};

static const char * _wglQueryCurrentContextNV_args[2] = {"iAttribute", "piValue"};
static const trace::FunctionSig _wglQueryCurrentContextNV_sig = {2910, "wglQueryCurrentContextNV", 2, _wglQueryCurrentContextNV_args};

static const char * _wglGetVideoDeviceNV_args[3] = {"hDC", "numDevices", "hVideoDevice"};
static const trace::FunctionSig _wglGetVideoDeviceNV_sig = {2911, "wglGetVideoDeviceNV", 3, _wglGetVideoDeviceNV_args};

static const char * _wglReleaseVideoDeviceNV_args[1] = {"hVideoDevice"};
static const trace::FunctionSig _wglReleaseVideoDeviceNV_sig = {2912, "wglReleaseVideoDeviceNV", 1, _wglReleaseVideoDeviceNV_args};

static const char * _wglBindVideoImageNV_args[3] = {"hVideoDevice", "hPbuffer", "iVideoBuffer"};
static const trace::FunctionSig _wglBindVideoImageNV_sig = {2913, "wglBindVideoImageNV", 3, _wglBindVideoImageNV_args};

static const char * _wglReleaseVideoImageNV_args[2] = {"hPbuffer", "iVideoBuffer"};
static const trace::FunctionSig _wglReleaseVideoImageNV_sig = {2914, "wglReleaseVideoImageNV", 2, _wglReleaseVideoImageNV_args};

static const char * _wglSendPbufferToVideoNV_args[4] = {"hPbuffer", "iBufferType", "pulCounterPbuffer", "bBlock"};
static const trace::FunctionSig _wglSendPbufferToVideoNV_sig = {2915, "wglSendPbufferToVideoNV", 4, _wglSendPbufferToVideoNV_args};

static const char * _wglGetVideoInfoNV_args[3] = {"hpVideoDevice", "pulCounterOutputPbuffer", "pulCounterOutputVideo"};
static const trace::FunctionSig _wglGetVideoInfoNV_sig = {2916, "wglGetVideoInfoNV", 3, _wglGetVideoInfoNV_args};

static const char * _wglJoinSwapGroupNV_args[2] = {"hDC", "group"};
static const trace::FunctionSig _wglJoinSwapGroupNV_sig = {2917, "wglJoinSwapGroupNV", 2, _wglJoinSwapGroupNV_args};

static const char * _wglBindSwapBarrierNV_args[2] = {"group", "barrier"};
static const trace::FunctionSig _wglBindSwapBarrierNV_sig = {2918, "wglBindSwapBarrierNV", 2, _wglBindSwapBarrierNV_args};

static const char * _wglQuerySwapGroupNV_args[3] = {"hDC", "group", "barrier"};
static const trace::FunctionSig _wglQuerySwapGroupNV_sig = {2919, "wglQuerySwapGroupNV", 3, _wglQuerySwapGroupNV_args};

static const char * _wglQueryMaxSwapGroupsNV_args[3] = {"hDC", "maxGroups", "maxBarriers"};
static const trace::FunctionSig _wglQueryMaxSwapGroupsNV_sig = {2920, "wglQueryMaxSwapGroupsNV", 3, _wglQueryMaxSwapGroupsNV_args};

static const char * _wglQueryFrameCountNV_args[2] = {"hDC", "count"};
static const trace::FunctionSig _wglQueryFrameCountNV_sig = {2921, "wglQueryFrameCountNV", 2, _wglQueryFrameCountNV_args};

static const char * _wglResetFrameCountNV_args[1] = {"hDC"};
static const trace::FunctionSig _wglResetFrameCountNV_sig = {2922, "wglResetFrameCountNV", 1, _wglResetFrameCountNV_args};

static const char * _wglEnumGpusNV_args[2] = {"iGpuIndex", "phGpu"};
static const trace::FunctionSig _wglEnumGpusNV_sig = {2923, "wglEnumGpusNV", 2, _wglEnumGpusNV_args};

static const char * _wglEnumGpuDevicesNV_args[3] = {"hGpu", "iDeviceIndex", "lpGpuDevice"};
static const trace::FunctionSig _wglEnumGpuDevicesNV_sig = {2924, "wglEnumGpuDevicesNV", 3, _wglEnumGpuDevicesNV_args};

static const char * _wglCreateAffinityDCNV_args[1] = {"phGpuList"};
static const trace::FunctionSig _wglCreateAffinityDCNV_sig = {2925, "wglCreateAffinityDCNV", 1, _wglCreateAffinityDCNV_args};

static const char * _wglEnumGpusFromAffinityDCNV_args[3] = {"hAffinityDC", "iGpuIndex", "hGpu"};
static const trace::FunctionSig _wglEnumGpusFromAffinityDCNV_sig = {2926, "wglEnumGpusFromAffinityDCNV", 3, _wglEnumGpusFromAffinityDCNV_args};

static const char * _wglDeleteDCNV_args[1] = {"hdc"};
static const trace::FunctionSig _wglDeleteDCNV_sig = {2927, "wglDeleteDCNV", 1, _wglDeleteDCNV_args};

static const char * _wglGetGPUIDsAMD_args[2] = {"maxCount", "ids"};
static const trace::FunctionSig _wglGetGPUIDsAMD_sig = {2928, "wglGetGPUIDsAMD", 2, _wglGetGPUIDsAMD_args};

static const char * _wglGetGPUInfoAMD_args[5] = {"id", "property", "dataType", "size", "data"};
static const trace::FunctionSig _wglGetGPUInfoAMD_sig = {2929, "wglGetGPUInfoAMD", 5, _wglGetGPUInfoAMD_args};

static const char * _wglGetContextGPUIDAMD_args[1] = {"hglrc"};
static const trace::FunctionSig _wglGetContextGPUIDAMD_sig = {2930, "wglGetContextGPUIDAMD", 1, _wglGetContextGPUIDAMD_args};

static const char * _wglCreateAssociatedContextAMD_args[1] = {"id"};
static const trace::FunctionSig _wglCreateAssociatedContextAMD_sig = {2931, "wglCreateAssociatedContextAMD", 1, _wglCreateAssociatedContextAMD_args};

static const char * _wglCreateAssociatedContextAttribsAMD_args[3] = {"id", "hShareContext", "attribList"};
static const trace::FunctionSig _wglCreateAssociatedContextAttribsAMD_sig = {2932, "wglCreateAssociatedContextAttribsAMD", 3, _wglCreateAssociatedContextAttribsAMD_args};

static const char * _wglDeleteAssociatedContextAMD_args[1] = {"hglrc"};
static const trace::FunctionSig _wglDeleteAssociatedContextAMD_sig = {2933, "wglDeleteAssociatedContextAMD", 1, _wglDeleteAssociatedContextAMD_args};

static const char * _wglMakeAssociatedContextCurrentAMD_args[1] = {"hglrc"};
static const trace::FunctionSig _wglMakeAssociatedContextCurrentAMD_sig = {2934, "wglMakeAssociatedContextCurrentAMD", 1, _wglMakeAssociatedContextCurrentAMD_args};

static const char ** _wglGetCurrentAssociatedContextAMD_args = NULL;
static const trace::FunctionSig _wglGetCurrentAssociatedContextAMD_sig = {2935, "wglGetCurrentAssociatedContextAMD", 0, _wglGetCurrentAssociatedContextAMD_args};

static const char * _wglBlitContextFramebufferAMD_args[11] = {"dstCtx", "srcX0", "srcY0", "srcX1", "srcY1", "dstX0", "dstY0", "dstX1", "dstY1", "mask", "filter"};
static const trace::FunctionSig _wglBlitContextFramebufferAMD_sig = {2936, "wglBlitContextFramebufferAMD", 11, _wglBlitContextFramebufferAMD_args};

static const char * _wglBindVideoCaptureDeviceNV_args[2] = {"uVideoSlot", "hDevice"};
static const trace::FunctionSig _wglBindVideoCaptureDeviceNV_sig = {2937, "wglBindVideoCaptureDeviceNV", 2, _wglBindVideoCaptureDeviceNV_args};

static const char * _wglEnumerateVideoCaptureDevicesNV_args[2] = {"hDc", "phDeviceList"};
static const trace::FunctionSig _wglEnumerateVideoCaptureDevicesNV_sig = {2938, "wglEnumerateVideoCaptureDevicesNV", 2, _wglEnumerateVideoCaptureDevicesNV_args};

static const char * _wglLockVideoCaptureDeviceNV_args[2] = {"hDc", "hDevice"};
static const trace::FunctionSig _wglLockVideoCaptureDeviceNV_sig = {2939, "wglLockVideoCaptureDeviceNV", 2, _wglLockVideoCaptureDeviceNV_args};

static const char * _wglQueryVideoCaptureDeviceNV_args[4] = {"hDc", "hDevice", "iAttribute", "piValue"};
static const trace::FunctionSig _wglQueryVideoCaptureDeviceNV_sig = {2940, "wglQueryVideoCaptureDeviceNV", 4, _wglQueryVideoCaptureDeviceNV_args};

static const char * _wglReleaseVideoCaptureDeviceNV_args[2] = {"hDc", "hDevice"};
static const trace::FunctionSig _wglReleaseVideoCaptureDeviceNV_sig = {2941, "wglReleaseVideoCaptureDeviceNV", 2, _wglReleaseVideoCaptureDeviceNV_args};

static const char * _wglCopyImageSubDataNV_args[17] = {"hSrcRC", "srcName", "srcTarget", "srcLevel", "srcX", "srcY", "srcZ", "hDstRC", "dstName", "dstTarget", "dstLevel", "dstX", "dstY", "dstZ", "width", "height", "depth"};
static const trace::FunctionSig _wglCopyImageSubDataNV_sig = {2942, "wglCopyImageSubDataNV", 17, _wglCopyImageSubDataNV_args};

static const char * _wglDXSetResourceShareHandleNV_args[2] = {"dxObject", "shareHandle"};
static const trace::FunctionSig _wglDXSetResourceShareHandleNV_sig = {2943, "wglDXSetResourceShareHandleNV", 2, _wglDXSetResourceShareHandleNV_args};

static const char * _wglDXOpenDeviceNV_args[1] = {"dxDevice"};
static const trace::FunctionSig _wglDXOpenDeviceNV_sig = {2944, "wglDXOpenDeviceNV", 1, _wglDXOpenDeviceNV_args};

static const char * _wglDXCloseDeviceNV_args[1] = {"hDevice"};
static const trace::FunctionSig _wglDXCloseDeviceNV_sig = {2945, "wglDXCloseDeviceNV", 1, _wglDXCloseDeviceNV_args};

static const char * _wglDXRegisterObjectNV_args[5] = {"hDevice", "dxObject", "name", "type", "access"};
static const trace::FunctionSig _wglDXRegisterObjectNV_sig = {2946, "wglDXRegisterObjectNV", 5, _wglDXRegisterObjectNV_args};

static const char * _wglDXUnregisterObjectNV_args[2] = {"hDevice", "hObject"};
static const trace::FunctionSig _wglDXUnregisterObjectNV_sig = {2947, "wglDXUnregisterObjectNV", 2, _wglDXUnregisterObjectNV_args};

static const char * _wglDXObjectAccessNV_args[2] = {"hObject", "access"};
static const trace::FunctionSig _wglDXObjectAccessNV_sig = {2948, "wglDXObjectAccessNV", 2, _wglDXObjectAccessNV_args};

static const char * _wglDXLockObjectsNV_args[3] = {"hDevice", "count", "hObjects"};
static const trace::FunctionSig _wglDXLockObjectsNV_sig = {2949, "wglDXLockObjectsNV", 3, _wglDXLockObjectsNV_args};

static const char * _wglDXUnlockObjectsNV_args[3] = {"hDevice", "count", "hObjects"};
static const trace::FunctionSig _wglDXUnlockObjectsNV_sig = {2950, "wglDXUnlockObjectsNV", 3, _wglDXUnlockObjectsNV_args};

static const char * _wglGetProcAddress_args[1] = {"lpszProc"};
static const trace::FunctionSig _wglGetProcAddress_sig = {2951, "wglGetProcAddress", 1, _wglGetProcAddress_args};

#endif // REGAL_SYS_WGL


namespace Regal { namespace Trace {

void glCullFace( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCullFace_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCullFace(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFrontFace( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrontFace_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFrontFace(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glHint( GLenum target, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glHint_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glHint(target, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLineWidth( GLfloat width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLineWidth_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLineWidth(width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointSize( GLfloat size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointSize_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointSize(size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPolygonMode( GLenum face, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPolygonMode_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPolygonMode(face, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScissor( GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScissor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScissor(x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterf( GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterf(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterfv( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat);
        for (size_t _iCGLfloat = 0; _iCGLfloat < _cCGLfloat; ++_iCGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameteri( GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameteri(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameteriv( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint);
        for (size_t _iCGLint = 0; _iCGLint < _cCGLint; ++_iCGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage1D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexImage1D_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexImage2D_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawBuffer( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBuffer(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClear( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClear_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield1_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClear(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearColor( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearColor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearColor(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearStencil( GLint s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearStencil_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearStencil(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearDepth( GLdouble depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearDepth_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearDepth(depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilMask( GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilMask_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilMask(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorMask_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorMask(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthMask( GLboolean flag ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthMask_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, flag);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthMask(flag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisable( GLenum cap ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, cap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisable(cap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnable( GLenum cap ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, cap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnable(cap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFinish(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinish_sig);
    trace::localWriter.endEnter();
    _glFinish();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlush(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlush_sig);
    trace::localWriter.endEnter();
    _glFlush();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFunc( GLenum sfactor, GLenum dfactor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFunc_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFunc(sfactor, dfactor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLogicOp( GLenum opcode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLogicOp_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, opcode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLogicOp(opcode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilFunc( GLenum func, GLint ref, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilFunc_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ref);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilFunc(func, ref, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilOp( GLenum fail, GLenum zfail, GLenum zpass ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilOp_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, fail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, zfail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, zpass);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilOp(fail, zfail, zpass);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthFunc( GLenum func ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthFunc_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthFunc(func);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelStoref( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelStoref_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelStoref(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelStorei( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelStorei_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelStorei(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReadBuffer( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadBuffer(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadPixels_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadPixels(x, y, width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetBooleanv( GLenum pname, GLboolean * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBooleanv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBooleanv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLboolean = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (params)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetDoublev( GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetDoublev_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetDoublev(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glGetError(  ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetError_sig);
    trace::localWriter.endEnter();
    _result = _glGetError();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum2_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetFloatv( GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFloatv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFloatv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetIntegerv( GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetIntegerv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetIntegerv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

const GLubyte * glGetString( GLenum name ) {
    const GLubyte * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetString(name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(reinterpret_cast<const char *>(_result));
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexImage(target, level, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexLevelParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexLevelParameterfv(target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexLevelParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexLevelParameteriv(target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsEnabled( GLenum cap ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsEnabled_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, cap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsEnabled(cap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDepthRange( GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRange(zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glViewport( GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glViewport_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glViewport(x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNewList( GLuint list, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNewList_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNewList(list, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndList(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndList_sig);
    trace::localWriter.endEnter();
    _glEndList();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCallList( GLuint list ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCallList_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCallList(list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCallLists( GLsizei n, GLenum type, const GLvoid * lists ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCallLists_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(lists, _glCallLists_size(n, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCallLists(n, type, lists);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteLists( GLuint list, GLsizei range ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteLists_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteLists(list, range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGenLists( GLsizei range ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenLists_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenLists(range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glListBase( GLuint base ) {
    unsigned _call = trace::localWriter.beginEnter(&_glListBase_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(base);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glListBase(base);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBegin( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBegin_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBegin(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBitmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(xorig);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(yorig);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(xmove);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(ymove);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bitmap);
        } else {
    trace::localWriter.writeBlob(bitmap, _glBitmap_size(width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3b( GLbyte red, GLbyte green, GLbyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3b_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3b(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3bv( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3bv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte);
        for (size_t _iCGLbyte = 0; _iCGLbyte < _cCGLbyte; ++_iCGLbyte) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3bv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3d( GLdouble red, GLdouble green, GLdouble blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3d(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble);
        for (size_t _iCGLdouble = 0; _iCGLdouble < _cCGLdouble; ++_iCGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3f( GLfloat red, GLfloat green, GLfloat blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3f(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat1 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat1);
        for (size_t _iCGLfloat1 = 0; _iCGLfloat1 < _cCGLfloat1; ++_iCGLfloat1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3i( GLint red, GLint green, GLint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3i(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint1 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint1);
        for (size_t _iCGLint1 = 0; _iCGLint1 < _cCGLint1; ++_iCGLint1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3s( GLshort red, GLshort green, GLshort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3s(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort);
        for (size_t _iCGLshort = 0; _iCGLshort < _cCGLshort; ++_iCGLshort) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3ub( GLubyte red, GLubyte green, GLubyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3ub_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3ub(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3ubv( const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3ubv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLubyte2 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLubyte2);
        for (size_t _iCGLubyte2 = 0; _iCGLubyte2 < _cCGLubyte2; ++_iCGLubyte2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3ubv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3ui( GLuint red, GLuint green, GLuint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3ui(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3uiv( const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3uiv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLuint = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint);
        for (size_t _iCGLuint = 0; _iCGLuint < _cCGLuint; ++_iCGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3uiv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3us( GLushort red, GLushort green, GLushort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3us_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3us(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3usv( const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3usv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLushort = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLushort);
        for (size_t _iCGLushort = 0; _iCGLushort < _cCGLushort; ++_iCGLushort) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3usv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4b_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4b(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4bv( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4bv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte1 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte1);
        for (size_t _iCGLbyte1 = 0; _iCGLbyte1 < _cCGLbyte1; ++_iCGLbyte1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4bv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4d(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble1 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble1);
        for (size_t _iCGLdouble1 = 0; _iCGLdouble1 < _cCGLdouble1; ++_iCGLdouble1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4f(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat2 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat2);
        for (size_t _iCGLfloat2 = 0; _iCGLfloat2 < _cCGLfloat2; ++_iCGLfloat2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4i( GLint red, GLint green, GLint blue, GLint alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4i(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint2 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint2);
        for (size_t _iCGLint2 = 0; _iCGLint2 < _cCGLint2; ++_iCGLint2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4s(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort1 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort1);
        for (size_t _iCGLshort1 = 0; _iCGLshort1 < _cCGLshort1; ++_iCGLshort1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ub_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ub(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ubv( const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ubv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLubyte3 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte3);
        for (size_t _iCGLubyte3 = 0; _iCGLubyte3 < _cCGLubyte3; ++_iCGLubyte3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ubv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ui(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4uiv( const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4uiv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLuint1 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint1);
        for (size_t _iCGLuint1 = 0; _iCGLuint1 < _cCGLuint1; ++_iCGLuint1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4uiv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4us_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4us(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4usv( const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4usv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLushort1 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort1);
        for (size_t _iCGLushort1 = 0; _iCGLushort1 < _cCGLushort1; ++_iCGLushort1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4usv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlag( GLboolean flag ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlag_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, flag);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlag(flag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlagv( const GLboolean * flag ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagv_sig);
    trace::localWriter.beginArg(0);
    if (flag) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, *flag);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlagv(flag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnd(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnd_sig);
    trace::localWriter.endEnter();
    _glEnd();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexd( GLdouble c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexd_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexd(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexdv( const GLdouble * c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexdv_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*c);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexdv(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexf( GLfloat c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexf(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexfv( const GLfloat * c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexfv_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*c);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexfv(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexi( GLint c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexi(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexiv( const GLint * c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexiv_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*c);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexiv(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexs( GLshort c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexs_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexs(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexsv( const GLshort * c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexsv_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*c);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexsv(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3b_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3b(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3bv( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3bv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte2 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte2);
        for (size_t _iCGLbyte2 = 0; _iCGLbyte2 < _cCGLbyte2; ++_iCGLbyte2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3bv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3d(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble3);
        for (size_t _iCGLdouble3 = 0; _iCGLdouble3 < _cCGLdouble3; ++_iCGLdouble3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3f(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat4 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat4);
        for (size_t _iCGLfloat4 = 0; _iCGLfloat4 < _cCGLfloat4; ++_iCGLfloat4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3i( GLint nx, GLint ny, GLint nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3i(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint4 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint4);
        for (size_t _iCGLint4 = 0; _iCGLint4 < _cCGLint4; ++_iCGLint4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3s( GLshort nx, GLshort ny, GLshort nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3s(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort3);
        for (size_t _iCGLshort3 = 0; _iCGLshort3 < _cCGLshort3; ++_iCGLshort3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2d( GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2d(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble4 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble4);
        for (size_t _iCGLdouble4 = 0; _iCGLdouble4 < _cCGLdouble4; ++_iCGLdouble4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2f( GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2f(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat5 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat5);
        for (size_t _iCGLfloat5 = 0; _iCGLfloat5 < _cCGLfloat5; ++_iCGLfloat5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2i( GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2i(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint5 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint5);
        for (size_t _iCGLint5 = 0; _iCGLint5 < _cCGLint5; ++_iCGLint5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2s( GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2s(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos2sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos2sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort4 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort4);
        for (size_t _iCGLshort4 = 0; _iCGLshort4 < _cCGLshort4; ++_iCGLshort4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos2sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3d( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3d(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble5 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble5);
        for (size_t _iCGLdouble5 = 0; _iCGLdouble5 < _cCGLdouble5; ++_iCGLdouble5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3f( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3f(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat6 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat6);
        for (size_t _iCGLfloat6 = 0; _iCGLfloat6 < _cCGLfloat6; ++_iCGLfloat6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3i( GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3i(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint6 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint6);
        for (size_t _iCGLint6 = 0; _iCGLint6 < _cCGLint6; ++_iCGLint6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3s( GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3s(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort5 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort5);
        for (size_t _iCGLshort5 = 0; _iCGLshort5 < _cCGLshort5; ++_iCGLshort5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4d(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble6 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble6);
        for (size_t _iCGLdouble6 = 0; _iCGLdouble6 < _cCGLdouble6; ++_iCGLdouble6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4f(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat7 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat7);
        for (size_t _iCGLfloat7 = 0; _iCGLfloat7 < _cCGLfloat7; ++_iCGLfloat7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4i( GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4i(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint7 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint7);
        for (size_t _iCGLint7 = 0; _iCGLint7 < _cCGLint7; ++_iCGLint7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4s(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRasterPos4sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRasterPos4sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort6 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort6);
        for (size_t _iCGLshort6 = 0; _iCGLshort6 < _cCGLshort6; ++_iCGLshort6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRasterPos4sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectd_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectd(x1, y1, x2, y2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectdv( const GLdouble * v1, const GLdouble * v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectdv_sig);
    trace::localWriter.beginArg(0);
    if (v1) {
        size_t _cCGLdouble7 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble7);
        for (size_t _iCGLdouble7 = 0; _iCGLdouble7 < _cCGLdouble7; ++_iCGLdouble7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v1)[_iCGLdouble7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v2) {
        size_t _cCGLdouble8 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble8);
        for (size_t _iCGLdouble8 = 0; _iCGLdouble8 < _cCGLdouble8; ++_iCGLdouble8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v2)[_iCGLdouble8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectdv(v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectf(x1, y1, x2, y2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectfv( const GLfloat * v1, const GLfloat * v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectfv_sig);
    trace::localWriter.beginArg(0);
    if (v1) {
        size_t _cCGLfloat8 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat8);
        for (size_t _iCGLfloat8 = 0; _iCGLfloat8 < _cCGLfloat8; ++_iCGLfloat8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v1)[_iCGLfloat8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v2) {
        size_t _cCGLfloat9 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat9);
        for (size_t _iCGLfloat9 = 0; _iCGLfloat9 < _cCGLfloat9; ++_iCGLfloat9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v2)[_iCGLfloat9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectfv(v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRecti( GLint x1, GLint y1, GLint x2, GLint y2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRecti_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRecti(x1, y1, x2, y2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectiv( const GLint * v1, const GLint * v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectiv_sig);
    trace::localWriter.beginArg(0);
    if (v1) {
        size_t _cCGLint8 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint8);
        for (size_t _iCGLint8 = 0; _iCGLint8 < _cCGLint8; ++_iCGLint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v1)[_iCGLint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v2) {
        size_t _cCGLint9 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint9);
        for (size_t _iCGLint9 = 0; _iCGLint9 < _cCGLint9; ++_iCGLint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v2)[_iCGLint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectiv(v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRects_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRects(x1, y1, x2, y2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRectsv( const GLshort * v1, const GLshort * v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRectsv_sig);
    trace::localWriter.beginArg(0);
    if (v1) {
        size_t _cCGLshort7 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort7);
        for (size_t _iCGLshort7 = 0; _iCGLshort7 < _cCGLshort7; ++_iCGLshort7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v1)[_iCGLshort7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v2) {
        size_t _cCGLshort8 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort8);
        for (size_t _iCGLshort8 = 0; _iCGLshort8 < _cCGLshort8; ++_iCGLshort8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v2)[_iCGLshort8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRectsv(v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1d( GLdouble s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1d(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1f( GLfloat s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1f(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1i( GLint s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1i(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1s( GLshort s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1s(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2d( GLdouble s, GLdouble t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2d(s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble10 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble10);
        for (size_t _iCGLdouble10 = 0; _iCGLdouble10 < _cCGLdouble10; ++_iCGLdouble10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2f( GLfloat s, GLfloat t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2f(s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat11 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat11);
        for (size_t _iCGLfloat11 = 0; _iCGLfloat11 < _cCGLfloat11; ++_iCGLfloat11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2i( GLint s, GLint t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2i(s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint11 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint11);
        for (size_t _iCGLint11 = 0; _iCGLint11 < _cCGLint11; ++_iCGLint11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2s( GLshort s, GLshort t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2s(s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort10 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort10);
        for (size_t _iCGLshort10 = 0; _iCGLshort10 < _cCGLshort10; ++_iCGLshort10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3d( GLdouble s, GLdouble t, GLdouble r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3d(s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble11 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble11);
        for (size_t _iCGLdouble11 = 0; _iCGLdouble11 < _cCGLdouble11; ++_iCGLdouble11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3f( GLfloat s, GLfloat t, GLfloat r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3f(s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat12 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat12);
        for (size_t _iCGLfloat12 = 0; _iCGLfloat12 < _cCGLfloat12; ++_iCGLfloat12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3i( GLint s, GLint t, GLint r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3i(s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint12 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint12);
        for (size_t _iCGLint12 = 0; _iCGLint12 < _cCGLint12; ++_iCGLint12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3s( GLshort s, GLshort t, GLshort r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3s(s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort11 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort11);
        for (size_t _iCGLshort11 = 0; _iCGLshort11 < _cCGLshort11; ++_iCGLshort11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4d(s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble12 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble12);
        for (size_t _iCGLdouble12 = 0; _iCGLdouble12 < _cCGLdouble12; ++_iCGLdouble12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4f(s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat13 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat13);
        for (size_t _iCGLfloat13 = 0; _iCGLfloat13 < _cCGLfloat13; ++_iCGLfloat13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4i( GLint s, GLint t, GLint r, GLint q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4i(s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint13 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint13);
        for (size_t _iCGLint13 = 0; _iCGLint13 < _cCGLint13; ++_iCGLint13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4s(s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort12 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort12);
        for (size_t _iCGLshort12 = 0; _iCGLshort12 < _cCGLshort12; ++_iCGLshort12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2d( GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2d(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble13 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble13);
        for (size_t _iCGLdouble13 = 0; _iCGLdouble13 < _cCGLdouble13; ++_iCGLdouble13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2f( GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2f(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat14 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat14);
        for (size_t _iCGLfloat14 = 0; _iCGLfloat14 < _cCGLfloat14; ++_iCGLfloat14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2i( GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2i(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint14 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint14);
        for (size_t _iCGLint14 = 0; _iCGLint14 < _cCGLint14; ++_iCGLint14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2s( GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2s(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort13 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort13);
        for (size_t _iCGLshort13 = 0; _iCGLshort13 < _cCGLshort13; ++_iCGLshort13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3d( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3d(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble14 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble14);
        for (size_t _iCGLdouble14 = 0; _iCGLdouble14 < _cCGLdouble14; ++_iCGLdouble14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3f( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3f(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat15 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat15);
        for (size_t _iCGLfloat15 = 0; _iCGLfloat15 < _cCGLfloat15; ++_iCGLfloat15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3i( GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3i(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint15 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint15);
        for (size_t _iCGLint15 = 0; _iCGLint15 < _cCGLint15; ++_iCGLint15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3s( GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3s(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort14 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort14);
        for (size_t _iCGLshort14 = 0; _iCGLshort14 < _cCGLshort14; ++_iCGLshort14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4d(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble15 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble15);
        for (size_t _iCGLdouble15 = 0; _iCGLdouble15 < _cCGLdouble15; ++_iCGLdouble15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4f(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat16 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat16);
        for (size_t _iCGLfloat16 = 0; _iCGLfloat16 < _cCGLfloat16; ++_iCGLfloat16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4i( GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4i(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint16 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint16);
        for (size_t _iCGLint16 = 0; _iCGLint16 < _cCGLint16; ++_iCGLint16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4s(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort15 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort15);
        for (size_t _iCGLshort15 = 0; _iCGLshort15 < _cCGLshort15; ++_iCGLshort15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClipPlane( GLenum plane, const GLdouble * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClipPlane_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cCGLdouble16 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble16);
        for (size_t _iCGLdouble16 = 0; _iCGLdouble16 < _cCGLdouble16; ++_iCGLdouble16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((equation)[_iCGLdouble16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClipPlane(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorMaterial( GLenum face, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorMaterial_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorMaterial(face, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogf( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogf(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogfv( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat17 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat17);
        for (size_t _iCGLfloat17 = 0; _iCGLfloat17 < _cCGLfloat17; ++_iCGLfloat17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogfv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogi( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogi(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogiv( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint17 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint17);
        for (size_t _iCGLint17 = 0; _iCGLint17 < _cCGLint17; ++_iCGLint17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogiv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightf( GLenum light, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightf(light, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightfv( GLenum light, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat18 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat18);
        for (size_t _iCGLfloat18 = 0; _iCGLfloat18 < _cCGLfloat18; ++_iCGLfloat18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightfv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLighti( GLenum light, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLighti_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLighti(light, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightiv( GLenum light, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint18 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint18);
        for (size_t _iCGLint18 = 0; _iCGLint18 < _cCGLint18; ++_iCGLint18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightiv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModelf( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModelf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModelf(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModelfv( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModelfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat19 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat19);
        for (size_t _iCGLfloat19 = 0; _iCGLfloat19 < _cCGLfloat19; ++_iCGLfloat19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModelfv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModeli( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModeli_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModeli(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModeliv( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModeliv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint19 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint19);
        for (size_t _iCGLint19 = 0; _iCGLint19 < _cCGLint19; ++_iCGLint19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModeliv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLineStipple( GLint factor, GLushort pattern ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLineStipple_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pattern);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLineStipple(factor, pattern);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMaterialf( GLenum face, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMaterialf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMaterialf(face, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMaterialfv( GLenum face, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMaterialfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat20 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat20);
        for (size_t _iCGLfloat20 = 0; _iCGLfloat20 < _cCGLfloat20; ++_iCGLfloat20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMaterialfv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMateriali( GLenum face, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMateriali_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMateriali(face, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMaterialiv( GLenum face, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMaterialiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint20 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint20);
        for (size_t _iCGLint20 = 0; _iCGLint20 < _cCGLint20; ++_iCGLint20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMaterialiv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPolygonStipple( const GLubyte * mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPolygonStipple_sig);
    trace::localWriter.beginArg(0);
    if (mask) {
        size_t _cCGLubyte4 = _glPolygonStipple_size() > 0 ? _glPolygonStipple_size() : 0;
        trace::localWriter.beginArray(_cCGLubyte4);
        for (size_t _iCGLubyte4 = 0; _iCGLubyte4 < _cCGLubyte4; ++_iCGLubyte4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((mask)[_iCGLubyte4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPolygonStipple(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShadeModel( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShadeModel_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShadeModel(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnvf( GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnvf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnvf(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnvfv( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnvfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat21 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat21);
        for (size_t _iCGLfloat21 = 0; _iCGLfloat21 < _cCGLfloat21; ++_iCGLfloat21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnvfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnvi( GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnvi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnvi(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnviv( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnviv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint21 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint21);
        for (size_t _iCGLint21 = 0; _iCGLint21 < _cCGLint21; ++_iCGLint21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnviv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGend( GLenum coord, GLenum pname, GLdouble param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGend_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeDouble(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGend(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGendv( GLenum coord, GLenum pname, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGendv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLdouble17 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLdouble17);
        for (size_t _iCGLdouble17 = 0; _iCGLdouble17 < _cCGLdouble17; ++_iCGLdouble17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGendv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenf( GLenum coord, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenf(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenfv( GLenum coord, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat22 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat22);
        for (size_t _iCGLfloat22 = 0; _iCGLfloat22 < _cCGLfloat22; ++_iCGLfloat22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenfv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGeni( GLenum coord, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGeni_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGeni(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGeniv( GLenum coord, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGeniv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint22 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint22);
        for (size_t _iCGLint22 = 0; _iCGLint22 < _cCGLint22; ++_iCGLint22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGeniv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFeedbackBuffer( GLsizei size, GLenum type, GLfloat * buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFeedbackBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFeedbackBuffer(size, type, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (buffer) {
        size_t _cGLfloat = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((buffer)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSelectBuffer( GLsizei size, GLuint * buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSelectBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSelectBuffer(size, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (buffer) {
        size_t _cGLuint = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffer)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glRenderMode( GLenum mode ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glRenderMode_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glRenderMode(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glInitNames(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInitNames_sig);
    trace::localWriter.endEnter();
    _glInitNames();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadName( GLuint name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadName(name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPassThrough( GLfloat token ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPassThrough_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(token);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPassThrough(token);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopName(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopName_sig);
    trace::localWriter.endEnter();
    _glPopName();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushName( GLuint name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushName(name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearAccum_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearAccum(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearIndex( GLfloat c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearIndex(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexMask( GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexMask_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexMask(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAccum( GLenum op, GLfloat value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAccum_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAccum(op, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopAttrib(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopAttrib_sig);
    trace::localWriter.endEnter();
    _glPopAttrib();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushAttrib( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield1_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushAttrib(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMap1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(order);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (points) {
        size_t _cCGLdouble18 = _glMap1d_size(target, stride, order) > 0 ? _glMap1d_size(target, stride, order) : 0;
        trace::localWriter.beginArray(_cCGLdouble18);
        for (size_t _iCGLdouble18 = 0; _iCGLdouble18 < _cCGLdouble18; ++_iCGLdouble18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((points)[_iCGLdouble18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMap1d(target, u1, u2, stride, order, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMap1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(order);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (points) {
        size_t _cCGLfloat23 = _glMap1f_size(target, stride, order) > 0 ? _glMap1f_size(target, stride, order) : 0;
        trace::localWriter.beginArray(_cCGLfloat23);
        for (size_t _iCGLfloat23 = 0; _iCGLfloat23 < _cCGLfloat23; ++_iCGLfloat23) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((points)[_iCGLfloat23]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMap1f(target, u1, u2, stride, order, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMap2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    if (points) {
        size_t _cCGLdouble19 = _glMap2d_size(target, ustride, uorder, vstride, vorder) > 0 ? _glMap2d_size(target, ustride, uorder, vstride, vorder) : 0;
        trace::localWriter.beginArray(_cCGLdouble19);
        for (size_t _iCGLdouble19 = 0; _iCGLdouble19 < _cCGLdouble19; ++_iCGLdouble19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((points)[_iCGLdouble19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMap2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    if (points) {
        size_t _cCGLfloat24 = _glMap2f_size(target, ustride, uorder, vstride, vorder) > 0 ? _glMap2f_size(target, ustride, uorder, vstride, vorder) : 0;
        trace::localWriter.beginArray(_cCGLfloat24);
        for (size_t _iCGLfloat24 = 0; _iCGLfloat24 < _cCGLfloat24; ++_iCGLfloat24) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((points)[_iCGLfloat24]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapGrid1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(un);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapGrid1d(un, u1, u2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapGrid1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(un);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapGrid1f(un, u1, u2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapGrid2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(un);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(vn);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapGrid2d(un, u1, u2, vn, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapGrid2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(un);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(vn);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapGrid2f(un, u1, u2, vn, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord1d( GLdouble u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(u);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord1d(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord1dv( const GLdouble * u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord1dv_sig);
    trace::localWriter.beginArg(0);
    if (u) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*u);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord1dv(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord1f( GLfloat u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(u);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord1f(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord1fv( const GLfloat * u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord1fv_sig);
    trace::localWriter.beginArg(0);
    if (u) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*u);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord1fv(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord2d( GLdouble u, GLdouble v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(u);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(v);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord2d(u, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord2dv( const GLdouble * u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord2dv_sig);
    trace::localWriter.beginArg(0);
    if (u) {
        size_t _cCGLdouble21 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble21);
        for (size_t _iCGLdouble21 = 0; _iCGLdouble21 < _cCGLdouble21; ++_iCGLdouble21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((u)[_iCGLdouble21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord2dv(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord2f( GLfloat u, GLfloat v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(u);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord2f(u, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalCoord2fv( const GLfloat * u ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalCoord2fv_sig);
    trace::localWriter.beginArg(0);
    if (u) {
        size_t _cCGLfloat26 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat26);
        for (size_t _iCGLfloat26 = 0; _iCGLfloat26 < _cCGLfloat26; ++_iCGLfloat26) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((u)[_iCGLfloat26]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalCoord2fv(u);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalMesh1( GLenum mode, GLint i1, GLint i2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalMesh1_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(i1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(i2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalMesh1(mode, i1, i2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalPoint1( GLint i ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalPoint1_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(i);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalPoint1(i);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalMesh2_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(i1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(i2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(j1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(j2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalMesh2(mode, i1, i2, j1, j2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEvalPoint2( GLint i, GLint j ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalPoint2_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(i);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(j);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalPoint2(i, j);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAlphaFunc( GLenum func, GLfloat ref ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAlphaFunc_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(ref);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAlphaFunc(func, ref);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelZoom( GLfloat xfactor, GLfloat yfactor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelZoom_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(xfactor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(yfactor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelZoom(xfactor, yfactor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransferf( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransferf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransferf(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransferi( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransferi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransferi(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelMapfv( GLenum map, GLsizei mapsize, const GLfloat * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelMapfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(mapsize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cCGLfloat27 = mapsize > 0 ? mapsize : 0;
        trace::localWriter.beginArray(_cCGLfloat27);
        for (size_t _iCGLfloat27 = 0; _iCGLfloat27 < _cCGLfloat27; ++_iCGLfloat27) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((values)[_iCGLfloat27]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelMapfv(map, mapsize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelMapuiv( GLenum map, GLsizei mapsize, const GLuint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelMapuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(mapsize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cCGLuint2 = mapsize > 0 ? mapsize : 0;
        trace::localWriter.beginArray(_cCGLuint2);
        for (size_t _iCGLuint2 = 0; _iCGLuint2 < _cCGLuint2; ++_iCGLuint2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((values)[_iCGLuint2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelMapuiv(map, mapsize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelMapusv( GLenum map, GLsizei mapsize, const GLushort * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelMapusv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(mapsize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cCGLushort2 = mapsize > 0 ? mapsize : 0;
        trace::localWriter.beginArray(_cCGLushort2);
        for (size_t _iCGLushort2 = 0; _iCGLushort2 < _cCGLushort2; ++_iCGLushort2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((values)[_iCGLushort2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelMapusv(map, mapsize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyPixels_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyPixels(x, y, width, height, type);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawPixels_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glDrawPixels_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawPixels(width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetClipPlane( GLenum plane, GLdouble * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetClipPlane_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetClipPlane(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((equation)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLightfv( GLenum light, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLightfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLightfv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLightiv( GLenum light, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLightiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLightiv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapdv( GLenum target, GLenum query, GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapdv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapdv(target, query, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapfv( GLenum target, GLenum query, GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapfv(target, query, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapiv( GLenum target, GLenum query, GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapiv(target, query, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMaterialfv( GLenum face, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMaterialfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMaterialfv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMaterialiv( GLenum face, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMaterialiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMaterialiv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPixelMapfv( GLenum map, GLfloat * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelMapfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelMapfv(map, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (values) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*values);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPixelMapuiv( GLenum map, GLuint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelMapuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelMapuiv(map, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (values) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*values);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPixelMapusv( GLenum map, GLushort * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelMapusv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelMapusv(map, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (values) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*values);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPolygonStipple( GLubyte * mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPolygonStipple_sig);
    trace::localWriter.endEnter();
    _glGetPolygonStipple(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)mask);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexEnvfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexEnvfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexEnvfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexEnviv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexEnviv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexEnviv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexGendv( GLenum coord, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGendv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGendv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexGenfv( GLenum coord, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGenfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGenfv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexGeniv( GLenum coord, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGeniv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGeniv(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsList( GLuint list ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsList_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsList(list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrustum_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFrustum(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadIdentity(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadIdentity_sig);
    trace::localWriter.endEnter();
    _glLoadIdentity();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadMatrixf( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadMatrixf_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat28 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat28);
        for (size_t _iCGLfloat28 = 0; _iCGLfloat28 < _cCGLfloat28; ++_iCGLfloat28) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat28]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadMatrixf(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadMatrixd( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadMatrixd_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble22 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble22);
        for (size_t _iCGLdouble22 = 0; _iCGLdouble22 < _cCGLdouble22; ++_iCGLdouble22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadMatrixd(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixMode( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixMode_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixMode(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultMatrixf( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultMatrixf_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat29 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat29);
        for (size_t _iCGLfloat29 = 0; _iCGLfloat29 < _cCGLfloat29; ++_iCGLfloat29) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat29]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultMatrixf(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultMatrixd( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultMatrixd_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble23 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble23);
        for (size_t _iCGLdouble23 = 0; _iCGLdouble23 < _cCGLdouble23; ++_iCGLdouble23) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble23]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultMatrixd(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glOrtho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glOrtho_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glOrtho(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopMatrix(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopMatrix_sig);
    trace::localWriter.endEnter();
    _glPopMatrix();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushMatrix(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushMatrix_sig);
    trace::localWriter.endEnter();
    _glPushMatrix();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRotated_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(angle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRotated(angle, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRotatef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(angle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRotatef(angle, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScaled( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScaled_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScaled(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScalef( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScalef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScalef(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTranslated( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTranslated_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTranslated(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTranslatef( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTranslatef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTranslatef(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawArrays( GLenum mode, GLint first, GLsizei count ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArrays_count(first, count);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArrays_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArrays(mode, first, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElements_count(count, type, indices);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElements_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElements(mode, count, type, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPointerv( GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPointerv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPointerv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPolygonOffset( GLfloat factor, GLfloat units ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPolygonOffset_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(factor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(units);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPolygonOffset(factor, units);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexImage1D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexImage1D(target, level, internalformat, x, y, width, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage1D(target, level, xoffset, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage1D_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage2D_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindTexture( GLenum target, GLuint texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindTexture(target, texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteTextures( GLsizei n, const GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteTextures_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint1 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint1);
        for (size_t _iCPGLuint1 = 0; _iCPGLuint1 < _cCPGLuint1; ++_iCPGLuint1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteTextures(n, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenTextures( GLsizei n, GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenTextures_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenTextures(n, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cPGLuint1 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint1);
        for (size_t _iPGLuint1 = 0; _iPGLuint1 < _cPGLuint1; ++_iPGLuint1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iPGLuint1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsTexture( GLuint texture ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsTexture(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glArrayElement( GLint i ) {
    unsigned _call = trace::localWriter.beginEnter(&_glArrayElement_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(i);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glArrayElement(i);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glColorPointer(size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glColorPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorPointer(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableClientState( GLenum array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableClientState_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableClientState(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlagPointer( GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glEdgeFlagPointer(stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlagPointer(stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableClientState( GLenum array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableClientState_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableClientState(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexPointer( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glIndexPointer(type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glIndexPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexPointer(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInterleavedArrays( GLenum format, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glInterleavedArrays(format, stride, pointer);

        GLboolean _secondary_color = GL_FALSE;
        GLboolean _fog_coord = GL_FALSE;
        GLboolean _edge_flag = GL_FALSE;
        GLboolean _texture_coord = GL_FALSE;
        GLboolean _index = GL_FALSE;
        GLboolean _color = GL_FALSE;
        GLboolean _normal = GL_FALSE;
        GLboolean _vertex = GL_FALSE;

        switch (format) {
            case GL_V2F:
                _vertex = GL_TRUE;
                break;
            case GL_V3F:
                _vertex = GL_TRUE;
                break;
            case GL_C4UB_V2F:
                _color = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_C4UB_V3F:
                _color = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_C3F_V3F:
                _color = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_N3F_V3F:
                _normal = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_C4F_N3F_V3F:
                _color = GL_TRUE;
                _normal = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T2F_V3F:
                _texture_coord = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T4F_V4F:
                _texture_coord = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T2F_C4UB_V3F:
                _texture_coord = GL_TRUE;
                _color = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T2F_C3F_V3F:
                _texture_coord = GL_TRUE;
                _color = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T2F_N3F_V3F:
                _texture_coord = GL_TRUE;
                _normal = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T2F_C4F_N3F_V3F:
                _texture_coord = GL_TRUE;
                _color = GL_TRUE;
                _normal = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            case GL_T4F_C4F_N3F_V4F:
                _texture_coord = GL_TRUE;
                _color = GL_TRUE;
                _normal = GL_TRUE;
                _vertex = GL_TRUE;
                break;
            default:
               return;
        }

        {
            static const trace::FunctionSig &_sig = _secondary_color ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_SECONDARY_COLOR_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _fog_coord ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_FOG_COORD_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _edge_flag ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_EDGE_FLAG_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _texture_coord ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_TEXTURE_COORD_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _index ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_INDEX_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _color ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_COLOR_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _normal ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_NORMAL_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        {
            static const trace::FunctionSig &_sig = _vertex ? _glEnableClientState_sig : _glDisableClientState_sig;
            unsigned _call = trace::localWriter.beginEnter(&_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, GL_VERTEX_ARRAY);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glInterleavedArrays_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInterleavedArrays(format, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalPointer( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glNormalPointer(type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glNormalPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalPointer(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glTexCoordPointer(size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordPointer(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexPointer(size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexPointer(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glAreTexturesResident( GLsizei n, const GLuint * textures, GLboolean * residences ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glAreTexturesResident_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint11 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint11);
        for (size_t _iCPGLuint11 = 0; _iCPGLuint11 < _cCPGLuint11; ++_iCPGLuint11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glAreTexturesResident(n, textures, residences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (residences) {
        size_t _cGLboolean = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (residences)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPrioritizeTextures_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint12 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint12);
        for (size_t _iCPGLuint12 = 0; _iCPGLuint12 < _cCPGLuint12; ++_iCPGLuint12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (priorities) {
        size_t _cCGLclampf = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLclampf);
        for (size_t _iCGLclampf = 0; _iCGLclampf < _cCGLclampf; ++_iCGLclampf) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((priorities)[_iCGLclampf]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPrioritizeTextures(n, textures, priorities);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexub( GLubyte c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexub_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(c);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexub(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexubv( const GLubyte * c ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexubv_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*c);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexubv(c);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopClientAttrib(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopClientAttrib_sig);
    trace::localWriter.endEnter();
    _glPopClientAttrib();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushClientAttrib( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushClientAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield2_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushClientAttrib(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendColor( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendColor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendColor(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquation( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquation(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawRangeElements_count(start, end, count, type, indices);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawRangeElements_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawRangeElements(mode, start, end, count, type, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage3D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexImage3D_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage3D_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTable( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)table);
        } else {
    trace::localWriter.writeBlob(table, _glColorTable_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTable(target, internalformat, width, format, type, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableParameterfv( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat30 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat30);
        for (size_t _iCGLfloat30 = 0; _iCGLfloat30 < _cCGLfloat30; ++_iCGLfloat30) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat30]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableParameteriv( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint23 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint23);
        for (size_t _iCGLint23 = 0; _iCGLint23 < _cCGLint23; ++_iCGLint23) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint23]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyColorTable( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyColorTable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyColorTable(target, internalformat, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetColorTable( GLenum target, GLenum format, GLenum type, GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTable(target, format, type, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)table);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameterfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glColorSubTable( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorSubTable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, _glColorSubTable_size(format, type, count));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorSubTable(target, start, count, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyColorSubTable( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyColorSubTable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyColorSubTable(target, start, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionFilter1D( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionFilter1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)image);
        } else {
    trace::localWriter.writeBlob(image, _glConvolutionFilter1D_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionFilter1D(target, internalformat, width, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionFilter2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)image);
        } else {
    trace::localWriter.writeBlob(image, _glConvolutionFilter2D_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameterf( GLenum target, GLenum pname, GLfloat params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameterf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameterf(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameterfv( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat31 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat31);
        for (size_t _iCGLfloat31 = 0; _iCGLfloat31 < _cCGLfloat31; ++_iCGLfloat31) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat31]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameteri( GLenum target, GLenum pname, GLint params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameteri(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameteriv( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint24 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint24);
        for (size_t _iCGLint24 = 0; _iCGLint24 < _cCGLint24; ++_iCGLint24) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint24]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyConvolutionFilter1D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyConvolutionFilter1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyConvolutionFilter1D(target, internalformat, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyConvolutionFilter2D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyConvolutionFilter2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionFilter( GLenum target, GLenum format, GLenum type, GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionFilter_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionFilter(target, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionParameterfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSeparableFilter( GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSeparableFilter_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSeparableFilter(target, format, type, row, column, span);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)row);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)column);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)span);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSeparableFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSeparableFilter2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)row);
        } else {
    trace::localWriter.writeBlob(row, _glConvolutionFilter1D_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)column);
        } else {
    trace::localWriter.writeBlob(column, _glConvolutionFilter1D_size(format, type, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogram(target, reset, format, type, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetHistogramParameterfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogramParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogramParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetHistogramParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogramParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogramParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmax( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmax_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmax(target, reset, format, type, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmaxParameterfv( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmaxParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmaxParameterfv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmaxParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmaxParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmaxParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glHistogram( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink ) {
    unsigned _call = trace::localWriter.beginEnter(&_glHistogram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, sink);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glHistogram(target, width, internalformat, sink);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMinmax( GLenum target, GLenum internalformat, GLboolean sink ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMinmax_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, sink);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMinmax(target, internalformat, sink);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResetHistogram( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResetHistogram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glResetHistogram(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResetMinmax( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResetMinmax_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glResetMinmax(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveTexture( GLenum texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveTexture(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSampleCoverage( GLfloat value, GLboolean invert ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleCoverage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, invert);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleCoverage(value, invert);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)data);
        } else {
    trace::localWriter.writeBlob(data, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCompressedTexImage( GLenum target, GLint level, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCompressedTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCompressedTexImage(target, level, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClientActiveTexture( GLenum texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClientActiveTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClientActiveTexture(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1d( GLenum target, GLdouble s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1d(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1dv( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1dv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1f( GLenum target, GLfloat s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1f(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1fv( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1fv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1i( GLenum target, GLint s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1i(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1iv( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1iv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1s( GLenum target, GLshort s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1s(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1sv( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1sv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2d(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2dv( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble25 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble25);
        for (size_t _iCGLdouble25 = 0; _iCGLdouble25 < _cCGLdouble25; ++_iCGLdouble25) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble25]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2dv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2f(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2fv( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat33 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat33);
        for (size_t _iCGLfloat33 = 0; _iCGLfloat33 < _cCGLfloat33; ++_iCGLfloat33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2fv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2i( GLenum target, GLint s, GLint t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2i(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2iv( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint26 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint26);
        for (size_t _iCGLint26 = 0; _iCGLint26 < _cCGLint26; ++_iCGLint26) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint26]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2iv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2s( GLenum target, GLshort s, GLshort t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2s(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2sv( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort17 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort17);
        for (size_t _iCGLshort17 = 0; _iCGLshort17 < _cCGLshort17; ++_iCGLshort17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2sv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3d(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3dv( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble26 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble26);
        for (size_t _iCGLdouble26 = 0; _iCGLdouble26 < _cCGLdouble26; ++_iCGLdouble26) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble26]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3dv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3f(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3fv( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat34 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat34);
        for (size_t _iCGLfloat34 = 0; _iCGLfloat34 < _cCGLfloat34; ++_iCGLfloat34) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat34]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3fv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3i(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3iv( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint27 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint27);
        for (size_t _iCGLint27 = 0; _iCGLint27 < _cCGLint27; ++_iCGLint27) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint27]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3iv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3s(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3sv( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort18 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort18);
        for (size_t _iCGLshort18 = 0; _iCGLshort18 < _cCGLshort18; ++_iCGLshort18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3sv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4d(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4dv( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble27 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble27);
        for (size_t _iCGLdouble27 = 0; _iCGLdouble27 < _cCGLdouble27; ++_iCGLdouble27) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble27]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4dv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4f(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4fv( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat35 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat35);
        for (size_t _iCGLfloat35 = 0; _iCGLfloat35 < _cCGLfloat35; ++_iCGLfloat35) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat35]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4fv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4i(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4iv( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint28 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint28);
        for (size_t _iCGLint28 = 0; _iCGLint28 < _cCGLint28; ++_iCGLint28) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint28]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4iv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4s(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4sv( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort19 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort19);
        for (size_t _iCGLshort19 = 0; _iCGLshort19 < _cCGLshort19; ++_iCGLshort19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4sv(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadTransposeMatrixf( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadTransposeMatrixf_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat36 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat36);
        for (size_t _iCGLfloat36 = 0; _iCGLfloat36 < _cCGLfloat36; ++_iCGLfloat36) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat36]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadTransposeMatrixf(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadTransposeMatrixd( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadTransposeMatrixd_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble28 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble28);
        for (size_t _iCGLdouble28 = 0; _iCGLdouble28 < _cCGLdouble28; ++_iCGLdouble28) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble28]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadTransposeMatrixd(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultTransposeMatrixf( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultTransposeMatrixf_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat37 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat37);
        for (size_t _iCGLfloat37 = 0; _iCGLfloat37 < _cCGLfloat37; ++_iCGLfloat37) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat37]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultTransposeMatrixf(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultTransposeMatrixd( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultTransposeMatrixd_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble29 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble29);
        for (size_t _iCGLdouble29 = 0; _iCGLdouble29 < _cCGLdouble29; ++_iCGLdouble29) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble29]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultTransposeMatrixd(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparate( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawArrays( GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawArrays_count(first, count, drawcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawArrays_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (first) {
        size_t _cCGLint29 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCGLint29);
        for (size_t _iCGLint29 = 0; _iCGLint29 < _cCGLint29; ++_iCGLint29) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((first)[_iCGLint29]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (count) {
        size_t _cCGLsizei = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCGLsizei);
        for (size_t _iCGLsizei = 0; _iCGLsizei < _cCGLsizei; ++_iCGLsizei) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(drawcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawArrays(mode, first, count, drawcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElements( GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei drawcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawElements_count(count, type, indices, drawcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElements_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (count) {
        size_t _cCGLsizei1 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCGLsizei1);
        for (size_t _iCGLsizei1 = 0; _iCGLsizei1 < _cCGLsizei1; ++_iCGLsizei1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (indices) {
        size_t _cCconstGLvoid29 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCconstGLvoid29);
        for (size_t _iCconstGLvoid29 = 0; _iCconstGLvoid29 < _cCconstGLvoid29; ++_iCconstGLvoid29) {
            trace::localWriter.beginElement();
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>((indices)[_iCconstGLvoid29]));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>((indices)[_iCconstGLvoid29]), count[_iCconstGLvoid29]*_gl_type_size(type));
        break;
    }
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(drawcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElements(mode, count, type, indices, drawcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterf( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterf(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfv( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat38 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat38);
        for (size_t _iCGLfloat38 = 0; _iCGLfloat38 < _cCGLfloat38; ++_iCGLfloat38) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat38]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameteri( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameteri(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameteriv( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint30 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint30);
        for (size_t _iCGLint30 = 0; _iCGLint30 < _cCGLint30; ++_iCGLint30) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint30]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameteriv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordf( GLfloat coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(coord);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordf(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordfv( const GLfloat * coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordfv_sig);
    trace::localWriter.beginArg(0);
    if (coord) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*coord);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordfv(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordd( GLdouble coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordd_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(coord);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordd(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoorddv( const GLdouble * coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoorddv_sig);
    trace::localWriter.beginArg(0);
    if (coord) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*coord);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoorddv(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordPointer( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glFogCoordPointer(type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordPointer(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3b( GLbyte red, GLbyte green, GLbyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3b_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3b(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3bv( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3bv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte3);
        for (size_t _iCGLbyte3 = 0; _iCGLbyte3 < _cCGLbyte3; ++_iCGLbyte3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3bv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3d( GLdouble red, GLdouble green, GLdouble blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3d(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble31 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble31);
        for (size_t _iCGLdouble31 = 0; _iCGLdouble31 < _cCGLdouble31; ++_iCGLdouble31) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble31]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3f( GLfloat red, GLfloat green, GLfloat blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3f(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat40 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat40);
        for (size_t _iCGLfloat40 = 0; _iCGLfloat40 < _cCGLfloat40; ++_iCGLfloat40) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat40]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3i( GLint red, GLint green, GLint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3i(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint31 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint31);
        for (size_t _iCGLint31 = 0; _iCGLint31 < _cCGLint31; ++_iCGLint31) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint31]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3s( GLshort red, GLshort green, GLshort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3s(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort20 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort20);
        for (size_t _iCGLshort20 = 0; _iCGLshort20 < _cCGLshort20; ++_iCGLshort20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ub( GLubyte red, GLubyte green, GLubyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ub_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ub(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ubv( const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ubv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLubyte6 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLubyte6);
        for (size_t _iCGLubyte6 = 0; _iCGLubyte6 < _cCGLubyte6; ++_iCGLubyte6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ubv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ui( GLuint red, GLuint green, GLuint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ui(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3uiv( const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3uiv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLuint3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint3);
        for (size_t _iCGLuint3 = 0; _iCGLuint3 < _cCGLuint3; ++_iCGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3uiv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3us( GLushort red, GLushort green, GLushort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3us_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3us(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3usv( const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3usv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLushort3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLushort3);
        for (size_t _iCGLushort3 = 0; _iCGLushort3 < _cCGLushort3; ++_iCGLushort3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3usv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glSecondaryColorPointer(size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorPointer(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2d( GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2d(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble32 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble32);
        for (size_t _iCGLdouble32 = 0; _iCGLdouble32 < _cCGLdouble32; ++_iCGLdouble32) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble32]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2f( GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2f(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat41 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat41);
        for (size_t _iCGLfloat41 = 0; _iCGLfloat41 < _cCGLfloat41; ++_iCGLfloat41) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat41]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2i( GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2i(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint32 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint32);
        for (size_t _iCGLint32 = 0; _iCGLint32 < _cCGLint32; ++_iCGLint32) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint32]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2s( GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2s(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort21 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort21);
        for (size_t _iCGLshort21 = 0; _iCGLshort21 < _cCGLshort21; ++_iCGLshort21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3d( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3d(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3dv( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3dv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble33 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble33);
        for (size_t _iCGLdouble33 = 0; _iCGLdouble33 < _cCGLdouble33; ++_iCGLdouble33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3dv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3f( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3f(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3fv( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3fv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat42 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat42);
        for (size_t _iCGLfloat42 = 0; _iCGLfloat42 < _cCGLfloat42; ++_iCGLfloat42) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat42]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3fv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3i( GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3i(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3iv( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3iv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint33 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint33);
        for (size_t _iCGLint33 = 0; _iCGLint33 < _cCGLint33; ++_iCGLint33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3iv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3s( GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3s(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3sv( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3sv_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort22 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort22);
        for (size_t _iCGLshort22 = 0; _iCGLshort22 < _cCGLshort22; ++_iCGLshort22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3sv(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenQueries( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenQueries_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenQueries(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint3 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint3);
        for (size_t _iPGLuint3 = 0; _iPGLuint3 < _cPGLuint3; ++_iPGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteQueries( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteQueries_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint3 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint3);
        for (size_t _iCPGLuint3 = 0; _iCPGLuint3 < _cCPGLuint3; ++_iCPGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteQueries(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsQuery( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsQuery_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsQuery(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginQuery( GLenum target, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginQuery_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginQuery(target, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndQuery( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndQuery_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndQuery(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryiv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryiv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectiv( GLuint id, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectiv(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectuiv( GLuint id, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectuiv(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindBuffer( GLenum target, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBuffer(target, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteBuffers( GLsizei n, const GLuint * buffer ) {
    gltrace::Context *ctx = gltrace::getContext();
    if (ctx->needsShadowBuffers()) {
        for (GLsizei i = 0; i < n; i++) {
            ctx->buffers.erase(buffer[i]);
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (buffer) {
        size_t _cCPGLuint2 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint2);
        for (size_t _iCPGLuint2 = 0; _iCPGLuint2 < _cCPGLuint2; ++_iCPGLuint2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffer)[_iCPGLuint2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteBuffers(n, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenBuffers( GLsizei n, GLuint * buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenBuffers(n, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (buffer) {
        size_t _cPGLuint2 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint2);
        for (size_t _iPGLuint2 = 0; _iPGLuint2 < _cPGLuint2; ++_iPGLuint2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffer)[_iPGLuint2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsBuffer( GLuint buffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsBuffer(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBufferData( GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage ) {
    gltrace::Context *ctx = gltrace::getContext();
    if (ctx->needsShadowBuffers() && target == GL_ELEMENT_ARRAY_BUFFER) {
        GLint buffer_binding = 0;
        _glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, &buffer_binding);
        if (buffer_binding > 0) {
            gltrace::Buffer & buf = ctx->buffers[buffer_binding];
            buf.bufferData(size, data);
        }
    }

    unsigned _call = trace::localWriter.beginEnter(&_glBufferData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, usage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferData(target, size, data, usage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBufferSubData( GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data ) {
    gltrace::Context *ctx = gltrace::getContext();
    if (ctx->needsShadowBuffers() && target == GL_ELEMENT_ARRAY_BUFFER) {
        GLint buffer_binding = 0;
        _glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, &buffer_binding);
        if (buffer_binding > 0) {
            gltrace::Buffer & buf = ctx->buffers[buffer_binding];
            buf.bufferSubData(offset, size, data);
        }
    }

    unsigned _call = trace::localWriter.beginEnter(&_glBufferSubData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferSubData(target, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetBufferSubData( GLenum target, GLintptr offset, GLsizeiptr size, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferSubData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferSubData(target, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapBuffer( GLenum target, GLenum access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapBuffer(target, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    struct buffer_mapping *mapping = get_buffer_mapping(target);
    if (mapping) {
        mapping->map = _result;
        mapping->length = 0;
        _glGetBufferParameteriv(target, GL_BUFFER_SIZE, &mapping->length);
        mapping->write = (access != GL_READ_ONLY);
        mapping->explicit_flush = false;
    }
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glUnmapBuffer( GLenum target ) {
    GLboolean _result;
    GLint access = 0;
    _glGetBufferParameteriv(target, GL_BUFFER_ACCESS, &access);
    if (access != GL_READ_ONLY) {
        GLvoid *map = NULL;
        _glGetBufferPointerv(target, GL_BUFFER_MAP_POINTER, &map);
        if (map) {
            GLint length = -1;
            bool flush = true;
            if (_checkBufferMapRange) {
                _glGetBufferParameteriv(target, GL_BUFFER_MAP_LENGTH, &length);
                GLint access_flags = 0;
                _glGetBufferParameteriv(target, GL_BUFFER_ACCESS_FLAGS, &access_flags);
                flush = flush && !(access_flags & GL_MAP_FLUSH_EXPLICIT_BIT);
                if (length == -1) {
                    // Mesa drivers refuse GL_BUFFER_MAP_LENGTH without GL 3.0
                    static bool warned = false;
                    if (!warned) {
                        os::log("apitrace: warning: glGetBufferParameteriv(GL_BUFFER_MAP_LENGTH) failed\n");
                        warned = true;
                    }
                    struct buffer_mapping *mapping = get_buffer_mapping(target);
                    if (mapping) {
                        length = mapping->length;
                        flush = flush && !mapping->explicit_flush;
                    } else {
                        length = 0;
                        flush = false;
                    }
                }
            } else {
                length = 0;
                _glGetBufferParameteriv(target, GL_BUFFER_SIZE, &length);
            }
            if (_checkBufferFlushingUnmapAPPLE) {
                GLint flushing_unmap = GL_TRUE;
                _glGetBufferParameteriv(target, GL_BUFFER_FLUSHING_UNMAP_APPLE, &flushing_unmap);
                flush = flush && flushing_unmap;
            }
            if (flush && length > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)map);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob(map, length);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(length);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
            }
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glUnmapBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glUnmapBuffer(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetBufferParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetBufferPointerv( GLenum target, GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferPointerv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferPointerv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparate( GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparate(modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawBuffers( GLsizei n, const GLenum * bufs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (bufs) {
        size_t _cCGLenum = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLenum);
        for (size_t _iCGLenum = 0; _iCGLenum < _cCGLenum; ++_iCGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (bufs)[_iCGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBuffers(n, bufs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilOpSeparate( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilOpSeparate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dpfail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dppass);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilOpSeparate(face, sfail, dpfail, dppass);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilFuncSeparate( GLenum face, GLenum func, GLint ref, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilFuncSeparate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ref);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilFuncSeparate(face, func, ref, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilMaskSeparate( GLenum face, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilMaskSeparate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilMaskSeparate(face, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAttachShader( GLuint program, GLuint shader ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAttachShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAttachShader(program, shader);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindAttribLocation( GLuint program, GLuint index, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindAttribLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindAttribLocation(program, index, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompileShader( GLuint shader ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompileShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompileShader(shader);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glCreateProgram(  ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateProgram_sig);
    trace::localWriter.endEnter();
    _result = _glCreateProgram();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glCreateShader( GLenum type ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCreateShader(type);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeleteProgram( GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteProgram(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteShader( GLuint shader ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteShader(shader);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDetachShader( GLuint program, GLuint shader ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDetachShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDetachShader(program, shader);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVertexAttribArray( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVertexAttribArray_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVertexAttribArray(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableVertexAttribArray( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVertexAttribArray_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVertexAttribArray(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetActiveAttrib( GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveAttrib(program, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveUniform( GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniform_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniform(program, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetAttachedShaders( GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetAttachedShaders_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(maxCount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetAttachedShaders(program, maxCount, count, obj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (count) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*count);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (obj) {
        size_t _cGLuint = (count ? *count : maxCount) > 0 ? (count ? *count : maxCount) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((obj)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetAttribLocation( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetAttribLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetAttribLocation(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetProgramiv( GLuint program, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramiv(program, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramInfoLog( GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramInfoLog_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramInfoLog(program, bufSize, length, infoLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(infoLog), ((length) ? *(length) : strlen(infoLog)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetShaderiv( GLuint shader, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetShaderiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetShaderiv(shader, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetShaderInfoLog( GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetShaderInfoLog_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetShaderInfoLog(shader, bufSize, length, infoLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(infoLog), ((length) ? *(length) : strlen(infoLog)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetShaderSource( GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetShaderSource_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetShaderSource(shader, bufSize, length, source);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(source), ((length) ? *(length) : strlen(source)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetUniformLocation( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetUniformLocation(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetUniformfv( GLuint program, GLint location, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformfv(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetUniformiv( GLuint program, GLint location, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformiv(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribdv( GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribdv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribdv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribfv( GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribfv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribiv( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribiv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribPointerv( GLuint index, GLenum pname, GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribPointerv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribPointerv(index, pname, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (pointer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pointer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsProgram( GLuint program ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsProgram(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsShader( GLuint shader ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsShader_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsShader(shader);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glLinkProgram( GLuint program ) {
    _glLinkProgram(program);
    GLint active_attributes = 0;
    _glGetProgramiv(program, GL_ACTIVE_ATTRIBUTES, &active_attributes);
    for (GLint attrib = 0; attrib < active_attributes; ++attrib) {
        GLint size = 0;
        GLenum type = 0;
        GLchar name[256];
        _glGetActiveAttrib(program, attrib, sizeof name, NULL, &size, &type, name);
        if (name[0] != 'g' || name[1] != 'l' || name[2] != '_') {
            GLint location = _glGetAttribLocation(program, name);
            if (location >= 0) {
            unsigned _fake_call = trace::localWriter.beginEnter(&_glBindAttribLocation_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(location);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_fake_call);
            trace::localWriter.endLeave();
            }
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glLinkProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLinkProgram(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShaderSource( GLuint shader, GLsizei count, const GLchar * const * string, const GLint * length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderSource_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (string) {
        size_t _cCconstGLchar1 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCconstGLchar1);
        for (size_t _iCconstGLchar1 = 0; _iCconstGLchar1 < _cCconstGLchar1; ++_iCconstGLchar1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((string)[_iCconstGLchar1]), _glShaderSource_length(string, length, _iCconstGLchar1));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (length) {
        size_t _cCGLint34 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint34);
        for (size_t _iCGLint34 = 0; _iCGLint34 < _cCGLint34; ++_iCGLint34) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((length)[_iCGLint34]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderSource(shader, count, string, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUseProgram( GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUseProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUseProgram(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1f( GLint location, GLfloat v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1f(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2f( GLint location, GLfloat v0, GLfloat v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2f(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3f( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3f(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4f( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4f(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1i( GLint location, GLint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1i(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2i( GLint location, GLint v0, GLint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2i(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3i( GLint location, GLint v0, GLint v1, GLint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3i(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4i( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4i(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1fv( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat43 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat43);
        for (size_t _iCGLfloat43 = 0; _iCGLfloat43 < _cCGLfloat43; ++_iCGLfloat43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1fv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2fv( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat44 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat44);
        for (size_t _iCGLfloat44 = 0; _iCGLfloat44 < _cCGLfloat44; ++_iCGLfloat44) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat44]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2fv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3fv( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat45 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat45);
        for (size_t _iCGLfloat45 = 0; _iCGLfloat45 < _cCGLfloat45; ++_iCGLfloat45) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat45]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3fv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4fv( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat46 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat46);
        for (size_t _iCGLfloat46 = 0; _iCGLfloat46 < _cCGLfloat46; ++_iCGLfloat46) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat46]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4fv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1iv( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint35 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint35);
        for (size_t _iCGLint35 = 0; _iCGLint35 < _cCGLint35; ++_iCGLint35) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint35]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1iv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2iv( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint36 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint36);
        for (size_t _iCGLint36 = 0; _iCGLint36 < _cCGLint36; ++_iCGLint36) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint36]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2iv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3iv( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint37 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint37);
        for (size_t _iCGLint37 = 0; _iCGLint37 < _cCGLint37; ++_iCGLint37) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint37]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3iv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4iv( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint38 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint38);
        for (size_t _iCGLint38 = 0; _iCGLint38 < _cCGLint38; ++_iCGLint38) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint38]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4iv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat47 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat47);
        for (size_t _iCGLfloat47 = 0; _iCGLfloat47 < _cCGLfloat47; ++_iCGLfloat47) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat47]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat48 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat48);
        for (size_t _iCGLfloat48 = 0; _iCGLfloat48 < _cCGLfloat48; ++_iCGLfloat48) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat48]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat49 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat49);
        for (size_t _iCGLfloat49 = 0; _iCGLfloat49 < _cCGLfloat49; ++_iCGLfloat49) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat49]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glValidateProgram( GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glValidateProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glValidateProgram(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1d( GLuint index, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1d(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1f( GLuint index, GLfloat x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1f(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1fv( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1fv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1s( GLuint index, GLshort x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1s(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1sv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1sv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2d( GLuint index, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2d(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble35 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble35);
        for (size_t _iCGLdouble35 = 0; _iCGLdouble35 < _cCGLdouble35; ++_iCGLdouble35) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble35]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2f( GLuint index, GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2f(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2fv( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat51 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat51);
        for (size_t _iCGLfloat51 = 0; _iCGLfloat51 < _cCGLfloat51; ++_iCGLfloat51) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat51]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2fv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2s( GLuint index, GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2s(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2sv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort24 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort24);
        for (size_t _iCGLshort24 = 0; _iCGLshort24 < _cCGLshort24; ++_iCGLshort24) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort24]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2sv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3d( GLuint index, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3d(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble36 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble36);
        for (size_t _iCGLdouble36 = 0; _iCGLdouble36 < _cCGLdouble36; ++_iCGLdouble36) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble36]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3f( GLuint index, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3f(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3fv( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat52 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat52);
        for (size_t _iCGLfloat52 = 0; _iCGLfloat52 < _cCGLfloat52; ++_iCGLfloat52) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat52]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3fv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3s( GLuint index, GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3s(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3sv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort25 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort25);
        for (size_t _iCGLshort25 = 0; _iCGLshort25 < _cCGLshort25; ++_iCGLshort25) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort25]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3sv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nbv( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nbv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte4 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte4);
        for (size_t _iCGLbyte4 = 0; _iCGLbyte4 < _cCGLbyte4; ++_iCGLbyte4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nbv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Niv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Niv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint39 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint39);
        for (size_t _iCGLint39 = 0; _iCGLint39 < _cCGLint39; ++_iCGLint39) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint39]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Niv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nsv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nsv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort26 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort26);
        for (size_t _iCGLshort26 = 0; _iCGLshort26 < _cCGLshort26; ++_iCGLshort26) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort26]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nsv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nub( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nub_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nub(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nubv( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nubv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte7 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte7);
        for (size_t _iCGLubyte7 = 0; _iCGLubyte7 < _cCGLubyte7; ++_iCGLubyte7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nubv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nuiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint4 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint4);
        for (size_t _iCGLuint4 = 0; _iCGLuint4 < _cCGLuint4; ++_iCGLuint4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nuiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4Nusv( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4Nusv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort4 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort4);
        for (size_t _iCGLushort4 = 0; _iCGLushort4 < _cCGLushort4; ++_iCGLushort4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4Nusv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4bv( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4bv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte5 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte5);
        for (size_t _iCGLbyte5 = 0; _iCGLbyte5 < _cCGLbyte5; ++_iCGLbyte5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4bv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4d( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4d(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble37 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble37);
        for (size_t _iCGLdouble37 = 0; _iCGLdouble37 < _cCGLdouble37; ++_iCGLdouble37) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble37]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4f( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4f(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4fv( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat53 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat53);
        for (size_t _iCGLfloat53 = 0; _iCGLfloat53 < _cCGLfloat53; ++_iCGLfloat53) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat53]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4fv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4iv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint40 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint40);
        for (size_t _iCGLint40 = 0; _iCGLint40 < _cCGLint40; ++_iCGLint40) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint40]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4iv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4s( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4s_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4s(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4sv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort27 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort27);
        for (size_t _iCGLshort27 = 0; _iCGLshort27 < _cCGLshort27; ++_iCGLshort27) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort27]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4sv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4ubv( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4ubv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte8 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte8);
        for (size_t _iCGLubyte8 = 0; _iCGLubyte8 < _cCGLubyte8; ++_iCGLubyte8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4ubv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4uiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint5 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint5);
        for (size_t _iCGLuint5 = 0; _iCGLuint5 < _cCGLuint5; ++_iCGLuint5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4uiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4usv( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4usv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort5 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort5);
        for (size_t _iCGLushort5 = 0; _iCGLushort5 < _cCGLushort5; ++_iCGLushort5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4usv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribPointer( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribPointer(index, size, type, normalized, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2x3fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2x3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat54 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat54);
        for (size_t _iCGLfloat54 = 0; _iCGLfloat54 < _cCGLfloat54; ++_iCGLfloat54) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat54]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2x3fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3x2fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3x2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat55 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat55);
        for (size_t _iCGLfloat55 = 0; _iCGLfloat55 < _cCGLfloat55; ++_iCGLfloat55) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat55]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3x2fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2x4fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2x4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat56 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat56);
        for (size_t _iCGLfloat56 = 0; _iCGLfloat56 < _cCGLfloat56; ++_iCGLfloat56) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat56]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2x4fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4x2fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4x2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat57 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat57);
        for (size_t _iCGLfloat57 = 0; _iCGLfloat57 < _cCGLfloat57; ++_iCGLfloat57) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat57]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4x2fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3x4fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3x4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat58 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat58);
        for (size_t _iCGLfloat58 = 0; _iCGLfloat58 < _cCGLfloat58; ++_iCGLfloat58) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat58]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3x4fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4x3fv( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4x3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat59 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat59);
        for (size_t _iCGLfloat59 = 0; _iCGLfloat59 < _cCGLfloat59; ++_iCGLfloat59) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat59]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4x3fv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorMaski( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorMaski_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, a);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorMaski(index, r, g, b, a);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetBooleani_v( GLenum target, GLuint index, GLboolean * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBooleani_v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBooleani_v(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLboolean = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (data)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetIntegeri_v( GLenum target, GLuint index, GLint * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetIntegeri_v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetIntegeri_v(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLint = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((data)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glEnablei( GLenum target, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnablei_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnablei(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisablei( GLenum target, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisablei_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisablei(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsEnabledi( GLenum target, GLuint index ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsEnabledi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsEnabledi(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginTransformFeedback( GLenum primitiveMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginTransformFeedback_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, primitiveMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginTransformFeedback(primitiveMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndTransformFeedback(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndTransformFeedback_sig);
    trace::localWriter.endEnter();
    _glEndTransformFeedback();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferRange( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferRange(target, index, buffer, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferBase( GLenum target, GLuint index, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferBase_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferBase(target, index, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTransformFeedbackVaryings( GLuint program, GLsizei count, const GLchar * const * varyings, GLenum bufferMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformFeedbackVaryings_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (varyings) {
        size_t _cCconstGLchar = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCconstGLchar);
        for (size_t _iCconstGLchar = 0; _iCconstGLchar < _cCconstGLchar; ++_iCconstGLchar) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((varyings)[_iCconstGLchar]));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bufferMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformFeedbackVaryings(program, count, varyings, bufferMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTransformFeedbackVarying( GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTransformFeedbackVarying_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClampColor( GLenum target, GLenum clamp ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClampColor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, clamp);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClampColor(target, clamp);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBeginConditionalRender( GLuint id, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginConditionalRender_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginConditionalRender(id, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndConditionalRender(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndConditionalRender_sig);
    trace::localWriter.endEnter();
    _glEndConditionalRender();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribIPointer( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexAttribIPointer(index, size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribIPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribIPointer(index, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribIiv( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribIiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribIiv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribIuiv( GLuint index, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribIuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribIuiv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1i( GLuint index, GLint x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1i(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2i( GLuint index, GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2i(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3i( GLuint index, GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3i(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4i( GLuint index, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4i(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1ui( GLuint index, GLuint x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1ui(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2ui( GLuint index, GLuint x, GLuint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2ui(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3ui( GLuint index, GLuint x, GLuint y, GLuint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3ui(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4ui( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4ui(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1iv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1iv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2iv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint42 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint42);
        for (size_t _iCGLint42 = 0; _iCGLint42 < _cCGLint42; ++_iCGLint42) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint42]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2iv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3iv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint43 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint43);
        for (size_t _iCGLint43 = 0; _iCGLint43 < _cCGLint43; ++_iCGLint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3iv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4iv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint44 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint44);
        for (size_t _iCGLint44 = 0; _iCGLint44 < _cCGLint44; ++_iCGLint44) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint44]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4iv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1uiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1uiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2uiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint7 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLuint7);
        for (size_t _iCGLuint7 = 0; _iCGLuint7 < _cCGLuint7; ++_iCGLuint7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2uiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3uiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint8 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint8);
        for (size_t _iCGLuint8 = 0; _iCGLuint8 < _cCGLuint8; ++_iCGLuint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3uiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4uiv( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint9 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint9);
        for (size_t _iCGLuint9 = 0; _iCGLuint9 < _cCGLuint9; ++_iCGLuint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4uiv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4bv( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4bv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte6 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte6);
        for (size_t _iCGLbyte6 = 0; _iCGLbyte6 < _cCGLbyte6; ++_iCGLbyte6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4bv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4sv( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4sv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort28 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort28);
        for (size_t _iCGLshort28 = 0; _iCGLshort28 < _cCGLshort28; ++_iCGLshort28) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort28]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4sv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4ubv( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4ubv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte9 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte9);
        for (size_t _iCGLubyte9 = 0; _iCGLubyte9 < _cCGLubyte9; ++_iCGLubyte9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4ubv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4usv( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4usv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort6 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort6);
        for (size_t _iCGLushort6 = 0; _iCGLushort6 < _cCGLushort6; ++_iCGLushort6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4usv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetUniformuiv( GLuint program, GLint location, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformuiv(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindFragDataLocation( GLuint program, GLuint color, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFragDataLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(color);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFragDataLocation(program, color, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetFragDataLocation( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragDataLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetFragDataLocation(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glUniform1ui( GLint location, GLuint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1ui(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2ui( GLint location, GLuint v0, GLuint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2ui(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3ui( GLint location, GLuint v0, GLuint v1, GLuint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3ui(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4ui( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4ui(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1uiv( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint10 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint10);
        for (size_t _iCGLuint10 = 0; _iCGLuint10 < _cCGLuint10; ++_iCGLuint10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1uiv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2uiv( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint11 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint11);
        for (size_t _iCGLuint11 = 0; _iCGLuint11 < _cCGLuint11; ++_iCGLuint11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2uiv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3uiv( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint12 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint12);
        for (size_t _iCGLuint12 = 0; _iCGLuint12 < _cCGLuint12; ++_iCGLuint12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3uiv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4uiv( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint13 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint13);
        for (size_t _iCGLuint13 = 0; _iCGLuint13 < _cCGLuint13; ++_iCGLuint13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4uiv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterIiv( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterIiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint45 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint45);
        for (size_t _iCGLint45 = 0; _iCGLint45 < _cCGLint45; ++_iCGLint45) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint45]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterIiv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterIuiv( GLenum target, GLenum pname, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterIuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLuint14 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLuint14);
        for (size_t _iCGLuint14 = 0; _iCGLuint14 < _cCGLuint14; ++_iCGLuint14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterIuiv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterIiv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterIiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterIiv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterIuiv( GLenum target, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterIuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterIuiv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClearBufferiv( GLenum buffer, GLint drawbuffer, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(drawbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint46 = _glClearBuffer_size(buffer) > 0 ? _glClearBuffer_size(buffer) : 0;
        trace::localWriter.beginArray(_cCGLint46);
        for (size_t _iCGLint46 = 0; _iCGLint46 < _cCGLint46; ++_iCGLint46) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint46]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferiv(buffer, drawbuffer, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearBufferuiv( GLenum buffer, GLint drawbuffer, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(drawbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint15 = _glClearBuffer_size(buffer) > 0 ? _glClearBuffer_size(buffer) : 0;
        trace::localWriter.beginArray(_cCGLuint15);
        for (size_t _iCGLuint15 = 0; _iCGLuint15 < _cCGLuint15; ++_iCGLuint15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferuiv(buffer, drawbuffer, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearBufferfv( GLenum buffer, GLint drawbuffer, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(drawbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat60 = _glClearBuffer_size(buffer) > 0 ? _glClearBuffer_size(buffer) : 0;
        trace::localWriter.beginArray(_cCGLfloat60);
        for (size_t _iCGLfloat60 = 0; _iCGLfloat60 < _cCGLfloat60; ++_iCGLfloat60) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat60]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferfv(buffer, drawbuffer, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearBufferfi( GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferfi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(drawbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stencil);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferfi(buffer, drawbuffer, depth, stencil);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

const GLubyte * glGetStringi( GLenum name, GLuint index ) {
    const GLubyte * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetStringi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetStringi(name, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(reinterpret_cast<const char *>(_result));
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDrawArraysInstanced( GLenum mode, GLint first, GLsizei count, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysInstanced_count(first, count, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysInstanced_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysInstanced(mode, first, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstanced( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstanced_count(count, type, indices, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstanced_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstanced(mode, count, type, indices, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBuffer( GLenum target, GLenum internalformat, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBuffer(target, internalformat, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPrimitiveRestartIndex( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPrimitiveRestartIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPrimitiveRestartIndex(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetInteger64i_v( GLenum target, GLuint index, GLint64 * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInteger64i_v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInteger64i_v(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLint64 = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLint64);
        for (size_t _iGLint64 = 0; _iGLint64 < _cGLint64; ++_iGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((data)[_iGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetBufferParameteri64v( GLenum target, GLenum pname, GLint64 * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferParameteri64v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferParameteri64v(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint64 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64);
        for (size_t _iGLint64 = 0; _iGLint64 < _cGLint64; ++_iGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture( GLenum target, GLenum attachment, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture(target, attachment, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribDivisor( GLuint index, GLuint divisor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribDivisor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribDivisor(index, divisor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMinSampleShading( GLfloat value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMinSampleShading_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMinSampleShading(value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationi( GLuint buf, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationi_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationi(buf, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparatei( GLuint buf, GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparatei_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFunci( GLuint buf, GLenum src, GLenum dst ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFunci_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dst);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFunci(buf, src, dst);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparatei( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparatei_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveTextureARB( GLenum texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveTextureARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveTextureARB(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClientActiveTextureARB( GLenum texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClientActiveTextureARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClientActiveTextureARB(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1dARB( GLenum target, GLdouble s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1dARB(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1dvARB( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1dvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1fARB( GLenum target, GLfloat s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1fARB(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1fvARB( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1fvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1iARB( GLenum target, GLint s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1iARB(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1ivARB( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1ivARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1sARB( GLenum target, GLshort s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1sARB(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1svARB( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1svARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2dARB( GLenum target, GLdouble s, GLdouble t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2dARB(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2dvARB( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble39 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble39);
        for (size_t _iCGLdouble39 = 0; _iCGLdouble39 < _cCGLdouble39; ++_iCGLdouble39) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble39]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2dvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2fARB( GLenum target, GLfloat s, GLfloat t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2fARB(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2fvARB( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat62 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat62);
        for (size_t _iCGLfloat62 = 0; _iCGLfloat62 < _cCGLfloat62; ++_iCGLfloat62) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat62]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2fvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2iARB( GLenum target, GLint s, GLint t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2iARB(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2ivARB( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint48 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint48);
        for (size_t _iCGLint48 = 0; _iCGLint48 < _cCGLint48; ++_iCGLint48) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint48]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2ivARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2sARB( GLenum target, GLshort s, GLshort t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2sARB(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2svARB( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort30 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort30);
        for (size_t _iCGLshort30 = 0; _iCGLshort30 < _cCGLshort30; ++_iCGLshort30) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort30]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2svARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3dARB( GLenum target, GLdouble s, GLdouble t, GLdouble r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3dARB(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3dvARB( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble40 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble40);
        for (size_t _iCGLdouble40 = 0; _iCGLdouble40 < _cCGLdouble40; ++_iCGLdouble40) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble40]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3dvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3fARB( GLenum target, GLfloat s, GLfloat t, GLfloat r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3fARB(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3fvARB( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat63 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat63);
        for (size_t _iCGLfloat63 = 0; _iCGLfloat63 < _cCGLfloat63; ++_iCGLfloat63) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat63]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3fvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3iARB( GLenum target, GLint s, GLint t, GLint r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3iARB(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3ivARB( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint49 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint49);
        for (size_t _iCGLint49 = 0; _iCGLint49 < _cCGLint49; ++_iCGLint49) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint49]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3ivARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3sARB( GLenum target, GLshort s, GLshort t, GLshort r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3sARB(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3svARB( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort31 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort31);
        for (size_t _iCGLshort31 = 0; _iCGLshort31 < _cCGLshort31; ++_iCGLshort31) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort31]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3svARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4dARB( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4dARB(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4dvARB( GLenum target, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble41 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble41);
        for (size_t _iCGLdouble41 = 0; _iCGLdouble41 < _cCGLdouble41; ++_iCGLdouble41) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble41]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4dvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4fARB( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4fARB(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4fvARB( GLenum target, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat64 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat64);
        for (size_t _iCGLfloat64 = 0; _iCGLfloat64 < _cCGLfloat64; ++_iCGLfloat64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4fvARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4iARB( GLenum target, GLint s, GLint t, GLint r, GLint q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4iARB(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4ivARB( GLenum target, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint50 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint50);
        for (size_t _iCGLint50 = 0; _iCGLint50 < _cCGLint50; ++_iCGLint50) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint50]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4ivARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4sARB( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4sARB(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4svARB( GLenum target, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort32 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort32);
        for (size_t _iCGLshort32 = 0; _iCGLshort32 < _cCGLshort32; ++_iCGLshort32) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort32]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4svARB(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadTransposeMatrixfARB( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadTransposeMatrixfARB_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat65 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat65);
        for (size_t _iCGLfloat65 = 0; _iCGLfloat65 < _cCGLfloat65; ++_iCGLfloat65) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat65]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadTransposeMatrixfARB(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadTransposeMatrixdARB( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadTransposeMatrixdARB_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble42 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble42);
        for (size_t _iCGLdouble42 = 0; _iCGLdouble42 < _cCGLdouble42; ++_iCGLdouble42) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble42]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadTransposeMatrixdARB(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultTransposeMatrixfARB( const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultTransposeMatrixfARB_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfloat66 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat66);
        for (size_t _iCGLfloat66 = 0; _iCGLfloat66 < _cCGLfloat66; ++_iCGLfloat66) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat66]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultTransposeMatrixfARB(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultTransposeMatrixdARB( const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultTransposeMatrixdARB_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLdouble43 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble43);
        for (size_t _iCGLdouble43 = 0; _iCGLdouble43 < _cCGLdouble43; ++_iCGLdouble43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultTransposeMatrixdARB(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSampleCoverageARB( GLfloat value, GLboolean invert ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleCoverageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, invert);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleCoverageARB(value, invert);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage3DARB( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage3DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage2DARB( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage2DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage1DARB( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage1DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage3DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage3DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage2DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage2DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage1DARB( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage1DARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCompressedTexImageARB( GLenum target, GLint level, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCompressedTexImageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCompressedTexImageARB(target, level, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPointParameterfARB( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfARB(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfvARB( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat67 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat67);
        for (size_t _iCGLfloat67 = 0; _iCGLfloat67 < _cCGLfloat67; ++_iCGLfloat67) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat67]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfvARB(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightbvARB( GLint size, const GLbyte * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightbvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLbyte7 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLbyte7);
        for (size_t _iCGLbyte7 = 0; _iCGLbyte7 < _cCGLbyte7; ++_iCGLbyte7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((weights)[_iCGLbyte7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightbvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightsvARB( GLint size, const GLshort * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightsvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLshort33 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLshort33);
        for (size_t _iCGLshort33 = 0; _iCGLshort33 < _cCGLshort33; ++_iCGLshort33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((weights)[_iCGLshort33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightsvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightivARB( GLint size, const GLint * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLint51 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLint51);
        for (size_t _iCGLint51 = 0; _iCGLint51 < _cCGLint51; ++_iCGLint51) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((weights)[_iCGLint51]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightivARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightfvARB( GLint size, const GLfloat * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLfloat68 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLfloat68);
        for (size_t _iCGLfloat68 = 0; _iCGLfloat68 < _cCGLfloat68; ++_iCGLfloat68) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((weights)[_iCGLfloat68]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightfvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightdvARB( GLint size, const GLdouble * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLdouble44 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLdouble44);
        for (size_t _iCGLdouble44 = 0; _iCGLdouble44 < _cCGLdouble44; ++_iCGLdouble44) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((weights)[_iCGLdouble44]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightdvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightubvARB( GLint size, const GLubyte * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightubvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLubyte11 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLubyte11);
        for (size_t _iCGLubyte11 = 0; _iCGLubyte11 < _cCGLubyte11; ++_iCGLubyte11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((weights)[_iCGLubyte11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightubvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightusvARB( GLint size, const GLushort * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightusvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLushort7 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLushort7);
        for (size_t _iCGLushort7 = 0; _iCGLushort7 < _cCGLushort7; ++_iCGLushort7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((weights)[_iCGLushort7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightusvARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightuivARB( GLint size, const GLuint * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (weights) {
        size_t _cCGLuint16 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLuint16);
        for (size_t _iCGLuint16 = 0; _iCGLuint16 < _cCGLuint16; ++_iCGLuint16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((weights)[_iCGLuint16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightuivARB(size, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightPointerARB( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightPointerARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightPointerARB(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexBlendARB( GLint count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexBlendARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexBlendARB(count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCurrentPaletteMatrixARB( GLint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCurrentPaletteMatrixARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCurrentPaletteMatrixARB(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixIndexubvARB( GLint size, const GLubyte * indices ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixIndexubvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (indices) {
        size_t _cCGLubyte12 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLubyte12);
        for (size_t _iCGLubyte12 = 0; _iCGLubyte12 < _cCGLubyte12; ++_iCGLubyte12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((indices)[_iCGLubyte12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixIndexubvARB(size, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixIndexusvARB( GLint size, const GLushort * indices ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixIndexusvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (indices) {
        size_t _cCGLushort8 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLushort8);
        for (size_t _iCGLushort8 = 0; _iCGLushort8 < _cCGLushort8; ++_iCGLushort8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((indices)[_iCGLushort8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixIndexusvARB(size, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixIndexuivARB( GLint size, const GLuint * indices ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixIndexuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (indices) {
        size_t _cCGLuint17 = size > 0 ? size : 0;
        trace::localWriter.beginArray(_cCGLuint17);
        for (size_t _iCGLuint17 = 0; _iCGLuint17 < _cCGLuint17; ++_iCGLuint17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((indices)[_iCGLuint17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixIndexuivARB(size, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixIndexPointerARB( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixIndexPointerARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixIndexPointerARB(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2dARB( GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2dARB(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2dvARB( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2dvARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble45 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble45);
        for (size_t _iCGLdouble45 = 0; _iCGLdouble45 < _cCGLdouble45; ++_iCGLdouble45) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble45]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2dvARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2fARB( GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2fARB(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2fvARB( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2fvARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat69 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat69);
        for (size_t _iCGLfloat69 = 0; _iCGLfloat69 < _cCGLfloat69; ++_iCGLfloat69) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat69]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2fvARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2iARB( GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2iARB(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2ivARB( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2ivARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint52 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint52);
        for (size_t _iCGLint52 = 0; _iCGLint52 < _cCGLint52; ++_iCGLint52) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint52]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2ivARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2sARB( GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2sARB(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2svARB( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2svARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort34 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort34);
        for (size_t _iCGLshort34 = 0; _iCGLshort34 < _cCGLshort34; ++_iCGLshort34) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort34]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2svARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3dARB( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3dARB(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3dvARB( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3dvARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble46 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble46);
        for (size_t _iCGLdouble46 = 0; _iCGLdouble46 < _cCGLdouble46; ++_iCGLdouble46) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble46]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3dvARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3fARB( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3fARB(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3fvARB( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3fvARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat70 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat70);
        for (size_t _iCGLfloat70 = 0; _iCGLfloat70 < _cCGLfloat70; ++_iCGLfloat70) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat70]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3fvARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3iARB( GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3iARB(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3ivARB( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3ivARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint53 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint53);
        for (size_t _iCGLint53 = 0; _iCGLint53 < _cCGLint53; ++_iCGLint53) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint53]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3ivARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3sARB( GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3sARB(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3svARB( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3svARB_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort35 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort35);
        for (size_t _iCGLshort35 = 0; _iCGLshort35 < _cCGLshort35; ++_iCGLshort35) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort35]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3svARB(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1dARB( GLuint index, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1dARB(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1dvARB( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1dvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1fARB( GLuint index, GLfloat x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1fARB(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1fvARB( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1fvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1sARB( GLuint index, GLshort x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1sARB(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1svARB( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1svARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2dARB( GLuint index, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2dARB(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2dvARB( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble48 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble48);
        for (size_t _iCGLdouble48 = 0; _iCGLdouble48 < _cCGLdouble48; ++_iCGLdouble48) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble48]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2dvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2fARB( GLuint index, GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2fARB(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2fvARB( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat72 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat72);
        for (size_t _iCGLfloat72 = 0; _iCGLfloat72 < _cCGLfloat72; ++_iCGLfloat72) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat72]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2fvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2sARB( GLuint index, GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2sARB(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2svARB( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort37 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort37);
        for (size_t _iCGLshort37 = 0; _iCGLshort37 < _cCGLshort37; ++_iCGLshort37) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort37]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2svARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3dARB(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3dvARB( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble49 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble49);
        for (size_t _iCGLdouble49 = 0; _iCGLdouble49 < _cCGLdouble49; ++_iCGLdouble49) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble49]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3dvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3fARB(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3fvARB( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat73 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat73);
        for (size_t _iCGLfloat73 = 0; _iCGLfloat73 < _cCGLfloat73; ++_iCGLfloat73) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat73]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3fvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3sARB( GLuint index, GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3sARB(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3svARB( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort38 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort38);
        for (size_t _iCGLshort38 = 0; _iCGLshort38 < _cCGLshort38; ++_iCGLshort38) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort38]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3svARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NbvARB( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NbvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte8 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte8);
        for (size_t _iCGLbyte8 = 0; _iCGLbyte8 < _cCGLbyte8; ++_iCGLbyte8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NbvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NivARB( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint54 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint54);
        for (size_t _iCGLint54 = 0; _iCGLint54 < _cCGLint54; ++_iCGLint54) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint54]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NivARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NsvARB( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NsvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort39 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort39);
        for (size_t _iCGLshort39 = 0; _iCGLshort39 < _cCGLshort39; ++_iCGLshort39) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort39]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NsvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NubARB( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NubARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NubARB(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NubvARB( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NubvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte13 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte13);
        for (size_t _iCGLubyte13 = 0; _iCGLubyte13 < _cCGLubyte13; ++_iCGLubyte13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NubvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NuivARB( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint18 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint18);
        for (size_t _iCGLuint18 = 0; _iCGLuint18 < _cCGLuint18; ++_iCGLuint18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NuivARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4NusvARB( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4NusvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort9 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort9);
        for (size_t _iCGLushort9 = 0; _iCGLushort9 < _cCGLushort9; ++_iCGLushort9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4NusvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4bvARB( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4bvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte9 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte9);
        for (size_t _iCGLbyte9 = 0; _iCGLbyte9 < _cCGLbyte9; ++_iCGLbyte9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4bvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4dARB(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4dvARB( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble50 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble50);
        for (size_t _iCGLdouble50 = 0; _iCGLdouble50 < _cCGLdouble50; ++_iCGLdouble50) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble50]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4dvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4fARB(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4fvARB( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat74 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat74);
        for (size_t _iCGLfloat74 = 0; _iCGLfloat74 < _cCGLfloat74; ++_iCGLfloat74) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat74]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4fvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4ivARB( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint55 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint55);
        for (size_t _iCGLint55 = 0; _iCGLint55 < _cCGLint55; ++_iCGLint55) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint55]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4ivARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4sARB( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4sARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4sARB(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4svARB( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4svARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort40 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort40);
        for (size_t _iCGLshort40 = 0; _iCGLshort40 < _cCGLshort40; ++_iCGLshort40) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort40]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4svARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4ubvARB( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4ubvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte14 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte14);
        for (size_t _iCGLubyte14 = 0; _iCGLubyte14 < _cCGLubyte14; ++_iCGLubyte14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4ubvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4uivARB( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4uivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint19 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint19);
        for (size_t _iCGLuint19 = 0; _iCGLuint19 < _cCGLuint19; ++_iCGLuint19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4uivARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4usvARB( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4usvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort10 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort10);
        for (size_t _iCGLushort10 = 0; _iCGLushort10 < _cCGLushort10; ++_iCGLushort10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4usvARB(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribPointerARB( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
        ctx->user_arrays_arb = true;
    _glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointerARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableVertexAttribArrayARB( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVertexAttribArrayARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVertexAttribArrayARB(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVertexAttribArrayARB( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVertexAttribArrayARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVertexAttribArrayARB(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramStringARB( GLenum target, GLenum format, GLsizei len, const void * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string), len);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramStringARB(target, format, len, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindProgramARB( GLenum target, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindProgramARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindProgramARB(target, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteProgramsARB( GLsizei n, const GLuint * programs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteProgramsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (programs) {
        size_t _cCPGLuint7 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint7);
        for (size_t _iCPGLuint7 = 0; _iCPGLuint7 < _cCPGLuint7; ++_iCPGLuint7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((programs)[_iCPGLuint7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteProgramsARB(n, programs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenProgramsARB( GLsizei n, GLuint * programs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenProgramsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenProgramsARB(n, programs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (programs) {
        size_t _cPGLuint7 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint7);
        for (size_t _iPGLuint7 = 0; _iPGLuint7 < _cPGLuint7; ++_iPGLuint7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((programs)[_iPGLuint7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameter4dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameter4dARB(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameter4dvARB( GLenum target, GLuint index, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameter4dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLdouble51 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble51);
        for (size_t _iCGLdouble51 = 0; _iCGLdouble51 < _cCGLdouble51; ++_iCGLdouble51) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble51]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameter4dvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameter4fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameter4fARB(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameter4fvARB( GLenum target, GLuint index, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameter4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat75 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat75);
        for (size_t _iCGLfloat75 = 0; _iCGLfloat75 < _cCGLfloat75; ++_iCGLfloat75) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat75]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameter4fvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameter4dARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameter4dARB(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameter4dvARB( GLenum target, GLuint index, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameter4dvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLdouble52 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble52);
        for (size_t _iCGLdouble52 = 0; _iCGLdouble52 < _cCGLdouble52; ++_iCGLdouble52) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble52]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameter4dvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameter4fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameter4fARB(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameter4fvARB( GLenum target, GLuint index, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameter4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat76 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat76);
        for (size_t _iCGLfloat76 = 0; _iCGLfloat76 < _cCGLfloat76; ++_iCGLfloat76) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat76]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameter4fvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramEnvParameterdvARB( GLenum target, GLuint index, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramEnvParameterdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramEnvParameterdvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramEnvParameterfvARB( GLenum target, GLuint index, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramEnvParameterfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramEnvParameterfvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramLocalParameterdvARB( GLenum target, GLuint index, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramLocalParameterdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramLocalParameterdvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramLocalParameterfvARB( GLenum target, GLuint index, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramLocalParameterfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramLocalParameterfvARB(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramivARB( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramivARB(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramStringARB( GLenum target, GLenum pname, GLvoid * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramStringARB(target, pname, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)string);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribdvARB( GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribdvARB(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribfvARB( GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribfvARB(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribivARB( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribivARB(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribPointervARB( GLuint index, GLenum pname, GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribPointervARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribPointervARB(index, pname, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (pointer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pointer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsProgramARB( GLuint program ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsProgramARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsProgramARB(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindBufferARB( GLenum target, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferARB(target, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteBuffersARB( GLsizei n, const GLuint * buffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteBuffersARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (buffers) {
        size_t _cCPGLuint21 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint21);
        for (size_t _iCPGLuint21 = 0; _iCPGLuint21 < _cCPGLuint21; ++_iCPGLuint21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffers)[_iCPGLuint21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteBuffersARB(n, buffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenBuffersARB( GLsizei n, GLuint * buffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenBuffersARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenBuffersARB(n, buffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (buffers) {
        size_t _cPGLuint2 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint2);
        for (size_t _iPGLuint2 = 0; _iPGLuint2 < _cPGLuint2; ++_iPGLuint2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffers)[_iPGLuint2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsBufferARB( GLuint buffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsBufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsBufferARB(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBufferDataARB( GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBufferDataARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, usage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferDataARB(target, size, data, usage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBufferSubDataARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferSubDataARB(target, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferSubDataARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferSubDataARB(target, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapBufferARB( GLenum target, GLenum access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapBufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapBufferARB(target, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    struct buffer_mapping *mapping = get_buffer_mapping(target);
    if (mapping) {
        mapping->map = _result;
        mapping->length = 0;
        _glGetBufferParameteriv(target, GL_BUFFER_SIZE, &mapping->length);
        mapping->write = (access != GL_READ_ONLY);
        mapping->explicit_flush = false;
    }
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glUnmapBufferARB( GLenum target ) {
    GLboolean _result;
    GLint access = 0;
    _glGetBufferParameterivARB(target, GL_BUFFER_ACCESS, &access);
    if (access != GL_READ_ONLY) {
        GLvoid *map = NULL;
        _glGetBufferPointervARB(target, GL_BUFFER_MAP_POINTER, &map);
        if (map) {
            GLint length = -1;
            bool flush = true;
            if (_checkBufferMapRange) {
                _glGetBufferParameterivARB(target, GL_BUFFER_MAP_LENGTH, &length);
                GLint access_flags = 0;
                _glGetBufferParameteriv(target, GL_BUFFER_ACCESS_FLAGS, &access_flags);
                flush = flush && !(access_flags & GL_MAP_FLUSH_EXPLICIT_BIT);
                if (length == -1) {
                    // Mesa drivers refuse GL_BUFFER_MAP_LENGTH without GL 3.0
                    static bool warned = false;
                    if (!warned) {
                        os::log("apitrace: warning: glGetBufferParameterivARB(GL_BUFFER_MAP_LENGTH) failed\n");
                        warned = true;
                    }
                    struct buffer_mapping *mapping = get_buffer_mapping(target);
                    if (mapping) {
                        length = mapping->length;
                        flush = flush && !mapping->explicit_flush;
                    } else {
                        length = 0;
                        flush = false;
                    }
                }
            } else {
                length = 0;
                _glGetBufferParameterivARB(target, GL_BUFFER_SIZE, &length);
            }
            if (_checkBufferFlushingUnmapAPPLE) {
                GLint flushing_unmap = GL_TRUE;
                _glGetBufferParameterivARB(target, GL_BUFFER_FLUSHING_UNMAP_APPLE, &flushing_unmap);
                flush = flush && flushing_unmap;
            }
            if (flush && length > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)map);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob(map, length);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(length);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
            }
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glUnmapBufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glUnmapBufferARB(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetBufferParameterivARB( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferParameterivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferParameterivARB(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetBufferPointervARB( GLenum target, GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferPointervARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferPointervARB(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenQueriesARB( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenQueriesARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenQueriesARB(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint3 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint3);
        for (size_t _iPGLuint3 = 0; _iPGLuint3 < _cPGLuint3; ++_iPGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteQueriesARB( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteQueriesARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint31 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint31);
        for (size_t _iCPGLuint31 = 0; _iCPGLuint31 < _cCPGLuint31; ++_iCPGLuint31) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint31]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteQueriesARB(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsQueryARB( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsQueryARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsQueryARB(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginQueryARB( GLenum target, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginQueryARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginQueryARB(target, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndQueryARB( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndQueryARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndQueryARB(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryivARB( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryivARB(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectivARB( GLuint id, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectivARB(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectuivARB( GLuint id, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectuivARB(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteObjectARB( GLhandleARB obj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteObjectARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteObjectARB(obj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLhandleARB glGetHandleARB( GLenum pname ) {
    GLhandleARB _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetHandleARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetHandleARB(pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDetachObjectARB( GLhandleARB containerObj, GLhandleARB attachedObj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDetachObjectARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(containerObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(attachedObj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDetachObjectARB(containerObj, attachedObj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLhandleARB glCreateShaderObjectARB( GLenum shaderType ) {
    GLhandleARB _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateShaderObjectARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shaderType);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCreateShaderObjectARB(shaderType);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glShaderSourceARB( GLhandleARB shaderObj, GLsizei count, const GLcharARB * * const string, const GLint * length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderSourceARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shaderObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (string) {
        size_t _cconstGLcharARB1 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cconstGLcharARB1);
        for (size_t _iconstGLcharARB1 = 0; _iconstGLcharARB1 < _cconstGLcharARB1; ++_iconstGLcharARB1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((string)[_iconstGLcharARB1]), _glShaderSource_length(string, length, _iconstGLcharARB1));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (length) {
        size_t _cCGLint56 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint56);
        for (size_t _iCGLint56 = 0; _iCGLint56 < _cCGLint56; ++_iCGLint56) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((length)[_iCGLint56]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderSourceARB(shaderObj, count, string, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompileShaderARB( GLhandleARB shaderObj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompileShaderARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shaderObj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompileShaderARB(shaderObj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLhandleARB glCreateProgramObjectARB(  ) {
    GLhandleARB _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateProgramObjectARB_sig);
    trace::localWriter.endEnter();
    _result = _glCreateProgramObjectARB();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glAttachObjectARB( GLhandleARB containerObj, GLhandleARB obj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAttachObjectARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(containerObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAttachObjectARB(containerObj, obj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLinkProgramARB( GLhandleARB programObj ) {
    _glLinkProgramARB(programObj);
    GLint active_attributes = 0;
    _glGetObjectParameterivARB(programObj, GL_OBJECT_ACTIVE_ATTRIBUTES_ARB, &active_attributes);
    for (GLint attrib = 0; attrib < active_attributes; ++attrib) {
        GLint size = 0;
        GLenum type = 0;
        GLcharARB name[256];
        _glGetActiveAttribARB(programObj, attrib, sizeof name, NULL, &size, &type, name);
        if (name[0] != 'g' || name[1] != 'l' || name[2] != '_') {
            GLint location = _glGetAttribLocationARB(programObj, name);
            if (location >= 0) {
            unsigned _fake_call = trace::localWriter.beginEnter(&_glBindAttribLocationARB_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(location);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_fake_call);
            trace::localWriter.endLeave();
            }
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glLinkProgramARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLinkProgramARB(programObj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUseProgramObjectARB( GLhandleARB programObj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUseProgramObjectARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUseProgramObjectARB(programObj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glValidateProgramARB( GLhandleARB programObj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glValidateProgramARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glValidateProgramARB(programObj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1fARB( GLint location, GLfloat v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1fARB(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2fARB( GLint location, GLfloat v0, GLfloat v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2fARB(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3fARB( GLint location, GLfloat v0, GLfloat v1, GLfloat v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3fARB(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4fARB( GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4fARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4fARB(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1iARB( GLint location, GLint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1iARB(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2iARB( GLint location, GLint v0, GLint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2iARB(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3iARB( GLint location, GLint v0, GLint v1, GLint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3iARB(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4iARB( GLint location, GLint v0, GLint v1, GLint v2, GLint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4iARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4iARB(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1fvARB( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat77 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat77);
        for (size_t _iCGLfloat77 = 0; _iCGLfloat77 < _cCGLfloat77; ++_iCGLfloat77) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat77]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1fvARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2fvARB( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat78 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat78);
        for (size_t _iCGLfloat78 = 0; _iCGLfloat78 < _cCGLfloat78; ++_iCGLfloat78) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat78]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2fvARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3fvARB( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat79 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat79);
        for (size_t _iCGLfloat79 = 0; _iCGLfloat79 < _cCGLfloat79; ++_iCGLfloat79) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat79]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3fvARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4fvARB( GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat80 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat80);
        for (size_t _iCGLfloat80 = 0; _iCGLfloat80 < _cCGLfloat80; ++_iCGLfloat80) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat80]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4fvARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1ivARB( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint57 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint57);
        for (size_t _iCGLint57 = 0; _iCGLint57 < _cCGLint57; ++_iCGLint57) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint57]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1ivARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2ivARB( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint58 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint58);
        for (size_t _iCGLint58 = 0; _iCGLint58 < _cCGLint58; ++_iCGLint58) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint58]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2ivARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3ivARB( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint59 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint59);
        for (size_t _iCGLint59 = 0; _iCGLint59 < _cCGLint59; ++_iCGLint59) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint59]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3ivARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4ivARB( GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4ivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint60 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint60);
        for (size_t _iCGLint60 = 0; _iCGLint60 < _cCGLint60; ++_iCGLint60) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint60]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4ivARB(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2fvARB( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat81 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat81);
        for (size_t _iCGLfloat81 = 0; _iCGLfloat81 < _cCGLfloat81; ++_iCGLfloat81) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat81]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2fvARB(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3fvARB( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat82 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat82);
        for (size_t _iCGLfloat82 = 0; _iCGLfloat82 < _cCGLfloat82; ++_iCGLfloat82) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat82]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3fvARB(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4fvARB( GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4fvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat83 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat83);
        for (size_t _iCGLfloat83 = 0; _iCGLfloat83 < _cCGLfloat83; ++_iCGLfloat83) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat83]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4fvARB(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetObjectParameterfvARB( GLhandleARB obj, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectParameterfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectParameterfvARB(obj, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetObjectParameterivARB( GLhandleARB obj, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectParameterivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectParameterivARB(obj, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetInfoLogARB( GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInfoLogARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(maxLength);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInfoLogARB(obj, maxLength, length, infoLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(infoLog), ((length) ? *(length) : strlen(infoLog)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetAttachedObjectsARB( GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetAttachedObjectsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(containerObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(maxCount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (count) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*count);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (obj) {
        size_t _cPGLhandleARB = (count ? *count : maxCount) > 0 ? (count ? *count : maxCount) : 0;
        trace::localWriter.beginArray(_cPGLhandleARB);
        for (size_t _iPGLhandleARB = 0; _iPGLhandleARB < _cPGLhandleARB; ++_iPGLhandleARB) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((obj)[_iPGLhandleARB]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetUniformLocationARB( GLhandleARB programObj, const GLcharARB * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformLocationARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetUniformLocationARB(programObj, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetActiveUniformARB( GLhandleARB programObj, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniformARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniformARB(programObj, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetUniformfvARB( GLhandleARB programObj, GLint location, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformfvARB(programObj, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetUniformivARB( GLhandleARB programObj, GLint location, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformivARB(programObj, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetShaderSourceARB( GLhandleARB obj, GLsizei bufSize, GLsizei * length, GLcharARB * source ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetShaderSourceARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(obj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetShaderSourceARB(obj, bufSize, length, source);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(source), ((length) ? *(length) : strlen(source)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindAttribLocationARB( GLhandleARB programObj, GLuint index, const GLcharARB * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindAttribLocationARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindAttribLocationARB(programObj, index, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetActiveAttribARB( GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveAttribARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(maxLength);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetAttribLocationARB( GLhandleARB programObj, const GLcharARB * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetAttribLocationARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(programObj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetAttribLocationARB(programObj, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDrawBuffersARB( GLsizei n, const GLenum * bufs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBuffersARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (bufs) {
        size_t _cCGLenum1 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLenum1);
        for (size_t _iCGLenum1 = 0; _iCGLenum1 < _cCGLenum1; ++_iCGLenum1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (bufs)[_iCGLenum1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBuffersARB(n, bufs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClampColorARB( GLenum target, GLenum clamp ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClampColorARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, clamp);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClampColorARB(target, clamp);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawArraysInstancedARB( GLenum mode, GLint first, GLsizei count, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysInstancedARB_count(first, count, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysInstancedARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysInstancedARB(mode, first, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstancedARB( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstancedARB_count(count, type, indices, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstancedARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstancedARB(mode, count, type, indices, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsRenderbuffer( GLuint renderbuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsRenderbuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsRenderbuffer(renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindRenderbuffer( GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindRenderbuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindRenderbuffer(target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteRenderbuffers( GLsizei n, const GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteRenderbuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cCPGLuint9 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint9);
        for (size_t _iCPGLuint9 = 0; _iCPGLuint9 < _cCPGLuint9; ++_iCPGLuint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iCPGLuint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteRenderbuffers(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenRenderbuffers( GLsizei n, GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenRenderbuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenRenderbuffers(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cPGLuint9 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint9);
        for (size_t _iPGLuint9 = 0; _iPGLuint9 < _cPGLuint9; ++_iPGLuint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iPGLuint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorage( GLenum target, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorage(target, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetRenderbufferParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetRenderbufferParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetRenderbufferParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsFramebuffer( GLuint framebuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsFramebuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsFramebuffer(framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindFramebuffer( GLenum target, GLuint framebuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFramebuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFramebuffer(target, framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteFramebuffers( GLsizei n, const GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFramebuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cCPGLuint8 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint8);
        for (size_t _iCPGLuint8 = 0; _iCPGLuint8 < _cCPGLuint8; ++_iCPGLuint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iCPGLuint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFramebuffers(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenFramebuffers( GLsizei n, GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenFramebuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenFramebuffers(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cPGLuint8 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint8);
        for (size_t _iPGLuint8 = 0; _iPGLuint8 < _cPGLuint8; ++_iPGLuint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iPGLuint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glCheckFramebufferStatus( GLenum target ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCheckFramebufferStatus_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCheckFramebufferStatus(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFramebufferTexture1D( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture1D(target, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture2D( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture2D(target, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture3D( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferRenderbuffer( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferRenderbuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, renderbuffertarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFramebufferAttachmentParameteriv( GLenum target, GLenum attachment, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFramebufferAttachmentParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenerateMipmap( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenerateMipmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenerateMipmap(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlitFramebuffer( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlitFramebuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(srcX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(srcY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(dstX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(dstY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(dstX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(dstY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield1_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisample( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisample_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureLayer( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureLayer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureLayer(target, attachment, texture, level, layer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameteriARB( GLuint program, GLenum pname, GLint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameteriARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameteriARB(program, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureARB( GLenum target, GLenum attachment, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureARB(target, attachment, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureLayerARB( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureLayerARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureFaceARB( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureFaceARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureFaceARB(target, attachment, texture, level, face);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribDivisorARB( GLuint index, GLuint divisor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribDivisorARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribDivisorARB(index, divisor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapBufferRange( GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapBufferRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield4_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapBufferRange(target, offset, length, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    if (access & GL_MAP_WRITE_BIT) {
        _checkBufferMapRange = true;
    }
    struct buffer_mapping *mapping = get_buffer_mapping(target);
    if (mapping) {
        mapping->map = _result;
        mapping->length = length;
        mapping->write = access & GL_MAP_WRITE_BIT;
        mapping->explicit_flush = access & GL_MAP_FLUSH_EXPLICIT_BIT;
    }
    trace::localWriter.endLeave();
    return _result;
}

void glFlushMappedBufferRange( GLenum target, GLintptr offset, GLsizeiptr length ) {
    GLvoid *map = NULL;
    _glGetBufferPointerv(target, GL_BUFFER_MAP_POINTER, &map);
    if (map && length > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)(char *)map + offset);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob((const char *)map + offset, length);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(length);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
    }
    unsigned _call = trace::localWriter.beginEnter(&_glFlushMappedBufferRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFlushMappedBufferRange(target, offset, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBufferARB( GLenum target, GLenum internalformat, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBufferARB(target, internalformat, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexArray( GLuint array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexArray_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexArray(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteVertexArrays( GLsizei n, const GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteVertexArrays_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cCPGLuint111 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint111);
        for (size_t _iCPGLuint111 = 0; _iCPGLuint111 < _cCPGLuint111; ++_iCPGLuint111) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iCPGLuint111]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteVertexArrays(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenVertexArrays( GLsizei n, GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenVertexArrays_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenVertexArrays(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cPGLuint11 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint11);
        for (size_t _iPGLuint11 = 0; _iPGLuint11 < _cPGLuint11; ++_iPGLuint11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iPGLuint11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsVertexArray( GLuint array ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsVertexArray_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsVertexArray(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetUniformIndices( GLuint program, GLsizei uniformCount, const GLchar * const * uniformNames, GLuint * uniformIndices ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformIndices_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(uniformCount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (uniformNames) {
        size_t _cCconstGLchar2 = uniformCount > 0 ? uniformCount : 0;
        trace::localWriter.beginArray(_cCconstGLchar2);
        for (size_t _iCconstGLchar2 = 0; _iCconstGLchar2 < _cCconstGLchar2; ++_iCconstGLchar2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((uniformNames)[_iCconstGLchar2]));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (uniformIndices) {
        size_t _cGLuint = uniformCount > 0 ? uniformCount : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((uniformIndices)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveUniformsiv( GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniformsiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(uniformCount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (uniformIndices) {
        size_t _cCGLuint20 = uniformCount > 0 ? uniformCount : 0;
        trace::localWriter.beginArray(_cCGLuint20);
        for (size_t _iCGLuint20 = 0; _iCGLuint20 < _cCGLuint20; ++_iCGLuint20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((uniformIndices)[_iCGLuint20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveUniformName( GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniformName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uniformIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(uniformName), ((length) ? *(length) : strlen(uniformName)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLuint glGetUniformBlockIndex( GLuint program, const GLchar * uniformBlockName ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformBlockIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(uniformBlockName));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetUniformBlockIndex(program, uniformBlockName);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetActiveUniformBlockiv( GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniformBlockiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uniformBlockIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveUniformBlockName( GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveUniformBlockName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uniformBlockIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(uniformBlockName), ((length) ? *(length) : strlen(uniformBlockName)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glUniformBlockBinding( GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformBlockBinding_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uniformBlockIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(uniformBlockBinding);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyBufferSubData( GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyBufferSubData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, readTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, writeTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(readOffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(writeOffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsBaseVertex( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsBaseVertex_count(count, type, indices, basevertex);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsBaseVertex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(basevertex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawRangeElementsBaseVertex( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawRangeElementsBaseVertex_count(start, end, count, type, indices, basevertex);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawRangeElementsBaseVertex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(basevertex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstancedBaseVertex( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLint basevertex ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstancedBaseVertex_count(count, type, indices, primcount, basevertex);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstancedBaseVertex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(basevertex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstancedBaseVertex(mode, count, type, indices, primcount, basevertex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElementsBaseVertex( GLenum mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei drawcount, const GLint * basevertex ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawElementsBaseVertex_count(count, type, indices, drawcount, basevertex);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElementsBaseVertex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (count) {
        size_t _cCGLsizei2 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCGLsizei2);
        for (size_t _iCGLsizei2 = 0; _iCGLsizei2 < _cCGLsizei2; ++_iCGLsizei2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (indices) {
        size_t _cCconstGLvoid57 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCconstGLvoid57);
        for (size_t _iCconstGLvoid57 = 0; _iCconstGLvoid57 < _cCconstGLvoid57; ++_iCconstGLvoid57) {
            trace::localWriter.beginElement();
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>((indices)[_iCconstGLvoid57]));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>((indices)[_iCconstGLvoid57]), count[_iCconstGLvoid57]*_gl_type_size(type));
        break;
    }
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(drawcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (basevertex) {
        size_t _cCGLint61 = drawcount > 0 ? drawcount : 0;
        trace::localWriter.beginArray(_cCGLint61);
        for (size_t _iCGLint61 = 0; _iCGLint61 < _cCGLint61; ++_iCGLint61) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((basevertex)[_iCGLint61]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProvokingVertex( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProvokingVertex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProvokingVertex(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLsync glFenceSync( GLenum condition, GLbitfield flags ) {
    GLsync _result;
    unsigned _call = trace::localWriter.beginEnter(&_glFenceSync_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, condition);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glFenceSync(condition, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsSync( GLsync sync ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsSync_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsSync(sync);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeleteSync( GLsync sync ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteSync_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteSync(sync);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLenum glClientWaitSync( GLsync sync, GLbitfield flags, GLuint64 timeout ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glClientWaitSync_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield6_sig, flags);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(timeout);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glClientWaitSync(sync, flags, timeout);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glWaitSync( GLsync sync, GLbitfield flags, GLuint64 timeout ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWaitSync_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(timeout);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWaitSync(sync, flags, timeout);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetInteger64v( GLenum pname, GLint64 * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInteger64v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInteger64v(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLint64 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64);
        for (size_t _iGLint64 = 0; _iGLint64 < _cGLint64; ++_iGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSynciv( GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSynciv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSynciv(sync, pname, bufSize, length, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (values) {
        size_t _cGLint = (length ? *length : bufSize) > 0 ? (length ? *length : bufSize) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((values)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTexImage2DMultisample( GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage2DMultisample_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage3DMultisample( GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage3DMultisample_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetMultisamplefv( GLenum pname, GLuint index, GLfloat * val ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultisamplefv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultisamplefv(pname, index, val);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (val) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((val)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSampleMaski( GLuint index, GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleMaski_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleMaski(index, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationiARB( GLuint buf, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationiARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationiARB(buf, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparateiARB( GLuint buf, GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparateiARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFunciARB( GLuint buf, GLenum src, GLenum dst ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFunciARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dst);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFunciARB(buf, src, dst);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparateiARB( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparateiARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMinSampleShadingARB( GLfloat value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMinSampleShadingARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMinSampleShadingARB(value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedStringARB( GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(namelen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((namelen) >= 0 ? (namelen) : strlen(name)));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stringlen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string), ((stringlen) >= 0 ? (stringlen) : strlen(string)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedStringARB(type, namelen, name, stringlen, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteNamedStringARB( GLint namelen, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteNamedStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(namelen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((namelen) >= 0 ? (namelen) : strlen(name)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteNamedStringARB(namelen, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompileShaderIncludeARB( GLuint shader, GLsizei count, const GLchar * * path, const GLint * length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompileShaderIncludeARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(shader);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (path) {
        size_t _cconstGLchar5 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cconstGLchar5);
        for (size_t _iconstGLchar5 = 0; _iconstGLchar5 < _cconstGLchar5; ++_iconstGLchar5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((path)[_iconstGLchar5]), _glShaderSource_length(path, length, _iconstGLchar5));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (length) {
        size_t _cCGLint62 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint62);
        for (size_t _iCGLint62 = 0; _iCGLint62 < _cCGLint62; ++_iCGLint62) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((length)[_iCGLint62]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompileShaderIncludeARB(shader, count, path, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsNamedStringARB( GLint namelen, const GLchar * name ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsNamedStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(namelen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((namelen) >= 0 ? (namelen) : strlen(name)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsNamedStringARB(namelen, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetNamedStringARB( GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(namelen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((namelen) >= 0 ? (namelen) : strlen(name)));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedStringARB(namelen, name, bufSize, stringlen, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (stringlen) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*stringlen);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string), ((stringlen) ? *(stringlen) : strlen(string)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedStringivARB( GLint namelen, const GLchar * name, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedStringivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(namelen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((namelen) >= 0 ? (namelen) : strlen(name)));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedStringivARB(namelen, name, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindFragDataLocationIndexed( GLuint program, GLuint colorNumber, GLuint index, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFragDataLocationIndexed_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(colorNumber);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFragDataLocationIndexed(program, colorNumber, index, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetFragDataIndex( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragDataIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetFragDataIndex(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGenSamplers( GLsizei count, GLuint * samplers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenSamplers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenSamplers(count, samplers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (samplers) {
        size_t _cPGLuint15 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cPGLuint15);
        for (size_t _iPGLuint15 = 0; _iPGLuint15 < _cPGLuint15; ++_iPGLuint15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((samplers)[_iPGLuint15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteSamplers( GLsizei count, const GLuint * samplers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteSamplers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (samplers) {
        size_t _cCPGLuint15 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCPGLuint15);
        for (size_t _iCPGLuint15 = 0; _iCPGLuint15 < _cCPGLuint15; ++_iCPGLuint15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((samplers)[_iCPGLuint15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteSamplers(count, samplers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsSampler( GLuint sampler ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsSampler_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsSampler(sampler);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindSampler( GLuint unit, GLuint sampler ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindSampler_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(unit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindSampler(unit, sampler);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameteri( GLuint sampler, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameteri(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameteriv( GLuint sampler, GLenum pname, const GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (param) {
        size_t _cCGLint63 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint63);
        for (size_t _iCGLint63 = 0; _iCGLint63 < _cCGLint63; ++_iCGLint63) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((param)[_iCGLint63]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameteriv(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameterf( GLuint sampler, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameterf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameterf(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameterfv( GLuint sampler, GLenum pname, const GLfloat * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (param) {
        size_t _cCGLfloat84 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat84);
        for (size_t _iCGLfloat84 = 0; _iCGLfloat84 < _cCGLfloat84; ++_iCGLfloat84) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((param)[_iCGLfloat84]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameterfv(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameterIiv( GLuint sampler, GLenum pname, const GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameterIiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (param) {
        size_t _cCGLint64 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint64);
        for (size_t _iCGLint64 = 0; _iCGLint64 < _cCGLint64; ++_iCGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((param)[_iCGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameterIiv(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplerParameterIuiv( GLuint sampler, GLenum pname, const GLuint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplerParameterIuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (param) {
        size_t _cCGLuint21 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLuint21);
        for (size_t _iCGLuint21 = 0; _iCGLuint21 < _cCGLuint21; ++_iCGLuint21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((param)[_iCGLuint21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplerParameterIuiv(sampler, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetSamplerParameteriv( GLuint sampler, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSamplerParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSamplerParameteriv(sampler, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSamplerParameterIiv( GLuint sampler, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSamplerParameterIiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSamplerParameterIiv(sampler, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSamplerParameterfv( GLuint sampler, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSamplerParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSamplerParameterfv(sampler, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSamplerParameterIuiv( GLuint sampler, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSamplerParameterIuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSamplerParameterIuiv(sampler, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glQueryCounter( GLuint id, GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glQueryCounter_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glQueryCounter(id, target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjecti64v( GLuint id, GLenum pname, GLint64 * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjecti64v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjecti64v(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint64 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64);
        for (size_t _iGLint64 = 0; _iGLint64 < _cGLint64; ++_iGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectui64v( GLuint id, GLenum pname, GLuint64 * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectui64v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectui64v(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64);
        for (size_t _iGLuint64 = 0; _iGLuint64 < _cGLuint64; ++_iGLuint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexP2ui( GLenum type, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP2ui(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexP2uiv( GLenum type, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP2uiv(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexP3ui( GLenum type, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP3ui(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexP3uiv( GLenum type, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP3uiv(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexP4ui( GLenum type, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP4ui(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexP4uiv( GLenum type, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexP4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexP4uiv(type, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP1ui( GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP1ui(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP1uiv( GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP1uiv(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP2ui( GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP2ui(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP2uiv( GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP2uiv(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP3ui( GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP3ui(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP3uiv( GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP3uiv(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP4ui( GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP4ui(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordP4uiv( GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordP4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordP4uiv(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP1ui( GLenum texture, GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP1ui(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP1uiv( GLenum texture, GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP1uiv(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP2ui( GLenum texture, GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP2ui(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP2uiv( GLenum texture, GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP2uiv(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP3ui( GLenum texture, GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP3ui(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP3uiv( GLenum texture, GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP3uiv(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP4ui( GLenum texture, GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP4ui(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordP4uiv( GLenum texture, GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordP4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordP4uiv(texture, type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalP3ui( GLenum type, GLuint coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coords);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalP3ui(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalP3uiv( GLenum type, const GLuint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalP3uiv(type, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorP3ui( GLenum type, GLuint color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(color);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorP3ui(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorP3uiv( GLenum type, const GLuint * color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (color) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*color);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorP3uiv(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorP4ui( GLenum type, GLuint color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorP4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(color);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorP4ui(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorP4uiv( GLenum type, const GLuint * color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorP4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (color) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*color);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorP4uiv(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorP3ui( GLenum type, GLuint color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(color);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorP3ui(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorP3uiv( GLenum type, const GLuint * color ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (color) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*color);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorP3uiv(type, color);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP1ui( GLuint index, GLenum type, GLboolean normalized, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP1ui(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP1uiv( GLuint index, GLenum type, GLboolean normalized, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP1uiv(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP2ui( GLuint index, GLenum type, GLboolean normalized, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP2ui(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP2uiv( GLuint index, GLenum type, GLboolean normalized, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP2uiv(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP3ui( GLuint index, GLenum type, GLboolean normalized, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP3ui(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP3uiv( GLuint index, GLenum type, GLboolean normalized, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP3uiv(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP4ui( GLuint index, GLenum type, GLboolean normalized, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP4ui(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribP4uiv( GLuint index, GLenum type, GLboolean normalized, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribP4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribP4uiv(index, type, normalized, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawArraysIndirect( GLenum mode, const GLvoid * indirect ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysIndirect_count(indirect);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysIndirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysIndirect(mode, indirect);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsIndirect( GLenum mode, GLenum type, const GLvoid * indirect ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsIndirect_count(type, indirect);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsIndirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsIndirect(mode, type, indirect);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1d( GLint location, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1d(location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2d( GLint location, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2d(location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3d( GLint location, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3d(location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4d( GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4d(location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1dv( GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLdouble53 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLdouble53);
        for (size_t _iCGLdouble53 = 0; _iCGLdouble53 < _cCGLdouble53; ++_iCGLdouble53) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble53]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1dv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2dv( GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLdouble54 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble54);
        for (size_t _iCGLdouble54 = 0; _iCGLdouble54 < _cCGLdouble54; ++_iCGLdouble54) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble54]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2dv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3dv( GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLdouble55 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble55);
        for (size_t _iCGLdouble55 = 0; _iCGLdouble55 < _cCGLdouble55; ++_iCGLdouble55) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble55]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3dv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4dv( GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLdouble56 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble56);
        for (size_t _iCGLdouble56 = 0; _iCGLdouble56 < _cCGLdouble56; ++_iCGLdouble56) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble56]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4dv(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble57 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble57);
        for (size_t _iCGLdouble57 = 0; _iCGLdouble57 < _cCGLdouble57; ++_iCGLdouble57) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble57]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble58 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble58);
        for (size_t _iCGLdouble58 = 0; _iCGLdouble58 < _cCGLdouble58; ++_iCGLdouble58) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble58]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble59 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble59);
        for (size_t _iCGLdouble59 = 0; _iCGLdouble59 < _cCGLdouble59; ++_iCGLdouble59) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble59]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2x3dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2x3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble60 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble60);
        for (size_t _iCGLdouble60 = 0; _iCGLdouble60 < _cCGLdouble60; ++_iCGLdouble60) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble60]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2x3dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix2x4dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix2x4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble61 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble61);
        for (size_t _iCGLdouble61 = 0; _iCGLdouble61 < _cCGLdouble61; ++_iCGLdouble61) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble61]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix2x4dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3x2dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3x2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble62 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble62);
        for (size_t _iCGLdouble62 = 0; _iCGLdouble62 < _cCGLdouble62; ++_iCGLdouble62) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble62]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3x2dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix3x4dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix3x4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble63 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble63);
        for (size_t _iCGLdouble63 = 0; _iCGLdouble63 < _cCGLdouble63; ++_iCGLdouble63) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble63]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix3x4dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4x2dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4x2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble64 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble64);
        for (size_t _iCGLdouble64 = 0; _iCGLdouble64 < _cCGLdouble64; ++_iCGLdouble64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4x2dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformMatrix4x3dv( GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformMatrix4x3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble65 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble65);
        for (size_t _iCGLdouble65 = 0; _iCGLdouble65 < _cCGLdouble65; ++_iCGLdouble65) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble65]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformMatrix4x3dv(location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetUniformdv( GLuint program, GLint location, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformdv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformdv(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetSubroutineUniformLocation( GLuint program, GLenum shadertype, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetSubroutineUniformLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetSubroutineUniformLocation(program, shadertype, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glGetSubroutineIndex( GLuint program, GLenum shadertype, const GLchar * name ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetSubroutineIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetSubroutineIndex(program, shadertype, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetActiveSubroutineUniformiv( GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveSubroutineUniformiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveSubroutineUniformName( GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveSubroutineUniformName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufsize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveSubroutineName( GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveSubroutineName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufsize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glUniformSubroutinesuiv( GLenum shadertype, GLsizei count, const GLuint * indices ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformSubroutinesuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (indices) {
        size_t _cCGLuint41 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint41);
        for (size_t _iCGLuint41 = 0; _iCGLuint41 < _cCGLuint41; ++_iCGLuint41) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((indices)[_iCGLuint41]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformSubroutinesuiv(shadertype, count, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetUniformSubroutineuiv( GLenum shadertype, GLint location, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformSubroutineuiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformSubroutineuiv(shadertype, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramStageiv( GLuint program, GLenum shadertype, GLenum pname, GLint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramStageiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramStageiv(program, shadertype, pname, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (values) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*values);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPatchParameteri( GLenum pname, GLint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPatchParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPatchParameteri(pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPatchParameterfv( GLenum pname, const GLfloat * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPatchParameterfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (values) {
        size_t _cCGLfloat85 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat85);
        for (size_t _iCGLfloat85 = 0; _iCGLfloat85 < _cCGLfloat85; ++_iCGLfloat85) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((values)[_iCGLfloat85]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPatchParameterfv(pname, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindTransformFeedback( GLenum target, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindTransformFeedback_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindTransformFeedback(target, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteTransformFeedbacks( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteTransformFeedbacks_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint16 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint16);
        for (size_t _iCPGLuint16 = 0; _iCPGLuint16 < _cCPGLuint16; ++_iCPGLuint16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteTransformFeedbacks(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenTransformFeedbacks( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenTransformFeedbacks_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenTransformFeedbacks(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint16 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint16);
        for (size_t _iPGLuint16 = 0; _iPGLuint16 < _cPGLuint16; ++_iPGLuint16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsTransformFeedback( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsTransformFeedback_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsTransformFeedback(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPauseTransformFeedback(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPauseTransformFeedback_sig);
    trace::localWriter.endEnter();
    _glPauseTransformFeedback();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResumeTransformFeedback(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResumeTransformFeedback_sig);
    trace::localWriter.endEnter();
    _glResumeTransformFeedback();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTransformFeedback( GLenum mode, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTransformFeedback_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTransformFeedback(mode, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTransformFeedbackStream( GLenum mode, GLuint id, GLuint stream ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTransformFeedbackStream_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTransformFeedbackStream(mode, id, stream);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBeginQueryIndexed( GLenum target, GLuint index, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginQueryIndexed_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginQueryIndexed(target, index, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndQueryIndexed( GLenum target, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndQueryIndexed_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndQueryIndexed(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryIndexediv( GLenum target, GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryIndexediv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryIndexediv(target, index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glReleaseShaderCompiler(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReleaseShaderCompiler_sig);
    trace::localWriter.endEnter();
    _glReleaseShaderCompiler();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShaderBinary( GLsizei count, const GLuint * shaders, GLenum binaryformat, const GLvoid * binary, GLsizei length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderBinary_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (shaders) {
        size_t _cCGLuint42 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint42);
        for (size_t _iCGLuint42 = 0; _iCGLuint42 < _cCGLuint42; ++_iCGLuint42) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((shaders)[_iCGLuint42]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, binaryformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(binary, length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderBinary(count, shaders, binaryformat, binary, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetShaderPrecisionFormat( GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetShaderPrecisionFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, shadertype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, precisiontype);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (range) {
        size_t _cGLint = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((range)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (precision) {
        size_t _cGLint = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((precision)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDepthRangef( GLfloat n, GLfloat f ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRangef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(f);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRangef(n, f);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearDepthf( GLfloat d ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearDepthf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(d);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearDepthf(d);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramBinary( GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramBinary_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (binaryFormat) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *binaryFormat);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)binary);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramBinary( GLuint program, GLenum binaryFormat, const GLvoid * binary, GLsizei length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramBinary_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, binaryFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(binary, length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramBinary(program, binaryFormat, binary, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameteri( GLuint program, GLenum pname, GLint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameteri(program, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUseProgramStages( GLuint pipeline, GLbitfield stages, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUseProgramStages_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield3_sig, stages);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUseProgramStages(pipeline, stages, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveShaderProgram( GLuint pipeline, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveShaderProgram_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveShaderProgram(pipeline, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glCreateShaderProgramv( GLenum type, GLsizei count, const GLchar * const * strings ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateShaderProgramv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (strings) {
        size_t _cCconstGLchar3 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCconstGLchar3);
        for (size_t _iCconstGLchar3 = 0; _iCconstGLchar3 < _cCconstGLchar3; ++_iCconstGLchar3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((strings)[_iCconstGLchar3]));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCreateShaderProgramv(type, count, strings);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindProgramPipeline( GLuint pipeline ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindProgramPipeline_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindProgramPipeline(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteProgramPipelines( GLsizei n, const GLuint * pipelines ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteProgramPipelines_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (pipelines) {
        size_t _cCGLuint43 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLuint43);
        for (size_t _iCGLuint43 = 0; _iCGLuint43 < _cCGLuint43; ++_iCGLuint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pipelines)[_iCGLuint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteProgramPipelines(n, pipelines);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenProgramPipelines( GLsizei n, GLuint * pipelines ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenProgramPipelines_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenProgramPipelines(n, pipelines);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pipelines) {
        size_t _cPGLuint14 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint14);
        for (size_t _iPGLuint14 = 0; _iPGLuint14 < _cPGLuint14; ++_iPGLuint14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pipelines)[_iPGLuint14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsProgramPipeline( GLuint pipeline ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsProgramPipeline_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsProgramPipeline(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetProgramPipelineiv( GLuint pipeline, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramPipelineiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramPipelineiv(pipeline, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1i( GLuint program, GLint location, GLint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1i(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1iv( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint65 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint65);
        for (size_t _iCGLint65 = 0; _iCGLint65 < _cCGLint65; ++_iCGLint65) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint65]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1iv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1f( GLuint program, GLint location, GLfloat v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1f(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1fv( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat86 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat86);
        for (size_t _iCGLfloat86 = 0; _iCGLfloat86 < _cCGLfloat86; ++_iCGLfloat86) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat86]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1fv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1d( GLuint program, GLint location, GLdouble v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1d(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1dv( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble66 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLdouble66);
        for (size_t _iCGLdouble66 = 0; _iCGLdouble66 < _cCGLdouble66; ++_iCGLdouble66) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble66]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1dv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1ui( GLuint program, GLint location, GLuint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1ui(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1uiv( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint44 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint44);
        for (size_t _iCGLuint44 = 0; _iCGLuint44 < _cCGLuint44; ++_iCGLuint44) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint44]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1uiv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2i( GLuint program, GLint location, GLint v0, GLint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2i(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2iv( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint66 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint66);
        for (size_t _iCGLint66 = 0; _iCGLint66 < _cCGLint66; ++_iCGLint66) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint66]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2iv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2f( GLuint program, GLint location, GLfloat v0, GLfloat v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2f(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2fv( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat87 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat87);
        for (size_t _iCGLfloat87 = 0; _iCGLfloat87 < _cCGLfloat87; ++_iCGLfloat87) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat87]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2fv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2d( GLuint program, GLint location, GLdouble v0, GLdouble v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2d(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2dv( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble67 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble67);
        for (size_t _iCGLdouble67 = 0; _iCGLdouble67 < _cCGLdouble67; ++_iCGLdouble67) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble67]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2dv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2ui( GLuint program, GLint location, GLuint v0, GLuint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2ui(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2uiv( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint45 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint45);
        for (size_t _iCGLuint45 = 0; _iCGLuint45 < _cCGLuint45; ++_iCGLuint45) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint45]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2uiv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3i( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3i(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3iv( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint67 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint67);
        for (size_t _iCGLint67 = 0; _iCGLint67 < _cCGLint67; ++_iCGLint67) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint67]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3iv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3f( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3f(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3fv( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat88 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat88);
        for (size_t _iCGLfloat88 = 0; _iCGLfloat88 < _cCGLfloat88; ++_iCGLfloat88) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat88]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3fv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3d( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3d(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3dv( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble68 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble68);
        for (size_t _iCGLdouble68 = 0; _iCGLdouble68 < _cCGLdouble68; ++_iCGLdouble68) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble68]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3dv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3ui( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3ui(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3uiv( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint46 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint46);
        for (size_t _iCGLuint46 = 0; _iCGLuint46 < _cCGLuint46; ++_iCGLuint46) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint46]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3uiv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4i( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4i_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4i(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4iv( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4iv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint68 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint68);
        for (size_t _iCGLint68 = 0; _iCGLint68 < _cCGLint68; ++_iCGLint68) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint68]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4iv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4f( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4f_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4f(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4fv( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat89 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat89);
        for (size_t _iCGLfloat89 = 0; _iCGLfloat89 < _cCGLfloat89; ++_iCGLfloat89) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat89]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4fv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4d( GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4d(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4dv( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble69 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble69);
        for (size_t _iCGLdouble69 = 0; _iCGLdouble69 < _cCGLdouble69; ++_iCGLdouble69) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble69]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4dv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4ui( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4ui_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4ui(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4uiv( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4uiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint47 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint47);
        for (size_t _iCGLuint47 = 0; _iCGLuint47 < _cCGLuint47; ++_iCGLuint47) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint47]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4uiv(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat90 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat90);
        for (size_t _iCGLfloat90 = 0; _iCGLfloat90 < _cCGLfloat90; ++_iCGLfloat90) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat90]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat91 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat91);
        for (size_t _iCGLfloat91 = 0; _iCGLfloat91 < _cCGLfloat91; ++_iCGLfloat91) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat91]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat92 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat92);
        for (size_t _iCGLfloat92 = 0; _iCGLfloat92 < _cCGLfloat92; ++_iCGLfloat92) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat92]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble70 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble70);
        for (size_t _iCGLdouble70 = 0; _iCGLdouble70 < _cCGLdouble70; ++_iCGLdouble70) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble70]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble71 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble71);
        for (size_t _iCGLdouble71 = 0; _iCGLdouble71 < _cCGLdouble71; ++_iCGLdouble71) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble71]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble72 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble72);
        for (size_t _iCGLdouble72 = 0; _iCGLdouble72 < _cCGLdouble72; ++_iCGLdouble72) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble72]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x3fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat93 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat93);
        for (size_t _iCGLfloat93 = 0; _iCGLfloat93 < _cCGLfloat93; ++_iCGLfloat93) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat93]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x2fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat94 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat94);
        for (size_t _iCGLfloat94 = 0; _iCGLfloat94 < _cCGLfloat94; ++_iCGLfloat94) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat94]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x4fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat95 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat95);
        for (size_t _iCGLfloat95 = 0; _iCGLfloat95 < _cCGLfloat95; ++_iCGLfloat95) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat95]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x2fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x2fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat96 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat96);
        for (size_t _iCGLfloat96 = 0; _iCGLfloat96 < _cCGLfloat96; ++_iCGLfloat96) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat96]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x4fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x4fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat97 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat97);
        for (size_t _iCGLfloat97 = 0; _iCGLfloat97 < _cCGLfloat97; ++_iCGLfloat97) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat97]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x3fv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x3fv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat98 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat98);
        for (size_t _iCGLfloat98 = 0; _iCGLfloat98 < _cCGLfloat98; ++_iCGLfloat98) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat98]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x3dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble73 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble73);
        for (size_t _iCGLdouble73 = 0; _iCGLdouble73 < _cCGLdouble73; ++_iCGLdouble73) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble73]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x2dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble74 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble74);
        for (size_t _iCGLdouble74 = 0; _iCGLdouble74 < _cCGLdouble74; ++_iCGLdouble74) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble74]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x4dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble75 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble75);
        for (size_t _iCGLdouble75 = 0; _iCGLdouble75 < _cCGLdouble75; ++_iCGLdouble75) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble75]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x2dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble76 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble76);
        for (size_t _iCGLdouble76 = 0; _iCGLdouble76 < _cCGLdouble76; ++_iCGLdouble76) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble76]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x4dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble77 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble77);
        for (size_t _iCGLdouble77 = 0; _iCGLdouble77 < _cCGLdouble77; ++_iCGLdouble77) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble77]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x3dv( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble78 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble78);
        for (size_t _iCGLdouble78 = 0; _iCGLdouble78 < _cCGLdouble78; ++_iCGLdouble78) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble78]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glValidateProgramPipeline( GLuint pipeline ) {
    unsigned _call = trace::localWriter.beginEnter(&_glValidateProgramPipeline_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glValidateProgramPipeline(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramPipelineInfoLog( GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramPipelineInfoLog_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(infoLog), ((length) ? *(length) : strlen(infoLog)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1d( GLuint index, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1d(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2d( GLuint index, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2d(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3d( GLuint index, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3d(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4d( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4d_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4d(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble80 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble80);
        for (size_t _iCGLdouble80 = 0; _iCGLdouble80 < _cCGLdouble80; ++_iCGLdouble80) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble80]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble81 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble81);
        for (size_t _iCGLdouble81 = 0; _iCGLdouble81 < _cCGLdouble81; ++_iCGLdouble81) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble81]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4dv( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4dv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble82 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble82);
        for (size_t _iCGLdouble82 = 0; _iCGLdouble82 < _cCGLdouble82; ++_iCGLdouble82) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble82]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4dv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribLPointer( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexAttribLPointer(index, size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribLPointer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribLPointer(index, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribLdv( GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribLdv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribLdv(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glViewportArrayv( GLuint first, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glViewportArrayv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat99 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat99);
        for (size_t _iCGLfloat99 = 0; _iCGLfloat99 < _cCGLfloat99; ++_iCGLfloat99) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat99]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glViewportArrayv(first, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glViewportIndexedf( GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h ) {
    unsigned _call = trace::localWriter.beginEnter(&_glViewportIndexedf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(h);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glViewportIndexedf(index, x, y, w, h);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glViewportIndexedfv( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glViewportIndexedfv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat100 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat100);
        for (size_t _iCGLfloat100 = 0; _iCGLfloat100 < _cCGLfloat100; ++_iCGLfloat100) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat100]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glViewportIndexedfv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScissorArrayv( GLuint first, GLsizei count, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScissorArrayv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLint69 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint69);
        for (size_t _iCGLint69 = 0; _iCGLint69 < _cCGLint69; ++_iCGLint69) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint69]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScissorArrayv(first, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScissorIndexed( GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScissorIndexed_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScissorIndexed(index, left, bottom, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScissorIndexedv( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScissorIndexedv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint70 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint70);
        for (size_t _iCGLint70 = 0; _iCGLint70 < _cCGLint70; ++_iCGLint70) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint70]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScissorIndexedv(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthRangeArrayv( GLuint first, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRangeArrayv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble83 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble83);
        for (size_t _iCGLdouble83 = 0; _iCGLdouble83 < _cCGLdouble83; ++_iCGLdouble83) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble83]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRangeArrayv(first, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthRangeIndexed( GLuint index, GLdouble n, GLdouble f ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRangeIndexed_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(f);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRangeIndexed(index, n, f);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFloati_v( GLenum target, GLuint index, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFloati_v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFloati_v(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLfloat = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((data)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetDoublei_v( GLenum target, GLuint index, GLdouble * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetDoublei_v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetDoublei_v(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLdouble = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((data)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDebugMessageControlARB( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageControlARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (ids) {
        size_t _cCGLuint48 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint48);
        for (size_t _iCGLuint48 = 0; _iCGLuint48 < _cCGLuint48; ++_iCGLuint48) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCGLuint48]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, enabled);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageControlARB(source, type, severity, count, ids, enabled);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageInsertARB( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageInsertARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeString(reinterpret_cast<const char *>(buf), ((length) >= 0 ? (length) : strlen(buf)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageInsertARB(source, type, id, severity, length, buf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageCallbackARB( GLDEBUGPROCARB callback, const GLvoid * userParam ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageCallbackARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)callback);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)userParam);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageCallbackARB(callback, userParam);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGetDebugMessageLogARB( GLuint count, GLsizei bufsize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetDebugMessageLogARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufsize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (sources) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (sources)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (types) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (types)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (ids) {
        size_t _cGLuint = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (severities) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (severities)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (lengths) {
        size_t _cGLsizei = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLsizei);
        for (size_t _iGLsizei = 0; _iGLsizei < _cGLsizei; ++_iGLsizei) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((lengths)[_iGLsizei]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeString(reinterpret_cast<const char *>(messageLog), _glGetDebugMessageLog_length(messageLog, lengths, _result));
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLenum glGetGraphicsResetStatusARB(  ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetGraphicsResetStatusARB_sig);
    trace::localWriter.endEnter();
    _result = _glGetGraphicsResetStatusARB();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetnMapdvARB( GLenum target, GLenum query, GLsizei bufSize, GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnMapdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnMapdvARB(target, query, bufSize, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cGLdouble = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnMapfvARB( GLenum target, GLenum query, GLsizei bufSize, GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnMapfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnMapfvARB(target, query, bufSize, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cGLfloat = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnMapivARB( GLenum target, GLenum query, GLsizei bufSize, GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnMapivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, query);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnMapivARB(target, query, bufSize, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cGLint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnPixelMapfvARB( GLenum map, GLsizei bufSize, GLfloat * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnPixelMapfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnPixelMapfvARB(map, bufSize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cGLfloat = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((values)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnPixelMapuivARB( GLenum map, GLsizei bufSize, GLuint * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnPixelMapuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnPixelMapuivARB(map, bufSize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cGLuint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((values)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnPixelMapusvARB( GLenum map, GLsizei bufSize, GLushort * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnPixelMapusvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, map);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnPixelMapusvARB(map, bufSize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (values) {
        size_t _cGLushort = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLushort);
        for (size_t _iGLushort = 0; _iGLushort < _cGLushort; ++_iGLushort) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((values)[_iGLushort]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnPolygonStippleARB( GLsizei bufSize, GLubyte * pattern ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnPolygonStippleARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnPolygonStippleARB(bufSize, pattern);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pattern);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnColorTableARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnColorTableARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnColorTableARB(target, format, type, bufSize, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)table);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnConvolutionFilterARB( GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnConvolutionFilterARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnConvolutionFilterARB(target, format, type, bufSize, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnSeparableFilterARB( GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid * row, GLsizei columnBufSize, GLvoid * column, GLvoid * span ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnSeparableFilterARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(rowBufSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(columnBufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)row);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)column);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writePointer((uintptr_t)span);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnHistogramARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnHistogramARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnHistogramARB(target, reset, format, type, bufSize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnMinmaxARB( GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnMinmaxARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnMinmaxARB(target, reset, format, type, bufSize, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnTexImageARB( GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnTexImageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnTexImageARB(target, level, format, type, bufSize, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glReadnPixelsARB( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadnPixelsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadnPixelsARB(x, y, width, height, format, type, bufSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(7);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnCompressedTexImageARB( GLenum target, GLint lod, GLsizei bufSize, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnCompressedTexImageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(lod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnCompressedTexImageARB(target, lod, bufSize, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnUniformfvARB( GLuint program, GLint location, GLsizei bufSize, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnUniformfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnUniformfvARB(program, location, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnUniformivARB( GLuint program, GLint location, GLsizei bufSize, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnUniformivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnUniformivARB(program, location, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnUniformuivARB( GLuint program, GLint location, GLsizei bufSize, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnUniformuivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnUniformuivARB(program, location, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLuint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetnUniformdvARB( GLuint program, GLint location, GLsizei bufSize, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetnUniformdvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetnUniformdvARB(program, location, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDrawArraysInstancedBaseInstance( GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysInstancedBaseInstance_count(first, count, primcount, baseinstance);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysInstancedBaseInstance_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(baseinstance);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysInstancedBaseInstance(mode, first, count, primcount, baseinstance);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstancedBaseInstance( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLuint baseinstance ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstancedBaseInstance_count(count, type, indices, primcount, baseinstance);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstancedBaseInstance_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(baseinstance);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstancedBaseInstance(mode, count, type, indices, primcount, baseinstance);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstancedBaseVertexBaseInstance( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount, GLint basevertex, GLuint baseinstance ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstancedBaseVertexBaseInstance_count(count, type, indices, primcount, basevertex, baseinstance);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstancedBaseVertexBaseInstance_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(basevertex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(baseinstance);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, primcount, basevertex, baseinstance);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTransformFeedbackInstanced( GLenum mode, GLuint id, GLsizei primcount ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTransformFeedbackInstanced_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTransformFeedbackInstanced(mode, id, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTransformFeedbackStreamInstanced( GLenum mode, GLuint id, GLuint stream, GLsizei primcount ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTransformFeedbackStreamInstanced_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTransformFeedbackStreamInstanced(mode, id, stream, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetInternalformativ( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInternalformativ_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInternalformativ(target, internalformat, pname, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetActiveAtomicCounterBufferiv( GLuint program, GLuint bufferIndex, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveAtomicCounterBufferiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(bufferIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindImageTexture( GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindImageTexture_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(unit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, layered);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindImageTexture(unit, texture, level, layered, layer, access, format);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMemoryBarrier( GLbitfield barriers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMemoryBarrier_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield7_sig, barriers);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMemoryBarrier(barriers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage1D( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage1D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage1D(target, levels, internalformat, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage2D( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage2D(target, levels, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage3D( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage3D(target, levels, internalformat, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorage1DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorage1DEXT(texture, target, levels, internalformat, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorage2DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorage3DEXT( GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageControl( GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageControl_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (ids) {
        size_t _cCGLuint49 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint49);
        for (size_t _iCGLuint49 = 0; _iCGLuint49 < _cCGLuint49; ++_iCGLuint49) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCGLuint49]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, enabled);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageControl(source, type, severity, count, ids, enabled);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageInsert( GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageInsert_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeString(reinterpret_cast<const char *>(buf), ((length) >= 0 ? (length) : strlen(buf)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageInsert(source, type, id, severity, length, buf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageCallback( GLDEBUGPROC callback, const void * userParam ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageCallback_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)callback);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)userParam);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageCallback(callback, userParam);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGetDebugMessageLog( GLuint count, GLsizei bufsize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetDebugMessageLog_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufsize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetDebugMessageLog(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (sources) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (sources)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (types) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (types)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (ids) {
        size_t _cGLuint = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (severities) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (severities)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (lengths) {
        size_t _cGLsizei = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLsizei);
        for (size_t _iGLsizei = 0; _iGLsizei < _cGLsizei; ++_iGLsizei) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((lengths)[_iGLsizei]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeString(reinterpret_cast<const char *>(messageLog), _glGetDebugMessageLog_length(messageLog, lengths, _result));
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPushDebugGroup( GLenum source, GLuint id, GLsizei length, const GLchar * message ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushDebugGroup_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(message), ((length) >= 0 ? (length) : strlen(message)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushDebugGroup(source, id, length, message);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopDebugGroup(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopDebugGroup_sig);
    trace::localWriter.endEnter();
    _glPopDebugGroup();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glObjectLabel( GLenum identifier, GLuint name, GLsizei length, const GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glObjectLabel_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, identifier);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label), ((length) >= 0 ? (length) : strlen(label)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glObjectLabel(identifier, name, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetObjectLabel( GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectLabel_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, identifier);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectLabel(identifier, name, bufSize, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label), ((length) ? *(length) : strlen(label)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glObjectPtrLabel( const void * ptr, GLsizei length, const GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glObjectPtrLabel_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ptr);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label), ((length) >= 0 ? (length) : strlen(label)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glObjectPtrLabel(ptr, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetObjectPtrLabel( const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectPtrLabel_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ptr);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectPtrLabel(ptr, bufSize, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label), ((length) ? *(length) : strlen(label)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClearBufferData( GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferData(target, internalformat, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearBufferSubData( GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearBufferSubData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearBufferSubData(target, internalformat, offset, size, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearNamedBufferDataEXT( GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearNamedBufferDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearNamedBufferDataEXT(buffer, internalformat, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearNamedBufferSubDataEXT( GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearNamedBufferSubDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDispatchCompute( GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDispatchCompute_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(num_groups_x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(num_groups_y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(num_groups_z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDispatchComputeIndirect( GLintptr indirect ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDispatchComputeIndirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(indirect);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDispatchComputeIndirect(indirect);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyImageSubData( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyImageSubData_sig);
    trace::localWriter.beginArg(0);
    _write__GLuint26(srcTarget, srcName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(srcY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(srcZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    _write__GLuint27(dstTarget, dstName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(dstLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(dstX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeSInt(dstY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(dstZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(srcWidth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writeSInt(srcHeight);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(14);
    trace::localWriter.writeSInt(srcDepth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureView( GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureView_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(origtexture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(minlevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(numlevels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(minlayer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(numlayers);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexBuffer( GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexBuffer(bindingindex, buffer, offset, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribFormat( GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribIFormat( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribIFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribLFormat( GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribLFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribBinding( GLuint attribindex, GLuint bindingindex ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribBinding_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribBinding(attribindex, bindingindex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexBindingDivisor( GLuint bindingindex, GLuint divisor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexBindingDivisor_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexBindingDivisor(bindingindex, divisor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayBindVertexBufferEXT( GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayBindVertexBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribFormatEXT( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribFormatEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribIFormatEXT( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribIFormatEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribLFormatEXT( GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribLFormatEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(relativeoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribBindingEXT( GLuint vaobj, GLuint attribindex, GLuint bindingindex ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribBindingEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(attribindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexBindingDivisorEXT( GLuint vaobj, GLuint bindingindex, GLuint divisor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexBindingDivisorEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(bindingindex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferParameteri( GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferParameteri_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferParameteri(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFramebufferParameteriv( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFramebufferParameteriv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFramebufferParameteriv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferParameteriEXT( GLuint framebuffer, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferParameteriEXT(framebuffer, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedFramebufferParameterivEXT( GLuint framebuffer, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedFramebufferParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedFramebufferParameterivEXT(framebuffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetInternalformati64v( GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInternalformati64v_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInternalformati64v(target, internalformat, pname, bufSize, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLint64 = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLint64);
        for (size_t _iGLint64 = 0; _iGLint64 < _cGLint64; ++_iGLint64) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glInvalidateTexSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateTexSubImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInvalidateTexImage( GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateTexImage(texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInvalidateBufferSubData( GLuint buffer, GLintptr offset, GLsizeiptr length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateBufferSubData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateBufferSubData(buffer, offset, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInvalidateBufferData( GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateBufferData_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateBufferData(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInvalidateFramebuffer( GLenum target, GLsizei numAttachments, const GLenum * attachments ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateFramebuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numAttachments);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (attachments) {
        size_t _cCGLenum2 = numAttachments > 0 ? numAttachments : 0;
        trace::localWriter.beginArray(_cCGLenum2);
        for (size_t _iCGLenum2 = 0; _iCGLenum2 < _cCGLenum2; ++_iCGLenum2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (attachments)[_iCGLenum2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateFramebuffer(target, numAttachments, attachments);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInvalidateSubFramebuffer( GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInvalidateSubFramebuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numAttachments);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (attachments) {
        size_t _cCGLenum3 = numAttachments > 0 ? numAttachments : 0;
        trace::localWriter.beginArray(_cCGLenum3);
        for (size_t _iCGLenum3 = 0; _iCGLenum3 < _cCGLenum3; ++_iCGLenum3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (attachments)[_iCGLenum3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawArraysIndirect( GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawArraysIndirect_count(indirect, drawcount, stride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawArraysIndirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(drawcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElementsIndirect( GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawElementsIndirect_count(type, indirect, drawcount, stride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElementsIndirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(drawcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramInterfaceiv( GLuint program, GLenum programInterface, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramInterfaceiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramInterfaceiv(program, programInterface, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLuint glGetProgramResourceIndex( GLuint program, GLenum programInterface, const GLchar * name ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramResourceIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetProgramResourceIndex(program, programInterface, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetProgramResourceName( GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramResourceName_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramResourceiv( GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramResourceiv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(propCount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (props) {
        size_t _cCGLenum4 = propCount > 0 ? propCount : 0;
        trace::localWriter.beginArray(_cCGLenum4);
        for (size_t _iCGLenum4 = 0; _iCGLenum4 < _cCGLenum4; ++_iCGLenum4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (props)[_iCGLenum4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(6);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (params) {
        size_t _cGLint = bufSize > 0 ? bufSize : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLint glGetProgramResourceLocation( GLuint program, GLenum programInterface, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramResourceLocation_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetProgramResourceLocation(program, programInterface, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLint glGetProgramResourceLocationIndex( GLuint program, GLenum programInterface, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramResourceLocationIndex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, programInterface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetProgramResourceLocationIndex(program, programInterface, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glShaderStorageBlockBinding( GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderStorageBlockBinding_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(storageBlockIndex);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(storageBlockBinding);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBufferRange( GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBufferRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBufferRange(target, internalformat, buffer, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureBufferRangeEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureBufferRangeEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage2DMultisample( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage2DMultisample_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage3DMultisample( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage3DMultisample_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorage2DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorage2DMultisampleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorage3DMultisampleEXT( GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorage3DMultisampleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedsamplelocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBuffersBase( GLenum target, GLuint first, GLsizei count, const GLuint * buffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBuffersBase_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (buffers) {
        size_t _cCGLuint50 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint50);
        for (size_t _iCGLuint50 = 0; _iCGLuint50 < _cCGLuint50; ++_iCGLuint50) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffers)[_iCGLuint50]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBuffersBase(target, first, count, buffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBuffersRange( GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBuffersRange_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (buffers) {
        size_t _cCGLuint51 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint51);
        for (size_t _iCGLuint51 = 0; _iCGLuint51 < _cCGLuint51; ++_iCGLuint51) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffers)[_iCGLuint51]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (offsets) {
        size_t _cCGLintptr = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLintptr);
        for (size_t _iCGLintptr = 0; _iCGLintptr < _cCGLintptr; ++_iCGLintptr) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((offsets)[_iCGLintptr]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (sizes) {
        size_t _cCGLsizeiptr = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLsizeiptr);
        for (size_t _iCGLsizeiptr = 0; _iCGLsizeiptr < _cCGLsizeiptr; ++_iCGLsizeiptr) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((sizes)[_iCGLsizeiptr]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBuffersRange(target, first, count, buffers, offsets, sizes);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindImageTextures( GLuint first, GLsizei count, const GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindImageTextures_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (textures) {
        size_t _cCGLuint52 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint52);
        for (size_t _iCGLuint52 = 0; _iCGLuint52 < _cCGLuint52; ++_iCGLuint52) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCGLuint52]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindImageTextures(first, count, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindSamplers( GLuint first, GLsizei count, const GLuint * samplers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindSamplers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (samplers) {
        size_t _cCGLuint53 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint53);
        for (size_t _iCGLuint53 = 0; _iCGLuint53 < _cCGLuint53; ++_iCGLuint53) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((samplers)[_iCGLuint53]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindSamplers(first, count, samplers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindTextures( GLuint first, GLsizei count, const GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindTextures_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (textures) {
        size_t _cCGLuint54 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint54);
        for (size_t _iCGLuint54 = 0; _iCGLuint54 < _cCGLuint54; ++_iCGLuint54) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCGLuint54]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindTextures(first, count, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexBuffers( GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (buffers) {
        size_t _cCGLuint55 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint55);
        for (size_t _iCGLuint55 = 0; _iCGLuint55 < _cCGLuint55; ++_iCGLuint55) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((buffers)[_iCGLuint55]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (offsets) {
        size_t _cCGLintptr1 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLintptr1);
        for (size_t _iCGLintptr1 = 0; _iCGLintptr1 < _cCGLintptr1; ++_iCGLintptr1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((offsets)[_iCGLintptr1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (strides) {
        size_t _cCGLsizei3 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLsizei3);
        for (size_t _iCGLsizei3 = 0; _iCGLsizei3 < _cCGLsizei3; ++_iCGLsizei3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((strides)[_iCGLsizei3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexBuffers(first, count, buffers, offsets, strides);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBufferStorage( GLenum target, GLsizeiptr size, const GLvoid * data, GLbitfield flags ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBufferStorage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield5_sig, flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferStorage(target, size, data, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedBufferStorageEXT( GLuint buffer, GLsizeiptr size, const GLvoid * data, GLbitfield flags ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedBufferStorageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield5_sig, flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedBufferStorageEXT(buffer, size, data, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearTexImage( GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearTexImage(texture, level, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearTexSubImage( GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearTexSubImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeBlob(data, _glClearBufferData_size(format, type));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendColorEXT( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendColorEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendColorEXT(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPolygonOffsetEXT( GLfloat factor, GLfloat bias ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPolygonOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(factor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(bias);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPolygonOffsetEXT(factor, bias);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage3DEXT( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexImage3D_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage3D_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexFilterFuncSGIS( GLenum target, GLenum filter, GLfloat * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexFilterFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexFilterFuncSGIS(target, filter, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)weights);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTexFilterFuncSGIS( GLenum target, GLenum filter, GLsizei n, const GLfloat * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexFilterFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (weights) {
        size_t _cCGLfloat101 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLfloat101);
        for (size_t _iCGLfloat101 = 0; _iCGLfloat101 < _cCGLfloat101; ++_iCGLfloat101) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((weights)[_iCGLfloat101]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexFilterFuncSGIS(target, filter, n, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage1DEXT( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage1D_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage2DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTexSubImage2D_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexImage1DEXT( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexImage2DEXT( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage1DEXT( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage2DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage3DEXT( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetHistogramEXT( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogramEXT(target, reset, format, type, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetHistogramParameterfvEXT( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogramParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogramParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetHistogramParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetHistogramParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetHistogramParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmaxEXT( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmaxEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, reset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmaxEXT(target, reset, format, type, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)values);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmaxParameterfvEXT( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmaxParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmaxParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMinmaxParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMinmaxParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMinmaxParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glHistogramEXT( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink ) {
    unsigned _call = trace::localWriter.beginEnter(&_glHistogramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, sink);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glHistogramEXT(target, width, internalformat, sink);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMinmaxEXT( GLenum target, GLenum internalformat, GLboolean sink ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMinmaxEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, sink);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMinmaxEXT(target, internalformat, sink);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResetHistogramEXT( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResetHistogramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glResetHistogramEXT(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResetMinmaxEXT( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResetMinmaxEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glResetMinmaxEXT(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionFilter1DEXT( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionFilter1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeBlob(image, _glConvolutionFilter1D_size(format, type, width));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionFilter2DEXT( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionFilter2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(image, _glConvolutionFilter2D_size(format, type, width, height));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameterfEXT( GLenum target, GLenum pname, GLfloat params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameterfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameterfEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameterfvEXT( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat102 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat102);
        for (size_t _iCGLfloat102 = 0; _iCGLfloat102 < _cCGLfloat102; ++_iCGLfloat102) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat102]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameteriEXT( GLenum target, GLenum pname, GLint params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameteriEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glConvolutionParameterivEXT( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glConvolutionParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint71 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint71);
        for (size_t _iCGLint71 = 0; _iCGLint71 < _cCGLint71; ++_iCGLint71) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint71]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glConvolutionParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyConvolutionFilter1DEXT( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyConvolutionFilter1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyConvolutionFilter2DEXT( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyConvolutionFilter2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionFilterEXT( GLenum target, GLenum format, GLenum type, GLvoid * image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionFilterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionFilterEXT(target, format, type, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionParameterfvEXT( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetConvolutionParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetConvolutionParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetConvolutionParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetSeparableFilterEXT( GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSeparableFilterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSeparableFilterEXT(target, format, type, row, column, span);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)row);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)column);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)span);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSeparableFilter2DEXT( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSeparableFilter2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(row, _glConvolutionFilter1D_size(format, type, width));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeBlob(column, _glConvolutionFilter1D_size(format, type, height));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableSGI( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeBlob(table, _glColorTable_size(format, type, width));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableSGI(target, internalformat, width, format, type, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableParameterfvSGI( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableParameterfvSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat103 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat103);
        for (size_t _iCGLfloat103 = 0; _iCGLfloat103 < _cCGLfloat103; ++_iCGLfloat103) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat103]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableParameterfvSGI(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableParameterivSGI( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableParameterivSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint72 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint72);
        for (size_t _iCGLint72 = 0; _iCGLint72 < _cCGLint72; ++_iCGLint72) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint72]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableParameterivSGI(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyColorTableSGI( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyColorTableSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyColorTableSGI(target, internalformat, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetColorTableSGI( GLenum target, GLenum format, GLenum type, GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableSGI(target, format, type, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)table);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameterfvSGI( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameterfvSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameterfvSGI(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameterivSGI( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameterivSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameterivSGI(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPixelTexGenSGIX( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTexGenSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTexGenSGIX(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTexGenParameteriSGIS( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTexGenParameteriSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTexGenParameteriSGIS(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTexGenParameterivSGIS( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTexGenParameterivSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint73 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint73);
        for (size_t _iCGLint73 = 0; _iCGLint73 < _cCGLint73; ++_iCGLint73) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint73]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTexGenParameterivSGIS(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTexGenParameterfSGIS( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTexGenParameterfSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTexGenParameterfSGIS(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTexGenParameterfvSGIS( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTexGenParameterfvSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat104 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat104);
        for (size_t _iCGLfloat104 = 0; _iCGLfloat104 < _cCGLfloat104; ++_iCGLfloat104) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat104]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTexGenParameterfvSGIS(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPixelTexGenParameterivSGIS( GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelTexGenParameterivSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelTexGenParameterivSGIS(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPixelTexGenParameterfvSGIS( GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelTexGenParameterfvSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelTexGenParameterfvSGIS(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTexImage4DSGIS( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage4DSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(size4d);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage4DSGIS( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage4DSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(woffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(size4d);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glAreTexturesResidentEXT( GLsizei n, const GLuint * textures, GLboolean * residences ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glAreTexturesResidentEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint13 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint13);
        for (size_t _iCPGLuint13 = 0; _iCPGLuint13 < _cCPGLuint13; ++_iCPGLuint13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glAreTexturesResidentEXT(n, textures, residences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (residences) {
        size_t _cGLboolean = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (residences)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindTextureEXT( GLenum target, GLuint texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindTextureEXT(target, texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteTexturesEXT( GLsizei n, const GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteTexturesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint14 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint14);
        for (size_t _iCPGLuint14 = 0; _iCPGLuint14 < _cCPGLuint14; ++_iCPGLuint14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteTexturesEXT(n, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenTexturesEXT( GLsizei n, GLuint * textures ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenTexturesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenTexturesEXT(n, textures);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cPGLuint1 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint1);
        for (size_t _iPGLuint1 = 0; _iPGLuint1 < _cPGLuint1; ++_iPGLuint1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iPGLuint1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsTextureEXT( GLuint texture ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsTextureEXT(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPrioritizeTexturesEXT( GLsizei n, const GLuint * textures, const GLclampf * priorities ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPrioritizeTexturesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (textures) {
        size_t _cCPGLuint17 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint17);
        for (size_t _iCPGLuint17 = 0; _iCPGLuint17 < _cCPGLuint17; ++_iCPGLuint17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((textures)[_iCPGLuint17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (priorities) {
        size_t _cCGLclampf1 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLclampf1);
        for (size_t _iCGLclampf1 = 0; _iCGLclampf1 < _cCGLclampf1; ++_iCGLclampf1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((priorities)[_iCGLclampf1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPrioritizeTexturesEXT(n, textures, priorities);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDetailTexFuncSGIS( GLenum target, GLsizei n, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDetailTexFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (points) {
        size_t _cCGLfloat105 = n*2 > 0 ? n*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat105);
        for (size_t _iCGLfloat105 = 0; _iCGLfloat105 < _cCGLfloat105; ++_iCGLfloat105) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((points)[_iCGLfloat105]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDetailTexFuncSGIS(target, n, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetDetailTexFuncSGIS( GLenum target, GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetDetailTexFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetDetailTexFuncSGIS(target, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSharpenTexFuncSGIS( GLenum target, GLsizei n, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSharpenTexFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (points) {
        size_t _cCGLfloat106 = n*2 > 0 ? n*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat106);
        for (size_t _iCGLfloat106 = 0; _iCGLfloat106 < _cCGLfloat106; ++_iCGLfloat106) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((points)[_iCGLfloat106]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSharpenTexFuncSGIS(target, n, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetSharpenTexFuncSGIS( GLenum target, GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetSharpenTexFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetSharpenTexFuncSGIS(target, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSampleMaskSGIS( GLclampf value, GLboolean invert ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleMaskSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, invert);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleMaskSGIS(value, invert);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplePatternSGIS( GLenum pattern ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplePatternSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pattern);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplePatternSGIS(pattern);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glArrayElementEXT( GLint i ) {
    unsigned _call = trace::localWriter.beginEnter(&_glArrayElementEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(i);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glArrayElementEXT(i);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glColorPointerEXT(size, type, stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glColorPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorPointerEXT(size, type, stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawArraysEXT( GLenum mode, GLint first, GLsizei count ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysEXT_count(first, count);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysEXT(mode, first, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlagPointerEXT( GLsizei stride, GLsizei count, const GLboolean * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glEdgeFlagPointerEXT(stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlagPointerEXT(stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPointervEXT( GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPointervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPointervEXT(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glIndexPointerEXT( GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glIndexPointerEXT(type, stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glIndexPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexPointerEXT(type, stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalPointerEXT( GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glNormalPointerEXT(type, stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glNormalPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalPointerEXT(type, stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glTexCoordPointerEXT(size, type, stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordPointerEXT(size, type, stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexPointerEXT( GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexPointerEXT(size, type, stride, count, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexPointerEXT(size, type, stride, count, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSpriteParameterfSGIX( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSpriteParameterfSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSpriteParameterfSGIX(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSpriteParameterfvSGIX( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSpriteParameterfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat107 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat107);
        for (size_t _iCGLfloat107 = 0; _iCGLfloat107 < _cCGLfloat107; ++_iCGLfloat107) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat107]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSpriteParameterfvSGIX(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSpriteParameteriSGIX( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSpriteParameteriSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSpriteParameteriSGIX(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSpriteParameterivSGIX( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSpriteParameterivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint74 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint74);
        for (size_t _iCGLint74 = 0; _iCGLint74 < _cCGLint74; ++_iCGLint74) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint74]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSpriteParameterivSGIX(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfEXT( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfEXT(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfvEXT( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat108 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat108);
        for (size_t _iCGLfloat108 = 0; _iCGLfloat108 < _cCGLfloat108; ++_iCGLfloat108) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat108]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfvEXT(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfSGIS( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfSGIS(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterfvSGIS( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterfvSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat109 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat109);
        for (size_t _iCGLfloat109 = 0; _iCGLfloat109 < _cCGLfloat109; ++_iCGLfloat109) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat109]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterfvSGIS(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetInstrumentsSGIX(  ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetInstrumentsSGIX_sig);
    trace::localWriter.endEnter();
    _result = _glGetInstrumentsSGIX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glInstrumentsBufferSGIX( GLsizei size, GLint * buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInstrumentsBufferSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInstrumentsBufferSGIX(size, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glPollInstrumentsSGIX( GLint * marker_p ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glPollInstrumentsSGIX_sig);
    trace::localWriter.endEnter();
    _result = _glPollInstrumentsSGIX(marker_p);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (marker_p) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*marker_p);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glReadInstrumentsSGIX( GLint marker ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadInstrumentsSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(marker);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadInstrumentsSGIX(marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStartInstrumentsSGIX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStartInstrumentsSGIX_sig);
    trace::localWriter.endEnter();
    _glStartInstrumentsSGIX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStopInstrumentsSGIX( GLint marker ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStopInstrumentsSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(marker);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStopInstrumentsSGIX(marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFrameZoomSGIX( GLint factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrameZoomSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFrameZoomSGIX(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTagSampleBufferSGIX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTagSampleBufferSGIX_sig);
    trace::localWriter.endEnter();
    _glTagSampleBufferSGIX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeformationMap3dSGIX( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeformationMap3dSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeDouble(w1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeDouble(w2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(wstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(worder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeformationMap3fSGIX( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeformationMap3fSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(w1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(w2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(wstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(worder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeformSGIX( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeformSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeformSGIX(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadIdentityDeformationMapSGIX( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadIdentityDeformationMapSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadIdentityDeformationMapSGIX(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReferencePlaneSGIX( const GLdouble * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReferencePlaneSGIX_sig);
    trace::localWriter.beginArg(0);
    if (equation) {
        size_t _cCGLdouble85 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble85);
        for (size_t _iCGLdouble85 = 0; _iCGLdouble85 < _cCGLdouble85; ++_iCGLdouble85) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((equation)[_iCGLdouble85]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReferencePlaneSGIX(equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushRasterSGIX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlushRasterSGIX_sig);
    trace::localWriter.endEnter();
    _glFlushRasterSGIX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogFuncSGIS( GLsizei n, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogFuncSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (points) {
        size_t _cCGLfloat111 = n*2 > 0 ? n*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat111);
        for (size_t _iCGLfloat111 = 0; _iCGLfloat111 < _cCGLfloat111; ++_iCGLfloat111) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((points)[_iCGLfloat111]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogFuncSGIS(n, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFogFuncSGIS( GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFogFuncSGIS_sig);
    trace::localWriter.endEnter();
    _glGetFogFuncSGIS(points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glImageTransformParameteriHP( GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glImageTransformParameteriHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glImageTransformParameteriHP(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glImageTransformParameterfHP( GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glImageTransformParameterfHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glImageTransformParameterfHP(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glImageTransformParameterivHP( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glImageTransformParameterivHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint75 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint75);
        for (size_t _iCGLint75 = 0; _iCGLint75 < _cCGLint75; ++_iCGLint75) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint75]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glImageTransformParameterivHP(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glImageTransformParameterfvHP( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glImageTransformParameterfvHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat112 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat112);
        for (size_t _iCGLfloat112 = 0; _iCGLfloat112 < _cCGLfloat112; ++_iCGLfloat112) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat112]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glImageTransformParameterfvHP(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetImageTransformParameterivHP( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetImageTransformParameterivHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetImageTransformParameterivHP(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetImageTransformParameterfvHP( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetImageTransformParameterfvHP_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetImageTransformParameterfvHP(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glColorSubTableEXT( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorSubTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeBlob(data, _glColorSubTable_size(format, type, count));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorSubTableEXT(target, start, count, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyColorSubTableEXT( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyColorSubTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyColorSubTableEXT(target, start, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glHintPGI( GLenum target, GLint mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glHintPGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glHintPGI(target, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorTableEXT( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeBlob(table, _glColorTable_size(format, type, width));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorTableEXT(target, internalformat, width, format, type, table);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetColorTableEXT( GLenum target, GLenum format, GLenum type, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableEXT(target, format, type, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetColorTableParameterfvEXT( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetColorTableParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetColorTableParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetListParameterfvSGIX( GLuint list, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetListParameterfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetListParameterfvSGIX(list, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetListParameterivSGIX( GLuint list, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetListParameterivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetListParameterivSGIX(list, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glListParameterfSGIX( GLuint list, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glListParameterfSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glListParameterfSGIX(list, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glListParameterfvSGIX( GLuint list, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glListParameterfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat113 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat113);
        for (size_t _iCGLfloat113 = 0; _iCGLfloat113 < _cCGLfloat113; ++_iCGLfloat113) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat113]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glListParameterfvSGIX(list, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glListParameteriSGIX( GLuint list, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glListParameteriSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glListParameteriSGIX(list, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glListParameterivSGIX( GLuint list, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glListParameterivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint76 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint76);
        for (size_t _iCGLint76 = 0; _iCGLint76 < _cCGLint76; ++_iCGLint76) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint76]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glListParameterivSGIX(list, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexMaterialEXT( GLenum face, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexMaterialEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexMaterialEXT(face, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexFuncEXT( GLenum func, GLclampf ref ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexFuncEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(ref);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexFuncEXT(func, ref);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLockArraysEXT( GLint first, GLsizei count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLockArraysEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLockArraysEXT(first, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUnlockArraysEXT(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUnlockArraysEXT_sig);
    trace::localWriter.endEnter();
    _glUnlockArraysEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCullParameterdvEXT( GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCullParameterdvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCullParameterdvEXT(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCullParameterfvEXT( GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCullParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCullParameterfvEXT(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentColorMaterialSGIX( GLenum face, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentColorMaterialSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentColorMaterialSGIX(face, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightfSGIX( GLenum light, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightfSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightfSGIX(light, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightfvSGIX( GLenum light, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat114 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat114);
        for (size_t _iCGLfloat114 = 0; _iCGLfloat114 < _cCGLfloat114; ++_iCGLfloat114) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat114]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightfvSGIX(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightiSGIX( GLenum light, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightiSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightiSGIX(light, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightivSGIX( GLenum light, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint77 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint77);
        for (size_t _iCGLint77 = 0; _iCGLint77 < _cCGLint77; ++_iCGLint77) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint77]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightivSGIX(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightModelfSGIX( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightModelfSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightModelfSGIX(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightModelfvSGIX( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightModelfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat115 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat115);
        for (size_t _iCGLfloat115 = 0; _iCGLfloat115 < _cCGLfloat115; ++_iCGLfloat115) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat115]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightModelfvSGIX(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightModeliSGIX( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightModeliSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightModeliSGIX(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentLightModelivSGIX( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentLightModelivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint78 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint78);
        for (size_t _iCGLint78 = 0; _iCGLint78 < _cCGLint78; ++_iCGLint78) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint78]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentLightModelivSGIX(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentMaterialfSGIX( GLenum face, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentMaterialfSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentMaterialfSGIX(face, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentMaterialfvSGIX( GLenum face, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentMaterialfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat116 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat116);
        for (size_t _iCGLfloat116 = 0; _iCGLfloat116 < _cCGLfloat116; ++_iCGLfloat116) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat116]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentMaterialfvSGIX(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentMaterialiSGIX( GLenum face, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentMaterialiSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentMaterialiSGIX(face, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFragmentMaterialivSGIX( GLenum face, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFragmentMaterialivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint79 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint79);
        for (size_t _iCGLint79 = 0; _iCGLint79 < _cCGLint79; ++_iCGLint79) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint79]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFragmentMaterialivSGIX(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFragmentLightfvSGIX( GLenum light, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragmentLightfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFragmentLightfvSGIX(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFragmentLightivSGIX( GLenum light, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragmentLightivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFragmentLightivSGIX(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFragmentMaterialfvSGIX( GLenum face, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragmentMaterialfvSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFragmentMaterialfvSGIX(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFragmentMaterialivSGIX( GLenum face, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragmentMaterialivSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFragmentMaterialivSGIX(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glLightEnviSGIX( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightEnviSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightEnviSGIX(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawRangeElementsEXT( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawRangeElementsEXT_count(start, end, count, type, indices);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawRangeElementsEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawRangeElementsEXT(mode, start, end, count, type, indices);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glApplyTextureEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glApplyTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glApplyTextureEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureLightEXT( GLenum pname ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureLightEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureLightEXT(pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureMaterialEXT( GLenum face, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureMaterialEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureMaterialEXT(face, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAsyncMarkerSGIX( GLuint marker ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAsyncMarkerSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(marker);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAsyncMarkerSGIX(marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glFinishAsyncSGIX( GLuint * markerp ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glFinishAsyncSGIX_sig);
    trace::localWriter.endEnter();
    _result = _glFinishAsyncSGIX(markerp);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (markerp) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*markerp);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLint glPollAsyncSGIX( GLuint * markerp ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glPollAsyncSGIX_sig);
    trace::localWriter.endEnter();
    _result = _glPollAsyncSGIX(markerp);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (markerp) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*markerp);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glGenAsyncMarkersSGIX( GLsizei range ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenAsyncMarkersSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenAsyncMarkersSGIX(range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeleteAsyncMarkersSGIX( GLuint marker, GLsizei range ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteAsyncMarkersSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(marker);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteAsyncMarkersSGIX(marker, range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsAsyncMarkerSGIX( GLuint marker ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsAsyncMarkerSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(marker);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsAsyncMarkerSGIX(marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glVertexPointervINTEL( GLint size, GLenum type, const GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexPointervINTEL_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexPointervINTEL(size, type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalPointervINTEL( GLenum type, const GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalPointervINTEL_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalPointervINTEL(type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorPointervINTEL( GLint size, GLenum type, const GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorPointervINTEL_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorPointervINTEL(size, type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordPointervINTEL( GLint size, GLenum type, const GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordPointervINTEL_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordPointervINTEL(size, type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransformParameteriEXT( GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransformParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransformParameteriEXT(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransformParameterfEXT( GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransformParameterfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransformParameterfEXT(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransformParameterivEXT( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransformParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransformParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelTransformParameterfvEXT( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelTransformParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelTransformParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPixelTransformParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelTransformParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelTransformParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPixelTransformParameterfvEXT( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPixelTransformParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPixelTransformParameterfvEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3bEXT( GLbyte red, GLbyte green, GLbyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3bEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3bEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3bvEXT( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3bvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte10 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte10);
        for (size_t _iCGLbyte10 = 0; _iCGLbyte10 < _cCGLbyte10; ++_iCGLbyte10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3bvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3dEXT( GLdouble red, GLdouble green, GLdouble blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3dEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3dvEXT( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3dvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble86 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble86);
        for (size_t _iCGLdouble86 = 0; _iCGLdouble86 < _cCGLdouble86; ++_iCGLdouble86) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble86]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3dvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3fEXT( GLfloat red, GLfloat green, GLfloat blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3fEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3fvEXT( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3fvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat118 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat118);
        for (size_t _iCGLfloat118 = 0; _iCGLfloat118 < _cCGLfloat118; ++_iCGLfloat118) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat118]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3fvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3iEXT( GLint red, GLint green, GLint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3iEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ivEXT( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ivEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint81 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint81);
        for (size_t _iCGLint81 = 0; _iCGLint81 < _cCGLint81; ++_iCGLint81) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint81]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ivEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3sEXT( GLshort red, GLshort green, GLshort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3sEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3sEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3svEXT( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3svEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort41 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort41);
        for (size_t _iCGLshort41 = 0; _iCGLshort41 < _cCGLshort41; ++_iCGLshort41) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort41]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3svEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ubEXT( GLubyte red, GLubyte green, GLubyte blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ubEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ubEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3ubvEXT( const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3ubvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLubyte15 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLubyte15);
        for (size_t _iCGLubyte15 = 0; _iCGLubyte15 < _cCGLubyte15; ++_iCGLubyte15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3ubvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3uiEXT( GLuint red, GLuint green, GLuint blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3uiEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3uivEXT( const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3uivEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLuint56 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint56);
        for (size_t _iCGLuint56 = 0; _iCGLuint56 < _cCGLuint56; ++_iCGLuint56) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint56]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3uivEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3usEXT( GLushort red, GLushort green, GLushort blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3usEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3usEXT(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3usvEXT( const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3usvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLushort11 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLushort11);
        for (size_t _iCGLushort11 = 0; _iCGLushort11 < _cCGLushort11; ++_iCGLushort11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3usvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorPointerEXT( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glSecondaryColorPointerEXT(size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorPointerEXT(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureNormalEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureNormalEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureNormalEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawArraysEXT( GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawArraysEXT_count(first, count, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawArraysEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (first) {
        size_t _cCGLint82 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLint82);
        for (size_t _iCGLint82 = 0; _iCGLint82 < _cCGLint82; ++_iCGLint82) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((first)[_iCGLint82]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (count) {
        size_t _cCGLsizei4 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei4);
        for (size_t _iCGLsizei4 = 0; _iCGLsizei4 < _cCGLsizei4; ++_iCGLsizei4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawArraysEXT(mode, first, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElementsEXT( GLenum mode, const GLsizei * count, GLenum type, const GLvoid * * indices, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawElementsEXT_count(count, type, indices, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElementsEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (count) {
        size_t _cCGLsizei5 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei5);
        for (size_t _iCGLsizei5 = 0; _iCGLsizei5 < _cCGLsizei5; ++_iCGLsizei5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (indices) {
        size_t _cconstGLvoid92 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cconstGLvoid92);
        for (size_t _iconstGLvoid92 = 0; _iconstGLvoid92 < _cconstGLvoid92; ++_iconstGLvoid92) {
            trace::localWriter.beginElement();
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>((indices)[_iconstGLvoid92]));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>((indices)[_iconstGLvoid92]), count[_iconstGLvoid92]*_gl_type_size(type));
        break;
    }
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElementsEXT(mode, count, type, indices, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordfEXT( GLfloat coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(coord);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordfEXT(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordfvEXT( const GLfloat * coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordfvEXT_sig);
    trace::localWriter.beginArg(0);
    if (coord) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*coord);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordfvEXT(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoorddEXT( GLdouble coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoorddEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(coord);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoorddEXT(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoorddvEXT( const GLdouble * coord ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoorddvEXT_sig);
    trace::localWriter.beginArg(0);
    if (coord) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*coord);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoorddvEXT(coord);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordPointerEXT( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glFogCoordPointerEXT(type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordPointerEXT(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3bEXT( GLbyte tx, GLbyte ty, GLbyte tz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3bEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(tx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ty);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(tz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3bEXT(tx, ty, tz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3bvEXT( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3bvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte11 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte11);
        for (size_t _iCGLbyte11 = 0; _iCGLbyte11 < _cCGLbyte11; ++_iCGLbyte11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3bvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3dEXT( GLdouble tx, GLdouble ty, GLdouble tz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(tx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(ty);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(tz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3dEXT(tx, ty, tz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3dvEXT( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3dvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble88 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble88);
        for (size_t _iCGLdouble88 = 0; _iCGLdouble88 < _cCGLdouble88; ++_iCGLdouble88) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble88]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3dvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3fEXT( GLfloat tx, GLfloat ty, GLfloat tz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(tx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(ty);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(tz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3fEXT(tx, ty, tz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3fvEXT( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3fvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat120 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat120);
        for (size_t _iCGLfloat120 = 0; _iCGLfloat120 < _cCGLfloat120; ++_iCGLfloat120) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat120]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3fvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3iEXT( GLint tx, GLint ty, GLint tz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(tx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ty);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(tz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3iEXT(tx, ty, tz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3ivEXT( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3ivEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint83 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint83);
        for (size_t _iCGLint83 = 0; _iCGLint83 < _cCGLint83; ++_iCGLint83) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint83]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3ivEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3sEXT( GLshort tx, GLshort ty, GLshort tz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3sEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(tx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ty);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(tz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3sEXT(tx, ty, tz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangent3svEXT( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangent3svEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort42 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort42);
        for (size_t _iCGLshort42 = 0; _iCGLshort42 < _cCGLshort42; ++_iCGLshort42) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort42]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangent3svEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3bEXT( GLbyte bx, GLbyte by, GLbyte bz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3bEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(bx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(by);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3bEXT(bx, by, bz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3bvEXT( const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3bvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLbyte12 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte12);
        for (size_t _iCGLbyte12 = 0; _iCGLbyte12 < _cCGLbyte12; ++_iCGLbyte12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3bvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3dEXT( GLdouble bx, GLdouble by, GLdouble bz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(bx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(by);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(bz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3dEXT(bx, by, bz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3dvEXT( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3dvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble89 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble89);
        for (size_t _iCGLdouble89 = 0; _iCGLdouble89 < _cCGLdouble89; ++_iCGLdouble89) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble89]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3dvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3fEXT( GLfloat bx, GLfloat by, GLfloat bz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(bx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(by);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(bz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3fEXT(bx, by, bz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3fvEXT( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3fvEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat121 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat121);
        for (size_t _iCGLfloat121 = 0; _iCGLfloat121 < _cCGLfloat121; ++_iCGLfloat121) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat121]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3fvEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3iEXT( GLint bx, GLint by, GLint bz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(bx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(by);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3iEXT(bx, by, bz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3ivEXT( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3ivEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint84 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint84);
        for (size_t _iCGLint84 = 0; _iCGLint84 < _cCGLint84; ++_iCGLint84) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint84]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3ivEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3sEXT( GLshort bx, GLshort by, GLshort bz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3sEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(bx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(by);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3sEXT(bx, by, bz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormal3svEXT( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormal3svEXT_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort43 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort43);
        for (size_t _iCGLshort43 = 0; _iCGLshort43 < _cCGLshort43; ++_iCGLshort43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormal3svEXT(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTangentPointerEXT( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTangentPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTangentPointerEXT(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBinormalPointerEXT( GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBinormalPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBinormalPointerEXT(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFinishTextureSUNX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinishTextureSUNX_sig);
    trace::localWriter.endEnter();
    _glFinishTextureSUNX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactorbSUN( GLbyte factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactorbSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactorbSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactorsSUN( GLshort factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactorsSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactorsSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactoriSUN( GLint factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactoriSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactoriSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactorfSUN( GLfloat factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactorfSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactorfSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactordSUN( GLdouble factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactordSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactordSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactorubSUN( GLubyte factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactorubSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactorubSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactorusSUN( GLushort factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactorusSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactorusSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGlobalAlphaFactoruiSUN( GLuint factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGlobalAlphaFactoruiSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGlobalAlphaFactoruiSUN(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiSUN( GLuint code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeusSUN( GLushort code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeusSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeusSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeubSUN( GLubyte code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeubSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeubSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuivSUN( const GLuint * code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuivSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuivSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeusvSUN( const GLushort * code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeusvSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeusvSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeubvSUN( const GLubyte * code ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeubvSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)code);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeubvSUN(code);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodePointerSUN( GLenum type, GLsizei stride, const GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodePointerSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodePointerSUN(type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ubVertex2fSUN( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ubVertex2fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ubVertex2fSUN(r, g, b, a, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ubVertex2fvSUN( const GLubyte * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ubVertex2fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        size_t _cCGLubyte17 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte17);
        for (size_t _iCGLubyte17 = 0; _iCGLubyte17 < _cCGLubyte17; ++_iCGLubyte17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((c)[_iCGLubyte17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat122 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat122);
        for (size_t _iCGLfloat122 = 0; _iCGLfloat122 < _cCGLfloat122; ++_iCGLfloat122) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat122]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ubVertex2fvSUN(c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ubVertex3fSUN( GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ubVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4ubVertex3fvSUN( const GLubyte * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4ubVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        size_t _cCGLubyte18 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte18);
        for (size_t _iCGLubyte18 = 0; _iCGLubyte18 < _cCGLubyte18; ++_iCGLubyte18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((c)[_iCGLubyte18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat123 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat123);
        for (size_t _iCGLfloat123 = 0; _iCGLfloat123 < _cCGLfloat123; ++_iCGLfloat123) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat123]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4ubVertex3fvSUN(c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3fVertex3fSUN( GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3fVertex3fSUN(r, g, b, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3fVertex3fvSUN( const GLfloat * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        size_t _cCGLfloat124 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat124);
        for (size_t _iCGLfloat124 = 0; _iCGLfloat124 < _cCGLfloat124; ++_iCGLfloat124) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat124]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat125 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat125);
        for (size_t _iCGLfloat125 = 0; _iCGLfloat125 < _cCGLfloat125; ++_iCGLfloat125) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat125]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3fVertex3fvSUN(c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3fVertex3fSUN( GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3fVertex3fvSUN( const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (n) {
        size_t _cCGLfloat126 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat126);
        for (size_t _iCGLfloat126 = 0; _iCGLfloat126 < _cCGLfloat126; ++_iCGLfloat126) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat126]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat127 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat127);
        for (size_t _iCGLfloat127 = 0; _iCGLfloat127 < _cCGLfloat127; ++_iCGLfloat127) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat127]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3fVertex3fvSUN(n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4fNormal3fVertex3fSUN( GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4fNormal3fVertex3fvSUN( const GLfloat * c, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (c) {
        size_t _cCGLfloat128 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat128);
        for (size_t _iCGLfloat128 = 0; _iCGLfloat128 < _cCGLfloat128; ++_iCGLfloat128) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat128]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (n) {
        size_t _cCGLfloat129 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat129);
        for (size_t _iCGLfloat129 = 0; _iCGLfloat129 < _cCGLfloat129; ++_iCGLfloat129) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat129]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat130 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat130);
        for (size_t _iCGLfloat130 = 0; _iCGLfloat130 < _cCGLfloat130; ++_iCGLfloat130) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat130]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4fNormal3fVertex3fvSUN(c, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fVertex3fSUN( GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fVertex3fSUN(s, t, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fVertex3fvSUN( const GLfloat * tc, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat131 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat131);
        for (size_t _iCGLfloat131 = 0; _iCGLfloat131 < _cCGLfloat131; ++_iCGLfloat131) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat131]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat132 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat132);
        for (size_t _iCGLfloat132 = 0; _iCGLfloat132 < _cCGLfloat132; ++_iCGLfloat132) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat132]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fVertex3fvSUN(tc, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4fVertex4fSUN( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4fVertex4fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(p);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(q);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4fVertex4fvSUN( const GLfloat * tc, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4fVertex4fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat133 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat133);
        for (size_t _iCGLfloat133 = 0; _iCGLfloat133 < _cCGLfloat133; ++_iCGLfloat133) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat133]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat134 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat134);
        for (size_t _iCGLfloat134 = 0; _iCGLfloat134 < _cCGLfloat134; ++_iCGLfloat134) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat134]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4fVertex4fvSUN(tc, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor4ubVertex3fSUN( GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor4ubVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor4ubVertex3fvSUN( const GLfloat * tc, const GLubyte * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor4ubVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat135 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat135);
        for (size_t _iCGLfloat135 = 0; _iCGLfloat135 < _cCGLfloat135; ++_iCGLfloat135) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat135]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLubyte19 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte19);
        for (size_t _iCGLubyte19 = 0; _iCGLubyte19 < _cCGLubyte19; ++_iCGLubyte19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((c)[_iCGLubyte19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat136 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat136);
        for (size_t _iCGLfloat136 = 0; _iCGLfloat136 < _cCGLfloat136; ++_iCGLfloat136) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat136]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor3fVertex3fSUN( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor3fVertex3fvSUN( const GLfloat * tc, const GLfloat * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat137 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat137);
        for (size_t _iCGLfloat137 = 0; _iCGLfloat137 < _cCGLfloat137; ++_iCGLfloat137) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat137]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLfloat138 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat138);
        for (size_t _iCGLfloat138 = 0; _iCGLfloat138 < _cCGLfloat138; ++_iCGLfloat138) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat138]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat139 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat139);
        for (size_t _iCGLfloat139 = 0; _iCGLfloat139 < _cCGLfloat139; ++_iCGLfloat139) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat139]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fNormal3fVertex3fSUN( GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fNormal3fVertex3fvSUN( const GLfloat * tc, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat140 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat140);
        for (size_t _iCGLfloat140 = 0; _iCGLfloat140 < _cCGLfloat140; ++_iCGLfloat140) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat140]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (n) {
        size_t _cCGLfloat141 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat141);
        for (size_t _iCGLfloat141 = 0; _iCGLfloat141 < _cCGLfloat141; ++_iCGLfloat141) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat141]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat142 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat142);
        for (size_t _iCGLfloat142 = 0; _iCGLfloat142 < _cCGLfloat142; ++_iCGLfloat142) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat142]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor4fNormal3fVertex3fSUN( GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor4fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2fColor4fNormal3fVertex3fvSUN( const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2fColor4fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat143 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat143);
        for (size_t _iCGLfloat143 = 0; _iCGLfloat143 < _cCGLfloat143; ++_iCGLfloat143) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat143]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLfloat144 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat144);
        for (size_t _iCGLfloat144 = 0; _iCGLfloat144 < _cCGLfloat144; ++_iCGLfloat144) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat144]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (n) {
        size_t _cCGLfloat145 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat145);
        for (size_t _iCGLfloat145 = 0; _iCGLfloat145 < _cCGLfloat145; ++_iCGLfloat145) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat145]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat146 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat146);
        for (size_t _iCGLfloat146 = 0; _iCGLfloat146 < _cCGLfloat146; ++_iCGLfloat146) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat146]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4fColor4fNormal3fVertex4fSUN( GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4fColor4fNormal3fVertex4fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(p);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(q);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(14);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4fColor4fNormal3fVertex4fvSUN( const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4fColor4fNormal3fVertex4fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (tc) {
        size_t _cCGLfloat147 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat147);
        for (size_t _iCGLfloat147 = 0; _iCGLfloat147 < _cCGLfloat147; ++_iCGLfloat147) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat147]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLfloat148 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat148);
        for (size_t _iCGLfloat148 = 0; _iCGLfloat148 < _cCGLfloat148; ++_iCGLfloat148) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat148]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (n) {
        size_t _cCGLfloat149 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat149);
        for (size_t _iCGLfloat149 = 0; _iCGLfloat149 < _cCGLfloat149; ++_iCGLfloat149) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat149]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat150 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat150);
        for (size_t _iCGLfloat150 = 0; _iCGLfloat150 < _cCGLfloat150; ++_iCGLfloat150) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat150]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiVertex3fSUN( GLuint rc, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiVertex3fSUN(rc, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiVertex3fvSUN( const GLuint * rc, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat151 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat151);
        for (size_t _iCGLfloat151 = 0; _iCGLfloat151 < _cCGLfloat151; ++_iCGLfloat151) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat151]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiVertex3fvSUN(rc, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor4ubVertex3fSUN( GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor4ubVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor4ubVertex3fvSUN( const GLuint * rc, const GLubyte * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor4ubVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLubyte20 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte20);
        for (size_t _iCGLubyte20 = 0; _iCGLubyte20 < _cCGLubyte20; ++_iCGLubyte20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((c)[_iCGLubyte20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat152 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat152);
        for (size_t _iCGLfloat152 = 0; _iCGLfloat152 < _cCGLfloat152; ++_iCGLfloat152) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat152]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor3fVertex3fSUN( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor3fVertex3fvSUN( const GLuint * rc, const GLfloat * c, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLfloat153 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat153);
        for (size_t _iCGLfloat153 = 0; _iCGLfloat153 < _cCGLfloat153; ++_iCGLfloat153) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat153]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat154 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat154);
        for (size_t _iCGLfloat154 = 0; _iCGLfloat154 < _cCGLfloat154; ++_iCGLfloat154) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat154]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiNormal3fVertex3fSUN( GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiNormal3fVertex3fvSUN( const GLuint * rc, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (n) {
        size_t _cCGLfloat155 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat155);
        for (size_t _iCGLfloat155 = 0; _iCGLfloat155 < _cCGLfloat155; ++_iCGLfloat155) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat155]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat156 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat156);
        for (size_t _iCGLfloat156 = 0; _iCGLfloat156 < _cCGLfloat156; ++_iCGLfloat156) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat156]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor4fNormal3fVertex3fSUN( GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor4fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiColor4fNormal3fVertex3fvSUN( const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (c) {
        size_t _cCGLfloat157 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat157);
        for (size_t _iCGLfloat157 = 0; _iCGLfloat157 < _cCGLfloat157; ++_iCGLfloat157) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat157]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (n) {
        size_t _cCGLfloat158 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat158);
        for (size_t _iCGLfloat158 = 0; _iCGLfloat158 < _cCGLfloat158; ++_iCGLfloat158) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat158]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat159 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat159);
        for (size_t _iCGLfloat159 = 0; _iCGLfloat159 < _cCGLfloat159; ++_iCGLfloat159) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat159]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fVertex3fSUN( GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fVertex3fvSUN( const GLuint * rc, const GLfloat * tc, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (tc) {
        size_t _cCGLfloat160 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat160);
        for (size_t _iCGLfloat160 = 0; _iCGLfloat160 < _cCGLfloat160; ++_iCGLfloat160) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat160]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat161 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat161);
        for (size_t _iCGLfloat161 = 0; _iCGLfloat161 < _cCGLfloat161; ++_iCGLfloat161) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat161]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN( GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN( const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (tc) {
        size_t _cCGLfloat162 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat162);
        for (size_t _iCGLfloat162 = 0; _iCGLfloat162 < _cCGLfloat162; ++_iCGLfloat162) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat162]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (n) {
        size_t _cCGLfloat163 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat163);
        for (size_t _iCGLfloat163 = 0; _iCGLfloat163 < _cCGLfloat163; ++_iCGLfloat163) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat163]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat164 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat164);
        for (size_t _iCGLfloat164 = 0; _iCGLfloat164 < _cCGLfloat164; ++_iCGLfloat164) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat164]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN( GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(rc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(a);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN( const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_sig);
    trace::localWriter.beginArg(0);
    if (rc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*rc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (tc) {
        size_t _cCGLfloat165 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat165);
        for (size_t _iCGLfloat165 = 0; _iCGLfloat165 < _cCGLfloat165; ++_iCGLfloat165) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tc)[_iCGLfloat165]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (c) {
        size_t _cCGLfloat166 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat166);
        for (size_t _iCGLfloat166 = 0; _iCGLfloat166 < _cCGLfloat166; ++_iCGLfloat166) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((c)[_iCGLfloat166]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (n) {
        size_t _cCGLfloat167 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat167);
        for (size_t _iCGLfloat167 = 0; _iCGLfloat167 < _cCGLfloat167; ++_iCGLfloat167) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((n)[_iCGLfloat167]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (v) {
        size_t _cCGLfloat168 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat168);
        for (size_t _iCGLfloat168 = 0; _iCGLfloat168 < _cCGLfloat168; ++_iCGLfloat168) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat168]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparateEXT( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparateEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparateINGR( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparateINGR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexWeightfEXT( GLfloat weight ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexWeightfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(weight);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexWeightfEXT(weight);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexWeightfvEXT( const GLfloat * weight ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexWeightfvEXT_sig);
    trace::localWriter.beginArg(0);
    if (weight) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*weight);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexWeightfvEXT(weight);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexWeightPointerEXT( GLsizei size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexWeightPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexWeightPointerEXT(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushVertexArrayRangeNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlushVertexArrayRangeNV_sig);
    trace::localWriter.endEnter();
    _glFlushVertexArrayRangeNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayRangeNV( GLsizei length, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayRangeNV(length, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerParameterfvNV( GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfloat170 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat170);
        for (size_t _iCGLfloat170 = 0; _iCGLfloat170 < _cCGLfloat170; ++_iCGLfloat170) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat170]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerParameterfvNV(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerParameterfNV( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerParameterfNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerParameterfNV(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerParameterivNV( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint85 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint85);
        for (size_t _iCGLint85 = 0; _iCGLint85 < _cCGLint85; ++_iCGLint85) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint85]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerParameterivNV(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerParameteriNV( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerParameteriNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerParameteriNV(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerInputNV( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerInputNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, input);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mapping);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, componentUsage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerOutputNV( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerOutputNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, abOutput);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, cdOutput);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sumOutput);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, scale);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bias);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, abDotProduct);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, cdDotProduct);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, muxSum);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFinalCombinerInputNV( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinalCombinerInputNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, input);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mapping);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, componentUsage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFinalCombinerInputNV(variable, input, mapping, componentUsage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCombinerInputParameterfvNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCombinerInputParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetCombinerInputParameterivNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCombinerInputParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCombinerInputParameterivNV(stage, portion, variable, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetCombinerOutputParameterfvNV( GLenum stage, GLenum portion, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCombinerOutputParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCombinerOutputParameterfvNV(stage, portion, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetCombinerOutputParameterivNV( GLenum stage, GLenum portion, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCombinerOutputParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, portion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCombinerOutputParameterivNV(stage, portion, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFinalCombinerInputParameterfvNV( GLenum variable, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFinalCombinerInputParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFinalCombinerInputParameterfvNV(variable, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFinalCombinerInputParameterivNV( GLenum variable, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFinalCombinerInputParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, variable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFinalCombinerInputParameterivNV(variable, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLuint glGenPathsNV( GLsizei range ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenPathsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenPathsNV(range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeletePathsNV( GLuint path, GLsizei range ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeletePathsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeletePathsNV(path, range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsPathNV( GLuint path ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsPathNV(path);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPathCommandsNV( GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathCommandsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numCommands);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (commands) {
        size_t _cCGLubyte21 = numCommands > 0 ? numCommands : 0;
        trace::localWriter.beginArray(_cCGLubyte21);
        for (size_t _iCGLubyte21 = 0; _iCGLubyte21 < _cCGLubyte21; ++_iCGLubyte21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((commands)[_iCGLubyte21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(numCoords);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coordType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeBlob(coords, _glPath_coords_size(numCoords, coordType));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathCoordsNV( GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathCoordsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numCoords);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coordType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(coords, _glPath_coords_size(numCoords, coordType));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathCoordsNV(path, numCoords, coordType, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathSubCommandsNV( GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathSubCommandsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(commandStart);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(commandsToDelete);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(numCommands);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (commands) {
        size_t _cCGLubyte22 = numCommands > 0 ? numCommands : 0;
        trace::localWriter.beginArray(_cCGLubyte22);
        for (size_t _iCGLubyte22 = 0; _iCGLubyte22 < _cCGLubyte22; ++_iCGLubyte22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((commands)[_iCGLubyte22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(numCoords);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coordType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeBlob(coords, _glPath_coords_size(numCoords, coordType));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathSubCoordsNV( GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathSubCoordsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(coordStart);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(numCoords);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coordType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeBlob(coords, _glPath_coords_size(numCoords, coordType));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathStringNV( GLuint path, GLenum format, GLsizei length, const GLvoid * pathString ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathStringNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(pathString, length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathStringNV(path, format, length, pathString);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathGlyphsNV( GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathGlyphsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(firstPathName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, fontTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(fontName, _glPath_fontName_size(fontTarget, fontName));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield9_sig, fontStyle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(numGlyphs);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeBlob(charcodes, _glPath_chardcodes_size(numGlyphs, type));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, handleMissingGlyphs);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(pathParameterTemplate);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(emScale);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathGlyphRangeNV( GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathGlyphRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(firstPathName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, fontTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(fontName, _glPath_fontName_size(fontTarget, fontName));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield9_sig, fontStyle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(firstGlyph);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(numGlyphs);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, handleMissingGlyphs);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(pathParameterTemplate);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(emScale);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightPathsNV( GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightPathsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(resultPath);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (paths) {
        size_t _cCGLuint66 = numPaths > 0 ? numPaths : 0;
        trace::localWriter.beginArray(_cCGLuint66);
        for (size_t _iCGLuint66 = 0; _iCGLuint66 < _cCGLuint66; ++_iCGLuint66) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((paths)[_iCGLuint66]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (weights) {
        size_t _cCGLfloat171 = numPaths > 0 ? numPaths : 0;
        trace::localWriter.beginArray(_cCGLfloat171);
        for (size_t _iCGLfloat171 = 0; _iCGLfloat171 < _cCGLfloat171; ++_iCGLfloat171) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((weights)[_iCGLfloat171]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightPathsNV(resultPath, numPaths, paths, weights);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyPathNV( GLuint resultPath, GLuint srcPath ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(resultPath);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(srcPath);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyPathNV(resultPath, srcPath);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInterpolatePathsNV( GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInterpolatePathsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(resultPath);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pathA);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pathB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(weight);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInterpolatePathsNV(resultPath, pathA, pathB, weight);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTransformPathNV( GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(resultPath);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(srcPath);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (transformValues) {
        size_t _cCGLfloat172 = _gl_transformType_size(transformType) > 0 ? _gl_transformType_size(transformType) : 0;
        trace::localWriter.beginArray(_cCGLfloat172);
        for (size_t _iCGLfloat172 = 0; _iCGLfloat172 < _cCGLfloat172; ++_iCGLfloat172) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((transformValues)[_iCGLfloat172]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformPathNV(resultPath, srcPath, transformType, transformValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathParameterivNV( GLuint path, GLenum pname, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint86 = _gl_PathParameter_size(pname) > 0 ? _gl_PathParameter_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint86);
        for (size_t _iCGLint86 = 0; _iCGLint86 < _cCGLint86; ++_iCGLint86) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint86]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathParameterivNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathParameteriNV( GLuint path, GLenum pname, GLint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathParameteriNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathParameteriNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathParameterfvNV( GLuint path, GLenum pname, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLfloat173 = _gl_PathParameter_size(pname) > 0 ? _gl_PathParameter_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat173);
        for (size_t _iCGLfloat173 = 0; _iCGLfloat173 < _cCGLfloat173; ++_iCGLfloat173) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat173]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathParameterfvNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathParameterfNV( GLuint path, GLenum pname, GLfloat value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathParameterfNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathParameterfNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathDashArrayNV( GLuint path, GLsizei dashCount, const GLfloat * dashArray ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathDashArrayNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(dashCount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (dashArray) {
        size_t _cCGLfloat174 = dashCount > 0 ? dashCount : 0;
        trace::localWriter.beginArray(_cCGLfloat174);
        for (size_t _iCGLfloat174 = 0; _iCGLfloat174 < _cCGLfloat174; ++_iCGLfloat174) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((dashArray)[_iCGLfloat174]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathDashArrayNV(path, dashCount, dashArray);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathStencilFuncNV( GLenum func, GLint ref, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathStencilFuncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ref);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathStencilFuncNV(func, ref, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathStencilDepthOffsetNV( GLfloat factor, GLfloat units ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathStencilDepthOffsetNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(factor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(units);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathStencilDepthOffsetNV(factor, units);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilFillPathNV( GLuint path, GLenum fillMode, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilFillPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, fillMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilFillPathNV(path, fillMode, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilStrokePathNV( GLuint path, GLint reference, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilStrokePathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(reference);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilStrokePathNV(path, reference, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilFillPathInstancedNV( GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilFillPathInstancedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, fillMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (transformValues) {
        size_t _cCGLfloat175 = _gl_transformType_size(numPaths, transformType) > 0 ? _gl_transformType_size(numPaths, transformType) : 0;
        trace::localWriter.beginArray(_cCGLfloat175);
        for (size_t _iCGLfloat175 = 0; _iCGLfloat175 < _cCGLfloat175; ++_iCGLfloat175) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((transformValues)[_iCGLfloat175]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilStrokePathInstancedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(reference);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (transformValues) {
        size_t _cCGLfloat176 = _gl_transformType_size(numPaths, transformType) > 0 ? _gl_transformType_size(numPaths, transformType) : 0;
        trace::localWriter.beginArray(_cCGLfloat176);
        for (size_t _iCGLfloat176 = 0; _iCGLfloat176 < _cCGLfloat176; ++_iCGLfloat176) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((transformValues)[_iCGLfloat176]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathCoverDepthFuncNV( GLenum zfunc ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathCoverDepthFuncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, zfunc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathCoverDepthFuncNV(zfunc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathColorGenNV( GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathColorGenNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, color);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, genMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, colorFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (coeffs) {
        size_t _cCGLfloat177 = _gl_PathColorGen_size(genMode, colorFormat) > 0 ? _gl_PathColorGen_size(genMode, colorFormat) : 0;
        trace::localWriter.beginArray(_cCGLfloat177);
        for (size_t _iCGLfloat177 = 0; _iCGLfloat177 < _cCGLfloat177; ++_iCGLfloat177) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coeffs)[_iCGLfloat177]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathColorGenNV(color, genMode, colorFormat, coeffs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathTexGenNV( GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathTexGenNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texCoordSet);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, genMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(components);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (coeffs) {
        size_t _cCGLfloat178 = _gl_PathTexGen_size(genMode, components) > 0 ? _gl_PathTexGen_size(genMode, components) : 0;
        trace::localWriter.beginArray(_cCGLfloat178);
        for (size_t _iCGLfloat178 = 0; _iCGLfloat178 < _cCGLfloat178; ++_iCGLfloat178) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coeffs)[_iCGLfloat178]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathTexGenNV(texCoordSet, genMode, components, coeffs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPathFogGenNV( GLenum genMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPathFogGenNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, genMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPathFogGenNV(genMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCoverFillPathNV( GLuint path, GLenum coverMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverFillPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coverMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverFillPathNV(path, coverMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCoverStrokePathNV( GLuint path, GLenum coverMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverStrokePathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coverMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverStrokePathNV(path, coverMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCoverFillPathInstancedNV( GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverFillPathInstancedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coverMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (transformValues) {
        size_t _cCGLfloat179 = _gl_transformType_size(numPaths, transformType) > 0 ? _gl_transformType_size(numPaths, transformType) : 0;
        trace::localWriter.beginArray(_cCGLfloat179);
        for (size_t _iCGLfloat179 = 0; _iCGLfloat179 < _cCGLfloat179; ++_iCGLfloat179) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((transformValues)[_iCGLfloat179]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCoverStrokePathInstancedNV( GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverStrokePathInstancedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coverMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (transformValues) {
        size_t _cCGLfloat180 = _gl_transformType_size(numPaths, transformType) > 0 ? _gl_transformType_size(numPaths, transformType) : 0;
        trace::localWriter.beginArray(_cCGLfloat180);
        for (size_t _iCGLfloat180 = 0; _iCGLfloat180 < _cCGLfloat180; ++_iCGLfloat180) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((transformValues)[_iCGLfloat180]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPathParameterivNV( GLuint path, GLenum pname, GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathParameterivNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cGLint = _gl_GetPathParameter_size(pname) > 0 ? _gl_GetPathParameter_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathParameterfvNV( GLuint path, GLenum pname, GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathParameterfvNV(path, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cGLfloat = _gl_GetPathParameter_size(pname) > 0 ? _gl_GetPathParameter_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathCommandsNV( GLuint path, GLubyte * commands ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathCommandsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathCommandsNV(path, commands);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (commands) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*commands);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathCoordsNV( GLuint path, GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathCoordsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathCoordsNV(path, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathDashArrayNV( GLuint path, GLfloat * dashArray ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathDashArrayNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathDashArrayNV(path, dashArray);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (dashArray) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*dashArray);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathMetricsNV( GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathMetricsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield8_sig, metricQueryMask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(6);
    if (metrics) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*metrics);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathMetricRangeNV( GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathMetricRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield8_sig, metricQueryMask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(firstPathName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (metrics) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*metrics);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathSpacingNV( GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathSpacingNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathListMode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numPaths);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pathNameType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(paths, _gl_Paths_size(numPaths, pathNameType, paths));
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(pathBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(advanceScale);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(kerningScale);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transformType);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(8);
    if (returnedSpacing) {
        size_t _cGLfloat = _gl_GetPathSpacing(numPaths,transformType) > 0 ? _gl_GetPathSpacing(numPaths,transformType) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((returnedSpacing)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathColorGenivNV( GLenum color, GLenum pname, GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathColorGenivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, color);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathColorGenivNV(color, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathColorGenfvNV( GLenum color, GLenum pname, GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathColorGenfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, color);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathColorGenfvNV(color, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathTexGenivNV( GLenum texCoordSet, GLenum pname, GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathTexGenivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texCoordSet);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathTexGenivNV(texCoordSet, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPathTexGenfvNV( GLenum texCoordSet, GLenum pname, GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathTexGenfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texCoordSet);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPathTexGenfvNV(texCoordSet, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsPointInFillPathNV( GLuint path, GLuint mask, GLfloat x, GLfloat y ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsPointInFillPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsPointInFillPathNV(path, mask, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsPointInStrokePathNV( GLuint path, GLfloat x, GLfloat y ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsPointInStrokePathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsPointInStrokePathNV(path, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLfloat glGetPathLengthNV( GLuint path, GLsizei startSegment, GLsizei numSegments ) {
    GLfloat _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetPathLengthNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(startSegment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(numSegments);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetPathLengthNV(path, startSegment, numSegments);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeFloat(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glPointAlongPathNV( GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glPointAlongPathNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(path);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(startSegment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(numSegments);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(distance);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (x) {
        size_t _cGLfloat = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((x)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (y) {
        size_t _cGLfloat = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((y)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (tangentX) {
        size_t _cGLfloat = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tangentX)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (tangentY) {
        size_t _cGLfloat = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((tangentY)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glResizeBuffersMESA(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResizeBuffersMESA_sig);
    trace::localWriter.endEnter();
    _glResizeBuffersMESA();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2dMESA( GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2dMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2dMESA(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2dvMESA( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2dvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble90 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble90);
        for (size_t _iCGLdouble90 = 0; _iCGLdouble90 < _cCGLdouble90; ++_iCGLdouble90) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble90]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2dvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2fMESA( GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2fMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2fMESA(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2fvMESA( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2fvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat181 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat181);
        for (size_t _iCGLfloat181 = 0; _iCGLfloat181 < _cCGLfloat181; ++_iCGLfloat181) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat181]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2fvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2iMESA( GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2iMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2iMESA(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2ivMESA( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2ivMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint87 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint87);
        for (size_t _iCGLint87 = 0; _iCGLint87 < _cCGLint87; ++_iCGLint87) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint87]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2ivMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2sMESA( GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2sMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2sMESA(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos2svMESA( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos2svMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort44 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort44);
        for (size_t _iCGLshort44 = 0; _iCGLshort44 < _cCGLshort44; ++_iCGLshort44) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort44]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos2svMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3dMESA( GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3dMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3dMESA(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3dvMESA( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3dvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble91 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble91);
        for (size_t _iCGLdouble91 = 0; _iCGLdouble91 < _cCGLdouble91; ++_iCGLdouble91) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble91]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3dvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3fMESA( GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3fMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3fMESA(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3fvMESA( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3fvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat182 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat182);
        for (size_t _iCGLfloat182 = 0; _iCGLfloat182 < _cCGLfloat182; ++_iCGLfloat182) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat182]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3fvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3iMESA( GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3iMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3iMESA(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3ivMESA( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3ivMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint88 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint88);
        for (size_t _iCGLint88 = 0; _iCGLint88 < _cCGLint88; ++_iCGLint88) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint88]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3ivMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3sMESA( GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3sMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3sMESA(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos3svMESA( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos3svMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort45 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort45);
        for (size_t _iCGLshort45 = 0; _iCGLshort45 < _cCGLshort45; ++_iCGLshort45) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort45]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos3svMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4dMESA( GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4dMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4dMESA(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4dvMESA( const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4dvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLdouble92 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble92);
        for (size_t _iCGLdouble92 = 0; _iCGLdouble92 < _cCGLdouble92; ++_iCGLdouble92) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble92]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4dvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4fMESA( GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4fMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4fMESA(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4fvMESA( const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4fvMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLfloat183 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat183);
        for (size_t _iCGLfloat183 = 0; _iCGLfloat183 < _cCGLfloat183; ++_iCGLfloat183) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat183]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4fvMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4iMESA( GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4iMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4iMESA(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4ivMESA( const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4ivMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLint89 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint89);
        for (size_t _iCGLint89 = 0; _iCGLint89 < _cCGLint89; ++_iCGLint89) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint89]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4ivMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4sMESA( GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4sMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4sMESA(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWindowPos4svMESA( const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWindowPos4svMESA_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLshort46 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort46);
        for (size_t _iCGLshort46 = 0; _iCGLshort46 < _cCGLshort46; ++_iCGLshort46) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort46]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWindowPos4svMESA(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiModeDrawArraysIBM( const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiModeDrawArraysIBM_count(first, count, primcount, modestride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiModeDrawArraysIBM_sig);
    trace::localWriter.beginArg(0);
    if (mode) {
        size_t _cCGLenum5 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLenum5);
        for (size_t _iCGLenum5 = 0; _iCGLenum5 < _cCGLenum5; ++_iCGLenum5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (mode)[_iCGLenum5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (first) {
        size_t _cCGLint90 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLint90);
        for (size_t _iCGLint90 = 0; _iCGLint90 < _cCGLint90; ++_iCGLint90) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((first)[_iCGLint90]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (count) {
        size_t _cCGLsizei6 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei6);
        for (size_t _iCGLsizei6 = 0; _iCGLsizei6 < _cCGLsizei6; ++_iCGLsizei6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(modestride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiModeDrawElementsIBM( const GLenum * mode, const GLsizei * count, GLenum type, const GLvoid * const * indices, GLsizei primcount, GLint modestride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiModeDrawElementsIBM_count(count, type, indices, primcount, modestride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiModeDrawElementsIBM_sig);
    trace::localWriter.beginArg(0);
    if (mode) {
        size_t _cCGLenum6 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLenum6);
        for (size_t _iCGLenum6 = 0; _iCGLenum6 < _cCGLenum6; ++_iCGLenum6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (mode)[_iCGLenum6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (count) {
        size_t _cCGLsizei7 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei7);
        for (size_t _iCGLsizei7 = 0; _iCGLsizei7 < _cCGLsizei7; ++_iCGLsizei7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (indices) {
        size_t _cCconstGLvoid111 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCconstGLvoid111);
        for (size_t _iCconstGLvoid111 = 0; _iCconstGLvoid111 < _cCconstGLvoid111; ++_iCconstGLvoid111) {
            trace::localWriter.beginElement();
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>((indices)[_iCconstGLvoid111]));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>((indices)[_iCconstGLvoid111]), count[_iCconstGLvoid111]*_gl_type_size(type));
        break;
    }
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(modestride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorPointerListIBM( GLint size, GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorPointerListIBM(size, type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorPointerListIBM( GLint size, GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlagPointerListIBM( GLint stride, const GLboolean * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordPointerListIBM( GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexPointerListIBM( GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexPointerListIBM(type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalPointerListIBM( GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalPointerListIBM(type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordPointerListIBM( GLint size, GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexPointerListIBM( GLint size, GLenum type, GLint stride, const GLvoid * * pointer, GLint ptrstride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexPointerListIBM_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ptrstride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTbufferMask3DFX( GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTbufferMask3DFX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTbufferMask3DFX(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSampleMaskEXT( GLclampf value, GLboolean invert ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleMaskEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, invert);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleMaskEXT(value, invert);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSamplePatternEXT( GLenum pattern ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSamplePatternEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pattern);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSamplePatternEXT(pattern);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureColorMaskSGIS( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureColorMaskSGIS_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureColorMaskSGIS(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIglooInterfaceSGIX( GLenum pname, const GLvoid * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIglooInterfaceSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIglooInterfaceSGIX(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteFencesNV( GLsizei n, const GLuint * fences ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFencesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (fences) {
        size_t _cCPGLuint171 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint171);
        for (size_t _iCPGLuint171 = 0; _iCPGLuint171 < _cCPGLuint171; ++_iCPGLuint171) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((fences)[_iCPGLuint171]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFencesNV(n, fences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenFencesNV( GLsizei n, GLuint * fences ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenFencesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenFencesNV(n, fences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (fences) {
        size_t _cPGLuint17 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint17);
        for (size_t _iPGLuint17 = 0; _iPGLuint17 < _cPGLuint17; ++_iPGLuint17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((fences)[_iPGLuint17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsFenceNV( GLuint fence ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsFenceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsFenceNV(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glTestFenceNV( GLuint fence ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glTestFenceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glTestFenceNV(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetFenceivNV( GLuint fence, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFenceivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFenceivNV(fence, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glFinishFenceNV( GLuint fence ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinishFenceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFinishFenceNV(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSetFenceNV( GLuint fence, GLenum condition ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetFenceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, condition);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetFenceNV(fence, condition);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapControlPointsNV( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapControlPointsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, packed);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapParameterivNV( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapParameterivNV(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapParameterfvNV( GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapParameterfvNV(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetMapControlPointsNV( GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapControlPointsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, packed);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapParameterivNV( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapParameterivNV(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapParameterfvNV( GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapParameterfvNV(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapAttribParameterivNV( GLenum target, GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapAttribParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapAttribParameterivNV(target, index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMapAttribParameterfvNV( GLenum target, GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMapAttribParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMapAttribParameterfvNV(target, index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glEvalMapsNV( GLenum target, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEvalMapsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEvalMapsNV(target, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCombinerStageParameterfvNV( GLenum stage, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCombinerStageParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat185 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat185);
        for (size_t _iCGLfloat185 = 0; _iCGLfloat185 < _cCGLfloat185; ++_iCGLfloat185) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat185]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCombinerStageParameterfvNV(stage, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCombinerStageParameterfvNV( GLenum stage, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCombinerStageParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stage);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCombinerStageParameterfvNV(stage, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glAreProgramsResidentNV( GLsizei n, const GLuint * ids, GLboolean * residences ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glAreProgramsResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint71 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint71);
        for (size_t _iCPGLuint71 = 0; _iCPGLuint71 < _cCPGLuint71; ++_iCPGLuint71) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint71]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glAreProgramsResidentNV(n, ids, residences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (residences) {
        size_t _cGLboolean = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (residences)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindProgramNV( GLenum target, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindProgramNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindProgramNV(target, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteProgramsNV( GLsizei n, const GLuint * programs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteProgramsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (programs) {
        size_t _cCPGLuint72 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint72);
        for (size_t _iCPGLuint72 = 0; _iCPGLuint72 < _cCPGLuint72; ++_iCPGLuint72) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((programs)[_iCPGLuint72]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteProgramsNV(n, programs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glExecuteProgramNV( GLenum target, GLuint id, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glExecuteProgramNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat186 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat186);
        for (size_t _iCGLfloat186 = 0; _iCGLfloat186 < _cCGLfloat186; ++_iCGLfloat186) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat186]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glExecuteProgramNV(target, id, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenProgramsNV( GLsizei n, GLuint * programs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenProgramsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenProgramsNV(n, programs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (programs) {
        size_t _cPGLuint7 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint7);
        for (size_t _iPGLuint7 = 0; _iPGLuint7 < _cPGLuint7; ++_iPGLuint7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((programs)[_iPGLuint7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramParameterdvNV( GLenum target, GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramParameterdvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramParameterdvNV(target, index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramParameterfvNV( GLenum target, GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramParameterfvNV(target, index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramivNV( GLuint id, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramivNV(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramStringNV( GLuint id, GLenum pname, GLubyte * program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramStringNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramStringNV(id, pname, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (program) {
        size_t _cGLubyte = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLubyte);
        for (size_t _iGLubyte = 0; _iGLubyte < _cGLubyte; ++_iGLubyte) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((program)[_iGLubyte]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTrackMatrixivNV( GLenum target, GLuint address, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTrackMatrixivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(address);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTrackMatrixivNV(target, address, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribdvNV( GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribdvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribdvNV(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribfvNV( GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribfvNV(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribivNV( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribivNV(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribPointervNV( GLuint index, GLenum pname, GLvoid * * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribPointervNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribPointervNV(index, pname, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (pointer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pointer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsProgramNV( GLuint program ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsProgramNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsProgramNV(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glLoadProgramNV( GLenum target, GLuint id, GLsizei len, const GLubyte * program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadProgramNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(program), len);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadProgramNV(target, id, len, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameter4dNV( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameter4dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameter4dNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameter4dvNV( GLenum target, GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameter4dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble93 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble93);
        for (size_t _iCGLdouble93 = 0; _iCGLdouble93 < _cCGLdouble93; ++_iCGLdouble93) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble93]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameter4dvNV(target, index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameter4fNV( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameter4fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameter4fNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameter4fvNV( GLenum target, GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameter4fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat187 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat187);
        for (size_t _iCGLfloat187 = 0; _iCGLfloat187 < _cCGLfloat187; ++_iCGLfloat187) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat187]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameter4fvNV(target, index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameters4dvNV( GLenum target, GLuint index, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameters4dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLdouble94 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble94);
        for (size_t _iCGLdouble94 = 0; _iCGLdouble94 < _cCGLdouble94; ++_iCGLdouble94) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble94]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameters4dvNV(target, index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameters4fvNV( GLenum target, GLuint index, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameters4fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat188 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat188);
        for (size_t _iCGLfloat188 = 0; _iCGLfloat188 < _cCGLfloat188; ++_iCGLfloat188) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat188]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameters4fvNV(target, index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRequestResidentProgramsNV( GLsizei n, const GLuint * programs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRequestResidentProgramsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (programs) {
        size_t _cCPGLuint73 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint73);
        for (size_t _iCPGLuint73 = 0; _iCPGLuint73 < _cCPGLuint73; ++_iCPGLuint73) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((programs)[_iCPGLuint73]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRequestResidentProgramsNV(n, programs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTrackMatrixNV( GLenum target, GLuint address, GLenum matrix, GLenum transform ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTrackMatrixNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(address);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, matrix);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, transform);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTrackMatrixNV(target, address, matrix, transform);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribPointerNV( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
        ctx->user_arrays_nv = true;
    _glVertexAttribPointerNV(index, size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointerNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribPointerNV(index, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1dNV( GLuint index, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1dNV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1dvNV( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1dvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1fNV( GLuint index, GLfloat x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1fNV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1fvNV( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1fvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1sNV( GLuint index, GLshort x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1sNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1sNV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1svNV( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1svNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2dNV( GLuint index, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2dNV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2dvNV( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble96 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble96);
        for (size_t _iCGLdouble96 = 0; _iCGLdouble96 < _cCGLdouble96; ++_iCGLdouble96) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble96]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2dvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2fNV( GLuint index, GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2fNV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2fvNV( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat190 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat190);
        for (size_t _iCGLfloat190 = 0; _iCGLfloat190 < _cCGLfloat190; ++_iCGLfloat190) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat190]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2fvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2sNV( GLuint index, GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2sNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2sNV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2svNV( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort48 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort48);
        for (size_t _iCGLshort48 = 0; _iCGLshort48 < _cCGLshort48; ++_iCGLshort48) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort48]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2svNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3dNV( GLuint index, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3dNV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3dvNV( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble97 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble97);
        for (size_t _iCGLdouble97 = 0; _iCGLdouble97 < _cCGLdouble97; ++_iCGLdouble97) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble97]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3dvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3fNV( GLuint index, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3fNV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3fvNV( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat191 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat191);
        for (size_t _iCGLfloat191 = 0; _iCGLfloat191 < _cCGLfloat191; ++_iCGLfloat191) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat191]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3fvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3sNV( GLuint index, GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3sNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3sNV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3svNV( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort49 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort49);
        for (size_t _iCGLshort49 = 0; _iCGLshort49 < _cCGLshort49; ++_iCGLshort49) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort49]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3svNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4dNV( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4dNV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4dvNV( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble98 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble98);
        for (size_t _iCGLdouble98 = 0; _iCGLdouble98 < _cCGLdouble98; ++_iCGLdouble98) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble98]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4dvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4fNV( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4fNV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4fvNV( GLuint index, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLfloat192 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat192);
        for (size_t _iCGLfloat192 = 0; _iCGLfloat192 < _cCGLfloat192; ++_iCGLfloat192) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat192]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4fvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4sNV( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4sNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4sNV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4svNV( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort50 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort50);
        for (size_t _iCGLshort50 = 0; _iCGLshort50 < _cCGLshort50; ++_iCGLshort50) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort50]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4svNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4ubNV( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4ubNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4ubNV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4ubvNV( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4ubvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte24 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte24);
        for (size_t _iCGLubyte24 = 0; _iCGLubyte24 < _cCGLubyte24; ++_iCGLubyte24) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte24]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4ubvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs1dvNV( GLuint index, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs1dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble99 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLdouble99);
        for (size_t _iCGLdouble99 = 0; _iCGLdouble99 < _cCGLdouble99; ++_iCGLdouble99) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble99]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs1dvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs1fvNV( GLuint index, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs1fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat193 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat193);
        for (size_t _iCGLfloat193 = 0; _iCGLfloat193 < _cCGLfloat193; ++_iCGLfloat193) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat193]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs1fvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs1svNV( GLuint index, GLsizei count, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs1svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLshort51 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLshort51);
        for (size_t _iCGLshort51 = 0; _iCGLshort51 < _cCGLshort51; ++_iCGLshort51) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort51]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs1svNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs2dvNV( GLuint index, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs2dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble100 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble100);
        for (size_t _iCGLdouble100 = 0; _iCGLdouble100 < _cCGLdouble100; ++_iCGLdouble100) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble100]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs2dvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs2fvNV( GLuint index, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs2fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat194 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat194);
        for (size_t _iCGLfloat194 = 0; _iCGLfloat194 < _cCGLfloat194; ++_iCGLfloat194) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat194]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs2fvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs2svNV( GLuint index, GLsizei count, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs2svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLshort52 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLshort52);
        for (size_t _iCGLshort52 = 0; _iCGLshort52 < _cCGLshort52; ++_iCGLshort52) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort52]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs2svNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs3dvNV( GLuint index, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs3dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble101 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble101);
        for (size_t _iCGLdouble101 = 0; _iCGLdouble101 < _cCGLdouble101; ++_iCGLdouble101) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble101]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs3dvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs3fvNV( GLuint index, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs3fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat195 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat195);
        for (size_t _iCGLfloat195 = 0; _iCGLfloat195 < _cCGLfloat195; ++_iCGLfloat195) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat195]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs3fvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs3svNV( GLuint index, GLsizei count, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs3svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLshort53 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLshort53);
        for (size_t _iCGLshort53 = 0; _iCGLshort53 < _cCGLshort53; ++_iCGLshort53) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort53]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs3svNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs4dvNV( GLuint index, GLsizei count, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs4dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLdouble102 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble102);
        for (size_t _iCGLdouble102 = 0; _iCGLdouble102 < _cCGLdouble102; ++_iCGLdouble102) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble102]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs4dvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs4fvNV( GLuint index, GLsizei count, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs4fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLfloat196 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat196);
        for (size_t _iCGLfloat196 = 0; _iCGLfloat196 < _cCGLfloat196; ++_iCGLfloat196) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat196]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs4fvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs4svNV( GLuint index, GLsizei count, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs4svNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLshort54 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLshort54);
        for (size_t _iCGLshort54 = 0; _iCGLshort54 < _cCGLshort54; ++_iCGLshort54) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort54]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs4svNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs4ubvNV( GLuint index, GLsizei count, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs4ubvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLubyte25 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLubyte25);
        for (size_t _iCGLubyte25 = 0; _iCGLubyte25 < _cCGLubyte25; ++_iCGLubyte25) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte25]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs4ubvNV(index, count, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBumpParameterivATI( GLenum pname, const GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBumpParameterivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (param) {
        size_t _cCGLint92 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint92);
        for (size_t _iCGLint92 = 0; _iCGLint92 < _cCGLint92; ++_iCGLint92) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((param)[_iCGLint92]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBumpParameterivATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBumpParameterfvATI( GLenum pname, const GLfloat * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBumpParameterfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (param) {
        size_t _cCGLfloat197 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat197);
        for (size_t _iCGLfloat197 = 0; _iCGLfloat197 < _cCGLfloat197; ++_iCGLfloat197) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((param)[_iCGLfloat197]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBumpParameterfvATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexBumpParameterivATI( GLenum pname, GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexBumpParameterivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexBumpParameterivATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (param) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((param)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexBumpParameterfvATI( GLenum pname, GLfloat * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexBumpParameterfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexBumpParameterfvATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (param) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((param)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLuint glGenFragmentShadersATI( GLuint range ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenFragmentShadersATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenFragmentShadersATI(range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindFragmentShaderATI( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFragmentShaderATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFragmentShaderATI(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteFragmentShaderATI( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFragmentShaderATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFragmentShaderATI(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBeginFragmentShaderATI(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginFragmentShaderATI_sig);
    trace::localWriter.endEnter();
    _glBeginFragmentShaderATI();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndFragmentShaderATI(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndFragmentShaderATI_sig);
    trace::localWriter.endEnter();
    _glEndFragmentShaderATI();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPassTexCoordATI( GLuint dst, GLuint coord, GLenum swizzle ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPassTexCoordATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, swizzle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPassTexCoordATI(dst, coord, swizzle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSampleMapATI( GLuint dst, GLuint interp, GLenum swizzle ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleMapATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(interp);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, swizzle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleMapATI(dst, interp, swizzle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorFragmentOp1ATI( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorFragmentOp1ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorFragmentOp2ATI( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorFragmentOp2ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(arg2Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(arg2Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorFragmentOp3ATI( GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorFragmentOp3ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(arg2Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(arg2Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeUInt(arg3);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeUInt(arg3Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeUInt(arg3Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAlphaFragmentOp1ATI( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAlphaFragmentOp1ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAlphaFragmentOp2ATI( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAlphaFragmentOp2ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(arg2Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(arg2Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glAlphaFragmentOp3ATI( GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAlphaFragmentOp3ATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(dstMod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg1Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(arg1Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(arg2Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(arg2Mod);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(arg3);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeUInt(arg3Rep);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeUInt(arg3Mod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSetFragmentShaderConstantATI( GLuint dst, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetFragmentShaderConstantATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (value) {
        size_t _cCGLfloat198 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat198);
        for (size_t _iCGLfloat198 = 0; _iCGLfloat198 < _cCGLfloat198; ++_iCGLfloat198) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat198]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetFragmentShaderConstantATI(dst, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPNTrianglesiATI( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPNTrianglesiATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPNTrianglesiATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPNTrianglesfATI( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPNTrianglesfATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPNTrianglesfATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glNewObjectBufferATI( GLsizei size, const GLvoid * pointer, GLenum usage ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glNewObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeBlob(pointer, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, usage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glNewObjectBufferATI(size, pointer, usage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsObjectBufferATI( GLuint buffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsObjectBufferATI(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glUpdateObjectBufferATI( GLuint buffer, GLuint offset, GLsizei size, const GLvoid * pointer, GLenum preserve ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUpdateObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(pointer, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, preserve);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetObjectBufferfvATI( GLuint buffer, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectBufferfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectBufferfvATI(buffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetObjectBufferivATI( GLuint buffer, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectBufferivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectBufferivATI(buffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glFreeObjectBufferATI( GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFreeObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFreeObjectBufferATI(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glArrayObjectATI( GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glArrayObjectATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glArrayObjectATI(array, size, type, stride, buffer, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetArrayObjectfvATI( GLenum array, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetArrayObjectfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetArrayObjectfvATI(array, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetArrayObjectivATI( GLenum array, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetArrayObjectivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetArrayObjectivATI(array, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVariantArrayObjectATI( GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantArrayObjectATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantArrayObjectATI(id, type, stride, buffer, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVariantArrayObjectfvATI( GLuint id, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantArrayObjectfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantArrayObjectfvATI(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVariantArrayObjectivATI( GLuint id, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantArrayObjectivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantArrayObjectivATI(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBeginVertexShaderEXT(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginVertexShaderEXT_sig);
    trace::localWriter.endEnter();
    _glBeginVertexShaderEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndVertexShaderEXT(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndVertexShaderEXT_sig);
    trace::localWriter.endEnter();
    _glEndVertexShaderEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexShaderEXT( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexShaderEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexShaderEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGenVertexShadersEXT( GLuint range ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenVertexShadersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(range);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenVertexShadersEXT(range);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeleteVertexShaderEXT( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteVertexShaderEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteVertexShaderEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShaderOp1EXT( GLenum op, GLuint res, GLuint arg1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderOp1EXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderOp1EXT(op, res, arg1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShaderOp2EXT( GLenum op, GLuint res, GLuint arg1, GLuint arg2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderOp2EXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderOp2EXT(op, res, arg1, arg2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glShaderOp3EXT( GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glShaderOp3EXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, op);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(arg1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(arg2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(arg3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glShaderOp3EXT(op, res, arg1, arg2, arg3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSwizzleEXT( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSwizzleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(in);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outW);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSwizzleEXT(res, in, outX, outY, outZ, outW);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWriteMaskEXT( GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWriteMaskEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(in);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, outW);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWriteMaskEXT(res, in, outX, outY, outZ, outW);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glInsertComponentEXT( GLuint res, GLuint src, GLuint num ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInsertComponentEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(num);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInsertComponentEXT(res, src, num);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glExtractComponentEXT( GLuint res, GLuint src, GLuint num ) {
    unsigned _call = trace::localWriter.beginEnter(&_glExtractComponentEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(res);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(num);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glExtractComponentEXT(res, src, num);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGenSymbolsEXT( GLenum datatype, GLenum storagetype, GLenum range, GLuint components ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGenSymbolsEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, datatype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, storagetype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, range);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(components);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGenSymbolsEXT(datatype, storagetype, range, components);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glSetInvariantEXT( GLuint id, GLenum type, const GLvoid * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetInvariantEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetInvariantEXT(id, type, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSetLocalConstantEXT( GLuint id, GLenum type, const GLvoid * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetLocalConstantEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetLocalConstantEXT(id, type, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantbvEXT( GLuint id, const GLbyte * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantbvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantbvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantsvEXT( GLuint id, const GLshort * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantsvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantsvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantivEXT( GLuint id, const GLint * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantivEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantfvEXT( GLuint id, const GLfloat * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantfvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantdvEXT( GLuint id, const GLdouble * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantdvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantdvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantubvEXT( GLuint id, const GLubyte * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantubvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantubvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantusvEXT( GLuint id, const GLushort * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantusvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantusvEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantuivEXT( GLuint id, const GLuint * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantuivEXT(id, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVariantPointerEXT( GLuint id, GLenum type, GLuint stride, const GLvoid * addr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVariantPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)addr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVariantPointerEXT(id, type, stride, addr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableVariantClientStateEXT( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVariantClientStateEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVariantClientStateEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVariantClientStateEXT( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVariantClientStateEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVariantClientStateEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glBindLightParameterEXT( GLenum light, GLenum value ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBindLightParameterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glBindLightParameterEXT(light, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glBindMaterialParameterEXT( GLenum face, GLenum value ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBindMaterialParameterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glBindMaterialParameterEXT(face, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glBindTexGenParameterEXT( GLenum unit, GLenum coord, GLenum value ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBindTexGenParameterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, unit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glBindTexGenParameterEXT(unit, coord, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glBindTextureUnitParameterEXT( GLenum unit, GLenum value ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBindTextureUnitParameterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, unit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glBindTextureUnitParameterEXT(unit, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint glBindParameterEXT( GLenum value ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBindParameterEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glBindParameterEXT(value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsVariantEnabledEXT( GLuint id, GLenum cap ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsVariantEnabledEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, cap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsVariantEnabledEXT(id, cap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetVariantBooleanvEXT( GLuint id, GLenum value, GLboolean * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantBooleanvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantBooleanvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVariantIntegervEXT( GLuint id, GLenum value, GLint * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantIntegervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantIntegervEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVariantFloatvEXT( GLuint id, GLenum value, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantFloatvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantFloatvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVariantPointervEXT( GLuint id, GLenum value, GLvoid * * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVariantPointervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVariantPointervEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetInvariantBooleanvEXT( GLuint id, GLenum value, GLboolean * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInvariantBooleanvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInvariantBooleanvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetInvariantIntegervEXT( GLuint id, GLenum value, GLint * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInvariantIntegervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInvariantIntegervEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetInvariantFloatvEXT( GLuint id, GLenum value, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetInvariantFloatvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetInvariantFloatvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLocalConstantBooleanvEXT( GLuint id, GLenum value, GLboolean * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLocalConstantBooleanvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLocalConstantBooleanvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLocalConstantIntegervEXT( GLuint id, GLenum value, GLint * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLocalConstantIntegervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLocalConstantIntegervEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLocalConstantFloatvEXT( GLuint id, GLenum value, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLocalConstantFloatvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLocalConstantFloatvEXT(id, value, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexStream1sATI( GLenum stream, GLshort x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1sATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1sATI(stream, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1svATI( GLenum stream, const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1svATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1svATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1iATI( GLenum stream, GLint x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1iATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1iATI(stream, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1ivATI( GLenum stream, const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1ivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1ivATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1fATI( GLenum stream, GLfloat x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1fATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1fATI(stream, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1fvATI( GLenum stream, const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1fvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1fvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1dATI( GLenum stream, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1dATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1dATI(stream, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream1dvATI( GLenum stream, const GLdouble * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream1dvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*coords);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream1dvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2sATI( GLenum stream, GLshort x, GLshort y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2sATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2sATI(stream, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2svATI( GLenum stream, const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2svATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLshort57 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLshort57);
        for (size_t _iCGLshort57 = 0; _iCGLshort57 < _cCGLshort57; ++_iCGLshort57) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLshort57]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2svATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2iATI( GLenum stream, GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2iATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2iATI(stream, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2ivATI( GLenum stream, const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2ivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLint95 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint95);
        for (size_t _iCGLint95 = 0; _iCGLint95 < _cCGLint95; ++_iCGLint95) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLint95]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2ivATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2fATI( GLenum stream, GLfloat x, GLfloat y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2fATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2fATI(stream, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2fvATI( GLenum stream, const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2fvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLfloat201 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat201);
        for (size_t _iCGLfloat201 = 0; _iCGLfloat201 < _cCGLfloat201; ++_iCGLfloat201) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coords)[_iCGLfloat201]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2fvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2dATI( GLenum stream, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2dATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2dATI(stream, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream2dvATI( GLenum stream, const GLdouble * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream2dvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLdouble105 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble105);
        for (size_t _iCGLdouble105 = 0; _iCGLdouble105 < _cCGLdouble105; ++_iCGLdouble105) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((coords)[_iCGLdouble105]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream2dvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3sATI( GLenum stream, GLshort x, GLshort y, GLshort z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3sATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3sATI(stream, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3svATI( GLenum stream, const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3svATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLshort58 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort58);
        for (size_t _iCGLshort58 = 0; _iCGLshort58 < _cCGLshort58; ++_iCGLshort58) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLshort58]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3svATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3iATI( GLenum stream, GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3iATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3iATI(stream, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3ivATI( GLenum stream, const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3ivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLint96 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint96);
        for (size_t _iCGLint96 = 0; _iCGLint96 < _cCGLint96; ++_iCGLint96) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLint96]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3ivATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3fATI( GLenum stream, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3fATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3fATI(stream, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3fvATI( GLenum stream, const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3fvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLfloat202 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat202);
        for (size_t _iCGLfloat202 = 0; _iCGLfloat202 < _cCGLfloat202; ++_iCGLfloat202) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coords)[_iCGLfloat202]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3fvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3dATI( GLenum stream, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3dATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3dATI(stream, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream3dvATI( GLenum stream, const GLdouble * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream3dvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLdouble106 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble106);
        for (size_t _iCGLdouble106 = 0; _iCGLdouble106 < _cCGLdouble106; ++_iCGLdouble106) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((coords)[_iCGLdouble106]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream3dvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4sATI( GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4sATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4sATI(stream, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4svATI( GLenum stream, const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4svATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLshort59 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort59);
        for (size_t _iCGLshort59 = 0; _iCGLshort59 < _cCGLshort59; ++_iCGLshort59) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLshort59]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4svATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4iATI( GLenum stream, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4iATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4iATI(stream, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4ivATI( GLenum stream, const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4ivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLint97 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint97);
        for (size_t _iCGLint97 = 0; _iCGLint97 < _cCGLint97; ++_iCGLint97) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLint97]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4ivATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4fATI( GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4fATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4fATI(stream, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4fvATI( GLenum stream, const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4fvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLfloat203 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat203);
        for (size_t _iCGLfloat203 = 0; _iCGLfloat203 < _cCGLfloat203; ++_iCGLfloat203) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coords)[_iCGLfloat203]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4fvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4dATI( GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4dATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4dATI(stream, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexStream4dvATI( GLenum stream, const GLdouble * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexStream4dvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLdouble107 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble107);
        for (size_t _iCGLdouble107 = 0; _iCGLdouble107 < _cCGLdouble107; ++_iCGLdouble107) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((coords)[_iCGLdouble107]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexStream4dvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3bATI( GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3bATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3bATI(stream, nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3bvATI( GLenum stream, const GLbyte * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3bvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLbyte14 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLbyte14);
        for (size_t _iCGLbyte14 = 0; _iCGLbyte14 < _cCGLbyte14; ++_iCGLbyte14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLbyte14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3bvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3sATI( GLenum stream, GLshort nx, GLshort ny, GLshort nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3sATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3sATI(stream, nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3svATI( GLenum stream, const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3svATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLshort60 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLshort60);
        for (size_t _iCGLshort60 = 0; _iCGLshort60 < _cCGLshort60; ++_iCGLshort60) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLshort60]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3svATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3iATI( GLenum stream, GLint nx, GLint ny, GLint nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3iATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3iATI(stream, nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3ivATI( GLenum stream, const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3ivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLint98 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint98);
        for (size_t _iCGLint98 = 0; _iCGLint98 < _cCGLint98; ++_iCGLint98) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLint98]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3ivATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3fATI( GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3fATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3fATI(stream, nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3fvATI( GLenum stream, const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3fvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLfloat204 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLfloat204);
        for (size_t _iCGLfloat204 = 0; _iCGLfloat204 < _cCGLfloat204; ++_iCGLfloat204) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coords)[_iCGLfloat204]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3fvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3dATI( GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3dATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3dATI(stream, nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalStream3dvATI( GLenum stream, const GLdouble * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalStream3dvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (coords) {
        size_t _cCGLdouble108 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble108);
        for (size_t _iCGLdouble108 = 0; _iCGLdouble108 < _cCGLdouble108; ++_iCGLdouble108) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((coords)[_iCGLdouble108]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalStream3dvATI(stream, coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClientActiveVertexStreamATI( GLenum stream ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClientActiveVertexStreamATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, stream);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClientActiveVertexStreamATI(stream);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexBlendEnviATI( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexBlendEnviATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexBlendEnviATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexBlendEnvfATI( GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexBlendEnvfATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexBlendEnvfATI(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glElementPointerATI( GLenum type, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glElementPointerATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glElementPointerATI(type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementArrayATI( GLenum mode, GLsizei count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementArrayATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementArrayATI(mode, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawRangeElementArrayATI( GLenum mode, GLuint start, GLuint end, GLsizei count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawRangeElementArrayATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawRangeElementArrayATI(mode, start, end, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawMeshArraysSUN( GLenum mode, GLint first, GLsizei count, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawMeshArraysSUN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawMeshArraysSUN(mode, first, count, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenOcclusionQueriesNV( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenOcclusionQueriesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenOcclusionQueriesNV(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint3 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint3);
        for (size_t _iPGLuint3 = 0; _iPGLuint3 < _cPGLuint3; ++_iPGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteOcclusionQueriesNV( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteOcclusionQueriesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint32 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint32);
        for (size_t _iCPGLuint32 = 0; _iCPGLuint32 < _cCPGLuint32; ++_iCPGLuint32) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint32]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteOcclusionQueriesNV(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsOcclusionQueryNV( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsOcclusionQueryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsOcclusionQueryNV(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginOcclusionQueryNV( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginOcclusionQueryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginOcclusionQueryNV(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndOcclusionQueryNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndOcclusionQueryNV_sig);
    trace::localWriter.endEnter();
    _glEndOcclusionQueryNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetOcclusionQueryivNV( GLuint id, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetOcclusionQueryivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetOcclusionQueryivNV(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetOcclusionQueryuivNV( GLuint id, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetOcclusionQueryuivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetOcclusionQueryuivNV(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPointParameteriNV( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameteriNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameteriNV(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterivNV( GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLint99 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint99);
        for (size_t _iCGLint99 = 0; _iCGLint99 < _cCGLint99; ++_iCGLint99) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint99]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterivNV(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveStencilFaceEXT( GLenum face ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveStencilFaceEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveStencilFaceEXT(face);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glElementPointerAPPLE( GLenum type, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glElementPointerAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeBlob(pointer, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glElementPointerAPPLE(type, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementArrayAPPLE( GLenum mode, GLint first, GLsizei count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementArrayAPPLE(mode, first, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawRangeElementArrayAPPLE( GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawRangeElementArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElementArrayAPPLE( GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElementArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (first) {
        size_t _cCGLint100 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLint100);
        for (size_t _iCGLint100 = 0; _iCGLint100 < _cCGLint100; ++_iCGLint100) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((first)[_iCGLint100]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (count) {
        size_t _cCGLsizei8 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei8);
        for (size_t _iCGLsizei8 = 0; _iCGLsizei8 < _cCGLsizei8; ++_iCGLsizei8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawRangeElementArrayAPPLE( GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawRangeElementArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(end);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (first) {
        size_t _cCGLint101 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLint101);
        for (size_t _iCGLint101 = 0; _iCGLint101 < _cCGLint101; ++_iCGLint101) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((first)[_iCGLint101]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (count) {
        size_t _cCGLsizei9 = primcount > 0 ? primcount : 0;
        trace::localWriter.beginArray(_cCGLsizei9);
        for (size_t _iCGLsizei9 = 0; _iCGLsizei9 < _cCGLsizei9; ++_iCGLsizei9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((count)[_iCGLsizei9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenFencesAPPLE( GLsizei n, GLuint * fences ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenFencesAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenFencesAPPLE(n, fences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (fences) {
        size_t _cPGLuint17 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint17);
        for (size_t _iPGLuint17 = 0; _iPGLuint17 < _cPGLuint17; ++_iPGLuint17) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((fences)[_iPGLuint17]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteFencesAPPLE( GLsizei n, const GLuint * fences ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFencesAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (fences) {
        size_t _cCPGLuint172 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint172);
        for (size_t _iCPGLuint172 = 0; _iCPGLuint172 < _cCPGLuint172; ++_iCPGLuint172) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((fences)[_iCPGLuint172]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFencesAPPLE(n, fences);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSetFenceAPPLE( GLuint fence ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetFenceAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetFenceAPPLE(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsFenceAPPLE( GLuint fence ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsFenceAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsFenceAPPLE(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glTestFenceAPPLE( GLuint fence ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glTestFenceAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glTestFenceAPPLE(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFinishFenceAPPLE( GLuint fence ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinishFenceAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fence);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFinishFenceAPPLE(fence);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glTestObjectAPPLE( GLenum object, GLuint name ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glTestObjectAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, object);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glTestObjectAPPLE(object, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFinishObjectAPPLE( GLenum object, GLint name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinishObjectAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, object);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFinishObjectAPPLE(object, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexArrayAPPLE( GLuint array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexArrayAPPLE(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteVertexArraysAPPLE( GLsizei n, const GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteVertexArraysAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cCPGLuint121 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint121);
        for (size_t _iCPGLuint121 = 0; _iCPGLuint121 < _cCPGLuint121; ++_iCPGLuint121) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iCPGLuint121]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteVertexArraysAPPLE(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenVertexArraysAPPLE( GLsizei n, GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenVertexArraysAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenVertexArraysAPPLE(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cPGLuint12 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint12);
        for (size_t _iPGLuint12 = 0; _iPGLuint12 < _cPGLuint12; ++_iPGLuint12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iPGLuint12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsVertexArrayAPPLE( GLuint array ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsVertexArrayAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsVertexArrayAPPLE(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glVertexArrayRangeAPPLE( GLsizei length, GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayRangeAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayRangeAPPLE(length, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushVertexArrayRangeAPPLE( GLsizei length, GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlushVertexArrayRangeAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFlushVertexArrayRangeAPPLE(length, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayParameteriAPPLE( GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayParameteriAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayParameteriAPPLE(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushRenderAPPLE(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlushRenderAPPLE_sig);
    trace::localWriter.endEnter();
    _glFlushRenderAPPLE();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFinishRenderAPPLE(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFinishRenderAPPLE_sig);
    trace::localWriter.endEnter();
    _glFinishRenderAPPLE();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSwapAPPLE(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSwapAPPLE_sig);
    trace::localWriter.endEnter();
    _glSwapAPPLE();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawBuffersATI( GLsizei n, const GLenum * bufs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBuffersATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (bufs) {
        size_t _cCGLenum7 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLenum7);
        for (size_t _iCGLenum7 = 0; _iCGLenum7 < _cCGLenum7; ++_iCGLenum7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (bufs)[_iCGLenum7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBuffersATI(n, bufs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramNamedParameter4fNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramNamedParameter4fNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramNamedParameter4dNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramNamedParameter4dNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramNamedParameter4fvNV( GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramNamedParameter4fvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLfloat205 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat205);
        for (size_t _iCGLfloat205 = 0; _iCGLfloat205 < _cCGLfloat205; ++_iCGLfloat205) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((v)[_iCGLfloat205]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramNamedParameter4fvNV(id, len, name, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramNamedParameter4dvNV( GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramNamedParameter4dvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (v) {
        size_t _cCGLdouble109 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble109);
        for (size_t _iCGLdouble109 = 0; _iCGLdouble109 < _cCGLdouble109; ++_iCGLdouble109) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble109]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramNamedParameter4dvNV(id, len, name, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramNamedParameterdvNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramNamedParameterdvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramNamedParameterdvNV(id, len, name, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramNamedParameterfvNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramNamedParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), len);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramNamedParameterfvNV(id, len, name, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertex2hNV( GLhalfNV x, GLhalfNV y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2hNV(x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex2hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex2hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV);
        for (size_t _iCGLhalfNV = 0; _iCGLhalfNV < _cCGLhalfNV; ++_iCGLhalfNV) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex2hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3hNV( GLhalfNV x, GLhalfNV y, GLhalfNV z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3hNV(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex3hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex3hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV1 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV1);
        for (size_t _iCGLhalfNV1 = 0; _iCGLhalfNV1 < _cCGLhalfNV1; ++_iCGLhalfNV1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex3hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4hNV( GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4hNV(x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertex4hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertex4hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV2 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV2);
        for (size_t _iCGLhalfNV2 = 0; _iCGLhalfNV2 < _cCGLhalfNV2; ++_iCGLhalfNV2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertex4hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3hNV( GLhalfNV nx, GLhalfNV ny, GLhalfNV nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3hNV(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV3 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV3);
        for (size_t _iCGLhalfNV3 = 0; _iCGLhalfNV3 < _cCGLhalfNV3; ++_iCGLhalfNV3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3hNV( GLhalfNV red, GLhalfNV green, GLhalfNV blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3hNV(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor3hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor3hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV4 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV4);
        for (size_t _iCGLhalfNV4 = 0; _iCGLhalfNV4 < _cCGLhalfNV4; ++_iCGLhalfNV4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor3hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4hNV( GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4hNV(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV5 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV5);
        for (size_t _iCGLhalfNV5 = 0; _iCGLhalfNV5 < _cCGLhalfNV5; ++_iCGLhalfNV5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1hNV( GLhalfNV s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1hNV(s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord1hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord1hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord1hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2hNV( GLhalfNV s, GLhalfNV t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2hNV(s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord2hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord2hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV7 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV7);
        for (size_t _iCGLhalfNV7 = 0; _iCGLhalfNV7 < _cCGLhalfNV7; ++_iCGLhalfNV7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord2hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3hNV( GLhalfNV s, GLhalfNV t, GLhalfNV r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3hNV(s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord3hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord3hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV8 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV8);
        for (size_t _iCGLhalfNV8 = 0; _iCGLhalfNV8 < _cCGLhalfNV8; ++_iCGLhalfNV8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord3hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4hNV( GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4hNV(s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoord4hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoord4hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV9 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV9);
        for (size_t _iCGLhalfNV9 = 0; _iCGLhalfNV9 < _cCGLhalfNV9; ++_iCGLhalfNV9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoord4hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1hNV( GLenum target, GLhalfNV s ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1hNV(target, s);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord1hvNV( GLenum target, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord1hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord1hvNV(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2hNV( GLenum target, GLhalfNV s, GLhalfNV t ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2hNV(target, s, t);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord2hvNV( GLenum target, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord2hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV11 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV11);
        for (size_t _iCGLhalfNV11 = 0; _iCGLhalfNV11 < _cCGLhalfNV11; ++_iCGLhalfNV11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord2hvNV(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3hNV( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3hNV(target, s, t, r);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord3hvNV( GLenum target, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord3hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV12 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV12);
        for (size_t _iCGLhalfNV12 = 0; _iCGLhalfNV12 < _cCGLhalfNV12; ++_iCGLhalfNV12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord3hvNV(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4hNV( GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4hNV(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4hvNV( GLenum target, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV13 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV13);
        for (size_t _iCGLhalfNV13 = 0; _iCGLhalfNV13 < _cCGLhalfNV13; ++_iCGLhalfNV13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4hvNV(target, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordhNV( GLhalfNV fog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordhNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(fog);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordhNV(fog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordhvNV( const GLhalfNV * fog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordhvNV_sig);
    trace::localWriter.beginArg(0);
    if (fog) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*fog);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordhvNV(fog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3hNV( GLhalfNV red, GLhalfNV green, GLhalfNV blue ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3hNV(red, green, blue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColor3hvNV( const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColor3hvNV_sig);
    trace::localWriter.beginArg(0);
    if (v) {
        size_t _cCGLhalfNV15 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV15);
        for (size_t _iCGLhalfNV15 = 0; _iCGLhalfNV15 < _cCGLhalfNV15; ++_iCGLhalfNV15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColor3hvNV(v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexWeighthNV( GLhalfNV weight ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexWeighthNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(weight);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexWeighthNV(weight);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexWeighthvNV( const GLhalfNV * weight ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexWeighthvNV_sig);
    trace::localWriter.beginArg(0);
    if (weight) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*weight);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexWeighthvNV(weight);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1hNV( GLuint index, GLhalfNV x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1hNV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib1hvNV( GLuint index, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib1hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib1hvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2hNV( GLuint index, GLhalfNV x, GLhalfNV y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2hNV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib2hvNV( GLuint index, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib2hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV18 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV18);
        for (size_t _iCGLhalfNV18 = 0; _iCGLhalfNV18 < _cCGLhalfNV18; ++_iCGLhalfNV18) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV18]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib2hvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3hNV( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3hNV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib3hvNV( GLuint index, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib3hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV19 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV19);
        for (size_t _iCGLhalfNV19 = 0; _iCGLhalfNV19 < _cCGLhalfNV19; ++_iCGLhalfNV19) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV19]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib3hvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4hNV( GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4hNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4hNV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttrib4hvNV( GLuint index, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttrib4hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLhalfNV20 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLhalfNV20);
        for (size_t _iCGLhalfNV20 = 0; _iCGLhalfNV20 < _cCGLhalfNV20; ++_iCGLhalfNV20) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV20]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttrib4hvNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs1hvNV( GLuint index, GLsizei n, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs1hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLhalfNV21 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLhalfNV21);
        for (size_t _iCGLhalfNV21 = 0; _iCGLhalfNV21 < _cCGLhalfNV21; ++_iCGLhalfNV21) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV21]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs1hvNV(index, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs2hvNV( GLuint index, GLsizei n, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs2hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLhalfNV22 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLhalfNV22);
        for (size_t _iCGLhalfNV22 = 0; _iCGLhalfNV22 < _cCGLhalfNV22; ++_iCGLhalfNV22) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV22]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs2hvNV(index, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs3hvNV( GLuint index, GLsizei n, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs3hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLhalfNV23 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLhalfNV23);
        for (size_t _iCGLhalfNV23 = 0; _iCGLhalfNV23 < _cCGLhalfNV23; ++_iCGLhalfNV23) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV23]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs3hvNV(index, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribs4hvNV( GLuint index, GLsizei n, const GLhalfNV * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribs4hvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (v) {
        size_t _cCGLhalfNV24 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLhalfNV24);
        for (size_t _iCGLhalfNV24 = 0; _iCGLhalfNV24 < _cCGLhalfNV24; ++_iCGLhalfNV24) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLhalfNV24]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribs4hvNV(index, n, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPixelDataRangeNV( GLenum target, GLsizei length, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPixelDataRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPixelDataRangeNV(target, length, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushPixelDataRangeNV( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFlushPixelDataRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFlushPixelDataRangeNV(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPrimitiveRestartNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPrimitiveRestartNV_sig);
    trace::localWriter.endEnter();
    _glPrimitiveRestartNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPrimitiveRestartIndexNV( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPrimitiveRestartIndexNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPrimitiveRestartIndexNV(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapObjectBufferATI( GLuint buffer ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapObjectBufferATI(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glUnmapObjectBufferATI( GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUnmapObjectBufferATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUnmapObjectBufferATI(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilOpSeparateATI( GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilOpSeparateATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dpfail);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dppass);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilOpSeparateATI(face, sfail, dpfail, dppass);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilFuncSeparateATI( GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilFuncSeparateATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, frontfunc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, backfunc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(ref);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribArrayObjectATI( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribArrayObjectATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribArrayObjectfvATI( GLuint index, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribArrayObjectfvATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribArrayObjectfvATI(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = pname > 0 ? pname : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribArrayObjectivATI( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribArrayObjectivATI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribArrayObjectivATI(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = pname > 0 ? pname : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDepthBoundsEXT( GLclampd zmin, GLclampd zmax ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthBoundsEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(zmin);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(zmax);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthBoundsEXT(zmin, zmax);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparateEXT( GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparateEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparateEXT(modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsRenderbufferEXT( GLuint renderbuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsRenderbufferEXT(renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindRenderbufferEXT( GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindRenderbufferEXT(target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteRenderbuffersEXT( GLsizei n, const GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteRenderbuffersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cCPGLuint91 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint91);
        for (size_t _iCPGLuint91 = 0; _iCPGLuint91 < _cCPGLuint91; ++_iCPGLuint91) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iCPGLuint91]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteRenderbuffersEXT(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenRenderbuffersEXT( GLsizei n, GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenRenderbuffersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenRenderbuffersEXT(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cPGLuint9 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint9);
        for (size_t _iPGLuint9 = 0; _iPGLuint9 < _cPGLuint9; ++_iPGLuint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iPGLuint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageEXT( GLenum target, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageEXT(target, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetRenderbufferParameterivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetRenderbufferParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetRenderbufferParameterivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsFramebufferEXT( GLuint framebuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsFramebufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsFramebufferEXT(framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindFramebufferEXT( GLenum target, GLuint framebuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFramebufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFramebufferEXT(target, framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteFramebuffersEXT( GLsizei n, const GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFramebuffersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cCPGLuint81 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint81);
        for (size_t _iCPGLuint81 = 0; _iCPGLuint81 < _cCPGLuint81; ++_iCPGLuint81) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iCPGLuint81]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFramebuffersEXT(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenFramebuffersEXT( GLsizei n, GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenFramebuffersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenFramebuffersEXT(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cPGLuint8 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint8);
        for (size_t _iPGLuint8 = 0; _iPGLuint8 < _cPGLuint8; ++_iPGLuint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iPGLuint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glCheckFramebufferStatusEXT( GLenum target ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCheckFramebufferStatusEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCheckFramebufferStatusEXT(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFramebufferTexture1DEXT( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture2DEXT( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture3DEXT( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferRenderbufferEXT( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, renderbuffertarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFramebufferAttachmentParameterivEXT( GLenum target, GLenum attachment, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFramebufferAttachmentParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenerateMipmapEXT( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenerateMipmapEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenerateMipmapEXT(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStringMarkerGREMEDY( GLsizei len, const GLvoid * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStringMarkerGREMEDY_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string), len > 0 ? len : strlen((const char *)string));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStringMarkerGREMEDY(len, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilClearTagEXT( GLsizei stencilTagBits, GLuint stencilClearTag ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilClearTagEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stencilTagBits);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stencilClearTag);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilClearTagEXT(stencilTagBits, stencilClearTag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlitFramebufferEXT( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlitFramebufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(srcX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(srcY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(dstX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(dstY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(dstX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(dstY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield1_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisampleEXT( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisampleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjecti64vEXT( GLuint id, GLenum pname, GLint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjecti64vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjecti64vEXT(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64EXT);
        for (size_t _iGLint64EXT = 0; _iGLint64EXT < _cGLint64EXT; ++_iGLint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectui64vEXT( GLuint id, GLenum pname, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectui64vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectui64vEXT(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameters4fvEXT( GLenum target, GLuint index, GLsizei count, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameters4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat206 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat206);
        for (size_t _iCGLfloat206 = 0; _iCGLfloat206 < _cCGLfloat206; ++_iCGLfloat206) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat206]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameters4fvEXT(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameters4fvEXT( GLenum target, GLuint index, GLsizei count, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameters4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat207 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat207);
        for (size_t _iCGLfloat207 = 0; _iCGLfloat207 < _cCGLfloat207; ++_iCGLfloat207) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat207]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameters4fvEXT(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBufferParameteriAPPLE( GLenum target, GLenum pname, GLint param ) {
    if (pname == GL_BUFFER_FLUSHING_UNMAP_APPLE && param == GL_FALSE) {
        _checkBufferFlushingUnmapAPPLE = true;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glBufferParameteriAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferParameteriAPPLE(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFlushMappedBufferRangeAPPLE( GLenum target, GLintptr offset, GLsizeiptr size ) {
    GLvoid *map = NULL;
    _glGetBufferPointerv(target, GL_BUFFER_MAP_POINTER, &map);
    if (map && size > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)(char *)map + offset);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob((const char *)map + offset, size);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(size);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
    }
    unsigned _call = trace::localWriter.beginEnter(&_glFlushMappedBufferRangeAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFlushMappedBufferRangeAPPLE(target, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameterI4iNV( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameterI4iNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameterI4iNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameterI4ivNV( GLenum target, GLuint index, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameterI4ivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint102 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint102);
        for (size_t _iCGLint102 = 0; _iCGLint102 < _cCGLint102; ++_iCGLint102) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint102]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameterI4ivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParametersI4ivNV( GLenum target, GLuint index, GLsizei count, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParametersI4ivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint103 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint103);
        for (size_t _iCGLint103 = 0; _iCGLint103 < _cCGLint103; ++_iCGLint103) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint103]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParametersI4ivNV(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameterI4uiNV( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameterI4uiNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParameterI4uivNV( GLenum target, GLuint index, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParameterI4uivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLuint68 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint68);
        for (size_t _iCGLuint68 = 0; _iCGLuint68 < _cCGLuint68; ++_iCGLuint68) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint68]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParameterI4uivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramLocalParametersI4uivNV( GLenum target, GLuint index, GLsizei count, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramLocalParametersI4uivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLuint69 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint69);
        for (size_t _iCGLuint69 = 0; _iCGLuint69 < _cCGLuint69; ++_iCGLuint69) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint69]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramLocalParametersI4uivNV(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameterI4iNV( GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameterI4iNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameterI4iNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameterI4ivNV( GLenum target, GLuint index, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameterI4ivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint104 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint104);
        for (size_t _iCGLint104 = 0; _iCGLint104 < _cCGLint104; ++_iCGLint104) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint104]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameterI4ivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParametersI4ivNV( GLenum target, GLuint index, GLsizei count, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParametersI4ivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint105 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint105);
        for (size_t _iCGLint105 = 0; _iCGLint105 < _cCGLint105; ++_iCGLint105) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint105]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParametersI4ivNV(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameterI4uiNV( GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameterI4uiNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParameterI4uivNV( GLenum target, GLuint index, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParameterI4uivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLuint70 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint70);
        for (size_t _iCGLuint70 = 0; _iCGLuint70 < _cCGLuint70; ++_iCGLuint70) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint70]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParameterI4uivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramEnvParametersI4uivNV( GLenum target, GLuint index, GLsizei count, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramEnvParametersI4uivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLuint71 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint71);
        for (size_t _iCGLuint71 = 0; _iCGLuint71 < _cCGLuint71; ++_iCGLuint71) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint71]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramEnvParametersI4uivNV(target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramLocalParameterIivNV( GLenum target, GLuint index, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramLocalParameterIivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramLocalParameterIivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramLocalParameterIuivNV( GLenum target, GLuint index, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramLocalParameterIuivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramLocalParameterIuivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramEnvParameterIivNV( GLenum target, GLuint index, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramEnvParameterIivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramEnvParameterIivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetProgramEnvParameterIuivNV( GLenum target, GLuint index, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramEnvParameterIuivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramEnvParameterIuivNV(target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramVertexLimitNV( GLenum target, GLint limit ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramVertexLimitNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(limit);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramVertexLimitNV(target, limit);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureEXT( GLenum target, GLenum attachment, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureEXT(target, attachment, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureLayerEXT( GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureLayerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTextureFaceEXT( GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTextureFaceEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramParameteriEXT( GLuint program, GLenum pname, GLint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramParameteriEXT(program, pname, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1iEXT( GLuint index, GLint x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1iEXT(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2iEXT( GLuint index, GLint x, GLint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2iEXT(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3iEXT( GLuint index, GLint x, GLint y, GLint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3iEXT(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4iEXT( GLuint index, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4iEXT(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1uiEXT( GLuint index, GLuint x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1uiEXT(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2uiEXT( GLuint index, GLuint x, GLuint y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2uiEXT(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3uiEXT( GLuint index, GLuint x, GLuint y, GLuint z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3uiEXT(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4uiEXT( GLuint index, GLuint x, GLuint y, GLuint z, GLuint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4uiEXT(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1ivEXT( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1ivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2ivEXT( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint107 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint107);
        for (size_t _iCGLint107 = 0; _iCGLint107 < _cCGLint107; ++_iCGLint107) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint107]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2ivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3ivEXT( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint108 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint108);
        for (size_t _iCGLint108 = 0; _iCGLint108 < _cCGLint108; ++_iCGLint108) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint108]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3ivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4ivEXT( GLuint index, const GLint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint109 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint109);
        for (size_t _iCGLint109 = 0; _iCGLint109 < _cCGLint109; ++_iCGLint109) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint109]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4ivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI1uivEXT( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI1uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI1uivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI2uivEXT( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI2uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint73 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLuint73);
        for (size_t _iCGLuint73 = 0; _iCGLuint73 < _cCGLuint73; ++_iCGLuint73) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint73]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI2uivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI3uivEXT( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI3uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint74 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint74);
        for (size_t _iCGLuint74 = 0; _iCGLuint74 < _cCGLuint74; ++_iCGLuint74) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint74]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI3uivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4uivEXT( GLuint index, const GLuint * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint75 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint75);
        for (size_t _iCGLuint75 = 0; _iCGLuint75 < _cCGLuint75; ++_iCGLuint75) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint75]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4uivEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4bvEXT( GLuint index, const GLbyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4bvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLbyte15 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLbyte15);
        for (size_t _iCGLbyte15 = 0; _iCGLbyte15 < _cCGLbyte15; ++_iCGLbyte15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLbyte15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4bvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4svEXT( GLuint index, const GLshort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4svEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLshort61 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort61);
        for (size_t _iCGLshort61 = 0; _iCGLshort61 < _cCGLshort61; ++_iCGLshort61) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLshort61]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4svEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4ubvEXT( GLuint index, const GLubyte * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4ubvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLubyte33 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLubyte33);
        for (size_t _iCGLubyte33 = 0; _iCGLubyte33 < _cCGLubyte33; ++_iCGLubyte33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLubyte33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4ubvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribI4usvEXT( GLuint index, const GLushort * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribI4usvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLushort14 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLushort14);
        for (size_t _iCGLushort14 = 0; _iCGLushort14 < _cCGLushort14; ++_iCGLushort14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLushort14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribI4usvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribIPointerEXT( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexAttribIPointerEXT(index, size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribIPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribIPointerEXT(index, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribIivEXT( GLuint index, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribIivEXT(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribIuivEXT( GLuint index, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribIuivEXT(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetUniformuivEXT( GLuint program, GLint location, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformuivEXT(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBindFragDataLocationEXT( GLuint program, GLuint color, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFragDataLocationEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(color);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFragDataLocationEXT(program, color, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetFragDataLocationEXT( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetFragDataLocationEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetFragDataLocationEXT(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glUniform1uiEXT( GLint location, GLuint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1uiEXT(location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2uiEXT( GLint location, GLuint v0, GLuint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2uiEXT(location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3uiEXT( GLint location, GLuint v0, GLuint v1, GLuint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3uiEXT(location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4uiEXT( GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4uiEXT(location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1uivEXT( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint76 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint76);
        for (size_t _iCGLuint76 = 0; _iCGLuint76 < _cCGLuint76; ++_iCGLuint76) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint76]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1uivEXT(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2uivEXT( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint77 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint77);
        for (size_t _iCGLuint77 = 0; _iCGLuint77 < _cCGLuint77; ++_iCGLuint77) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint77]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2uivEXT(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3uivEXT( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint78 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint78);
        for (size_t _iCGLuint78 = 0; _iCGLuint78 < _cCGLuint78; ++_iCGLuint78) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint78]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3uivEXT(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4uivEXT( GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint79 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint79);
        for (size_t _iCGLuint79 = 0; _iCGLuint79 < _cCGLuint79; ++_iCGLuint79) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint79]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4uivEXT(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawArraysInstancedEXT( GLenum mode, GLint start, GLsizei count, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawArraysInstancedEXT_count(start, count, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawArraysInstancedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(start);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawArraysInstancedEXT(mode, start, count, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawElementsInstancedEXT( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount ) {
    if (_need_user_arrays()) {
        GLuint _count = _glDrawElementsInstancedEXT_count(count, type, indices, primcount);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glDrawElementsInstancedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    switch (_element_array_buffer_binding()) {
    default:
    trace::localWriter.writePointer((uintptr_t)static_cast<const GLvoid *>(indices));
        break;
    case 0:
    trace::localWriter.writeBlob(static_cast<const GLvoid *>(indices), count*_gl_type_size(type));
        break;
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexBufferEXT( GLenum target, GLenum internalformat, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexBufferEXT(target, internalformat, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthRangedNV( GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRangedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRangedNV(zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearDepthdNV( GLdouble depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearDepthdNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearDepthdNV(depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthBoundsdNV( GLdouble zmin, GLdouble zmax ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthBoundsdNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeDouble(zmin);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(zmax);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthBoundsdNV(zmin, zmax);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisampleCoverageNV( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisampleCoverageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramBufferParametersfvNV( GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramBufferParametersfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLfloat208 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat208);
        for (size_t _iCGLfloat208 = 0; _iCGLfloat208 < _cCGLfloat208; ++_iCGLfloat208) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat208]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramBufferParametersfvNV(target, buffer, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramBufferParametersIivNV( GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramBufferParametersIivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLint110 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint110);
        for (size_t _iCGLint110 = 0; _iCGLint110 < _cCGLint110; ++_iCGLint110) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint110]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramBufferParametersIivNV(target, buffer, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramBufferParametersIuivNV( GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramBufferParametersIuivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLuint80 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint80);
        for (size_t _iCGLuint80 = 0; _iCGLuint80 < _cCGLuint80; ++_iCGLuint80) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint80]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramBufferParametersIuivNV(target, buffer, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorMaskIndexedEXT( GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorMaskIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, g);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, b);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, a);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorMaskIndexedEXT(index, r, g, b, a);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetBooleanIndexedvEXT( GLenum target, GLuint index, GLboolean * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBooleanIndexedvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBooleanIndexedvEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLboolean = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLboolean);
        for (size_t _iGLboolean = 0; _iGLboolean < _cGLboolean; ++_iGLboolean) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, (data)[_iGLboolean]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetIntegerIndexedvEXT( GLenum target, GLuint index, GLint * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetIntegerIndexedvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetIntegerIndexedvEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLint = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((data)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glEnableIndexedEXT( GLenum target, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableIndexedEXT(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableIndexedEXT( GLenum target, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableIndexedEXT(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsEnabledIndexedEXT( GLenum target, GLuint index ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsEnabledIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsEnabledIndexedEXT(target, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginTransformFeedbackNV( GLenum primitiveMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginTransformFeedbackNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, primitiveMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginTransformFeedbackNV(primitiveMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndTransformFeedbackNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndTransformFeedbackNV_sig);
    trace::localWriter.endEnter();
    _glEndTransformFeedbackNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTransformFeedbackAttribsNV( GLuint count, const GLint * attribs, GLenum bufferMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformFeedbackAttribsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (attribs) {
        size_t _cCGLint111 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint111);
        for (size_t _iCGLint111 = 0; _iCGLint111 < _cCGLint111; ++_iCGLint111) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCGLint111]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bufferMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformFeedbackAttribsNV(count, attribs, bufferMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferRangeNV( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferRangeNV(target, index, buffer, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferOffsetNV( GLenum target, GLuint index, GLuint buffer, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferOffsetNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferOffsetNV(target, index, buffer, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferBaseNV( GLenum target, GLuint index, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferBaseNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferBaseNV(target, index, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTransformFeedbackVaryingsNV( GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformFeedbackVaryingsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (locations) {
        size_t _cCGLint112 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint112);
        for (size_t _iCGLint112 = 0; _iCGLint112 < _cCGLint112; ++_iCGLint112) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((locations)[_iCGLint112]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bufferMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveVaryingNV( GLuint program, const GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveVaryingNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveVaryingNV(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetVaryingLocationNV( GLuint program, const GLchar * name ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetVaryingLocationNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetVaryingLocationNV(program, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetActiveVaryingNV( GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetActiveVaryingNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTransformFeedbackVaryingNV( GLuint program, GLuint index, GLint * location ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTransformFeedbackVaryingNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTransformFeedbackVaryingNV(program, index, location);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (location) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*location);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTransformFeedbackStreamAttribsNV( GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformFeedbackStreamAttribsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (attribs) {
        size_t _cCGLint113 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint113);
        for (size_t _iCGLint113 = 0; _iCGLint113 < _cCGLint113; ++_iCGLint113) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCGLint113]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(nbuffers);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (bufstreams) {
        size_t _cCGLint114 = nbuffers > 0 ? nbuffers : 0;
        trace::localWriter.beginArray(_cCGLint114);
        for (size_t _iCGLint114 = 0; _iCGLint114 < _cCGLint114; ++_iCGLint114) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((bufstreams)[_iCGLint114]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bufferMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformBufferEXT( GLuint program, GLint location, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformBufferEXT(program, location, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLint glGetUniformBufferSizeEXT( GLuint program, GLint location ) {
    GLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformBufferSizeEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetUniformBufferSizeEXT(program, location);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLintptr glGetUniformOffsetEXT( GLuint program, GLint location ) {
    GLintptr _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetUniformOffsetEXT(program, location);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glTexParameterIivEXT( GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint115 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint115);
        for (size_t _iCGLint115 = 0; _iCGLint115 < _cCGLint115; ++_iCGLint115) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint115]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterIivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterIuivEXT( GLenum target, GLenum pname, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLuint81 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLuint81);
        for (size_t _iCGLuint81 = 0; _iCGLuint81 < _cCGLuint81; ++_iCGLuint81) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint81]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterIuivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterIivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterIivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterIuivEXT( GLenum target, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterIuivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClearColorIiEXT( GLint red, GLint green, GLint blue, GLint alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearColorIiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearColorIiEXT(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearColorIuiEXT( GLuint red, GLuint green, GLuint blue, GLuint alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearColorIuiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearColorIuiEXT(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFrameTerminatorGREMEDY(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrameTerminatorGREMEDY_sig);
    trace::localWriter.endEnter();
    _glFrameTerminatorGREMEDY();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBeginConditionalRenderNV( GLuint id, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginConditionalRenderNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginConditionalRenderNV(id, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndConditionalRenderNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndConditionalRenderNV_sig);
    trace::localWriter.endEnter();
    _glEndConditionalRenderNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPresentFrameKeyedNV( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPresentFrameKeyedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(minPresentTime);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(beginPresentTimeId);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(presentDurationId);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(fill0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(key0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(fill1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeUInt(key1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPresentFrameDualFillNV( GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPresentFrameDualFillNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(minPresentTime);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(beginPresentTimeId);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(presentDurationId);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(fill0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(fill1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeUInt(fill2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target3);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeUInt(fill3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVideoivNV( GLuint video_slot, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoivNV(video_slot, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideouivNV( GLuint video_slot, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideouivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideouivNV(video_slot, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideoi64vNV( GLuint video_slot, GLenum pname, GLint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoi64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoi64vNV(video_slot, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64EXT);
        for (size_t _iGLint64EXT = 0; _iGLint64EXT < _cGLint64EXT; ++_iGLint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideoui64vNV( GLuint video_slot, GLenum pname, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoui64vNV(video_slot, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBeginTransformFeedbackEXT( GLenum primitiveMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginTransformFeedbackEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, primitiveMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginTransformFeedbackEXT(primitiveMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndTransformFeedbackEXT(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndTransformFeedbackEXT_sig);
    trace::localWriter.endEnter();
    _glEndTransformFeedbackEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferRangeEXT( GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferRangeEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferRangeEXT(target, index, buffer, offset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferOffsetEXT( GLenum target, GLuint index, GLuint buffer, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferOffsetEXT(target, index, buffer, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindBufferBaseEXT( GLenum target, GLuint index, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindBufferBaseEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindBufferBaseEXT(target, index, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTransformFeedbackVaryingsEXT( GLuint program, GLsizei count, const GLchar * * const varyings, GLenum bufferMode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTransformFeedbackVaryingsEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (varyings) {
        size_t _cconstGLchar = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cconstGLchar);
        for (size_t _iconstGLchar = 0; _iconstGLchar < _cconstGLchar; ++_iconstGLchar) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((varyings)[_iconstGLchar]));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, bufferMode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTransformFeedbackVaryingEXT( GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTransformFeedbackVaryingEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (size) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*size);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (type) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *type);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(name), ((length) ? *(length) : strlen(name)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glClientAttribDefaultEXT( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClientAttribDefaultEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield2_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClientAttribDefaultEXT(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushClientAttribDefaultEXT( GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushClientAttribDefaultEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield2_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushClientAttribDefaultEXT(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixLoadfEXT( GLenum mode, const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixLoadfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLfloat209 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat209);
        for (size_t _iCGLfloat209 = 0; _iCGLfloat209 < _cCGLfloat209; ++_iCGLfloat209) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat209]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixLoadfEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixLoaddEXT( GLenum mode, const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixLoaddEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLdouble110 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble110);
        for (size_t _iCGLdouble110 = 0; _iCGLdouble110 < _cCGLdouble110; ++_iCGLdouble110) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble110]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixLoaddEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixMultfEXT( GLenum mode, const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixMultfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLfloat210 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat210);
        for (size_t _iCGLfloat210 = 0; _iCGLfloat210 < _cCGLfloat210; ++_iCGLfloat210) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat210]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixMultfEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixMultdEXT( GLenum mode, const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixMultdEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLdouble111 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble111);
        for (size_t _iCGLdouble111 = 0; _iCGLdouble111 < _cCGLdouble111; ++_iCGLdouble111) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble111]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixMultdEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixLoadIdentityEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixLoadIdentityEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixLoadIdentityEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixRotatefEXT( GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixRotatefEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(angle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixRotatefEXT(mode, angle, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixRotatedEXT( GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixRotatedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(angle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixRotatedEXT(mode, angle, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixScalefEXT( GLenum mode, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixScalefEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixScalefEXT(mode, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixScaledEXT( GLenum mode, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixScaledEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixScaledEXT(mode, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixTranslatefEXT( GLenum mode, GLfloat x, GLfloat y, GLfloat z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixTranslatefEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixTranslatefEXT(mode, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixTranslatedEXT( GLenum mode, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixTranslatedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixTranslatedEXT(mode, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixFrustumEXT( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixFrustumEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixOrthoEXT( GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixOrthoEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixPopEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixPopEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixPopEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixPushEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixPushEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixPushEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixLoadTransposefEXT( GLenum mode, const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixLoadTransposefEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLfloat211 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat211);
        for (size_t _iCGLfloat211 = 0; _iCGLfloat211 < _cCGLfloat211; ++_iCGLfloat211) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat211]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixLoadTransposefEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixLoadTransposedEXT( GLenum mode, const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixLoadTransposedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLdouble112 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble112);
        for (size_t _iCGLdouble112 = 0; _iCGLdouble112 < _cCGLdouble112; ++_iCGLdouble112) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble112]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixLoadTransposedEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixMultTransposefEXT( GLenum mode, const GLfloat * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixMultTransposefEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLfloat212 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfloat212);
        for (size_t _iCGLfloat212 = 0; _iCGLfloat212 < _cCGLfloat212; ++_iCGLfloat212) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((m)[_iCGLfloat212]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixMultTransposefEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixMultTransposedEXT( GLenum mode, const GLdouble * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixMultTransposedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (m) {
        size_t _cCGLdouble113 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLdouble113);
        for (size_t _iCGLdouble113 = 0; _iCGLdouble113 < _cCGLdouble113; ++_iCGLdouble113) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((m)[_iCGLdouble113]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixMultTransposedEXT(mode, m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureParameterfEXT( GLuint texture, GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameterfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameterfEXT(texture, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat213 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat213);
        for (size_t _iCGLfloat213 = 0; _iCGLfloat213 < _cCGLfloat213; ++_iCGLfloat213) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat213]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameterfvEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureParameteriEXT( GLuint texture, GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameteriEXT(texture, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint116 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint116);
        for (size_t _iCGLint116 = 0; _iCGLint116 < _cCGLint116; ++_iCGLint116) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint116]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameterivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureImage1DEXT_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage2DEXT( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureImage2DEXT_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureSubImage1DEXT_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureSubImage2DEXT_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTextureImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTextureImage2DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTextureImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTextureSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTextureSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTextureImageEXT( GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureImageEXT(texture, target, level, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTextureParameterfvEXT( GLuint texture, GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureParameterfvEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTextureParameterivEXT( GLuint texture, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureParameterivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTextureLevelParameterfvEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureLevelParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureLevelParameterfvEXT(texture, target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTextureLevelParameterivEXT( GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureLevelParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureLevelParameterivEXT(texture, target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTextureImage3DEXT( GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureImage3DEXT_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glTextureSubImage3DEXT_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTextureSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameterfEXT( GLenum texunit, GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameterfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameterfEXT(texunit, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameterfvEXT( GLenum texunit, GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat214 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat214);
        for (size_t _iCGLfloat214 = 0; _iCGLfloat214 < _cCGLfloat214; ++_iCGLfloat214) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat214]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameterfvEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameteriEXT( GLenum texunit, GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameteriEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameteriEXT(texunit, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameterivEXT( GLenum texunit, GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint117 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint117);
        for (size_t _iCGLint117 = 0; _iCGLint117 < _cCGLint117; ++_iCGLint117) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint117]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameterivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexImage1DEXT_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexImage2DEXT_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexSubImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexSubImage1DEXT_size(format, type, width));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexSubImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexSubImage2DEXT_size(format, type, width, height));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyMultiTexImage1DEXT( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyMultiTexImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyMultiTexImage2DEXT( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyMultiTexImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyMultiTexSubImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyMultiTexSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyMultiTexSubImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyMultiTexSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexImageEXT( GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexImageEXT(texunit, target, level, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)pixels);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexParameterfvEXT( GLenum texunit, GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexParameterfvEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexParameterivEXT( GLenum texunit, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexParameterivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexLevelParameterfvEXT( GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexLevelParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexLevelParameterivEXT( GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexLevelParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glMultiTexImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexImage3DEXT_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)pixels);
        } else {
    trace::localWriter.writeBlob(pixels, _glMultiTexSubImage3DEXT_size(format, type, width, height, depth));
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyMultiTexSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindMultiTextureEXT( GLenum texunit, GLenum target, GLuint texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindMultiTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindMultiTextureEXT(texunit, target, texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableClientStateIndexedEXT( GLenum array, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableClientStateIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableClientStateIndexedEXT(array, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableClientStateIndexedEXT( GLenum array, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableClientStateIndexedEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableClientStateIndexedEXT(array, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableClientStateiEXT( GLenum array, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableClientStateiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableClientStateiEXT(array, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableClientStateiEXT( GLenum array, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableClientStateiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableClientStateiEXT(array, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoordPointerEXT( GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoordPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexEnvfEXT( GLenum texunit, GLenum target, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexEnvfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexEnvfEXT(texunit, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexEnvfvEXT( GLenum texunit, GLenum target, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexEnvfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat215 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat215);
        for (size_t _iCGLfloat215 = 0; _iCGLfloat215 < _cCGLfloat215; ++_iCGLfloat215) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat215]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexEnvfvEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexEnviEXT( GLenum texunit, GLenum target, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexEnviEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexEnviEXT(texunit, target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexEnvivEXT( GLenum texunit, GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexEnvivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint118 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint118);
        for (size_t _iCGLint118 = 0; _iCGLint118 < _cCGLint118; ++_iCGLint118) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint118]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexEnvivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGendEXT( GLenum texunit, GLenum coord, GLenum pname, GLdouble param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGendEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeDouble(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGendEXT(texunit, coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGendvEXT( GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGendvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLdouble114 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLdouble114);
        for (size_t _iCGLdouble114 = 0; _iCGLdouble114 < _cCGLdouble114; ++_iCGLdouble114) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble114]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGendvEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGenfEXT( GLenum texunit, GLenum coord, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGenfEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGenfEXT(texunit, coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGenfvEXT( GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGenfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat216 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat216);
        for (size_t _iCGLfloat216 = 0; _iCGLfloat216 < _cCGLfloat216; ++_iCGLfloat216) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat216]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGenfvEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGeniEXT( GLenum texunit, GLenum coord, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGeniEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGeniEXT(texunit, coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexGenivEXT( GLenum texunit, GLenum coord, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexGenivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint119 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint119);
        for (size_t _iCGLint119 = 0; _iCGLint119 < _cCGLint119; ++_iCGLint119) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint119]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexGenivEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexEnvfvEXT( GLenum texunit, GLenum target, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexEnvfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexEnvfvEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexEnvivEXT( GLenum texunit, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexEnvivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexEnvivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexGendvEXT( GLenum texunit, GLenum coord, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexGendvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexGendvEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexGenfvEXT( GLenum texunit, GLenum coord, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexGenfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexGenfvEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexGenivEXT( GLenum texunit, GLenum coord, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexGenivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexGenivEXT(texunit, coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFloatIndexedvEXT( GLenum target, GLuint index, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFloatIndexedvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFloatIndexedvEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLfloat = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((data)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetDoubleIndexedvEXT( GLenum target, GLuint index, GLdouble * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetDoubleIndexedvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetDoubleIndexedvEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLdouble = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((data)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPointerIndexedvEXT( GLenum target, GLuint index, GLvoid * * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPointerIndexedvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPointerIndexedvEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLvoid1 = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLvoid1);
        for (size_t _iGLvoid1 = 0; _iGLvoid1 < _cGLvoid1; ++_iGLvoid1) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(data)[_iGLvoid1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFloati_vEXT( GLenum target, GLuint index, GLfloat * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFloati_vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFloati_vEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLfloat = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((data)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetDoublei_vEXT( GLenum target, GLuint index, GLdouble * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetDoublei_vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetDoublei_vEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLdouble = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((data)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPointeri_vEXT( GLenum target, GLuint index, GLvoid * * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPointeri_vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPointeri_vEXT(target, index, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (data) {
        size_t _cGLvoid1 = _gl_param_size(target) > 0 ? _gl_param_size(target) : 0;
        trace::localWriter.beginArray(_cGLvoid1);
        for (size_t _iGLvoid1 = 0; _iGLvoid1 < _cGLvoid1; ++_iGLvoid1) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(data)[_iGLvoid1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureImage3DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureImage2DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureImage1DEXT( GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureSubImage3DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureSubImage2DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTextureSubImage1DEXT( GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTextureSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCompressedTextureImageEXT( GLuint texture, GLenum target, GLint lod, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCompressedTextureImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(lod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCompressedTextureImageEXT(texture, target, lod, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexImage3DEXT( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexImage2DEXT( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexImage1DEXT( GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexSubImage3DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexSubImage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexSubImage2DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexSubImage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedMultiTexSubImage1DEXT( GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedMultiTexSubImage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    {
        gltrace::Context *ctx = gltrace::getContext();
        GLint _unpack_buffer = 0;
        if (ctx->profile == gltrace::PROFILE_COMPAT)
            _glGetIntegerv(GL_PIXEL_UNPACK_BUFFER_BINDING, &_unpack_buffer);
        if (_unpack_buffer) {
            trace::localWriter.writePointer((uintptr_t)bits);
        } else {
    trace::localWriter.writeBlob(bits, imageSize);
        }
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetCompressedMultiTexImageEXT( GLenum texunit, GLenum target, GLint lod, GLvoid * img ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetCompressedMultiTexImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(lod);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetCompressedMultiTexImageEXT(texunit, target, lod, img);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)img);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glNamedProgramStringEXT( GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramStringEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(len);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string), len);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramStringEXT(program, target, format, len, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameter4dEXT( GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameter4dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameter4dvEXT( GLuint program, GLenum target, GLuint index, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameter4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLdouble115 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble115);
        for (size_t _iCGLdouble115 = 0; _iCGLdouble115 < _cCGLdouble115; ++_iCGLdouble115) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble115]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameter4dvEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameter4fEXT( GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameter4fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameter4fvEXT( GLuint program, GLenum target, GLuint index, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameter4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat217 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat217);
        for (size_t _iCGLfloat217 = 0; _iCGLfloat217 < _cCGLfloat217; ++_iCGLfloat217) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat217]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameter4fvEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramLocalParameterdvEXT( GLuint program, GLenum target, GLuint index, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramLocalParameterdvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramLocalParameterdvEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramLocalParameterfvEXT( GLuint program, GLenum target, GLuint index, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramLocalParameterfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramLocalParameterfvEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramivEXT( GLuint program, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramivEXT(program, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramStringEXT( GLuint program, GLenum target, GLenum pname, GLvoid * string ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramStringEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramStringEXT(program, target, pname, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)string);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameters4fvEXT( GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameters4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLfloat218 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat218);
        for (size_t _iCGLfloat218 = 0; _iCGLfloat218 < _cCGLfloat218; ++_iCGLfloat218) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat218]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameters4fvEXT(program, target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameterI4iEXT( GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameterI4iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameterI4ivEXT( GLuint program, GLenum target, GLuint index, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameterI4ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint120 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint120);
        for (size_t _iCGLint120 = 0; _iCGLint120 < _cCGLint120; ++_iCGLint120) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint120]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameterI4ivEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParametersI4ivEXT( GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParametersI4ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLint121 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint121);
        for (size_t _iCGLint121 = 0; _iCGLint121 < _cCGLint121; ++_iCGLint121) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint121]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameterI4uiEXT( GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameterI4uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParameterI4uivEXT( GLuint program, GLenum target, GLuint index, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParameterI4uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLuint82 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint82);
        for (size_t _iCGLuint82 = 0; _iCGLuint82 < _cCGLuint82; ++_iCGLuint82) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint82]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParameterI4uivEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedProgramLocalParametersI4uivEXT( GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedProgramLocalParametersI4uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (params) {
        size_t _cCGLuint83 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint83);
        for (size_t _iCGLuint83 = 0; _iCGLuint83 < _cCGLuint83; ++_iCGLuint83) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint83]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramLocalParameterIivEXT( GLuint program, GLenum target, GLuint index, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramLocalParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramLocalParameterIivEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedProgramLocalParameterIuivEXT( GLuint program, GLenum target, GLuint index, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedProgramLocalParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedProgramLocalParameterIuivEXT(program, target, index, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLuint = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint122 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint122);
        for (size_t _iCGLint122 = 0; _iCGLint122 < _cCGLint122; ++_iCGLint122) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint122]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameterIivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLuint84 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLuint84);
        for (size_t _iCGLuint84 = 0; _iCGLuint84 < _cCGLuint84; ++_iCGLuint84) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint84]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureParameterIuivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTextureParameterIivEXT( GLuint texture, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureParameterIivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTextureParameterIuivEXT( GLuint texture, GLenum target, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTextureParameterIuivEXT(texture, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameterIivEXT( GLenum texunit, GLenum target, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint123 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint123);
        for (size_t _iCGLint123 = 0; _iCGLint123 < _cCGLint123; ++_iCGLint123) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint123]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameterIivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexParameterIuivEXT( GLenum texunit, GLenum target, GLenum pname, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLuint85 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLuint85);
        for (size_t _iCGLuint85 = 0; _iCGLuint85 < _cCGLuint85; ++_iCGLuint85) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint85]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexParameterIuivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexParameterIivEXT( GLenum texunit, GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexParameterIivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexParameterIivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultiTexParameterIuivEXT( GLenum texunit, GLenum target, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultiTexParameterIuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultiTexParameterIuivEXT(texunit, target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1fEXT( GLuint program, GLint location, GLfloat v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1fEXT(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2fEXT( GLuint program, GLint location, GLfloat v0, GLfloat v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2fEXT(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3fEXT( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3fEXT(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4fEXT( GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4fEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1iEXT( GLuint program, GLint location, GLint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1iEXT(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2iEXT( GLuint program, GLint location, GLint v0, GLint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2iEXT(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3iEXT( GLuint program, GLint location, GLint v0, GLint v1, GLint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3iEXT(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4iEXT( GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4iEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1fvEXT( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat219 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLfloat219);
        for (size_t _iCGLfloat219 = 0; _iCGLfloat219 < _cCGLfloat219; ++_iCGLfloat219) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat219]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1fvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2fvEXT( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat220 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat220);
        for (size_t _iCGLfloat220 = 0; _iCGLfloat220 < _cCGLfloat220; ++_iCGLfloat220) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat220]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2fvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3fvEXT( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat221 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat221);
        for (size_t _iCGLfloat221 = 0; _iCGLfloat221 < _cCGLfloat221; ++_iCGLfloat221) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat221]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3fvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4fvEXT( GLuint program, GLint location, GLsizei count, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLfloat222 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat222);
        for (size_t _iCGLfloat222 = 0; _iCGLfloat222 < _cCGLfloat222; ++_iCGLfloat222) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat222]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4fvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1ivEXT( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint124 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint124);
        for (size_t _iCGLint124 = 0; _iCGLint124 < _cCGLint124; ++_iCGLint124) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint124]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1ivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2ivEXT( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint125 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint125);
        for (size_t _iCGLint125 = 0; _iCGLint125 < _cCGLint125; ++_iCGLint125) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint125]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2ivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3ivEXT( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint126 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint126);
        for (size_t _iCGLint126 = 0; _iCGLint126 < _cCGLint126; ++_iCGLint126) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint126]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3ivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4ivEXT( GLuint program, GLint location, GLsizei count, const GLint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4ivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint127 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint127);
        for (size_t _iCGLint127 = 0; _iCGLint127 < _cCGLint127; ++_iCGLint127) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint127]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4ivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat223 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat223);
        for (size_t _iCGLfloat223 = 0; _iCGLfloat223 < _cCGLfloat223; ++_iCGLfloat223) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat223]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat224 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat224);
        for (size_t _iCGLfloat224 = 0; _iCGLfloat224 < _cCGLfloat224; ++_iCGLfloat224) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat224]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat225 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat225);
        for (size_t _iCGLfloat225 = 0; _iCGLfloat225 < _cCGLfloat225; ++_iCGLfloat225) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat225]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x3fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x3fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat226 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat226);
        for (size_t _iCGLfloat226 = 0; _iCGLfloat226 < _cCGLfloat226; ++_iCGLfloat226) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat226]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x2fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x2fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat227 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat227);
        for (size_t _iCGLfloat227 = 0; _iCGLfloat227 < _cCGLfloat227; ++_iCGLfloat227) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat227]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x4fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat228 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat228);
        for (size_t _iCGLfloat228 = 0; _iCGLfloat228 < _cCGLfloat228; ++_iCGLfloat228) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat228]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x2fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x2fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat229 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLfloat229);
        for (size_t _iCGLfloat229 = 0; _iCGLfloat229 < _cCGLfloat229; ++_iCGLfloat229) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat229]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x4fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x4fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat230 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLfloat230);
        for (size_t _iCGLfloat230 = 0; _iCGLfloat230 < _cCGLfloat230; ++_iCGLfloat230) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat230]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x3fvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x3fvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLfloat231 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLfloat231);
        for (size_t _iCGLfloat231 = 0; _iCGLfloat231 < _cCGLfloat231; ++_iCGLfloat231) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((value)[_iCGLfloat231]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1uiEXT( GLuint program, GLint location, GLuint v0 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1uiEXT(program, location, v0);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2uiEXT( GLuint program, GLint location, GLuint v0, GLuint v1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2uiEXT(program, location, v0, v1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3uiEXT( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3uiEXT(program, location, v0, v1, v2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4uiEXT( GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4uiEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(v0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(v3);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1uivEXT( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint86 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint86);
        for (size_t _iCGLuint86 = 0; _iCGLuint86 < _cCGLuint86; ++_iCGLuint86) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint86]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1uivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2uivEXT( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint87 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint87);
        for (size_t _iCGLuint87 = 0; _iCGLuint87 < _cCGLuint87; ++_iCGLuint87) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint87]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2uivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3uivEXT( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint88 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint88);
        for (size_t _iCGLuint88 = 0; _iCGLuint88 < _cCGLuint88; ++_iCGLuint88) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint88]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3uivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4uivEXT( GLuint program, GLint location, GLsizei count, const GLuint * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4uivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint89 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint89);
        for (size_t _iCGLuint89 = 0; _iCGLuint89 < _cCGLuint89; ++_iCGLuint89) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint89]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4uivEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedBufferDataEXT( GLuint buffer, GLsizeiptr size, const GLvoid * data, GLenum usage ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedBufferDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, usage);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedBufferDataEXT(buffer, size, data, usage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedBufferSubDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBlob(data, size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedBufferSubDataEXT(buffer, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapNamedBufferEXT( GLuint buffer, GLenum access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapNamedBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapNamedBufferEXT(buffer, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glUnmapNamedBufferEXT( GLuint buffer ) {
    GLboolean _result;
    GLint access_flags = 0;
    _glGetNamedBufferParameterivEXT(buffer, GL_BUFFER_ACCESS_FLAGS, &access_flags);
    if ((access_flags & GL_MAP_WRITE_BIT) && !(access_flags & GL_MAP_FLUSH_EXPLICIT_BIT)) {
        GLvoid *map = NULL;
        _glGetNamedBufferPointervEXT(buffer, GL_BUFFER_MAP_POINTER, &map);
        GLint length = 0;
        _glGetNamedBufferParameterivEXT(buffer, GL_BUFFER_MAP_LENGTH, &length);
        if (map && length > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)map);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob(map, length);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(length);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glUnmapNamedBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glUnmapNamedBufferEXT(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLvoid * glMapNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapNamedBufferRangeEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield4_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapNamedBufferRangeEXT(buffer, offset, length, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFlushMappedNamedBufferRangeEXT( GLuint buffer, GLintptr offset, GLsizeiptr length ) {
    GLvoid *map = NULL;
    _glGetNamedBufferPointervEXT(buffer, GL_BUFFER_MAP_POINTER, &map);
    if (map && length > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)(char *)map + offset);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob((const char *)map + offset, length);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(length);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
    }
    unsigned _call = trace::localWriter.beginEnter(&_glFlushMappedNamedBufferRangeEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedCopyBufferSubDataEXT( GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedCopyBufferSubDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(readBuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(writeBuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(readOffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(writeOffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedBufferParameterivEXT( GLuint buffer, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedBufferParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedBufferParameterivEXT(buffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedBufferPointervEXT( GLuint buffer, GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedBufferPointervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedBufferPointervEXT(buffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedBufferSubDataEXT( GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedBufferSubDataEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedBufferSubDataEXT(buffer, offset, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTextureBufferEXT( GLuint texture, GLenum target, GLenum internalformat, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureBufferEXT(texture, target, internalformat, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexBufferEXT( GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexBufferEXT(texunit, target, internalformat, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedRenderbufferStorageEXT( GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedRenderbufferStorageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedRenderbufferParameterivEXT( GLuint renderbuffer, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedRenderbufferParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glCheckNamedFramebufferStatusEXT( GLuint framebuffer, GLenum target ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCheckNamedFramebufferStatusEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCheckNamedFramebufferStatusEXT(framebuffer, target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glNamedFramebufferTexture1DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTexture1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferTexture2DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTexture2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferTexture3DEXT( GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTexture3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferRenderbufferEXT( GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, renderbuffertarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetNamedFramebufferAttachmentParameterivEXT( GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedFramebufferAttachmentParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenerateTextureMipmapEXT( GLuint texture, GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenerateTextureMipmapEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenerateTextureMipmapEXT(texture, target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenerateMultiTexMipmapEXT( GLenum texunit, GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenerateMultiTexMipmapEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenerateMultiTexMipmapEXT(texunit, target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferDrawBufferEXT( GLuint framebuffer, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferDrawBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferDrawBufferEXT(framebuffer, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferDrawBuffersEXT( GLuint framebuffer, GLsizei n, const GLenum * bufs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferDrawBuffersEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (bufs) {
        size_t _cCGLenum8 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLenum8);
        for (size_t _iCGLenum8 = 0; _iCGLenum8 < _cCGLenum8; ++_iCGLenum8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (bufs)[_iCGLenum8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferDrawBuffersEXT(framebuffer, n, bufs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferReadBufferEXT( GLuint framebuffer, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferReadBufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferReadBufferEXT(framebuffer, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFramebufferParameterivEXT( GLuint framebuffer, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFramebufferParameterivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFramebufferParameterivEXT(framebuffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glNamedRenderbufferStorageMultisampleEXT( GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedRenderbufferStorageMultisampleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedRenderbufferStorageMultisampleCoverageEXT( GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedRenderbufferStorageMultisampleCoverageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferTextureEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferTextureLayerEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTextureLayerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNamedFramebufferTextureFaceEXT( GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNamedFramebufferTextureFaceEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureRenderbufferEXT( GLuint texture, GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureRenderbufferEXT(texture, target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexRenderbufferEXT( GLenum texunit, GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexRenderbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1dEXT( GLuint program, GLint location, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1dEXT(program, location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2dEXT( GLuint program, GLint location, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2dEXT(program, location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3dEXT( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3dEXT(program, location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4dEXT( GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4dEXT(program, location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1dvEXT( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble116 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLdouble116);
        for (size_t _iCGLdouble116 = 0; _iCGLdouble116 < _cCGLdouble116; ++_iCGLdouble116) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble116]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1dvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2dvEXT( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble117 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble117);
        for (size_t _iCGLdouble117 = 0; _iCGLdouble117 < _cCGLdouble117; ++_iCGLdouble117) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble117]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2dvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3dvEXT( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble118 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble118);
        for (size_t _iCGLdouble118 = 0; _iCGLdouble118 < _cCGLdouble118; ++_iCGLdouble118) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble118]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3dvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4dvEXT( GLuint program, GLint location, GLsizei count, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLdouble119 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble119);
        for (size_t _iCGLdouble119 = 0; _iCGLdouble119 < _cCGLdouble119; ++_iCGLdouble119) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble119]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4dvEXT(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble120 = count*2*2 > 0 ? count*2*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble120);
        for (size_t _iCGLdouble120 = 0; _iCGLdouble120 < _cCGLdouble120; ++_iCGLdouble120) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble120]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble121 = count*3*3 > 0 ? count*3*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble121);
        for (size_t _iCGLdouble121 = 0; _iCGLdouble121 < _cCGLdouble121; ++_iCGLdouble121) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble121]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble122 = count*4*4 > 0 ? count*4*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble122);
        for (size_t _iCGLdouble122 = 0; _iCGLdouble122 < _cCGLdouble122; ++_iCGLdouble122) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble122]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x3dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x3dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble123 = count*2*3 > 0 ? count*2*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble123);
        for (size_t _iCGLdouble123 = 0; _iCGLdouble123 < _cCGLdouble123; ++_iCGLdouble123) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble123]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix2x4dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix2x4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble124 = count*2*4 > 0 ? count*2*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble124);
        for (size_t _iCGLdouble124 = 0; _iCGLdouble124 < _cCGLdouble124; ++_iCGLdouble124) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble124]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x2dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x2dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble125 = count*3*2 > 0 ? count*3*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble125);
        for (size_t _iCGLdouble125 = 0; _iCGLdouble125 < _cCGLdouble125; ++_iCGLdouble125) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble125]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix3x4dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix3x4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble126 = count*3*4 > 0 ? count*3*4 : 0;
        trace::localWriter.beginArray(_cCGLdouble126);
        for (size_t _iCGLdouble126 = 0; _iCGLdouble126 < _cCGLdouble126; ++_iCGLdouble126) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble126]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x2dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x2dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble127 = count*4*2 > 0 ? count*4*2 : 0;
        trace::localWriter.beginArray(_cCGLdouble127);
        for (size_t _iCGLdouble127 = 0; _iCGLdouble127 < _cCGLdouble127; ++_iCGLdouble127) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble127]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformMatrix4x3dvEXT( GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformMatrix4x3dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, transpose);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (value) {
        size_t _cCGLdouble128 = count*4*3 > 0 ? count*4*3 : 0;
        trace::localWriter.beginArray(_cCGLdouble128);
        for (size_t _iCGLdouble128 = 0; _iCGLdouble128 < _cCGLdouble128; ++_iCGLdouble128) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((value)[_iCGLdouble128]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayColorOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayColorOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayEdgeFlagOffsetEXT( GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayEdgeFlagOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayIndexOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayIndexOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayNormalOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayNormalOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayTexCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayTexCoordOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayMultiTexCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayMultiTexCoordOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texunit);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayFogCoordOffsetEXT( GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayFogCoordOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArraySecondaryColorOffsetEXT( GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArraySecondaryColorOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribOffsetEXT( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribIOffsetEXT( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribIOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableVertexArrayEXT( GLuint vaobj, GLenum array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVertexArrayEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVertexArrayEXT(vaobj, array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVertexArrayEXT( GLuint vaobj, GLenum array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVertexArrayEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVertexArrayEXT(vaobj, array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEnableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVertexArrayAttribEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVertexArrayAttribEXT(vaobj, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVertexArrayAttribEXT( GLuint vaobj, GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVertexArrayAttribEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVertexArrayAttribEXT(vaobj, index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexArrayIntegervEXT( GLuint vaobj, GLenum pname, GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexArrayIntegervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexArrayIntegervEXT(vaobj, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexArrayPointervEXT( GLuint vaobj, GLenum pname, GLvoid * * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexArrayPointervEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexArrayPointervEXT(vaobj, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexArrayIntegeri_vEXT( GLuint vaobj, GLuint index, GLenum pname, GLint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexArrayIntegeri_vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexArrayPointeri_vEXT( GLuint vaobj, GLuint index, GLenum pname, GLvoid * * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexArrayPointeri_vEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMultisamplefvNV( GLenum pname, GLuint index, GLfloat * val ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMultisamplefvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMultisamplefvNV(pname, index, val);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (val) {
        size_t _cGLfloat = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((val)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glSampleMaskIndexedNV( GLuint index, GLbitfield mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleMaskIndexedNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleMaskIndexedNV(index, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexRenderbufferNV( GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexRenderbufferNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexRenderbufferNV(target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindTransformFeedbackNV( GLenum target, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindTransformFeedbackNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindTransformFeedbackNV(target, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteTransformFeedbacksNV( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteTransformFeedbacksNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint161 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint161);
        for (size_t _iCPGLuint161 = 0; _iCPGLuint161 < _cCPGLuint161; ++_iCPGLuint161) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint161]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteTransformFeedbacksNV(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenTransformFeedbacksNV( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenTransformFeedbacksNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenTransformFeedbacksNV(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint16 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint16);
        for (size_t _iPGLuint16 = 0; _iPGLuint16 < _cPGLuint16; ++_iPGLuint16) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint16]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsTransformFeedbackNV( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsTransformFeedbackNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsTransformFeedbackNV(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glPauseTransformFeedbackNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPauseTransformFeedbackNV_sig);
    trace::localWriter.endEnter();
    _glPauseTransformFeedbackNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResumeTransformFeedbackNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResumeTransformFeedbackNV_sig);
    trace::localWriter.endEnter();
    _glResumeTransformFeedbackNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTransformFeedbackNV( GLenum mode, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTransformFeedbackNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTransformFeedbackNV(mode, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorGroupsAMD( GLint * numGroups, GLsizei groupsSize, GLuint * groups ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorGroupsAMD_sig);
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(groupsSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (numGroups) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*numGroups);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (groups) {
        size_t _cGLuint = groupsSize > 0 ? groupsSize : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((groups)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorCountersAMD( GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorCountersAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(counterSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (numCounters) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*numCounters);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (maxActiveCounters) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*maxActiveCounters);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (counters) {
        size_t _cGLuint = counterSize > 0 ? counterSize : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((counters)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorGroupStringAMD( GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorGroupStringAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(groupString), ((length) ? *(length) : strlen(groupString)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorCounterStringAMD( GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorCounterStringAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(counter);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(counterString), ((length) ? *(length) : strlen(counterString)));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorCounterInfoAMD( GLuint group, GLuint counter, GLenum pname, GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorCounterInfoAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(counter);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorCounterInfoAMD(group, counter, pname, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    _write__GLvoid3(pname, data);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenPerfMonitorsAMD( GLsizei n, GLuint * monitors ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenPerfMonitorsAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenPerfMonitorsAMD(n, monitors);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (monitors) {
        size_t _cGLuint = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((monitors)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeletePerfMonitorsAMD( GLsizei n, GLuint * monitors ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeletePerfMonitorsAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (monitors) {
        size_t _cGLuint = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((monitors)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeletePerfMonitorsAMD(n, monitors);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSelectPerfMonitorCountersAMD( GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSelectPerfMonitorCountersAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(monitor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, enable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(numCounters);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (counterList) {
        size_t _cGLuint = numCounters > 0 ? numCounters : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((counterList)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBeginPerfMonitorAMD( GLuint monitor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginPerfMonitorAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(monitor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginPerfMonitorAMD(monitor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndPerfMonitorAMD( GLuint monitor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndPerfMonitorAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(monitor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndPerfMonitorAMD(monitor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetPerfMonitorCounterDataAMD( GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetPerfMonitorCounterDataAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(monitor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(dataSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (data) {
        size_t _cGLuint = dataSize > 0 ? dataSize : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((data)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (bytesWritten) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*bytesWritten);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTessellationFactorAMD( GLfloat factor ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTessellationFactorAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(factor);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTessellationFactorAMD(factor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTessellationModeAMD( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTessellationModeAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTessellationModeAMD(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProvokingVertexEXT( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProvokingVertexEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProvokingVertexEXT(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncIndexedAMD( GLuint buf, GLenum src, GLenum dst ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncIndexedAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dst);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncIndexedAMD(buf, src, dst);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparateIndexedAMD( GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparateIndexedAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationIndexedAMD( GLuint buf, GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationIndexedAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationIndexedAMD(buf, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparateIndexedAMD( GLuint buf, GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparateIndexedAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureRangeAPPLE( GLenum target, GLsizei length, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureRangeAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(pointer, length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureRangeAPPLE(target, length, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterPointervAPPLE( GLenum target, GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterPointervAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterPointervAPPLE(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glEnableVertexAttribAPPLE( GLuint index, GLenum pname ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEnableVertexAttribAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEnableVertexAttribAPPLE(index, pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDisableVertexAttribAPPLE( GLuint index, GLenum pname ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDisableVertexAttribAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDisableVertexAttribAPPLE(index, pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsVertexAttribEnabledAPPLE( GLuint index, GLenum pname ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsVertexAttribEnabledAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsVertexAttribEnabledAPPLE(index, pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMapVertexAttrib1dAPPLE( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapVertexAttrib1dAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(order);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapVertexAttrib1fAPPLE( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapVertexAttrib1fAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(order);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapVertexAttrib2dAPPLE( GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapVertexAttrib2dAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeDouble(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeDouble(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMapVertexAttrib2fAPPLE( GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMapVertexAttrib2fAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(u1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(u2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(ustride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(uorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(v1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(v2);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(vstride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(vorder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writePointer((uintptr_t)points);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLenum glObjectPurgeableAPPLE( GLenum objectType, GLuint name, GLenum option ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glObjectPurgeableAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, objectType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, option);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glObjectPurgeableAPPLE(objectType, name, option);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLenum glObjectUnpurgeableAPPLE( GLenum objectType, GLuint name, GLenum option ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glObjectUnpurgeableAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, objectType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, option);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glObjectUnpurgeableAPPLE(objectType, name, option);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetObjectParameterivAPPLE( GLenum objectType, GLuint name, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectParameterivAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, objectType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectParameterivAPPLE(objectType, name, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glBeginVideoCaptureNV( GLuint video_capture_slot ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginVideoCaptureNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginVideoCaptureNV(video_capture_slot);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVideoCaptureStreamBufferNV( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVideoCaptureStreamBufferNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, frame_region);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVideoCaptureStreamTextureNV( GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVideoCaptureStreamTextureNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, frame_region);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndVideoCaptureNV( GLuint video_capture_slot ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndVideoCaptureNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndVideoCaptureNV(video_capture_slot);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVideoCaptureivNV( GLuint video_capture_slot, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoCaptureivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoCaptureivNV(video_capture_slot, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideoCaptureStreamivNV( GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoCaptureStreamivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideoCaptureStreamfvNV( GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoCaptureStreamfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVideoCaptureStreamdvNV( GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVideoCaptureStreamdvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glVideoCaptureNV( GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glVideoCaptureNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glVideoCaptureNV(video_capture_slot, sequence_num, capture_time);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (sequence_num) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*sequence_num);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (capture_time) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*capture_time);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glVideoCaptureStreamParameterivNV( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVideoCaptureStreamParameterivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLint128 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint128);
        for (size_t _iCGLint128 = 0; _iCGLint128 < _cCGLint128; ++_iCGLint128) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint128]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVideoCaptureStreamParameterfvNV( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVideoCaptureStreamParameterfvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLfloat234 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat234);
        for (size_t _iCGLfloat234 = 0; _iCGLfloat234 < _cCGLfloat234; ++_iCGLfloat234) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat234]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVideoCaptureStreamParameterdvNV( GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVideoCaptureStreamParameterdvNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(stream);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cCGLdouble131 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLdouble131);
        for (size_t _iCGLdouble131 = 0; _iCGLdouble131 < _cCGLdouble131; ++_iCGLdouble131) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iCGLdouble131]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyImageSubDataNV( GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyImageSubDataNV_sig);
    trace::localWriter.beginArg(0);
    _write__GLuint52(srcTarget, srcName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(srcY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(srcZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    _write__GLuint53(dstTarget, dstName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(dstLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(dstX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeSInt(dstY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(dstZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(14);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUseShaderProgramEXT( GLenum type, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUseShaderProgramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUseShaderProgramEXT(type, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveProgramEXT( GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveProgramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveProgramEXT(program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glCreateShaderProgramEXT( GLenum type, const GLchar * string ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateShaderProgramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(string));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCreateShaderProgramEXT(type, string);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMakeBufferResidentNV( GLenum target, GLenum access ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeBufferResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeBufferResidentNV(target, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMakeBufferNonResidentNV( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeBufferNonResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeBufferNonResidentNV(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsBufferResidentNV( GLenum target ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsBufferResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsBufferResidentNV(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMakeNamedBufferResidentNV( GLuint buffer, GLenum access ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeNamedBufferResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeNamedBufferResidentNV(buffer, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMakeNamedBufferNonResidentNV( GLuint buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeNamedBufferNonResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeNamedBufferNonResidentNV(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsNamedBufferResidentNV( GLuint buffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsNamedBufferResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsNamedBufferResidentNV(buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetBufferParameterui64vNV( GLenum target, GLenum pname, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferParameterui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferParameterui64vNV(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetNamedBufferParameterui64vNV( GLuint buffer, GLenum pname, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetNamedBufferParameterui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetNamedBufferParameterui64vNV(buffer, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetIntegerui64vNV( GLenum value, GLuint64EXT * result ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetIntegerui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetIntegerui64vNV(value, result);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (result) {
        size_t _cGLuint64EXT = _gl_param_size(value) > 0 ? _gl_param_size(value) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((result)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glUniformui64NV( GLint location, GLuint64EXT value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformui64NV(location, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformui64vNV( GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint64EXT = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT);
        for (size_t _iCGLuint64EXT = 0; _iCGLuint64EXT < _cCGLuint64EXT; ++_iCGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetUniformui64vNV( GLuint program, GLint location, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformui64vNV(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramUniformui64NV( GLuint program, GLint location, GLuint64EXT value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformui64NV(program, location, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint64EXT1 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT1);
        for (size_t _iCGLuint64EXT1 = 0; _iCGLuint64EXT1 < _cCGLuint64EXT1; ++_iCGLuint64EXT1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformui64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBufferAddressRangeNV( GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBufferAddressRangeNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(address);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBufferAddressRangeNV(pname, index, address, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexFormatNV( GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexFormatNV(size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormalFormatNV( GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormalFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormalFormatNV(type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColorFormatNV( GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColorFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColorFormatNV(size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glIndexFormatNV( GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glIndexFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glIndexFormatNV(type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexCoordFormatNV( GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexCoordFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexCoordFormatNV(size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEdgeFlagFormatNV( GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEdgeFlagFormatNV(stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSecondaryColorFormatNV( GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSecondaryColorFormatNV(size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogCoordFormatNV( GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogCoordFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogCoordFormatNV(type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribFormatNV( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribFormatNV(index, size, type, normalized, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribIFormatNV( GLuint index, GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribIFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribIFormatNV(index, size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetIntegerui64i_vNV( GLenum value, GLuint index, GLuint64EXT * result ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetIntegerui64i_vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetIntegerui64i_vNV(value, index, result);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (result) {
        size_t _cGLuint64EXT = _gl_param_size(value) > 0 ? _gl_param_size(value) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((result)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glTextureBarrierNV(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureBarrierNV_sig);
    trace::localWriter.endEnter();
    _glTextureBarrierNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindImageTextureEXT( GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindImageTextureEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, layered);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(format);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMemoryBarrierEXT( GLbitfield barriers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMemoryBarrierEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield7_sig, barriers);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMemoryBarrierEXT(barriers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1dEXT( GLuint index, GLdouble x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1dEXT(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2dEXT( GLuint index, GLdouble x, GLdouble y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2dEXT(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3dEXT( GLuint index, GLdouble x, GLdouble y, GLdouble z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3dEXT(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4dEXT( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4dEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeDouble(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeDouble(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeDouble(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeDouble(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4dEXT(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1dvEXT( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeDouble(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1dvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2dvEXT( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble133 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLdouble133);
        for (size_t _iCGLdouble133 = 0; _iCGLdouble133 < _cCGLdouble133; ++_iCGLdouble133) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble133]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2dvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3dvEXT( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble134 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLdouble134);
        for (size_t _iCGLdouble134 = 0; _iCGLdouble134 < _cCGLdouble134; ++_iCGLdouble134) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble134]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3dvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4dvEXT( GLuint index, const GLdouble * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4dvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLdouble135 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLdouble135);
        for (size_t _iCGLdouble135 = 0; _iCGLdouble135 < _cCGLdouble135; ++_iCGLdouble135) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((v)[_iCGLdouble135]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4dvEXT(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribLPointerEXT( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    GLint _array_buffer = 0;
    _glGetIntegerv(GL_ARRAY_BUFFER_BINDING, &_array_buffer);
    if (!_array_buffer) {
        gltrace::Context *ctx = gltrace::getContext();
        ctx->user_arrays = true;
    _glVertexAttribLPointerEXT(index, size, type, stride, pointer);
        return;
    }
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribLPointerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeBlob(pointer, size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribLPointerEXT(index, size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribLdvEXT( GLuint index, GLenum pname, GLdouble * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribLdvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribLdvEXT(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLdouble = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLdouble);
        for (size_t _iGLdouble = 0; _iGLdouble < _cGLdouble; ++_iGLdouble) {
            trace::localWriter.beginElement();
    trace::localWriter.writeDouble((params)[_iGLdouble]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexArrayVertexAttribLOffsetEXT( GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexArrayVertexAttribLOffsetEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(vaobj);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(offset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramSubroutineParametersuivNV( GLenum target, GLsizei count, const GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramSubroutineParametersuivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLuint90 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint90);
        for (size_t _iCGLuint90 = 0; _iCGLuint90 < _cCGLuint90; ++_iCGLuint90) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iCGLuint90]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramSubroutineParametersuivNV(target, count, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramSubroutineParameteruivNV( GLenum target, GLuint index, GLuint * param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramSubroutineParameteruivNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramSubroutineParameteruivNV(target, index, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glUniform1i64NV( GLint location, GLint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1i64NV(location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2i64NV( GLint location, GLint64EXT x, GLint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2i64NV(location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3i64NV( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3i64NV(location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4i64NV( GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4i64NV(location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1i64vNV( GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint64EXT = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint64EXT);
        for (size_t _iCGLint64EXT = 0; _iCGLint64EXT < _cCGLint64EXT; ++_iCGLint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1i64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2i64vNV( GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint64EXT1 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT1);
        for (size_t _iCGLint64EXT1 = 0; _iCGLint64EXT1 < _cCGLint64EXT1; ++_iCGLint64EXT1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2i64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3i64vNV( GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint64EXT2 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT2);
        for (size_t _iCGLint64EXT2 = 0; _iCGLint64EXT2 < _cCGLint64EXT2; ++_iCGLint64EXT2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3i64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4i64vNV( GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLint64EXT3 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT3);
        for (size_t _iCGLint64EXT3 = 0; _iCGLint64EXT3 < _cCGLint64EXT3; ++_iCGLint64EXT3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4i64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1ui64NV( GLint location, GLuint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1ui64NV(location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2ui64NV( GLint location, GLuint64EXT x, GLuint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2ui64NV(location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3ui64NV( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3ui64NV(location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4ui64NV( GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4ui64NV(location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform1ui64vNV( GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform1ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint64EXT2 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT2);
        for (size_t _iCGLuint64EXT2 = 0; _iCGLuint64EXT2 < _cCGLuint64EXT2; ++_iCGLuint64EXT2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform1ui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform2ui64vNV( GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform2ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint64EXT3 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT3);
        for (size_t _iCGLuint64EXT3 = 0; _iCGLuint64EXT3 < _cCGLuint64EXT3; ++_iCGLuint64EXT3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform2ui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform3ui64vNV( GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform3ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint64EXT4 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT4);
        for (size_t _iCGLuint64EXT4 = 0; _iCGLuint64EXT4 < _cCGLuint64EXT4; ++_iCGLuint64EXT4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform3ui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniform4ui64vNV( GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniform4ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint64EXT5 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT5);
        for (size_t _iCGLuint64EXT5 = 0; _iCGLuint64EXT5 < _cCGLuint64EXT5; ++_iCGLuint64EXT5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniform4ui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetUniformi64vNV( GLuint program, GLint location, GLint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetUniformi64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetUniformi64vNV(program, location, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1i64NV( GLuint program, GLint location, GLint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1i64NV(program, location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2i64NV( GLuint program, GLint location, GLint64EXT x, GLint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2i64NV(program, location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3i64NV( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3i64NV(program, location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4i64NV( GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4i64NV(program, location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1i64vNV( GLuint program, GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint64EXT4 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLint64EXT4);
        for (size_t _iCGLint64EXT4 = 0; _iCGLint64EXT4 < _cCGLint64EXT4; ++_iCGLint64EXT4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1i64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2i64vNV( GLuint program, GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint64EXT5 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT5);
        for (size_t _iCGLint64EXT5 = 0; _iCGLint64EXT5 < _cCGLint64EXT5; ++_iCGLint64EXT5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2i64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3i64vNV( GLuint program, GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint64EXT6 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT6);
        for (size_t _iCGLint64EXT6 = 0; _iCGLint64EXT6 < _cCGLint64EXT6; ++_iCGLint64EXT6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3i64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4i64vNV( GLuint program, GLint location, GLsizei count, const GLint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLint64EXT7 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT7);
        for (size_t _iCGLint64EXT7 = 0; _iCGLint64EXT7 < _cCGLint64EXT7; ++_iCGLint64EXT7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((value)[_iCGLint64EXT7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4i64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1ui64NV( GLuint program, GLint location, GLuint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1ui64NV(program, location, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2ui64NV( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2ui64NV(program, location, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3ui64NV( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3ui64NV(program, location, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4ui64NV( GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4ui64NV(program, location, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform1ui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform1ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint64EXT6 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT6);
        for (size_t _iCGLuint64EXT6 = 0; _iCGLuint64EXT6 < _cCGLuint64EXT6; ++_iCGLuint64EXT6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform1ui64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform2ui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform2ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint64EXT7 = count*2 > 0 ? count*2 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT7);
        for (size_t _iCGLuint64EXT7 = 0; _iCGLuint64EXT7 < _cCGLuint64EXT7; ++_iCGLuint64EXT7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform2ui64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform3ui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform3ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint64EXT8 = count*3 > 0 ? count*3 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT8);
        for (size_t _iCGLuint64EXT8 = 0; _iCGLuint64EXT8 < _cCGLuint64EXT8; ++_iCGLuint64EXT8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform3ui64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniform4ui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64EXT * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniform4ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (value) {
        size_t _cCGLuint64EXT9 = count*4 > 0 ? count*4 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT9);
        for (size_t _iCGLuint64EXT9 = 0; _iCGLuint64EXT9 < _cCGLuint64EXT9; ++_iCGLuint64EXT9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint64EXT9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniform4ui64vNV(program, location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1i64NV( GLuint index, GLint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1i64NV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2i64NV( GLuint index, GLint64EXT x, GLint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2i64NV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3i64NV( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3i64NV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4i64NV( GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4i64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4i64NV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1i64vNV( GLuint index, const GLint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1i64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2i64vNV( GLuint index, const GLint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint64EXT9 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT9);
        for (size_t _iCGLint64EXT9 = 0; _iCGLint64EXT9 < _cCGLint64EXT9; ++_iCGLint64EXT9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint64EXT9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2i64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3i64vNV( GLuint index, const GLint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint64EXT10 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT10);
        for (size_t _iCGLint64EXT10 = 0; _iCGLint64EXT10 < _cCGLint64EXT10; ++_iCGLint64EXT10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint64EXT10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3i64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4i64vNV( GLuint index, const GLint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4i64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLint64EXT11 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint64EXT11);
        for (size_t _iCGLint64EXT11 = 0; _iCGLint64EXT11 < _cCGLint64EXT11; ++_iCGLint64EXT11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((v)[_iCGLint64EXT11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4i64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1ui64NV( GLuint index, GLuint64EXT x ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1ui64NV(index, x);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2ui64NV( GLuint index, GLuint64EXT x, GLuint64EXT y ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2ui64NV(index, x, y);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3ui64NV( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3ui64NV(index, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4ui64NV( GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4ui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(w);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4ui64NV(index, x, y, z, w);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL1ui64vNV( GLuint index, const GLuint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL1ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*v);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL1ui64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL2ui64vNV( GLuint index, const GLuint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL2ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint64EXT11 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT11);
        for (size_t _iCGLuint64EXT11 = 0; _iCGLuint64EXT11 < _cCGLuint64EXT11; ++_iCGLuint64EXT11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint64EXT11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL2ui64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL3ui64vNV( GLuint index, const GLuint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL3ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint64EXT12 = 3 > 0 ? 3 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT12);
        for (size_t _iCGLuint64EXT12 = 0; _iCGLuint64EXT12 < _cCGLuint64EXT12; ++_iCGLuint64EXT12) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint64EXT12]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL3ui64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glVertexAttribL4ui64vNV( GLuint index, const GLuint64EXT * v ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribL4ui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (v) {
        size_t _cCGLuint64EXT13 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLuint64EXT13);
        for (size_t _iCGLuint64EXT13 = 0; _iCGLuint64EXT13 < _cCGLuint64EXT13; ++_iCGLuint64EXT13) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((v)[_iCGLuint64EXT13]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribL4ui64vNV(index, v);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribLi64vNV( GLuint index, GLenum pname, GLint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribLi64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribLi64vNV(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint64EXT);
        for (size_t _iGLint64EXT = 0; _iGLint64EXT < _cGLint64EXT; ++_iGLint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetVertexAttribLui64vNV( GLuint index, GLenum pname, GLuint64EXT * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetVertexAttribLui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetVertexAttribLui64vNV(index, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint64EXT = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint64EXT);
        for (size_t _iGLuint64EXT = 0; _iGLuint64EXT < _cGLuint64EXT; ++_iGLuint64EXT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint64EXT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glVertexAttribLFormatNV( GLuint index, GLint size, GLenum type, GLsizei stride ) {
    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribLFormatNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glVertexAttribLFormatNV(index, size, type, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenNamesAMD( GLenum identifier, GLuint num, GLuint * names ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenNamesAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, identifier);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(num);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenNamesAMD(identifier, num, names);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (names) {
        size_t _cGLuint = num > 0 ? num : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((names)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteNamesAMD( GLenum identifier, GLuint num, const GLuint * names ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteNamesAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, identifier);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(num);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (names) {
        size_t _cCGLuint91 = num > 0 ? num : 0;
        trace::localWriter.beginArray(_cCGLuint91);
        for (size_t _iCGLuint91 = 0; _iCGLuint91 < _cCGLuint91; ++_iCGLuint91) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((names)[_iCGLuint91]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteNamesAMD(identifier, num, names);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsNameAMD( GLenum identifier, GLuint name ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsNameAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, identifier);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsNameAMD(identifier, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDebugMessageEnableAMD( GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageEnableAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, category);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (ids) {
        size_t _cCGLuint92 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint92);
        for (size_t _iCGLuint92 = 0; _iCGLuint92 < _cCGLuint92; ++_iCGLuint92) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCGLuint92]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, enabled);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageEnableAMD(category, severity, count, ids, enabled);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageInsertAMD( GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageInsertAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, category);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, severity);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(buf), ((length) >= 0 ? (length) : strlen(buf)));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageInsertAMD(category, severity, id, length, buf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDebugMessageCallbackAMD( GLDEBUGPROCAMD callback, GLvoid * userParam ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDebugMessageCallbackAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)callback);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)userParam);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDebugMessageCallbackAMD(callback, userParam);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glGetDebugMessageLogAMD( GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetDebugMessageLogAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufsize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (categories) {
        size_t _cGLenum = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLenum);
        for (size_t _iGLenum = 0; _iGLenum < _cGLenum; ++_iGLenum) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (categories)[_iGLenum]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (severities) {
        size_t _cGLuint = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((severities)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (ids) {
        size_t _cGLuint = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (lengths) {
        size_t _cGLsizei = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cGLsizei);
        for (size_t _iGLsizei = 0; _iGLsizei < _cGLsizei; ++_iGLsizei) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((lengths)[_iGLsizei]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeString(reinterpret_cast<const char *>(message), _glGetDebugMessageLog_length(message, lengths, _result));
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glTexImage2DMultisampleCoverageNV( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage2DMultisampleCoverageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexImage3DMultisampleCoverageNV( GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage3DMultisampleCoverageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage2DMultisampleNV( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage2DMultisampleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage3DMultisampleNV( GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage3DMultisampleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage2DMultisampleCoverageNV( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage2DMultisampleCoverageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureImage3DMultisampleCoverageNV( GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureImage3DMultisampleCoverageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(coverageSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(colorSamples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, fixedSampleLocations);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSetMultisamplefvAMD( GLenum pname, GLuint index, const GLfloat * val ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSetMultisamplefvAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (val) {
        size_t _cCGLfloat235 = 2 > 0 ? 2 : 0;
        trace::localWriter.beginArray(_cCGLfloat235);
        for (size_t _iCGLfloat235 = 0; _iCGLfloat235 < _cCGLfloat235; ++_iCGLfloat235) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((val)[_iCGLfloat235]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSetMultisamplefvAMD(pname, index, val);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLsync glImportSyncEXT( GLenum external_sync_type, GLintptr external_sync, GLbitfield flags ) {
    GLsync _result;
    unsigned _call = trace::localWriter.beginEnter(&_glImportSyncEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, external_sync_type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(external_sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glImportSyncEXT(external_sync_type, external_sync, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMultiDrawArraysIndirectAMD( GLenum mode, const GLvoid * indirect, GLsizei primcount, GLsizei stride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawArraysIndirectAMD_count(indirect, primcount, stride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawArraysIndirectAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiDrawElementsIndirectAMD( GLenum mode, GLenum type, const GLvoid * indirect, GLsizei primcount, GLsizei stride ) {
    if (_need_user_arrays()) {
        GLuint _count = _glMultiDrawElementsIndirectAMD_count(type, indirect, primcount, stride);
        _trace_user_arrays(_count);
    }
    unsigned _call = trace::localWriter.beginEnter(&_glMultiDrawElementsIndirectAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum1_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)indirect);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(primcount);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glStencilOpValueAMD( GLenum face, GLuint value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glStencilOpValueAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glStencilOpValueAMD(face, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint64 glGetTextureHandleNV( GLuint texture ) {
    GLuint64 _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureHandleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetTextureHandleNV(texture);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint64 glGetTextureSamplerHandleNV( GLuint texture, GLuint sampler ) {
    GLuint64 _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetTextureSamplerHandleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetTextureSamplerHandleNV(texture, sampler);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMakeTextureHandleResidentNV( GLuint64 handle ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeTextureHandleResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeTextureHandleResidentNV(handle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMakeTextureHandleNonResidentNV( GLuint64 handle ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeTextureHandleNonResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeTextureHandleNonResidentNV(handle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint64 glGetImageHandleNV( GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format ) {
    GLuint64 _result;
    unsigned _call = trace::localWriter.beginEnter(&_glGetImageHandleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, layered);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(layer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glGetImageHandleNV(texture, level, layered, layer, format);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glMakeImageHandleResidentNV( GLuint64 handle, GLenum access ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeImageHandleResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeImageHandleResidentNV(handle, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMakeImageHandleNonResidentNV( GLuint64 handle ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMakeImageHandleNonResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMakeImageHandleNonResidentNV(handle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformHandleui64NV( GLint location, GLuint64 value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformHandleui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformHandleui64NV(location, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glUniformHandleui64vNV( GLint location, GLsizei count, const GLuint64 * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUniformHandleui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (value) {
        size_t _cCGLuint641 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint641);
        for (size_t _iCGLuint641 = 0; _iCGLuint641 < _cCGLuint641; ++_iCGLuint641) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((value)[_iCGLuint641]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUniformHandleui64vNV(location, count, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformHandleui64NV( GLuint program, GLint location, GLuint64 value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformHandleui64NV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformHandleui64NV(program, location, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glProgramUniformHandleui64vNV( GLuint program, GLint location, GLsizei count, const GLuint64 * values ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramUniformHandleui64vNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(location);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (values) {
        size_t _cCGLuint642 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCGLuint642);
        for (size_t _iCGLuint642 = 0; _iCGLuint642 < _cCGLuint642; ++_iCGLuint642) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((values)[_iCGLuint642]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramUniformHandleui64vNV(program, location, count, values);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsTextureHandleResidentNV( GLuint64 handle ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsTextureHandleResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsTextureHandleResidentNV(handle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glIsImageHandleResidentNV( GLuint64 handle ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsImageHandleResidentNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(handle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsImageHandleResidentNV(handle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginConditionalRenderNVX( GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginConditionalRenderNVX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginConditionalRenderNVX(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndConditionalRenderNVX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndConditionalRenderNVX_sig);
    trace::localWriter.endEnter();
    _glEndConditionalRenderNVX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorageSparseAMD( GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorageSparseAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(layers);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeUInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTextureStorageSparseAMD( GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTextureStorageSparseAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(layers);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeUInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTextureNV( GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1 ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTextureNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(sampler);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(x0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(y0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(x1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(y1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeFloat(s0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeFloat(t0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeFloat(s1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeFloat(t1);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glNewBufferRegion( GLenum type ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glNewBufferRegion_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glNewBufferRegion(type);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glDeleteBufferRegion( GLuint region ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteBufferRegion_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(region);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteBufferRegion(region);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReadBufferRegion( GLuint region, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadBufferRegion_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(region);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadBufferRegion(region, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawBufferRegion( GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBufferRegion_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(region);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(xDest);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(yDest);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBufferRegion(region, x, y, width, height, xDest, yDest);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glBufferRegionEnabled(  ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glBufferRegionEnabled_sig);
    trace::localWriter.endEnter();
    _result = _glBufferRegionEnabled();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glAddSwapHintRectWIN( GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAddSwapHintRectWIN_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAddSwapHintRectWIN(x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFrustumf( GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrustumf_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFrustumf(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glOrthof( GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glOrthof_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glOrthof(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClipPlanef( GLenum plane, const GLfloat * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClipPlanef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cCGLfloat236 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat236);
        for (size_t _iCGLfloat236 = 0; _iCGLfloat236 < _cCGLfloat236; ++_iCGLfloat236) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((equation)[_iCGLfloat236]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClipPlanef(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetClipPlanef( GLenum plane, GLfloat * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetClipPlanef_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetClipPlanef(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cGLfloat = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((equation)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glAlphaFuncx( GLenum func, GLclampx ref ) {
    unsigned _call = trace::localWriter.beginEnter(&_glAlphaFuncx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, func);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ref);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glAlphaFuncx(func, ref);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearColorx( GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearColorx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearColorx(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClearDepthx( GLclampx depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClearDepthx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClearDepthx(depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glColor4x( GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glColor4x_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(red);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(green);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(blue);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(alpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glColor4x(red, green, blue, alpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDepthRangex( GLclampx zNear, GLclampx zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDepthRangex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDepthRangex(zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogx( GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogx(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFogxv( GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFogxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed);
        for (size_t _iCGLfixed = 0; _iCGLfixed < _cCGLfixed; ++_iCGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFogxv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFrustumx( GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFrustumx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFrustumx(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModelx( GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModelx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModelx(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightModelxv( GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightModelxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfixed1 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed1);
        for (size_t _iCGLfixed1 = 0; _iCGLfixed1 < _cCGLfixed1; ++_iCGLfixed1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightModelxv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightx( GLenum light, GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightx(light, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLightxv( GLenum light, GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLightxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfixed2 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed2);
        for (size_t _iCGLfixed2 = 0; _iCGLfixed2 < _cCGLfixed2; ++_iCGLfixed2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLightxv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLineWidthx( GLfixed width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLineWidthx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLineWidthx(width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadMatrixx( const GLfixed * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadMatrixx_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfixed3 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfixed3);
        for (size_t _iCGLfixed3 = 0; _iCGLfixed3 < _cCGLfixed3; ++_iCGLfixed3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((m)[_iCGLfixed3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLoadMatrixx(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMaterialx( GLenum face, GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMaterialx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMaterialx(face, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMaterialxv( GLenum face, GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMaterialxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfixed4 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed4);
        for (size_t _iCGLfixed4 = 0; _iCGLfixed4 < _cCGLfixed4; ++_iCGLfixed4) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed4]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMaterialxv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultMatrixx( const GLfixed * m ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultMatrixx_sig);
    trace::localWriter.beginArg(0);
    if (m) {
        size_t _cCGLfixed5 = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cCGLfixed5);
        for (size_t _iCGLfixed5 = 0; _iCGLfixed5 < _cCGLfixed5; ++_iCGLfixed5) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((m)[_iCGLfixed5]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultMatrixx(m);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMultiTexCoord4x( GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMultiTexCoord4x_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(s);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(t);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(r);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(q);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMultiTexCoord4x(target, s, t, r, q);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glNormal3x( GLfixed nx, GLfixed ny, GLfixed nz ) {
    unsigned _call = trace::localWriter.beginEnter(&_glNormal3x_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(nx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(ny);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(nz);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glNormal3x(nx, ny, nz);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glOrthox( GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar ) {
    unsigned _call = trace::localWriter.beginEnter(&_glOrthox_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(left);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(right);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bottom);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(top);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zNear);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zFar);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glOrthox(left, right, bottom, top, zNear, zFar);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointSizex( GLfixed size ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointSizex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointSizex(size);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPolygonOffsetx( GLfixed factor, GLfixed units ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPolygonOffsetx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(factor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(units);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPolygonOffsetx(factor, units);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRotatex( GLfixed angle, GLfixed x, GLfixed y, GLfixed z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRotatex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(angle);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRotatex(angle, x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glSampleCoveragex( GLclampx value, GLboolean invert ) {
    unsigned _call = trace::localWriter.beginEnter(&_glSampleCoveragex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, invert);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glSampleCoveragex(value, invert);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glScalex( GLfixed x, GLfixed y, GLfixed z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glScalex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glScalex(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnvx( GLenum target, GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnvx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnvx(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexEnvxv( GLenum target, GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexEnvxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfixed6 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed6);
        for (size_t _iCGLfixed6 = 0; _iCGLfixed6 < _cCGLfixed6; ++_iCGLfixed6) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed6]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexEnvxv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterx( GLenum target, GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterx(target, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTranslatex( GLfixed x, GLfixed y, GLfixed z ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTranslatex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTranslatex(x, y, z);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glClipPlanex( GLenum plane, const GLfixed * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glClipPlanex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cCGLfixed7 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfixed7);
        for (size_t _iCGLfixed7 = 0; _iCGLfixed7 < _cCGLfixed7; ++_iCGLfixed7) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((equation)[_iCGLfixed7]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glClipPlanex(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetClipPlanex( GLenum plane, GLfixed * equation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetClipPlanex_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, plane);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetClipPlanex(plane, equation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (equation) {
        size_t _cGLfixed = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((equation)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetFixedv( GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFixedv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFixedv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetLightxv( GLenum light, GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetLightxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, light);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetLightxv(light, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetMaterialxv( GLenum face, GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetMaterialxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetMaterialxv(face, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexEnvxv( GLenum target, GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexEnvxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexEnvxv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexParameterxv( GLenum target, GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexParameterxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexParameterxv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glPointParameterx( GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterx_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterx(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointParameterxv( GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointParameterxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (params) {
        size_t _cCGLfixed8 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed8);
        for (size_t _iCGLfixed8 = 0; _iCGLfixed8 < _cCGLfixed8; ++_iCGLfixed8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointParameterxv(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexParameterxv( GLenum target, GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexParameterxv_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfixed9 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed9);
        for (size_t _iCGLfixed9 = 0; _iCGLfixed9 < _cCGLfixed9; ++_iCGLfixed9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexParameterxv(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationSeparateOES( GLenum modeRGB, GLenum modeAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationSeparateOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, modeAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationSeparateOES(modeRGB, modeAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendFuncSeparateOES( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendFuncSeparateOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorRGB);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, sfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dfactorAlpha);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendFuncSeparateOES(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlendEquationOES( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlendEquationOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlendEquationOES(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsRenderbufferOES( GLuint renderbuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsRenderbufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsRenderbufferOES(renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindRenderbufferOES( GLenum target, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindRenderbufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindRenderbufferOES(target, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteRenderbuffersOES( GLsizei n, const GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteRenderbuffersOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cCPGLuint92 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint92);
        for (size_t _iCPGLuint92 = 0; _iCPGLuint92 < _cCPGLuint92; ++_iCPGLuint92) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iCPGLuint92]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteRenderbuffersOES(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenRenderbuffersOES( GLsizei n, GLuint * renderbuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenRenderbuffersOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenRenderbuffersOES(n, renderbuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (renderbuffers) {
        size_t _cPGLuint9 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint9);
        for (size_t _iPGLuint9 = 0; _iPGLuint9 < _cPGLuint9; ++_iPGLuint9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((renderbuffers)[_iPGLuint9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageOES( GLenum target, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageOES(target, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetRenderbufferParameterivOES( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetRenderbufferParameterivOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetRenderbufferParameterivOES(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsFramebufferOES( GLuint framebuffer ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsFramebufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsFramebufferOES(framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindFramebufferOES( GLenum target, GLuint framebuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindFramebufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(framebuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindFramebufferOES(target, framebuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteFramebuffersOES( GLsizei n, const GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteFramebuffersOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cCPGLuint82 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint82);
        for (size_t _iCPGLuint82 = 0; _iCPGLuint82 < _cCPGLuint82; ++_iCPGLuint82) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iCPGLuint82]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteFramebuffersOES(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenFramebuffersOES( GLsizei n, GLuint * framebuffers ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenFramebuffersOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenFramebuffersOES(n, framebuffers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (framebuffers) {
        size_t _cPGLuint8 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint8);
        for (size_t _iPGLuint8 = 0; _iPGLuint8 < _cPGLuint8; ++_iPGLuint8) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((framebuffers)[_iPGLuint8]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLenum glCheckFramebufferStatusOES( GLenum target ) {
    GLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCheckFramebufferStatusOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCheckFramebufferStatusOES(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glFramebufferTexture2DOES( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture2DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferRenderbufferOES( GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferRenderbufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, renderbuffertarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(renderbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetFramebufferAttachmentParameterivOES( GLenum target, GLenum attachment, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetFramebufferAttachmentParameterivOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetFramebufferAttachmentParameterivOES(target, attachment, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGenerateMipmapOES( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenerateMipmapOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenerateMipmapOES(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCurrentPaletteMatrixOES( GLuint index ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCurrentPaletteMatrixOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCurrentPaletteMatrixOES(index);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLoadPaletteFromModelViewMatrixOES(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLoadPaletteFromModelViewMatrixOES_sig);
    trace::localWriter.endEnter();
    _glLoadPaletteFromModelViewMatrixOES();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glMatrixIndexPointerOES( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glMatrixIndexPointerOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glMatrixIndexPointerOES(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glWeightPointerOES( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glWeightPointerOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glWeightPointerOES(size, type, stride, pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPointSizePointerOES( GLenum type, GLsizei stride, const GLvoid * ptr ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPointSizePointerOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)ptr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPointSizePointerOES(type, stride, ptr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLbitfield glQueryMatrixxOES( GLfixed * mantissa, GLint * exponent ) {
    GLbitfield _result;
    unsigned _call = trace::localWriter.beginEnter(&_glQueryMatrixxOES_sig);
    trace::localWriter.beginArg(0);
    if (mantissa) {
        size_t _cGLfixed = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((mantissa)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (exponent) {
        size_t _cGLint = 16 > 0 ? 16 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((exponent)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glQueryMatrixxOES(mantissa, exponent);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glTexGenfOES( GLenum coord, GLenum pname, GLfloat param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenfOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeFloat(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenfOES(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenfvOES( GLenum coord, GLenum pname, const GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenfvOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfloat237 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfloat237);
        for (size_t _iCGLfloat237 = 0; _iCGLfloat237 < _cCGLfloat237; ++_iCGLfloat237) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iCGLfloat237]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenfvOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGeniOES( GLenum coord, GLenum pname, GLint param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGeniOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (is_symbolic_pname(pname) && is_symbolic_param(param)) {
    trace::localWriter.writeEnum(&_enumGLenum_sig, param);
    } else {
    trace::localWriter.writeSInt(param);
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGeniOES(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenivOES( GLenum coord, GLenum pname, const GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenivOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint129 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLint129);
        for (size_t _iCGLint129 = 0; _iCGLint129 < _cCGLint129; ++_iCGLint129) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint129]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenivOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenxOES( GLenum coord, GLenum pname, GLfixed param ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenxOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenxOES(coord, pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexGenxvOES( GLenum coord, GLenum pname, const GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexGenxvOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLfixed10 = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cCGLfixed10);
        for (size_t _iCGLfixed10 = 0; _iCGLfixed10 < _cCGLfixed10; ++_iCGLfixed10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLfixed10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexGenxvOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetTexGenfvOES( GLenum coord, GLenum pname, GLfloat * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGenfvOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGenfvOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfloat = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfloat);
        for (size_t _iGLfloat = 0; _iGLfloat < _cGLfloat; ++_iGLfloat) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((params)[_iGLfloat]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexGenivOES( GLenum coord, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGenivOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGenivOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetTexGenxvOES( GLenum coord, GLenum pname, GLfixed * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetTexGenxvOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, coord);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetTexGenxvOES(coord, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLfixed = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLfixed);
        for (size_t _iGLfixed = 0; _iGLfixed < _cGLfixed; ++_iGLfixed) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLfixed]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetBufferPointervOES( GLenum target, GLenum pname, GLvoid * * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetBufferPointervOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetBufferPointervOES(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*params);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLvoid * glMapBufferOES( GLenum target, GLenum access ) {
    GLvoid * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glMapBufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glMapBufferOES(target, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean glUnmapBufferOES( GLenum target ) {
    GLboolean _result;
    GLint access = 0;
    _glGetBufferParameteriv(target, GL_BUFFER_ACCESS_OES, &access);
    if (access == GL_WRITE_ONLY_OES) {
        GLvoid *map = NULL;
        _glGetBufferPointervOES(target, GL_BUFFER_MAP_POINTER_OES, &map);
        GLint size = 0;
        _glGetBufferParameteriv(target, GL_BUFFER_SIZE, &size);
        if (map && size > 0) {
        unsigned _call = trace::localWriter.beginEnter(&trace::memcpy_sig);
        trace::localWriter.beginArg(0);
        trace::localWriter.writePointer((uintptr_t)map);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(1);
        trace::localWriter.writeBlob(map, size);
        trace::localWriter.endArg();
        trace::localWriter.beginArg(2);
        trace::localWriter.writeUInt(size);
        trace::localWriter.endArg();
        trace::localWriter.endEnter();
        trace::localWriter.beginLeave(_call);
        trace::localWriter.endLeave();
    gltrace::Context *ctx = gltrace::getContext();
    if (ctx->needsShadowBuffers() && target == GL_ELEMENT_ARRAY_BUFFER) {
        GLint buffer_binding = 0;
        _glGetIntegerv(GL_ELEMENT_ARRAY_BUFFER_BINDING, &buffer_binding);
        if (buffer_binding > 0) {
            gltrace::Buffer & buf = ctx->buffers[buffer_binding];
            buf.bufferSubData(0, size, map);
        }
    }

        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_glUnmapBufferOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glUnmapBufferOES(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glTexImage3DOES( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexImage3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeBlob(pixels, _glTexImage3D_size(format, type, width, height, depth));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexSubImage3DOES( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexSubImage3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeBlob(pixels, _glTexSubImage3D_size(format, type, width, height, depth));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCopyTexSubImage3DOES( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCopyTexSubImage3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexImage3DOES( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexImage3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(border);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCompressedTexSubImage3DOES( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCompressedTexSubImage3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(xoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(yoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeSInt(imageSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeBlob(data, imageSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture3DOES( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture3DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(zoffset);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramBinaryOES( GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramBinaryOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (binaryFormat) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *binaryFormat);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)binary);
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glProgramBinaryOES( GLuint program, GLenum binaryFormat, const GLvoid * binary, GLsizei length ) {
    unsigned _call = trace::localWriter.beginEnter(&_glProgramBinaryOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, binaryFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeBlob(binary, length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glProgramBinaryOES(program, binaryFormat, binary, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexfOES( GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexfOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeFloat(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexfOES(x, y, z, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexfvOES( const GLfloat * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexfvOES_sig);
    trace::localWriter.beginArg(0);
    if (coords) {
        size_t _cCGLfloat238 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLfloat238);
        for (size_t _iCGLfloat238 = 0; _iCGLfloat238 < _cCGLfloat238; ++_iCGLfloat238) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((coords)[_iCGLfloat238]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexfvOES(coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexiOES( GLint x, GLint y, GLint z, GLint width, GLint height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexiOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexiOES(x, y, z, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexivOES( const GLint * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexivOES_sig);
    trace::localWriter.beginArg(0);
    if (coords) {
        size_t _cCGLint130 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLint130);
        for (size_t _iCGLint130 = 0; _iCGLint130 < _cCGLint130; ++_iCGLint130) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLint130]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexivOES(coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexsOES( GLshort x, GLshort y, GLshort z, GLshort width, GLshort height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexsOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(z);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexsOES(x, y, z, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawTexsvOES( const GLshort * coords ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawTexsvOES_sig);
    trace::localWriter.beginArg(0);
    if (coords) {
        size_t _cCGLshort62 = 4 > 0 ? 4 : 0;
        trace::localWriter.beginArray(_cCGLshort62);
        for (size_t _iCGLshort62 = 0; _iCGLshort62 < _cCGLshort62; ++_iCGLshort62) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((coords)[_iCGLshort62]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawTexsvOES(coords);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDiscardFramebufferEXT( GLenum target, GLsizei numAttachments, const GLenum * attachments ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDiscardFramebufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numAttachments);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (attachments) {
        size_t _cCGLenum9 = numAttachments > 0 ? numAttachments : 0;
        trace::localWriter.beginArray(_cCGLenum9);
        for (size_t _iCGLenum9 = 0; _iCGLenum9 < _cCGLenum9; ++_iCGLenum9) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (attachments)[_iCGLenum9]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDiscardFramebufferEXT(target, numAttachments, attachments);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBindVertexArrayOES( GLuint array ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindVertexArrayOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindVertexArrayOES(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteVertexArraysOES( GLsizei n, const GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteVertexArraysOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cCPGLuint112 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint112);
        for (size_t _iCPGLuint112 = 0; _iCPGLuint112 < _cCPGLuint112; ++_iCPGLuint112) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iCPGLuint112]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteVertexArraysOES(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenVertexArraysOES( GLsizei n, GLuint * arrays ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenVertexArraysOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenVertexArraysOES(n, arrays);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (arrays) {
        size_t _cPGLuint11 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint11);
        for (size_t _iPGLuint11 = 0; _iPGLuint11 < _cPGLuint11; ++_iPGLuint11) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((arrays)[_iPGLuint11]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsVertexArrayOES( GLuint array ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsVertexArrayOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(array);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsVertexArrayOES(array);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glCoverageMaskNV( GLboolean mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverageMaskNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverageMaskNV(mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glCoverageOperationNV( GLenum operation ) {
    unsigned _call = trace::localWriter.beginEnter(&_glCoverageOperationNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, operation);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glCoverageOperationNV(operation);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisampleIMG( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisampleIMG_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture2DMultisampleIMG( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture2DMultisampleIMG_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisampleAPPLE( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisampleAPPLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glResolveMultisampleFramebufferAPPLE(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glResolveMultisampleFramebufferAPPLE_sig);
    trace::localWriter.endEnter();
    _glResolveMultisampleFramebufferAPPLE();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glBlitFramebufferANGLE( GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBlitFramebufferANGLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(srcX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(srcY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(dstX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(dstY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(dstX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(dstY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield1_sig, mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glRenderbufferStorageMultisampleANGLE( GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glRenderbufferStorageMultisampleANGLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDrawBuffersNV( GLsizei n, const GLenum * bufs ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDrawBuffersNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (bufs) {
        size_t _cCGLenum10 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLenum10);
        for (size_t _iCGLenum10 = 0; _iCGLenum10 < _cCGLenum10; ++_iCGLenum10) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, (bufs)[_iCGLenum10]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDrawBuffersNV(n, bufs);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glReadBufferNV( GLenum mode ) {
    unsigned _call = trace::localWriter.beginEnter(&_glReadBufferNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glReadBufferNV(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glLabelObjectEXT( GLenum type, GLuint object, GLsizei length, const GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glLabelObjectEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(object);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glLabelObjectEXT(type, object, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetObjectLabelEXT( GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetObjectLabelEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(object);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetObjectLabelEXT(type, object, bufSize, length, label);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeString(reinterpret_cast<const char *>(label));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glInsertEventMarkerEXT( GLsizei length, const GLchar * marker ) {
    unsigned _call = trace::localWriter.beginEnter(&_glInsertEventMarkerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(marker), length ? length : strlen(marker));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glInsertEventMarkerEXT(length, marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPushGroupMarkerEXT( GLsizei length, const GLchar * marker ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPushGroupMarkerEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(length);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeString(reinterpret_cast<const char *>(marker), length ? length : strlen(marker));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glPushGroupMarkerEXT(length, marker);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glPopGroupMarkerEXT(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glPopGroupMarkerEXT_sig);
    trace::localWriter.endEnter();
    _glPopGroupMarkerEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenQueriesEXT( GLsizei n, GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenQueriesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenQueriesEXT(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cPGLuint3 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint3);
        for (size_t _iPGLuint3 = 0; _iPGLuint3 < _cPGLuint3; ++_iPGLuint3) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iPGLuint3]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glDeleteQueriesEXT( GLsizei n, const GLuint * ids ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteQueriesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cCPGLuint33 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCPGLuint33);
        for (size_t _iCPGLuint33 = 0; _iCPGLuint33 < _cCPGLuint33; ++_iCPGLuint33) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iCPGLuint33]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteQueriesEXT(n, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLboolean glIsQueryEXT( GLuint id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsQueryEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsQueryEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBeginQueryEXT( GLenum target, GLuint id ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBeginQueryEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBeginQueryEXT(target, id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEndQueryEXT( GLenum target ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEndQueryEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEndQueryEXT(target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetQueryivEXT( GLenum target, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryivEXT(target, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glGetQueryObjectuivEXT( GLuint id, GLenum pname, GLuint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetQueryObjectuivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetQueryObjectuivEXT(id, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLuint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLuint);
        for (size_t _iGLuint = 0; _iGLuint < _cGLuint; ++_iGLuint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((params)[_iGLuint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glUseProgramStagesEXT( GLuint pipeline, GLbitfield stages, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glUseProgramStagesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeBitmask(&_bitmaskGLbitfield3_sig, stages);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glUseProgramStagesEXT(pipeline, stages, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glActiveShaderProgramEXT( GLuint pipeline, GLuint program ) {
    unsigned _call = trace::localWriter.beginEnter(&_glActiveShaderProgramEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(program);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glActiveShaderProgramEXT(pipeline, program);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint glCreateShaderProgramvEXT( GLenum type, GLsizei count, const GLchar * * const strings ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_glCreateShaderProgramvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (strings) {
        size_t _cconstGLchar = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cconstGLchar);
        for (size_t _iconstGLchar = 0; _iconstGLchar < _cconstGLchar; ++_iconstGLchar) {
            trace::localWriter.beginElement();
    trace::localWriter.writeString(reinterpret_cast<const char *>((strings)[_iconstGLchar]));
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glCreateShaderProgramvEXT(type, count, strings);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glBindProgramPipelineEXT( GLuint pipeline ) {
    unsigned _call = trace::localWriter.beginEnter(&_glBindProgramPipelineEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glBindProgramPipelineEXT(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glDeleteProgramPipelinesEXT( GLsizei n, const GLuint * pipelines ) {
    unsigned _call = trace::localWriter.beginEnter(&_glDeleteProgramPipelinesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (pipelines) {
        size_t _cCGLuint93 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCGLuint93);
        for (size_t _iCGLuint93 = 0; _iCGLuint93 < _cCGLuint93; ++_iCGLuint93) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pipelines)[_iCGLuint93]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glDeleteProgramPipelinesEXT(n, pipelines);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGenProgramPipelinesEXT( GLsizei n, GLuint * pipelines ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGenProgramPipelinesEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(n);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGenProgramPipelinesEXT(n, pipelines);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pipelines) {
        size_t _cPGLuint14 = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cPGLuint14);
        for (size_t _iPGLuint14 = 0; _iPGLuint14 < _cPGLuint14; ++_iPGLuint14) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pipelines)[_iPGLuint14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLboolean glIsProgramPipelineEXT( GLuint pipeline ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_glIsProgramPipelineEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glIsProgramPipelineEXT(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glGetProgramPipelineivEXT( GLuint pipeline, GLenum pname, GLint * params ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramPipelineivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramPipelineivEXT(pipeline, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = _gl_param_size(pname) > 0 ? _gl_param_size(pname) : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glValidateProgramPipelineEXT( GLuint pipeline ) {
    unsigned _call = trace::localWriter.beginEnter(&_glValidateProgramPipelineEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glValidateProgramPipelineEXT(pipeline);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glGetProgramPipelineInfoLogEXT( GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog ) {
    unsigned _call = trace::localWriter.beginEnter(&_glGetProgramPipelineInfoLogEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(pipeline);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(bufSize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (length) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*length);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeString(reinterpret_cast<const char *>(infoLog));
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glFramebufferTexture2DMultisampleEXT( GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples ) {
    unsigned _call = trace::localWriter.beginEnter(&_glFramebufferTexture2DMultisampleEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, attachment);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, textarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(texture);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(samples);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage1DEXT( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage1DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage1DEXT(target, levels, internalformat, width);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage2DEXT( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage2DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage2DEXT(target, levels, internalformat, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glTexStorage3DEXT( GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glTexStorage3DEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(levels);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalformat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}


} /* namespace Trace */ } /* namespace Regal */


#if REGAL_SYS_OSX

namespace Regal { namespace Trace {

CGLError CGLSetCurrentContext( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetCurrentContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetCurrentContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    if (_result == kCGLNoError) {
        if (ctx != NULL) {
            gltrace::setContext((uintptr_t)ctx);
        } else {
            gltrace::clearContext();
        }
    }
    return _result;
}

CGLContextObj CGLGetCurrentContext(  ) {
    CGLContextObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetCurrentContext_sig);
    trace::localWriter.endEnter();
    _result = _CGLGetCurrentContext();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLChoosePixelFormat( const CGLPixelFormatAttribute * attribs, CGLPixelFormatObj * pix, GLint * npix ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLChoosePixelFormat_sig);
    trace::localWriter.beginArg(0);
    {
    int _cCCGLPixelFormatAttribute;
    for (_cCCGLPixelFormatAttribute = 0; attribs && attribs[_cCCGLPixelFormatAttribute] != 0; _cCCGLPixelFormatAttribute += 2) {
        switch (int(attribs[_cCCGLPixelFormatAttribute])) {
        case kCGLPFAAllRenderers:
        case kCGLPFATripleBuffer:
        case kCGLPFADoubleBuffer:
        case kCGLPFAStereo:
        case kCGLPFAMinimumPolicy:
        case kCGLPFAMaximumPolicy:
        case kCGLPFAColorFloat:
        case kCGLPFAMultisample:
        case kCGLPFASupersample:
        case kCGLPFASampleAlpha:
        case kCGLPFANoRecovery:
        case kCGLPFAAccelerated:
        case kCGLPFAClosestPolicy:
        case kCGLPFABackingStore:
        case kCGLPFABackingVolatile:
        case kCGLPFAAllowOfflineRenderers:
        case kCGLPFAAcceleratedCompute:
        case kCGLPFASupportsAutomaticGraphicsSwitching:
        case kCGLPFAAuxBuffers:
        case kCGLPFAAuxDepthStencil:
        case kCGLPFAOffScreen:
        case kCGLPFAWindow:
        case kCGLPFACompliant:
        case kCGLPFAPBuffer:
        case kCGLPFARemotePBuffer:
        case kCGLPFASingleRenderer:
        case kCGLPFARobust:
        case kCGLPFAMPSafe:
        case kCGLPFAMultiScreen:
        case kCGLPFAFullScreen:
            _cCCGLPixelFormatAttribute--;
            break;
        }
    }
    _cCCGLPixelFormatAttribute += attribs ? 1 : 0;
    trace::localWriter.beginArray(_cCCGLPixelFormatAttribute);
    for (int _iCCGLPixelFormatAttribute = 0; _iCCGLPixelFormatAttribute < _cCCGLPixelFormatAttribute; _iCCGLPixelFormatAttribute++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumCGLPixelFormatAttribute_sig, attribs[_iCCGLPixelFormatAttribute]);
        trace::localWriter.endElement();
        if (_iCCGLPixelFormatAttribute + 1 >= _cCCGLPixelFormatAttribute) {
            break;
        }
        switch (int(attribs[_iCCGLPixelFormatAttribute++])) {
        case kCGLPFAColorSize:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAAlphaSize:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFADepthSize:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAStencilSize:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFASampleBuffers:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFASamples:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFARendererID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFADisplayMask:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAOpenGLProfile:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumCGLOpenGLProfile_sig, (attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAVirtualScreenCount:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAAccumSize:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribs)[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        case kCGLPFAAllRenderers:
        case kCGLPFATripleBuffer:
        case kCGLPFADoubleBuffer:
        case kCGLPFAStereo:
        case kCGLPFAMinimumPolicy:
        case kCGLPFAMaximumPolicy:
        case kCGLPFAColorFloat:
        case kCGLPFAMultisample:
        case kCGLPFASupersample:
        case kCGLPFASampleAlpha:
        case kCGLPFANoRecovery:
        case kCGLPFAAccelerated:
        case kCGLPFAClosestPolicy:
        case kCGLPFABackingStore:
        case kCGLPFABackingVolatile:
        case kCGLPFAAllowOfflineRenderers:
        case kCGLPFAAcceleratedCompute:
        case kCGLPFASupportsAutomaticGraphicsSwitching:
        case kCGLPFAAuxBuffers:
        case kCGLPFAAuxDepthStencil:
        case kCGLPFAOffScreen:
        case kCGLPFAWindow:
        case kCGLPFACompliant:
        case kCGLPFAPBuffer:
        case kCGLPFARemotePBuffer:
        case kCGLPFASingleRenderer:
        case kCGLPFARobust:
        case kCGLPFAMPSafe:
        case kCGLPFAMultiScreen:
        case kCGLPFAFullScreen:
            _iCCGLPixelFormatAttribute--;
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribs[_iCCGLPixelFormatAttribute - 1]));
            trace::localWriter.writeSInt(attribs[_iCCGLPixelFormatAttribute]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLChoosePixelFormat(attribs, pix, npix);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pix) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pix);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (npix) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*npix);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDestroyPixelFormat( CGLPixelFormatObj pix ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDestroyPixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDestroyPixelFormat(pix);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDescribePixelFormat( CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint * value ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDescribePixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(pix_num);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumCGLPixelFormatAttribute_sig, attrib);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDescribePixelFormat(pix, pix_num, attrib, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void CGLReleasePixelFormat( CGLPixelFormatObj pix ) {
    unsigned _call = trace::localWriter.beginEnter(&_CGLReleasePixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _CGLReleasePixelFormat(pix);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

CGLPixelFormatObj CGLRetainPixelFormat( CGLPixelFormatObj pix ) {
    CGLPixelFormatObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLRetainPixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLRetainPixelFormat(pix);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLuint CGLGetPixelFormatRetainCount( CGLPixelFormatObj pix ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetPixelFormatRetainCount_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetPixelFormatRetainCount(pix);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLQueryRendererInfo( GLuint display_mask, CGLRendererInfoObj * rend, GLint * nrend ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLQueryRendererInfo_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(display_mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLQueryRendererInfo(display_mask, rend, nrend);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (rend) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*rend);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (nrend) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nrend);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDestroyRendererInfo( CGLRendererInfoObj rend ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDestroyRendererInfo_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)rend);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDestroyRendererInfo(rend);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDescribeRenderer( CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint * value ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDescribeRenderer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)rend);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(rend_num);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumCGLRendererProperty_sig, prop);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDescribeRenderer(rend, rend_num, prop, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLCreateContext( CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj * ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLCreateContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pix);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)share);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLCreateContext(pix, share, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (ctx) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*ctx);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    if (_result == kCGLNoError) {
        gltrace::createContext((uintptr_t)*ctx);
    }
    return _result;
}

CGLError CGLDestroyContext( CGLContextObj ctx ) {
    CGLError _result;
    if (gltrace::releaseContext((uintptr_t)ctx)) {
        if (_CGLGetCurrentContext() == ctx) {
            gltrace::clearContext();
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_CGLDestroyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDestroyContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLCopyContext( CGLContextObj src, CGLContextObj dst, GLbitfield mask ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLCopyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLCopyContext(src, dst, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLContextObj CGLRetainContext( CGLContextObj ctx ) {
    CGLContextObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLRetainContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLRetainContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    gltrace::retainContext((uintptr_t)ctx);
    return _result;
}

void CGLReleaseContext( CGLContextObj ctx ) {
    if (_CGLGetContextRetainCount(ctx) == 1) {
        if (gltrace::releaseContext((uintptr_t)ctx)) {
            if (_CGLGetCurrentContext() == ctx) {
                gltrace::clearContext();
            }
        }
    }
    unsigned _call = trace::localWriter.beginEnter(&_CGLReleaseContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _CGLReleaseContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint CGLGetContextRetainCount( CGLContextObj ctx ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetContextRetainCount_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetContextRetainCount(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLPixelFormatObj CGLGetPixelFormat( CGLContextObj ctx ) {
    CGLPixelFormatObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetPixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetPixelFormat(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLCreatePBuffer( GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj * pbuffer ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLCreatePBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internalFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(max_level);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLCreatePBuffer(width, height, target, internalFormat, max_level, pbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    if (pbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDestroyPBuffer( CGLPBufferObj pbuffer ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDestroyPBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDestroyPBuffer(pbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDescribePBuffer( CGLPBufferObj obj, GLsizei * width, GLsizei * height, GLenum * target, GLenum * internalFormat, GLint * mipmap ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDescribePBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)obj);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDescribePBuffer(obj, width, height, target, internalFormat, mipmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (width) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*width);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (height) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*height);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (target) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *target);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (internalFormat) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *internalFormat);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (mipmap) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*mipmap);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLTexImagePBuffer( CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLTexImagePBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, source);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLTexImagePBuffer(ctx, pbuffer, source);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLPBufferObj CGLRetainPBuffer( CGLPBufferObj pbuffer ) {
    CGLPBufferObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLRetainPBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLRetainPBuffer(pbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void CGLReleasePBuffer( CGLPBufferObj pbuffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_CGLReleasePBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _CGLReleasePBuffer(pbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLuint CGLGetPBufferRetainCount( CGLPBufferObj pbuffer ) {
    GLuint _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetPBufferRetainCount_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetPBufferRetainCount(pbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetOffScreen( CGLContextObj ctx, GLsizei width, GLsizei height, GLint rowbytes, void * baseaddr ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetOffScreen_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(rowbytes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)baseaddr);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetOffScreen(ctx, width, height, rowbytes, baseaddr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetOffScreen( CGLContextObj ctx, GLsizei * width, GLsizei * height, GLint * rowbytes, void * * baseaddr ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetOffScreen_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetOffScreen(ctx, width, height, rowbytes, baseaddr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (width) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*width);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (height) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*height);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (rowbytes) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*rowbytes);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (baseaddr) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*baseaddr);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetFullScreen( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetFullScreen_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetFullScreen(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetFullScreenOnDisplay( CGLContextObj ctx, GLuint display_mask ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetFullScreenOnDisplay_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(display_mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetFullScreenOnDisplay(ctx, display_mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetPBuffer( CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetPBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, face);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(level);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetPBuffer(ctx, pbuffer, face, level, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetPBuffer( CGLContextObj ctx, CGLPBufferObj * pbuffer, GLenum * face, GLint * level, GLint * screen ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetPBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetPBuffer(ctx, pbuffer, face, level, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*pbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (face) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumGLenum_sig, *face);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (level) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*level);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (screen) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*screen);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLClearDrawable( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLClearDrawable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLClearDrawable(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLFlushDrawable( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLFlushDrawable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLFlushDrawable(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLEnable( CGLContextObj ctx, CGLContextEnable pname ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLEnable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumCGLContextEnable_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLEnable(ctx, pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLDisable( CGLContextObj ctx, CGLContextEnable pname ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLDisable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumCGLContextEnable_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLDisable(ctx, pname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLIsEnabled( CGLContextObj ctx, CGLContextEnable pname, GLint * enable ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLIsEnabled_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumCGLContextEnable_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLIsEnabled(ctx, pname, enable);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (enable) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*enable);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetParameter( CGLContextObj ctx, CGLContextParameter pname, const GLint * params ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetParameter_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumCGLContextParameter_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cCGLint131 = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cCGLint131);
        for (size_t _iCGLint131 = 0; _iCGLint131 < _cCGLint131; ++_iCGLint131) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iCGLint131]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetParameter(ctx, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetParameter( CGLContextObj ctx, CGLContextParameter pname, GLint * params ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetParameter_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumCGLContextParameter_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetParameter(ctx, pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (params) {
        size_t _cGLint = 1 > 0 ? 1 : 0;
        trace::localWriter.beginArray(_cGLint);
        for (size_t _iGLint = 0; _iGLint < _cGLint; ++_iGLint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((params)[_iGLint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetVirtualScreen( CGLContextObj ctx, GLint screen ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetVirtualScreen_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetVirtualScreen(ctx, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetVirtualScreen( CGLContextObj ctx, GLint * screen ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetVirtualScreen_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetVirtualScreen(ctx, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (screen) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*screen);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetGlobalOption( CGLGlobalOption pname, const GLint * params ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetGlobalOption_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumCGLGlobalOption_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetGlobalOption(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetGlobalOption( CGLGlobalOption pname, GLint * params ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetGlobalOption_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumCGLGlobalOption_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetGlobalOption(pname, params);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)params);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetOption( CGLGlobalOption pname, GLint param ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetOption_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumCGLGlobalOption_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(param);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetOption(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetOption( CGLGlobalOption pname, GLint * param ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetOption_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumCGLGlobalOption_sig, pname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetOption(pname, param);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (param) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*param);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLLockContext( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLLockContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLLockContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLUnlockContext( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLUnlockContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLUnlockContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void CGLGetVersion( GLint * majorvers, GLint * minorvers ) {
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetVersion_sig);
    trace::localWriter.endEnter();
    _CGLGetVersion(majorvers, minorvers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (majorvers) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*majorvers);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (minorvers) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*minorvers);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

const char * CGLErrorString( CGLError error ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLErrorString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumCGLError_sig, error);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLErrorString(error);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLTexImageIOSurface2D( CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLTexImageIOSurface2D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, internal_format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeEnum(&_enumGLenum_sig, format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writePointer((uintptr_t)ioSurface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(plane);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLTexImageIOSurface2D(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLShareGroupObj CGLGetShareGroup( CGLContextObj ctx ) {
    CGLShareGroupObj _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetShareGroup_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetShareGroup(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLSetSurface( CGLContextObj ctx, CGSConnectionID cid, CGSWindowID wid, CGSSurfaceID sid ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLSetSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)cid);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(wid);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(sid);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLSetSurface(ctx, cid, wid, sid);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLGetSurface( CGLContextObj ctx, CGSConnectionID * cid, CGSWindowID * wid, CGSSurfaceID * sid ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLGetSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (cid) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*cid);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (wid) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*wid);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (sid) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*sid);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLGetSurface(ctx, cid, wid, sid);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLUpdateContext( CGLContextObj ctx ) {
    CGLError _result;
    unsigned _call = trace::localWriter.beginEnter(&_CGLUpdateContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _CGLUpdateContext(ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumCGLError_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

CGLError CGLOpenCLMuxLockDown(  ) {
    CGLError _result;
    _result = _CGLOpenCLMuxLockDown();
    return _result;
}

GLboolean CGLAreContextsShared( CGLContextObj ctx1, CGLContextObj ctx2 ) {
    GLboolean _result;
    _result = _CGLAreContextsShared(ctx1, ctx2);
    return _result;
}

CGLContextObj CGLGetNextContext( CGLContextObj ctx ) {
    CGLContextObj _result;
    _result = _CGLGetNextContext(ctx);
    return _result;
}

void * CGLFrontDispatch( CGLContextObj ctx ) {
    void * _result;
    _result = _CGLFrontDispatch(ctx);
    return _result;
}

void * CGLBackDispatch( CGLContextObj ctx ) {
    void * _result;
    _result = _CGLBackDispatch(ctx);
    return _result;
}

void CGLSelectDispatch( CGLContextObj ctx, void * dispatch ) {
    _CGLSelectDispatch(ctx, dispatch);
}

void CGLSelectDispatchBounded( CGLContextObj ctx, void * dispatch, GLint size ) {
    _CGLSelectDispatchBounded(ctx, dispatch, size);
}

void CGLSelectDispatchFunction( CGLContextObj ctx, void * functionPtr, GLint functionId ) {
    _CGLSelectDispatchFunction(ctx, functionPtr, functionId);
}

void CGLRestoreDispatch( CGLContextObj ctx ) {
    _CGLRestoreDispatch(ctx);
}

void CGLRestoreDispatchFunction( CGLContextObj ctx, GLint functionId ) {
    _CGLRestoreDispatchFunction(ctx, functionId);
}

CGLError CGLSetPBufferVolatileState( CGLPBufferObj pbuffer, void * state ) {
    CGLError _result;
    _result = _CGLSetPBufferVolatileState(pbuffer, state);
    return _result;
}


} /* namespace Trace */ } /* namespace Regal */

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

namespace Regal { namespace Trace {

EGLint eglGetError(  ) {
    EGLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetError_sig);
    trace::localWriter.endEnter();
    _result = _eglGetError();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLDisplay eglGetDisplay( EGLNativeDisplayType display_id ) {
    EGLDisplay _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetDisplay_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display_id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetDisplay(display_id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglInitialize( EGLDisplay dpy, EGLint * major, EGLint * minor ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglInitialize_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglInitialize(dpy, major, minor);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (major) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*major);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (minor) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*minor);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglTerminate( EGLDisplay dpy ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglTerminate_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglTerminate(dpy);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

const char * eglQueryString( EGLDisplay dpy, EGLint name ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglQueryString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglQueryString(dpy, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglGetConfigs( EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetConfigs_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (configs) {
        size_t _cEGLConfig = config_size > 0 ? config_size : 0;
        trace::localWriter.beginArray(_cEGLConfig);
        for (size_t _iEGLConfig = 0; _iEGLConfig < _cEGLConfig; ++_iEGLConfig) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(configs)[_iEGLConfig]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(config_size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetConfigs(dpy, configs, config_size, num_config);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (num_config) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*num_config);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglChooseConfig( EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglChooseConfig_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    {
    int _cCEGLint1;
    for (_cCEGLint1 = 0; attrib_list && attrib_list[_cCEGLint1] != EGL_NONE; _cCEGLint1 += 2) {
    }
    _cCEGLint1 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint1);
    for (int _iCEGLint1 = 0; _iCEGLint1 < _cCEGLint1; _iCEGLint1++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint1]);
        trace::localWriter.endElement();
        if (_iCEGLint1 + 1 >= _cCEGLint1) {
            break;
        }
        switch (int(attrib_list[_iCEGLint1++])) {
        case EGL_ALPHA_MASK_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_BIND_TO_TEXTURE_RGB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_BIND_TO_TEXTURE_RGBA:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_BUFFER_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_COLOR_BUFFER_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint34_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_CONFIG_CAVEAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint35_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_CONFIG_ID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_CONFORMANT:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint29_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_DEPTH_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_LEVEL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_LUMINANCE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_MATCH_NATIVE_PIXMAP:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_NATIVE_RENDERABLE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint36_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_MAX_SWAP_INTERVAL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_MIN_SWAP_INTERVAL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_SAMPLE_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_SAMPLES:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_STENCIL_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_RENDERABLE_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint29_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_SURFACE_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint28_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_TRANSPARENT_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint37_sig, (attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_TRANSPARENT_RED_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_TRANSPARENT_GREEN_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        case EGL_TRANSPARENT_BLUE_VALUE :
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint1 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint1]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (configs) {
        size_t _cEGLConfig = config_size > 0 ? config_size : 0;
        trace::localWriter.beginArray(_cEGLConfig);
        for (size_t _iEGLConfig = 0; _iEGLConfig < _cEGLConfig; ++_iEGLConfig) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(configs)[_iEGLConfig]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(config_size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglChooseConfig(dpy, attrib_list, configs, config_size, num_config);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (num_config) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*num_config);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglGetConfigAttrib( EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetConfigAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetConfigAttrib(dpy, config, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglCreateWindowSurface( EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateWindowSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)win);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCEGLint11;
    for (_cCEGLint11 = 0; attrib_list && attrib_list[_cCEGLint11] != EGL_NONE; _cCEGLint11 += 2) {
    }
    _cCEGLint11 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint11);
    for (int _iCEGLint11 = 0; _iCEGLint11 < _cCEGLint11; _iCEGLint11++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint11]);
        trace::localWriter.endElement();
        if (_iCEGLint11 + 1 >= _cCEGLint11) {
            break;
        }
        switch (int(attrib_list[_iCEGLint11++])) {
        case EGL_RENDER_BUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint38_sig, (attrib_list)[_iCEGLint11]);
            trace::localWriter.endElement();
            break;
        case EGL_VG_ALPHA_FORMAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint30_sig, (attrib_list)[_iCEGLint11]);
            trace::localWriter.endElement();
            break;
        case EGL_VG_COLORSPACE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint31_sig, (attrib_list)[_iCEGLint11]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint11 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint11]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateWindowSurface(dpy, config, win, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglCreatePbufferSurface( EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreatePbufferSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCEGLint13;
    for (_cCEGLint13 = 0; attrib_list && attrib_list[_cCEGLint13] != EGL_NONE; _cCEGLint13 += 2) {
    }
    _cCEGLint13 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint13);
    for (int _iCEGLint13 = 0; _iCEGLint13 < _cCEGLint13; _iCEGLint13++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint13]);
        trace::localWriter.endElement();
        if (_iCEGLint13 + 1 >= _cCEGLint13) {
            break;
        }
        switch (int(attrib_list[_iCEGLint13++])) {
        case EGL_HEIGHT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_LARGEST_PBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_MIPMAP_TEXTURE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_TEXTURE_FORMAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint32_sig, (attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_TEXTURE_TARGET:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint33_sig, (attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_VG_ALPHA_FORMAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint30_sig, (attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_VG_COLORSPACE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint31_sig, (attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        case EGL_WIDTH:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint13 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint13]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreatePbufferSurface(dpy, config, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglCreatePixmapSurface( EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreatePixmapSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)pixmap);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCEGLint12;
    for (_cCEGLint12 = 0; attrib_list && attrib_list[_cCEGLint12] != EGL_NONE; _cCEGLint12 += 2) {
    }
    _cCEGLint12 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint12);
    for (int _iCEGLint12 = 0; _iCEGLint12 < _cCEGLint12; _iCEGLint12++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint12]);
        trace::localWriter.endElement();
        if (_iCEGLint12 + 1 >= _cCEGLint12) {
            break;
        }
        switch (int(attrib_list[_iCEGLint12++])) {
        case EGL_VG_ALPHA_FORMAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint30_sig, (attrib_list)[_iCEGLint12]);
            trace::localWriter.endElement();
            break;
        case EGL_VG_COLORSPACE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint31_sig, (attrib_list)[_iCEGLint12]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint12 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint12]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreatePixmapSurface(dpy, config, pixmap, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglDestroySurface( EGLDisplay dpy, EGLSurface surface ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglDestroySurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglDestroySurface(dpy, surface);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglQuerySurface( EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglQuerySurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglQuerySurface(dpy, surface, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglBindAPI( EGLenum api ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglBindAPI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, api);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglBindAPI(api);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLenum eglQueryAPI(  ) {
    EGLenum _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglQueryAPI_sig);
    trace::localWriter.endEnter();
    _result = _eglQueryAPI();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglWaitClient(  ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglWaitClient_sig);
    trace::localWriter.endEnter();
    _result = _eglWaitClient();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglReleaseThread(  ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglReleaseThread_sig);
    trace::localWriter.endEnter();
    _result = _eglReleaseThread();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglCreatePbufferFromClientBuffer( EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreatePbufferFromClientBuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, buftype);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cCEGLint14;
    for (_cCEGLint14 = 0; attrib_list && attrib_list[_cCEGLint14] != EGL_NONE; _cCEGLint14 += 2) {
    }
    _cCEGLint14 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint14);
    for (int _iCEGLint14 = 0; _iCEGLint14 < _cCEGLint14; _iCEGLint14++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint14]);
        trace::localWriter.endElement();
        if (_iCEGLint14 + 1 >= _cCEGLint14) {
            break;
        }
        switch (int(attrib_list[_iCEGLint14++])) {
        case EGL_MIPMAP_TEXTURE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint14]);
            trace::localWriter.endElement();
            break;
        case EGL_TEXTURE_FORMAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint32_sig, (attrib_list)[_iCEGLint14]);
            trace::localWriter.endElement();
            break;
        case EGL_TEXTURE_TARGET:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint33_sig, (attrib_list)[_iCEGLint14]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint14 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint14]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglSurfaceAttrib( EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglSurfaceAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglSurfaceAttrib(dpy, surface, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglBindTexImage( EGLDisplay dpy, EGLSurface surface, EGLint buffer ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglBindTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglBindTexImage(dpy, surface, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglReleaseTexImage( EGLDisplay dpy, EGLSurface surface, EGLint buffer ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglReleaseTexImage_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglReleaseTexImage(dpy, surface, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglSwapInterval( EGLDisplay dpy, EGLint interval ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglSwapInterval_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(interval);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglSwapInterval(dpy, interval);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLContext eglCreateContext( EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list ) {
    EGLContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)share_context);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCEGLint18;
    for (_cCEGLint18 = 0; attrib_list && attrib_list[_cCEGLint18] != EGL_NONE; _cCEGLint18 += 2) {
    }
    _cCEGLint18 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint18);
    for (int _iCEGLint18 = 0; _iCEGLint18 < _cCEGLint18; _iCEGLint18++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint18]);
        trace::localWriter.endElement();
        if (_iCEGLint18 + 1 >= _cCEGLint18) {
            break;
        }
        switch (int(attrib_list[_iCEGLint18++])) {
        case EGL_CONTEXT_CLIENT_VERSION:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCEGLint18]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint18 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint18]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateContext(dpy, config, share_context, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglDestroyContext( EGLDisplay dpy, EGLContext ctx ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglDestroyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglDestroyContext(dpy, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglMakeCurrent( EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglMakeCurrent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)draw);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)read);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglMakeCurrent(dpy, draw, read, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLContext eglGetCurrentContext(  ) {
    EGLContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetCurrentContext_sig);
    trace::localWriter.endEnter();
    _result = _eglGetCurrentContext();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglGetCurrentSurface( EGLint readdraw ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetCurrentSurface_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, readdraw);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetCurrentSurface(readdraw);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLDisplay eglGetCurrentDisplay(  ) {
    EGLDisplay _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetCurrentDisplay_sig);
    trace::localWriter.endEnter();
    _result = _eglGetCurrentDisplay();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglQueryContext( EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglQueryContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglQueryContext(dpy, ctx, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglWaitGL(  ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglWaitGL_sig);
    trace::localWriter.endEnter();
    _result = _eglWaitGL();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglWaitNative( EGLint engine ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglWaitNative_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, engine);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglWaitNative(engine);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglSwapBuffers( EGLDisplay dpy, EGLSurface surface ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglSwapBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglSwapBuffers(dpy, surface);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglCopyBuffers( EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCopyBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)target);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCopyBuffers(dpy, surface, target);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

__eglMustCastToProperFunctionPointerType eglGetProcAddress( const char * procname ) {
    __eglMustCastToProperFunctionPointerType _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetProcAddress_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeString(procname);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetProcAddress(procname);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglLockSurfaceKHR( EGLDisplay display, EGLSurface surface, const EGLint * attrib_list ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglLockSurfaceKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCEGLint16;
    for (_cCEGLint16 = 0; attrib_list && attrib_list[_cCEGLint16] != EGL_NONE; _cCEGLint16 += 2) {
    }
    _cCEGLint16 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint16);
    for (int _iCEGLint16 = 0; _iCEGLint16 < _cCEGLint16; _iCEGLint16++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint16]);
        trace::localWriter.endElement();
        if (_iCEGLint16 + 1 >= _cCEGLint16) {
            break;
        }
        switch (int(attrib_list[_iCEGLint16++])) {
        case EGL_MAP_PRESERVE_PIXELS_KHR:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint16]);
            trace::localWriter.endElement();
            break;
        case EGL_LOCK_USAGE_HINT_KHR:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint41_sig, (attrib_list)[_iCEGLint16]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint16 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint16]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglLockSurfaceKHR(display, surface, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglUnlockSurfaceKHR( EGLDisplay display, EGLSurface surface ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglUnlockSurfaceKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglUnlockSurfaceKHR(display, surface);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLImageKHR eglCreateImageKHR( EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list ) {
    EGLImageKHR _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateImageKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cCEGLint19;
    for (_cCEGLint19 = 0; attrib_list && attrib_list[_cCEGLint19] != EGL_NONE; _cCEGLint19 += 2) {
    }
    _cCEGLint19 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint19);
    for (int _iCEGLint19 = 0; _iCEGLint19 < _cCEGLint19; _iCEGLint19++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint19]);
        trace::localWriter.endElement();
        if (_iCEGLint19 + 1 >= _cCEGLint19) {
            break;
        }
        switch (int(attrib_list[_iCEGLint19++])) {
        case EGL_IMAGE_PRESERVED_KHR:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, (attrib_list)[_iCEGLint19]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint19 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint19]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglDestroyImageKHR( EGLDisplay dpy, EGLImageKHR image ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglDestroyImageKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglDestroyImageKHR(dpy, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSyncKHR eglCreateSyncKHR( EGLDisplay dpy, EGLenum type, const EGLint * attrib_list ) {
    EGLSyncKHR _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateSyncKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCEGLint110;
    for (_cCEGLint110 = 0; attrib_list && attrib_list[_cCEGLint110] != EGL_NONE; _cCEGLint110 += 2) {
    }
    _cCEGLint110 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint110);
    for (int _iCEGLint110 = 0; _iCEGLint110 < _cCEGLint110; _iCEGLint110++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint110]);
        trace::localWriter.endElement();
        if (_iCEGLint110 + 1 >= _cCEGLint110) {
            break;
        }
        switch (int(attrib_list[_iCEGLint110++])) {
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint110 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint110]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateSyncKHR(dpy, type, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglDestroySyncKHR( EGLDisplay dpy, EGLSyncKHR sync ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglDestroySyncKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglDestroySyncKHR(dpy, sync);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLint eglClientWaitSyncKHR( EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout ) {
    EGLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglClientWaitSyncKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(timeout);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglClientWaitSyncKHR(dpy, sync, flags, timeout);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglSignalSyncKHR( EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglSignalSyncKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglSignalSyncKHR(dpy, sync, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglGetSyncAttribKHR( EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetSyncAttribKHR_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetSyncAttribKHR(dpy, sync, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSyncNV eglCreateFenceSyncNV( EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list ) {
    EGLSyncNV _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateFenceSyncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, condition);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCEGLint17;
    for (_cCEGLint17 = 0; attrib_list && attrib_list[_cCEGLint17] != EGL_NONE; _cCEGLint17 += 2) {
    }
    _cCEGLint17 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint17);
    for (int _iCEGLint17 = 0; _iCEGLint17 < _cCEGLint17; _iCEGLint17++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint17]);
        trace::localWriter.endElement();
        if (_iCEGLint17 + 1 >= _cCEGLint17) {
            break;
        }
        switch (int(attrib_list[_iCEGLint17++])) {
        case EGL_SYNC_STATUS_NV:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint42_sig, (attrib_list)[_iCEGLint17]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint17 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint17]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateFenceSyncNV(dpy, condition, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglDestroySyncNV( EGLSyncNV sync ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglDestroySyncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglDestroySyncNV(sync);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglFenceNV( EGLSyncNV sync ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglFenceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglFenceNV(sync);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLint eglClientWaitSyncNV( EGLSyncNV sync, EGLint flags, EGLTimeNV timeout ) {
    EGLint _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglClientWaitSyncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(flags);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(timeout);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglClientWaitSyncNV(sync, flags, timeout);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglSignalSyncNV( EGLSyncNV sync, EGLenum mode ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglSignalSyncNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglSignalSyncNV(sync, mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglGetSyncAttribNV( EGLSyncNV sync, EGLint attribute, EGLint * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetSyncAttribNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)sync);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglGetSyncAttribNV(sync, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLSurface eglCreatePixmapSurfaceHI( EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap ) {
    EGLSurface _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreatePixmapSurfaceHI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (pixmap) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structstructEGLClientPixmapHI_sig);
    trace::localWriter.writePointer((uintptr_t)(*pixmap).pData);
    trace::localWriter.writeSInt((*pixmap).iWidth);
    trace::localWriter.writeSInt((*pixmap).iHeight);
    trace::localWriter.writeSInt((*pixmap).iStride);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreatePixmapSurfaceHI(dpy, config, pixmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLImageKHR eglCreateDRMImageMESA( EGLDisplay dpy, const EGLint * attrib_list ) {
    EGLImageKHR _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglCreateDRMImageMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    {
    int _cCEGLint15;
    for (_cCEGLint15 = 0; attrib_list && attrib_list[_cCEGLint15] != EGL_NONE; _cCEGLint15 += 2) {
    }
    _cCEGLint15 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCEGLint15);
    for (int _iCEGLint15 = 0; _iCEGLint15 < _cCEGLint15; _iCEGLint15++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attrib_list[_iCEGLint15]);
        trace::localWriter.endElement();
        if (_iCEGLint15 + 1 >= _cCEGLint15) {
            break;
        }
        switch (int(attrib_list[_iCEGLint15++])) {
        case EGL_DRM_BUFFER_FORMAT_MESA:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint39_sig, (attrib_list)[_iCEGLint15]);
            trace::localWriter.endElement();
            break;
        case EGL_DRM_BUFFER_USE_MESA:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint40_sig, (attrib_list)[_iCEGLint15]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCEGLint15 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCEGLint15]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglCreateDRMImageMESA(dpy, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglExportDRMImageMESA( EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglExportDRMImageMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglExportDRMImageMESA(dpy, image, name, handle, stride);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (name) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*name);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (handle) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*handle);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (stride) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*stride);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglPostSubBufferNV( EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglPostSubBufferNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglPostSubBufferNV(dpy, surface, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLBoolean eglQuerySurfacePointerANGLE( EGLDisplay dpy, EGLSurface surface, EGLint attribute, void * * value ) {
    EGLBoolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglQuerySurfacePointerANGLE_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)surface);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumEGLenum_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _eglQuerySurfacePointerANGLE(dpy, surface, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumEGLBoolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLuint64NV eglGetSystemTimeFrequencyNV(  ) {
    EGLuint64NV _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetSystemTimeFrequencyNV_sig);
    trace::localWriter.endEnter();
    _result = _eglGetSystemTimeFrequencyNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

EGLuint64NV eglGetSystemTimeNV(  ) {
    EGLuint64NV _result;
    unsigned _call = trace::localWriter.beginEnter(&_eglGetSystemTimeNV_sig);
    trace::localWriter.endEnter();
    _result = _eglGetSystemTimeNV();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glEGLImageTargetTexture2DOES( GLenum target, EGLImageKHR image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEGLImageTargetTexture2DOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEGLImageTargetTexture2DOES(target, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glEGLImageTargetRenderbufferStorageOES( GLenum target, EGLImageKHR image ) {
    unsigned _call = trace::localWriter.beginEnter(&_glEGLImageTargetRenderbufferStorageOES_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, target);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)image);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glEGLImageTargetRenderbufferStorageOES(target, image);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}


} /* namespace Trace */ } /* namespace Regal */

#endif // REGAL_SYS_EGL

#if REGAL_SYS_GLX

namespace Regal { namespace Trace {

XVisualInfo * glXChooseVisual( Display * dpy, int screen, int * attribList ) {
    XVisualInfo * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXChooseVisual_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cint2;
    for (_cint2 = 0; attribList && attribList[_cint2] != 0; _cint2 += 2) {
        switch (int(attribList[_cint2])) {
        case GLX_USE_GL:
        case GLX_RGBA:
        case GLX_DOUBLEBUFFER:
        case GLX_STEREO:
            _cint2--;
            break;
        }
    }
    _cint2 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cint2);
    for (int _iint2 = 0; _iint2 < _cint2; _iint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attribList[_iint2]);
        trace::localWriter.endElement();
        if (_iint2 + 1 >= _cint2) {
            break;
        }
        switch (int(attribList[_iint2++])) {
        case GLX_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_DEPTH_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_STENCIL_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_BUFFER_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_LEVEL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_AUX_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLE_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLES:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_USE_GL:
        case GLX_RGBA:
        case GLX_DOUBLEBUFFER:
        case GLX_STEREO:
            _iint2--;
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iint2 - 1]));
            trace::localWriter.writeSInt(attribList[_iint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXChooseVisual(dpy, screen, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    if (_result) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*_result).visual);
    trace::localWriter.writeUInt((*_result).visualid);
    trace::localWriter.writeSInt((*_result).screen);
    trace::localWriter.writeSInt((*_result).depth);
    trace::localWriter.writeSInt((*_result).c_class);
    trace::localWriter.writeUInt((*_result).red_mask);
    trace::localWriter.writeUInt((*_result).green_mask);
    trace::localWriter.writeUInt((*_result).blue_mask);
    trace::localWriter.writeSInt((*_result).colormap_size);
    trace::localWriter.writeSInt((*_result).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXContext glXCreateContext( Display * dpy, XVisualInfo * vis, GLXContext shareList, int direct ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (vis) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*vis).visual);
    trace::localWriter.writeUInt((*vis).visualid);
    trace::localWriter.writeSInt((*vis).screen);
    trace::localWriter.writeSInt((*vis).depth);
    trace::localWriter.writeSInt((*vis).c_class);
    trace::localWriter.writeUInt((*vis).red_mask);
    trace::localWriter.writeUInt((*vis).green_mask);
    trace::localWriter.writeUInt((*vis).blue_mask);
    trace::localWriter.writeSInt((*vis).colormap_size);
    trace::localWriter.writeSInt((*vis).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)shareList);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumint1_sig, direct);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateContext(dpy, vis, shareList, direct);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyContext( Display * dpy, GLXContext ctx ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyContext(dpy, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXMakeCurrent( Display * dpy, GLXDrawable drawable, GLXContext ctx ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXMakeCurrent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXMakeCurrent(dpy, drawable, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXCopyContext( Display * dpy, GLXContext src, GLXContext dst, unsigned long mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXCopyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)src);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)dst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXCopyContext(dpy, src, dst, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXSwapBuffers( Display * dpy, GLXDrawable drawable ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXSwapBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXSwapBuffers(dpy, drawable);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLXPixmap glXCreateGLXPixmap( Display * dpy, XVisualInfo * visual, Pixmap pixmap ) {
    GLXPixmap _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateGLXPixmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (visual) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*visual).visual);
    trace::localWriter.writeUInt((*visual).visualid);
    trace::localWriter.writeSInt((*visual).screen);
    trace::localWriter.writeSInt((*visual).depth);
    trace::localWriter.writeSInt((*visual).c_class);
    trace::localWriter.writeUInt((*visual).red_mask);
    trace::localWriter.writeUInt((*visual).green_mask);
    trace::localWriter.writeUInt((*visual).blue_mask);
    trace::localWriter.writeSInt((*visual).colormap_size);
    trace::localWriter.writeSInt((*visual).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateGLXPixmap(dpy, visual, pixmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyGLXPixmap( Display * dpy, GLXPixmap pixmap ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyGLXPixmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyGLXPixmap(dpy, pixmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXQueryExtension( Display * dpy, int * errorb, int * event ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryExtension_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryExtension(dpy, errorb, event);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (errorb) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*errorb);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (event) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*event);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryVersion( Display * dpy, int * maj, int * min ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryVersion_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryVersion(dpy, maj, min);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (maj) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*maj);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (min) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*min);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXIsDirect( Display * dpy, GLXContext ctx ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXIsDirect_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXIsDirect(dpy, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetConfig( Display * dpy, XVisualInfo * visual, int attrib, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetConfig_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (visual) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*visual).visual);
    trace::localWriter.writeUInt((*visual).visualid);
    trace::localWriter.writeSInt((*visual).screen);
    trace::localWriter.writeSInt((*visual).depth);
    trace::localWriter.writeSInt((*visual).c_class);
    trace::localWriter.writeUInt((*visual).red_mask);
    trace::localWriter.writeUInt((*visual).green_mask);
    trace::localWriter.writeUInt((*visual).blue_mask);
    trace::localWriter.writeSInt((*visual).colormap_size);
    trace::localWriter.writeSInt((*visual).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, attrib);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetConfig(dpy, visual, attrib, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint3_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXContext glXGetCurrentContext(  ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentContext_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentContext();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXDrawable glXGetCurrentDrawable(  ) {
    GLXDrawable _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentDrawable_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentDrawable();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXWaitGL(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXWaitGL_sig);
    trace::localWriter.endEnter();
    _glXWaitGL();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXWaitX(  ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXWaitX_sig);
    trace::localWriter.endEnter();
    _glXWaitX();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXUseXFont( Font font, int first, int count, int list ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXUseXFont_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(font);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(list);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXUseXFont(font, first, count, list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

const char * glXQueryExtensionsString( Display * dpy, int screen ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryExtensionsString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryExtensionsString(dpy, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

const char * glXQueryServerString( Display * dpy, int screen, int name ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryServerString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint4_sig, name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryServerString(dpy, screen, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

const char * glXGetClientString( Display * dpy, int name ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetClientString_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumint4_sig, name);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetClientString(dpy, name);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

Display * glXGetCurrentDisplay(  ) {
    Display * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentDisplay_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentDisplay();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXFBConfig * glXChooseFBConfig( Display * dpy, int screen, const int * attribList, int * nitems ) {
    GLXFBConfig * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXChooseFBConfig_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCint21;
    for (_cCint21 = 0; attribList && attribList[_cCint21] != 0; _cCint21 += 2) {
    }
    _cCint21 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint21);
    for (int _iCint21 = 0; _iCint21 < _cCint21; _iCint21++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attribList[_iCint21]);
        trace::localWriter.endElement();
        if (_iCint21 + 1 >= _cCint21) {
            break;
        }
        switch (int(attribList[_iCint21++])) {
        case GLX_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DEPTH_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_STENCIL_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_BUFFER_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_LEVEL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DOUBLEBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_STEREO:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_AUX_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLE_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLES:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_RENDER_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint8_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DRAWABLE_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint9_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_X_RENDERABLE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_X_VISUAL_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint10_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_CONFIG_CAVEAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint11_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint12_sig, (attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_INDEX_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_RED_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_GREEN_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_BLUE_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_ALPHA_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_FBCONFIG_ID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_WIDTH:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_HEIGHT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_PIXELS:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_VISUAL_ID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint21]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iCint21 - 1]));
            trace::localWriter.writeSInt(attribList[_iCint21]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXChooseFBConfig(dpy, screen, attribList, nitems);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (nitems) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nitems);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    if (_result) {
        size_t _cGLXFBConfig = *nitems > 0 ? *nitems : 0;
        trace::localWriter.beginArray(_cGLXFBConfig);
        for (size_t _iGLXFBConfig = 0; _iGLXFBConfig < _cGLXFBConfig; ++_iGLXFBConfig) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(_result)[_iGLXFBConfig]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetFBConfigAttrib( Display * dpy, GLXFBConfig config, int attribute, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetFBConfigAttrib_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetFBConfigAttrib(dpy, config, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXFBConfig * glXGetFBConfigs( Display * dpy, int screen, int * nelements ) {
    GLXFBConfig * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetFBConfigs_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetFBConfigs(dpy, screen, nelements);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (nelements) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nelements);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    if (_result) {
        size_t _cGLXFBConfig = *nelements > 0 ? *nelements : 0;
        trace::localWriter.beginArray(_cGLXFBConfig);
        for (size_t _iGLXFBConfig = 0; _iGLXFBConfig < _cGLXFBConfig; ++_iGLXFBConfig) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(_result)[_iGLXFBConfig]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

XVisualInfo * glXGetVisualFromFBConfig( Display * dpy, GLXFBConfig config ) {
    XVisualInfo * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetVisualFromFBConfig_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetVisualFromFBConfig(dpy, config);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    if (_result) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*_result).visual);
    trace::localWriter.writeUInt((*_result).visualid);
    trace::localWriter.writeSInt((*_result).screen);
    trace::localWriter.writeSInt((*_result).depth);
    trace::localWriter.writeSInt((*_result).c_class);
    trace::localWriter.writeUInt((*_result).red_mask);
    trace::localWriter.writeUInt((*_result).green_mask);
    trace::localWriter.writeUInt((*_result).blue_mask);
    trace::localWriter.writeSInt((*_result).colormap_size);
    trace::localWriter.writeSInt((*_result).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXWindow glXCreateWindow( Display * dpy, GLXFBConfig config, Window win, const int * attribList ) {
    GLXWindow _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateWindow_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(win);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCint2;
    for (_cCint2 = 0; attribList && attribList[_cCint2] != 0; _cCint2 += 2) {
    }
    _cCint2 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint2);
    for (int _iCint2 = 0; _iCint2 < _cCint2; _iCint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attribList[_iCint2]);
        trace::localWriter.endElement();
        if (_iCint2 + 1 >= _cCint2) {
            break;
        }
        switch (int(attribList[_iCint2++])) {
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iCint2 - 1]));
            trace::localWriter.writeSInt(attribList[_iCint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateWindow(dpy, config, win, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyWindow( Display * dpy, GLXWindow window ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyWindow_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(window);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyWindow(dpy, window);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLXPixmap glXCreatePixmap( Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attribList ) {
    GLXPixmap _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreatePixmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCint2;
    for (_cCint2 = 0; attribList && attribList[_cCint2] != 0; _cCint2 += 2) {
    }
    _cCint2 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint2);
    for (int _iCint2 = 0; _iCint2 < _cCint2; _iCint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attribList[_iCint2]);
        trace::localWriter.endElement();
        if (_iCint2 + 1 >= _cCint2) {
            break;
        }
        switch (int(attribList[_iCint2++])) {
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iCint2 - 1]));
            trace::localWriter.writeSInt(attribList[_iCint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreatePixmap(dpy, config, pixmap, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyPixmap( Display * dpy, GLXPixmap pixmap ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyPixmap_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyPixmap(dpy, pixmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLXPbuffer glXCreatePbuffer( Display * dpy, GLXFBConfig config, const int * attribList ) {
    GLXPbuffer _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreatePbuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCint23;
    for (_cCint23 = 0; attribList && attribList[_cCint23] != 0; _cCint23 += 2) {
    }
    _cCint23 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint23);
    for (int _iCint23 = 0; _iCint23 < _cCint23; _iCint23++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attribList[_iCint23]);
        trace::localWriter.endElement();
        if (_iCint23 + 1 >= _cCint23) {
            break;
        }
        switch (int(attribList[_iCint23++])) {
        case GLX_PBUFFER_WIDTH:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint23]);
            trace::localWriter.endElement();
            break;
        case GLX_PBUFFER_HEIGHT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint23]);
            trace::localWriter.endElement();
            break;
        case GLX_LARGEST_PBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attribList)[_iCint23]);
            trace::localWriter.endElement();
            break;
        case GLX_PRESERVED_CONTENTS:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attribList)[_iCint23]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iCint23 - 1]));
            trace::localWriter.writeSInt(attribList[_iCint23]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreatePbuffer(dpy, config, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyPbuffer( Display * dpy, GLXPbuffer pbuf ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyPbuffer_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyPbuffer(dpy, pbuf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXQueryDrawable( Display * dpy, GLXDrawable draw, int attribute, unsigned int * value ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryDrawable_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(draw);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXQueryDrawable(dpy, draw, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLXContext glXCreateNewContext( Display * dpy, GLXFBConfig config, int renderType, GLXContext shareList, int direct ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateNewContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, renderType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)shareList);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumint1_sig, direct);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateNewContext(dpy, config, renderType, shareList, direct);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXMakeContextCurrent( Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXMakeContextCurrent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(draw);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(read);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXMakeContextCurrent(dpy, draw, read, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXDrawable glXGetCurrentReadDrawable(  ) {
    GLXDrawable _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentReadDrawable_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentReadDrawable();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryContext( Display * dpy, GLXContext ctx, int attribute, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryContext(dpy, ctx, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXSelectEvent( Display * dpy, GLXDrawable drawable, unsigned long mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXSelectEvent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXSelectEvent(dpy, drawable, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXGetSelectedEvent( Display * dpy, GLXDrawable drawable, unsigned long * mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXGetSelectedEvent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXGetSelectedEvent(dpy, drawable, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (mask) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*mask);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

GLXContext glXCreateContextAttribsARB( Display * dpy, GLXFBConfig config, GLXContext share_context, int direct, const int * attrib_list ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateContextAttribsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)share_context);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumint1_sig, direct);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cCint22;
    for (_cCint22 = 0; attrib_list && attrib_list[_cCint22] != 0; _cCint22 += 2) {
    }
    _cCint22 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCint22);
    for (int _iCint22 = 0; _iCint22 < _cCint22; _iCint22++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attrib_list[_iCint22]);
        trace::localWriter.endElement();
        if (_iCint22 + 1 >= _cCint22) {
            break;
        }
        switch (int(attrib_list[_iCint22++])) {
        case GLX_RENDER_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint14_sig, (attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        case GLX_CONTEXT_MAJOR_VERSION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        case GLX_CONTEXT_MINOR_VERSION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        case GLX_CONTEXT_FLAGS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint15_sig, (attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        case GLX_CONTEXT_PROFILE_MASK_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint16_sig, (attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        case GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, (attrib_list)[_iCint22]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCint22 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCint22]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXSwapIntervalSGI( int interval ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXSwapIntervalSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(interval);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXSwapIntervalSGI(interval);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetVideoSyncSGI( unsigned int * count ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetVideoSyncSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetVideoSyncSGI(count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXWaitVideoSyncSGI( int divisor, int remainder, unsigned int * count ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXWaitVideoSyncSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXWaitVideoSyncSGI(divisor, remainder, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXMakeCurrentReadSGI( Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXMakeCurrentReadSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(draw);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(read);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)ctx);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXMakeCurrentReadSGI(dpy, draw, read, ctx);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXDrawable glXGetCurrentReadDrawableSGI(  ) {
    GLXDrawable _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentReadDrawableSGI_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentReadDrawableSGI();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

Display * glXGetCurrentDisplayEXT(  ) {
    Display * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetCurrentDisplayEXT_sig);
    trace::localWriter.endEnter();
    _result = _glXGetCurrentDisplayEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryContextInfoEXT( Display * dpy, GLXContext context, int attribute, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryContextInfoEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)context);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(attribute);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)value);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryContextInfoEXT(dpy, context, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXContextID glXGetContextIDEXT( const GLXContext context ) {
    GLXContextID _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetContextIDEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)context);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetContextIDEXT(context);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXContext glXImportContextEXT( Display * dpy, GLXContextID contextID ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXImportContextEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(contextID);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXImportContextEXT(dpy, contextID);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXFreeContextEXT( Display * dpy, GLXContext context ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXFreeContextEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)context);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXFreeContextEXT(dpy, context);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXGetFBConfigAttribSGIX( Display * dpy, GLXFBConfigSGIX config, int attribute, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetFBConfigAttribSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXFBConfigSGIX * glXChooseFBConfigSGIX( Display * dpy, int screen, int * attrib_list, int * nelements ) {
    GLXFBConfigSGIX * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXChooseFBConfigSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cint2;
    for (_cint2 = 0; attrib_list && attrib_list[_cint2] != 0; _cint2 += 2) {
    }
    _cint2 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cint2);
    for (int _iint2 = 0; _iint2 < _cint2; _iint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attrib_list[_iint2]);
        trace::localWriter.endElement();
        if (_iint2 + 1 >= _cint2) {
            break;
        }
        switch (int(attrib_list[_iint2++])) {
        case GLX_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_DEPTH_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_STENCIL_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_BUFFER_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_LEVEL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_DOUBLEBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_STEREO:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_AUX_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLE_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLES:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_RENDER_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint8_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_DRAWABLE_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint9_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_X_RENDERABLE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_X_VISUAL_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint10_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_CONFIG_CAVEAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint11_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint12_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_INDEX_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_RED_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_GREEN_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_BLUE_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_ALPHA_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iint2 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (nelements) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nelements);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXPixmap glXCreateGLXPixmapWithConfigSGIX( Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap ) {
    GLXPixmap _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateGLXPixmapWithConfigSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXContext glXCreateContextWithConfigSGIX( Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, int direct ) {
    GLXContext _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateContextWithConfigSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(render_type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)share_list);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumint1_sig, direct);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

XVisualInfo * glXGetVisualFromFBConfigSGIX( Display * dpy, GLXFBConfigSGIX config ) {
    XVisualInfo * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetVisualFromFBConfigSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetVisualFromFBConfigSGIX(dpy, config);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    if (_result) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*_result).visual);
    trace::localWriter.writeUInt((*_result).visualid);
    trace::localWriter.writeSInt((*_result).screen);
    trace::localWriter.writeSInt((*_result).depth);
    trace::localWriter.writeSInt((*_result).c_class);
    trace::localWriter.writeUInt((*_result).red_mask);
    trace::localWriter.writeUInt((*_result).green_mask);
    trace::localWriter.writeUInt((*_result).blue_mask);
    trace::localWriter.writeSInt((*_result).colormap_size);
    trace::localWriter.writeSInt((*_result).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX( Display * dpy, XVisualInfo * vis ) {
    GLXFBConfigSGIX _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetFBConfigFromVisualSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetFBConfigFromVisualSGIX(dpy, vis);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (vis) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*vis).visual);
    trace::localWriter.writeUInt((*vis).visualid);
    trace::localWriter.writeSInt((*vis).screen);
    trace::localWriter.writeSInt((*vis).depth);
    trace::localWriter.writeSInt((*vis).c_class);
    trace::localWriter.writeUInt((*vis).red_mask);
    trace::localWriter.writeUInt((*vis).green_mask);
    trace::localWriter.writeUInt((*vis).blue_mask);
    trace::localWriter.writeSInt((*vis).colormap_size);
    trace::localWriter.writeSInt((*vis).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXPbufferSGIX glXCreateGLXPbufferSGIX( Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list ) {
    GLXPbufferSGIX _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateGLXPbufferSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)config);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cint2;
    for (_cint2 = 0; attrib_list && attrib_list[_cint2] != 0; _cint2 += 2) {
    }
    _cint2 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cint2);
    for (int _iint2 = 0; _iint2 < _cint2; _iint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attrib_list[_iint2]);
        trace::localWriter.endElement();
        if (_iint2 + 1 >= _cint2) {
            break;
        }
        switch (int(attrib_list[_iint2++])) {
        case GLX_PRESERVED_CONTENTS_SGIX:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_LARGEST_PBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        case GLX_DIGITAL_MEDIA_PBUFFER_SGIX:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iint2]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iint2 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXDestroyGLXPbufferSGIX( Display * dpy, GLXPbufferSGIX pbuf ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXDestroyGLXPbufferSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXDestroyGLXPbufferSGIX(dpy, pbuf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXQueryGLXPbufferSGIX( Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryGLXPbufferSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXSelectEventSGIX( Display * dpy, GLXDrawable drawable, unsigned long mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXSelectEventSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXSelectEventSGIX(dpy, drawable, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXGetSelectedEventSGIX( Display * dpy, GLXDrawable drawable, unsigned long * mask ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXGetSelectedEventSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXGetSelectedEventSGIX(dpy, drawable, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (mask) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*mask);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.endLeave();
}

void glXCushionSGI( Display * dpy, Window window, float cushion ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXCushionSGI_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(window);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(cushion);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXCushionSGI(dpy, window, cushion);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXBindChannelToWindowSGIX( Display * display, int screen, int channel, Window window ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXBindChannelToWindowSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(channel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(window);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXBindChannelToWindowSGIX(display, screen, channel, window);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXChannelRectSGIX( Display * display, int screen, int channel, int x, int y, int w, int h ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXChannelRectSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(channel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(w);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(h);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXChannelRectSGIX(display, screen, channel, x, y, w, h);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryChannelRectSGIX( Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryChannelRectSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(channel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)dx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)dy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)dw);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)dh);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryChannelDeltasSGIX( Display * display, int screen, int channel, int * x, int * y, int * w, int * h ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryChannelDeltasSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(channel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)w);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)h);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXChannelRectSyncSGIX( Display * display, int screen, int channel, GLenum synctype ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXChannelRectSyncSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(channel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, synctype);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXChannelRectSyncSGIX(display, screen, channel, synctype);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXJoinSwapGroupSGIX( Display * dpy, GLXDrawable drawable, GLXDrawable member ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXJoinSwapGroupSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(member);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXJoinSwapGroupSGIX(dpy, drawable, member);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXBindSwapBarrierSGIX( Display * dpy, GLXDrawable drawable, int barrier ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXBindSwapBarrierSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(barrier);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXBindSwapBarrierSGIX(dpy, drawable, barrier);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXQueryMaxSwapBarriersSGIX( Display * dpy, int screen, int * max ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryMaxSwapBarriersSGIX_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)max);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXCopySubBufferMESA( Display * dpy, GLXDrawable drawable, int x, int y, int width, int height ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXCopySubBufferMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

GLXPixmap glXCreateGLXPixmapMESA( Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap ) {
    GLXPixmap _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXCreateGLXPixmapMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (visual) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structXVisualInfo_sig);
    trace::localWriter.writePointer((uintptr_t)(*visual).visual);
    trace::localWriter.writeUInt((*visual).visualid);
    trace::localWriter.writeSInt((*visual).screen);
    trace::localWriter.writeSInt((*visual).depth);
    trace::localWriter.writeSInt((*visual).c_class);
    trace::localWriter.writeUInt((*visual).red_mask);
    trace::localWriter.writeUInt((*visual).green_mask);
    trace::localWriter.writeUInt((*visual).blue_mask);
    trace::localWriter.writeSInt((*visual).colormap_size);
    trace::localWriter.writeSInt((*visual).bits_per_rgb);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pixmap);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(cmap);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXReleaseBuffersMESA( Display * dpy, GLXDrawable drawable ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXReleaseBuffersMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXReleaseBuffersMESA(dpy, drawable);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXSet3DfxModeMESA( int mode ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXSet3DfxModeMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(mode);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXSet3DfxModeMESA(mode);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXSwapIntervalMESA( unsigned int interval ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXSwapIntervalMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(interval);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXSwapIntervalMESA(interval);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetSwapIntervalMESA(  ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetSwapIntervalMESA_sig);
    trace::localWriter.endEnter();
    _result = _glXGetSwapIntervalMESA();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetSyncValuesOML( Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetSyncValuesOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)ust);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)sbc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetMscRateOML( Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetMscRateOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)numerator);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)denominator);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetMscRateOML(dpy, drawable, numerator, denominator);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int64_t glXSwapBuffersMscOML( Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder ) {
    int64_t _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXSwapBuffersMscOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(target_msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXWaitForMscOML( Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXWaitForMscOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(target_msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)ust);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writePointer((uintptr_t)msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writePointer((uintptr_t)sbc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXWaitForSbcOML( Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXWaitForSbcOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(target_sbc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)ust);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writePointer((uintptr_t)sbc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

unsigned int glXGetAGPOffsetMESA( const void * pointer ) {
    unsigned int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetAGPOffsetMESA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetAGPOffsetMESA(pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXBindTexImageEXT( Display * display, GLXDrawable drawable, int buffer, const int * attrib_list ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXBindTexImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCint21;
    for (_cCint21 = 0; attrib_list && attrib_list[_cCint21] != 0; _cCint21 += 2) {
    }
    _cCint21 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCint21);
    for (int _iCint21 = 0; _iCint21 < _cCint21; _iCint21++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attrib_list[_iCint21]);
        trace::localWriter.endElement();
        if (_iCint21 + 1 >= _cCint21) {
            break;
        }
        switch (int(attrib_list[_iCint21++])) {
        case GLX_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DEPTH_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_STENCIL_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_RED_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_GREEN_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_BLUE_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_ACCUM_ALPHA_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_BUFFER_SIZE:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_LEVEL:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DOUBLEBUFFER:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_STEREO:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_AUX_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLE_BUFFERS:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_SAMPLES:
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_RENDER_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint8_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_DRAWABLE_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint9_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_X_RENDERABLE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint1_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_X_VISUAL_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint10_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_CONFIG_CAVEAT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint11_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_TYPE:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint12_sig, (attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_INDEX_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_RED_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_GREEN_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_BLUE_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_TRANSPARENT_ALPHA_VALUE:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_FBCONFIG_ID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_WIDTH:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_HEIGHT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_MAX_PBUFFER_PIXELS:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        case GLX_VISUAL_ID:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attrib_list)[_iCint21]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCint21 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCint21]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXBindTexImageEXT(display, drawable, buffer, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXReleaseTexImageEXT( Display * display, GLXDrawable drawable, int buffer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXReleaseTexImageEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)display);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumint2_sig, buffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXReleaseTexImageEXT(display, drawable, buffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

unsigned int * glXEnumerateVideoDevicesNV( Display * dpy, int screen, int * nelements ) {
    unsigned int * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXEnumerateVideoDevicesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXEnumerateVideoDevicesNV(dpy, screen, nelements);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (nelements) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nelements);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    if (_result) {
        size_t _cunsignedint = (nelements ? *nelements : 0) > 0 ? (nelements ? *nelements : 0) : 0;
        trace::localWriter.beginArray(_cunsignedint);
        for (size_t _iunsignedint = 0; _iunsignedint < _cunsignedint; ++_iunsignedint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((_result)[_iunsignedint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXBindVideoDeviceNV( Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXBindVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(video_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(video_device);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    {
    int _cCint2;
    for (_cCint2 = 0; attrib_list && attrib_list[_cCint2] != 0; _cCint2 += 2) {
    }
    _cCint2 += attrib_list ? 1 : 0;
    trace::localWriter.beginArray(_cCint2);
    for (int _iCint2 = 0; _iCint2 < _cCint2; _iCint2++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint2_sig, attrib_list[_iCint2]);
        trace::localWriter.endElement();
        if (_iCint2 + 1 >= _cCint2) {
            break;
        }
        switch (int(attrib_list[_iCint2++])) {
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attrib_list[_iCint2 - 1]));
            trace::localWriter.writeSInt(attrib_list[_iCint2]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetVideoDeviceNV( Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(numVideoDevices);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (pVideoDevice) {
        size_t _cGLXVideoDeviceNV = numVideoDevices > 0 ? numVideoDevices : 0;
        trace::localWriter.beginArray(_cGLXVideoDeviceNV);
        for (size_t _iGLXVideoDeviceNV = 0; _iGLXVideoDeviceNV < _cGLXVideoDeviceNV; ++_iGLXVideoDeviceNV) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pVideoDevice)[_iGLXVideoDeviceNV]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXReleaseVideoDeviceNV( Display * dpy, int screen, GLXVideoDeviceNV VideoDevice ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXReleaseVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(VideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXBindVideoImageNV( Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXBindVideoImageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(VideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(iVideoBuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXReleaseVideoImageNV( Display * dpy, GLXPbuffer pbuf ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXReleaseVideoImageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXReleaseVideoImageNV(dpy, pbuf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXSendPbufferToVideoNV( Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXSendPbufferToVideoNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(pbuf);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iBufferType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, bBlock);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (pulCounterPbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterPbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXGetVideoInfoNV( Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetVideoInfoNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(VideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (pulCounterOutputPbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterOutputPbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (pulCounterOutputVideo) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterOutputVideo);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXJoinSwapGroupNV( Display * dpy, GLXDrawable drawable, GLuint group ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXJoinSwapGroupNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXJoinSwapGroupNV(dpy, drawable, group);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXBindSwapBarrierNV( Display * dpy, GLuint group, GLuint barrier ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXBindSwapBarrierNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(barrier);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXBindSwapBarrierNV(dpy, group, barrier);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQuerySwapGroupNV( Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQuerySwapGroupNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)barrier);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQuerySwapGroupNV(dpy, drawable, group, barrier);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryMaxSwapGroupsNV( Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryMaxSwapGroupsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)maxGroups);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)maxBarriers);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXQueryFrameCountNV( Display * dpy, int screen, GLuint * count ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryFrameCountNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryFrameCountNV(dpy, screen, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXResetFrameCountNV( Display * dpy, int screen ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXResetFrameCountNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXResetFrameCountNV(dpy, screen);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumint1_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int glXBindVideoCaptureDeviceNV( Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXBindVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(video_capture_slot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(device);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV( Display * dpy, int screen, int * nelements ) {
    GLXVideoCaptureDeviceNV * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXEnumerateVideoCaptureDevicesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(screen);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (nelements) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*nelements);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    if (_result) {
        size_t _cGLXVideoCaptureDeviceNV = (nelements ? *nelements : 0) > 0 ? (nelements ? *nelements : 0) : 0;
        trace::localWriter.beginArray(_cGLXVideoCaptureDeviceNV);
        for (size_t _iGLXVideoCaptureDeviceNV = 0; _iGLXVideoCaptureDeviceNV < _cGLXVideoCaptureDeviceNV; ++_iGLXVideoCaptureDeviceNV) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((_result)[_iGLXVideoCaptureDeviceNV]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXLockVideoCaptureDeviceNV( Display * dpy, GLXVideoCaptureDeviceNV device ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXLockVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(device);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXLockVideoCaptureDeviceNV(dpy, device);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

int glXQueryVideoCaptureDeviceNV( Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXQueryVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(device);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(attribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (value) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*value);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXReleaseVideoCaptureDeviceNV( Display * dpy, GLXVideoCaptureDeviceNV device ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXReleaseVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(device);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXReleaseVideoCaptureDeviceNV(dpy, device);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXSwapIntervalEXT( Display * dpy, GLXDrawable drawable, int interval ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXSwapIntervalEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(drawable);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(interval);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXSwapIntervalEXT(dpy, drawable, interval);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void glXCopyImageSubDataNV( Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXCopyImageSubDataNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dpy);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)srcCtx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(srcName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(srcLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(srcX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(srcY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(srcZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writePointer((uintptr_t)dstCtx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(dstName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(dstLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(dstX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writeSInt(dstY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(14);
    trace::localWriter.writeSInt(dstZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(15);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(16);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(17);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

void * glXAllocateMemoryNV( GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority ) {
    void * _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXAllocateMemoryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(readfreq);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(writefreq);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(priority);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXAllocateMemoryNV(size, readfreq, writefreq, priority);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void glXFreeMemoryNV( void * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_glXFreeMemoryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _glXFreeMemoryNV(pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

__GLXextFuncPtr glXGetProcAddressARB( const GLubyte * procName ) {
    __GLXextFuncPtr _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetProcAddressARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeString(reinterpret_cast<const char *>(procName));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetProcAddressARB(procName);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

__GLXextFuncPtr glXGetProcAddress( const GLubyte * procName ) {
    __GLXextFuncPtr _result;
    unsigned _call = trace::localWriter.beginEnter(&_glXGetProcAddress_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeString(reinterpret_cast<const char *>(procName));
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _glXGetProcAddress(procName);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}


} /* namespace Trace */ } /* namespace Regal */

#endif // REGAL_SYS_GLX

#if REGAL_SYS_WGL

namespace Regal { namespace Trace {

HGLRC wglCreateContext( HDC hdc ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateContext(hdc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDeleteContext( HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDeleteContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDeleteContext(hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglGetCurrentContext(  ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetCurrentContext_sig);
    trace::localWriter.endEnter();
    _result = _wglGetCurrentContext();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglMakeCurrent( HDC hdc, HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglMakeCurrent_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglMakeCurrent(hdc, hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglCopyContext( HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCopyContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrcSrc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hglrcDst);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCopyContext(hglrcSrc, hglrcDst, mask);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglChoosePixelFormat( HDC hdc, const PIXELFORMATDESCRIPTOR * ppfd ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglChoosePixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ppfd) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structPIXELFORMATDESCRIPTOR_sig);
    trace::localWriter.writeUInt((*ppfd).nSize);
    trace::localWriter.writeUInt((*ppfd).nVersion);
    trace::localWriter.writeBitmask(&_bitmaskDWORD1_sig, (*ppfd).dwFlags);
    trace::localWriter.writeUInt((*ppfd).iPixelType);
    trace::localWriter.writeUInt((*ppfd).cColorBits);
    trace::localWriter.writeUInt((*ppfd).cRedBits);
    trace::localWriter.writeUInt((*ppfd).cRedShift);
    trace::localWriter.writeUInt((*ppfd).cGreenBits);
    trace::localWriter.writeUInt((*ppfd).cGreenShift);
    trace::localWriter.writeUInt((*ppfd).cBlueBits);
    trace::localWriter.writeUInt((*ppfd).cBlueShift);
    trace::localWriter.writeUInt((*ppfd).cAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cAlphaShift);
    trace::localWriter.writeUInt((*ppfd).cAccumBits);
    trace::localWriter.writeUInt((*ppfd).cAccumRedBits);
    trace::localWriter.writeUInt((*ppfd).cAccumGreenBits);
    trace::localWriter.writeUInt((*ppfd).cAccumBlueBits);
    trace::localWriter.writeUInt((*ppfd).cAccumAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cDepthBits);
    trace::localWriter.writeUInt((*ppfd).cStencilBits);
    trace::localWriter.writeUInt((*ppfd).cAuxBuffers);
    trace::localWriter.writeUInt((*ppfd).iLayerType);
    trace::localWriter.writeUInt((*ppfd).bReserved);
    trace::localWriter.writeUInt((*ppfd).dwLayerMask);
    trace::localWriter.writeUInt((*ppfd).dwVisibleMask);
    trace::localWriter.writeUInt((*ppfd).dwDamageMask);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglChoosePixelFormat(hdc, ppfd);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglDescribePixelFormat( HDC hdc, int iPixelFormat, UINT nBytes, PIXELFORMATDESCRIPTOR * ppfd ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDescribePixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(nBytes);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDescribePixelFormat(hdc, iPixelFormat, nBytes, ppfd);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (ppfd) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structPIXELFORMATDESCRIPTOR_sig);
    trace::localWriter.writeUInt((*ppfd).nSize);
    trace::localWriter.writeUInt((*ppfd).nVersion);
    trace::localWriter.writeBitmask(&_bitmaskDWORD1_sig, (*ppfd).dwFlags);
    trace::localWriter.writeUInt((*ppfd).iPixelType);
    trace::localWriter.writeUInt((*ppfd).cColorBits);
    trace::localWriter.writeUInt((*ppfd).cRedBits);
    trace::localWriter.writeUInt((*ppfd).cRedShift);
    trace::localWriter.writeUInt((*ppfd).cGreenBits);
    trace::localWriter.writeUInt((*ppfd).cGreenShift);
    trace::localWriter.writeUInt((*ppfd).cBlueBits);
    trace::localWriter.writeUInt((*ppfd).cBlueShift);
    trace::localWriter.writeUInt((*ppfd).cAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cAlphaShift);
    trace::localWriter.writeUInt((*ppfd).cAccumBits);
    trace::localWriter.writeUInt((*ppfd).cAccumRedBits);
    trace::localWriter.writeUInt((*ppfd).cAccumGreenBits);
    trace::localWriter.writeUInt((*ppfd).cAccumBlueBits);
    trace::localWriter.writeUInt((*ppfd).cAccumAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cDepthBits);
    trace::localWriter.writeUInt((*ppfd).cStencilBits);
    trace::localWriter.writeUInt((*ppfd).cAuxBuffers);
    trace::localWriter.writeUInt((*ppfd).iLayerType);
    trace::localWriter.writeUInt((*ppfd).bReserved);
    trace::localWriter.writeUInt((*ppfd).dwLayerMask);
    trace::localWriter.writeUInt((*ppfd).dwVisibleMask);
    trace::localWriter.writeUInt((*ppfd).dwDamageMask);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglGetCurrentDC(  ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetCurrentDC_sig);
    trace::localWriter.endEnter();
    _result = _wglGetCurrentDC();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

PROC wglGetDefaultProcAddress( const char * lpszProc ) {
    PROC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetDefaultProcAddress_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeString(lpszProc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetDefaultProcAddress(lpszProc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglGetPixelFormat( HDC hdc ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPixelFormat(hdc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetPixelFormat( HDC hdc, int iPixelFormat, const PIXELFORMATDESCRIPTOR * ppfd ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetPixelFormat_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (ppfd) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structPIXELFORMATDESCRIPTOR_sig);
    trace::localWriter.writeUInt((*ppfd).nSize);
    trace::localWriter.writeUInt((*ppfd).nVersion);
    trace::localWriter.writeBitmask(&_bitmaskDWORD1_sig, (*ppfd).dwFlags);
    trace::localWriter.writeUInt((*ppfd).iPixelType);
    trace::localWriter.writeUInt((*ppfd).cColorBits);
    trace::localWriter.writeUInt((*ppfd).cRedBits);
    trace::localWriter.writeUInt((*ppfd).cRedShift);
    trace::localWriter.writeUInt((*ppfd).cGreenBits);
    trace::localWriter.writeUInt((*ppfd).cGreenShift);
    trace::localWriter.writeUInt((*ppfd).cBlueBits);
    trace::localWriter.writeUInt((*ppfd).cBlueShift);
    trace::localWriter.writeUInt((*ppfd).cAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cAlphaShift);
    trace::localWriter.writeUInt((*ppfd).cAccumBits);
    trace::localWriter.writeUInt((*ppfd).cAccumRedBits);
    trace::localWriter.writeUInt((*ppfd).cAccumGreenBits);
    trace::localWriter.writeUInt((*ppfd).cAccumBlueBits);
    trace::localWriter.writeUInt((*ppfd).cAccumAlphaBits);
    trace::localWriter.writeUInt((*ppfd).cDepthBits);
    trace::localWriter.writeUInt((*ppfd).cStencilBits);
    trace::localWriter.writeUInt((*ppfd).cAuxBuffers);
    trace::localWriter.writeUInt((*ppfd).iLayerType);
    trace::localWriter.writeUInt((*ppfd).bReserved);
    trace::localWriter.writeUInt((*ppfd).dwLayerMask);
    trace::localWriter.writeUInt((*ppfd).dwVisibleMask);
    trace::localWriter.writeUInt((*ppfd).dwDamageMask);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetPixelFormat(hdc, iPixelFormat, ppfd);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSwapBuffers( HDC hdc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapBuffers(hdc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglShareLists( HGLRC hglrc1, HGLRC hglrc2 ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglShareLists_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrc1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hglrc2);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglShareLists(hglrc1, hglrc2);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglCreateLayerContext( HDC hdc, int iLayerPlane ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateLayerContext_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateLayerContext(hdc, iLayerPlane);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDescribeLayerPlane( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nBytes, LAYERPLANEDESCRIPTOR * plpd ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDescribeLayerPlane_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nBytes);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDescribeLayerPlane(hdc, iPixelFormat, iLayerPlane, nBytes, plpd);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (plpd) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structLAYERPLANEDESCRIPTOR_sig);
    trace::localWriter.writeUInt((*plpd).nSize);
    trace::localWriter.writeUInt((*plpd).nVersion);
    trace::localWriter.writeUInt((*plpd).dwFlags);
    trace::localWriter.writeUInt((*plpd).iPixelType);
    trace::localWriter.writeUInt((*plpd).cColorBits);
    trace::localWriter.writeUInt((*plpd).cRedBits);
    trace::localWriter.writeUInt((*plpd).cRedShift);
    trace::localWriter.writeUInt((*plpd).cGreenBits);
    trace::localWriter.writeUInt((*plpd).cGreenShift);
    trace::localWriter.writeUInt((*plpd).cBlueBits);
    trace::localWriter.writeUInt((*plpd).cBlueShift);
    trace::localWriter.writeUInt((*plpd).cAlphaBits);
    trace::localWriter.writeUInt((*plpd).cAlphaShift);
    trace::localWriter.writeUInt((*plpd).cAccumBits);
    trace::localWriter.writeUInt((*plpd).cAccumRedBits);
    trace::localWriter.writeUInt((*plpd).cAccumGreenBits);
    trace::localWriter.writeUInt((*plpd).cAccumBlueBits);
    trace::localWriter.writeUInt((*plpd).cAccumAlphaBits);
    trace::localWriter.writeUInt((*plpd).cDepthBits);
    trace::localWriter.writeUInt((*plpd).cStencilBits);
    trace::localWriter.writeUInt((*plpd).cAuxBuffers);
    trace::localWriter.writeUInt((*plpd).iLayerPlane);
    trace::localWriter.writeUInt((*plpd).bReserved);
    trace::localWriter.writeUInt((*plpd).crTransparent);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglSetLayerPaletteEntries( HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF * pcr ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetLayerPaletteEntries_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iStart);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(cEntries);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (pcr) {
        size_t _cCCOLORREF1 = cEntries > 0 ? cEntries : 0;
        trace::localWriter.beginArray(_cCCOLORREF1);
        for (size_t _iCCOLORREF1 = 0; _iCCOLORREF1 < _cCCOLORREF1; ++_iCCOLORREF1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pcr)[_iCCOLORREF1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglGetLayerPaletteEntries( HDC hdc, int iLayerPlane, int iStart, int cEntries, COLORREF * pcr ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetLayerPaletteEntries_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iStart);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(cEntries);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetLayerPaletteEntries(hdc, iLayerPlane, iStart, cEntries, pcr);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (pcr) {
        size_t _cCOLORREF1 = cEntries > 0 ? cEntries : 0;
        trace::localWriter.beginArray(_cCOLORREF1);
        for (size_t _iCOLORREF1 = 0; _iCOLORREF1 < _cCOLORREF1; ++_iCOLORREF1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pcr)[_iCOLORREF1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglRealizeLayerPalette( HDC hdc, int iLayerPlane, BOOL bRealize ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglRealizeLayerPalette_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumBOOL_sig, bRealize);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglRealizeLayerPalette(hdc, iLayerPlane, bRealize);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSwapLayerBuffers( HDC hdc, UINT fuPlanes ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapLayerBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(fuPlanes);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapLayerBuffers(hdc, fuPlanes);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglUseFontBitmapsA( HDC hdc, DWORD first, DWORD count, DWORD listBase ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglUseFontBitmapsA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(listBase);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglUseFontBitmapsA(hdc, first, count, listBase);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglUseFontBitmapsW( HDC hdc, DWORD first, DWORD count, DWORD listBase ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglUseFontBitmapsW_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(listBase);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglUseFontBitmapsW(hdc, first, count, listBase);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

DWORD wglSwapMultipleBuffers( UINT n, const WGLSWAP * ps ) {
    DWORD _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapMultipleBuffers_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(n);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (ps) {
        size_t _cCWGLSWAP = n > 0 ? n : 0;
        trace::localWriter.beginArray(_cCWGLSWAP);
        for (size_t _iCWGLSWAP = 0; _iCWGLSWAP < _cCWGLSWAP; ++_iCWGLSWAP) {
            trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structWGLSWAP_sig);
    trace::localWriter.writePointer((uintptr_t)((ps)[_iCWGLSWAP]).hdc);
    trace::localWriter.writeUInt(((ps)[_iCWGLSWAP]).uiFlags);
    trace::localWriter.endStruct();
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapMultipleBuffers(n, ps);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglUseFontOutlinesA( HDC hdc, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, GLYPHMETRICSFLOAT * lpgmf ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglUseFontOutlinesA_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(listBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(deviation);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(extrusion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (lpgmf) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structGLYPHMETRICSFLOAT_sig);
    trace::localWriter.writeFloat((*lpgmf).gmfBlackBoxX);
    trace::localWriter.writeFloat((*lpgmf).gmfBlackBoxY);
    trace::localWriter.beginStruct(&_structPOINTFLOAT_sig);
    trace::localWriter.writeFloat(((*lpgmf).gmfptGlyphOrigin).x);
    trace::localWriter.writeFloat(((*lpgmf).gmfptGlyphOrigin).y);
    trace::localWriter.endStruct();
    trace::localWriter.writeFloat((*lpgmf).gmfCellIncX);
    trace::localWriter.writeFloat((*lpgmf).gmfCellIncY);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglUseFontOutlinesA(hdc, first, count, listBase, deviation, extrusion, format, lpgmf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglUseFontOutlinesW( HDC hdc, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, GLYPHMETRICSFLOAT * lpgmf ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglUseFontOutlinesW_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(first);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(listBase);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeFloat(deviation);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeFloat(extrusion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(format);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    if (lpgmf) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structGLYPHMETRICSFLOAT_sig);
    trace::localWriter.writeFloat((*lpgmf).gmfBlackBoxX);
    trace::localWriter.writeFloat((*lpgmf).gmfBlackBoxY);
    trace::localWriter.beginStruct(&_structPOINTFLOAT_sig);
    trace::localWriter.writeFloat(((*lpgmf).gmfptGlyphOrigin).x);
    trace::localWriter.writeFloat(((*lpgmf).gmfptGlyphOrigin).y);
    trace::localWriter.endStruct();
    trace::localWriter.writeFloat((*lpgmf).gmfCellIncX);
    trace::localWriter.writeFloat((*lpgmf).gmfCellIncY);
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglUseFontOutlinesW(hdc, first, count, listBase, deviation, extrusion, format, lpgmf);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HANDLE wglCreateBufferRegionARB( HDC hDC, int iLayerPlane, UINT uType ) {
    HANDLE _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateBufferRegionARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(uType);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateBufferRegionARB(hDC, iLayerPlane, uType);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void wglDeleteBufferRegionARB( HANDLE hRegion ) {
    unsigned _call = trace::localWriter.beginEnter(&_wglDeleteBufferRegionARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hRegion);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _wglDeleteBufferRegionARB(hRegion);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

BOOL wglSaveBufferRegionARB( HANDLE hRegion, int x, int y, int width, int height ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSaveBufferRegionARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hRegion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSaveBufferRegionARB(hRegion, x, y, width, height);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglRestoreBufferRegionARB( HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglRestoreBufferRegionARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hRegion);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(x);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(y);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(xSrc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(ySrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglRestoreBufferRegionARB(hRegion, x, y, width, height, xSrc, ySrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

const char * wglGetExtensionsStringARB( HDC hdc ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetExtensionsStringARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetExtensionsStringARB(hdc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetPixelFormatAttribivARB( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPixelFormatAttribivARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nAttributes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (piAttributes) {
        size_t _cint43 = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint43);
        for (size_t _iint43 = 0; _iint43 < _cint43; ++_iint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, (piAttributes)[_iint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPixelFormatAttribivARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    if (piValues) {
        size_t _cint = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint);
        for (size_t _iint = 0; _iint < _cint; ++_iint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piValues)[_iint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetPixelFormatAttribfvARB( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPixelFormatAttribfvARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nAttributes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (piAttributes) {
        size_t _cint43 = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint43);
        for (size_t _iint43 = 0; _iint43 < _cint43; ++_iint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, (piAttributes)[_iint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPixelFormatAttribfvARB(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    if (pfValues) {
        size_t _cFLOAT = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cFLOAT);
        for (size_t _iFLOAT = 0; _iFLOAT < _cFLOAT; ++_iFLOAT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((pfValues)[_iFLOAT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglChoosePixelFormatARB( HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglChoosePixelFormatARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    {
    int _cCint431;
    for (_cCint431 = 0; piAttribIList && piAttribIList[_cCint431] != 0; _cCint431 += 2) {
    }
    _cCint431 += piAttribIList ? 1 : 0;
    trace::localWriter.beginArray(_cCint431);
    for (int _iCint431 = 0; _iCint431 < _cCint431; _iCint431++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, piAttribIList[_iCint431]);
        trace::localWriter.endElement();
        if (_iCint431 + 1 >= _cCint431) {
            break;
        }
        switch (int(piAttribIList[_iCint431++])) {
        case WGL_DRAW_TO_WINDOW_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DRAW_TO_BITMAP_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCELERATION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint46_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_SYSTEM_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_LAYER_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_METHOD_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint47_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_OVERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_UNDERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_VALUE_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_DEPTH_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_STENCIL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_ACCUM_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_GDI_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_OPENGL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DOUBLE_BUFFER_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_STEREO_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_PIXEL_TYPE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint48_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_COLOR_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DEPTH_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_STENCIL_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_AUX_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLE_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLES_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(piAttribIList[_iCint431 - 1]));
            trace::localWriter.writeSInt(piAttribIList[_iCint431]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCFLOAT;
    for (_cCFLOAT = 0; pfAttribFList && pfAttribFList[_cCFLOAT] != 0; _cCFLOAT += 2) {
    }
    _cCFLOAT += pfAttribFList ? 1 : 0;
    trace::localWriter.beginArray(_cCFLOAT);
    for (int _iCFLOAT = 0; _iCFLOAT < _cCFLOAT; _iCFLOAT++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(pfAttribFList[_iCFLOAT]);
        trace::localWriter.endElement();
        if (_iCFLOAT + 1 >= _cCFLOAT) {
            break;
        }
        switch (int(pfAttribFList[_iCFLOAT++])) {
        case WGL_DRAW_TO_WINDOW_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DRAW_TO_BITMAP_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCELERATION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint46_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_SYSTEM_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_LAYER_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_METHOD_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint47_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_OVERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_UNDERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_VALUE_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_DEPTH_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_STENCIL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_ACCUM_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_GDI_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_OPENGL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DOUBLE_BUFFER_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_STEREO_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_PIXEL_TYPE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint48_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_COLOR_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DEPTH_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_STENCIL_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_AUX_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLE_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLES_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(pfAttribFList[_iCFLOAT - 1]));
            trace::localWriter.writeSInt(pfAttribFList[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nMaxFormats);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglChoosePixelFormatARB(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (piFormats) {
        size_t _cint = (*nNumFormats) > 0 ? (*nNumFormats) : 0;
        trace::localWriter.beginArray(_cint);
        for (size_t _iint = 0; _iint < _cint; ++_iint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piFormats)[_iint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (nNumFormats) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*nNumFormats);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglMakeContextCurrentARB( HDC hDrawDC, HDC hReadDC, HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglMakeContextCurrentARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDrawDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hReadDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglMakeContextCurrentARB(hDrawDC, hReadDC, hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglGetCurrentReadDCARB(  ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetCurrentReadDCARB_sig);
    trace::localWriter.endEnter();
    _result = _wglGetCurrentReadDCARB();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HPBUFFERARB wglCreatePbufferARB( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList ) {
    HPBUFFERARB _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreatePbufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iWidth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(iHeight);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cCint432;
    for (_cCint432 = 0; piAttribList && piAttribList[_cCint432] != 0; _cCint432 += 2) {
    }
    _cCint432 += piAttribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint432);
    for (int _iCint432 = 0; _iCint432 < _cCint432; _iCint432++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, piAttribList[_iCint432]);
        trace::localWriter.endElement();
        if (_iCint432 + 1 >= _cCint432) {
            break;
        }
        switch (int(piAttribList[_iCint432++])) {
        case WGL_PBUFFER_LARGEST_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribList)[_iCint432]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(piAttribList[_iCint432 - 1]));
            trace::localWriter.writeSInt(piAttribList[_iCint432]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreatePbufferARB(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglGetPbufferDCARB( HPBUFFERARB hPbuffer ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPbufferDCARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPbufferDCARB(hPbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglReleasePbufferDCARB( HPBUFFERARB hPbuffer, HDC hDC ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleasePbufferDCARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleasePbufferDCARB(hPbuffer, hDC);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDestroyPbufferARB( HPBUFFERARB hPbuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDestroyPbufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDestroyPbufferARB(hPbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryPbufferARB( HPBUFFERARB hPbuffer, int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryPbufferARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumint43_sig, iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryPbufferARB(hPbuffer, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (piValue) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*piValue);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglBindTexImageARB( HPBUFFERARB hPbuffer, int iBuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindTexImageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iBuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindTexImageARB(hPbuffer, iBuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglReleaseTexImageARB( HPBUFFERARB hPbuffer, int iBuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleaseTexImageARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iBuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleaseTexImageARB(hPbuffer, iBuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetPbufferAttribARB( HPBUFFERARB hPbuffer, const int * piAttribList ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetPbufferAttribARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    {
    int _cCint433;
    for (_cCint433 = 0; piAttribList && piAttribList[_cCint433] != 0; _cCint433 += 2) {
    }
    _cCint433 += piAttribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint433);
    for (int _iCint433 = 0; _iCint433 < _cCint433; _iCint433++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, piAttribList[_iCint433]);
        trace::localWriter.endElement();
        if (_iCint433 + 1 >= _cCint433) {
            break;
        }
        switch (int(piAttribList[_iCint433++])) {
        case WGL_MIPMAP_LEVEL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribList)[_iCint433]);
            trace::localWriter.endElement();
            break;
        case WGL_CUBE_MAP_FACE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint49_sig, (piAttribList)[_iCint433]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(piAttribList[_iCint433 - 1]));
            trace::localWriter.writeSInt(piAttribList[_iCint433]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetPbufferAttribARB(hPbuffer, piAttribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglCreateContextAttribsARB( HDC hDC, HGLRC hShareContext, const int * attribList ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateContextAttribsARB_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hShareContext);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCint43;
    for (_cCint43 = 0; attribList && attribList[_cCint43] != 0; _cCint43 += 2) {
    }
    _cCint43 += attribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint43);
    for (int _iCint43 = 0; _iCint43 < _cCint43; _iCint43++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, attribList[_iCint43]);
        trace::localWriter.endElement();
        if (_iCint43 + 1 >= _cCint43) {
            break;
        }
        switch (int(attribList[_iCint43++])) {
        case WGL_CONTEXT_MAJOR_VERSION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint43]);
            trace::localWriter.endElement();
            break;
        case WGL_CONTEXT_MINOR_VERSION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint43]);
            trace::localWriter.endElement();
            break;
        case WGL_CONTEXT_LAYER_PLANE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((attribList)[_iCint43]);
            trace::localWriter.endElement();
            break;
        case WGL_CONTEXT_FLAGS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint44_sig, (attribList)[_iCint43]);
            trace::localWriter.endElement();
            break;
        case WGL_CONTEXT_PROFILE_MASK_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeBitmask(&_bitmaskint45_sig, (attribList)[_iCint43]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(attribList[_iCint43 - 1]));
            trace::localWriter.writeSInt(attribList[_iCint43]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateContextAttribsARB(hDC, hShareContext, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean wglCreateDisplayColorTableEXT( GLushort id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateDisplayColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateDisplayColorTableEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean wglLoadDisplayColorTableEXT( const GLushort * table, GLuint length ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglLoadDisplayColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    if (table) {
        size_t _cCGLushort15 = length > 0 ? length : 0;
        trace::localWriter.beginArray(_cCGLushort15);
        for (size_t _iCGLushort15 = 0; _iCGLushort15 < _cCGLushort15; ++_iCGLushort15) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((table)[_iCGLushort15]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(length);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglLoadDisplayColorTableEXT(table, length);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

GLboolean wglBindDisplayColorTableEXT( GLushort id ) {
    GLboolean _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindDisplayColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindDisplayColorTableEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumGLboolean_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void wglDestroyDisplayColorTableEXT( GLushort id ) {
    unsigned _call = trace::localWriter.beginEnter(&_wglDestroyDisplayColorTableEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _wglDestroyDisplayColorTableEXT(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

const char * wglGetExtensionsStringEXT(  ) {
    const char * _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetExtensionsStringEXT_sig);
    trace::localWriter.endEnter();
    _result = _wglGetExtensionsStringEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeString(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglMakeContextCurrentEXT( HDC hDrawDC, HDC hReadDC, HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglMakeContextCurrentEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDrawDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hReadDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglMakeContextCurrentEXT(hDrawDC, hReadDC, hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglGetCurrentReadDCEXT(  ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetCurrentReadDCEXT_sig);
    trace::localWriter.endEnter();
    _result = _wglGetCurrentReadDCEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HPBUFFEREXT wglCreatePbufferEXT( HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int * piAttribList ) {
    HPBUFFEREXT _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreatePbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iWidth);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(iHeight);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    {
    int _cCint432;
    for (_cCint432 = 0; piAttribList && piAttribList[_cCint432] != 0; _cCint432 += 2) {
    }
    _cCint432 += piAttribList ? 1 : 0;
    trace::localWriter.beginArray(_cCint432);
    for (int _iCint432 = 0; _iCint432 < _cCint432; _iCint432++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, piAttribList[_iCint432]);
        trace::localWriter.endElement();
        if (_iCint432 + 1 >= _cCint432) {
            break;
        }
        switch (int(piAttribList[_iCint432++])) {
        case WGL_PBUFFER_LARGEST_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribList)[_iCint432]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(piAttribList[_iCint432 - 1]));
            trace::localWriter.writeSInt(piAttribList[_iCint432]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreatePbufferEXT(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglGetPbufferDCEXT( HPBUFFEREXT hPbuffer ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPbufferDCEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPbufferDCEXT(hPbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglReleasePbufferDCEXT( HPBUFFEREXT hPbuffer, HDC hDC ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleasePbufferDCEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleasePbufferDCEXT(hPbuffer, hDC);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDestroyPbufferEXT( HPBUFFEREXT hPbuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDestroyPbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDestroyPbufferEXT(hPbuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryPbufferEXT( HPBUFFEREXT hPbuffer, int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryPbufferEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumint43_sig, iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryPbufferEXT(hPbuffer, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (piValue) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*piValue);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetPixelFormatAttribivEXT( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, int * piValues ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPixelFormatAttribivEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nAttributes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (piAttributes) {
        size_t _cint43 = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint43);
        for (size_t _iint43 = 0; _iint43 < _cint43; ++_iint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, (piAttributes)[_iint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPixelFormatAttribivEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    if (piValues) {
        size_t _cint = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint);
        for (size_t _iint = 0; _iint < _cint; ++_iint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piValues)[_iint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetPixelFormatAttribfvEXT( HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int * piAttributes, FLOAT * pfValues ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetPixelFormatAttribfvEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iPixelFormat);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iLayerPlane);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nAttributes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (piAttributes) {
        size_t _cint43 = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cint43);
        for (size_t _iint43 = 0; _iint43 < _cint43; ++_iint43) {
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, (piAttributes)[_iint43]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetPixelFormatAttribfvEXT(hdc, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(5);
    if (pfValues) {
        size_t _cFLOAT = nAttributes > 0 ? nAttributes : 0;
        trace::localWriter.beginArray(_cFLOAT);
        for (size_t _iFLOAT = 0; _iFLOAT < _cFLOAT; ++_iFLOAT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeFloat((pfValues)[_iFLOAT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglChoosePixelFormatEXT( HDC hdc, const int * piAttribIList, const FLOAT * pfAttribFList, UINT nMaxFormats, int * piFormats, UINT * nNumFormats ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglChoosePixelFormatEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    {
    int _cCint431;
    for (_cCint431 = 0; piAttribIList && piAttribIList[_cCint431] != 0; _cCint431 += 2) {
    }
    _cCint431 += piAttribIList ? 1 : 0;
    trace::localWriter.beginArray(_cCint431);
    for (int _iCint431 = 0; _iCint431 < _cCint431; _iCint431++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint43_sig, piAttribIList[_iCint431]);
        trace::localWriter.endElement();
        if (_iCint431 + 1 >= _cCint431) {
            break;
        }
        switch (int(piAttribIList[_iCint431++])) {
        case WGL_DRAW_TO_WINDOW_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DRAW_TO_BITMAP_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCELERATION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint46_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_SYSTEM_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_LAYER_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_METHOD_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint47_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_OVERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_UNDERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_VALUE_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_DEPTH_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_STENCIL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_ACCUM_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_GDI_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_OPENGL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DOUBLE_BUFFER_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_STEREO_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_PIXEL_TYPE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint48_sig, (piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_COLOR_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_DEPTH_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_STENCIL_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_AUX_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLE_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLES_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piAttribIList)[_iCint431]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(piAttribIList[_iCint431 - 1]));
            trace::localWriter.writeSInt(piAttribIList[_iCint431]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    {
    int _cCFLOAT;
    for (_cCFLOAT = 0; pfAttribFList && pfAttribFList[_cCFLOAT] != 0; _cCFLOAT += 2) {
    }
    _cCFLOAT += pfAttribFList ? 1 : 0;
    trace::localWriter.beginArray(_cCFLOAT);
    for (int _iCFLOAT = 0; _iCFLOAT < _cCFLOAT; _iCFLOAT++) {
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(pfAttribFList[_iCFLOAT]);
        trace::localWriter.endElement();
        if (_iCFLOAT + 1 >= _cCFLOAT) {
            break;
        }
        switch (int(pfAttribFList[_iCFLOAT++])) {
        case WGL_DRAW_TO_WINDOW_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DRAW_TO_BITMAP_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCELERATION_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint46_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NEED_SYSTEM_PALETTE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_LAYER_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SWAP_METHOD_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint47_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_OVERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_NUMBER_UNDERLAYS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_TRANSPARENT_VALUE_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_DEPTH_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_STENCIL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SHARE_ACCUM_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_GDI_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SUPPORT_OPENGL_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DOUBLE_BUFFER_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_STEREO_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_PIXEL_TYPE_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumint48_sig, (pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_COLOR_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_RED_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_GREEN_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_BLUE_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ALPHA_SHIFT_EXT:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_RED_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_GREEN_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_BLUE_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_ACCUM_ALPHA_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_DEPTH_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_STENCIL_BITS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_AUX_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLE_BUFFERS_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        case WGL_SAMPLES_ARB:
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((pfAttribFList)[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        default:
            trace::localWriter.beginElement();
            os::log("apitrace: warning: %s: unknown key 0x%04X, interpreting value as int\n", __FUNCTION__, int(pfAttribFList[_iCFLOAT - 1]));
            trace::localWriter.writeSInt(pfAttribFList[_iCFLOAT]);
            trace::localWriter.endElement();
            break;
        }
    }
    trace::localWriter.endArray();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(nMaxFormats);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglChoosePixelFormatEXT(hdc, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (piFormats) {
        size_t _cint = *nNumFormats > 0 ? *nNumFormats : 0;
        trace::localWriter.beginArray(_cint);
        for (size_t _iint = 0; _iint < _cint; ++_iint) {
            trace::localWriter.beginElement();
    trace::localWriter.writeSInt((piFormats)[_iint]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (nNumFormats) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*nNumFormats);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSwapIntervalEXT( int interval ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapIntervalEXT_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(interval);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapIntervalEXT(interval);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglGetSwapIntervalEXT(  ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetSwapIntervalEXT_sig);
    trace::localWriter.endEnter();
    _result = _wglGetSwapIntervalEXT();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void * wglAllocateMemoryNV( GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority ) {
    void * _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglAllocateMemoryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeFloat(readfreq);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeFloat(writefreq);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeFloat(priority);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglAllocateMemoryNV(size, readfreq, writefreq, priority);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void wglFreeMemoryNV( void * pointer ) {
    unsigned _call = trace::localWriter.beginEnter(&_wglFreeMemoryNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)pointer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _wglFreeMemoryNV(pointer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

BOOL wglGetSyncValuesOML( HDC hdc, INT64 * ust, INT64 * msc, INT64 * sbc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetSyncValuesOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetSyncValuesOML(hdc, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ust) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*ust);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (msc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*msc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (sbc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*sbc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetMscRateOML( HDC hdc, INT32 * numerator, INT32 * denominator ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetMscRateOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetMscRateOML(hdc, numerator, denominator);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (numerator) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*numerator);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (denominator) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*denominator);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

INT64 wglSwapBuffersMscOML( HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder ) {
    INT64 _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapBuffersMscOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(target_msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapBuffersMscOML(hdc, target_msc, divisor, remainder);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

INT64 wglSwapLayerBuffersMscOML( HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder ) {
    INT64 _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSwapLayerBuffersMscOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(fuPlanes);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(target_msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSwapLayerBuffersMscOML(hdc, fuPlanes, target_msc, divisor, remainder);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglWaitForMscOML( HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 * ust, INT64 * msc, INT64 * sbc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglWaitForMscOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(target_msc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(divisor);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(remainder);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglWaitForMscOML(hdc, target_msc, divisor, remainder, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    if (ust) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*ust);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    if (msc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*msc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    if (sbc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*sbc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglWaitForSbcOML( HDC hdc, INT64 target_sbc, INT64 * ust, INT64 * msc, INT64 * sbc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglWaitForSbcOML_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(target_sbc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglWaitForSbcOML(hdc, target_sbc, ust, msc, sbc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (ust) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*ust);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (msc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*msc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (sbc) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*sbc);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetDigitalVideoParametersI3D( HDC hDC, int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetDigitalVideoParametersI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)piValue);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetDigitalVideoParametersI3D( HDC hDC, int iAttribute, const int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetDigitalVideoParametersI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)piValue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetDigitalVideoParametersI3D(hDC, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGammaTableParametersI3D( HDC hDC, int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGammaTableParametersI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGammaTableParametersI3D(hDC, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)piValue);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetGammaTableParametersI3D( HDC hDC, int iAttribute, const int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetGammaTableParametersI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)piValue);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetGammaTableParametersI3D(hDC, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGammaTableI3D( HDC hDC, int iEntries, USHORT * puRed, USHORT * puGreen, USHORT * puBlue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGammaTableI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iEntries);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (puRed) {
        size_t _cUSHORT = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cUSHORT);
        for (size_t _iUSHORT = 0; _iUSHORT < _cUSHORT; ++_iUSHORT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puRed)[_iUSHORT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (puGreen) {
        size_t _cUSHORT = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cUSHORT);
        for (size_t _iUSHORT = 0; _iUSHORT < _cUSHORT; ++_iUSHORT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puGreen)[_iUSHORT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (puBlue) {
        size_t _cUSHORT = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cUSHORT);
        for (size_t _iUSHORT = 0; _iUSHORT < _cUSHORT; ++_iUSHORT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puBlue)[_iUSHORT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetGammaTableI3D( HDC hDC, int iEntries, const USHORT * puRed, const USHORT * puGreen, const USHORT * puBlue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetGammaTableI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iEntries);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (puRed) {
        size_t _cCUSHORT = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cCUSHORT);
        for (size_t _iCUSHORT = 0; _iCUSHORT < _cCUSHORT; ++_iCUSHORT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puRed)[_iCUSHORT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (puGreen) {
        size_t _cCUSHORT1 = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cCUSHORT1);
        for (size_t _iCUSHORT1 = 0; _iCUSHORT1 < _cCUSHORT1; ++_iCUSHORT1) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puGreen)[_iCUSHORT1]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    if (puBlue) {
        size_t _cCUSHORT2 = iEntries > 0 ? iEntries : 0;
        trace::localWriter.beginArray(_cCUSHORT2);
        for (size_t _iCUSHORT2 = 0; _iCUSHORT2 < _cCUSHORT2; ++_iCUSHORT2) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((puBlue)[_iCUSHORT2]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetGammaTableI3D(hDC, iEntries, puRed, puGreen, puBlue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEnableGenlockI3D( HDC hDC ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnableGenlockI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnableGenlockI3D(hDC);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDisableGenlockI3D( HDC hDC ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDisableGenlockI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDisableGenlockI3D(hDC);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglIsEnabledGenlockI3D( HDC hDC, BOOL * pFlag ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglIsEnabledGenlockI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglIsEnabledGenlockI3D(hDC, pFlag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pFlag) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, *pFlag);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGenlockSourceI3D( HDC hDC, UINT uSource ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGenlockSourceI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uSource);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGenlockSourceI3D(hDC, uSource);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGenlockSourceI3D( HDC hDC, UINT * uSource ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGenlockSourceI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGenlockSourceI3D(hDC, uSource);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (uSource) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uSource);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGenlockSourceEdgeI3D( HDC hDC, UINT uEdge ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGenlockSourceEdgeI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uEdge);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGenlockSourceEdgeI3D(hDC, uEdge);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGenlockSourceEdgeI3D( HDC hDC, UINT * uEdge ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGenlockSourceEdgeI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGenlockSourceEdgeI3D(hDC, uEdge);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (uEdge) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uEdge);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGenlockSampleRateI3D( HDC hDC, UINT uRate ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGenlockSampleRateI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uRate);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGenlockSampleRateI3D(hDC, uRate);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGenlockSampleRateI3D( HDC hDC, UINT * uRate ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGenlockSampleRateI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGenlockSampleRateI3D(hDC, uRate);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (uRate) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uRate);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGenlockSourceDelayI3D( HDC hDC, UINT uDelay ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGenlockSourceDelayI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uDelay);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGenlockSourceDelayI3D(hDC, uDelay);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetGenlockSourceDelayI3D( HDC hDC, UINT * uDelay ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGenlockSourceDelayI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGenlockSourceDelayI3D(hDC, uDelay);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (uDelay) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uDelay);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryGenlockMaxSourceDelayI3D( HDC hDC, UINT * uMaxLineDelay, UINT * uMaxPixelDelay ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryGenlockMaxSourceDelayI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryGenlockMaxSourceDelayI3D(hDC, uMaxLineDelay, uMaxPixelDelay);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (uMaxLineDelay) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uMaxLineDelay);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (uMaxPixelDelay) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*uMaxPixelDelay);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void * wglCreateImageBufferI3D( HDC hDC, DWORD dwSize, UINT uFlags ) {
    void * _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateImageBufferI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(dwSize);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(uFlags);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateImageBufferI3D(hDC, dwSize, uFlags);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDestroyImageBufferI3D( HDC hDC, void * pAddress ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDestroyImageBufferI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)pAddress);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDestroyImageBufferI3D(hDC, pAddress);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglAssociateImageBufferEventsI3D( HDC hDC, const HANDLE * pEvent, void * const * pAddress, const DWORD * pSize, UINT count ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglAssociateImageBufferEventsI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (pEvent) {
        size_t _cCPHANDLE = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCPHANDLE);
        for (size_t _iCPHANDLE = 0; _iCPHANDLE < _cCPHANDLE; ++_iCPHANDLE) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(pEvent)[_iCPHANDLE]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (pAddress) {
        size_t _cCvoid14 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCvoid14);
        for (size_t _iCvoid14 = 0; _iCvoid14 < _cCvoid14; ++_iCvoid14) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(pAddress)[_iCvoid14]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    if (pSize) {
        size_t _cCDWORD = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCDWORD);
        for (size_t _iCDWORD = 0; _iCDWORD < _cCDWORD; ++_iCDWORD) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((pSize)[_iCDWORD]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglAssociateImageBufferEventsI3D(hDC, pEvent, pAddress, pSize, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglReleaseImageBufferEventsI3D( HDC hDC, void * const * pAddress, UINT count ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleaseImageBufferEventsI3D_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (pAddress) {
        size_t _cCvoid141 = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cCvoid141);
        for (size_t _iCvoid141 = 0; _iCvoid141 < _cCvoid141; ++_iCvoid141) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(pAddress)[_iCvoid141]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleaseImageBufferEventsI3D(hDC, pAddress, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEnableFrameLockI3D(  ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnableFrameLockI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglEnableFrameLockI3D();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDisableFrameLockI3D(  ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDisableFrameLockI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglDisableFrameLockI3D();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglIsEnabledFrameLockI3D( BOOL * pFlag ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglIsEnabledFrameLockI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglIsEnabledFrameLockI3D(pFlag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (pFlag) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, *pFlag);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryFrameLockMasterI3D( BOOL * pFlag ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryFrameLockMasterI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglQueryFrameLockMasterI3D(pFlag);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (pFlag) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeEnum(&_enumBOOL_sig, *pFlag);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetFrameUsageI3D( float * pUsage ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetFrameUsageI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglGetFrameUsageI3D(pUsage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (pUsage) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*pUsage);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglBeginFrameTrackingI3D(  ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBeginFrameTrackingI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglBeginFrameTrackingI3D();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEndFrameTrackingI3D(  ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEndFrameTrackingI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglEndFrameTrackingI3D();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryFrameTrackingI3D( DWORD * pFrameCount, DWORD * pMissedFrames, float * pLastMissedUsage ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryFrameTrackingI3D_sig);
    trace::localWriter.endEnter();
    _result = _wglQueryFrameTrackingI3D(pFrameCount, pMissedFrames, pLastMissedUsage);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(0);
    if (pFrameCount) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pFrameCount);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    if (pMissedFrames) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pMissedFrames);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (pLastMissedUsage) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeFloat(*pLastMissedUsage);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSetStereoEmitterState3DL( HDC hDC, UINT uState ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSetStereoEmitterState3DL_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uState);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSetStereoEmitterState3DL(hDC, uState);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

int wglEnumerateVideoDevicesNV( HDC hDC, HVIDEOOUTPUTDEVICENV * phDeviceList ) {
    int _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnumerateVideoDevicesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnumerateVideoDevicesNV(hDC, phDeviceList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)phDeviceList);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglBindVideoDeviceNV( HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int * piAttribList ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(uVideoSlot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)hVideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writePointer((uintptr_t)piAttribList);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindVideoDeviceNV(hDC, uVideoSlot, hVideoDevice, piAttribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryCurrentContextNV( int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryCurrentContextNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryCurrentContextNV(iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)piValue);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetVideoDeviceNV( HDC hDC, int numDevices, HPVIDEODEV * hVideoDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(numDevices);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetVideoDeviceNV(hDC, numDevices, hVideoDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (hVideoDevice) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*hVideoDevice);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglReleaseVideoDeviceNV( HPVIDEODEV hVideoDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleaseVideoDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hVideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleaseVideoDeviceNV(hVideoDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglBindVideoImageNV( HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindVideoImageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hVideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iVideoBuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindVideoImageNV(hVideoDevice, hPbuffer, iVideoBuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglReleaseVideoImageNV( HPBUFFERARB hPbuffer, int iVideoBuffer ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleaseVideoImageNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iVideoBuffer);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleaseVideoImageNV(hPbuffer, iVideoBuffer);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglSendPbufferToVideoNV( HPBUFFERARB hPbuffer, int iBufferType, unsigned long * pulCounterPbuffer, BOOL bBlock ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglSendPbufferToVideoNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hPbuffer);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(iBufferType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumBOOL_sig, bBlock);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglSendPbufferToVideoNV(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (pulCounterPbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterPbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglGetVideoInfoNV( HPVIDEODEV hpVideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetVideoInfoNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hpVideoDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetVideoInfoNV(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (pulCounterOutputPbuffer) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterOutputPbuffer);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (pulCounterOutputVideo) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*pulCounterOutputVideo);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglJoinSwapGroupNV( HDC hDC, GLuint group ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglJoinSwapGroupNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglJoinSwapGroupNV(hDC, group);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglBindSwapBarrierNV( GLuint group, GLuint barrier ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindSwapBarrierNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(group);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(barrier);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindSwapBarrierNV(group, barrier);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQuerySwapGroupNV( HDC hDC, GLuint * group, GLuint * barrier ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQuerySwapGroupNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQuerySwapGroupNV(hDC, group, barrier);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (group) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*group);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (barrier) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*barrier);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryMaxSwapGroupsNV( HDC hDC, GLuint * maxGroups, GLuint * maxBarriers ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryMaxSwapGroupsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryMaxSwapGroupsNV(hDC, maxGroups, maxBarriers);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (maxGroups) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*maxGroups);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    if (maxBarriers) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*maxBarriers);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryFrameCountNV( HDC hDC, GLuint * count ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryFrameCountNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryFrameCountNV(hDC, count);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (count) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeUInt(*count);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglResetFrameCountNV( HDC hDC ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglResetFrameCountNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDC);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglResetFrameCountNV(hDC);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEnumGpusNV( UINT iGpuIndex, HGPUNV * phGpu ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnumGpusNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(iGpuIndex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnumGpusNV(iGpuIndex, phGpu);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (phGpu) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*phGpu);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEnumGpuDevicesNV( HGPUNV hGpu, UINT iDeviceIndex, GPU_DEVICE * lpGpuDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnumGpuDevicesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hGpu);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(iDeviceIndex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnumGpuDevicesNV(hGpu, iDeviceIndex, lpGpuDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (lpGpuDevice) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.beginStruct(&_structGPU_DEVICE_sig);
    trace::localWriter.writeUInt((*lpGpuDevice).cb);
    trace::localWriter.writeString(reinterpret_cast<const char *>((*lpGpuDevice).DeviceName));
    trace::localWriter.writeString(reinterpret_cast<const char *>((*lpGpuDevice).DeviceString));
    trace::localWriter.writeUInt((*lpGpuDevice).Flags);
    trace::localWriter.beginStruct(&_structRECT_sig);
    trace::localWriter.writeSInt(((*lpGpuDevice).rcVirtualScreen).left);
    trace::localWriter.writeSInt(((*lpGpuDevice).rcVirtualScreen).top);
    trace::localWriter.writeSInt(((*lpGpuDevice).rcVirtualScreen).right);
    trace::localWriter.writeSInt(((*lpGpuDevice).rcVirtualScreen).bottom);
    trace::localWriter.endStruct();
    trace::localWriter.endStruct();
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HDC wglCreateAffinityDCNV( const HGPUNV * phGpuList ) {
    HDC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateAffinityDCNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)phGpuList);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateAffinityDCNV(phGpuList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglEnumGpusFromAffinityDCNV( HDC hAffinityDC, UINT iGpuIndex, HGPUNV * hGpu ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnumGpusFromAffinityDCNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hAffinityDC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(iGpuIndex);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnumGpusFromAffinityDCNV(hAffinityDC, iGpuIndex, hGpu);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (hGpu) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*hGpu);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDeleteDCNV( HDC hdc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDeleteDCNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hdc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDeleteDCNV(hdc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

UINT wglGetGPUIDsAMD( UINT maxCount, UINT * ids ) {
    UINT _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGPUIDsAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(maxCount);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGPUIDsAMD(maxCount, ids);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (ids) {
        size_t _cUINT = maxCount > 0 ? maxCount : 0;
        trace::localWriter.beginArray(_cUINT);
        for (size_t _iUINT = 0; _iUINT < _cUINT; ++_iUINT) {
            trace::localWriter.beginElement();
    trace::localWriter.writeUInt((ids)[_iUINT]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

INT wglGetGPUInfoAMD( UINT id, int property, GLenum dataType, UINT size, void * data ) {
    INT _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetGPUInfoAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(property);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dataType);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeUInt(size);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetGPUInfoAMD(id, property, dataType, size, data);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(4);
    trace::localWriter.writePointer((uintptr_t)data);
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeSInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

UINT wglGetContextGPUIDAMD( HGLRC hglrc ) {
    UINT _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetContextGPUIDAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetContextGPUIDAMD(hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglCreateAssociatedContextAMD( UINT id ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateAssociatedContextAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateAssociatedContextAMD(id);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglCreateAssociatedContextAttribsAMD( UINT id, HGLRC hShareContext, const int * attribList ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCreateAssociatedContextAttribsAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(id);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hShareContext);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writePointer((uintptr_t)attribList);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCreateAssociatedContextAttribsAMD(id, hShareContext, attribList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDeleteAssociatedContextAMD( HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDeleteAssociatedContextAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDeleteAssociatedContextAMD(hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglMakeAssociatedContextCurrentAMD( HGLRC hglrc ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglMakeAssociatedContextCurrentAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hglrc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglMakeAssociatedContextCurrentAMD(hglrc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HGLRC wglGetCurrentAssociatedContextAMD(  ) {
    HGLRC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetCurrentAssociatedContextAMD_sig);
    trace::localWriter.endEnter();
    _result = _wglGetCurrentAssociatedContextAMD();
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

void wglBlitContextFramebufferAMD( HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter ) {
    unsigned _call = trace::localWriter.beginEnter(&_wglBlitContextFramebufferAMD_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dstCtx);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(srcX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(srcY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(srcY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(dstX0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(dstY0);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writeSInt(dstX1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeSInt(dstY1);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeUInt(mask);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeEnum(&_enumGLenum_sig, filter);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _wglBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.endLeave();
}

BOOL wglBindVideoCaptureDeviceNV( UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglBindVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(uVideoSlot);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglBindVideoCaptureDeviceNV(uVideoSlot, hDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

UINT wglEnumerateVideoCaptureDevicesNV( HDC hDc, HVIDEOINPUTDEVICENV * phDeviceList ) {
    UINT _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglEnumerateVideoCaptureDevicesNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglEnumerateVideoCaptureDevicesNV(hDc, phDeviceList);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(1);
    if (phDeviceList) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)*phDeviceList);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeUInt(_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglLockVideoCaptureDeviceNV( HDC hDc, HVIDEOINPUTDEVICENV hDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglLockVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglLockVideoCaptureDeviceNV(hDc, hDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglQueryVideoCaptureDeviceNV( HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int * piValue ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglQueryVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(iAttribute);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglQueryVideoCaptureDeviceNV(hDc, hDevice, iAttribute, piValue);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(3);
    if (piValue) {
        trace::localWriter.beginArray(1);
        trace::localWriter.beginElement();
    trace::localWriter.writeSInt(*piValue);
        trace::localWriter.endElement();
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglReleaseVideoCaptureDeviceNV( HDC hDc, HVIDEOINPUTDEVICENV hDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglReleaseVideoCaptureDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDc);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglReleaseVideoCaptureDeviceNV(hDc, hDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglCopyImageSubDataNV( HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglCopyImageSubDataNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hSrcRC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeUInt(srcName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, srcTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(srcLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(srcX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(5);
    trace::localWriter.writeSInt(srcY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(6);
    trace::localWriter.writeSInt(srcZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(7);
    trace::localWriter.writePointer((uintptr_t)hDstRC);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(8);
    trace::localWriter.writeUInt(dstName);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(9);
    trace::localWriter.writeEnum(&_enumGLenum_sig, dstTarget);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(10);
    trace::localWriter.writeSInt(dstLevel);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(11);
    trace::localWriter.writeSInt(dstX);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(12);
    trace::localWriter.writeSInt(dstY);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(13);
    trace::localWriter.writeSInt(dstZ);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(14);
    trace::localWriter.writeSInt(width);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(15);
    trace::localWriter.writeSInt(height);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(16);
    trace::localWriter.writeSInt(depth);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglCopyImageSubDataNV(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXSetResourceShareHandleNV( void * dxObject, HANDLE shareHandle ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXSetResourceShareHandleNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dxObject);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)shareHandle);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXSetResourceShareHandleNV(dxObject, shareHandle);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HANDLE wglDXOpenDeviceNV( void * dxDevice ) {
    HANDLE _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXOpenDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)dxDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXOpenDeviceNV(dxDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXCloseDeviceNV( HANDLE hDevice ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXCloseDeviceNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXCloseDeviceNV(hDevice);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

HANDLE wglDXRegisterObjectNV( HANDLE hDevice, void * dxObject, GLuint name, GLenum type, GLenum access ) {
    HANDLE _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXRegisterObjectNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)dxObject);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(2);
    trace::localWriter.writeUInt(name);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(4);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXRegisterObjectNV(hDevice, dxObject, name, type, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXUnregisterObjectNV( HANDLE hDevice, HANDLE hObject ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXUnregisterObjectNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writePointer((uintptr_t)hObject);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXUnregisterObjectNV(hDevice, hObject);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXObjectAccessNV( HANDLE hObject, GLenum access ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXObjectAccessNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hObject);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, access);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXObjectAccessNV(hObject, access);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXLockObjectsNV( HANDLE hDevice, GLint count, HANDLE * hObjects ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXLockObjectsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXLockObjectsNV(hDevice, count, hObjects);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (hObjects) {
        size_t _cPHANDLE = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cPHANDLE);
        for (size_t _iPHANDLE = 0; _iPHANDLE < _cPHANDLE; ++_iPHANDLE) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(hObjects)[_iPHANDLE]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

BOOL wglDXUnlockObjectsNV( HANDLE hDevice, GLint count, HANDLE * hObjects ) {
    BOOL _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglDXUnlockObjectsNV_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writePointer((uintptr_t)hDevice);
    trace::localWriter.endArg();
    trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(count);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglDXUnlockObjectsNV(hDevice, count, hObjects);
    trace::localWriter.beginLeave(_call);
    if (true) {
    trace::localWriter.beginArg(2);
    if (hObjects) {
        size_t _cPHANDLE = count > 0 ? count : 0;
        trace::localWriter.beginArray(_cPHANDLE);
        for (size_t _iPHANDLE = 0; _iPHANDLE < _cPHANDLE; ++_iPHANDLE) {
            trace::localWriter.beginElement();
    trace::localWriter.writePointer((uintptr_t)(hObjects)[_iPHANDLE]);
            trace::localWriter.endElement();
        }
        trace::localWriter.endArray();
    } else {
        trace::localWriter.writeNull();
    }
    trace::localWriter.endArg();
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writeEnum(&_enumBOOL_sig, _result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}

PROC wglGetProcAddress( const char * lpszProc ) {
    PROC _result;
    unsigned _call = trace::localWriter.beginEnter(&_wglGetProcAddress_sig);
    trace::localWriter.beginArg(0);
    trace::localWriter.writeString(lpszProc);
    trace::localWriter.endArg();
    trace::localWriter.endEnter();
    _result = _wglGetProcAddress(lpszProc);
    trace::localWriter.beginLeave(_call);
    if (true) {
    }
    trace::localWriter.beginReturn();
    trace::localWriter.writePointer((uintptr_t)_result);
    trace::localWriter.endReturn();
    trace::localWriter.endLeave();
    return _result;
}


} /* namespace Trace */ } /* namespace Regal */

#endif // REGAL_SYS_WGL

static void _trace_user_arrays(GLuint count)
{
    gltrace::Context *ctx = gltrace::getContext();
    // void APIENTRY glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_SECONDARY_COLOR_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint size = 0;
            _glGetIntegerv(GL_SECONDARY_COLOR_ARRAY_SIZE, &size);
            GLint type = 0;
            _glGetIntegerv(GL_SECONDARY_COLOR_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_SECONDARY_COLOR_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_SECONDARY_COLOR_ARRAY_POINTER, &pointer);
            size_t _size = _glSecondaryColorPointer_size(size, type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glSecondaryColorPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(3);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid * pointer)
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_FOG_COORD_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_FOG_COORD_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint type = 0;
            _glGetIntegerv(GL_FOG_COORD_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_FOG_COORD_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_FOG_COORD_ARRAY_POINTER, &pointer);
            size_t _size = _glFogCoordPointer_size(type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glFogCoordPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glEdgeFlagPointer(GLsizei stride, const GLvoid * pointer)
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_EDGE_FLAG_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_EDGE_FLAG_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint stride = 0;
            _glGetIntegerv(GL_EDGE_FLAG_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_EDGE_FLAG_ARRAY_POINTER, &pointer);
            size_t _size = _glEdgeFlagPointer_size(stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glEdgeFlagPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    bool client_active_texture_dirty = false;
    GLint client_active_texture = 0;
    _glGetIntegerv(GL_CLIENT_ACTIVE_TEXTURE, &client_active_texture);
    GLint max_texture_coords = 0;
    if (ctx->profile == gltrace::PROFILE_COMPAT)
        _glGetIntegerv(GL_MAX_TEXTURE_COORDS, &max_texture_coords);
    else
        _glGetIntegerv(GL_MAX_TEXTURE_UNITS, &max_texture_coords);
    for (GLint unit = 0; unit < max_texture_coords; ++unit) {
        GLint texture = GL_TEXTURE0 + unit;
        _glClientActiveTexture(texture);
    if (_glIsEnabled(GL_TEXTURE_COORD_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint size = 0;
            _glGetIntegerv(GL_TEXTURE_COORD_ARRAY_SIZE, &size);
            GLint type = 0;
            _glGetIntegerv(GL_TEXTURE_COORD_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_TEXTURE_COORD_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_TEXTURE_COORD_ARRAY_POINTER, &pointer);
            size_t _size = _glTexCoordPointer_size(size, type, stride, count);
    if (texture != client_active_texture || client_active_texture_dirty) {
        client_active_texture_dirty = true;
            unsigned _fake_call = trace::localWriter.beginEnter(&_glClientActiveTexture_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, texture);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_fake_call);
            trace::localWriter.endLeave();
    }
            unsigned _call = trace::localWriter.beginEnter(&_glTexCoordPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(3);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
    }
    _glClientActiveTexture(client_active_texture);
    if (client_active_texture_dirty) {
            unsigned _fake_call = trace::localWriter.beginEnter(&_glClientActiveTexture_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, client_active_texture);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_fake_call);
            trace::localWriter.endLeave();
    }
  }

    // void APIENTRY glIndexPointer(GLenum type, GLsizei stride, const GLvoid * pointer)
  if (ctx->profile == gltrace::PROFILE_COMPAT) {
    if (_glIsEnabled(GL_INDEX_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_INDEX_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint type = 0;
            _glGetIntegerv(GL_INDEX_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_INDEX_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_INDEX_ARRAY_POINTER, &pointer);
            size_t _size = _glIndexPointer_size(type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glIndexPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_COLOR_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_COLOR_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint size = 0;
            _glGetIntegerv(GL_COLOR_ARRAY_SIZE, &size);
            GLint type = 0;
            _glGetIntegerv(GL_COLOR_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_COLOR_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_COLOR_ARRAY_POINTER, &pointer);
            size_t _size = _glColorPointer_size(size, type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glColorPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(3);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid * pointer)
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_NORMAL_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_NORMAL_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint type = 0;
            _glGetIntegerv(GL_NORMAL_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_NORMAL_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_NORMAL_ARRAY_POINTER, &pointer);
            size_t _size = _glNormalPointer_size(type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glNormalPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // void APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
  if ((ctx->profile == gltrace::PROFILE_COMPAT || ctx->profile == gltrace::PROFILE_ES1)) {
    if (_glIsEnabled(GL_VERTEX_ARRAY)) {
        GLint _binding = 0;
        _glGetIntegerv(GL_VERTEX_ARRAY_BUFFER_BINDING, &_binding);
        if (!_binding) {
            GLint size = 0;
            _glGetIntegerv(GL_VERTEX_ARRAY_SIZE, &size);
            GLint type = 0;
            _glGetIntegerv(GL_VERTEX_ARRAY_TYPE, &type);
            GLint stride = 0;
            _glGetIntegerv(GL_VERTEX_ARRAY_STRIDE, &stride);
            GLvoid * pointer = 0;
            _glGetPointerv(GL_VERTEX_ARRAY_POINTER, &pointer);
            size_t _size = _glVertexPointer_size(size, type, stride, count);
            unsigned _call = trace::localWriter.beginEnter(&_glVertexPointer_sig);
            trace::localWriter.beginArg(0);
    trace::localWriter.writeSInt(size);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(2);
    trace::localWriter.writeSInt(stride);
            trace::localWriter.endArg();
            trace::localWriter.beginArg(3);
            trace::localWriter.writeBlob((const void *)pointer, _size);
            trace::localWriter.endArg();
            trace::localWriter.endEnter();
            trace::localWriter.beginLeave(_call);
            trace::localWriter.endLeave();
        }
    }
  }

    // ES1 does not support generic vertex attributes
    if (ctx->profile == gltrace::PROFILE_ES1)
        return;

    vertex_attrib _vertex_attrib = _get_vertex_attrib();

    // void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer)
    if (_vertex_attrib == VERTEX_ATTRIB) {
        GLint _max_vertex_attribs = 0;
        _glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &_max_vertex_attribs);
        for (GLint index = 0; index < _max_vertex_attribs; ++index) {
            GLint _enabled = 0;
            _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_enabled);
            if (_enabled) {
                GLint _binding = 0;
                _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, &_binding);
                if (!_binding) {
                    GLint size = 0;
                    _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_SIZE, &size);
                    GLint type = 0;
                    _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_TYPE, &type);
                    GLint normalized = 0;
                    _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, &normalized);
                    GLint stride = 0;
                    _glGetVertexAttribiv(index, GL_VERTEX_ATTRIB_ARRAY_STRIDE, &stride);
                    GLvoid * pointer = 0;
                    _glGetVertexAttribPointerv(index, GL_VERTEX_ATTRIB_ARRAY_POINTER, &pointer);
                    size_t _size = _glVertexAttribPointer_size(size, type, normalized, stride, count);
                    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointer_sig);
                    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(5);
                    trace::localWriter.writeBlob((const void *)pointer, _size);
                    trace::localWriter.endArg();
                    trace::localWriter.endEnter();
                    trace::localWriter.beginLeave(_call);
                    trace::localWriter.endLeave();
                }
            }
        }
    }

    // void APIENTRY glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer)
    if (_vertex_attrib == VERTEX_ATTRIB_ARB) {
        GLint _max_vertex_attribs = 0;
        _glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &_max_vertex_attribs);
        for (GLint index = 0; index < _max_vertex_attribs; ++index) {
            GLint _enabled = 0;
            _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB, &_enabled);
            if (_enabled) {
                GLint _binding = 0;
                _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB, &_binding);
                if (!_binding) {
                    GLint size = 0;
                    _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB, &size);
                    GLint type = 0;
                    _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB, &type);
                    GLint normalized = 0;
                    _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB, &normalized);
                    GLint stride = 0;
                    _glGetVertexAttribivARB(index, GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB, &stride);
                    GLvoid * pointer = 0;
                    _glGetVertexAttribPointervARB(index, GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB, &pointer);
                    size_t _size = _glVertexAttribPointerARB_size(size, type, normalized, stride, count);
                    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointerARB_sig);
                    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(3);
    trace::localWriter.writeEnum(&_enumGLboolean_sig, normalized);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(4);
    trace::localWriter.writeSInt(stride);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(5);
                    trace::localWriter.writeBlob((const void *)pointer, _size);
                    trace::localWriter.endArg();
                    trace::localWriter.endEnter();
                    trace::localWriter.beginLeave(_call);
                    trace::localWriter.endLeave();
                }
            }
        }
    }

    // void APIENTRY glVertexAttribPointerNV(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer)
    if (_vertex_attrib == VERTEX_ATTRIB_NV) {
        GLint _max_vertex_attribs = 16;
        for (GLint index = 0; index < _max_vertex_attribs; ++index) {
            GLint _enabled = 0;
            _glGetIntegerv(GL_VERTEX_ATTRIB_ARRAY0_NV + index, &_enabled);
            if (_enabled) {
                GLint _binding = 0;
                if (!_binding) {
                    GLint size = 0;
                    _glGetVertexAttribivNV(index, GL_ATTRIB_ARRAY_SIZE_NV, &size);
                    GLint type = 0;
                    _glGetVertexAttribivNV(index, GL_ATTRIB_ARRAY_TYPE_NV, &type);
                    GLint stride = 0;
                    _glGetVertexAttribivNV(index, GL_ATTRIB_ARRAY_STRIDE_NV, &stride);
                    GLvoid * pointer = 0;
                    _glGetVertexAttribPointervNV(index, GL_ATTRIB_ARRAY_POINTER_NV, &pointer);
                    size_t _size = _glVertexAttribPointerNV_size(size, type, stride, count);
                    unsigned _call = trace::localWriter.beginEnter(&_glVertexAttribPointerNV_sig);
                    trace::localWriter.beginArg(0);
    trace::localWriter.writeUInt(index);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(1);
    trace::localWriter.writeEnum(&_enumGLint2_sig, size);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(2);
    trace::localWriter.writeEnum(&_enumGLenum_sig, type);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(3);
    trace::localWriter.writeSInt(stride);
                    trace::localWriter.endArg();
                    trace::localWriter.beginArg(4);
                    trace::localWriter.writeBlob((const void *)pointer, _size);
                    trace::localWriter.endArg();
                    trace::localWriter.endEnter();
                    trace::localWriter.beginLeave(_call);
                    trace::localWriter.endLeave();
                }
            }
        }
    }

}

