/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  Copyright (c) 2012 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

// GL_VERSION_1_0

void REGAL_CALL missing_glAccum(GLenum op, GLfloat value)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(value);
  Warning( "glAccum not available." );
}

void REGAL_CALL missing_glAlphaFunc(GLenum func, GLclampf ref)
{
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  Warning( "glAlphaFunc not available." );
}

void REGAL_CALL missing_glBegin(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glBegin not available." );
}

void REGAL_CALL missing_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(xorig);
  UNUSED_PARAMETER(yorig);
  UNUSED_PARAMETER(xmove);
  UNUSED_PARAMETER(ymove);
  UNUSED_PARAMETER(bitmap);
  Warning( "glBitmap not available." );
}

void REGAL_CALL missing_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
  UNUSED_PARAMETER(sfactor);
  UNUSED_PARAMETER(dfactor);
  Warning( "glBlendFunc not available." );
}

void REGAL_CALL missing_glCallList(GLuint list)
{
  UNUSED_PARAMETER(list);
  Warning( "glCallList not available." );
}

void REGAL_CALL missing_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(lists);
  Warning( "glCallLists not available." );
}

void REGAL_CALL missing_glClear(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glClear not available." );
}

void REGAL_CALL missing_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glClearAccum not available." );
}

void REGAL_CALL missing_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glClearColor not available." );
}

void REGAL_CALL missing_glClearDepth(GLclampd depth)
{
  UNUSED_PARAMETER(depth);
  Warning( "glClearDepth not available." );
}

void REGAL_CALL missing_glClearIndex(GLfloat c)
{
  UNUSED_PARAMETER(c);
  Warning( "glClearIndex not available." );
}

void REGAL_CALL missing_glClearStencil(GLint s)
{
  UNUSED_PARAMETER(s);
  Warning( "glClearStencil not available." );
}

void REGAL_CALL missing_glClipPlane(GLenum plane, const GLdouble *equation)
{
  UNUSED_PARAMETER(plane);
  UNUSED_PARAMETER(equation);
  Warning( "glClipPlane not available." );
}

void REGAL_CALL missing_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3b not available." );
}

void REGAL_CALL missing_glColor3bv(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3bv not available." );
}

void REGAL_CALL missing_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3d not available." );
}

void REGAL_CALL missing_glColor3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3dv not available." );
}

void REGAL_CALL missing_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3f not available." );
}

void REGAL_CALL missing_glColor3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3fv not available." );
}

void REGAL_CALL missing_glColor3i(GLint red, GLint green, GLint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3i not available." );
}

void REGAL_CALL missing_glColor3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3iv not available." );
}

void REGAL_CALL missing_glColor3s(GLshort red, GLshort green, GLshort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3s not available." );
}

void REGAL_CALL missing_glColor3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3sv not available." );
}

void REGAL_CALL missing_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3ub not available." );
}

void REGAL_CALL missing_glColor3ubv(const GLubyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3ubv not available." );
}

void REGAL_CALL missing_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3ui not available." );
}

void REGAL_CALL missing_glColor3uiv(const GLuint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3uiv not available." );
}

void REGAL_CALL missing_glColor3us(GLushort red, GLushort green, GLushort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3us not available." );
}

void REGAL_CALL missing_glColor3usv(const GLushort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3usv not available." );
}

void REGAL_CALL missing_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4b not available." );
}

void REGAL_CALL missing_glColor4bv(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4bv not available." );
}

void REGAL_CALL missing_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4d not available." );
}

void REGAL_CALL missing_glColor4dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4dv not available." );
}

void REGAL_CALL missing_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4f not available." );
}

void REGAL_CALL missing_glColor4fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4fv not available." );
}

void REGAL_CALL missing_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4i not available." );
}

void REGAL_CALL missing_glColor4iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4iv not available." );
}

void REGAL_CALL missing_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4s not available." );
}

void REGAL_CALL missing_glColor4sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4sv not available." );
}

void REGAL_CALL missing_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4ub not available." );
}

void REGAL_CALL missing_glColor4ubv(const GLubyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4ubv not available." );
}

void REGAL_CALL missing_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4ui not available." );
}

void REGAL_CALL missing_glColor4uiv(const GLuint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4uiv not available." );
}

void REGAL_CALL missing_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4us not available." );
}

void REGAL_CALL missing_glColor4usv(const GLushort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4usv not available." );
}

void REGAL_CALL missing_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColorMask not available." );
}

void REGAL_CALL missing_glColorMaterial(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glColorMaterial not available." );
}

void REGAL_CALL missing_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(type);
  Warning( "glCopyPixels not available." );
}

void REGAL_CALL missing_glCullFace(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glCullFace not available." );
}

void REGAL_CALL missing_glDeleteLists(GLuint list, GLsizei range)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(range);
  Warning( "glDeleteLists not available." );
}

void REGAL_CALL missing_glDepthFunc(GLenum func)
{
  UNUSED_PARAMETER(func);
  Warning( "glDepthFunc not available." );
}

void REGAL_CALL missing_glDepthMask(GLboolean flag)
{
  UNUSED_PARAMETER(flag);
  Warning( "glDepthMask not available." );
}

void REGAL_CALL missing_glDepthRange(GLclampd zNear, GLclampd zFar)
{
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glDepthRange not available." );
}

void REGAL_CALL missing_glDisable(GLenum cap)
{
  UNUSED_PARAMETER(cap);
  Warning( "glDisable not available." );
}

void REGAL_CALL missing_glDrawBuffer(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glDrawBuffer not available." );
}

void REGAL_CALL missing_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glDrawPixels not available." );
}

void REGAL_CALL missing_glEdgeFlag(GLboolean flag)
{
  UNUSED_PARAMETER(flag);
  Warning( "glEdgeFlag not available." );
}

void REGAL_CALL missing_glEdgeFlagv(const GLboolean *flag)
{
  UNUSED_PARAMETER(flag);
  Warning( "glEdgeFlagv not available." );
}

void REGAL_CALL missing_glEnable(GLenum cap)
{
  UNUSED_PARAMETER(cap);
  Warning( "glEnable not available." );
}

void REGAL_CALL missing_glEnd(void)
{
  Warning( "glEnd not available." );
}

void REGAL_CALL missing_glEndList(void)
{
  Warning( "glEndList not available." );
}

void REGAL_CALL missing_glEvalCoord1d(GLdouble u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord1d not available." );
}

void REGAL_CALL missing_glEvalCoord1dv(const GLdouble *u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord1dv not available." );
}

void REGAL_CALL missing_glEvalCoord1f(GLfloat u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord1f not available." );
}

void REGAL_CALL missing_glEvalCoord1fv(const GLfloat *u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord1fv not available." );
}

void REGAL_CALL missing_glEvalCoord2d(GLdouble u, GLdouble v)
{
  UNUSED_PARAMETER(u);
  UNUSED_PARAMETER(v);
  Warning( "glEvalCoord2d not available." );
}

void REGAL_CALL missing_glEvalCoord2dv(const GLdouble *u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord2dv not available." );
}

void REGAL_CALL missing_glEvalCoord2f(GLfloat u, GLfloat v)
{
  UNUSED_PARAMETER(u);
  UNUSED_PARAMETER(v);
  Warning( "glEvalCoord2f not available." );
}

void REGAL_CALL missing_glEvalCoord2fv(const GLfloat *u)
{
  UNUSED_PARAMETER(u);
  Warning( "glEvalCoord2fv not available." );
}

void REGAL_CALL missing_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(i1);
  UNUSED_PARAMETER(i2);
  Warning( "glEvalMesh1 not available." );
}

void REGAL_CALL missing_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(i1);
  UNUSED_PARAMETER(i2);
  UNUSED_PARAMETER(j1);
  UNUSED_PARAMETER(j2);
  Warning( "glEvalMesh2 not available." );
}

void REGAL_CALL missing_glEvalPoint1(GLint i)
{
  UNUSED_PARAMETER(i);
  Warning( "glEvalPoint1 not available." );
}

void REGAL_CALL missing_glEvalPoint2(GLint i, GLint j)
{
  UNUSED_PARAMETER(i);
  UNUSED_PARAMETER(j);
  Warning( "glEvalPoint2 not available." );
}

void REGAL_CALL missing_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(buffer);
  Warning( "glFeedbackBuffer not available." );
}

void REGAL_CALL missing_glFinish(void)
{
  Warning( "glFinish not available." );
}

void REGAL_CALL missing_glFlush(void)
{
  Warning( "glFlush not available." );
}

void REGAL_CALL missing_glFogf(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFogf not available." );
}

void REGAL_CALL missing_glFogfv(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFogfv not available." );
}

void REGAL_CALL missing_glFogi(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFogi not available." );
}

void REGAL_CALL missing_glFogiv(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFogiv not available." );
}

void REGAL_CALL missing_glFrontFace(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glFrontFace not available." );
}

void REGAL_CALL missing_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  UNUSED_PARAMETER(left);
  UNUSED_PARAMETER(right);
  UNUSED_PARAMETER(bottom);
  UNUSED_PARAMETER(top);
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glFrustum not available." );
}

GLuint REGAL_CALL missing_glGenLists(GLsizei range)
{
  UNUSED_PARAMETER(range);
  Warning( "glGenLists not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glGetBooleanv(GLenum pname, GLboolean *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBooleanv not available." );
}

void REGAL_CALL missing_glGetClipPlane(GLenum plane, GLdouble *equation)
{
  UNUSED_PARAMETER(plane);
  UNUSED_PARAMETER(equation);
  Warning( "glGetClipPlane not available." );
}

void REGAL_CALL missing_glGetDoublev(GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetDoublev not available." );
}

GLenum REGAL_CALL missing_glGetError(void)
{
  Warning( "glGetError not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glGetFloatv(GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFloatv not available." );
}

void REGAL_CALL missing_glGetIntegerv(GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetIntegerv not available." );
}

void REGAL_CALL missing_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetLightfv not available." );
}

void REGAL_CALL missing_glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetLightiv not available." );
}

void REGAL_CALL missing_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(v);
  Warning( "glGetMapdv not available." );
}

void REGAL_CALL missing_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(v);
  Warning( "glGetMapfv not available." );
}

void REGAL_CALL missing_glGetMapiv(GLenum target, GLenum query, GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(v);
  Warning( "glGetMapiv not available." );
}

void REGAL_CALL missing_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMaterialfv not available." );
}

void REGAL_CALL missing_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMaterialiv not available." );
}

void REGAL_CALL missing_glGetPixelMapfv(GLenum map, GLfloat *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(values);
  Warning( "glGetPixelMapfv not available." );
}

void REGAL_CALL missing_glGetPixelMapuiv(GLenum map, GLuint *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(values);
  Warning( "glGetPixelMapuiv not available." );
}

void REGAL_CALL missing_glGetPixelMapusv(GLenum map, GLushort *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(values);
  Warning( "glGetPixelMapusv not available." );
}

void REGAL_CALL missing_glGetPolygonStipple(GLubyte *mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glGetPolygonStipple not available." );
}

const GLubyte *REGAL_CALL missing_glGetString(GLenum name)
{
  UNUSED_PARAMETER(name);
  Warning( "glGetString not available." );
  return NULL;
}

void REGAL_CALL missing_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexEnvfv not available." );
}

void REGAL_CALL missing_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexEnviv not available." );
}

void REGAL_CALL missing_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGendv not available." );
}

void REGAL_CALL missing_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGenfv not available." );
}

void REGAL_CALL missing_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGeniv not available." );
}

void REGAL_CALL missing_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glGetTexImage not available." );
}

void REGAL_CALL missing_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexLevelParameterfv not available." );
}

void REGAL_CALL missing_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexLevelParameteriv not available." );
}

void REGAL_CALL missing_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterfv not available." );
}

void REGAL_CALL missing_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameteriv not available." );
}

void REGAL_CALL missing_glHint(GLenum target, GLenum mode)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(mode);
  Warning( "glHint not available." );
}

void REGAL_CALL missing_glIndexMask(GLuint mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glIndexMask not available." );
}

void REGAL_CALL missing_glIndexd(GLdouble c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexd not available." );
}

void REGAL_CALL missing_glIndexdv(const GLdouble *c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexdv not available." );
}

void REGAL_CALL missing_glIndexf(GLfloat c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexf not available." );
}

void REGAL_CALL missing_glIndexfv(const GLfloat *c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexfv not available." );
}

void REGAL_CALL missing_glIndexi(GLint c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexi not available." );
}

void REGAL_CALL missing_glIndexiv(const GLint *c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexiv not available." );
}

void REGAL_CALL missing_glIndexs(GLshort c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexs not available." );
}

void REGAL_CALL missing_glIndexsv(const GLshort *c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexsv not available." );
}

void REGAL_CALL missing_glInitNames(void)
{
  Warning( "glInitNames not available." );
}

GLboolean REGAL_CALL missing_glIsEnabled(GLenum cap)
{
  UNUSED_PARAMETER(cap);
  Warning( "glIsEnabled not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsList(GLuint list)
{
  UNUSED_PARAMETER(list);
  Warning( "glIsList not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glLightModelf(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLightModelf not available." );
}

void REGAL_CALL missing_glLightModelfv(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glLightModelfv not available." );
}

void REGAL_CALL missing_glLightModeli(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLightModeli not available." );
}

void REGAL_CALL missing_glLightModeliv(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glLightModeliv not available." );
}

void REGAL_CALL missing_glLightf(GLenum light, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLightf not available." );
}

void REGAL_CALL missing_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glLightfv not available." );
}

void REGAL_CALL missing_glLighti(GLenum light, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLighti not available." );
}

void REGAL_CALL missing_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glLightiv not available." );
}

void REGAL_CALL missing_glLineStipple(GLint factor, GLushort pattern)
{
  UNUSED_PARAMETER(factor);
  UNUSED_PARAMETER(pattern);
  Warning( "glLineStipple not available." );
}

void REGAL_CALL missing_glLineWidth(GLfloat width)
{
  UNUSED_PARAMETER(width);
  Warning( "glLineWidth not available." );
}

void REGAL_CALL missing_glListBase(GLuint base)
{
  UNUSED_PARAMETER(base);
  Warning( "glListBase not available." );
}

void REGAL_CALL missing_glLoadIdentity(void)
{
  Warning( "glLoadIdentity not available." );
}

void REGAL_CALL missing_glLoadMatrixd(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadMatrixd not available." );
}

void REGAL_CALL missing_glLoadMatrixf(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadMatrixf not available." );
}

void REGAL_CALL missing_glLoadName(GLuint name)
{
  UNUSED_PARAMETER(name);
  Warning( "glLoadName not available." );
}

void REGAL_CALL missing_glLogicOp(GLenum opcode)
{
  UNUSED_PARAMETER(opcode);
  Warning( "glLogicOp not available." );
}

void REGAL_CALL missing_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(order);
  UNUSED_PARAMETER(points);
  Warning( "glMap1d not available." );
}

void REGAL_CALL missing_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(order);
  UNUSED_PARAMETER(points);
  Warning( "glMap1f not available." );
}

void REGAL_CALL missing_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(points);
  Warning( "glMap2d not available." );
}

void REGAL_CALL missing_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(points);
  Warning( "glMap2f not available." );
}

void REGAL_CALL missing_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
  UNUSED_PARAMETER(un);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  Warning( "glMapGrid1d not available." );
}

void REGAL_CALL missing_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
  UNUSED_PARAMETER(un);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  Warning( "glMapGrid1f not available." );
}

void REGAL_CALL missing_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  UNUSED_PARAMETER(un);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(vn);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glMapGrid2d not available." );
}

void REGAL_CALL missing_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  UNUSED_PARAMETER(un);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(vn);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glMapGrid2f not available." );
}

void REGAL_CALL missing_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMaterialf not available." );
}

void REGAL_CALL missing_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMaterialfv not available." );
}

void REGAL_CALL missing_glMateriali(GLenum face, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMateriali not available." );
}

void REGAL_CALL missing_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMaterialiv not available." );
}

void REGAL_CALL missing_glMatrixMode(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glMatrixMode not available." );
}

void REGAL_CALL missing_glMultMatrixd(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultMatrixd not available." );
}

void REGAL_CALL missing_glMultMatrixf(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultMatrixf not available." );
}

void REGAL_CALL missing_glNewList(GLuint list, GLenum mode)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(mode);
  Warning( "glNewList not available." );
}

void REGAL_CALL missing_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3b not available." );
}

void REGAL_CALL missing_glNormal3bv(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3bv not available." );
}

void REGAL_CALL missing_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3d not available." );
}

void REGAL_CALL missing_glNormal3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3dv not available." );
}

void REGAL_CALL missing_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3f not available." );
}

void REGAL_CALL missing_glNormal3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3fv not available." );
}

void REGAL_CALL missing_glNormal3i(GLint nx, GLint ny, GLint nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3i not available." );
}

void REGAL_CALL missing_glNormal3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3iv not available." );
}

void REGAL_CALL missing_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3s not available." );
}

void REGAL_CALL missing_glNormal3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3sv not available." );
}

void REGAL_CALL missing_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  UNUSED_PARAMETER(left);
  UNUSED_PARAMETER(right);
  UNUSED_PARAMETER(bottom);
  UNUSED_PARAMETER(top);
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glOrtho not available." );
}

void REGAL_CALL missing_glPassThrough(GLfloat token)
{
  UNUSED_PARAMETER(token);
  Warning( "glPassThrough not available." );
}

void REGAL_CALL missing_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(mapsize);
  UNUSED_PARAMETER(values);
  Warning( "glPixelMapfv not available." );
}

void REGAL_CALL missing_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(mapsize);
  UNUSED_PARAMETER(values);
  Warning( "glPixelMapuiv not available." );
}

void REGAL_CALL missing_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(mapsize);
  UNUSED_PARAMETER(values);
  Warning( "glPixelMapusv not available." );
}

void REGAL_CALL missing_glPixelStoref(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelStoref not available." );
}

void REGAL_CALL missing_glPixelStorei(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelStorei not available." );
}

void REGAL_CALL missing_glPixelTransferf(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTransferf not available." );
}

void REGAL_CALL missing_glPixelTransferi(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTransferi not available." );
}

void REGAL_CALL missing_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
  UNUSED_PARAMETER(xfactor);
  UNUSED_PARAMETER(yfactor);
  Warning( "glPixelZoom not available." );
}

void REGAL_CALL missing_glPointSize(GLfloat size)
{
  UNUSED_PARAMETER(size);
  Warning( "glPointSize not available." );
}

void REGAL_CALL missing_glPolygonMode(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glPolygonMode not available." );
}

void REGAL_CALL missing_glPolygonStipple(const GLubyte *mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glPolygonStipple not available." );
}

void REGAL_CALL missing_glPopAttrib(void)
{
  Warning( "glPopAttrib not available." );
}

void REGAL_CALL missing_glPopMatrix(void)
{
  Warning( "glPopMatrix not available." );
}

void REGAL_CALL missing_glPopName(void)
{
  Warning( "glPopName not available." );
}

void REGAL_CALL missing_glPushAttrib(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glPushAttrib not available." );
}

void REGAL_CALL missing_glPushMatrix(void)
{
  Warning( "glPushMatrix not available." );
}

void REGAL_CALL missing_glPushName(GLuint name)
{
  UNUSED_PARAMETER(name);
  Warning( "glPushName not available." );
}

void REGAL_CALL missing_glRasterPos2d(GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glRasterPos2d not available." );
}

void REGAL_CALL missing_glRasterPos2dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos2dv not available." );
}

void REGAL_CALL missing_glRasterPos2f(GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glRasterPos2f not available." );
}

void REGAL_CALL missing_glRasterPos2fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos2fv not available." );
}

void REGAL_CALL missing_glRasterPos2i(GLint x, GLint y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glRasterPos2i not available." );
}

void REGAL_CALL missing_glRasterPos2iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos2iv not available." );
}

void REGAL_CALL missing_glRasterPos2s(GLshort x, GLshort y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glRasterPos2s not available." );
}

void REGAL_CALL missing_glRasterPos2sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos2sv not available." );
}

void REGAL_CALL missing_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRasterPos3d not available." );
}

void REGAL_CALL missing_glRasterPos3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos3dv not available." );
}

void REGAL_CALL missing_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRasterPos3f not available." );
}

void REGAL_CALL missing_glRasterPos3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos3fv not available." );
}

void REGAL_CALL missing_glRasterPos3i(GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRasterPos3i not available." );
}

void REGAL_CALL missing_glRasterPos3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos3iv not available." );
}

void REGAL_CALL missing_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRasterPos3s not available." );
}

void REGAL_CALL missing_glRasterPos3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos3sv not available." );
}

void REGAL_CALL missing_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glRasterPos4d not available." );
}

void REGAL_CALL missing_glRasterPos4dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos4dv not available." );
}

void REGAL_CALL missing_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glRasterPos4f not available." );
}

void REGAL_CALL missing_glRasterPos4fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos4fv not available." );
}

void REGAL_CALL missing_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glRasterPos4i not available." );
}

void REGAL_CALL missing_glRasterPos4iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos4iv not available." );
}

void REGAL_CALL missing_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glRasterPos4s not available." );
}

void REGAL_CALL missing_glRasterPos4sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glRasterPos4sv not available." );
}

void REGAL_CALL missing_glReadBuffer(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glReadBuffer not available." );
}

void REGAL_CALL missing_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glReadPixels not available." );
}

void REGAL_CALL missing_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  UNUSED_PARAMETER(x1);
  UNUSED_PARAMETER(y1);
  UNUSED_PARAMETER(x2);
  UNUSED_PARAMETER(y2);
  Warning( "glRectd not available." );
}

void REGAL_CALL missing_glRectdv(const GLdouble *v1, const GLdouble *v2)
{
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glRectdv not available." );
}

void REGAL_CALL missing_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  UNUSED_PARAMETER(x1);
  UNUSED_PARAMETER(y1);
  UNUSED_PARAMETER(x2);
  UNUSED_PARAMETER(y2);
  Warning( "glRectf not available." );
}

void REGAL_CALL missing_glRectfv(const GLfloat *v1, const GLfloat *v2)
{
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glRectfv not available." );
}

void REGAL_CALL missing_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
  UNUSED_PARAMETER(x1);
  UNUSED_PARAMETER(y1);
  UNUSED_PARAMETER(x2);
  UNUSED_PARAMETER(y2);
  Warning( "glRecti not available." );
}

void REGAL_CALL missing_glRectiv(const GLint *v1, const GLint *v2)
{
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glRectiv not available." );
}

void REGAL_CALL missing_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  UNUSED_PARAMETER(x1);
  UNUSED_PARAMETER(y1);
  UNUSED_PARAMETER(x2);
  UNUSED_PARAMETER(y2);
  Warning( "glRects not available." );
}

void REGAL_CALL missing_glRectsv(const GLshort *v1, const GLshort *v2)
{
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glRectsv not available." );
}

GLint REGAL_CALL missing_glRenderMode(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glRenderMode not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(angle);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRotated not available." );
}

void REGAL_CALL missing_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(angle);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glRotatef not available." );
}

void REGAL_CALL missing_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glScaled not available." );
}

void REGAL_CALL missing_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glScalef not available." );
}

void REGAL_CALL missing_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glScissor not available." );
}

void REGAL_CALL missing_glSelectBuffer(GLsizei size, GLuint *buffer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(buffer);
  Warning( "glSelectBuffer not available." );
}

void REGAL_CALL missing_glShadeModel(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glShadeModel not available." );
}

void REGAL_CALL missing_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilFunc not available." );
}

void REGAL_CALL missing_glStencilMask(GLuint mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glStencilMask not available." );
}

void REGAL_CALL missing_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
  UNUSED_PARAMETER(fail);
  UNUSED_PARAMETER(zfail);
  UNUSED_PARAMETER(zpass);
  Warning( "glStencilOp not available." );
}

void REGAL_CALL missing_glTexCoord1d(GLdouble s)
{
  UNUSED_PARAMETER(s);
  Warning( "glTexCoord1d not available." );
}

void REGAL_CALL missing_glTexCoord1dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord1dv not available." );
}

void REGAL_CALL missing_glTexCoord1f(GLfloat s)
{
  UNUSED_PARAMETER(s);
  Warning( "glTexCoord1f not available." );
}

void REGAL_CALL missing_glTexCoord1fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord1fv not available." );
}

void REGAL_CALL missing_glTexCoord1i(GLint s)
{
  UNUSED_PARAMETER(s);
  Warning( "glTexCoord1i not available." );
}

void REGAL_CALL missing_glTexCoord1iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord1iv not available." );
}

void REGAL_CALL missing_glTexCoord1s(GLshort s)
{
  UNUSED_PARAMETER(s);
  Warning( "glTexCoord1s not available." );
}

void REGAL_CALL missing_glTexCoord1sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord1sv not available." );
}

void REGAL_CALL missing_glTexCoord2d(GLdouble s, GLdouble t)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glTexCoord2d not available." );
}

void REGAL_CALL missing_glTexCoord2dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2dv not available." );
}

void REGAL_CALL missing_glTexCoord2f(GLfloat s, GLfloat t)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glTexCoord2f not available." );
}

void REGAL_CALL missing_glTexCoord2fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fv not available." );
}

void REGAL_CALL missing_glTexCoord2i(GLint s, GLint t)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glTexCoord2i not available." );
}

void REGAL_CALL missing_glTexCoord2iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2iv not available." );
}

void REGAL_CALL missing_glTexCoord2s(GLshort s, GLshort t)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glTexCoord2s not available." );
}

void REGAL_CALL missing_glTexCoord2sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2sv not available." );
}

void REGAL_CALL missing_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glTexCoord3d not available." );
}

void REGAL_CALL missing_glTexCoord3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord3dv not available." );
}

void REGAL_CALL missing_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glTexCoord3f not available." );
}

void REGAL_CALL missing_glTexCoord3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord3fv not available." );
}

void REGAL_CALL missing_glTexCoord3i(GLint s, GLint t, GLint r)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glTexCoord3i not available." );
}

void REGAL_CALL missing_glTexCoord3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord3iv not available." );
}

void REGAL_CALL missing_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glTexCoord3s not available." );
}

void REGAL_CALL missing_glTexCoord3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord3sv not available." );
}

void REGAL_CALL missing_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glTexCoord4d not available." );
}

void REGAL_CALL missing_glTexCoord4dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4dv not available." );
}

void REGAL_CALL missing_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glTexCoord4f not available." );
}

void REGAL_CALL missing_glTexCoord4fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4fv not available." );
}

void REGAL_CALL missing_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glTexCoord4i not available." );
}

void REGAL_CALL missing_glTexCoord4iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4iv not available." );
}

void REGAL_CALL missing_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glTexCoord4s not available." );
}

void REGAL_CALL missing_glTexCoord4sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4sv not available." );
}

void REGAL_CALL missing_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexEnvf not available." );
}

void REGAL_CALL missing_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexEnvfv not available." );
}

void REGAL_CALL missing_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexEnvi not available." );
}

void REGAL_CALL missing_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexEnviv not available." );
}

void REGAL_CALL missing_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGend not available." );
}

void REGAL_CALL missing_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGendv not available." );
}

void REGAL_CALL missing_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGenf not available." );
}

void REGAL_CALL missing_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGenfv not available." );
}

void REGAL_CALL missing_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGeni not available." );
}

void REGAL_CALL missing_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGeniv not available." );
}

void REGAL_CALL missing_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage1D not available." );
}

void REGAL_CALL missing_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage2D not available." );
}

void REGAL_CALL missing_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexParameterf not available." );
}

void REGAL_CALL missing_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameterfv not available." );
}

void REGAL_CALL missing_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexParameteri not available." );
}

void REGAL_CALL missing_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameteriv not available." );
}

void REGAL_CALL missing_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTranslated not available." );
}

void REGAL_CALL missing_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTranslatef not available." );
}

void REGAL_CALL missing_glVertex2d(GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertex2d not available." );
}

void REGAL_CALL missing_glVertex2dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex2dv not available." );
}

void REGAL_CALL missing_glVertex2f(GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertex2f not available." );
}

void REGAL_CALL missing_glVertex2fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex2fv not available." );
}

void REGAL_CALL missing_glVertex2i(GLint x, GLint y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertex2i not available." );
}

void REGAL_CALL missing_glVertex2iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex2iv not available." );
}

void REGAL_CALL missing_glVertex2s(GLshort x, GLshort y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertex2s not available." );
}

void REGAL_CALL missing_glVertex2sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex2sv not available." );
}

void REGAL_CALL missing_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertex3d not available." );
}

void REGAL_CALL missing_glVertex3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex3dv not available." );
}

void REGAL_CALL missing_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertex3f not available." );
}

void REGAL_CALL missing_glVertex3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex3fv not available." );
}

void REGAL_CALL missing_glVertex3i(GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertex3i not available." );
}

void REGAL_CALL missing_glVertex3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex3iv not available." );
}

void REGAL_CALL missing_glVertex3s(GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertex3s not available." );
}

void REGAL_CALL missing_glVertex3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex3sv not available." );
}

void REGAL_CALL missing_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertex4d not available." );
}

void REGAL_CALL missing_glVertex4dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex4dv not available." );
}

void REGAL_CALL missing_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertex4f not available." );
}

void REGAL_CALL missing_glVertex4fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex4fv not available." );
}

void REGAL_CALL missing_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertex4i not available." );
}

void REGAL_CALL missing_glVertex4iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex4iv not available." );
}

void REGAL_CALL missing_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertex4s not available." );
}

void REGAL_CALL missing_glVertex4sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex4sv not available." );
}

void REGAL_CALL missing_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glViewport not available." );
}

// GL_VERSION_1_1

GLboolean REGAL_CALL missing_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  UNUSED_PARAMETER(residences);
  Warning( "glAreTexturesResident not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glArrayElement(GLint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glArrayElement not available." );
}

void REGAL_CALL missing_glBindTexture(GLenum target, GLuint texture)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(texture);
  Warning( "glBindTexture not available." );
}

void REGAL_CALL missing_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glColorPointer not available." );
}

void REGAL_CALL missing_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTexImage1D not available." );
}

void REGAL_CALL missing_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTexImage2D not available." );
}

void REGAL_CALL missing_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyTexSubImage1D not available." );
}

void REGAL_CALL missing_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTexSubImage2D not available." );
}

void REGAL_CALL missing_glDeleteTextures(GLsizei n, const GLuint *textures)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  Warning( "glDeleteTextures not available." );
}

void REGAL_CALL missing_glDisableClientState(GLenum cap)
{
  UNUSED_PARAMETER(cap);
  Warning( "glDisableClientState not available." );
}

void REGAL_CALL missing_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  Warning( "glDrawArrays not available." );
}

void REGAL_CALL missing_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  Warning( "glDrawElements not available." );
}

void REGAL_CALL missing_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glEdgeFlagPointer not available." );
}

void REGAL_CALL missing_glEnableClientState(GLenum cap)
{
  UNUSED_PARAMETER(cap);
  Warning( "glEnableClientState not available." );
}

void REGAL_CALL missing_glGenTextures(GLsizei n, GLuint *textures)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  Warning( "glGenTextures not available." );
}

void REGAL_CALL missing_glGetPointerv(GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPointerv not available." );
}

void REGAL_CALL missing_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glIndexPointer not available." );
}

void REGAL_CALL missing_glIndexub(GLubyte c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexub not available." );
}

void REGAL_CALL missing_glIndexubv(const GLubyte *c)
{
  UNUSED_PARAMETER(c);
  Warning( "glIndexubv not available." );
}

void REGAL_CALL missing_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glInterleavedArrays not available." );
}

GLboolean REGAL_CALL missing_glIsTexture(GLuint texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glIsTexture not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glNormalPointer not available." );
}

void REGAL_CALL missing_glPolygonOffset(GLfloat factor, GLfloat units)
{
  UNUSED_PARAMETER(factor);
  UNUSED_PARAMETER(units);
  Warning( "glPolygonOffset not available." );
}

void REGAL_CALL missing_glPopClientAttrib(void)
{
  Warning( "glPopClientAttrib not available." );
}

void REGAL_CALL missing_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  UNUSED_PARAMETER(priorities);
  Warning( "glPrioritizeTextures not available." );
}

void REGAL_CALL missing_glPushClientAttrib(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glPushClientAttrib not available." );
}

void REGAL_CALL missing_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glTexCoordPointer not available." );
}

void REGAL_CALL missing_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage1D not available." );
}

void REGAL_CALL missing_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage2D not available." );
}

void REGAL_CALL missing_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexPointer not available." );
}

// GL_VERSION_1_2

void REGAL_CALL missing_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glBlendColor not available." );
}

void REGAL_CALL missing_glBlendEquation(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquation not available." );
}

void REGAL_CALL missing_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTexSubImage3D not available." );
}

void REGAL_CALL missing_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  Warning( "glDrawRangeElements not available." );
}

void REGAL_CALL missing_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage3D not available." );
}

void REGAL_CALL missing_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage3D not available." );
}

// GL_VERSION_1_3

void REGAL_CALL missing_glActiveTexture(GLenum texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glActiveTexture not available." );
}

void REGAL_CALL missing_glClientActiveTexture(GLenum texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glClientActiveTexture not available." );
}

void REGAL_CALL missing_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage1D not available." );
}

void REGAL_CALL missing_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage2D not available." );
}

void REGAL_CALL missing_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage3D not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage1D not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage2D not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage3D not available." );
}

void REGAL_CALL missing_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lod);
  UNUSED_PARAMETER(img);
  Warning( "glGetCompressedTexImage not available." );
}

void REGAL_CALL missing_glLoadTransposeMatrixd(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadTransposeMatrixd not available." );
}

void REGAL_CALL missing_glLoadTransposeMatrixf(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadTransposeMatrixf not available." );
}

void REGAL_CALL missing_glMultTransposeMatrixd(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultTransposeMatrixd not available." );
}

void REGAL_CALL missing_glMultTransposeMatrixf(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultTransposeMatrixf not available." );
}

void REGAL_CALL missing_glMultiTexCoord1d(GLenum target, GLdouble s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1d not available." );
}

void REGAL_CALL missing_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1dv not available." );
}

void REGAL_CALL missing_glMultiTexCoord1f(GLenum target, GLfloat s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1f not available." );
}

void REGAL_CALL missing_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1fv not available." );
}

void REGAL_CALL missing_glMultiTexCoord1i(GLenum target, GLint s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1i not available." );
}

void REGAL_CALL missing_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1iv not available." );
}

void REGAL_CALL missing_glMultiTexCoord1s(GLenum target, GLshort s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1s not available." );
}

void REGAL_CALL missing_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1sv not available." );
}

void REGAL_CALL missing_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2d not available." );
}

void REGAL_CALL missing_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2dv not available." );
}

void REGAL_CALL missing_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2f not available." );
}

void REGAL_CALL missing_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2fv not available." );
}

void REGAL_CALL missing_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2i not available." );
}

void REGAL_CALL missing_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2iv not available." );
}

void REGAL_CALL missing_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2s not available." );
}

void REGAL_CALL missing_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2sv not available." );
}

void REGAL_CALL missing_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3d not available." );
}

void REGAL_CALL missing_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3dv not available." );
}

void REGAL_CALL missing_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3f not available." );
}

void REGAL_CALL missing_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3fv not available." );
}

void REGAL_CALL missing_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3i not available." );
}

void REGAL_CALL missing_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3iv not available." );
}

void REGAL_CALL missing_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3s not available." );
}

void REGAL_CALL missing_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3sv not available." );
}

void REGAL_CALL missing_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4d not available." );
}

void REGAL_CALL missing_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4dv not available." );
}

void REGAL_CALL missing_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4f not available." );
}

void REGAL_CALL missing_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4fv not available." );
}

void REGAL_CALL missing_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4i not available." );
}

void REGAL_CALL missing_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4iv not available." );
}

void REGAL_CALL missing_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4s not available." );
}

void REGAL_CALL missing_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4sv not available." );
}

void REGAL_CALL missing_glSampleCoverage(GLclampf value, GLboolean invert)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(invert);
  Warning( "glSampleCoverage not available." );
}

// GL_VERSION_1_4

void REGAL_CALL missing_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  UNUSED_PARAMETER(sfactorRGB);
  UNUSED_PARAMETER(dfactorRGB);
  UNUSED_PARAMETER(sfactorAlpha);
  UNUSED_PARAMETER(dfactorAlpha);
  Warning( "glBlendFuncSeparate not available." );
}

void REGAL_CALL missing_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glFogCoordPointer not available." );
}

void REGAL_CALL missing_glFogCoordd(GLdouble coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordd not available." );
}

void REGAL_CALL missing_glFogCoorddv(const GLdouble *coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoorddv not available." );
}

void REGAL_CALL missing_glFogCoordf(GLfloat coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordf not available." );
}

void REGAL_CALL missing_glFogCoordfv(const GLfloat *coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordfv not available." );
}

void REGAL_CALL missing_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawArrays not available." );
}

void REGAL_CALL missing_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawElements not available." );
}

void REGAL_CALL missing_glPointParameterf(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameterf not available." );
}

void REGAL_CALL missing_glPointParameterfv(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameterfv not available." );
}

void REGAL_CALL missing_glPointParameteri(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameteri not available." );
}

void REGAL_CALL missing_glPointParameteriv(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameteriv not available." );
}

void REGAL_CALL missing_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3b not available." );
}

void REGAL_CALL missing_glSecondaryColor3bv(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3bv not available." );
}

void REGAL_CALL missing_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3d not available." );
}

void REGAL_CALL missing_glSecondaryColor3dv(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3dv not available." );
}

void REGAL_CALL missing_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3f not available." );
}

void REGAL_CALL missing_glSecondaryColor3fv(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3fv not available." );
}

void REGAL_CALL missing_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3i not available." );
}

void REGAL_CALL missing_glSecondaryColor3iv(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3iv not available." );
}

void REGAL_CALL missing_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3s not available." );
}

void REGAL_CALL missing_glSecondaryColor3sv(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3sv not available." );
}

void REGAL_CALL missing_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3ub not available." );
}

void REGAL_CALL missing_glSecondaryColor3ubv(const GLubyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3ubv not available." );
}

void REGAL_CALL missing_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3ui not available." );
}

void REGAL_CALL missing_glSecondaryColor3uiv(const GLuint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3uiv not available." );
}

void REGAL_CALL missing_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3us not available." );
}

void REGAL_CALL missing_glSecondaryColor3usv(const GLushort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3usv not available." );
}

void REGAL_CALL missing_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glSecondaryColorPointer not available." );
}

void REGAL_CALL missing_glWindowPos2d(GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2d not available." );
}

void REGAL_CALL missing_glWindowPos2dv(const GLdouble *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2dv not available." );
}

void REGAL_CALL missing_glWindowPos2f(GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2f not available." );
}

void REGAL_CALL missing_glWindowPos2fv(const GLfloat *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2fv not available." );
}

void REGAL_CALL missing_glWindowPos2i(GLint x, GLint y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2i not available." );
}

void REGAL_CALL missing_glWindowPos2iv(const GLint *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2iv not available." );
}

void REGAL_CALL missing_glWindowPos2s(GLshort x, GLshort y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2s not available." );
}

void REGAL_CALL missing_glWindowPos2sv(const GLshort *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2sv not available." );
}

void REGAL_CALL missing_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3d not available." );
}

void REGAL_CALL missing_glWindowPos3dv(const GLdouble *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3dv not available." );
}

void REGAL_CALL missing_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3f not available." );
}

void REGAL_CALL missing_glWindowPos3fv(const GLfloat *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3fv not available." );
}

void REGAL_CALL missing_glWindowPos3i(GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3i not available." );
}

void REGAL_CALL missing_glWindowPos3iv(const GLint *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3iv not available." );
}

void REGAL_CALL missing_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3s not available." );
}

void REGAL_CALL missing_glWindowPos3sv(const GLshort *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3sv not available." );
}

// GL_VERSION_1_5

void REGAL_CALL missing_glBeginQuery(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBeginQuery not available." );
}

void REGAL_CALL missing_glBindBuffer(GLenum target, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(buffer);
  Warning( "glBindBuffer not available." );
}

void REGAL_CALL missing_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  UNUSED_PARAMETER(usage);
  Warning( "glBufferData not available." );
}

void REGAL_CALL missing_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glBufferSubData not available." );
}

void REGAL_CALL missing_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(buffers);
  Warning( "glDeleteBuffers not available." );
}

void REGAL_CALL missing_glDeleteQueries(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteQueries not available." );
}

void REGAL_CALL missing_glEndQuery(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glEndQuery not available." );
}

void REGAL_CALL missing_glGenBuffers(GLsizei n, GLuint *buffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(buffers);
  Warning( "glGenBuffers not available." );
}

void REGAL_CALL missing_glGenQueries(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenQueries not available." );
}

void REGAL_CALL missing_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferParameteriv not available." );
}

void REGAL_CALL missing_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferPointerv not available." );
}

void REGAL_CALL missing_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glGetBufferSubData not available." );
}

void REGAL_CALL missing_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectiv not available." );
}

void REGAL_CALL missing_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectuiv not available." );
}

void REGAL_CALL missing_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryiv not available." );
}

GLboolean REGAL_CALL missing_glIsBuffer(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glIsBuffer not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsQuery(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsQuery not available." );
  return (GLboolean )0;
}

GLvoid *REGAL_CALL missing_glMapBuffer(GLenum target, GLenum access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(access);
  Warning( "glMapBuffer not available." );
  return NULL;
}

GLboolean REGAL_CALL missing_glUnmapBuffer(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glUnmapBuffer not available." );
  return (GLboolean )0;
}

// GL_VERSION_2_0

void REGAL_CALL missing_glAttachShader(GLuint program, GLuint shader)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shader);
  Warning( "glAttachShader not available." );
}

void REGAL_CALL missing_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(name);
  Warning( "glBindAttribLocation not available." );
}

void REGAL_CALL missing_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparate not available." );
}

void REGAL_CALL missing_glCompileShader(GLuint shader)
{
  UNUSED_PARAMETER(shader);
  Warning( "glCompileShader not available." );
}

GLuint REGAL_CALL missing_glCreateProgram(void)
{
  Warning( "glCreateProgram not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glCreateShader(GLenum type)
{
  UNUSED_PARAMETER(type);
  Warning( "glCreateShader not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glDeleteProgram(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glDeleteProgram not available." );
}

void REGAL_CALL missing_glDeleteShader(GLuint shader)
{
  UNUSED_PARAMETER(shader);
  Warning( "glDeleteShader not available." );
}

void REGAL_CALL missing_glDetachShader(GLuint program, GLuint shader)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shader);
  Warning( "glDetachShader not available." );
}

void REGAL_CALL missing_glDisableVertexAttribArray(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glDisableVertexAttribArray not available." );
}

void REGAL_CALL missing_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(bufs);
  Warning( "glDrawBuffers not available." );
}

void REGAL_CALL missing_glEnableVertexAttribArray(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glEnableVertexAttribArray not available." );
}

void REGAL_CALL missing_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveAttrib not available." );
}

void REGAL_CALL missing_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveUniform not available." );
}

void REGAL_CALL missing_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(maxCount);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(shaders);
  Warning( "glGetAttachedShaders not available." );
}

GLint REGAL_CALL missing_glGetAttribLocation(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetAttribLocation not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(infoLog);
  Warning( "glGetProgramInfoLog not available." );
}

void REGAL_CALL missing_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramiv not available." );
}

void REGAL_CALL missing_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(infoLog);
  Warning( "glGetShaderInfoLog not available." );
}

void REGAL_CALL missing_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(source);
  Warning( "glGetShaderSource not available." );
}

void REGAL_CALL missing_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetShaderiv not available." );
}

GLint REGAL_CALL missing_glGetUniformLocation(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetUniformLocation not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformfv not available." );
}

void REGAL_CALL missing_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformiv not available." );
}

void REGAL_CALL missing_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(pointer);
  Warning( "glGetVertexAttribPointerv not available." );
}

void REGAL_CALL missing_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribdv not available." );
}

void REGAL_CALL missing_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribfv not available." );
}

void REGAL_CALL missing_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribiv not available." );
}

GLboolean REGAL_CALL missing_glIsProgram(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glIsProgram not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsShader(GLuint shader)
{
  UNUSED_PARAMETER(shader);
  Warning( "glIsShader not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glLinkProgram(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glLinkProgram not available." );
}

void REGAL_CALL missing_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(string);
  UNUSED_PARAMETER(length);
  Warning( "glShaderSource not available." );
}

void REGAL_CALL missing_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilFuncSeparate not available." );
}

void REGAL_CALL missing_glStencilMaskSeparate(GLenum face, GLuint mask)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilMaskSeparate not available." );
}

void REGAL_CALL missing_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(fail);
  UNUSED_PARAMETER(zfail);
  UNUSED_PARAMETER(zpass);
  Warning( "glStencilOpSeparate not available." );
}

void REGAL_CALL missing_glUniform1f(GLint location, GLfloat v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1f not available." );
}

void REGAL_CALL missing_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1fv not available." );
}

void REGAL_CALL missing_glUniform1i(GLint location, GLint v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1i not available." );
}

void REGAL_CALL missing_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1iv not available." );
}

void REGAL_CALL missing_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2f not available." );
}

void REGAL_CALL missing_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2fv not available." );
}

void REGAL_CALL missing_glUniform2i(GLint location, GLint v0, GLint v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2i not available." );
}

void REGAL_CALL missing_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2iv not available." );
}

void REGAL_CALL missing_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3f not available." );
}

void REGAL_CALL missing_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3fv not available." );
}

void REGAL_CALL missing_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3i not available." );
}

void REGAL_CALL missing_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3iv not available." );
}

void REGAL_CALL missing_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4f not available." );
}

void REGAL_CALL missing_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4fv not available." );
}

void REGAL_CALL missing_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4i not available." );
}

void REGAL_CALL missing_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4iv not available." );
}

void REGAL_CALL missing_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2fv not available." );
}

void REGAL_CALL missing_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3fv not available." );
}

void REGAL_CALL missing_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4fv not available." );
}

void REGAL_CALL missing_glUseProgram(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glUseProgram not available." );
}

void REGAL_CALL missing_glValidateProgram(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glValidateProgram not available." );
}

void REGAL_CALL missing_glVertexAttrib1d(GLuint index, GLdouble x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1d not available." );
}

void REGAL_CALL missing_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1dv not available." );
}

void REGAL_CALL missing_glVertexAttrib1f(GLuint index, GLfloat x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1f not available." );
}

void REGAL_CALL missing_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1fv not available." );
}

void REGAL_CALL missing_glVertexAttrib1s(GLuint index, GLshort x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1s not available." );
}

void REGAL_CALL missing_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1sv not available." );
}

void REGAL_CALL missing_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2d not available." );
}

void REGAL_CALL missing_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2dv not available." );
}

void REGAL_CALL missing_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2f not available." );
}

void REGAL_CALL missing_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2fv not available." );
}

void REGAL_CALL missing_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2s not available." );
}

void REGAL_CALL missing_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2sv not available." );
}

void REGAL_CALL missing_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3d not available." );
}

void REGAL_CALL missing_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3dv not available." );
}

void REGAL_CALL missing_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3f not available." );
}

void REGAL_CALL missing_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3fv not available." );
}

void REGAL_CALL missing_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3s not available." );
}

void REGAL_CALL missing_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3sv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Nbv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Niv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Nsv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4Nub not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Nubv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Nuiv not available." );
}

void REGAL_CALL missing_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4Nusv not available." );
}

void REGAL_CALL missing_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4bv not available." );
}

void REGAL_CALL missing_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4d not available." );
}

void REGAL_CALL missing_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4dv not available." );
}

void REGAL_CALL missing_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4f not available." );
}

void REGAL_CALL missing_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4fv not available." );
}

void REGAL_CALL missing_glVertexAttrib4iv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4iv not available." );
}

void REGAL_CALL missing_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4s not available." );
}

void REGAL_CALL missing_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4sv not available." );
}

void REGAL_CALL missing_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4ubv not available." );
}

void REGAL_CALL missing_glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4uiv not available." );
}

void REGAL_CALL missing_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4usv not available." );
}

void REGAL_CALL missing_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribPointer not available." );
}

// GL_VERSION_2_1

void REGAL_CALL missing_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2x3fv not available." );
}

void REGAL_CALL missing_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2x4fv not available." );
}

void REGAL_CALL missing_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3x2fv not available." );
}

void REGAL_CALL missing_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3x4fv not available." );
}

void REGAL_CALL missing_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4x2fv not available." );
}

void REGAL_CALL missing_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4x3fv not available." );
}

// GL_VERSION_3_0

void REGAL_CALL missing_glBeginConditionalRender(GLuint id, GLenum mode)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(mode);
  Warning( "glBeginConditionalRender not available." );
}

void REGAL_CALL missing_glBeginTransformFeedback(GLenum primitiveMode)
{
  UNUSED_PARAMETER(primitiveMode);
  Warning( "glBeginTransformFeedback not available." );
}

void REGAL_CALL missing_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(color);
  UNUSED_PARAMETER(name);
  Warning( "glBindFragDataLocation not available." );
}

void REGAL_CALL missing_glClampColor(GLenum target, GLenum clamp)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(clamp);
  Warning( "glClampColor not available." );
}

void REGAL_CALL missing_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(drawbuffer);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(stencil);
  Warning( "glClearBufferfi not available." );
}

void REGAL_CALL missing_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(drawbuffer);
  UNUSED_PARAMETER(value);
  Warning( "glClearBufferfv not available." );
}

void REGAL_CALL missing_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(drawbuffer);
  UNUSED_PARAMETER(value);
  Warning( "glClearBufferiv not available." );
}

void REGAL_CALL missing_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(drawbuffer);
  UNUSED_PARAMETER(value);
  Warning( "glClearBufferuiv not available." );
}

void REGAL_CALL missing_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  Warning( "glColorMaski not available." );
}

void REGAL_CALL missing_glDisablei(GLenum cap, GLuint index)
{
  UNUSED_PARAMETER(cap);
  UNUSED_PARAMETER(index);
  Warning( "glDisablei not available." );
}

void REGAL_CALL missing_glEnablei(GLenum cap, GLuint index)
{
  UNUSED_PARAMETER(cap);
  UNUSED_PARAMETER(index);
  Warning( "glEnablei not available." );
}

void REGAL_CALL missing_glEndConditionalRender(void)
{
  Warning( "glEndConditionalRender not available." );
}

void REGAL_CALL missing_glEndTransformFeedback(void)
{
  Warning( "glEndTransformFeedback not available." );
}

void REGAL_CALL missing_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetBooleani_v not available." );
}

GLint REGAL_CALL missing_glGetFragDataLocation(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetFragDataLocation not available." );
  return (GLint )0;
}

const GLubyte *REGAL_CALL missing_glGetStringi(GLenum name, GLuint index)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(index);
  Warning( "glGetStringi not available." );
  return NULL;
}

void REGAL_CALL missing_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterIiv not available." );
}

void REGAL_CALL missing_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterIuiv not available." );
}

void REGAL_CALL missing_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetTransformFeedbackVarying not available." );
}

void REGAL_CALL missing_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformuiv not available." );
}

void REGAL_CALL missing_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribIiv not available." );
}

void REGAL_CALL missing_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribIuiv not available." );
}

GLboolean REGAL_CALL missing_glIsEnabledi(GLenum target, GLuint index)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  Warning( "glIsEnabledi not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameterIiv not available." );
}

void REGAL_CALL missing_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameterIuiv not available." );
}

void REGAL_CALL missing_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(varyings);
  UNUSED_PARAMETER(bufferMode);
  Warning( "glTransformFeedbackVaryings not available." );
}

void REGAL_CALL missing_glUniform1ui(GLint location, GLuint v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1ui not available." );
}

void REGAL_CALL missing_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1uiv not available." );
}

void REGAL_CALL missing_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2ui not available." );
}

void REGAL_CALL missing_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2uiv not available." );
}

void REGAL_CALL missing_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3ui not available." );
}

void REGAL_CALL missing_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3uiv not available." );
}

void REGAL_CALL missing_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4ui not available." );
}

void REGAL_CALL missing_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4uiv not available." );
}

void REGAL_CALL missing_glVertexAttribI1i(GLuint index, GLint x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribI1i not available." );
}

void REGAL_CALL missing_glVertexAttribI1iv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI1iv not available." );
}

void REGAL_CALL missing_glVertexAttribI1ui(GLuint index, GLuint x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribI1ui not available." );
}

void REGAL_CALL missing_glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI1uiv not available." );
}

void REGAL_CALL missing_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribI2i not available." );
}

void REGAL_CALL missing_glVertexAttribI2iv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI2iv not available." );
}

void REGAL_CALL missing_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribI2ui not available." );
}

void REGAL_CALL missing_glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI2uiv not available." );
}

void REGAL_CALL missing_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribI3i not available." );
}

void REGAL_CALL missing_glVertexAttribI3iv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI3iv not available." );
}

void REGAL_CALL missing_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribI3ui not available." );
}

void REGAL_CALL missing_glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI3uiv not available." );
}

void REGAL_CALL missing_glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4bv not available." );
}

void REGAL_CALL missing_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribI4i not available." );
}

void REGAL_CALL missing_glVertexAttribI4iv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4iv not available." );
}

void REGAL_CALL missing_glVertexAttribI4sv(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4sv not available." );
}

void REGAL_CALL missing_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4ubv not available." );
}

void REGAL_CALL missing_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribI4ui not available." );
}

void REGAL_CALL missing_glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4uiv not available." );
}

void REGAL_CALL missing_glVertexAttribI4usv(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4usv not available." );
}

void REGAL_CALL missing_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribIPointer not available." );
}

// GL_VERSION_3_1

void REGAL_CALL missing_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawArraysInstanced not available." );
}

void REGAL_CALL missing_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawElementsInstanced not available." );
}

void REGAL_CALL missing_glPrimitiveRestartIndex(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glPrimitiveRestartIndex not available." );
}

void REGAL_CALL missing_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  Warning( "glTexBuffer not available." );
}

// GL_VERSION_3_2

void REGAL_CALL missing_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture not available." );
}

void REGAL_CALL missing_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(face);
  Warning( "glFramebufferTextureFace not available." );
}

void REGAL_CALL missing_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferParameteri64v not available." );
}

void REGAL_CALL missing_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetInteger64i_v not available." );
}

// GL_VERSION_3_3

void REGAL_CALL missing_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(divisor);
  Warning( "glVertexAttribDivisor not available." );
}

// GL_VERSION_4_0

void REGAL_CALL missing_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparatei not available." );
}

void REGAL_CALL missing_glBlendEquationi(GLuint buf, GLenum mode)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquationi not available." );
}

void REGAL_CALL missing_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(srcRGB);
  UNUSED_PARAMETER(dstRGB);
  UNUSED_PARAMETER(srcAlpha);
  UNUSED_PARAMETER(dstAlpha);
  Warning( "glBlendFuncSeparatei not available." );
}

void REGAL_CALL missing_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(dst);
  Warning( "glBlendFunci not available." );
}

// GL_3DFX_tbuffer

void REGAL_CALL missing_glTbufferMask3DFX(GLuint mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glTbufferMask3DFX not available." );
}

// GL_AMD_debug_output

void REGAL_CALL missing_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  UNUSED_PARAMETER(callback);
  UNUSED_PARAMETER(userParam);
  Warning( "glDebugMessageCallbackAMD not available." );
}

void REGAL_CALL missing_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  UNUSED_PARAMETER(category);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(enabled);
  Warning( "glDebugMessageEnableAMD not available." );
}

void REGAL_CALL missing_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  UNUSED_PARAMETER(category);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(buf);
  Warning( "glDebugMessageInsertAMD not available." );
}

GLuint REGAL_CALL missing_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(bufsize);
  UNUSED_PARAMETER(categories);
  UNUSED_PARAMETER(severities);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(lengths);
  UNUSED_PARAMETER(message);
  Warning( "glGetDebugMessageLogAMD not available." );
  return (GLuint )0;
}

// GL_AMD_draw_buffers_blend

void REGAL_CALL missing_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquationIndexedAMD not available." );
}

void REGAL_CALL missing_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparateIndexedAMD not available." );
}

void REGAL_CALL missing_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(dst);
  Warning( "glBlendFuncIndexedAMD not available." );
}

void REGAL_CALL missing_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(srcRGB);
  UNUSED_PARAMETER(dstRGB);
  UNUSED_PARAMETER(srcAlpha);
  UNUSED_PARAMETER(dstAlpha);
  Warning( "glBlendFuncSeparateIndexedAMD not available." );
}

// GL_AMD_multi_draw_indirect

void REGAL_CALL missing_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(indirect);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(stride);
  Warning( "glMultiDrawArraysIndirectAMD not available." );
}

void REGAL_CALL missing_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indirect);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(stride);
  Warning( "glMultiDrawElementsIndirectAMD not available." );
}

// GL_AMD_name_gen_delete

void REGAL_CALL missing_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
{
  UNUSED_PARAMETER(identifier);
  UNUSED_PARAMETER(num);
  UNUSED_PARAMETER(names);
  Warning( "glDeleteNamesAMD not available." );
}

void REGAL_CALL missing_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
{
  UNUSED_PARAMETER(identifier);
  UNUSED_PARAMETER(num);
  UNUSED_PARAMETER(names);
  Warning( "glGenNamesAMD not available." );
}

GLboolean REGAL_CALL missing_glIsNameAMD(GLenum identifier, GLuint name)
{
  UNUSED_PARAMETER(identifier);
  UNUSED_PARAMETER(name);
  Warning( "glIsNameAMD not available." );
  return (GLboolean )0;
}

// GL_AMD_performance_monitor

void REGAL_CALL missing_glBeginPerfMonitorAMD(GLuint monitor)
{
  UNUSED_PARAMETER(monitor);
  Warning( "glBeginPerfMonitorAMD not available." );
}

void REGAL_CALL missing_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(monitors);
  Warning( "glDeletePerfMonitorsAMD not available." );
}

void REGAL_CALL missing_glEndPerfMonitorAMD(GLuint monitor)
{
  UNUSED_PARAMETER(monitor);
  Warning( "glEndPerfMonitorAMD not available." );
}

void REGAL_CALL missing_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(monitors);
  Warning( "glGenPerfMonitorsAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  UNUSED_PARAMETER(monitor);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(dataSize);
  UNUSED_PARAMETER(data);
  UNUSED_PARAMETER(bytesWritten);
  Warning( "glGetPerfMonitorCounterDataAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  UNUSED_PARAMETER(group);
  UNUSED_PARAMETER(counter);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(data);
  Warning( "glGetPerfMonitorCounterInfoAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  UNUSED_PARAMETER(group);
  UNUSED_PARAMETER(counter);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(counterString);
  Warning( "glGetPerfMonitorCounterStringAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  UNUSED_PARAMETER(group);
  UNUSED_PARAMETER(numCounters);
  UNUSED_PARAMETER(maxActiveCounters);
  UNUSED_PARAMETER(countersSize);
  UNUSED_PARAMETER(counters);
  Warning( "glGetPerfMonitorCountersAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  UNUSED_PARAMETER(group);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(groupString);
  Warning( "glGetPerfMonitorGroupStringAMD not available." );
}

void REGAL_CALL missing_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  UNUSED_PARAMETER(numGroups);
  UNUSED_PARAMETER(groupsSize);
  UNUSED_PARAMETER(groups);
  Warning( "glGetPerfMonitorGroupsAMD not available." );
}

void REGAL_CALL missing_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  UNUSED_PARAMETER(monitor);
  UNUSED_PARAMETER(enable);
  UNUSED_PARAMETER(group);
  UNUSED_PARAMETER(numCounters);
  UNUSED_PARAMETER(counterList);
  Warning( "glSelectPerfMonitorCountersAMD not available." );
}

// GL_AMD_sample_positions

void REGAL_CALL missing_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(val);
  Warning( "glSetMultisamplefvAMD not available." );
}

// GL_AMD_stencil_operation_extended

void REGAL_CALL missing_glStencilOpValueAMD(GLenum face, GLuint value)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(value);
  Warning( "glStencilOpValueAMD not available." );
}

// GL_AMD_vertex_shader_tessellator

void REGAL_CALL missing_glTessellationFactorAMD(GLfloat factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glTessellationFactorAMD not available." );
}

void REGAL_CALL missing_glTessellationModeAMD(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glTessellationModeAMD not available." );
}

// GL_ANGLE_framebuffer_blit

void REGAL_CALL missing_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  UNUSED_PARAMETER(srcX0);
  UNUSED_PARAMETER(srcY0);
  UNUSED_PARAMETER(srcX1);
  UNUSED_PARAMETER(srcY1);
  UNUSED_PARAMETER(dstX0);
  UNUSED_PARAMETER(dstY0);
  UNUSED_PARAMETER(dstX1);
  UNUSED_PARAMETER(dstY1);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(filter);
  Warning( "glBlitFramebufferANGLE not available." );
}

// GL_ANGLE_framebuffer_multisample

void REGAL_CALL missing_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisampleANGLE not available." );
}

// GL_ANGLE_instanced_arrays

void REGAL_CALL missing_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawArraysInstancedANGLE not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawElementsInstancedANGLE not available." );
}

void REGAL_CALL missing_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(divisor);
  Warning( "glVertexAttribDivisorANGLE not available." );
}

// GL_ANGLE_translated_shader_source

void REGAL_CALL missing_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(bufsize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(source);
  Warning( "glGetTranslatedShaderSourceANGLE not available." );
}

// GL_APPLE_copy_texture_levels

void REGAL_CALL missing_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  UNUSED_PARAMETER(destinationTexture);
  UNUSED_PARAMETER(sourceTexture);
  UNUSED_PARAMETER(sourceBaseLevel);
  UNUSED_PARAMETER(sourceLevelCount);
  Warning( "glCopyTextureLevelsAPPLE not available." );
}

// GL_APPLE_element_array

void REGAL_CALL missing_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  Warning( "glDrawElementArrayAPPLE not available." );
}

void REGAL_CALL missing_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  Warning( "glDrawRangeElementArrayAPPLE not available." );
}

void REGAL_CALL missing_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glElementPointerAPPLE not available." );
}

void REGAL_CALL missing_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawElementArrayAPPLE not available." );
}

void REGAL_CALL missing_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawRangeElementArrayAPPLE not available." );
}

// GL_APPLE_fence

void REGAL_CALL missing_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(fences);
  Warning( "glDeleteFencesAPPLE not available." );
}

void REGAL_CALL missing_glFinishFenceAPPLE(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glFinishFenceAPPLE not available." );
}

void REGAL_CALL missing_glFinishObjectAPPLE(GLenum object, GLint name)
{
  UNUSED_PARAMETER(object);
  UNUSED_PARAMETER(name);
  Warning( "glFinishObjectAPPLE not available." );
}

void REGAL_CALL missing_glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(fences);
  Warning( "glGenFencesAPPLE not available." );
}

GLboolean REGAL_CALL missing_glIsFenceAPPLE(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glIsFenceAPPLE not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glSetFenceAPPLE(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glSetFenceAPPLE not available." );
}

GLboolean REGAL_CALL missing_glTestFenceAPPLE(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glTestFenceAPPLE not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glTestObjectAPPLE(GLenum object, GLuint name)
{
  UNUSED_PARAMETER(object);
  UNUSED_PARAMETER(name);
  Warning( "glTestObjectAPPLE not available." );
  return (GLboolean )0;
}

// GL_APPLE_flush_buffer_range

void REGAL_CALL missing_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glBufferParameteriAPPLE not available." );
}

void REGAL_CALL missing_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glFlushMappedBufferRangeAPPLE not available." );
}

// GL_APPLE_flush_render

void REGAL_CALL missing_glFinishRenderAPPLE(void)
{
  Warning( "glFinishRenderAPPLE not available." );
}

void REGAL_CALL missing_glFlushRenderAPPLE(void)
{
  Warning( "glFlushRenderAPPLE not available." );
}

void REGAL_CALL missing_glSwapAPPLE(void)
{
  Warning( "glSwapAPPLE not available." );
}

// GL_APPLE_framebuffer_multisample

void REGAL_CALL missing_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisampleAPPLE not available." );
}

void REGAL_CALL missing_glResolveMultisampleFramebufferAPPLE(void)
{
  Warning( "glResolveMultisampleFramebufferAPPLE not available." );
}

// GL_APPLE_object_purgeable

void REGAL_CALL missing_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(objectType);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetObjectParameterivAPPLE not available." );
}

GLenum REGAL_CALL missing_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  UNUSED_PARAMETER(objectType);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(option);
  Warning( "glObjectPurgeableAPPLE not available." );
  return (GLenum )0;
}

GLenum REGAL_CALL missing_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  UNUSED_PARAMETER(objectType);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(option);
  Warning( "glObjectUnpurgeableAPPLE not available." );
  return (GLenum )0;
}

// GL_APPLE_sync

GLenum REGAL_CALL missing_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(flags);
  UNUSED_PARAMETER(timeout);
  Warning( "glClientWaitSyncAPPLE not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glDeleteSyncAPPLE(GLsync sync)
{
  UNUSED_PARAMETER(sync);
  Warning( "glDeleteSyncAPPLE not available." );
}

GLsync REGAL_CALL missing_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
{
  UNUSED_PARAMETER(condition);
  UNUSED_PARAMETER(flags);
  Warning( "glFenceSyncAPPLE not available." );
  return (GLsync )0;
}

void REGAL_CALL missing_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetInteger64vAPPLE not available." );
}

void REGAL_CALL missing_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(values);
  Warning( "glGetSyncivAPPLE not available." );
}

GLboolean REGAL_CALL missing_glIsSyncAPPLE(GLsync sync)
{
  UNUSED_PARAMETER(sync);
  Warning( "glIsSyncAPPLE not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(flags);
  UNUSED_PARAMETER(timeout);
  Warning( "glWaitSyncAPPLE not available." );
}

// GL_APPLE_texture_range

void REGAL_CALL missing_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterPointervAPPLE not available." );
}

void REGAL_CALL missing_glTextureRangeAPPLE(GLenum target, GLsizei length, GLvoid *pointer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(pointer);
  Warning( "glTextureRangeAPPLE not available." );
}

// GL_APPLE_vertex_array_object

void REGAL_CALL missing_glBindVertexArrayAPPLE(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glBindVertexArrayAPPLE not available." );
}

void REGAL_CALL missing_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glDeleteVertexArraysAPPLE not available." );
}

void REGAL_CALL missing_glGenVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glGenVertexArraysAPPLE not available." );
}

GLboolean REGAL_CALL missing_glIsVertexArrayAPPLE(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glIsVertexArrayAPPLE not available." );
  return (GLboolean )0;
}

// GL_APPLE_vertex_array_range

void REGAL_CALL missing_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(pointer);
  Warning( "glFlushVertexArrayRangeAPPLE not available." );
}

void REGAL_CALL missing_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glVertexArrayParameteriAPPLE not available." );
}

void REGAL_CALL missing_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexArrayRangeAPPLE not available." );
}

// GL_APPLE_vertex_program_evaluators

void REGAL_CALL missing_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  Warning( "glDisableVertexAttribAPPLE not available." );
}

void REGAL_CALL missing_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  Warning( "glEnableVertexAttribAPPLE not available." );
}

GLboolean REGAL_CALL missing_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  Warning( "glIsVertexAttribEnabledAPPLE not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(order);
  UNUSED_PARAMETER(points);
  Warning( "glMapVertexAttrib1dAPPLE not available." );
}

void REGAL_CALL missing_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(order);
  UNUSED_PARAMETER(points);
  Warning( "glMapVertexAttrib1fAPPLE not available." );
}

void REGAL_CALL missing_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(points);
  Warning( "glMapVertexAttrib2dAPPLE not available." );
}

void REGAL_CALL missing_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(points);
  Warning( "glMapVertexAttrib2fAPPLE not available." );
}

// GL_ARB_ES2_compatibility

void REGAL_CALL missing_glClearDepthf(GLclampf d)
{
  UNUSED_PARAMETER(d);
  Warning( "glClearDepthf not available." );
}

void REGAL_CALL missing_glDepthRangef(GLclampf n, GLclampf f)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(f);
  Warning( "glDepthRangef not available." );
}

void REGAL_CALL missing_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  UNUSED_PARAMETER(shadertype);
  UNUSED_PARAMETER(precisiontype);
  UNUSED_PARAMETER(range);
  UNUSED_PARAMETER(precision);
  Warning( "glGetShaderPrecisionFormat not available." );
}

void REGAL_CALL missing_glReleaseShaderCompiler(void)
{
  Warning( "glReleaseShaderCompiler not available." );
}

void REGAL_CALL missing_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(shaders);
  UNUSED_PARAMETER(binaryformat);
  UNUSED_PARAMETER(binary);
  UNUSED_PARAMETER(length);
  Warning( "glShaderBinary not available." );
}

// GL_ARB_base_instance

void REGAL_CALL missing_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(baseinstance);
  Warning( "glDrawArraysInstancedBaseInstance not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(baseinstance);
  Warning( "glDrawElementsInstancedBaseInstance not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(basevertex);
  UNUSED_PARAMETER(baseinstance);
  Warning( "glDrawElementsInstancedBaseVertexBaseInstance not available." );
}

// GL_ARB_blend_func_extended

void REGAL_CALL missing_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(colorNumber);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(name);
  Warning( "glBindFragDataLocationIndexed not available." );
}

GLint REGAL_CALL missing_glGetFragDataIndex(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetFragDataIndex not available." );
  return (GLint )0;
}

// GL_ARB_cl_event

GLsync REGAL_CALL missing_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
{
  UNUSED_PARAMETER(context);
  UNUSED_PARAMETER(event);
  UNUSED_PARAMETER(flags);
  Warning( "glCreateSyncFromCLeventARB not available." );
  return (GLsync )0;
}

// GL_ARB_clear_buffer_object

void REGAL_CALL missing_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glClearBufferData not available." );
}

void REGAL_CALL missing_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glClearBufferSubData not available." );
}

void REGAL_CALL missing_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glClearNamedBufferDataEXT not available." );
}

void REGAL_CALL missing_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glClearNamedBufferSubDataEXT not available." );
}

// GL_ARB_color_buffer_float

void REGAL_CALL missing_glClampColorARB(GLenum target, GLenum clamp)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(clamp);
  Warning( "glClampColorARB not available." );
}

// GL_ARB_compute_shader

void REGAL_CALL missing_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  UNUSED_PARAMETER(num_groups_x);
  UNUSED_PARAMETER(num_groups_y);
  UNUSED_PARAMETER(num_groups_z);
  Warning( "glDispatchCompute not available." );
}

void REGAL_CALL missing_glDispatchComputeIndirect(GLintptr indirect)
{
  UNUSED_PARAMETER(indirect);
  Warning( "glDispatchComputeIndirect not available." );
}

// GL_ARB_copy_buffer

void REGAL_CALL missing_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  UNUSED_PARAMETER(readtarget);
  UNUSED_PARAMETER(writetarget);
  UNUSED_PARAMETER(readoffset);
  UNUSED_PARAMETER(writeoffset);
  UNUSED_PARAMETER(size);
  Warning( "glCopyBufferSubData not available." );
}

// GL_ARB_copy_image

void REGAL_CALL missing_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  UNUSED_PARAMETER(srcName);
  UNUSED_PARAMETER(srcTarget);
  UNUSED_PARAMETER(srcLevel);
  UNUSED_PARAMETER(srcX);
  UNUSED_PARAMETER(srcY);
  UNUSED_PARAMETER(srcZ);
  UNUSED_PARAMETER(dstName);
  UNUSED_PARAMETER(dstTarget);
  UNUSED_PARAMETER(dstLevel);
  UNUSED_PARAMETER(dstX);
  UNUSED_PARAMETER(dstY);
  UNUSED_PARAMETER(dstZ);
  UNUSED_PARAMETER(srcWidth);
  UNUSED_PARAMETER(srcHeight);
  UNUSED_PARAMETER(srcDepth);
  Warning( "glCopyImageSubData not available." );
}

// GL_ARB_debug_output

void REGAL_CALL missing_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, GLvoid *userParam)
{
  UNUSED_PARAMETER(callback);
  UNUSED_PARAMETER(userParam);
  Warning( "glDebugMessageCallbackARB not available." );
}

void REGAL_CALL missing_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(enabled);
  Warning( "glDebugMessageControlARB not available." );
}

void REGAL_CALL missing_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(buf);
  Warning( "glDebugMessageInsertARB not available." );
}

GLuint REGAL_CALL missing_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(bufsize);
  UNUSED_PARAMETER(sources);
  UNUSED_PARAMETER(types);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(severities);
  UNUSED_PARAMETER(lengths);
  UNUSED_PARAMETER(messageLog);
  Warning( "glGetDebugMessageLogARB not available." );
  return (GLuint )0;
}

// GL_ARB_draw_buffers

void REGAL_CALL missing_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(bufs);
  Warning( "glDrawBuffersARB not available." );
}

// GL_ARB_draw_buffers_blend

void REGAL_CALL missing_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparateiARB not available." );
}

void REGAL_CALL missing_glBlendEquationiARB(GLuint buf, GLenum mode)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquationiARB not available." );
}

void REGAL_CALL missing_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(srcRGB);
  UNUSED_PARAMETER(dstRGB);
  UNUSED_PARAMETER(srcAlpha);
  UNUSED_PARAMETER(dstAlpha);
  Warning( "glBlendFuncSeparateiARB not available." );
}

void REGAL_CALL missing_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(dst);
  Warning( "glBlendFunciARB not available." );
}

// GL_ARB_draw_elements_base_vertex

void REGAL_CALL missing_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(basevertex);
  Warning( "glDrawElementsBaseVertex not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(basevertex);
  Warning( "glDrawElementsInstancedBaseVertex not available." );
}

void REGAL_CALL missing_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(basevertex);
  Warning( "glDrawRangeElementsBaseVertex not available." );
}

void REGAL_CALL missing_glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid **indices, GLsizei primcount, GLint *basevertex)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(basevertex);
  Warning( "glMultiDrawElementsBaseVertex not available." );
}

// GL_ARB_draw_indirect

void REGAL_CALL missing_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(indirect);
  Warning( "glDrawArraysIndirect not available." );
}

void REGAL_CALL missing_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indirect);
  Warning( "glDrawElementsIndirect not available." );
}

// GL_ARB_draw_instanced

void REGAL_CALL missing_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawArraysInstancedARB not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawElementsInstancedARB not available." );
}

// GL_ARB_framebuffer_no_attachments

void REGAL_CALL missing_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFramebufferParameteri not available." );
}

void REGAL_CALL missing_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFramebufferParameteriv not available." );
}

void REGAL_CALL missing_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedFramebufferParameterivEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glNamedFramebufferParameteriEXT not available." );
}

// GL_ARB_framebuffer_object

void REGAL_CALL missing_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(framebuffer);
  Warning( "glBindFramebuffer not available." );
}

void REGAL_CALL missing_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glBindRenderbuffer not available." );
}

void REGAL_CALL missing_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  UNUSED_PARAMETER(srcX0);
  UNUSED_PARAMETER(srcY0);
  UNUSED_PARAMETER(srcX1);
  UNUSED_PARAMETER(srcY1);
  UNUSED_PARAMETER(dstX0);
  UNUSED_PARAMETER(dstY0);
  UNUSED_PARAMETER(dstX1);
  UNUSED_PARAMETER(dstY1);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(filter);
  Warning( "glBlitFramebuffer not available." );
}

GLenum REGAL_CALL missing_glCheckFramebufferStatus(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glCheckFramebufferStatus not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glDeleteFramebuffers not available." );
}

void REGAL_CALL missing_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glDeleteRenderbuffers not available." );
}

void REGAL_CALL missing_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(renderbuffertarget);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glFramebufferRenderbuffer not available." );
}

void REGAL_CALL missing_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture1D not available." );
}

void REGAL_CALL missing_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture2D not available." );
}

void REGAL_CALL missing_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layer);
  Warning( "glFramebufferTexture3D not available." );
}

void REGAL_CALL missing_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layer);
  Warning( "glFramebufferTextureLayer not available." );
}

void REGAL_CALL missing_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glGenFramebuffers not available." );
}

void REGAL_CALL missing_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glGenRenderbuffers not available." );
}

void REGAL_CALL missing_glGenerateMipmap(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glGenerateMipmap not available." );
}

void REGAL_CALL missing_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFramebufferAttachmentParameteriv not available." );
}

void REGAL_CALL missing_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetRenderbufferParameteriv not available." );
}

GLboolean REGAL_CALL missing_glIsFramebuffer(GLuint framebuffer)
{
  UNUSED_PARAMETER(framebuffer);
  Warning( "glIsFramebuffer not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsRenderbuffer(GLuint renderbuffer)
{
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glIsRenderbuffer not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorage not available." );
}

void REGAL_CALL missing_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisample not available." );
}

// GL_ARB_geometry_shader4

void REGAL_CALL missing_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTextureARB not available." );
}

void REGAL_CALL missing_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(face);
  Warning( "glFramebufferTextureFaceARB not available." );
}

void REGAL_CALL missing_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layer);
  Warning( "glFramebufferTextureLayerARB not available." );
}

void REGAL_CALL missing_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glProgramParameteriARB not available." );
}

// GL_ARB_get_program_binary

void REGAL_CALL missing_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(binaryFormat);
  UNUSED_PARAMETER(binary);
  Warning( "glGetProgramBinary not available." );
}

void REGAL_CALL missing_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(binaryFormat);
  UNUSED_PARAMETER(binary);
  UNUSED_PARAMETER(length);
  Warning( "glProgramBinary not available." );
}

void REGAL_CALL missing_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glProgramParameteri not available." );
}

// GL_ARB_gpu_shader_fp64

void REGAL_CALL missing_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformdv not available." );
}

void REGAL_CALL missing_glUniform1d(GLint location, GLdouble x)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glUniform1d not available." );
}

void REGAL_CALL missing_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1dv not available." );
}

void REGAL_CALL missing_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glUniform2d not available." );
}

void REGAL_CALL missing_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2dv not available." );
}

void REGAL_CALL missing_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glUniform3d not available." );
}

void REGAL_CALL missing_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3dv not available." );
}

void REGAL_CALL missing_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glUniform4d not available." );
}

void REGAL_CALL missing_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4dv not available." );
}

void REGAL_CALL missing_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2dv not available." );
}

void REGAL_CALL missing_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2x3dv not available." );
}

void REGAL_CALL missing_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2x4dv not available." );
}

void REGAL_CALL missing_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3dv not available." );
}

void REGAL_CALL missing_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3x2dv not available." );
}

void REGAL_CALL missing_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3x4dv not available." );
}

void REGAL_CALL missing_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4dv not available." );
}

void REGAL_CALL missing_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4x2dv not available." );
}

void REGAL_CALL missing_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4x3dv not available." );
}

// GL_ARB_imaging

void REGAL_CALL missing_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glColorSubTable not available." );
}

void REGAL_CALL missing_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glColorTable not available." );
}

void REGAL_CALL missing_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glColorTableParameterfv not available." );
}

void REGAL_CALL missing_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glColorTableParameteriv not available." );
}

void REGAL_CALL missing_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glConvolutionFilter1D not available." );
}

void REGAL_CALL missing_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glConvolutionFilter2D not available." );
}

void REGAL_CALL missing_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameterf not available." );
}

void REGAL_CALL missing_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameterfv not available." );
}

void REGAL_CALL missing_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameteri not available." );
}

void REGAL_CALL missing_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameteriv not available." );
}

void REGAL_CALL missing_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyColorSubTable not available." );
}

void REGAL_CALL missing_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyColorTable not available." );
}

void REGAL_CALL missing_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyConvolutionFilter1D not available." );
}

void REGAL_CALL missing_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyConvolutionFilter2D not available." );
}

void REGAL_CALL missing_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glGetColorTable not available." );
}

void REGAL_CALL missing_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameterfv not available." );
}

void REGAL_CALL missing_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameteriv not available." );
}

void REGAL_CALL missing_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glGetConvolutionFilter not available." );
}

void REGAL_CALL missing_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetConvolutionParameterfv not available." );
}

void REGAL_CALL missing_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetConvolutionParameteriv not available." );
}

void REGAL_CALL missing_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(values);
  Warning( "glGetHistogram not available." );
}

void REGAL_CALL missing_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetHistogramParameterfv not available." );
}

void REGAL_CALL missing_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetHistogramParameteriv not available." );
}

void REGAL_CALL missing_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(types);
  UNUSED_PARAMETER(values);
  Warning( "glGetMinmax not available." );
}

void REGAL_CALL missing_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMinmaxParameterfv not available." );
}

void REGAL_CALL missing_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMinmaxParameteriv not available." );
}

void REGAL_CALL missing_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(row);
  UNUSED_PARAMETER(column);
  UNUSED_PARAMETER(span);
  Warning( "glGetSeparableFilter not available." );
}

void REGAL_CALL missing_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(sink);
  Warning( "glHistogram not available." );
}

void REGAL_CALL missing_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(sink);
  Warning( "glMinmax not available." );
}

void REGAL_CALL missing_glResetHistogram(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glResetHistogram not available." );
}

void REGAL_CALL missing_glResetMinmax(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glResetMinmax not available." );
}

void REGAL_CALL missing_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(row);
  UNUSED_PARAMETER(column);
  Warning( "glSeparableFilter2D not available." );
}

// GL_ARB_instanced_arrays

void REGAL_CALL missing_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(divisor);
  Warning( "glVertexAttribDivisorARB not available." );
}

// GL_ARB_internalformat_query

void REGAL_CALL missing_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetInternalformativ not available." );
}

// GL_ARB_internalformat_query2

void REGAL_CALL missing_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetInternalformati64v not available." );
}

// GL_ARB_invalidate_subdata

void REGAL_CALL missing_glInvalidateBufferData(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glInvalidateBufferData not available." );
}

void REGAL_CALL missing_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  Warning( "glInvalidateBufferSubData not available." );
}

void REGAL_CALL missing_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(numAttachments);
  UNUSED_PARAMETER(attachments);
  Warning( "glInvalidateFramebuffer not available." );
}

void REGAL_CALL missing_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(numAttachments);
  UNUSED_PARAMETER(attachments);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glInvalidateSubFramebuffer not available." );
}

void REGAL_CALL missing_glInvalidateTexImage(GLuint texture, GLint level)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glInvalidateTexImage not available." );
}

void REGAL_CALL missing_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  Warning( "glInvalidateTexSubImage not available." );
}

// GL_ARB_map_buffer_range

void REGAL_CALL missing_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  Warning( "glFlushMappedBufferRange not available." );
}

GLvoid *REGAL_CALL missing_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(access);
  Warning( "glMapBufferRange not available." );
  return NULL;
}

// GL_ARB_matrix_palette

void REGAL_CALL missing_glCurrentPaletteMatrixARB(GLint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glCurrentPaletteMatrixARB not available." );
}

void REGAL_CALL missing_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glMatrixIndexPointerARB not available." );
}

void REGAL_CALL missing_glMatrixIndexubvARB(GLint size, GLubyte *indices)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(indices);
  Warning( "glMatrixIndexubvARB not available." );
}

void REGAL_CALL missing_glMatrixIndexuivARB(GLint size, GLuint *indices)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(indices);
  Warning( "glMatrixIndexuivARB not available." );
}

void REGAL_CALL missing_glMatrixIndexusvARB(GLint size, GLushort *indices)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(indices);
  Warning( "glMatrixIndexusvARB not available." );
}

// GL_ARB_multi_draw_indirect

void REGAL_CALL missing_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(indirect);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(stride);
  Warning( "glMultiDrawArraysIndirect not available." );
}

void REGAL_CALL missing_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indirect);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(stride);
  Warning( "glMultiDrawElementsIndirect not available." );
}

// GL_ARB_multisample

void REGAL_CALL missing_glSampleCoverageARB(GLclampf value, GLboolean invert)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(invert);
  Warning( "glSampleCoverageARB not available." );
}

// GL_ARB_multitexture

void REGAL_CALL missing_glActiveTextureARB(GLenum texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glActiveTextureARB not available." );
}

void REGAL_CALL missing_glClientActiveTextureARB(GLenum texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glClientActiveTextureARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1dARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1dvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1fARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1fvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1iARB(GLenum target, GLint s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1iARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1ivARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1sARB(GLenum target, GLshort s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1sARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1svARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2dARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2dvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2fARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2fvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2iARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2ivARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2sARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2svARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3dARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3dvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3fARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3fvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3iARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3ivARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3sARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3svARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4dARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4dvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4fARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4fvARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4iARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4ivARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4sARB not available." );
}

void REGAL_CALL missing_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4svARB not available." );
}

// GL_ARB_occlusion_query

void REGAL_CALL missing_glBeginQueryARB(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBeginQueryARB not available." );
}

void REGAL_CALL missing_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteQueriesARB not available." );
}

void REGAL_CALL missing_glEndQueryARB(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glEndQueryARB not available." );
}

void REGAL_CALL missing_glGenQueriesARB(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenQueriesARB not available." );
}

void REGAL_CALL missing_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectivARB not available." );
}

void REGAL_CALL missing_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectuivARB not available." );
}

void REGAL_CALL missing_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryivARB not available." );
}

GLboolean REGAL_CALL missing_glIsQueryARB(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsQueryARB not available." );
  return (GLboolean )0;
}

// GL_ARB_point_parameters

void REGAL_CALL missing_glPointParameterfARB(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameterfARB not available." );
}

void REGAL_CALL missing_glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameterfvARB not available." );
}

// GL_ARB_program_interface_query

void REGAL_CALL missing_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramInterfaceiv not available." );
}

GLuint REGAL_CALL missing_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(name);
  Warning( "glGetProgramResourceIndex not available." );
  return (GLuint )0;
}

GLint REGAL_CALL missing_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(name);
  Warning( "glGetProgramResourceLocation not available." );
  return (GLint )0;
}

GLint REGAL_CALL missing_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(name);
  Warning( "glGetProgramResourceLocationIndex not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(name);
  Warning( "glGetProgramResourceName not available." );
}

void REGAL_CALL missing_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(programInterface);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(propCount);
  UNUSED_PARAMETER(props);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramResourceiv not available." );
}

// GL_ARB_provoking_vertex

void REGAL_CALL missing_glProvokingVertex(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glProvokingVertex not available." );
}

// GL_ARB_robustness

GLenum REGAL_CALL missing_glGetGraphicsResetStatusARB(void)
{
  Warning( "glGetGraphicsResetStatusARB not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(table);
  Warning( "glGetnColorTableARB not available." );
}

void REGAL_CALL missing_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lod);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(img);
  Warning( "glGetnCompressedTexImageARB not available." );
}

void REGAL_CALL missing_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(image);
  Warning( "glGetnConvolutionFilterARB not available." );
}

void REGAL_CALL missing_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(values);
  Warning( "glGetnHistogramARB not available." );
}

void REGAL_CALL missing_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(v);
  Warning( "glGetnMapdvARB not available." );
}

void REGAL_CALL missing_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(v);
  Warning( "glGetnMapfvARB not available." );
}

void REGAL_CALL missing_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(query);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(v);
  Warning( "glGetnMapivARB not available." );
}

void REGAL_CALL missing_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(values);
  Warning( "glGetnMinmaxARB not available." );
}

void REGAL_CALL missing_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(values);
  Warning( "glGetnPixelMapfvARB not available." );
}

void REGAL_CALL missing_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(values);
  Warning( "glGetnPixelMapuivARB not available." );
}

void REGAL_CALL missing_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
  UNUSED_PARAMETER(map);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(values);
  Warning( "glGetnPixelMapusvARB not available." );
}

void REGAL_CALL missing_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(pattern);
  Warning( "glGetnPolygonStippleARB not available." );
}

void REGAL_CALL missing_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(rowBufSize);
  UNUSED_PARAMETER(row);
  UNUSED_PARAMETER(columnBufSize);
  UNUSED_PARAMETER(column);
  UNUSED_PARAMETER(span);
  Warning( "glGetnSeparableFilterARB not available." );
}

void REGAL_CALL missing_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(img);
  Warning( "glGetnTexImageARB not available." );
}

void REGAL_CALL missing_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformdvARB not available." );
}

void REGAL_CALL missing_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformfvARB not available." );
}

void REGAL_CALL missing_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformivARB not available." );
}

void REGAL_CALL missing_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformuivARB not available." );
}

void REGAL_CALL missing_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(data);
  Warning( "glReadnPixelsARB not available." );
}

// GL_ARB_sample_shading

void REGAL_CALL missing_glMinSampleShading(GLclampf value)
{
  UNUSED_PARAMETER(value);
  Warning( "glMinSampleShading not available." );
}

void REGAL_CALL missing_glMinSampleShadingARB(GLclampf value)
{
  UNUSED_PARAMETER(value);
  Warning( "glMinSampleShadingARB not available." );
}

// GL_ARB_sampler_objects

void REGAL_CALL missing_glBindSampler(GLuint unit, GLuint sampler)
{
  UNUSED_PARAMETER(unit);
  UNUSED_PARAMETER(sampler);
  Warning( "glBindSampler not available." );
}

void REGAL_CALL missing_glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(samplers);
  Warning( "glDeleteSamplers not available." );
}

void REGAL_CALL missing_glGenSamplers(GLsizei count, GLuint *samplers)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(samplers);
  Warning( "glGenSamplers not available." );
}

void REGAL_CALL missing_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetSamplerParameterIiv not available." );
}

void REGAL_CALL missing_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetSamplerParameterIuiv not available." );
}

void REGAL_CALL missing_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetSamplerParameterfv not available." );
}

void REGAL_CALL missing_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetSamplerParameteriv not available." );
}

GLboolean REGAL_CALL missing_glIsSampler(GLuint sampler)
{
  UNUSED_PARAMETER(sampler);
  Warning( "glIsSampler not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSamplerParameterIiv not available." );
}

void REGAL_CALL missing_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSamplerParameterIuiv not available." );
}

void REGAL_CALL missing_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glSamplerParameterf not available." );
}

void REGAL_CALL missing_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSamplerParameterfv not available." );
}

void REGAL_CALL missing_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glSamplerParameteri not available." );
}

void REGAL_CALL missing_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(sampler);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSamplerParameteriv not available." );
}

// GL_ARB_separate_shader_objects

void REGAL_CALL missing_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
  UNUSED_PARAMETER(pipeline);
  UNUSED_PARAMETER(program);
  Warning( "glActiveShaderProgram not available." );
}

void REGAL_CALL missing_glBindProgramPipeline(GLuint pipeline)
{
  UNUSED_PARAMETER(pipeline);
  Warning( "glBindProgramPipeline not available." );
}

GLuint REGAL_CALL missing_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar **strings)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(strings);
  Warning( "glCreateShaderProgramv not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(pipelines);
  Warning( "glDeleteProgramPipelines not available." );
}

void REGAL_CALL missing_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(pipelines);
  Warning( "glGenProgramPipelines not available." );
}

void REGAL_CALL missing_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  UNUSED_PARAMETER(pipeline);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(infoLog);
  Warning( "glGetProgramPipelineInfoLog not available." );
}

void REGAL_CALL missing_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(pipeline);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramPipelineiv not available." );
}

GLboolean REGAL_CALL missing_glIsProgramPipeline(GLuint pipeline)
{
  UNUSED_PARAMETER(pipeline);
  Warning( "glIsProgramPipeline not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1d not available." );
}

void REGAL_CALL missing_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1dv not available." );
}

void REGAL_CALL missing_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1f not available." );
}

void REGAL_CALL missing_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1fv not available." );
}

void REGAL_CALL missing_glProgramUniform1i(GLuint program, GLint location, GLint x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1i not available." );
}

void REGAL_CALL missing_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1iv not available." );
}

void REGAL_CALL missing_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glProgramUniform1ui not available." );
}

void REGAL_CALL missing_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1uiv not available." );
}

void REGAL_CALL missing_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2d not available." );
}

void REGAL_CALL missing_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2dv not available." );
}

void REGAL_CALL missing_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2f not available." );
}

void REGAL_CALL missing_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2fv not available." );
}

void REGAL_CALL missing_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2i not available." );
}

void REGAL_CALL missing_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2iv not available." );
}

void REGAL_CALL missing_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2ui not available." );
}

void REGAL_CALL missing_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2uiv not available." );
}

void REGAL_CALL missing_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3d not available." );
}

void REGAL_CALL missing_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3dv not available." );
}

void REGAL_CALL missing_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3f not available." );
}

void REGAL_CALL missing_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3fv not available." );
}

void REGAL_CALL missing_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3i not available." );
}

void REGAL_CALL missing_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3iv not available." );
}

void REGAL_CALL missing_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3ui not available." );
}

void REGAL_CALL missing_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3uiv not available." );
}

void REGAL_CALL missing_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4d not available." );
}

void REGAL_CALL missing_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4dv not available." );
}

void REGAL_CALL missing_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4f not available." );
}

void REGAL_CALL missing_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4fv not available." );
}

void REGAL_CALL missing_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4i not available." );
}

void REGAL_CALL missing_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4iv not available." );
}

void REGAL_CALL missing_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4ui not available." );
}

void REGAL_CALL missing_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4uiv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x3dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x3fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x4dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x4fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x2dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x2fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x4dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x4fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x2dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x2fv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x3dv not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x3fv not available." );
}

void REGAL_CALL missing_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
  UNUSED_PARAMETER(pipeline);
  UNUSED_PARAMETER(stages);
  UNUSED_PARAMETER(program);
  Warning( "glUseProgramStages not available." );
}

void REGAL_CALL missing_glValidateProgramPipeline(GLuint pipeline)
{
  UNUSED_PARAMETER(pipeline);
  Warning( "glValidateProgramPipeline not available." );
}

// GL_ARB_shader_atomic_counters

void REGAL_CALL missing_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(bufferIndex);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetActiveAtomicCounterBufferiv not available." );
}

// GL_ARB_shader_image_load_store

void REGAL_CALL missing_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  UNUSED_PARAMETER(unit);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layered);
  UNUSED_PARAMETER(layer);
  UNUSED_PARAMETER(access);
  UNUSED_PARAMETER(format);
  Warning( "glBindImageTexture not available." );
}

void REGAL_CALL missing_glMemoryBarrier(GLbitfield barriers)
{
  UNUSED_PARAMETER(barriers);
  Warning( "glMemoryBarrier not available." );
}

// GL_ARB_shader_objects

void REGAL_CALL missing_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
  UNUSED_PARAMETER(containerObj);
  UNUSED_PARAMETER(obj);
  Warning( "glAttachObjectARB not available." );
}

void REGAL_CALL missing_glCompileShaderARB(GLhandleARB shaderObj)
{
  UNUSED_PARAMETER(shaderObj);
  Warning( "glCompileShaderARB not available." );
}

GLhandleARB REGAL_CALL missing_glCreateProgramObjectARB(void)
{
  Warning( "glCreateProgramObjectARB not available." );
  return (GLhandleARB )0;
}

GLhandleARB REGAL_CALL missing_glCreateShaderObjectARB(GLenum shaderType)
{
  UNUSED_PARAMETER(shaderType);
  Warning( "glCreateShaderObjectARB not available." );
  return (GLhandleARB )0;
}

void REGAL_CALL missing_glDeleteObjectARB(GLhandleARB obj)
{
  UNUSED_PARAMETER(obj);
  Warning( "glDeleteObjectARB not available." );
}

void REGAL_CALL missing_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
  UNUSED_PARAMETER(containerObj);
  UNUSED_PARAMETER(attachedObj);
  Warning( "glDetachObjectARB not available." );
}

void REGAL_CALL missing_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(maxLength);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveUniformARB not available." );
}

void REGAL_CALL missing_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  UNUSED_PARAMETER(containerObj);
  UNUSED_PARAMETER(maxCount);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(obj);
  Warning( "glGetAttachedObjectsARB not available." );
}

GLhandleARB REGAL_CALL missing_glGetHandleARB(GLenum pname)
{
  UNUSED_PARAMETER(pname);
  Warning( "glGetHandleARB not available." );
  return (GLhandleARB )0;
}

void REGAL_CALL missing_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  UNUSED_PARAMETER(obj);
  UNUSED_PARAMETER(maxLength);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(infoLog);
  Warning( "glGetInfoLogARB not available." );
}

void REGAL_CALL missing_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(obj);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetObjectParameterfvARB not available." );
}

void REGAL_CALL missing_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(obj);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetObjectParameterivARB not available." );
}

void REGAL_CALL missing_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  UNUSED_PARAMETER(obj);
  UNUSED_PARAMETER(maxLength);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(source);
  Warning( "glGetShaderSourceARB not available." );
}

GLint REGAL_CALL missing_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(name);
  Warning( "glGetUniformLocationARB not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformfvARB not available." );
}

void REGAL_CALL missing_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformivARB not available." );
}

void REGAL_CALL missing_glLinkProgramARB(GLhandleARB programObj)
{
  UNUSED_PARAMETER(programObj);
  Warning( "glLinkProgramARB not available." );
}

void REGAL_CALL missing_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
{
  UNUSED_PARAMETER(shaderObj);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(string);
  UNUSED_PARAMETER(length);
  Warning( "glShaderSourceARB not available." );
}

void REGAL_CALL missing_glUniform1fARB(GLint location, GLfloat v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1fARB not available." );
}

void REGAL_CALL missing_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1fvARB not available." );
}

void REGAL_CALL missing_glUniform1iARB(GLint location, GLint v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1iARB not available." );
}

void REGAL_CALL missing_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1ivARB not available." );
}

void REGAL_CALL missing_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2fARB not available." );
}

void REGAL_CALL missing_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2fvARB not available." );
}

void REGAL_CALL missing_glUniform2iARB(GLint location, GLint v0, GLint v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2iARB not available." );
}

void REGAL_CALL missing_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2ivARB not available." );
}

void REGAL_CALL missing_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3fARB not available." );
}

void REGAL_CALL missing_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3fvARB not available." );
}

void REGAL_CALL missing_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3iARB not available." );
}

void REGAL_CALL missing_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3ivARB not available." );
}

void REGAL_CALL missing_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4fARB not available." );
}

void REGAL_CALL missing_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4fvARB not available." );
}

void REGAL_CALL missing_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4iARB not available." );
}

void REGAL_CALL missing_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4ivARB not available." );
}

void REGAL_CALL missing_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix2fvARB not available." );
}

void REGAL_CALL missing_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix3fvARB not available." );
}

void REGAL_CALL missing_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glUniformMatrix4fvARB not available." );
}

void REGAL_CALL missing_glUseProgramObjectARB(GLhandleARB programObj)
{
  UNUSED_PARAMETER(programObj);
  Warning( "glUseProgramObjectARB not available." );
}

void REGAL_CALL missing_glValidateProgramARB(GLhandleARB programObj)
{
  UNUSED_PARAMETER(programObj);
  Warning( "glValidateProgramARB not available." );
}

// GL_ARB_shader_storage_buffer_object

void REGAL_CALL missing_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(storageBlockIndex);
  UNUSED_PARAMETER(storageBlockBinding);
  Warning( "glShaderStorageBlockBinding not available." );
}

// GL_ARB_shader_subroutine

void REGAL_CALL missing_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveSubroutineName not available." );
}

void REGAL_CALL missing_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveSubroutineUniformName not available." );
}

void REGAL_CALL missing_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(values);
  Warning( "glGetActiveSubroutineUniformiv not available." );
}

void REGAL_CALL missing_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(values);
  Warning( "glGetProgramStageiv not available." );
}

GLuint REGAL_CALL missing_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(name);
  Warning( "glGetSubroutineIndex not available." );
  return (GLuint )0;
}

GLint REGAL_CALL missing_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(name);
  Warning( "glGetSubroutineUniformLocation not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformSubroutineuiv not available." );
}

void REGAL_CALL missing_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
  UNUSED_PARAMETER(shaderType);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(indices);
  Warning( "glUniformSubroutinesuiv not available." );
}

// GL_ARB_shading_language_include

void REGAL_CALL missing_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  UNUSED_PARAMETER(shader);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(length);
  Warning( "glCompileShaderIncludeARB not available." );
}

void REGAL_CALL missing_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
  UNUSED_PARAMETER(namelen);
  UNUSED_PARAMETER(name);
  Warning( "glDeleteNamedStringARB not available." );
}

void REGAL_CALL missing_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  UNUSED_PARAMETER(namelen);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(stringlen);
  UNUSED_PARAMETER(string);
  Warning( "glGetNamedStringARB not available." );
}

void REGAL_CALL missing_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(namelen);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedStringivARB not available." );
}

GLboolean REGAL_CALL missing_glIsNamedStringARB(GLint namelen, const GLchar *name)
{
  UNUSED_PARAMETER(namelen);
  UNUSED_PARAMETER(name);
  Warning( "glIsNamedStringARB not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(namelen);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(stringlen);
  UNUSED_PARAMETER(string);
  Warning( "glNamedStringARB not available." );
}

// GL_ARB_sync

GLenum REGAL_CALL missing_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(flags);
  UNUSED_PARAMETER(timeout);
  Warning( "glClientWaitSync not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glDeleteSync(GLsync sync)
{
  UNUSED_PARAMETER(sync);
  Warning( "glDeleteSync not available." );
}

GLsync REGAL_CALL missing_glFenceSync(GLenum condition, GLbitfield flags)
{
  UNUSED_PARAMETER(condition);
  UNUSED_PARAMETER(flags);
  Warning( "glFenceSync not available." );
  return (GLsync )0;
}

void REGAL_CALL missing_glGetInteger64v(GLenum pname, GLint64 *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetInteger64v not available." );
}

void REGAL_CALL missing_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(values);
  Warning( "glGetSynciv not available." );
}

GLboolean REGAL_CALL missing_glIsSync(GLsync sync)
{
  UNUSED_PARAMETER(sync);
  Warning( "glIsSync not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  UNUSED_PARAMETER(sync);
  UNUSED_PARAMETER(flags);
  UNUSED_PARAMETER(timeout);
  Warning( "glWaitSync not available." );
}

// GL_ARB_tessellation_shader

void REGAL_CALL missing_glPatchParameterfv(GLenum pname, const GLfloat *values)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(values);
  Warning( "glPatchParameterfv not available." );
}

void REGAL_CALL missing_glPatchParameteri(GLenum pname, GLint value)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glPatchParameteri not available." );
}

// GL_ARB_texture_buffer_object

void REGAL_CALL missing_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  Warning( "glTexBufferARB not available." );
}

// GL_ARB_texture_buffer_range

void REGAL_CALL missing_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glTexBufferRange not available." );
}

void REGAL_CALL missing_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glTextureBufferRangeEXT not available." );
}

// GL_ARB_texture_compression

void REGAL_CALL missing_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage1DARB not available." );
}

void REGAL_CALL missing_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage2DARB not available." );
}

void REGAL_CALL missing_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage3DARB not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage1DARB not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage2DARB not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage3DARB not available." );
}

void REGAL_CALL missing_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lod);
  UNUSED_PARAMETER(img);
  Warning( "glGetCompressedTexImageARB not available." );
}

// GL_ARB_texture_multisample

void REGAL_CALL missing_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(val);
  Warning( "glGetMultisamplefv not available." );
}

void REGAL_CALL missing_glSampleMaski(GLuint index, GLbitfield mask)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(mask);
  Warning( "glSampleMaski not available." );
}

void REGAL_CALL missing_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTexImage2DMultisample not available." );
}

void REGAL_CALL missing_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTexImage3DMultisample not available." );
}

// GL_ARB_texture_storage

void REGAL_CALL missing_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  Warning( "glTexStorage1D not available." );
}

void REGAL_CALL missing_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glTexStorage2D not available." );
}

void REGAL_CALL missing_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  Warning( "glTexStorage3D not available." );
}

void REGAL_CALL missing_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  Warning( "glTextureStorage1DEXT not available." );
}

void REGAL_CALL missing_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glTextureStorage2DEXT not available." );
}

void REGAL_CALL missing_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  Warning( "glTextureStorage3DEXT not available." );
}

// GL_ARB_texture_storage_multisample

void REGAL_CALL missing_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTexStorage2DMultisample not available." );
}

void REGAL_CALL missing_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTexStorage3DMultisample not available." );
}

void REGAL_CALL missing_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTextureStorage2DMultisampleEXT not available." );
}

void REGAL_CALL missing_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedsamplelocations);
  Warning( "glTextureStorage3DMultisampleEXT not available." );
}

// GL_ARB_texture_view

void REGAL_CALL missing_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(origtexture);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(minlevel);
  UNUSED_PARAMETER(numlevels);
  UNUSED_PARAMETER(minlayer);
  UNUSED_PARAMETER(numlayers);
  Warning( "glTextureView not available." );
}

// GL_ARB_timer_query

void REGAL_CALL missing_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjecti64v not available." );
}

void REGAL_CALL missing_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectui64v not available." );
}

void REGAL_CALL missing_glQueryCounter(GLuint id, GLenum target)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(target);
  Warning( "glQueryCounter not available." );
}

// GL_ARB_transform_feedback2

void REGAL_CALL missing_glBindTransformFeedback(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBindTransformFeedback not available." );
}

void REGAL_CALL missing_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteTransformFeedbacks not available." );
}

void REGAL_CALL missing_glDrawTransformFeedback(GLenum mode, GLuint name)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(name);
  Warning( "glDrawTransformFeedback not available." );
}

void REGAL_CALL missing_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenTransformFeedbacks not available." );
}

GLboolean REGAL_CALL missing_glIsTransformFeedback(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsTransformFeedback not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glPauseTransformFeedback(void)
{
  Warning( "glPauseTransformFeedback not available." );
}

void REGAL_CALL missing_glResumeTransformFeedback(void)
{
  Warning( "glResumeTransformFeedback not available." );
}

// GL_ARB_transform_feedback3

void REGAL_CALL missing_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(id);
  Warning( "glBeginQueryIndexed not available." );
}

void REGAL_CALL missing_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(stream);
  Warning( "glDrawTransformFeedbackStream not available." );
}

void REGAL_CALL missing_glEndQueryIndexed(GLenum target, GLuint index)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  Warning( "glEndQueryIndexed not available." );
}

void REGAL_CALL missing_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryIndexediv not available." );
}

// GL_ARB_transform_feedback_instanced

void REGAL_CALL missing_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawTransformFeedbackInstanced not available." );
}

void REGAL_CALL missing_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawTransformFeedbackStreamInstanced not available." );
}

// GL_ARB_transpose_matrix

void REGAL_CALL missing_glLoadTransposeMatrixdARB(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadTransposeMatrixdARB not available." );
}

void REGAL_CALL missing_glLoadTransposeMatrixfARB(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glLoadTransposeMatrixfARB not available." );
}

void REGAL_CALL missing_glMultTransposeMatrixdARB(const GLdouble *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultTransposeMatrixdARB not available." );
}

void REGAL_CALL missing_glMultTransposeMatrixfARB(const GLfloat *m)
{
  UNUSED_PARAMETER(m);
  Warning( "glMultTransposeMatrixfARB not available." );
}

// GL_ARB_uniform_buffer_object

void REGAL_CALL missing_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  Warning( "glBindBufferBase not available." );
}

void REGAL_CALL missing_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glBindBufferRange not available." );
}

void REGAL_CALL missing_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformBlockIndex);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(uniformBlockName);
  Warning( "glGetActiveUniformBlockName not available." );
}

void REGAL_CALL missing_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformBlockIndex);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetActiveUniformBlockiv not available." );
}

void REGAL_CALL missing_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformIndex);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(uniformName);
  Warning( "glGetActiveUniformName not available." );
}

void REGAL_CALL missing_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformCount);
  UNUSED_PARAMETER(uniformIndices);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetActiveUniformsiv not available." );
}

void REGAL_CALL missing_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetIntegeri_v not available." );
}

GLuint REGAL_CALL missing_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformBlockName);
  Warning( "glGetUniformBlockIndex not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformCount);
  UNUSED_PARAMETER(uniformNames);
  UNUSED_PARAMETER(uniformIndices);
  Warning( "glGetUniformIndices not available." );
}

void REGAL_CALL missing_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(uniformBlockIndex);
  UNUSED_PARAMETER(uniformBlockBinding);
  Warning( "glUniformBlockBinding not available." );
}

// GL_ARB_vertex_array_object

void REGAL_CALL missing_glBindVertexArray(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glBindVertexArray not available." );
}

void REGAL_CALL missing_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glDeleteVertexArrays not available." );
}

void REGAL_CALL missing_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glGenVertexArrays not available." );
}

GLboolean REGAL_CALL missing_glIsVertexArray(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glIsVertexArray not available." );
  return (GLboolean )0;
}

// GL_ARB_vertex_attrib_64bit

void REGAL_CALL missing_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribLdv not available." );
}

void REGAL_CALL missing_glVertexAttribL1d(GLuint index, GLdouble x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribL1d not available." );
}

void REGAL_CALL missing_glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL1dv not available." );
}

void REGAL_CALL missing_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribL2d not available." );
}

void REGAL_CALL missing_glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL2dv not available." );
}

void REGAL_CALL missing_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribL3d not available." );
}

void REGAL_CALL missing_glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL3dv not available." );
}

void REGAL_CALL missing_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribL4d not available." );
}

void REGAL_CALL missing_glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL4dv not available." );
}

void REGAL_CALL missing_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribLPointer not available." );
}

// GL_ARB_vertex_attrib_binding

void REGAL_CALL missing_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  UNUSED_PARAMETER(bindingindex);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(stride);
  Warning( "glBindVertexBuffer not available." );
}

void REGAL_CALL missing_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
  UNUSED_PARAMETER(attribindex);
  UNUSED_PARAMETER(bindingindex);
  Warning( "glVertexAttribBinding not available." );
}

void REGAL_CALL missing_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  UNUSED_PARAMETER(attribindex);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(relativeoffset);
  Warning( "glVertexAttribFormat not available." );
}

void REGAL_CALL missing_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  UNUSED_PARAMETER(attribindex);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(relativeoffset);
  Warning( "glVertexAttribIFormat not available." );
}

void REGAL_CALL missing_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  UNUSED_PARAMETER(attribindex);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(relativeoffset);
  Warning( "glVertexAttribLFormat not available." );
}

void REGAL_CALL missing_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
  UNUSED_PARAMETER(bindingindex);
  UNUSED_PARAMETER(divisor);
  Warning( "glVertexBindingDivisor not available." );
}

// GL_ARB_vertex_blend

void REGAL_CALL missing_glVertexBlendARB(GLint count)
{
  UNUSED_PARAMETER(count);
  Warning( "glVertexBlendARB not available." );
}

void REGAL_CALL missing_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glWeightPointerARB not available." );
}

void REGAL_CALL missing_glWeightbvARB(GLint size, GLbyte *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightbvARB not available." );
}

void REGAL_CALL missing_glWeightdvARB(GLint size, GLdouble *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightdvARB not available." );
}

void REGAL_CALL missing_glWeightfvARB(GLint size, GLfloat *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightfvARB not available." );
}

void REGAL_CALL missing_glWeightivARB(GLint size, GLint *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightivARB not available." );
}

void REGAL_CALL missing_glWeightsvARB(GLint size, GLshort *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightsvARB not available." );
}

void REGAL_CALL missing_glWeightubvARB(GLint size, GLubyte *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightubvARB not available." );
}

void REGAL_CALL missing_glWeightuivARB(GLint size, GLuint *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightuivARB not available." );
}

void REGAL_CALL missing_glWeightusvARB(GLint size, GLushort *weights)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightusvARB not available." );
}

// GL_ARB_vertex_buffer_object

void REGAL_CALL missing_glBindBufferARB(GLenum target, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(buffer);
  Warning( "glBindBufferARB not available." );
}

void REGAL_CALL missing_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  UNUSED_PARAMETER(usage);
  Warning( "glBufferDataARB not available." );
}

void REGAL_CALL missing_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glBufferSubDataARB not available." );
}

void REGAL_CALL missing_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(buffers);
  Warning( "glDeleteBuffersARB not available." );
}

void REGAL_CALL missing_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(buffers);
  Warning( "glGenBuffersARB not available." );
}

void REGAL_CALL missing_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferParameterivARB not available." );
}

void REGAL_CALL missing_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferPointervARB not available." );
}

void REGAL_CALL missing_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glGetBufferSubDataARB not available." );
}

GLboolean REGAL_CALL missing_glIsBufferARB(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glIsBufferARB not available." );
  return (GLboolean )0;
}

GLvoid *REGAL_CALL missing_glMapBufferARB(GLenum target, GLenum access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(access);
  Warning( "glMapBufferARB not available." );
  return NULL;
}

GLboolean REGAL_CALL missing_glUnmapBufferARB(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glUnmapBufferARB not available." );
  return (GLboolean )0;
}

// GL_ARB_vertex_program

void REGAL_CALL missing_glBindProgramARB(GLenum target, GLuint program)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(program);
  Warning( "glBindProgramARB not available." );
}

void REGAL_CALL missing_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  Warning( "glDeleteProgramsARB not available." );
}

void REGAL_CALL missing_glDisableVertexAttribArrayARB(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glDisableVertexAttribArrayARB not available." );
}

void REGAL_CALL missing_glEnableVertexAttribArrayARB(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glEnableVertexAttribArrayARB not available." );
}

void REGAL_CALL missing_glGenProgramsARB(GLsizei n, GLuint *programs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  Warning( "glGenProgramsARB not available." );
}

void REGAL_CALL missing_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramEnvParameterdvARB not available." );
}

void REGAL_CALL missing_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramEnvParameterfvARB not available." );
}

void REGAL_CALL missing_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramLocalParameterdvARB not available." );
}

void REGAL_CALL missing_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramLocalParameterfvARB not available." );
}

void REGAL_CALL missing_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(string);
  Warning( "glGetProgramStringARB not available." );
}

void REGAL_CALL missing_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramivARB not available." );
}

void REGAL_CALL missing_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(pointer);
  Warning( "glGetVertexAttribPointervARB not available." );
}

void REGAL_CALL missing_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribdvARB not available." );
}

void REGAL_CALL missing_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribfvARB not available." );
}

void REGAL_CALL missing_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribivARB not available." );
}

GLboolean REGAL_CALL missing_glIsProgramARB(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glIsProgramARB not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramEnvParameter4dARB not available." );
}

void REGAL_CALL missing_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParameter4dvARB not available." );
}

void REGAL_CALL missing_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramEnvParameter4fARB not available." );
}

void REGAL_CALL missing_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParameter4fvARB not available." );
}

void REGAL_CALL missing_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramLocalParameter4dARB not available." );
}

void REGAL_CALL missing_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParameter4dvARB not available." );
}

void REGAL_CALL missing_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramLocalParameter4fARB not available." );
}

void REGAL_CALL missing_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParameter4fvARB not available." );
}

void REGAL_CALL missing_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(string);
  Warning( "glProgramStringARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1dARB(GLuint index, GLdouble x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1dARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1dvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1fARB(GLuint index, GLfloat x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1fARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1fvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1sARB(GLuint index, GLshort x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1sARB not available." );
}

void REGAL_CALL missing_glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1svARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2dARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2dvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2fARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2fvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2sARB not available." );
}

void REGAL_CALL missing_glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2svARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3dARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3dvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3fARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3fvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3sARB not available." );
}

void REGAL_CALL missing_glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3svARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NbvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NivARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NsvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4NubARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NubvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NuivARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4NusvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4bvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4dARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4dvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4fARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4fvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4ivARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4sARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4svARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4ubvARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4uivARB not available." );
}

void REGAL_CALL missing_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4usvARB not available." );
}

void REGAL_CALL missing_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribPointerARB not available." );
}

// GL_ARB_vertex_shader

void REGAL_CALL missing_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(name);
  Warning( "glBindAttribLocationARB not available." );
}

void REGAL_CALL missing_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(maxLength);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveAttribARB not available." );
}

GLint REGAL_CALL missing_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  UNUSED_PARAMETER(programObj);
  UNUSED_PARAMETER(name);
  Warning( "glGetAttribLocationARB not available." );
  return (GLint )0;
}

// GL_ARB_vertex_type_2_10_10_10_rev

void REGAL_CALL missing_glColorP3ui(GLenum type, GLuint color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glColorP3ui not available." );
}

void REGAL_CALL missing_glColorP3uiv(GLenum type, const GLuint *color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glColorP3uiv not available." );
}

void REGAL_CALL missing_glColorP4ui(GLenum type, GLuint color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glColorP4ui not available." );
}

void REGAL_CALL missing_glColorP4uiv(GLenum type, const GLuint *color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glColorP4uiv not available." );
}

void REGAL_CALL missing_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP1ui not available." );
}

void REGAL_CALL missing_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP1uiv not available." );
}

void REGAL_CALL missing_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP2ui not available." );
}

void REGAL_CALL missing_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP2uiv not available." );
}

void REGAL_CALL missing_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP3ui not available." );
}

void REGAL_CALL missing_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP3uiv not available." );
}

void REGAL_CALL missing_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP4ui not available." );
}

void REGAL_CALL missing_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glMultiTexCoordP4uiv not available." );
}

void REGAL_CALL missing_glNormalP3ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalP3ui not available." );
}

void REGAL_CALL missing_glNormalP3uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalP3uiv not available." );
}

void REGAL_CALL missing_glSecondaryColorP3ui(GLenum type, GLuint color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glSecondaryColorP3ui not available." );
}

void REGAL_CALL missing_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(color);
  Warning( "glSecondaryColorP3uiv not available." );
}

void REGAL_CALL missing_glTexCoordP1ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP1ui not available." );
}

void REGAL_CALL missing_glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP1uiv not available." );
}

void REGAL_CALL missing_glTexCoordP2ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP2ui not available." );
}

void REGAL_CALL missing_glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP2uiv not available." );
}

void REGAL_CALL missing_glTexCoordP3ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP3ui not available." );
}

void REGAL_CALL missing_glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP3uiv not available." );
}

void REGAL_CALL missing_glTexCoordP4ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP4ui not available." );
}

void REGAL_CALL missing_glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glTexCoordP4uiv not available." );
}

void REGAL_CALL missing_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP1ui not available." );
}

void REGAL_CALL missing_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP1uiv not available." );
}

void REGAL_CALL missing_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP2ui not available." );
}

void REGAL_CALL missing_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP2uiv not available." );
}

void REGAL_CALL missing_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP3ui not available." );
}

void REGAL_CALL missing_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP3uiv not available." );
}

void REGAL_CALL missing_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP4ui not available." );
}

void REGAL_CALL missing_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(value);
  Warning( "glVertexAttribP4uiv not available." );
}

void REGAL_CALL missing_glVertexP2ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP2ui not available." );
}

void REGAL_CALL missing_glVertexP2uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP2uiv not available." );
}

void REGAL_CALL missing_glVertexP3ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP3ui not available." );
}

void REGAL_CALL missing_glVertexP3uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP3uiv not available." );
}

void REGAL_CALL missing_glVertexP4ui(GLenum type, GLuint coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP4ui not available." );
}

void REGAL_CALL missing_glVertexP4uiv(GLenum type, const GLuint *coords)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexP4uiv not available." );
}

// GL_ARB_viewport_array

void REGAL_CALL missing_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glDepthRangeArrayv not available." );
}

void REGAL_CALL missing_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(f);
  Warning( "glDepthRangeIndexed not available." );
}

void REGAL_CALL missing_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glGetDoublei_v not available." );
}

void REGAL_CALL missing_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glGetFloati_v not available." );
}

void REGAL_CALL missing_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glScissorArrayv not available." );
}

void REGAL_CALL missing_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(left);
  UNUSED_PARAMETER(bottom);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glScissorIndexed not available." );
}

void REGAL_CALL missing_glScissorIndexedv(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glScissorIndexedv not available." );
}

void REGAL_CALL missing_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glViewportArrayv not available." );
}

void REGAL_CALL missing_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(w);
  UNUSED_PARAMETER(h);
  Warning( "glViewportIndexedf not available." );
}

void REGAL_CALL missing_glViewportIndexedfv(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glViewportIndexedfv not available." );
}

// GL_ARB_window_pos

void REGAL_CALL missing_glWindowPos2dARB(GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2dARB not available." );
}

void REGAL_CALL missing_glWindowPos2dvARB(const GLdouble *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2dvARB not available." );
}

void REGAL_CALL missing_glWindowPos2fARB(GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2fARB not available." );
}

void REGAL_CALL missing_glWindowPos2fvARB(const GLfloat *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2fvARB not available." );
}

void REGAL_CALL missing_glWindowPos2iARB(GLint x, GLint y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2iARB not available." );
}

void REGAL_CALL missing_glWindowPos2ivARB(const GLint *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2ivARB not available." );
}

void REGAL_CALL missing_glWindowPos2sARB(GLshort x, GLshort y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2sARB not available." );
}

void REGAL_CALL missing_glWindowPos2svARB(const GLshort *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos2svARB not available." );
}

void REGAL_CALL missing_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3dARB not available." );
}

void REGAL_CALL missing_glWindowPos3dvARB(const GLdouble *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3dvARB not available." );
}

void REGAL_CALL missing_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3fARB not available." );
}

void REGAL_CALL missing_glWindowPos3fvARB(const GLfloat *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3fvARB not available." );
}

void REGAL_CALL missing_glWindowPos3iARB(GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3iARB not available." );
}

void REGAL_CALL missing_glWindowPos3ivARB(const GLint *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3ivARB not available." );
}

void REGAL_CALL missing_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3sARB not available." );
}

void REGAL_CALL missing_glWindowPos3svARB(const GLshort *p)
{
  UNUSED_PARAMETER(p);
  Warning( "glWindowPos3svARB not available." );
}

// GL_ATI_draw_buffers

void REGAL_CALL missing_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(bufs);
  Warning( "glDrawBuffersATI not available." );
}

// GL_ATI_element_array

void REGAL_CALL missing_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  Warning( "glDrawElementArrayATI not available." );
}

void REGAL_CALL missing_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(count);
  Warning( "glDrawRangeElementArrayATI not available." );
}

void REGAL_CALL missing_glElementPointerATI(GLenum type, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glElementPointerATI not available." );
}

// GL_ATI_envmap_bumpmap

void REGAL_CALL missing_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetTexBumpParameterfvATI not available." );
}

void REGAL_CALL missing_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetTexBumpParameterivATI not available." );
}

void REGAL_CALL missing_glTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexBumpParameterfvATI not available." );
}

void REGAL_CALL missing_glTexBumpParameterivATI(GLenum pname, GLint *param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexBumpParameterivATI not available." );
}

// GL_ATI_fragment_shader

void REGAL_CALL missing_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  Warning( "glAlphaFragmentOp1ATI not available." );
}

void REGAL_CALL missing_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  UNUSED_PARAMETER(arg2);
  UNUSED_PARAMETER(arg2Rep);
  UNUSED_PARAMETER(arg2Mod);
  Warning( "glAlphaFragmentOp2ATI not available." );
}

void REGAL_CALL missing_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  UNUSED_PARAMETER(arg2);
  UNUSED_PARAMETER(arg2Rep);
  UNUSED_PARAMETER(arg2Mod);
  UNUSED_PARAMETER(arg3);
  UNUSED_PARAMETER(arg3Rep);
  UNUSED_PARAMETER(arg3Mod);
  Warning( "glAlphaFragmentOp3ATI not available." );
}

void REGAL_CALL missing_glBeginFragmentShaderATI(void)
{
  Warning( "glBeginFragmentShaderATI not available." );
}

void REGAL_CALL missing_glBindFragmentShaderATI(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glBindFragmentShaderATI not available." );
}

void REGAL_CALL missing_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMask);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  Warning( "glColorFragmentOp1ATI not available." );
}

void REGAL_CALL missing_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMask);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  UNUSED_PARAMETER(arg2);
  UNUSED_PARAMETER(arg2Rep);
  UNUSED_PARAMETER(arg2Mod);
  Warning( "glColorFragmentOp2ATI not available." );
}

void REGAL_CALL missing_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(dstMask);
  UNUSED_PARAMETER(dstMod);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg1Rep);
  UNUSED_PARAMETER(arg1Mod);
  UNUSED_PARAMETER(arg2);
  UNUSED_PARAMETER(arg2Rep);
  UNUSED_PARAMETER(arg2Mod);
  UNUSED_PARAMETER(arg3);
  UNUSED_PARAMETER(arg3Rep);
  UNUSED_PARAMETER(arg3Mod);
  Warning( "glColorFragmentOp3ATI not available." );
}

void REGAL_CALL missing_glDeleteFragmentShaderATI(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glDeleteFragmentShaderATI not available." );
}

void REGAL_CALL missing_glEndFragmentShaderATI(void)
{
  Warning( "glEndFragmentShaderATI not available." );
}

GLuint REGAL_CALL missing_glGenFragmentShadersATI(GLuint range)
{
  UNUSED_PARAMETER(range);
  Warning( "glGenFragmentShadersATI not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(swizzle);
  Warning( "glPassTexCoordATI not available." );
}

void REGAL_CALL missing_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(interp);
  UNUSED_PARAMETER(swizzle);
  Warning( "glSampleMapATI not available." );
}

void REGAL_CALL missing_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
  UNUSED_PARAMETER(dst);
  UNUSED_PARAMETER(value);
  Warning( "glSetFragmentShaderConstantATI not available." );
}

// GL_ATI_map_object_buffer

GLvoid *REGAL_CALL missing_glMapObjectBufferATI(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glMapObjectBufferATI not available." );
  return NULL;
}

void REGAL_CALL missing_glUnmapObjectBufferATI(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glUnmapObjectBufferATI not available." );
}

// GL_ATI_pn_triangles

void REGAL_CALL missing_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPNTrianglesfATI not available." );
}

void REGAL_CALL missing_glPNTrianglesiATI(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPNTrianglesiATI not available." );
}

// GL_ATI_separate_stencil

void REGAL_CALL missing_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  UNUSED_PARAMETER(frontfunc);
  UNUSED_PARAMETER(backfunc);
  UNUSED_PARAMETER(ref);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilFuncSeparateATI not available." );
}

void REGAL_CALL missing_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(sfail);
  UNUSED_PARAMETER(dpfail);
  UNUSED_PARAMETER(dppass);
  Warning( "glStencilOpSeparateATI not available." );
}

// GL_ATI_vertex_array_object

void REGAL_CALL missing_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  Warning( "glArrayObjectATI not available." );
}

void REGAL_CALL missing_glFreeObjectBufferATI(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glFreeObjectBufferATI not available." );
}

void REGAL_CALL missing_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetArrayObjectfvATI not available." );
}

void REGAL_CALL missing_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetArrayObjectivATI not available." );
}

void REGAL_CALL missing_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetObjectBufferfvATI not available." );
}

void REGAL_CALL missing_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetObjectBufferivATI not available." );
}

void REGAL_CALL missing_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVariantArrayObjectfvATI not available." );
}

void REGAL_CALL missing_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVariantArrayObjectivATI not available." );
}

GLboolean REGAL_CALL missing_glIsObjectBufferATI(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glIsObjectBufferATI not available." );
  return (GLboolean )0;
}

GLuint REGAL_CALL missing_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(usage);
  Warning( "glNewObjectBufferATI not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(preserve);
  Warning( "glUpdateObjectBufferATI not available." );
}

void REGAL_CALL missing_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  Warning( "glVariantArrayObjectATI not available." );
}

// GL_ATI_vertex_attrib_array_object

void REGAL_CALL missing_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribArrayObjectfvATI not available." );
}

void REGAL_CALL missing_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribArrayObjectivATI not available." );
}

void REGAL_CALL missing_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexAttribArrayObjectATI not available." );
}

// GL_ATI_vertex_streams

void REGAL_CALL missing_glClientActiveVertexStreamATI(GLenum stream)
{
  UNUSED_PARAMETER(stream);
  Warning( "glClientActiveVertexStreamATI not available." );
}

void REGAL_CALL missing_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormalStream3bATI not available." );
}

void REGAL_CALL missing_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalStream3bvATI not available." );
}

void REGAL_CALL missing_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormalStream3dATI not available." );
}

void REGAL_CALL missing_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalStream3dvATI not available." );
}

void REGAL_CALL missing_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormalStream3fATI not available." );
}

void REGAL_CALL missing_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalStream3fvATI not available." );
}

void REGAL_CALL missing_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormalStream3iATI not available." );
}

void REGAL_CALL missing_glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalStream3ivATI not available." );
}

void REGAL_CALL missing_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormalStream3sATI not available." );
}

void REGAL_CALL missing_glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glNormalStream3svATI not available." );
}

void REGAL_CALL missing_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glVertexBlendEnvfATI not available." );
}

void REGAL_CALL missing_glVertexBlendEnviATI(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glVertexBlendEnviATI not available." );
}

void REGAL_CALL missing_glVertexStream1dATI(GLenum stream, GLdouble x)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  Warning( "glVertexStream1dATI not available." );
}

void REGAL_CALL missing_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream1dvATI not available." );
}

void REGAL_CALL missing_glVertexStream1fATI(GLenum stream, GLfloat x)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  Warning( "glVertexStream1fATI not available." );
}

void REGAL_CALL missing_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream1fvATI not available." );
}

void REGAL_CALL missing_glVertexStream1iATI(GLenum stream, GLint x)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  Warning( "glVertexStream1iATI not available." );
}

void REGAL_CALL missing_glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream1ivATI not available." );
}

void REGAL_CALL missing_glVertexStream1sATI(GLenum stream, GLshort x)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  Warning( "glVertexStream1sATI not available." );
}

void REGAL_CALL missing_glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream1svATI not available." );
}

void REGAL_CALL missing_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexStream2dATI not available." );
}

void REGAL_CALL missing_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream2dvATI not available." );
}

void REGAL_CALL missing_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexStream2fATI not available." );
}

void REGAL_CALL missing_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream2fvATI not available." );
}

void REGAL_CALL missing_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexStream2iATI not available." );
}

void REGAL_CALL missing_glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream2ivATI not available." );
}

void REGAL_CALL missing_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexStream2sATI not available." );
}

void REGAL_CALL missing_glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream2svATI not available." );
}

void REGAL_CALL missing_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexStream3dATI not available." );
}

void REGAL_CALL missing_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream3dvATI not available." );
}

void REGAL_CALL missing_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexStream3fATI not available." );
}

void REGAL_CALL missing_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream3fvATI not available." );
}

void REGAL_CALL missing_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexStream3iATI not available." );
}

void REGAL_CALL missing_glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream3ivATI not available." );
}

void REGAL_CALL missing_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexStream3sATI not available." );
}

void REGAL_CALL missing_glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream3svATI not available." );
}

void REGAL_CALL missing_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexStream4dATI not available." );
}

void REGAL_CALL missing_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream4dvATI not available." );
}

void REGAL_CALL missing_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexStream4fATI not available." );
}

void REGAL_CALL missing_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream4fvATI not available." );
}

void REGAL_CALL missing_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexStream4iATI not available." );
}

void REGAL_CALL missing_glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream4ivATI not available." );
}

void REGAL_CALL missing_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexStream4sATI not available." );
}

void REGAL_CALL missing_glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(coords);
  Warning( "glVertexStream4svATI not available." );
}

// GL_EXT_bindable_uniform

GLint REGAL_CALL missing_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  Warning( "glGetUniformBufferSizeEXT not available." );
  return (GLint )0;
}

GLintptr REGAL_CALL missing_glGetUniformOffsetEXT(GLuint program, GLint location)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  Warning( "glGetUniformOffsetEXT not available." );
  return (GLintptr )0;
}

void REGAL_CALL missing_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(buffer);
  Warning( "glUniformBufferEXT not available." );
}

// GL_EXT_blend_color

void REGAL_CALL missing_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glBlendColorEXT not available." );
}

// GL_EXT_blend_equation_separate

void REGAL_CALL missing_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparateEXT not available." );
}

// GL_EXT_blend_func_separate

void REGAL_CALL missing_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  UNUSED_PARAMETER(sfactorRGB);
  UNUSED_PARAMETER(dfactorRGB);
  UNUSED_PARAMETER(sfactorAlpha);
  UNUSED_PARAMETER(dfactorAlpha);
  Warning( "glBlendFuncSeparateEXT not available." );
}

// GL_EXT_blend_minmax

void REGAL_CALL missing_glBlendEquationEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquationEXT not available." );
}

// GL_EXT_color_subtable

void REGAL_CALL missing_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glColorSubTableEXT not available." );
}

void REGAL_CALL missing_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyColorSubTableEXT not available." );
}

// GL_EXT_compiled_vertex_array

void REGAL_CALL missing_glLockArraysEXT(GLint first, GLsizei count)
{
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  Warning( "glLockArraysEXT not available." );
}

void REGAL_CALL missing_glUnlockArraysEXT(void)
{
  Warning( "glUnlockArraysEXT not available." );
}

// GL_EXT_convolution

void REGAL_CALL missing_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glConvolutionFilter1DEXT not available." );
}

void REGAL_CALL missing_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glConvolutionFilter2DEXT not available." );
}

void REGAL_CALL missing_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glConvolutionParameterfEXT not available." );
}

void REGAL_CALL missing_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameterfvEXT not available." );
}

void REGAL_CALL missing_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glConvolutionParameteriEXT not available." );
}

void REGAL_CALL missing_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glConvolutionParameterivEXT not available." );
}

void REGAL_CALL missing_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyConvolutionFilter1DEXT not available." );
}

void REGAL_CALL missing_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyConvolutionFilter2DEXT not available." );
}

void REGAL_CALL missing_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(image);
  Warning( "glGetConvolutionFilterEXT not available." );
}

void REGAL_CALL missing_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetConvolutionParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetConvolutionParameterivEXT not available." );
}

void REGAL_CALL missing_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(row);
  UNUSED_PARAMETER(column);
  UNUSED_PARAMETER(span);
  Warning( "glGetSeparableFilterEXT not available." );
}

void REGAL_CALL missing_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(row);
  UNUSED_PARAMETER(column);
  Warning( "glSeparableFilter2DEXT not available." );
}

// GL_EXT_coordinate_frame

void REGAL_CALL missing_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
  UNUSED_PARAMETER(bx);
  UNUSED_PARAMETER(by);
  UNUSED_PARAMETER(bz);
  Warning( "glBinormal3bEXT not available." );
}

void REGAL_CALL missing_glBinormal3bvEXT(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glBinormal3bvEXT not available." );
}

void REGAL_CALL missing_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
  UNUSED_PARAMETER(bx);
  UNUSED_PARAMETER(by);
  UNUSED_PARAMETER(bz);
  Warning( "glBinormal3dEXT not available." );
}

void REGAL_CALL missing_glBinormal3dvEXT(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glBinormal3dvEXT not available." );
}

void REGAL_CALL missing_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
  UNUSED_PARAMETER(bx);
  UNUSED_PARAMETER(by);
  UNUSED_PARAMETER(bz);
  Warning( "glBinormal3fEXT not available." );
}

void REGAL_CALL missing_glBinormal3fvEXT(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glBinormal3fvEXT not available." );
}

void REGAL_CALL missing_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
  UNUSED_PARAMETER(bx);
  UNUSED_PARAMETER(by);
  UNUSED_PARAMETER(bz);
  Warning( "glBinormal3iEXT not available." );
}

void REGAL_CALL missing_glBinormal3ivEXT(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glBinormal3ivEXT not available." );
}

void REGAL_CALL missing_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
  UNUSED_PARAMETER(bx);
  UNUSED_PARAMETER(by);
  UNUSED_PARAMETER(bz);
  Warning( "glBinormal3sEXT not available." );
}

void REGAL_CALL missing_glBinormal3svEXT(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glBinormal3svEXT not available." );
}

void REGAL_CALL missing_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glBinormalPointerEXT not available." );
}

void REGAL_CALL missing_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
  UNUSED_PARAMETER(tx);
  UNUSED_PARAMETER(ty);
  UNUSED_PARAMETER(tz);
  Warning( "glTangent3bEXT not available." );
}

void REGAL_CALL missing_glTangent3bvEXT(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTangent3bvEXT not available." );
}

void REGAL_CALL missing_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
  UNUSED_PARAMETER(tx);
  UNUSED_PARAMETER(ty);
  UNUSED_PARAMETER(tz);
  Warning( "glTangent3dEXT not available." );
}

void REGAL_CALL missing_glTangent3dvEXT(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTangent3dvEXT not available." );
}

void REGAL_CALL missing_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
  UNUSED_PARAMETER(tx);
  UNUSED_PARAMETER(ty);
  UNUSED_PARAMETER(tz);
  Warning( "glTangent3fEXT not available." );
}

void REGAL_CALL missing_glTangent3fvEXT(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTangent3fvEXT not available." );
}

void REGAL_CALL missing_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
  UNUSED_PARAMETER(tx);
  UNUSED_PARAMETER(ty);
  UNUSED_PARAMETER(tz);
  Warning( "glTangent3iEXT not available." );
}

void REGAL_CALL missing_glTangent3ivEXT(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTangent3ivEXT not available." );
}

void REGAL_CALL missing_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
  UNUSED_PARAMETER(tx);
  UNUSED_PARAMETER(ty);
  UNUSED_PARAMETER(tz);
  Warning( "glTangent3sEXT not available." );
}

void REGAL_CALL missing_glTangent3svEXT(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTangent3svEXT not available." );
}

void REGAL_CALL missing_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glTangentPointerEXT not available." );
}

// GL_EXT_copy_texture

void REGAL_CALL missing_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTexImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTexImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyTexSubImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTexSubImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTexSubImage3DEXT not available." );
}

// GL_EXT_cull_vertex

void REGAL_CALL missing_glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glCullParameterdvEXT not available." );
}

void REGAL_CALL missing_glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glCullParameterfvEXT not available." );
}

// GL_EXT_debug_label

void REGAL_CALL missing_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(object);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glGetObjectLabelEXT not available." );
}

void REGAL_CALL missing_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(object);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glLabelObjectEXT not available." );
}

// GL_EXT_debug_marker

void REGAL_CALL missing_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(marker);
  Warning( "glInsertEventMarkerEXT not available." );
}

void REGAL_CALL missing_glPopGroupMarkerEXT(void)
{
  Warning( "glPopGroupMarkerEXT not available." );
}

void REGAL_CALL missing_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(marker);
  Warning( "glPushGroupMarkerEXT not available." );
}

// GL_EXT_depth_bounds_test

void REGAL_CALL missing_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
  UNUSED_PARAMETER(zmin);
  UNUSED_PARAMETER(zmax);
  Warning( "glDepthBoundsEXT not available." );
}

// GL_EXT_direct_state_access

void REGAL_CALL missing_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(texture);
  Warning( "glBindMultiTextureEXT not available." );
}

GLenum REGAL_CALL missing_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(target);
  Warning( "glCheckNamedFramebufferStatusEXT not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glClientAttribDefaultEXT(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glClientAttribDefaultEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedMultiTexImage1DEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedMultiTexImage2DEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedMultiTexImage3DEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedMultiTexSubImage1DEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedMultiTexSubImage2DEXT not available." );
}

void REGAL_CALL missing_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedMultiTexSubImage3DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureImage1DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureImage2DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureImage3DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureSubImage1DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureSubImage2DEXT not available." );
}

void REGAL_CALL missing_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(bits);
  Warning( "glCompressedTextureSubImage3DEXT not available." );
}

void REGAL_CALL missing_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  Warning( "glCopyMultiTexImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  Warning( "glCopyMultiTexImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyMultiTexSubImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyMultiTexSubImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyMultiTexSubImage3DEXT not available." );
}

void REGAL_CALL missing_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTextureImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  Warning( "glCopyTextureImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyTextureSubImage1DEXT not available." );
}

void REGAL_CALL missing_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTextureSubImage2DEXT not available." );
}

void REGAL_CALL missing_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTextureSubImage3DEXT not available." );
}

void REGAL_CALL missing_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(index);
  Warning( "glDisableClientStateIndexedEXT not available." );
}

void REGAL_CALL missing_glDisableClientStateiEXT(GLenum array, GLuint index)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(index);
  Warning( "glDisableClientStateiEXT not available." );
}

void REGAL_CALL missing_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(array);
  Warning( "glDisableVertexArrayAttribEXT not available." );
}

void REGAL_CALL missing_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(array);
  Warning( "glDisableVertexArrayEXT not available." );
}

void REGAL_CALL missing_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(index);
  Warning( "glEnableClientStateIndexedEXT not available." );
}

void REGAL_CALL missing_glEnableClientStateiEXT(GLenum array, GLuint index)
{
  UNUSED_PARAMETER(array);
  UNUSED_PARAMETER(index);
  Warning( "glEnableClientStateiEXT not available." );
}

void REGAL_CALL missing_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(array);
  Warning( "glEnableVertexArrayAttribEXT not available." );
}

void REGAL_CALL missing_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(array);
  Warning( "glEnableVertexArrayEXT not available." );
}

void REGAL_CALL missing_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  Warning( "glFlushMappedNamedBufferRangeEXT not available." );
}

void REGAL_CALL missing_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(mode);
  Warning( "glFramebufferDrawBufferEXT not available." );
}

void REGAL_CALL missing_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(bufs);
  Warning( "glFramebufferDrawBuffersEXT not available." );
}

void REGAL_CALL missing_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(mode);
  Warning( "glFramebufferReadBufferEXT not available." );
}

void REGAL_CALL missing_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  Warning( "glGenerateMultiTexMipmapEXT not available." );
}

void REGAL_CALL missing_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  Warning( "glGenerateTextureMipmapEXT not available." );
}

void REGAL_CALL missing_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lod);
  UNUSED_PARAMETER(img);
  Warning( "glGetCompressedMultiTexImageEXT not available." );
}

void REGAL_CALL missing_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lod);
  UNUSED_PARAMETER(img);
  Warning( "glGetCompressedTextureImageEXT not available." );
}

void REGAL_CALL missing_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetDoubleIndexedvEXT not available." );
}

void REGAL_CALL missing_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetDoublei_vEXT not available." );
}

void REGAL_CALL missing_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetFloatIndexedvEXT not available." );
}

void REGAL_CALL missing_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetFloati_vEXT not available." );
}

void REGAL_CALL missing_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFramebufferParameterivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexEnvfvEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexEnvivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexGendvEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexGenfvEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexGenivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glGetMultiTexImageEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexLevelParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexLevelParameterivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexParameterIivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexParameterIuivEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMultiTexParameterivEXT not available." );
}

void REGAL_CALL missing_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedBufferParameterivEXT not available." );
}

void REGAL_CALL missing_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedBufferPointervEXT not available." );
}

void REGAL_CALL missing_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glGetNamedBufferSubDataEXT not available." );
}

void REGAL_CALL missing_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedFramebufferAttachmentParameterivEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedProgramLocalParameterIivEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedProgramLocalParameterIuivEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedProgramLocalParameterdvEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedProgramLocalParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(string);
  Warning( "glGetNamedProgramStringEXT not available." );
}

void REGAL_CALL missing_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedProgramivEXT not available." );
}

void REGAL_CALL missing_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(renderbuffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedRenderbufferParameterivEXT not available." );
}

void REGAL_CALL missing_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetPointerIndexedvEXT not available." );
}

void REGAL_CALL missing_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetPointeri_vEXT not available." );
}

void REGAL_CALL missing_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glGetTextureImageEXT not available." );
}

void REGAL_CALL missing_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureLevelParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureLevelParameterivEXT not available." );
}

void REGAL_CALL missing_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureParameterIivEXT not available." );
}

void REGAL_CALL missing_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureParameterIuivEXT not available." );
}

void REGAL_CALL missing_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTextureParameterivEXT not available." );
}

void REGAL_CALL missing_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetVertexArrayIntegeri_vEXT not available." );
}

void REGAL_CALL missing_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetVertexArrayIntegervEXT not available." );
}

void REGAL_CALL missing_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetVertexArrayPointeri_vEXT not available." );
}

void REGAL_CALL missing_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glGetVertexArrayPointervEXT not available." );
}

GLvoid *REGAL_CALL missing_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(access);
  Warning( "glMapNamedBufferEXT not available." );
  return NULL;
}

GLvoid *REGAL_CALL missing_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(access);
  Warning( "glMapNamedBufferRangeEXT not available." );
  return NULL;
}

void REGAL_CALL missing_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(left);
  UNUSED_PARAMETER(right);
  UNUSED_PARAMETER(bottom);
  UNUSED_PARAMETER(top);
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glMatrixFrustumEXT not available." );
}

void REGAL_CALL missing_glMatrixLoadIdentityEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glMatrixLoadIdentityEXT not available." );
}

void REGAL_CALL missing_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixLoadTransposedEXT not available." );
}

void REGAL_CALL missing_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixLoadTransposefEXT not available." );
}

void REGAL_CALL missing_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixLoaddEXT not available." );
}

void REGAL_CALL missing_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixLoadfEXT not available." );
}

void REGAL_CALL missing_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixMultTransposedEXT not available." );
}

void REGAL_CALL missing_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixMultTransposefEXT not available." );
}

void REGAL_CALL missing_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixMultdEXT not available." );
}

void REGAL_CALL missing_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(m);
  Warning( "glMatrixMultfEXT not available." );
}

void REGAL_CALL missing_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(left);
  UNUSED_PARAMETER(right);
  UNUSED_PARAMETER(bottom);
  UNUSED_PARAMETER(top);
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glMatrixOrthoEXT not available." );
}

void REGAL_CALL missing_glMatrixPopEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glMatrixPopEXT not available." );
}

void REGAL_CALL missing_glMatrixPushEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glMatrixPushEXT not available." );
}

void REGAL_CALL missing_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(angle);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixRotatedEXT not available." );
}

void REGAL_CALL missing_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(angle);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixRotatefEXT not available." );
}

void REGAL_CALL missing_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixScaledEXT not available." );
}

void REGAL_CALL missing_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixScalefEXT not available." );
}

void REGAL_CALL missing_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixTranslatedEXT not available." );
}

void REGAL_CALL missing_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glMatrixTranslatefEXT not available." );
}

void REGAL_CALL missing_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  Warning( "glMultiTexBufferEXT not available." );
}

void REGAL_CALL missing_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glMultiTexCoordPointerEXT not available." );
}

void REGAL_CALL missing_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexEnvfEXT not available." );
}

void REGAL_CALL missing_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexEnvfvEXT not available." );
}

void REGAL_CALL missing_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexEnviEXT not available." );
}

void REGAL_CALL missing_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexEnvivEXT not available." );
}

void REGAL_CALL missing_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexGendEXT not available." );
}

void REGAL_CALL missing_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexGendvEXT not available." );
}

void REGAL_CALL missing_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexGenfEXT not available." );
}

void REGAL_CALL missing_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexGenfvEXT not available." );
}

void REGAL_CALL missing_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexGeniEXT not available." );
}

void REGAL_CALL missing_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexGenivEXT not available." );
}

void REGAL_CALL missing_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexImage1DEXT not available." );
}

void REGAL_CALL missing_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexImage2DEXT not available." );
}

void REGAL_CALL missing_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexImage3DEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexParameterIivEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMultiTexParameterIuivEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexParameterfEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexParameterfvEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexParameteriEXT not available." );
}

void REGAL_CALL missing_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glMultiTexParameterivEXT not available." );
}

void REGAL_CALL missing_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glMultiTexRenderbufferEXT not available." );
}

void REGAL_CALL missing_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexSubImage1DEXT not available." );
}

void REGAL_CALL missing_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexSubImage2DEXT not available." );
}

void REGAL_CALL missing_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glMultiTexSubImage3DEXT not available." );
}

void REGAL_CALL missing_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  UNUSED_PARAMETER(usage);
  Warning( "glNamedBufferDataEXT not available." );
}

void REGAL_CALL missing_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(data);
  Warning( "glNamedBufferSubDataEXT not available." );
}

void REGAL_CALL missing_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  UNUSED_PARAMETER(readBuffer);
  UNUSED_PARAMETER(writeBuffer);
  UNUSED_PARAMETER(readOffset);
  UNUSED_PARAMETER(writeOffset);
  UNUSED_PARAMETER(size);
  Warning( "glNamedCopyBufferSubDataEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(renderbuffertarget);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glNamedFramebufferRenderbufferEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glNamedFramebufferTexture1DEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glNamedFramebufferTexture2DEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(zoffset);
  Warning( "glNamedFramebufferTexture3DEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glNamedFramebufferTextureEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(face);
  Warning( "glNamedFramebufferTextureFaceEXT not available." );
}

void REGAL_CALL missing_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  UNUSED_PARAMETER(framebuffer);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layer);
  Warning( "glNamedFramebufferTextureLayerEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glNamedProgramLocalParameter4dEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParameter4dvEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glNamedProgramLocalParameter4fEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParameter4fvEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glNamedProgramLocalParameterI4iEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParameterI4ivEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glNamedProgramLocalParameterI4uiEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParameterI4uivEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParameters4fvEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParametersI4ivEXT not available." );
}

void REGAL_CALL missing_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glNamedProgramLocalParametersI4uivEXT not available." );
}

void REGAL_CALL missing_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(string);
  Warning( "glNamedProgramStringEXT not available." );
}

void REGAL_CALL missing_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(renderbuffer);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glNamedRenderbufferStorageEXT not available." );
}

void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(renderbuffer);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glNamedRenderbufferStorageMultisampleCoverageEXT not available." );
}

void REGAL_CALL missing_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(renderbuffer);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glNamedRenderbufferStorageMultisampleEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1dEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glProgramUniform1fEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glProgramUniform1iEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1ivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glProgramUniform1uiEXT not available." );
}

void REGAL_CALL missing_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1uivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2dEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glProgramUniform2fEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glProgramUniform2iEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2ivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glProgramUniform2uiEXT not available." );
}

void REGAL_CALL missing_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2uivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3dEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glProgramUniform3fEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glProgramUniform3iEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3ivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glProgramUniform3uiEXT not available." );
}

void REGAL_CALL missing_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3uivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4dEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glProgramUniform4fEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glProgramUniform4iEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4ivEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glProgramUniform4uiEXT not available." );
}

void REGAL_CALL missing_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4uivEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x3dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x3fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x4dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix2x4fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x2dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x2fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x4dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix3x4fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x2dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x2fvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x3dvEXT not available." );
}

void REGAL_CALL missing_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(transpose);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformMatrix4x3fvEXT not available." );
}

void REGAL_CALL missing_glPushClientAttribDefaultEXT(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glPushClientAttribDefaultEXT not available." );
}

void REGAL_CALL missing_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  Warning( "glTextureBufferEXT not available." );
}

void REGAL_CALL missing_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureImage1DEXT not available." );
}

void REGAL_CALL missing_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureImage2DEXT not available." );
}

void REGAL_CALL missing_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureImage3DEXT not available." );
}

void REGAL_CALL missing_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTextureParameterIivEXT not available." );
}

void REGAL_CALL missing_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTextureParameterIuivEXT not available." );
}

void REGAL_CALL missing_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTextureParameterfEXT not available." );
}

void REGAL_CALL missing_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTextureParameterfvEXT not available." );
}

void REGAL_CALL missing_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTextureParameteriEXT not available." );
}

void REGAL_CALL missing_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTextureParameterivEXT not available." );
}

void REGAL_CALL missing_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glTextureRenderbufferEXT not available." );
}

void REGAL_CALL missing_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureSubImage1DEXT not available." );
}

void REGAL_CALL missing_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureSubImage2DEXT not available." );
}

void REGAL_CALL missing_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTextureSubImage3DEXT not available." );
}

GLboolean REGAL_CALL missing_glUnmapNamedBufferEXT(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glUnmapNamedBufferEXT not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayColorOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayEdgeFlagOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayFogCoordOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayIndexOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(texunit);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayMultiTexCoordOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayNormalOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArraySecondaryColorOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayTexCoordOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayVertexAttribIOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayVertexAttribOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayVertexOffsetEXT not available." );
}

// GL_EXT_discard_framebuffer

void REGAL_CALL missing_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(numAttachments);
  UNUSED_PARAMETER(attachments);
  Warning( "glDiscardFramebufferEXT not available." );
}

// GL_EXT_draw_buffers2

void REGAL_CALL missing_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  UNUSED_PARAMETER(buf);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  Warning( "glColorMaskIndexedEXT not available." );
}

void REGAL_CALL missing_glDisableIndexedEXT(GLenum target, GLuint index)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  Warning( "glDisableIndexedEXT not available." );
}

void REGAL_CALL missing_glEnableIndexedEXT(GLenum target, GLuint index)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  Warning( "glEnableIndexedEXT not available." );
}

void REGAL_CALL missing_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetBooleanIndexedvEXT not available." );
}

void REGAL_CALL missing_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetIntegerIndexedvEXT not available." );
}

GLboolean REGAL_CALL missing_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  Warning( "glIsEnabledIndexedEXT not available." );
  return (GLboolean )0;
}

// GL_EXT_draw_instanced

void REGAL_CALL missing_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawArraysInstancedEXT not available." );
}

void REGAL_CALL missing_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glDrawElementsInstancedEXT not available." );
}

// GL_EXT_draw_range_elements

void REGAL_CALL missing_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(start);
  UNUSED_PARAMETER(end);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  Warning( "glDrawRangeElementsEXT not available." );
}

// GL_EXT_fog_coord

void REGAL_CALL missing_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glFogCoordPointerEXT not available." );
}

void REGAL_CALL missing_glFogCoorddEXT(GLdouble coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoorddEXT not available." );
}

void REGAL_CALL missing_glFogCoorddvEXT(const GLdouble *coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoorddvEXT not available." );
}

void REGAL_CALL missing_glFogCoordfEXT(GLfloat coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordfEXT not available." );
}

void REGAL_CALL missing_glFogCoordfvEXT(const GLfloat *coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordfvEXT not available." );
}

// GL_EXT_fragment_lighting

void REGAL_CALL missing_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glFragmentColorMaterialEXT not available." );
}

void REGAL_CALL missing_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightModelfEXT not available." );
}

void REGAL_CALL missing_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightModelfvEXT not available." );
}

void REGAL_CALL missing_glFragmentLightModeliEXT(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightModeliEXT not available." );
}

void REGAL_CALL missing_glFragmentLightModelivEXT(GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightModelivEXT not available." );
}

void REGAL_CALL missing_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightfEXT not available." );
}

void REGAL_CALL missing_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightfvEXT not available." );
}

void REGAL_CALL missing_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightiEXT not available." );
}

void REGAL_CALL missing_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightivEXT not available." );
}

void REGAL_CALL missing_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentMaterialfEXT not available." );
}

void REGAL_CALL missing_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentMaterialfvEXT not available." );
}

void REGAL_CALL missing_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentMaterialiEXT not available." );
}

void REGAL_CALL missing_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentMaterialivEXT not available." );
}

void REGAL_CALL missing_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentLightfvEXT not available." );
}

void REGAL_CALL missing_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentLightivEXT not available." );
}

void REGAL_CALL missing_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentMaterialfvEXT not available." );
}

void REGAL_CALL missing_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentMaterialivEXT not available." );
}

void REGAL_CALL missing_glLightEnviEXT(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLightEnviEXT not available." );
}

// GL_EXT_framebuffer_blit

void REGAL_CALL missing_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  UNUSED_PARAMETER(srcX0);
  UNUSED_PARAMETER(srcY0);
  UNUSED_PARAMETER(srcX1);
  UNUSED_PARAMETER(srcY1);
  UNUSED_PARAMETER(dstX0);
  UNUSED_PARAMETER(dstY0);
  UNUSED_PARAMETER(dstX1);
  UNUSED_PARAMETER(dstY1);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(filter);
  Warning( "glBlitFramebufferEXT not available." );
}

// GL_EXT_framebuffer_multisample

void REGAL_CALL missing_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisampleEXT not available." );
}

// GL_EXT_framebuffer_object

void REGAL_CALL missing_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(framebuffer);
  Warning( "glBindFramebufferEXT not available." );
}

void REGAL_CALL missing_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glBindRenderbufferEXT not available." );
}

GLenum REGAL_CALL missing_glCheckFramebufferStatusEXT(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glCheckFramebufferStatusEXT not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glDeleteFramebuffersEXT not available." );
}

void REGAL_CALL missing_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glDeleteRenderbuffersEXT not available." );
}

void REGAL_CALL missing_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(renderbuffertarget);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glFramebufferRenderbufferEXT not available." );
}

void REGAL_CALL missing_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture1DEXT not available." );
}

void REGAL_CALL missing_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture2DEXT not available." );
}

void REGAL_CALL missing_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(zoffset);
  Warning( "glFramebufferTexture3DEXT not available." );
}

void REGAL_CALL missing_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glGenFramebuffersEXT not available." );
}

void REGAL_CALL missing_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glGenRenderbuffersEXT not available." );
}

void REGAL_CALL missing_glGenerateMipmapEXT(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glGenerateMipmapEXT not available." );
}

void REGAL_CALL missing_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFramebufferAttachmentParameterivEXT not available." );
}

void REGAL_CALL missing_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetRenderbufferParameterivEXT not available." );
}

GLboolean REGAL_CALL missing_glIsFramebufferEXT(GLuint framebuffer)
{
  UNUSED_PARAMETER(framebuffer);
  Warning( "glIsFramebufferEXT not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsRenderbufferEXT(GLuint renderbuffer)
{
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glIsRenderbufferEXT not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageEXT not available." );
}

// GL_EXT_geometry_shader4

void REGAL_CALL missing_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTextureEXT not available." );
}

void REGAL_CALL missing_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(face);
  Warning( "glFramebufferTextureFaceEXT not available." );
}

void REGAL_CALL missing_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glProgramParameteriEXT not available." );
}

// GL_EXT_gpu_program_parameters

void REGAL_CALL missing_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParameters4fvEXT not available." );
}

void REGAL_CALL missing_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParameters4fvEXT not available." );
}

// GL_EXT_gpu_shader4

void REGAL_CALL missing_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(color);
  UNUSED_PARAMETER(name);
  Warning( "glBindFragDataLocationEXT not available." );
}

GLint REGAL_CALL missing_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetFragDataLocationEXT not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformuivEXT not available." );
}

void REGAL_CALL missing_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribIivEXT not available." );
}

void REGAL_CALL missing_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribIuivEXT not available." );
}

void REGAL_CALL missing_glUniform1uiEXT(GLint location, GLuint v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniform1uiEXT not available." );
}

void REGAL_CALL missing_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1uivEXT not available." );
}

void REGAL_CALL missing_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  Warning( "glUniform2uiEXT not available." );
}

void REGAL_CALL missing_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2uivEXT not available." );
}

void REGAL_CALL missing_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  Warning( "glUniform3uiEXT not available." );
}

void REGAL_CALL missing_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3uivEXT not available." );
}

void REGAL_CALL missing_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(v3);
  Warning( "glUniform4uiEXT not available." );
}

void REGAL_CALL missing_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4uivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI1iEXT(GLuint index, GLint x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribI1iEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI1ivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribI1uiEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI1uivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribI2iEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI2ivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribI2uiEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI2uivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribI3iEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI3ivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribI3uiEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI3uivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4bvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribI4iEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4ivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4svEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4ubvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribI4uiEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4uivEXT not available." );
}

void REGAL_CALL missing_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribI4usvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribIPointerEXT not available." );
}

// GL_EXT_histogram

void REGAL_CALL missing_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(values);
  Warning( "glGetHistogramEXT not available." );
}

void REGAL_CALL missing_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetHistogramParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetHistogramParameterivEXT not available." );
}

void REGAL_CALL missing_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(reset);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(values);
  Warning( "glGetMinmaxEXT not available." );
}

void REGAL_CALL missing_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMinmaxParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMinmaxParameterivEXT not available." );
}

void REGAL_CALL missing_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(sink);
  Warning( "glHistogramEXT not available." );
}

void REGAL_CALL missing_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(sink);
  Warning( "glMinmaxEXT not available." );
}

void REGAL_CALL missing_glResetHistogramEXT(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glResetHistogramEXT not available." );
}

void REGAL_CALL missing_glResetMinmaxEXT(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glResetMinmaxEXT not available." );
}

// GL_EXT_index_func

void REGAL_CALL missing_glIndexFuncEXT(GLenum func, GLfloat ref)
{
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  Warning( "glIndexFuncEXT not available." );
}

// GL_EXT_index_material

void REGAL_CALL missing_glIndexMaterialEXT(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glIndexMaterialEXT not available." );
}

// GL_EXT_light_texture

void REGAL_CALL missing_glApplyTextureEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glApplyTextureEXT not available." );
}

void REGAL_CALL missing_glTextureLightEXT(GLenum pname)
{
  UNUSED_PARAMETER(pname);
  Warning( "glTextureLightEXT not available." );
}

void REGAL_CALL missing_glTextureMaterialEXT(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glTextureMaterialEXT not available." );
}

// GL_EXT_map_buffer_range

void REGAL_CALL missing_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  Warning( "glFlushMappedBufferRangeEXT not available." );
}

GLvoid *REGAL_CALL missing_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(access);
  Warning( "glMapBufferRangeEXT not available." );
  return NULL;
}

// GL_EXT_multi_draw_arrays

void REGAL_CALL missing_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawArraysEXT not available." );
}

void REGAL_CALL missing_glMultiDrawElementsEXT(GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  Warning( "glMultiDrawElementsEXT not available." );
}

// GL_EXT_multisample

void REGAL_CALL missing_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(invert);
  Warning( "glSampleMaskEXT not available." );
}

void REGAL_CALL missing_glSamplePatternEXT(GLenum pattern)
{
  UNUSED_PARAMETER(pattern);
  Warning( "glSamplePatternEXT not available." );
}

// GL_EXT_multisampled_render_to_texture

void REGAL_CALL missing_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(samples);
  Warning( "glFramebufferTexture2DMultisampleEXT not available." );
}

// GL_EXT_multiview_draw_buffers

void REGAL_CALL missing_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(indices);
  Warning( "glDrawBuffersIndexedEXT not available." );
}

void REGAL_CALL missing_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetIntegeri_vEXT not available." );
}

void REGAL_CALL missing_glReadBufferIndexedEXT(GLenum src, GLint index)
{
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(index);
  Warning( "glReadBufferIndexedEXT not available." );
}

// GL_EXT_occlusion_query_boolean

void REGAL_CALL missing_glBeginQueryEXT(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBeginQueryEXT not available." );
}

void REGAL_CALL missing_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteQueriesEXT not available." );
}

void REGAL_CALL missing_glEndQueryEXT(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glEndQueryEXT not available." );
}

void REGAL_CALL missing_glGenQueriesEXT(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenQueriesEXT not available." );
}

void REGAL_CALL missing_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectuivEXT not available." );
}

void REGAL_CALL missing_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryivEXT not available." );
}

GLboolean REGAL_CALL missing_glIsQueryEXT(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsQueryEXT not available." );
  return (GLboolean )0;
}

// GL_EXT_paletted_texture

void REGAL_CALL missing_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glColorTableEXT not available." );
}

void REGAL_CALL missing_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(data);
  Warning( "glGetColorTableEXT not available." );
}

void REGAL_CALL missing_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameterivEXT not available." );
}

// GL_EXT_pixel_transform

void REGAL_CALL missing_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPixelTransformParameterfvEXT not available." );
}

void REGAL_CALL missing_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPixelTransformParameterivEXT not available." );
}

void REGAL_CALL missing_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTransformParameterfEXT not available." );
}

void REGAL_CALL missing_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPixelTransformParameterfvEXT not available." );
}

void REGAL_CALL missing_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTransformParameteriEXT not available." );
}

void REGAL_CALL missing_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPixelTransformParameterivEXT not available." );
}

// GL_EXT_point_parameters

void REGAL_CALL missing_glPointParameterfEXT(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameterfEXT not available." );
}

void REGAL_CALL missing_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameterfvEXT not available." );
}

// GL_EXT_polygon_offset

void REGAL_CALL missing_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
  UNUSED_PARAMETER(factor);
  UNUSED_PARAMETER(bias);
  Warning( "glPolygonOffsetEXT not available." );
}

// GL_EXT_provoking_vertex

void REGAL_CALL missing_glProvokingVertexEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glProvokingVertexEXT not available." );
}

// GL_EXT_robustness

void REGAL_CALL missing_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformfvEXT not available." );
}

void REGAL_CALL missing_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(params);
  Warning( "glGetnUniformivEXT not available." );
}

void REGAL_CALL missing_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(data);
  Warning( "glReadnPixelsEXT not available." );
}

// GL_EXT_scene_marker

void REGAL_CALL missing_glBeginSceneEXT(void)
{
  Warning( "glBeginSceneEXT not available." );
}

void REGAL_CALL missing_glEndSceneEXT(void)
{
  Warning( "glEndSceneEXT not available." );
}

// GL_EXT_secondary_color

void REGAL_CALL missing_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3bEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3bvEXT(const GLbyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3bvEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3dEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3dvEXT(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3dvEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3fEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3fvEXT(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3fvEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3iEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3ivEXT(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3ivEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3sEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3svEXT(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3svEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3ubEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3ubvEXT(const GLubyte *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3ubvEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3uiEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3uivEXT(const GLuint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3uivEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3usEXT not available." );
}

void REGAL_CALL missing_glSecondaryColor3usvEXT(const GLushort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3usvEXT not available." );
}

void REGAL_CALL missing_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glSecondaryColorPointerEXT not available." );
}

// GL_EXT_separate_shader_objects

void REGAL_CALL missing_glActiveProgramEXT(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glActiveProgramEXT not available." );
}

GLuint REGAL_CALL missing_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(string);
  Warning( "glCreateShaderProgramEXT not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glUseShaderProgramEXT(GLenum type, GLuint program)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(program);
  Warning( "glUseShaderProgramEXT not available." );
}

// GL_EXT_shader_image_load_store

void REGAL_CALL missing_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layered);
  UNUSED_PARAMETER(layer);
  UNUSED_PARAMETER(access);
  UNUSED_PARAMETER(format);
  Warning( "glBindImageTextureEXT not available." );
}

void REGAL_CALL missing_glMemoryBarrierEXT(GLbitfield barriers)
{
  UNUSED_PARAMETER(barriers);
  Warning( "glMemoryBarrierEXT not available." );
}

// GL_EXT_stencil_clear_tag

void REGAL_CALL missing_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
  UNUSED_PARAMETER(stencilTagBits);
  UNUSED_PARAMETER(stencilClearTag);
  Warning( "glStencilClearTagEXT not available." );
}

// GL_EXT_stencil_two_side

void REGAL_CALL missing_glActiveStencilFaceEXT(GLenum face)
{
  UNUSED_PARAMETER(face);
  Warning( "glActiveStencilFaceEXT not available." );
}

// GL_EXT_subtexture

void REGAL_CALL missing_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage1DEXT not available." );
}

void REGAL_CALL missing_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage2DEXT not available." );
}

void REGAL_CALL missing_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage3DEXT not available." );
}

// GL_EXT_texture3D

void REGAL_CALL missing_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage3DEXT not available." );
}

// GL_EXT_texture_array

void REGAL_CALL missing_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layer);
  Warning( "glFramebufferTextureLayerEXT not available." );
}

// GL_EXT_texture_buffer_object

void REGAL_CALL missing_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(buffer);
  Warning( "glTexBufferEXT not available." );
}

// GL_EXT_texture_integer

void REGAL_CALL missing_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glClearColorIiEXT not available." );
}

void REGAL_CALL missing_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glClearColorIuiEXT not available." );
}

void REGAL_CALL missing_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterIivEXT not available." );
}

void REGAL_CALL missing_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexParameterIuivEXT not available." );
}

void REGAL_CALL missing_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameterIivEXT not available." );
}

void REGAL_CALL missing_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexParameterIuivEXT not available." );
}

// GL_EXT_texture_object

GLboolean REGAL_CALL missing_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  UNUSED_PARAMETER(residences);
  Warning( "glAreTexturesResidentEXT not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glBindTextureEXT(GLenum target, GLuint texture)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(texture);
  Warning( "glBindTextureEXT not available." );
}

void REGAL_CALL missing_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  Warning( "glDeleteTexturesEXT not available." );
}

void REGAL_CALL missing_glGenTexturesEXT(GLsizei n, GLuint *textures)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  Warning( "glGenTexturesEXT not available." );
}

GLboolean REGAL_CALL missing_glIsTextureEXT(GLuint texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glIsTextureEXT not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(textures);
  UNUSED_PARAMETER(priorities);
  Warning( "glPrioritizeTexturesEXT not available." );
}

// GL_EXT_texture_perturb_normal

void REGAL_CALL missing_glTextureNormalEXT(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glTextureNormalEXT not available." );
}

// GL_EXT_texture_storage

void REGAL_CALL missing_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  Warning( "glTexStorage1DEXT not available." );
}

void REGAL_CALL missing_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glTexStorage2DEXT not available." );
}

void REGAL_CALL missing_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(levels);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  Warning( "glTexStorage3DEXT not available." );
}

// GL_EXT_timer_query

void REGAL_CALL missing_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjecti64vEXT not available." );
}

void REGAL_CALL missing_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetQueryObjectui64vEXT not available." );
}

// GL_EXT_transform_feedback

void REGAL_CALL missing_glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
  UNUSED_PARAMETER(primitiveMode);
  Warning( "glBeginTransformFeedbackEXT not available." );
}

void REGAL_CALL missing_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  Warning( "glBindBufferBaseEXT not available." );
}

void REGAL_CALL missing_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  Warning( "glBindBufferOffsetEXT not available." );
}

void REGAL_CALL missing_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glBindBufferRangeEXT not available." );
}

void REGAL_CALL missing_glEndTransformFeedbackEXT(void)
{
  Warning( "glEndTransformFeedbackEXT not available." );
}

void REGAL_CALL missing_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetTransformFeedbackVaryingEXT not available." );
}

void REGAL_CALL missing_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(varyings);
  UNUSED_PARAMETER(bufferMode);
  Warning( "glTransformFeedbackVaryingsEXT not available." );
}

// GL_EXT_vertex_array

void REGAL_CALL missing_glArrayElementEXT(GLint i)
{
  UNUSED_PARAMETER(i);
  Warning( "glArrayElementEXT not available." );
}

void REGAL_CALL missing_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glColorPointerEXT not available." );
}

void REGAL_CALL missing_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  Warning( "glDrawArraysEXT not available." );
}

void REGAL_CALL missing_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glEdgeFlagPointerEXT not available." );
}

void REGAL_CALL missing_glGetPointervEXT(GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPointervEXT not available." );
}

void REGAL_CALL missing_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glIndexPointerEXT not available." );
}

void REGAL_CALL missing_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glNormalPointerEXT not available." );
}

void REGAL_CALL missing_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glTexCoordPointerEXT not available." );
}

void REGAL_CALL missing_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexPointerEXT not available." );
}

// GL_EXT_vertex_attrib_64bit

void REGAL_CALL missing_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribLdvEXT not available." );
}

void REGAL_CALL missing_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  UNUSED_PARAMETER(vaobj);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(offset);
  Warning( "glVertexArrayVertexAttribLOffsetEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribL1dEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL1dvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribL2dEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL2dvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribL3dEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL3dvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribL4dEXT not available." );
}

void REGAL_CALL missing_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL4dvEXT not available." );
}

void REGAL_CALL missing_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribLPointerEXT not available." );
}

// GL_EXT_vertex_shader

void REGAL_CALL missing_glBeginVertexShaderEXT(void)
{
  Warning( "glBeginVertexShaderEXT not available." );
}

GLuint REGAL_CALL missing_glBindLightParameterEXT(GLenum light, GLenum value)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(value);
  Warning( "glBindLightParameterEXT not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(value);
  Warning( "glBindMaterialParameterEXT not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glBindParameterEXT(GLenum value)
{
  UNUSED_PARAMETER(value);
  Warning( "glBindParameterEXT not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
  UNUSED_PARAMETER(unit);
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(value);
  Warning( "glBindTexGenParameterEXT not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
  UNUSED_PARAMETER(unit);
  UNUSED_PARAMETER(value);
  Warning( "glBindTextureUnitParameterEXT not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glBindVertexShaderEXT(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glBindVertexShaderEXT not available." );
}

void REGAL_CALL missing_glDeleteVertexShaderEXT(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glDeleteVertexShaderEXT not available." );
}

void REGAL_CALL missing_glDisableVariantClientStateEXT(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glDisableVariantClientStateEXT not available." );
}

void REGAL_CALL missing_glEnableVariantClientStateEXT(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glEnableVariantClientStateEXT not available." );
}

void REGAL_CALL missing_glEndVertexShaderEXT(void)
{
  Warning( "glEndVertexShaderEXT not available." );
}

void REGAL_CALL missing_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(num);
  Warning( "glExtractComponentEXT not available." );
}

GLuint REGAL_CALL missing_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  UNUSED_PARAMETER(datatype);
  UNUSED_PARAMETER(storagetype);
  UNUSED_PARAMETER(range);
  UNUSED_PARAMETER(components);
  Warning( "glGenSymbolsEXT not available." );
  return (GLuint )0;
}

GLuint REGAL_CALL missing_glGenVertexShadersEXT(GLuint range)
{
  UNUSED_PARAMETER(range);
  Warning( "glGenVertexShadersEXT not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetInvariantBooleanvEXT not available." );
}

void REGAL_CALL missing_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetInvariantFloatvEXT not available." );
}

void REGAL_CALL missing_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetInvariantIntegervEXT not available." );
}

void REGAL_CALL missing_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetLocalConstantBooleanvEXT not available." );
}

void REGAL_CALL missing_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetLocalConstantFloatvEXT not available." );
}

void REGAL_CALL missing_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetLocalConstantIntegervEXT not available." );
}

void REGAL_CALL missing_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetVariantBooleanvEXT not available." );
}

void REGAL_CALL missing_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetVariantFloatvEXT not available." );
}

void REGAL_CALL missing_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetVariantIntegervEXT not available." );
}

void REGAL_CALL missing_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(data);
  Warning( "glGetVariantPointervEXT not available." );
}

void REGAL_CALL missing_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(src);
  UNUSED_PARAMETER(num);
  Warning( "glInsertComponentEXT not available." );
}

GLboolean REGAL_CALL missing_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(cap);
  Warning( "glIsVariantEnabledEXT not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(addr);
  Warning( "glSetInvariantEXT not available." );
}

void REGAL_CALL missing_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(addr);
  Warning( "glSetLocalConstantEXT not available." );
}

void REGAL_CALL missing_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(arg1);
  Warning( "glShaderOp1EXT not available." );
}

void REGAL_CALL missing_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg2);
  Warning( "glShaderOp2EXT not available." );
}

void REGAL_CALL missing_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  UNUSED_PARAMETER(op);
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(arg1);
  UNUSED_PARAMETER(arg2);
  UNUSED_PARAMETER(arg3);
  Warning( "glShaderOp3EXT not available." );
}

void REGAL_CALL missing_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(in);
  UNUSED_PARAMETER(outX);
  UNUSED_PARAMETER(outY);
  UNUSED_PARAMETER(outZ);
  UNUSED_PARAMETER(outW);
  Warning( "glSwizzleEXT not available." );
}

void REGAL_CALL missing_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantPointerEXT not available." );
}

void REGAL_CALL missing_glVariantbvEXT(GLuint id, const GLbyte *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantbvEXT not available." );
}

void REGAL_CALL missing_glVariantdvEXT(GLuint id, const GLdouble *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantdvEXT not available." );
}

void REGAL_CALL missing_glVariantfvEXT(GLuint id, const GLfloat *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantfvEXT not available." );
}

void REGAL_CALL missing_glVariantivEXT(GLuint id, const GLint *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantivEXT not available." );
}

void REGAL_CALL missing_glVariantsvEXT(GLuint id, const GLshort *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantsvEXT not available." );
}

void REGAL_CALL missing_glVariantubvEXT(GLuint id, const GLubyte *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantubvEXT not available." );
}

void REGAL_CALL missing_glVariantuivEXT(GLuint id, const GLuint *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantuivEXT not available." );
}

void REGAL_CALL missing_glVariantusvEXT(GLuint id, const GLushort *addr)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(addr);
  Warning( "glVariantusvEXT not available." );
}

void REGAL_CALL missing_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  UNUSED_PARAMETER(res);
  UNUSED_PARAMETER(in);
  UNUSED_PARAMETER(outX);
  UNUSED_PARAMETER(outY);
  UNUSED_PARAMETER(outZ);
  UNUSED_PARAMETER(outW);
  Warning( "glWriteMaskEXT not available." );
}

// GL_EXT_vertex_weighting

void REGAL_CALL missing_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexWeightPointerEXT not available." );
}

void REGAL_CALL missing_glVertexWeightfEXT(GLfloat weight)
{
  UNUSED_PARAMETER(weight);
  Warning( "glVertexWeightfEXT not available." );
}

void REGAL_CALL missing_glVertexWeightfvEXT(const GLfloat *weight)
{
  UNUSED_PARAMETER(weight);
  Warning( "glVertexWeightfvEXT not available." );
}

// GL_EXT_x11_sync_object

GLsync REGAL_CALL missing_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  UNUSED_PARAMETER(external_sync_type);
  UNUSED_PARAMETER(external_sync);
  UNUSED_PARAMETER(flags);
  Warning( "glImportSyncEXT not available." );
  return (GLsync )0;
}

// GL_GREMEDY_frame_terminator

void REGAL_CALL missing_glFrameTerminatorGREMEDY(void)
{
  Warning( "glFrameTerminatorGREMEDY not available." );
}

// GL_GREMEDY_string_marker

void REGAL_CALL missing_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(string);
  Warning( "glStringMarkerGREMEDY not available." );
}

// GL_HP_image_transform

void REGAL_CALL missing_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetImageTransformParameterfvHP not available." );
}

void REGAL_CALL missing_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetImageTransformParameterivHP not available." );
}

void REGAL_CALL missing_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glImageTransformParameterfHP not available." );
}

void REGAL_CALL missing_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glImageTransformParameterfvHP not available." );
}

void REGAL_CALL missing_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glImageTransformParameteriHP not available." );
}

void REGAL_CALL missing_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glImageTransformParameterivHP not available." );
}

// GL_IBM_multimode_draw_arrays

void REGAL_CALL missing_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(modestride);
  Warning( "glMultiModeDrawArraysIBM not available." );
}

void REGAL_CALL missing_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(indices);
  UNUSED_PARAMETER(primcount);
  UNUSED_PARAMETER(modestride);
  Warning( "glMultiModeDrawElementsIBM not available." );
}

// GL_IBM_vertex_array_lists

void REGAL_CALL missing_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glColorPointerListIBM not available." );
}

void REGAL_CALL missing_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glEdgeFlagPointerListIBM not available." );
}

void REGAL_CALL missing_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glFogCoordPointerListIBM not available." );
}

void REGAL_CALL missing_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glIndexPointerListIBM not available." );
}

void REGAL_CALL missing_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glNormalPointerListIBM not available." );
}

void REGAL_CALL missing_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glSecondaryColorPointerListIBM not available." );
}

void REGAL_CALL missing_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glTexCoordPointerListIBM not available." );
}

void REGAL_CALL missing_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  UNUSED_PARAMETER(ptrstride);
  Warning( "glVertexPointerListIBM not available." );
}

// GL_IMG_multisampled_render_to_texture

void REGAL_CALL missing_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(samples);
  Warning( "glFramebufferTexture2DMultisampleIMG not available." );
}

void REGAL_CALL missing_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisampleIMG not available." );
}

// GL_INGR_blend_func_separate

void REGAL_CALL missing_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  UNUSED_PARAMETER(sfactorRGB);
  UNUSED_PARAMETER(dfactorRGB);
  UNUSED_PARAMETER(sfactorAlpha);
  UNUSED_PARAMETER(dfactorAlpha);
  Warning( "glBlendFuncSeparateINGR not available." );
}

// GL_INTEL_parallel_arrays

void REGAL_CALL missing_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glColorPointervINTEL not available." );
}

void REGAL_CALL missing_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glNormalPointervINTEL not available." );
}

void REGAL_CALL missing_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glTexCoordPointervINTEL not available." );
}

void REGAL_CALL missing_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexPointervINTEL not available." );
}

// GL_INTEL_texture_scissor

void REGAL_CALL missing_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(lfunc);
  UNUSED_PARAMETER(hfunc);
  Warning( "glTexScissorFuncINTEL not available." );
}

void REGAL_CALL missing_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(tlow);
  UNUSED_PARAMETER(thigh);
  Warning( "glTexScissorINTEL not available." );
}

// GL_KHR_debug

void REGAL_CALL missing_glDebugMessageCallback(GLDEBUGPROC callback, GLvoid *userParam)
{
  UNUSED_PARAMETER(callback);
  UNUSED_PARAMETER(userParam);
  Warning( "glDebugMessageCallback not available." );
}

void REGAL_CALL missing_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(enabled);
  Warning( "glDebugMessageControl not available." );
}

void REGAL_CALL missing_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(severity);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(buf);
  Warning( "glDebugMessageInsert not available." );
}

GLuint REGAL_CALL missing_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(bufsize);
  UNUSED_PARAMETER(sources);
  UNUSED_PARAMETER(types);
  UNUSED_PARAMETER(ids);
  UNUSED_PARAMETER(severities);
  UNUSED_PARAMETER(lengths);
  UNUSED_PARAMETER(messageLog);
  Warning( "glGetDebugMessageLog not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  UNUSED_PARAMETER(identifier);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glGetObjectLabel not available." );
}

void REGAL_CALL missing_glGetObjectPtrLabel(GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  UNUSED_PARAMETER(ptr);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glGetObjectPtrLabel not available." );
}

void REGAL_CALL missing_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
  UNUSED_PARAMETER(identifier);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glObjectLabel not available." );
}

void REGAL_CALL missing_glObjectPtrLabel(GLvoid *ptr, GLsizei length, const GLchar *label)
{
  UNUSED_PARAMETER(ptr);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(label);
  Warning( "glObjectPtrLabel not available." );
}

void REGAL_CALL missing_glPopDebugGroup(void)
{
  Warning( "glPopDebugGroup not available." );
}

void REGAL_CALL missing_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(message);
  Warning( "glPushDebugGroup not available." );
}

// GL_KTX_buffer_region

GLuint REGAL_CALL missing_glBufferRegionEnabled(void)
{
  Warning( "glBufferRegionEnabled not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glDeleteBufferRegion(GLenum region)
{
  UNUSED_PARAMETER(region);
  Warning( "glDeleteBufferRegion not available." );
}

void REGAL_CALL missing_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  UNUSED_PARAMETER(region);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(xDest);
  UNUSED_PARAMETER(yDest);
  Warning( "glDrawBufferRegion not available." );
}

GLuint REGAL_CALL missing_glNewBufferRegion(GLenum region)
{
  UNUSED_PARAMETER(region);
  Warning( "glNewBufferRegion not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(region);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glReadBufferRegion not available." );
}

// GL_MESA_resize_buffers

void REGAL_CALL missing_glResizeBuffersMESA(void)
{
  Warning( "glResizeBuffersMESA not available." );
}

// GL_MESA_window_pos

void REGAL_CALL missing_glWindowPos2dMESA(GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2dMESA not available." );
}

void REGAL_CALL missing_glWindowPos2dvMESA(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos2dvMESA not available." );
}

void REGAL_CALL missing_glWindowPos2fMESA(GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2fMESA not available." );
}

void REGAL_CALL missing_glWindowPos2fvMESA(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos2fvMESA not available." );
}

void REGAL_CALL missing_glWindowPos2iMESA(GLint x, GLint y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2iMESA not available." );
}

void REGAL_CALL missing_glWindowPos2ivMESA(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos2ivMESA not available." );
}

void REGAL_CALL missing_glWindowPos2sMESA(GLshort x, GLshort y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glWindowPos2sMESA not available." );
}

void REGAL_CALL missing_glWindowPos2svMESA(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos2svMESA not available." );
}

void REGAL_CALL missing_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3dMESA not available." );
}

void REGAL_CALL missing_glWindowPos3dvMESA(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos3dvMESA not available." );
}

void REGAL_CALL missing_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3fMESA not available." );
}

void REGAL_CALL missing_glWindowPos3fvMESA(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos3fvMESA not available." );
}

void REGAL_CALL missing_glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3iMESA not available." );
}

void REGAL_CALL missing_glWindowPos3ivMESA(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos3ivMESA not available." );
}

void REGAL_CALL missing_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glWindowPos3sMESA not available." );
}

void REGAL_CALL missing_glWindowPos3svMESA(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos3svMESA not available." );
}

void REGAL_CALL missing_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glWindowPos4dMESA not available." );
}

void REGAL_CALL missing_glWindowPos4dvMESA(const GLdouble *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos4dvMESA not available." );
}

void REGAL_CALL missing_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glWindowPos4fMESA not available." );
}

void REGAL_CALL missing_glWindowPos4fvMESA(const GLfloat *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos4fvMESA not available." );
}

void REGAL_CALL missing_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glWindowPos4iMESA not available." );
}

void REGAL_CALL missing_glWindowPos4ivMESA(const GLint *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos4ivMESA not available." );
}

void REGAL_CALL missing_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glWindowPos4sMESA not available." );
}

void REGAL_CALL missing_glWindowPos4svMESA(const GLshort *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glWindowPos4svMESA not available." );
}

// GL_NVX_conditional_render

void REGAL_CALL missing_glBeginConditionalRenderNVX(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glBeginConditionalRenderNVX not available." );
}

void REGAL_CALL missing_glEndConditionalRenderNVX(void)
{
  Warning( "glEndConditionalRenderNVX not available." );
}

// GL_NV_bindless_texture

GLuint64 REGAL_CALL missing_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(layered);
  UNUSED_PARAMETER(layer);
  UNUSED_PARAMETER(format);
  Warning( "glGetImageHandleNV not available." );
  return (GLuint64 )0;
}

GLuint64 REGAL_CALL missing_glGetTextureHandleNV(GLuint texture)
{
  UNUSED_PARAMETER(texture);
  Warning( "glGetTextureHandleNV not available." );
  return (GLuint64 )0;
}

GLuint64 REGAL_CALL missing_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(sampler);
  Warning( "glGetTextureSamplerHandleNV not available." );
  return (GLuint64 )0;
}

GLboolean REGAL_CALL missing_glIsImageHandleResidentNV(GLuint64 handle)
{
  UNUSED_PARAMETER(handle);
  Warning( "glIsImageHandleResidentNV not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsTextureHandleResidentNV(GLuint64 handle)
{
  UNUSED_PARAMETER(handle);
  Warning( "glIsTextureHandleResidentNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glMakeImageHandleNonResidentNV(GLuint64 handle)
{
  UNUSED_PARAMETER(handle);
  Warning( "glMakeImageHandleNonResidentNV not available." );
}

void REGAL_CALL missing_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
  UNUSED_PARAMETER(handle);
  UNUSED_PARAMETER(access);
  Warning( "glMakeImageHandleResidentNV not available." );
}

void REGAL_CALL missing_glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
  UNUSED_PARAMETER(handle);
  Warning( "glMakeTextureHandleNonResidentNV not available." );
}

void REGAL_CALL missing_glMakeTextureHandleResidentNV(GLuint64 handle)
{
  UNUSED_PARAMETER(handle);
  Warning( "glMakeTextureHandleResidentNV not available." );
}

void REGAL_CALL missing_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformHandleui64NV not available." );
}

void REGAL_CALL missing_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(values);
  Warning( "glProgramUniformHandleui64vNV not available." );
}

void REGAL_CALL missing_glUniformHandleui64NV(GLint location, GLuint64 value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(value);
  Warning( "glUniformHandleui64NV not available." );
}

void REGAL_CALL missing_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniformHandleui64vNV not available." );
}

// GL_NV_conditional_render

void REGAL_CALL missing_glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(mode);
  Warning( "glBeginConditionalRenderNV not available." );
}

void REGAL_CALL missing_glEndConditionalRenderNV(void)
{
  Warning( "glEndConditionalRenderNV not available." );
}

// GL_NV_copy_image

void REGAL_CALL missing_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  UNUSED_PARAMETER(srcName);
  UNUSED_PARAMETER(srcTarget);
  UNUSED_PARAMETER(srcLevel);
  UNUSED_PARAMETER(srcX);
  UNUSED_PARAMETER(srcY);
  UNUSED_PARAMETER(srcZ);
  UNUSED_PARAMETER(dstName);
  UNUSED_PARAMETER(dstTarget);
  UNUSED_PARAMETER(dstLevel);
  UNUSED_PARAMETER(dstX);
  UNUSED_PARAMETER(dstY);
  UNUSED_PARAMETER(dstZ);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  Warning( "glCopyImageSubDataNV not available." );
}

// GL_NV_coverage_sample

void REGAL_CALL missing_glCoverageMaskNV(GLboolean mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glCoverageMaskNV not available." );
}

void REGAL_CALL missing_glCoverageOperationNV(GLenum operation)
{
  UNUSED_PARAMETER(operation);
  Warning( "glCoverageOperationNV not available." );
}

// GL_NV_depth_buffer_float

void REGAL_CALL missing_glClearDepthdNV(GLdouble depth)
{
  UNUSED_PARAMETER(depth);
  Warning( "glClearDepthdNV not available." );
}

void REGAL_CALL missing_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
  UNUSED_PARAMETER(zmin);
  UNUSED_PARAMETER(zmax);
  Warning( "glDepthBoundsdNV not available." );
}

void REGAL_CALL missing_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
  UNUSED_PARAMETER(zNear);
  UNUSED_PARAMETER(zFar);
  Warning( "glDepthRangedNV not available." );
}

// GL_NV_draw_buffers

void REGAL_CALL missing_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(bufs);
  Warning( "glDrawBuffersNV not available." );
}

// GL_NV_evaluators

void REGAL_CALL missing_glEvalMapsNV(GLenum target, GLenum mode)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(mode);
  Warning( "glEvalMapsNV not available." );
}

void REGAL_CALL missing_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMapAttribParameterfvNV not available." );
}

void REGAL_CALL missing_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMapAttribParameterivNV not available." );
}

void REGAL_CALL missing_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(packed);
  UNUSED_PARAMETER(points);
  Warning( "glGetMapControlPointsNV not available." );
}

void REGAL_CALL missing_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMapParameterfvNV not available." );
}

void REGAL_CALL missing_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetMapParameterivNV not available." );
}

void REGAL_CALL missing_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(packed);
  UNUSED_PARAMETER(points);
  Warning( "glMapControlPointsNV not available." );
}

void REGAL_CALL missing_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMapParameterfvNV not available." );
}

void REGAL_CALL missing_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glMapParameterivNV not available." );
}

// GL_NV_explicit_multisample

void REGAL_CALL missing_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(val);
  Warning( "glGetMultisamplefvNV not available." );
}

void REGAL_CALL missing_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(mask);
  Warning( "glSampleMaskIndexedNV not available." );
}

void REGAL_CALL missing_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glTexRenderbufferNV not available." );
}

// GL_NV_fence

void REGAL_CALL missing_glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(fences);
  Warning( "glDeleteFencesNV not available." );
}

void REGAL_CALL missing_glFinishFenceNV(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glFinishFenceNV not available." );
}

void REGAL_CALL missing_glGenFencesNV(GLsizei n, GLuint *fences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(fences);
  Warning( "glGenFencesNV not available." );
}

void REGAL_CALL missing_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(fence);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFenceivNV not available." );
}

GLboolean REGAL_CALL missing_glIsFenceNV(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glIsFenceNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glSetFenceNV(GLuint fence, GLenum condition)
{
  UNUSED_PARAMETER(fence);
  UNUSED_PARAMETER(condition);
  Warning( "glSetFenceNV not available." );
}

GLboolean REGAL_CALL missing_glTestFenceNV(GLuint fence)
{
  UNUSED_PARAMETER(fence);
  Warning( "glTestFenceNV not available." );
  return (GLboolean )0;
}

// GL_NV_fragment_program

void REGAL_CALL missing_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramNamedParameterdvNV not available." );
}

void REGAL_CALL missing_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramNamedParameterfvNV not available." );
}

void REGAL_CALL missing_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramNamedParameter4dNV not available." );
}

void REGAL_CALL missing_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(v);
  Warning( "glProgramNamedParameter4dvNV not available." );
}

void REGAL_CALL missing_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramNamedParameter4fNV not available." );
}

void REGAL_CALL missing_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(v);
  Warning( "glProgramNamedParameter4fvNV not available." );
}

// GL_NV_framebuffer_multisample_coverage

void REGAL_CALL missing_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageMultisampleCoverageNV not available." );
}

// GL_NV_geometry_program4

void REGAL_CALL missing_glProgramVertexLimitNV(GLenum target, GLint limit)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(limit);
  Warning( "glProgramVertexLimitNV not available." );
}

// GL_NV_gpu_program4

void REGAL_CALL missing_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramEnvParameterIivNV not available." );
}

void REGAL_CALL missing_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramEnvParameterIuivNV not available." );
}

void REGAL_CALL missing_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramLocalParameterIivNV not available." );
}

void REGAL_CALL missing_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramLocalParameterIuivNV not available." );
}

void REGAL_CALL missing_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramEnvParameterI4iNV not available." );
}

void REGAL_CALL missing_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParameterI4ivNV not available." );
}

void REGAL_CALL missing_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramEnvParameterI4uiNV not available." );
}

void REGAL_CALL missing_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParameterI4uivNV not available." );
}

void REGAL_CALL missing_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParametersI4ivNV not available." );
}

void REGAL_CALL missing_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramEnvParametersI4uivNV not available." );
}

void REGAL_CALL missing_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramLocalParameterI4iNV not available." );
}

void REGAL_CALL missing_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParameterI4ivNV not available." );
}

void REGAL_CALL missing_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramLocalParameterI4uiNV not available." );
}

void REGAL_CALL missing_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParameterI4uivNV not available." );
}

void REGAL_CALL missing_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParametersI4ivNV not available." );
}

void REGAL_CALL missing_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramLocalParametersI4uivNV not available." );
}

// GL_NV_gpu_shader5

void REGAL_CALL missing_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformi64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1i64NV not available." );
}

void REGAL_CALL missing_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1i64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glProgramUniform1ui64NV not available." );
}

void REGAL_CALL missing_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform1ui64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2i64NV not available." );
}

void REGAL_CALL missing_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2i64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glProgramUniform2ui64NV not available." );
}

void REGAL_CALL missing_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform2ui64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3i64NV not available." );
}

void REGAL_CALL missing_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3i64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glProgramUniform3ui64NV not available." );
}

void REGAL_CALL missing_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform3ui64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4i64NV not available." );
}

void REGAL_CALL missing_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4i64vNV not available." );
}

void REGAL_CALL missing_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramUniform4ui64NV not available." );
}

void REGAL_CALL missing_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniform4ui64vNV not available." );
}

void REGAL_CALL missing_glUniform1i64NV(GLint location, GLint64EXT x)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glUniform1i64NV not available." );
}

void REGAL_CALL missing_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1i64vNV not available." );
}

void REGAL_CALL missing_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  Warning( "glUniform1ui64NV not available." );
}

void REGAL_CALL missing_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform1ui64vNV not available." );
}

void REGAL_CALL missing_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glUniform2i64NV not available." );
}

void REGAL_CALL missing_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2i64vNV not available." );
}

void REGAL_CALL missing_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glUniform2ui64NV not available." );
}

void REGAL_CALL missing_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform2ui64vNV not available." );
}

void REGAL_CALL missing_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glUniform3i64NV not available." );
}

void REGAL_CALL missing_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3i64vNV not available." );
}

void REGAL_CALL missing_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glUniform3ui64NV not available." );
}

void REGAL_CALL missing_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform3ui64vNV not available." );
}

void REGAL_CALL missing_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glUniform4i64NV not available." );
}

void REGAL_CALL missing_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4i64vNV not available." );
}

void REGAL_CALL missing_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glUniform4ui64NV not available." );
}

void REGAL_CALL missing_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniform4ui64vNV not available." );
}

// GL_NV_half_float

void REGAL_CALL missing_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glColor3hNV not available." );
}

void REGAL_CALL missing_glColor3hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor3hvNV not available." );
}

void REGAL_CALL missing_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glColor4hNV not available." );
}

void REGAL_CALL missing_glColor4hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glColor4hvNV not available." );
}

void REGAL_CALL missing_glFogCoordhNV(GLhalfNV coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordhNV not available." );
}

void REGAL_CALL missing_glFogCoordhvNV(const GLhalfNV *coord)
{
  UNUSED_PARAMETER(coord);
  Warning( "glFogCoordhvNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  Warning( "glMultiTexCoord1hNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord1hvNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glMultiTexCoord2hNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord2hvNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glMultiTexCoord3hNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord3hvNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glMultiTexCoord4hNV not available." );
}

void REGAL_CALL missing_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(v);
  Warning( "glMultiTexCoord4hvNV not available." );
}

void REGAL_CALL missing_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  Warning( "glNormal3hNV not available." );
}

void REGAL_CALL missing_glNormal3hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glNormal3hvNV not available." );
}

void REGAL_CALL missing_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  Warning( "glSecondaryColor3hNV not available." );
}

void REGAL_CALL missing_glSecondaryColor3hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glSecondaryColor3hvNV not available." );
}

void REGAL_CALL missing_glTexCoord1hNV(GLhalfNV s)
{
  UNUSED_PARAMETER(s);
  Warning( "glTexCoord1hNV not available." );
}

void REGAL_CALL missing_glTexCoord1hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord1hvNV not available." );
}

void REGAL_CALL missing_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  Warning( "glTexCoord2hNV not available." );
}

void REGAL_CALL missing_glTexCoord2hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2hvNV not available." );
}

void REGAL_CALL missing_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  Warning( "glTexCoord3hNV not available." );
}

void REGAL_CALL missing_glTexCoord3hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord3hvNV not available." );
}

void REGAL_CALL missing_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(q);
  Warning( "glTexCoord4hNV not available." );
}

void REGAL_CALL missing_glTexCoord4hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4hvNV not available." );
}

void REGAL_CALL missing_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertex2hNV not available." );
}

void REGAL_CALL missing_glVertex2hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex2hvNV not available." );
}

void REGAL_CALL missing_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertex3hNV not available." );
}

void REGAL_CALL missing_glVertex3hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex3hvNV not available." );
}

void REGAL_CALL missing_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertex4hNV not available." );
}

void REGAL_CALL missing_glVertex4hvNV(const GLhalfNV *v)
{
  UNUSED_PARAMETER(v);
  Warning( "glVertex4hvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1hNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1hvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2hNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2hvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3hNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3hvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4hNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4hvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs1hvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs2hvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs3hvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs4hvNV not available." );
}

void REGAL_CALL missing_glVertexWeighthNV(GLhalfNV weight)
{
  UNUSED_PARAMETER(weight);
  Warning( "glVertexWeighthNV not available." );
}

void REGAL_CALL missing_glVertexWeighthvNV(const GLhalfNV *weight)
{
  UNUSED_PARAMETER(weight);
  Warning( "glVertexWeighthvNV not available." );
}

// GL_NV_occlusion_query

void REGAL_CALL missing_glBeginOcclusionQueryNV(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glBeginOcclusionQueryNV not available." );
}

void REGAL_CALL missing_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteOcclusionQueriesNV not available." );
}

void REGAL_CALL missing_glEndOcclusionQueryNV(void)
{
  Warning( "glEndOcclusionQueryNV not available." );
}

void REGAL_CALL missing_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenOcclusionQueriesNV not available." );
}

void REGAL_CALL missing_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetOcclusionQueryivNV not available." );
}

void REGAL_CALL missing_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetOcclusionQueryuivNV not available." );
}

GLboolean REGAL_CALL missing_glIsOcclusionQueryNV(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsOcclusionQueryNV not available." );
  return (GLboolean )0;
}

// GL_NV_parameter_buffer_object

void REGAL_CALL missing_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramBufferParametersIivNV not available." );
}

void REGAL_CALL missing_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramBufferParametersIuivNV not available." );
}

void REGAL_CALL missing_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(params);
  Warning( "glProgramBufferParametersfvNV not available." );
}

// GL_NV_path_rendering

void REGAL_CALL missing_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
  UNUSED_PARAMETER(resultPath);
  UNUSED_PARAMETER(srcPath);
  Warning( "glCopyPathNV not available." );
}

void REGAL_CALL missing_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(coverMode);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(transformValues);
  Warning( "glCoverFillPathInstancedNV not available." );
}

void REGAL_CALL missing_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(coverMode);
  Warning( "glCoverFillPathNV not available." );
}

void REGAL_CALL missing_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(coverMode);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(transformValues);
  Warning( "glCoverStrokePathInstancedNV not available." );
}

void REGAL_CALL missing_glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(coverMode);
  Warning( "glCoverStrokePathNV not available." );
}

void REGAL_CALL missing_glDeletePathsNV(GLuint path, GLsizei range)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(range);
  Warning( "glDeletePathsNV not available." );
}

GLuint REGAL_CALL missing_glGenPathsNV(GLsizei range)
{
  UNUSED_PARAMETER(range);
  Warning( "glGenPathsNV not available." );
  return (GLuint )0;
}

void REGAL_CALL missing_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
{
  UNUSED_PARAMETER(color);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathColorGenfvNV not available." );
}

void REGAL_CALL missing_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
{
  UNUSED_PARAMETER(color);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathColorGenivNV not available." );
}

void REGAL_CALL missing_glGetPathCommandsNV(GLuint name, GLubyte *commands)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(commands);
  Warning( "glGetPathCommandsNV not available." );
}

void REGAL_CALL missing_glGetPathCoordsNV(GLuint name, GLfloat *coords)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(coords);
  Warning( "glGetPathCoordsNV not available." );
}

void REGAL_CALL missing_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(dashArray);
  Warning( "glGetPathDashArrayNV not available." );
}

GLfloat REGAL_CALL missing_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(startSegment);
  UNUSED_PARAMETER(numSegments);
  Warning( "glGetPathLengthNV not available." );
  return (GLfloat )0;
}

void REGAL_CALL missing_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
  UNUSED_PARAMETER(metricQueryMask);
  UNUSED_PARAMETER(fistPathName);
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(metrics);
  Warning( "glGetPathMetricRangeNV not available." );
}

void REGAL_CALL missing_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  UNUSED_PARAMETER(metricQueryMask);
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(metrics);
  Warning( "glGetPathMetricsNV not available." );
}

void REGAL_CALL missing_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(param);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathParameterfvNV not available." );
}

void REGAL_CALL missing_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
{
  UNUSED_PARAMETER(name);
  UNUSED_PARAMETER(param);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathParameterivNV not available." );
}

void REGAL_CALL missing_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  UNUSED_PARAMETER(pathListMode);
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(advanceScale);
  UNUSED_PARAMETER(kerningScale);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(returnedSpacing);
  Warning( "glGetPathSpacingNV not available." );
}

void REGAL_CALL missing_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
{
  UNUSED_PARAMETER(texCoordSet);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathTexGenfvNV not available." );
}

void REGAL_CALL missing_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
{
  UNUSED_PARAMETER(texCoordSet);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glGetPathTexGenivNV not available." );
}

void REGAL_CALL missing_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  UNUSED_PARAMETER(resultPath);
  UNUSED_PARAMETER(pathA);
  UNUSED_PARAMETER(pathB);
  UNUSED_PARAMETER(weight);
  Warning( "glInterpolatePathsNV not available." );
}

GLboolean REGAL_CALL missing_glIsPathNV(GLuint path)
{
  UNUSED_PARAMETER(path);
  Warning( "glIsPathNV not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glIsPointInFillPathNV not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glIsPointInStrokePathNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  UNUSED_PARAMETER(color);
  UNUSED_PARAMETER(genMode);
  UNUSED_PARAMETER(colorFormat);
  UNUSED_PARAMETER(coeffs);
  Warning( "glPathColorGenNV not available." );
}

void REGAL_CALL missing_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(numCommands);
  UNUSED_PARAMETER(commands);
  UNUSED_PARAMETER(numCoords);
  UNUSED_PARAMETER(coordType);
  UNUSED_PARAMETER(coords);
  Warning( "glPathCommandsNV not available." );
}

void REGAL_CALL missing_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(numCoords);
  UNUSED_PARAMETER(coordType);
  UNUSED_PARAMETER(coords);
  Warning( "glPathCoordsNV not available." );
}

void REGAL_CALL missing_glPathCoverDepthFuncNV(GLenum zfunc)
{
  UNUSED_PARAMETER(zfunc);
  Warning( "glPathCoverDepthFuncNV not available." );
}

void REGAL_CALL missing_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(dashCount);
  UNUSED_PARAMETER(dashArray);
  Warning( "glPathDashArrayNV not available." );
}

void REGAL_CALL missing_glPathFogGenNV(GLenum genMode)
{
  UNUSED_PARAMETER(genMode);
  Warning( "glPathFogGenNV not available." );
}

void REGAL_CALL missing_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  UNUSED_PARAMETER(firstPathName);
  UNUSED_PARAMETER(fontTarget);
  UNUSED_PARAMETER(fontName);
  UNUSED_PARAMETER(fontStyle);
  UNUSED_PARAMETER(firstGlyph);
  UNUSED_PARAMETER(numGlyphs);
  UNUSED_PARAMETER(handleMissingGlyphs);
  UNUSED_PARAMETER(pathParameterTemplate);
  UNUSED_PARAMETER(emScale);
  Warning( "glPathGlyphRangeNV not available." );
}

void REGAL_CALL missing_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  UNUSED_PARAMETER(firstPathName);
  UNUSED_PARAMETER(fontTarget);
  UNUSED_PARAMETER(fontName);
  UNUSED_PARAMETER(fontStyle);
  UNUSED_PARAMETER(numGlyphs);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(charcodes);
  UNUSED_PARAMETER(handleMissingGlyphs);
  UNUSED_PARAMETER(pathParameterTemplate);
  UNUSED_PARAMETER(emScale);
  Warning( "glPathGlyphsNV not available." );
}

void REGAL_CALL missing_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glPathParameterfNV not available." );
}

void REGAL_CALL missing_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glPathParameterfvNV not available." );
}

void REGAL_CALL missing_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glPathParameteriNV not available." );
}

void REGAL_CALL missing_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(value);
  Warning( "glPathParameterivNV not available." );
}

void REGAL_CALL missing_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
{
  UNUSED_PARAMETER(factor);
  UNUSED_PARAMETER(units);
  Warning( "glPathStencilDepthOffsetNV not available." );
}

void REGAL_CALL missing_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  UNUSED_PARAMETER(mask);
  Warning( "glPathStencilFuncNV not available." );
}

void REGAL_CALL missing_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(pathString);
  Warning( "glPathStringNV not available." );
}

void REGAL_CALL missing_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(commandStart);
  UNUSED_PARAMETER(commandsToDelete);
  UNUSED_PARAMETER(numCommands);
  UNUSED_PARAMETER(commands);
  UNUSED_PARAMETER(numCoords);
  UNUSED_PARAMETER(coordType);
  UNUSED_PARAMETER(coords);
  Warning( "glPathSubCommandsNV not available." );
}

void REGAL_CALL missing_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(coordStart);
  UNUSED_PARAMETER(numCoords);
  UNUSED_PARAMETER(coordType);
  UNUSED_PARAMETER(coords);
  Warning( "glPathSubCoordsNV not available." );
}

void REGAL_CALL missing_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  UNUSED_PARAMETER(texCoordSet);
  UNUSED_PARAMETER(genMode);
  UNUSED_PARAMETER(components);
  UNUSED_PARAMETER(coeffs);
  Warning( "glPathTexGenNV not available." );
}

GLboolean REGAL_CALL missing_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(startSegment);
  UNUSED_PARAMETER(numSegments);
  UNUSED_PARAMETER(distance);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(tangentX);
  UNUSED_PARAMETER(tangentY);
  Warning( "glPointAlongPathNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(fillMode);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(transformValues);
  Warning( "glStencilFillPathInstancedNV not available." );
}

void REGAL_CALL missing_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(fillMode);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilFillPathNV not available." );
}

void REGAL_CALL missing_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(pathNameType);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(pathBase);
  UNUSED_PARAMETER(reference);
  UNUSED_PARAMETER(mask);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(transformValues);
  Warning( "glStencilStrokePathInstancedNV not available." );
}

void REGAL_CALL missing_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
  UNUSED_PARAMETER(path);
  UNUSED_PARAMETER(reference);
  UNUSED_PARAMETER(mask);
  Warning( "glStencilStrokePathNV not available." );
}

void REGAL_CALL missing_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  UNUSED_PARAMETER(resultPath);
  UNUSED_PARAMETER(srcPath);
  UNUSED_PARAMETER(transformType);
  UNUSED_PARAMETER(transformValues);
  Warning( "glTransformPathNV not available." );
}

void REGAL_CALL missing_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  UNUSED_PARAMETER(resultPath);
  UNUSED_PARAMETER(numPaths);
  UNUSED_PARAMETER(paths);
  UNUSED_PARAMETER(weights);
  Warning( "glWeightPathsNV not available." );
}

// GL_NV_pixel_data_range

void REGAL_CALL missing_glFlushPixelDataRangeNV(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glFlushPixelDataRangeNV not available." );
}

void REGAL_CALL missing_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(pointer);
  Warning( "glPixelDataRangeNV not available." );
}

// GL_NV_point_sprite

void REGAL_CALL missing_glPointParameteriNV(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameteriNV not available." );
}

void REGAL_CALL missing_glPointParameterivNV(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameterivNV not available." );
}

// GL_NV_present_video

void REGAL_CALL missing_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoi64vNV not available." );
}

void REGAL_CALL missing_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoivNV not available." );
}

void REGAL_CALL missing_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoui64vNV not available." );
}

void REGAL_CALL missing_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideouivNV not available." );
}

void REGAL_CALL missing_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(minPresentTime);
  UNUSED_PARAMETER(beginPresentTimeId);
  UNUSED_PARAMETER(presentDurationId);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(target0);
  UNUSED_PARAMETER(fill0);
  UNUSED_PARAMETER(target1);
  UNUSED_PARAMETER(fill1);
  UNUSED_PARAMETER(target2);
  UNUSED_PARAMETER(fill2);
  UNUSED_PARAMETER(target3);
  UNUSED_PARAMETER(fill3);
  Warning( "glPresentFrameDualFillNV not available." );
}

void REGAL_CALL missing_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  UNUSED_PARAMETER(video_slot);
  UNUSED_PARAMETER(minPresentTime);
  UNUSED_PARAMETER(beginPresentTimeId);
  UNUSED_PARAMETER(presentDurationId);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(target0);
  UNUSED_PARAMETER(fill0);
  UNUSED_PARAMETER(key0);
  UNUSED_PARAMETER(target1);
  UNUSED_PARAMETER(fill1);
  UNUSED_PARAMETER(key1);
  Warning( "glPresentFrameKeyedNV not available." );
}

// GL_NV_primitive_restart

void REGAL_CALL missing_glPrimitiveRestartIndexNV(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glPrimitiveRestartIndexNV not available." );
}

void REGAL_CALL missing_glPrimitiveRestartNV(void)
{
  Warning( "glPrimitiveRestartNV not available." );
}

// GL_NV_read_buffer

void REGAL_CALL missing_glReadBufferNV(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glReadBufferNV not available." );
}

// GL_NV_register_combiners

void REGAL_CALL missing_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(input);
  UNUSED_PARAMETER(mapping);
  UNUSED_PARAMETER(componentUsage);
  Warning( "glCombinerInputNV not available." );
}

void REGAL_CALL missing_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(abOutput);
  UNUSED_PARAMETER(cdOutput);
  UNUSED_PARAMETER(sumOutput);
  UNUSED_PARAMETER(scale);
  UNUSED_PARAMETER(bias);
  UNUSED_PARAMETER(abDotProduct);
  UNUSED_PARAMETER(cdDotProduct);
  UNUSED_PARAMETER(muxSum);
  Warning( "glCombinerOutputNV not available." );
}

void REGAL_CALL missing_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glCombinerParameterfNV not available." );
}

void REGAL_CALL missing_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glCombinerParameterfvNV not available." );
}

void REGAL_CALL missing_glCombinerParameteriNV(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glCombinerParameteriNV not available." );
}

void REGAL_CALL missing_glCombinerParameterivNV(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glCombinerParameterivNV not available." );
}

void REGAL_CALL missing_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(input);
  UNUSED_PARAMETER(mapping);
  UNUSED_PARAMETER(componentUsage);
  Warning( "glFinalCombinerInputNV not available." );
}

void REGAL_CALL missing_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetCombinerInputParameterfvNV not available." );
}

void REGAL_CALL missing_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetCombinerInputParameterivNV not available." );
}

void REGAL_CALL missing_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetCombinerOutputParameterfvNV not available." );
}

void REGAL_CALL missing_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(portion);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetCombinerOutputParameterivNV not available." );
}

void REGAL_CALL missing_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFinalCombinerInputParameterfvNV not available." );
}

void REGAL_CALL missing_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(variable);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFinalCombinerInputParameterivNV not available." );
}

// GL_NV_register_combiners2

void REGAL_CALL missing_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glCombinerStageParameterfvNV not available." );
}

void REGAL_CALL missing_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(stage);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetCombinerStageParameterfvNV not available." );
}

// GL_NV_shader_buffer_load

void REGAL_CALL missing_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferParameterui64vNV not available." );
}

void REGAL_CALL missing_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(data);
  Warning( "glGetIntegerui64vNV not available." );
}

void REGAL_CALL missing_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetNamedBufferParameterui64vNV not available." );
}

void REGAL_CALL missing_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(params);
  Warning( "glGetUniformui64vNV not available." );
}

GLboolean REGAL_CALL missing_glIsBufferResidentNV(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glIsBufferResidentNV not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsNamedBufferResidentNV(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glIsNamedBufferResidentNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glMakeBufferNonResidentNV(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glMakeBufferNonResidentNV not available." );
}

void REGAL_CALL missing_glMakeBufferResidentNV(GLenum target, GLenum access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(access);
  Warning( "glMakeBufferResidentNV not available." );
}

void REGAL_CALL missing_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
  UNUSED_PARAMETER(buffer);
  Warning( "glMakeNamedBufferNonResidentNV not available." );
}

void REGAL_CALL missing_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(access);
  Warning( "glMakeNamedBufferResidentNV not available." );
}

void REGAL_CALL missing_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glProgramUniformui64NV not available." );
}

void REGAL_CALL missing_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glProgramUniformui64vNV not available." );
}

void REGAL_CALL missing_glUniformui64NV(GLint location, GLuint64EXT v0)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(v0);
  Warning( "glUniformui64NV not available." );
}

void REGAL_CALL missing_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  UNUSED_PARAMETER(location);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(value);
  Warning( "glUniformui64vNV not available." );
}

// GL_NV_texture_barrier

void REGAL_CALL missing_glTextureBarrierNV(void)
{
  Warning( "glTextureBarrierNV not available." );
}

// GL_NV_texture_multisample

void REGAL_CALL missing_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTexImage2DMultisampleCoverageNV not available." );
}

void REGAL_CALL missing_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTexImage3DMultisampleCoverageNV not available." );
}

void REGAL_CALL missing_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTextureImage2DMultisampleCoverageNV not available." );
}

void REGAL_CALL missing_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTextureImage2DMultisampleNV not available." );
}

void REGAL_CALL missing_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(coverageSamples);
  UNUSED_PARAMETER(colorSamples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTextureImage3DMultisampleCoverageNV not available." );
}

void REGAL_CALL missing_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(samples);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(fixedSampleLocations);
  Warning( "glTextureImage3DMultisampleNV not available." );
}

// GL_NV_transform_feedback

void REGAL_CALL missing_glActiveVaryingNV(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glActiveVaryingNV not available." );
}

void REGAL_CALL missing_glBeginTransformFeedbackNV(GLenum primitiveMode)
{
  UNUSED_PARAMETER(primitiveMode);
  Warning( "glBeginTransformFeedbackNV not available." );
}

void REGAL_CALL missing_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  Warning( "glBindBufferBaseNV not available." );
}

void REGAL_CALL missing_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  Warning( "glBindBufferOffsetNV not available." );
}

void REGAL_CALL missing_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(buffer);
  UNUSED_PARAMETER(offset);
  UNUSED_PARAMETER(size);
  Warning( "glBindBufferRangeNV not available." );
}

void REGAL_CALL missing_glEndTransformFeedbackNV(void)
{
  Warning( "glEndTransformFeedbackNV not available." );
}

void REGAL_CALL missing_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(name);
  Warning( "glGetActiveVaryingNV not available." );
}

void REGAL_CALL missing_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(location);
  Warning( "glGetTransformFeedbackVaryingNV not available." );
}

GLint REGAL_CALL missing_glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(name);
  Warning( "glGetVaryingLocationNV not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(attribs);
  UNUSED_PARAMETER(bufferMode);
  Warning( "glTransformFeedbackAttribsNV not available." );
}

void REGAL_CALL missing_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(locations);
  UNUSED_PARAMETER(bufferMode);
  Warning( "glTransformFeedbackVaryingsNV not available." );
}

// GL_NV_transform_feedback2

void REGAL_CALL missing_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBindTransformFeedbackNV not available." );
}

void REGAL_CALL missing_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glDeleteTransformFeedbacksNV not available." );
}

void REGAL_CALL missing_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(name);
  Warning( "glDrawTransformFeedbackNV not available." );
}

void REGAL_CALL missing_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(ids);
  Warning( "glGenTransformFeedbacksNV not available." );
}

GLboolean REGAL_CALL missing_glIsTransformFeedbackNV(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsTransformFeedbackNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glPauseTransformFeedbackNV(void)
{
  Warning( "glPauseTransformFeedbackNV not available." );
}

void REGAL_CALL missing_glResumeTransformFeedbackNV(void)
{
  Warning( "glResumeTransformFeedbackNV not available." );
}

// GL_NV_vdpau_interop

void REGAL_CALL missing_glVDPAUFiniNV(void)
{
  Warning( "glVDPAUFiniNV not available." );
}

void REGAL_CALL missing_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  UNUSED_PARAMETER(surface);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(values);
  Warning( "glVDPAUGetSurfaceivNV not available." );
}

void REGAL_CALL missing_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
  UNUSED_PARAMETER(vdpDevice);
  UNUSED_PARAMETER(getProcAddress);
  Warning( "glVDPAUInitNV not available." );
}

GLboolean REGAL_CALL missing_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
  UNUSED_PARAMETER(surface);
  Warning( "glVDPAUIsSurfaceNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  UNUSED_PARAMETER(numSurfaces);
  UNUSED_PARAMETER(surfaces);
  Warning( "glVDPAUMapSurfacesNV not available." );
}

GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  UNUSED_PARAMETER(vdpSurface);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(numTextureNames);
  UNUSED_PARAMETER(textureNames);
  Warning( "glVDPAURegisterOutputSurfaceNV not available." );
  return (GLvdpauSurfaceNV )0;
}

GLvdpauSurfaceNV REGAL_CALL missing_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  UNUSED_PARAMETER(vdpSurface);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(numTextureNames);
  UNUSED_PARAMETER(textureNames);
  Warning( "glVDPAURegisterVideoSurfaceNV not available." );
  return (GLvdpauSurfaceNV )0;
}

void REGAL_CALL missing_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
  UNUSED_PARAMETER(surface);
  UNUSED_PARAMETER(access);
  Warning( "glVDPAUSurfaceAccessNV not available." );
}

void REGAL_CALL missing_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  UNUSED_PARAMETER(numSurfaces);
  UNUSED_PARAMETER(surfaces);
  Warning( "glVDPAUUnmapSurfacesNV not available." );
}

void REGAL_CALL missing_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
  UNUSED_PARAMETER(surface);
  Warning( "glVDPAUUnregisterSurfaceNV not available." );
}

// GL_NV_vertex_array_range

void REGAL_CALL missing_glFlushVertexArrayRangeNV(void)
{
  Warning( "glFlushVertexArrayRangeNV not available." );
}

void REGAL_CALL missing_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexArrayRangeNV not available." );
}

// GL_NV_vertex_attrib_integer_64bit

void REGAL_CALL missing_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribLi64vNV not available." );
}

void REGAL_CALL missing_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribLui64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribL1i64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL1i64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttribL1ui64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL1ui64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribL2i64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL2i64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttribL2ui64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL2ui64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribL3i64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL3i64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttribL3ui64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL3ui64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribL4i64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL4i64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttribL4ui64NV not available." );
}

void REGAL_CALL missing_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribL4ui64vNV not available." );
}

void REGAL_CALL missing_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glVertexAttribLFormatNV not available." );
}

// GL_NV_vertex_buffer_unified_memory

void REGAL_CALL missing_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(address);
  UNUSED_PARAMETER(length);
  Warning( "glBufferAddressRangeNV not available." );
}

void REGAL_CALL missing_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glColorFormatNV not available." );
}

void REGAL_CALL missing_glEdgeFlagFormatNV(GLsizei stride)
{
  UNUSED_PARAMETER(stride);
  Warning( "glEdgeFlagFormatNV not available." );
}

void REGAL_CALL missing_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glFogCoordFormatNV not available." );
}

void REGAL_CALL missing_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(data);
  Warning( "glGetIntegerui64i_vNV not available." );
}

void REGAL_CALL missing_glIndexFormatNV(GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glIndexFormatNV not available." );
}

void REGAL_CALL missing_glNormalFormatNV(GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glNormalFormatNV not available." );
}

void REGAL_CALL missing_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glSecondaryColorFormatNV not available." );
}

void REGAL_CALL missing_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glTexCoordFormatNV not available." );
}

void REGAL_CALL missing_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(normalized);
  UNUSED_PARAMETER(stride);
  Warning( "glVertexAttribFormatNV not available." );
}

void REGAL_CALL missing_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glVertexAttribIFormatNV not available." );
}

void REGAL_CALL missing_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  Warning( "glVertexFormatNV not available." );
}

// GL_NV_vertex_program

GLboolean REGAL_CALL missing_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  UNUSED_PARAMETER(residences);
  Warning( "glAreProgramsResidentNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glBindProgramNV(GLenum target, GLuint id)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  Warning( "glBindProgramNV not available." );
}

void REGAL_CALL missing_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  Warning( "glDeleteProgramsNV not available." );
}

void REGAL_CALL missing_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(params);
  Warning( "glExecuteProgramNV not available." );
}

void REGAL_CALL missing_glGenProgramsNV(GLsizei n, GLuint *programs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  Warning( "glGenProgramsNV not available." );
}

void REGAL_CALL missing_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramParameterdvNV not available." );
}

void REGAL_CALL missing_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramParameterfvNV not available." );
}

void REGAL_CALL missing_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(program);
  Warning( "glGetProgramStringNV not available." );
}

void REGAL_CALL missing_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetProgramivNV not available." );
}

void REGAL_CALL missing_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(address);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTrackMatrixivNV not available." );
}

void REGAL_CALL missing_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(pointer);
  Warning( "glGetVertexAttribPointervNV not available." );
}

void REGAL_CALL missing_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribdvNV not available." );
}

void REGAL_CALL missing_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribfvNV not available." );
}

void REGAL_CALL missing_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVertexAttribivNV not available." );
}

GLboolean REGAL_CALL missing_glIsProgramNV(GLuint id)
{
  UNUSED_PARAMETER(id);
  Warning( "glIsProgramNV not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(id);
  UNUSED_PARAMETER(len);
  UNUSED_PARAMETER(program);
  Warning( "glLoadProgramNV not available." );
}

void REGAL_CALL missing_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramParameter4dNV not available." );
}

void REGAL_CALL missing_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glProgramParameter4dvNV not available." );
}

void REGAL_CALL missing_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glProgramParameter4fNV not available." );
}

void REGAL_CALL missing_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glProgramParameter4fvNV not available." );
}

void REGAL_CALL missing_glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glProgramParameters4dvNV not available." );
}

void REGAL_CALL missing_glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat *v)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(v);
  Warning( "glProgramParameters4fvNV not available." );
}

void REGAL_CALL missing_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(programs);
  Warning( "glRequestResidentProgramsNV not available." );
}

void REGAL_CALL missing_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(address);
  UNUSED_PARAMETER(matrix);
  UNUSED_PARAMETER(transform);
  Warning( "glTrackMatrixNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1dNV(GLuint index, GLdouble x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1dNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1dvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1fNV(GLuint index, GLfloat x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1fNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1fvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1sNV(GLuint index, GLshort x)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  Warning( "glVertexAttrib1sNV not available." );
}

void REGAL_CALL missing_glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib1svNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2dNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2dvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2fNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2fvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glVertexAttrib2sNV not available." );
}

void REGAL_CALL missing_glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib2svNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3dNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3dvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3fNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3fvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glVertexAttrib3sNV not available." );
}

void REGAL_CALL missing_glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib3svNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4dNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4dvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4fNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4fvNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4sNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4svNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glVertexAttrib4ubNV not available." );
}

void REGAL_CALL missing_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttrib4ubvNV not available." );
}

void REGAL_CALL missing_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(fsize);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glVertexAttribPointerNV not available." );
}

void REGAL_CALL missing_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs1dvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs1fvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs1svNV not available." );
}

void REGAL_CALL missing_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs2dvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs2fvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs2svNV not available." );
}

void REGAL_CALL missing_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs3dvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs3fvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs3svNV not available." );
}

void REGAL_CALL missing_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs4dvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs4fvNV not available." );
}

void REGAL_CALL missing_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs4svNV not available." );
}

void REGAL_CALL missing_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
  UNUSED_PARAMETER(index);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glVertexAttribs4ubvNV not available." );
}

// GL_NV_video_capture

void REGAL_CALL missing_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
  UNUSED_PARAMETER(video_capture_slot);
  Warning( "glBeginVideoCaptureNV not available." );
}

void REGAL_CALL missing_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(frame_region);
  UNUSED_PARAMETER(offset);
  Warning( "glBindVideoCaptureStreamBufferNV not available." );
}

void REGAL_CALL missing_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(frame_region);
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(texture);
  Warning( "glBindVideoCaptureStreamTextureNV not available." );
}

void REGAL_CALL missing_glEndVideoCaptureNV(GLuint video_capture_slot)
{
  UNUSED_PARAMETER(video_capture_slot);
  Warning( "glEndVideoCaptureNV not available." );
}

void REGAL_CALL missing_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoCaptureStreamdvNV not available." );
}

void REGAL_CALL missing_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoCaptureStreamfvNV not available." );
}

void REGAL_CALL missing_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoCaptureStreamivNV not available." );
}

void REGAL_CALL missing_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetVideoCaptureivNV not available." );
}

GLenum REGAL_CALL missing_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(sequence_num);
  UNUSED_PARAMETER(capture_time);
  Warning( "glVideoCaptureNV not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glVideoCaptureStreamParameterdvNV not available." );
}

void REGAL_CALL missing_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glVideoCaptureStreamParameterfvNV not available." );
}

void REGAL_CALL missing_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(video_capture_slot);
  UNUSED_PARAMETER(stream);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glVideoCaptureStreamParameterivNV not available." );
}

// GL_OES_blend_equation_separate

void REGAL_CALL missing_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
{
  UNUSED_PARAMETER(modeRGB);
  UNUSED_PARAMETER(modeAlpha);
  Warning( "glBlendEquationSeparateOES not available." );
}

// GL_OES_blend_func_separate

void REGAL_CALL missing_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  UNUSED_PARAMETER(sfactorRGB);
  UNUSED_PARAMETER(dfactorRGB);
  UNUSED_PARAMETER(sfactorAlpha);
  UNUSED_PARAMETER(dfactorAlpha);
  Warning( "glBlendFuncSeparateOES not available." );
}

// GL_OES_blend_subtract

void REGAL_CALL missing_glBlendEquationOES(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glBlendEquationOES not available." );
}

// GL_OES_framebuffer_object

void REGAL_CALL missing_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(framebuffer);
  Warning( "glBindFramebufferOES not available." );
}

void REGAL_CALL missing_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glBindRenderbufferOES not available." );
}

GLenum REGAL_CALL missing_glCheckFramebufferStatusOES(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glCheckFramebufferStatusOES not available." );
  return (GLenum )0;
}

void REGAL_CALL missing_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glDeleteFramebuffersOES not available." );
}

void REGAL_CALL missing_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glDeleteRenderbuffersOES not available." );
}

void REGAL_CALL missing_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(renderbuffertarget);
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glFramebufferRenderbufferOES not available." );
}

void REGAL_CALL missing_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  Warning( "glFramebufferTexture2DOES not available." );
}

void REGAL_CALL missing_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(framebuffers);
  Warning( "glGenFramebuffersOES not available." );
}

void REGAL_CALL missing_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(renderbuffers);
  Warning( "glGenRenderbuffersOES not available." );
}

void REGAL_CALL missing_glGenerateMipmapOES(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glGenerateMipmapOES not available." );
}

void REGAL_CALL missing_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFramebufferAttachmentParameterivOES not available." );
}

void REGAL_CALL missing_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetRenderbufferParameterivOES not available." );
}

GLboolean REGAL_CALL missing_glIsFramebufferOES(GLuint framebuffer)
{
  UNUSED_PARAMETER(framebuffer);
  Warning( "glIsFramebufferOES not available." );
  return (GLboolean )0;
}

GLboolean REGAL_CALL missing_glIsRenderbufferOES(GLuint renderbuffer)
{
  UNUSED_PARAMETER(renderbuffer);
  Warning( "glIsRenderbufferOES not available." );
  return (GLboolean )0;
}

void REGAL_CALL missing_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glRenderbufferStorageOES not available." );
}

// GL_OES_get_program_binary

void REGAL_CALL missing_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(binaryFormat);
  UNUSED_PARAMETER(binary);
  Warning( "glGetProgramBinaryOES not available." );
}

void REGAL_CALL missing_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(binaryFormat);
  UNUSED_PARAMETER(binary);
  UNUSED_PARAMETER(length);
  Warning( "glProgramBinaryOES not available." );
}

// GL_OES_mapbuffer

void REGAL_CALL missing_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetBufferPointervOES not available." );
}

GLvoid *REGAL_CALL missing_glMapBufferOES(GLenum target, GLenum access)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(access);
  Warning( "glMapBufferOES not available." );
  return NULL;
}

GLboolean REGAL_CALL missing_glUnmapBufferOES(GLenum target)
{
  UNUSED_PARAMETER(target);
  Warning( "glUnmapBufferOES not available." );
  return (GLboolean )0;
}

// GL_OES_matrix_palette

void REGAL_CALL missing_glCurrentPaletteMatrixOES(GLuint index)
{
  UNUSED_PARAMETER(index);
  Warning( "glCurrentPaletteMatrixOES not available." );
}

void REGAL_CALL missing_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glMatrixIndexPointerOES not available." );
}

void REGAL_CALL missing_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glWeightPointerOES not available." );
}

// GL_OES_single_precision

void REGAL_CALL missing_glClearDepthfOES(GLclampd depth)
{
  UNUSED_PARAMETER(depth);
  Warning( "glClearDepthfOES not available." );
}

void REGAL_CALL missing_glClipPlanefOES(GLenum plane, const GLfloat *equation)
{
  UNUSED_PARAMETER(plane);
  UNUSED_PARAMETER(equation);
  Warning( "glClipPlanefOES not available." );
}

void REGAL_CALL missing_glDepthRangefOES(GLclampf n, GLclampf f)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(f);
  Warning( "glDepthRangefOES not available." );
}

void REGAL_CALL missing_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  UNUSED_PARAMETER(l);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(f);
  Warning( "glFrustumfOES not available." );
}

void REGAL_CALL missing_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
{
  UNUSED_PARAMETER(plane);
  UNUSED_PARAMETER(equation);
  Warning( "glGetClipPlanefOES not available." );
}

void REGAL_CALL missing_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  UNUSED_PARAMETER(l);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(f);
  Warning( "glOrthofOES not available." );
}

// GL_OES_texture_3D

void REGAL_CALL missing_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexImage3DOES not available." );
}

void REGAL_CALL missing_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(imageSize);
  UNUSED_PARAMETER(data);
  Warning( "glCompressedTexSubImage3DOES not available." );
}

void REGAL_CALL missing_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glCopyTexSubImage3DOES not available." );
}

void REGAL_CALL missing_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(attachment);
  UNUSED_PARAMETER(textarget);
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(zoffset);
  Warning( "glFramebufferTexture3DOES not available." );
}

void REGAL_CALL missing_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalFormat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage3DOES not available." );
}

void REGAL_CALL missing_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage3DOES not available." );
}

// GL_OES_texture_cube_map

void REGAL_CALL missing_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGenfvOES not available." );
}

void REGAL_CALL missing_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGenivOES not available." );
}

void REGAL_CALL missing_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetTexGenxvOES not available." );
}

void REGAL_CALL missing_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGenfOES not available." );
}

void REGAL_CALL missing_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGenfvOES not available." );
}

void REGAL_CALL missing_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGeniOES not available." );
}

void REGAL_CALL missing_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGenivOES not available." );
}

void REGAL_CALL missing_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glTexGenxOES not available." );
}

void REGAL_CALL missing_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
  UNUSED_PARAMETER(coord);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glTexGenxvOES not available." );
}

// GL_OES_vertex_array_object

void REGAL_CALL missing_glBindVertexArrayOES(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glBindVertexArrayOES not available." );
}

void REGAL_CALL missing_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glDeleteVertexArraysOES not available." );
}

void REGAL_CALL missing_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(arrays);
  Warning( "glGenVertexArraysOES not available." );
}

GLboolean REGAL_CALL missing_glIsVertexArrayOES(GLuint array)
{
  UNUSED_PARAMETER(array);
  Warning( "glIsVertexArrayOES not available." );
  return (GLboolean )0;
}

// GL_PGI_misc_hints

void REGAL_CALL missing_glHintPGI(GLenum target, GLint mode)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(mode);
  Warning( "glHintPGI not available." );
}

// GL_QCOM_alpha_test

void REGAL_CALL missing_glAlphaFuncQCOM(GLenum func, GLclampf ref)
{
  UNUSED_PARAMETER(func);
  UNUSED_PARAMETER(ref);
  Warning( "glAlphaFuncQCOM not available." );
}

// GL_QCOM_driver_control

void REGAL_CALL missing_glDisableDriverControlQCOM(GLuint driverControl)
{
  UNUSED_PARAMETER(driverControl);
  Warning( "glDisableDriverControlQCOM not available." );
}

void REGAL_CALL missing_glEnableDriverControlQCOM(GLuint driverControl)
{
  UNUSED_PARAMETER(driverControl);
  Warning( "glEnableDriverControlQCOM not available." );
}

void REGAL_CALL missing_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
  UNUSED_PARAMETER(driverControl);
  UNUSED_PARAMETER(bufSize);
  UNUSED_PARAMETER(length);
  UNUSED_PARAMETER(driverControlString);
  Warning( "glGetDriverControlStringQCOM not available." );
}

void REGAL_CALL missing_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
{
  UNUSED_PARAMETER(num);
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(driverControls);
  Warning( "glGetDriverControlsQCOM not available." );
}

// GL_QCOM_extended_get

void REGAL_CALL missing_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(params);
  Warning( "glExtGetBufferPointervQCOM not available." );
}

void REGAL_CALL missing_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
  UNUSED_PARAMETER(buffers);
  UNUSED_PARAMETER(maxBuffers);
  UNUSED_PARAMETER(numBuffers);
  Warning( "glExtGetBuffersQCOM not available." );
}

void REGAL_CALL missing_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
  UNUSED_PARAMETER(framebuffers);
  UNUSED_PARAMETER(maxFramebuffers);
  UNUSED_PARAMETER(numFramebuffers);
  Warning( "glExtGetFramebuffersQCOM not available." );
}

void REGAL_CALL missing_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
  UNUSED_PARAMETER(renderbuffers);
  UNUSED_PARAMETER(maxRenderbuffers);
  UNUSED_PARAMETER(numRenderbuffers);
  Warning( "glExtGetRenderbuffersQCOM not available." );
}

void REGAL_CALL missing_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(texture);
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glExtGetTexLevelParameterivQCOM not available." );
}

void REGAL_CALL missing_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(texels);
  Warning( "glExtGetTexSubImageQCOM not available." );
}

void REGAL_CALL missing_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
{
  UNUSED_PARAMETER(textures);
  UNUSED_PARAMETER(maxTextures);
  UNUSED_PARAMETER(numTextures);
  Warning( "glExtGetTexturesQCOM not available." );
}

void REGAL_CALL missing_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glExtTexObjectStateOverrideiQCOM not available." );
}

// GL_QCOM_extended_get2

void REGAL_CALL missing_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
  UNUSED_PARAMETER(program);
  UNUSED_PARAMETER(shadertype);
  UNUSED_PARAMETER(source);
  UNUSED_PARAMETER(length);
  Warning( "glExtGetProgramBinarySourceQCOM not available." );
}

void REGAL_CALL missing_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
  UNUSED_PARAMETER(programs);
  UNUSED_PARAMETER(maxPrograms);
  UNUSED_PARAMETER(numPrograms);
  Warning( "glExtGetProgramsQCOM not available." );
}

void REGAL_CALL missing_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
  UNUSED_PARAMETER(shaders);
  UNUSED_PARAMETER(maxShaders);
  UNUSED_PARAMETER(numShaders);
  Warning( "glExtGetShadersQCOM not available." );
}

GLboolean REGAL_CALL missing_glExtIsProgramBinaryQCOM(GLuint program)
{
  UNUSED_PARAMETER(program);
  Warning( "glExtIsProgramBinaryQCOM not available." );
  return (GLboolean )0;
}

// GL_QCOM_tiled_rendering

void REGAL_CALL missing_glEndTilingQCOM(GLbitfield preserveMask)
{
  UNUSED_PARAMETER(preserveMask);
  Warning( "glEndTilingQCOM not available." );
}

void REGAL_CALL missing_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(preserveMask);
  Warning( "glStartTilingQCOM not available." );
}

// GL_REGAL_ES1_1_compatibility

void REGAL_CALL missing_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glPointSizePointerOES not available." );
}

// GL_REGAL_log

void REGAL_CALL missing_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
{
  UNUSED_PARAMETER(callback);
  Warning( "glLogMessageCallbackREGAL not available." );
}

// GL_SGIS_detail_texture

void REGAL_CALL missing_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(points);
  Warning( "glDetailTexFuncSGIS not available." );
}

void REGAL_CALL missing_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(points);
  Warning( "glGetDetailTexFuncSGIS not available." );
}

// GL_SGIS_fog_function

void REGAL_CALL missing_glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(points);
  Warning( "glFogFuncSGIS not available." );
}

void REGAL_CALL missing_glGetFogFuncSGIS(GLfloat *points)
{
  UNUSED_PARAMETER(points);
  Warning( "glGetFogFuncSGIS not available." );
}

// GL_SGIS_multisample

void REGAL_CALL missing_glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
  UNUSED_PARAMETER(value);
  UNUSED_PARAMETER(invert);
  Warning( "glSampleMaskSGIS not available." );
}

void REGAL_CALL missing_glSamplePatternSGIS(GLenum pattern)
{
  UNUSED_PARAMETER(pattern);
  Warning( "glSamplePatternSGIS not available." );
}

// GL_SGIS_pixel_texture

void REGAL_CALL missing_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPixelTexGenParameterfvSGIS not available." );
}

void REGAL_CALL missing_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetPixelTexGenParameterivSGIS not available." );
}

void REGAL_CALL missing_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTexGenParameterfSGIS not available." );
}

void REGAL_CALL missing_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPixelTexGenParameterfvSGIS not available." );
}

void REGAL_CALL missing_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPixelTexGenParameteriSGIS not available." );
}

void REGAL_CALL missing_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPixelTexGenParameterivSGIS not available." );
}

// GL_SGIS_point_parameters

void REGAL_CALL missing_glPointParameterfSGIS(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glPointParameterfSGIS not available." );
}

void REGAL_CALL missing_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glPointParameterfvSGIS not available." );
}

// GL_SGIS_sharpen_texture

void REGAL_CALL missing_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(points);
  Warning( "glGetSharpenTexFuncSGIS not available." );
}

void REGAL_CALL missing_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(points);
  Warning( "glSharpenTexFuncSGIS not available." );
}

// GL_SGIS_texture4D

void REGAL_CALL missing_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(size4d);
  UNUSED_PARAMETER(border);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexImage4DSGIS not available." );
}

void REGAL_CALL missing_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(level);
  UNUSED_PARAMETER(xoffset);
  UNUSED_PARAMETER(yoffset);
  UNUSED_PARAMETER(zoffset);
  UNUSED_PARAMETER(woffset);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(depth);
  UNUSED_PARAMETER(size4d);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glTexSubImage4DSGIS not available." );
}

// GL_SGIS_texture_color_mask

void REGAL_CALL missing_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  UNUSED_PARAMETER(red);
  UNUSED_PARAMETER(green);
  UNUSED_PARAMETER(blue);
  UNUSED_PARAMETER(alpha);
  Warning( "glTextureColorMaskSGIS not available." );
}

// GL_SGIS_texture_filter4

void REGAL_CALL missing_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(filter);
  UNUSED_PARAMETER(weights);
  Warning( "glGetTexFilterFuncSGIS not available." );
}

void REGAL_CALL missing_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(filter);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(weights);
  Warning( "glTexFilterFuncSGIS not available." );
}

// GL_SGIX_async

void REGAL_CALL missing_glAsyncMarkerSGIX(GLuint marker)
{
  UNUSED_PARAMETER(marker);
  Warning( "glAsyncMarkerSGIX not available." );
}

void REGAL_CALL missing_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
  UNUSED_PARAMETER(marker);
  UNUSED_PARAMETER(range);
  Warning( "glDeleteAsyncMarkersSGIX not available." );
}

GLint REGAL_CALL missing_glFinishAsyncSGIX(GLuint *markerp)
{
  UNUSED_PARAMETER(markerp);
  Warning( "glFinishAsyncSGIX not available." );
  return (GLint )0;
}

GLuint REGAL_CALL missing_glGenAsyncMarkersSGIX(GLsizei range)
{
  UNUSED_PARAMETER(range);
  Warning( "glGenAsyncMarkersSGIX not available." );
  return (GLuint )0;
}

GLboolean REGAL_CALL missing_glIsAsyncMarkerSGIX(GLuint marker)
{
  UNUSED_PARAMETER(marker);
  Warning( "glIsAsyncMarkerSGIX not available." );
  return (GLboolean )0;
}

GLint REGAL_CALL missing_glPollAsyncSGIX(GLuint *markerp)
{
  UNUSED_PARAMETER(markerp);
  Warning( "glPollAsyncSGIX not available." );
  return (GLint )0;
}

// GL_SGIX_flush_raster

void REGAL_CALL missing_glFlushRasterSGIX(void)
{
  Warning( "glFlushRasterSGIX not available." );
}

// GL_SGIX_fog_texture

void REGAL_CALL missing_glTextureFogSGIX(GLenum pname)
{
  UNUSED_PARAMETER(pname);
  Warning( "glTextureFogSGIX not available." );
}

// GL_SGIX_fragment_lighting

void REGAL_CALL missing_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(mode);
  Warning( "glFragmentColorMaterialSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightModelfSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightModelfvSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightModeliSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightModelivSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightfSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightfvSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentLightiSGIX not available." );
}

void REGAL_CALL missing_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentLightivSGIX not available." );
}

void REGAL_CALL missing_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentMaterialfSGIX not available." );
}

void REGAL_CALL missing_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentMaterialfvSGIX not available." );
}

void REGAL_CALL missing_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glFragmentMaterialiSGIX not available." );
}

void REGAL_CALL missing_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glFragmentMaterialivSGIX not available." );
}

void REGAL_CALL missing_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentLightfvSGIX not available." );
}

void REGAL_CALL missing_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(light);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentLightivSGIX not available." );
}

void REGAL_CALL missing_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentMaterialfvSGIX not available." );
}

void REGAL_CALL missing_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(face);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetFragmentMaterialivSGIX not available." );
}

void REGAL_CALL missing_glLightEnviSGIX(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glLightEnviSGIX not available." );
}

// GL_SGIX_framezoom

void REGAL_CALL missing_glFrameZoomSGIX(GLint factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glFrameZoomSGIX not available." );
}

// GL_SGIX_igloo_interface

void REGAL_CALL missing_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glIglooInterfaceSGIX not available." );
}

// GL_SGIX_instruments

GLint REGAL_CALL missing_glGetInstrumentsSGIX(void)
{
  Warning( "glGetInstrumentsSGIX not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
  UNUSED_PARAMETER(size);
  UNUSED_PARAMETER(buffer);
  Warning( "glInstrumentsBufferSGIX not available." );
}

GLint REGAL_CALL missing_glPollInstrumentsSGIX(GLint *marker_p)
{
  UNUSED_PARAMETER(marker_p);
  Warning( "glPollInstrumentsSGIX not available." );
  return (GLint )0;
}

void REGAL_CALL missing_glReadInstrumentsSGIX(GLint marker)
{
  UNUSED_PARAMETER(marker);
  Warning( "glReadInstrumentsSGIX not available." );
}

void REGAL_CALL missing_glStartInstrumentsSGIX(void)
{
  Warning( "glStartInstrumentsSGIX not available." );
}

void REGAL_CALL missing_glStopInstrumentsSGIX(GLint marker)
{
  UNUSED_PARAMETER(marker);
  Warning( "glStopInstrumentsSGIX not available." );
}

// GL_SGIX_list_priority

void REGAL_CALL missing_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetListParameterfvSGIX not available." );
}

void REGAL_CALL missing_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetListParameterivSGIX not available." );
}

void REGAL_CALL missing_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glListParameterfSGIX not available." );
}

void REGAL_CALL missing_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glListParameterfvSGIX not available." );
}

void REGAL_CALL missing_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glListParameteriSGIX not available." );
}

void REGAL_CALL missing_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(list);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glListParameterivSGIX not available." );
}

// GL_SGIX_pixel_texture

void REGAL_CALL missing_glPixelTexGenSGIX(GLenum mode)
{
  UNUSED_PARAMETER(mode);
  Warning( "glPixelTexGenSGIX not available." );
}

// GL_SGIX_polynomial_ffd

void REGAL_CALL missing_glDeformSGIX(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glDeformSGIX not available." );
}

void REGAL_CALL missing_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(w1);
  UNUSED_PARAMETER(w2);
  UNUSED_PARAMETER(wstride);
  UNUSED_PARAMETER(worder);
  UNUSED_PARAMETER(points);
  Warning( "glDeformationMap3dSGIX not available." );
}

void REGAL_CALL missing_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(u1);
  UNUSED_PARAMETER(u2);
  UNUSED_PARAMETER(ustride);
  UNUSED_PARAMETER(uorder);
  UNUSED_PARAMETER(v1);
  UNUSED_PARAMETER(v2);
  UNUSED_PARAMETER(vstride);
  UNUSED_PARAMETER(vorder);
  UNUSED_PARAMETER(w1);
  UNUSED_PARAMETER(w2);
  UNUSED_PARAMETER(wstride);
  UNUSED_PARAMETER(worder);
  UNUSED_PARAMETER(points);
  Warning( "glDeformationMap3fSGIX not available." );
}

void REGAL_CALL missing_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
  UNUSED_PARAMETER(mask);
  Warning( "glLoadIdentityDeformationMapSGIX not available." );
}

// GL_SGIX_reference_plane

void REGAL_CALL missing_glReferencePlaneSGIX(const GLdouble *equation)
{
  UNUSED_PARAMETER(equation);
  Warning( "glReferencePlaneSGIX not available." );
}

// GL_SGIX_sprite

void REGAL_CALL missing_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glSpriteParameterfSGIX not available." );
}

void REGAL_CALL missing_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSpriteParameterfvSGIX not available." );
}

void REGAL_CALL missing_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(param);
  Warning( "glSpriteParameteriSGIX not available." );
}

void REGAL_CALL missing_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glSpriteParameterivSGIX not available." );
}

// GL_SGIX_tag_sample_buffer

void REGAL_CALL missing_glTagSampleBufferSGIX(void)
{
  Warning( "glTagSampleBufferSGIX not available." );
}

// GL_SGI_color_table

void REGAL_CALL missing_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glColorTableParameterfvSGI not available." );
}

void REGAL_CALL missing_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glColorTableParameterivSGI not available." );
}

void REGAL_CALL missing_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glColorTableSGI not available." );
}

void REGAL_CALL missing_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(internalformat);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  Warning( "glCopyColorTableSGI not available." );
}

void REGAL_CALL missing_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameterfvSGI not available." );
}

void REGAL_CALL missing_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(pname);
  UNUSED_PARAMETER(params);
  Warning( "glGetColorTableParameterivSGI not available." );
}

void REGAL_CALL missing_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  UNUSED_PARAMETER(target);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(table);
  Warning( "glGetColorTableSGI not available." );
}

// GL_SUNX_constant_data

void REGAL_CALL missing_glFinishTextureSUNX(void)
{
  Warning( "glFinishTextureSUNX not available." );
}

// GL_SUN_global_alpha

void REGAL_CALL missing_glGlobalAlphaFactorbSUN(GLbyte factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactorbSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactordSUN(GLdouble factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactordSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactorfSUN(GLfloat factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactorfSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactoriSUN(GLint factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactoriSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactorsSUN(GLshort factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactorsSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactorubSUN(GLubyte factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactorubSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactoruiSUN(GLuint factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactoruiSUN not available." );
}

void REGAL_CALL missing_glGlobalAlphaFactorusSUN(GLushort factor)
{
  UNUSED_PARAMETER(factor);
  Warning( "glGlobalAlphaFactorusSUN not available." );
}

// GL_SUN_mesh_array

void REGAL_CALL missing_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  UNUSED_PARAMETER(mode);
  UNUSED_PARAMETER(first);
  UNUSED_PARAMETER(count);
  UNUSED_PARAMETER(width);
  Warning( "glDrawMeshArraysSUN not available." );
}

// GL_SUN_read_video_pixels

void REGAL_CALL missing_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  UNUSED_PARAMETER(format);
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(pixels);
  Warning( "glReadVideoPixelsSUN not available." );
}

// GL_SUN_triangle_list

void REGAL_CALL missing_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
  UNUSED_PARAMETER(type);
  UNUSED_PARAMETER(stride);
  UNUSED_PARAMETER(pointer);
  Warning( "glReplacementCodePointerSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeubSUN(GLubyte code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeubSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeubvSUN(const GLubyte *code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeubvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiSUN(GLuint code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeuiSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuivSUN(const GLuint *code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeuivSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeusSUN(GLushort code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeusSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeusvSUN(const GLushort *code)
{
  UNUSED_PARAMETER(code);
  Warning( "glReplacementCodeusvSUN not available." );
}

// GL_SUN_vertex

void REGAL_CALL missing_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glColor3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glColor3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glColor4fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glColor4fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  Warning( "glColor4ubVertex2fSUN not available." );
}

void REGAL_CALL missing_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glColor4ubVertex2fvSUN not available." );
}

void REGAL_CALL missing_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glColor4ubVertex3fSUN not available." );
}

void REGAL_CALL missing_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glColor4ubVertex3fvSUN not available." );
}

void REGAL_CALL missing_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiColor3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiColor3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiColor4fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiColor4fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiColor4ubVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiColor4ubVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiTexCoord2fVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiTexCoord2fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glReplacementCodeuiVertex3fSUN not available." );
}

void REGAL_CALL missing_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
  UNUSED_PARAMETER(rc);
  UNUSED_PARAMETER(v);
  Warning( "glReplacementCodeuiVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTexCoord2fColor3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fColor3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTexCoord2fColor4fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fColor4fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTexCoord2fColor4ubVertex3fSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fColor4ubVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTexCoord2fNormal3fVertex3fSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fNormal3fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  Warning( "glTexCoord2fVertex3fSUN not available." );
}

void REGAL_CALL missing_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord2fVertex3fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(p);
  UNUSED_PARAMETER(q);
  UNUSED_PARAMETER(r);
  UNUSED_PARAMETER(g);
  UNUSED_PARAMETER(b);
  UNUSED_PARAMETER(a);
  UNUSED_PARAMETER(nx);
  UNUSED_PARAMETER(ny);
  UNUSED_PARAMETER(nz);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glTexCoord4fColor4fNormal3fVertex4fSUN not available." );
}

void REGAL_CALL missing_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(c);
  UNUSED_PARAMETER(n);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4fColor4fNormal3fVertex4fvSUN not available." );
}

void REGAL_CALL missing_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  UNUSED_PARAMETER(s);
  UNUSED_PARAMETER(t);
  UNUSED_PARAMETER(p);
  UNUSED_PARAMETER(q);
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(z);
  UNUSED_PARAMETER(w);
  Warning( "glTexCoord4fVertex4fSUN not available." );
}

void REGAL_CALL missing_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
  UNUSED_PARAMETER(tc);
  UNUSED_PARAMETER(v);
  Warning( "glTexCoord4fVertex4fvSUN not available." );
}

// GL_WIN_swap_hint

void REGAL_CALL missing_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
  UNUSED_PARAMETER(x);
  UNUSED_PARAMETER(y);
  UNUSED_PARAMETER(width);
  UNUSED_PARAMETER(height);
  Warning( "glAddSwapHintRectWIN not available." );
}

void InitDispatchTableMissing(DispatchTable &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = missing_glAccum;
  tbl.glAlphaFunc = missing_glAlphaFunc;
  tbl.glBegin = missing_glBegin;
  tbl.glBitmap = missing_glBitmap;
  tbl.glBlendFunc = missing_glBlendFunc;
  tbl.glCallList = missing_glCallList;
  tbl.glCallLists = missing_glCallLists;
  tbl.glClear = missing_glClear;
  tbl.glClearAccum = missing_glClearAccum;
  tbl.glClearColor = missing_glClearColor;
  tbl.glClearDepth = missing_glClearDepth;
  tbl.glClearIndex = missing_glClearIndex;
  tbl.glClearStencil = missing_glClearStencil;
  tbl.glClipPlane = missing_glClipPlane;
  tbl.glColor3b = missing_glColor3b;
  tbl.glColor3bv = missing_glColor3bv;
  tbl.glColor3d = missing_glColor3d;
  tbl.glColor3dv = missing_glColor3dv;
  tbl.glColor3f = missing_glColor3f;
  tbl.glColor3fv = missing_glColor3fv;
  tbl.glColor3i = missing_glColor3i;
  tbl.glColor3iv = missing_glColor3iv;
  tbl.glColor3s = missing_glColor3s;
  tbl.glColor3sv = missing_glColor3sv;
  tbl.glColor3ub = missing_glColor3ub;
  tbl.glColor3ubv = missing_glColor3ubv;
  tbl.glColor3ui = missing_glColor3ui;
  tbl.glColor3uiv = missing_glColor3uiv;
  tbl.glColor3us = missing_glColor3us;
  tbl.glColor3usv = missing_glColor3usv;
  tbl.glColor4b = missing_glColor4b;
  tbl.glColor4bv = missing_glColor4bv;
  tbl.glColor4d = missing_glColor4d;
  tbl.glColor4dv = missing_glColor4dv;
  tbl.glColor4f = missing_glColor4f;
  tbl.glColor4fv = missing_glColor4fv;
  tbl.glColor4i = missing_glColor4i;
  tbl.glColor4iv = missing_glColor4iv;
  tbl.glColor4s = missing_glColor4s;
  tbl.glColor4sv = missing_glColor4sv;
  tbl.glColor4ub = missing_glColor4ub;
  tbl.glColor4ubv = missing_glColor4ubv;
  tbl.glColor4ui = missing_glColor4ui;
  tbl.glColor4uiv = missing_glColor4uiv;
  tbl.glColor4us = missing_glColor4us;
  tbl.glColor4usv = missing_glColor4usv;
  tbl.glColorMask = missing_glColorMask;
  tbl.glColorMaterial = missing_glColorMaterial;
  tbl.glCopyPixels = missing_glCopyPixels;
  tbl.glCullFace = missing_glCullFace;
  tbl.glDeleteLists = missing_glDeleteLists;
  tbl.glDepthFunc = missing_glDepthFunc;
  tbl.glDepthMask = missing_glDepthMask;
  tbl.glDepthRange = missing_glDepthRange;
  tbl.glDisable = missing_glDisable;
  tbl.glDrawBuffer = missing_glDrawBuffer;
  tbl.glDrawPixels = missing_glDrawPixels;
  tbl.glEdgeFlag = missing_glEdgeFlag;
  tbl.glEdgeFlagv = missing_glEdgeFlagv;
  tbl.glEnable = missing_glEnable;
  tbl.glEnd = missing_glEnd;
  tbl.glEndList = missing_glEndList;
  tbl.glEvalCoord1d = missing_glEvalCoord1d;
  tbl.glEvalCoord1dv = missing_glEvalCoord1dv;
  tbl.glEvalCoord1f = missing_glEvalCoord1f;
  tbl.glEvalCoord1fv = missing_glEvalCoord1fv;
  tbl.glEvalCoord2d = missing_glEvalCoord2d;
  tbl.glEvalCoord2dv = missing_glEvalCoord2dv;
  tbl.glEvalCoord2f = missing_glEvalCoord2f;
  tbl.glEvalCoord2fv = missing_glEvalCoord2fv;
  tbl.glEvalMesh1 = missing_glEvalMesh1;
  tbl.glEvalMesh2 = missing_glEvalMesh2;
  tbl.glEvalPoint1 = missing_glEvalPoint1;
  tbl.glEvalPoint2 = missing_glEvalPoint2;
  tbl.glFeedbackBuffer = missing_glFeedbackBuffer;
  tbl.glFinish = missing_glFinish;
  tbl.glFlush = missing_glFlush;
  tbl.glFogf = missing_glFogf;
  tbl.glFogfv = missing_glFogfv;
  tbl.glFogi = missing_glFogi;
  tbl.glFogiv = missing_glFogiv;
  tbl.glFrontFace = missing_glFrontFace;
  tbl.glFrustum = missing_glFrustum;
  tbl.glGenLists = missing_glGenLists;
  tbl.glGetBooleanv = missing_glGetBooleanv;
  tbl.glGetClipPlane = missing_glGetClipPlane;
  tbl.glGetDoublev = missing_glGetDoublev;
  tbl.glGetError = missing_glGetError;
  tbl.glGetFloatv = missing_glGetFloatv;
  tbl.glGetIntegerv = missing_glGetIntegerv;
  tbl.glGetLightfv = missing_glGetLightfv;
  tbl.glGetLightiv = missing_glGetLightiv;
  tbl.glGetMapdv = missing_glGetMapdv;
  tbl.glGetMapfv = missing_glGetMapfv;
  tbl.glGetMapiv = missing_glGetMapiv;
  tbl.glGetMaterialfv = missing_glGetMaterialfv;
  tbl.glGetMaterialiv = missing_glGetMaterialiv;
  tbl.glGetPixelMapfv = missing_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = missing_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = missing_glGetPixelMapusv;
  tbl.glGetPolygonStipple = missing_glGetPolygonStipple;
  tbl.glGetString = missing_glGetString;
  tbl.glGetTexEnvfv = missing_glGetTexEnvfv;
  tbl.glGetTexEnviv = missing_glGetTexEnviv;
  tbl.glGetTexGendv = missing_glGetTexGendv;
  tbl.glGetTexGenfv = missing_glGetTexGenfv;
  tbl.glGetTexGeniv = missing_glGetTexGeniv;
  tbl.glGetTexImage = missing_glGetTexImage;
  tbl.glGetTexLevelParameterfv = missing_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = missing_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = missing_glGetTexParameterfv;
  tbl.glGetTexParameteriv = missing_glGetTexParameteriv;
  tbl.glHint = missing_glHint;
  tbl.glIndexMask = missing_glIndexMask;
  tbl.glIndexd = missing_glIndexd;
  tbl.glIndexdv = missing_glIndexdv;
  tbl.glIndexf = missing_glIndexf;
  tbl.glIndexfv = missing_glIndexfv;
  tbl.glIndexi = missing_glIndexi;
  tbl.glIndexiv = missing_glIndexiv;
  tbl.glIndexs = missing_glIndexs;
  tbl.glIndexsv = missing_glIndexsv;
  tbl.glInitNames = missing_glInitNames;
  tbl.glIsEnabled = missing_glIsEnabled;
  tbl.glIsList = missing_glIsList;
  tbl.glLightModelf = missing_glLightModelf;
  tbl.glLightModelfv = missing_glLightModelfv;
  tbl.glLightModeli = missing_glLightModeli;
  tbl.glLightModeliv = missing_glLightModeliv;
  tbl.glLightf = missing_glLightf;
  tbl.glLightfv = missing_glLightfv;
  tbl.glLighti = missing_glLighti;
  tbl.glLightiv = missing_glLightiv;
  tbl.glLineStipple = missing_glLineStipple;
  tbl.glLineWidth = missing_glLineWidth;
  tbl.glListBase = missing_glListBase;
  tbl.glLoadIdentity = missing_glLoadIdentity;
  tbl.glLoadMatrixd = missing_glLoadMatrixd;
  tbl.glLoadMatrixf = missing_glLoadMatrixf;
  tbl.glLoadName = missing_glLoadName;
  tbl.glLogicOp = missing_glLogicOp;
  tbl.glMap1d = missing_glMap1d;
  tbl.glMap1f = missing_glMap1f;
  tbl.glMap2d = missing_glMap2d;
  tbl.glMap2f = missing_glMap2f;
  tbl.glMapGrid1d = missing_glMapGrid1d;
  tbl.glMapGrid1f = missing_glMapGrid1f;
  tbl.glMapGrid2d = missing_glMapGrid2d;
  tbl.glMapGrid2f = missing_glMapGrid2f;
  tbl.glMaterialf = missing_glMaterialf;
  tbl.glMaterialfv = missing_glMaterialfv;
  tbl.glMateriali = missing_glMateriali;
  tbl.glMaterialiv = missing_glMaterialiv;
  tbl.glMatrixMode = missing_glMatrixMode;
  tbl.glMultMatrixd = missing_glMultMatrixd;
  tbl.glMultMatrixf = missing_glMultMatrixf;
  tbl.glNewList = missing_glNewList;
  tbl.glNormal3b = missing_glNormal3b;
  tbl.glNormal3bv = missing_glNormal3bv;
  tbl.glNormal3d = missing_glNormal3d;
  tbl.glNormal3dv = missing_glNormal3dv;
  tbl.glNormal3f = missing_glNormal3f;
  tbl.glNormal3fv = missing_glNormal3fv;
  tbl.glNormal3i = missing_glNormal3i;
  tbl.glNormal3iv = missing_glNormal3iv;
  tbl.glNormal3s = missing_glNormal3s;
  tbl.glNormal3sv = missing_glNormal3sv;
  tbl.glOrtho = missing_glOrtho;
  tbl.glPassThrough = missing_glPassThrough;
  tbl.glPixelMapfv = missing_glPixelMapfv;
  tbl.glPixelMapuiv = missing_glPixelMapuiv;
  tbl.glPixelMapusv = missing_glPixelMapusv;
  tbl.glPixelStoref = missing_glPixelStoref;
  tbl.glPixelStorei = missing_glPixelStorei;
  tbl.glPixelTransferf = missing_glPixelTransferf;
  tbl.glPixelTransferi = missing_glPixelTransferi;
  tbl.glPixelZoom = missing_glPixelZoom;
  tbl.glPointSize = missing_glPointSize;
  tbl.glPolygonMode = missing_glPolygonMode;
  tbl.glPolygonStipple = missing_glPolygonStipple;
  tbl.glPopAttrib = missing_glPopAttrib;
  tbl.glPopMatrix = missing_glPopMatrix;
  tbl.glPopName = missing_glPopName;
  tbl.glPushAttrib = missing_glPushAttrib;
  tbl.glPushMatrix = missing_glPushMatrix;
  tbl.glPushName = missing_glPushName;
  tbl.glRasterPos2d = missing_glRasterPos2d;
  tbl.glRasterPos2dv = missing_glRasterPos2dv;
  tbl.glRasterPos2f = missing_glRasterPos2f;
  tbl.glRasterPos2fv = missing_glRasterPos2fv;
  tbl.glRasterPos2i = missing_glRasterPos2i;
  tbl.glRasterPos2iv = missing_glRasterPos2iv;
  tbl.glRasterPos2s = missing_glRasterPos2s;
  tbl.glRasterPos2sv = missing_glRasterPos2sv;
  tbl.glRasterPos3d = missing_glRasterPos3d;
  tbl.glRasterPos3dv = missing_glRasterPos3dv;
  tbl.glRasterPos3f = missing_glRasterPos3f;
  tbl.glRasterPos3fv = missing_glRasterPos3fv;
  tbl.glRasterPos3i = missing_glRasterPos3i;
  tbl.glRasterPos3iv = missing_glRasterPos3iv;
  tbl.glRasterPos3s = missing_glRasterPos3s;
  tbl.glRasterPos3sv = missing_glRasterPos3sv;
  tbl.glRasterPos4d = missing_glRasterPos4d;
  tbl.glRasterPos4dv = missing_glRasterPos4dv;
  tbl.glRasterPos4f = missing_glRasterPos4f;
  tbl.glRasterPos4fv = missing_glRasterPos4fv;
  tbl.glRasterPos4i = missing_glRasterPos4i;
  tbl.glRasterPos4iv = missing_glRasterPos4iv;
  tbl.glRasterPos4s = missing_glRasterPos4s;
  tbl.glRasterPos4sv = missing_glRasterPos4sv;
  tbl.glReadBuffer = missing_glReadBuffer;
  tbl.glReadPixels = missing_glReadPixels;
  tbl.glRectd = missing_glRectd;
  tbl.glRectdv = missing_glRectdv;
  tbl.glRectf = missing_glRectf;
  tbl.glRectfv = missing_glRectfv;
  tbl.glRecti = missing_glRecti;
  tbl.glRectiv = missing_glRectiv;
  tbl.glRects = missing_glRects;
  tbl.glRectsv = missing_glRectsv;
  tbl.glRenderMode = missing_glRenderMode;
  tbl.glRotated = missing_glRotated;
  tbl.glRotatef = missing_glRotatef;
  tbl.glScaled = missing_glScaled;
  tbl.glScalef = missing_glScalef;
  tbl.glScissor = missing_glScissor;
  tbl.glSelectBuffer = missing_glSelectBuffer;
  tbl.glShadeModel = missing_glShadeModel;
  tbl.glStencilFunc = missing_glStencilFunc;
  tbl.glStencilMask = missing_glStencilMask;
  tbl.glStencilOp = missing_glStencilOp;
  tbl.glTexCoord1d = missing_glTexCoord1d;
  tbl.glTexCoord1dv = missing_glTexCoord1dv;
  tbl.glTexCoord1f = missing_glTexCoord1f;
  tbl.glTexCoord1fv = missing_glTexCoord1fv;
  tbl.glTexCoord1i = missing_glTexCoord1i;
  tbl.glTexCoord1iv = missing_glTexCoord1iv;
  tbl.glTexCoord1s = missing_glTexCoord1s;
  tbl.glTexCoord1sv = missing_glTexCoord1sv;
  tbl.glTexCoord2d = missing_glTexCoord2d;
  tbl.glTexCoord2dv = missing_glTexCoord2dv;
  tbl.glTexCoord2f = missing_glTexCoord2f;
  tbl.glTexCoord2fv = missing_glTexCoord2fv;
  tbl.glTexCoord2i = missing_glTexCoord2i;
  tbl.glTexCoord2iv = missing_glTexCoord2iv;
  tbl.glTexCoord2s = missing_glTexCoord2s;
  tbl.glTexCoord2sv = missing_glTexCoord2sv;
  tbl.glTexCoord3d = missing_glTexCoord3d;
  tbl.glTexCoord3dv = missing_glTexCoord3dv;
  tbl.glTexCoord3f = missing_glTexCoord3f;
  tbl.glTexCoord3fv = missing_glTexCoord3fv;
  tbl.glTexCoord3i = missing_glTexCoord3i;
  tbl.glTexCoord3iv = missing_glTexCoord3iv;
  tbl.glTexCoord3s = missing_glTexCoord3s;
  tbl.glTexCoord3sv = missing_glTexCoord3sv;
  tbl.glTexCoord4d = missing_glTexCoord4d;
  tbl.glTexCoord4dv = missing_glTexCoord4dv;
  tbl.glTexCoord4f = missing_glTexCoord4f;
  tbl.glTexCoord4fv = missing_glTexCoord4fv;
  tbl.glTexCoord4i = missing_glTexCoord4i;
  tbl.glTexCoord4iv = missing_glTexCoord4iv;
  tbl.glTexCoord4s = missing_glTexCoord4s;
  tbl.glTexCoord4sv = missing_glTexCoord4sv;
  tbl.glTexEnvf = missing_glTexEnvf;
  tbl.glTexEnvfv = missing_glTexEnvfv;
  tbl.glTexEnvi = missing_glTexEnvi;
  tbl.glTexEnviv = missing_glTexEnviv;
  tbl.glTexGend = missing_glTexGend;
  tbl.glTexGendv = missing_glTexGendv;
  tbl.glTexGenf = missing_glTexGenf;
  tbl.glTexGenfv = missing_glTexGenfv;
  tbl.glTexGeni = missing_glTexGeni;
  tbl.glTexGeniv = missing_glTexGeniv;
  tbl.glTexImage1D = missing_glTexImage1D;
  tbl.glTexImage2D = missing_glTexImage2D;
  tbl.glTexParameterf = missing_glTexParameterf;
  tbl.glTexParameterfv = missing_glTexParameterfv;
  tbl.glTexParameteri = missing_glTexParameteri;
  tbl.glTexParameteriv = missing_glTexParameteriv;
  tbl.glTranslated = missing_glTranslated;
  tbl.glTranslatef = missing_glTranslatef;
  tbl.glVertex2d = missing_glVertex2d;
  tbl.glVertex2dv = missing_glVertex2dv;
  tbl.glVertex2f = missing_glVertex2f;
  tbl.glVertex2fv = missing_glVertex2fv;
  tbl.glVertex2i = missing_glVertex2i;
  tbl.glVertex2iv = missing_glVertex2iv;
  tbl.glVertex2s = missing_glVertex2s;
  tbl.glVertex2sv = missing_glVertex2sv;
  tbl.glVertex3d = missing_glVertex3d;
  tbl.glVertex3dv = missing_glVertex3dv;
  tbl.glVertex3f = missing_glVertex3f;
  tbl.glVertex3fv = missing_glVertex3fv;
  tbl.glVertex3i = missing_glVertex3i;
  tbl.glVertex3iv = missing_glVertex3iv;
  tbl.glVertex3s = missing_glVertex3s;
  tbl.glVertex3sv = missing_glVertex3sv;
  tbl.glVertex4d = missing_glVertex4d;
  tbl.glVertex4dv = missing_glVertex4dv;
  tbl.glVertex4f = missing_glVertex4f;
  tbl.glVertex4fv = missing_glVertex4fv;
  tbl.glVertex4i = missing_glVertex4i;
  tbl.glVertex4iv = missing_glVertex4iv;
  tbl.glVertex4s = missing_glVertex4s;
  tbl.glVertex4sv = missing_glVertex4sv;
  tbl.glViewport = missing_glViewport;

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = missing_glAreTexturesResident;
  tbl.glArrayElement = missing_glArrayElement;
  tbl.glBindTexture = missing_glBindTexture;
  tbl.glColorPointer = missing_glColorPointer;
  tbl.glCopyTexImage1D = missing_glCopyTexImage1D;
  tbl.glCopyTexImage2D = missing_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = missing_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = missing_glCopyTexSubImage2D;
  tbl.glDeleteTextures = missing_glDeleteTextures;
  tbl.glDisableClientState = missing_glDisableClientState;
  tbl.glDrawArrays = missing_glDrawArrays;
  tbl.glDrawElements = missing_glDrawElements;
  tbl.glEdgeFlagPointer = missing_glEdgeFlagPointer;
  tbl.glEnableClientState = missing_glEnableClientState;
  tbl.glGenTextures = missing_glGenTextures;
  tbl.glGetPointerv = missing_glGetPointerv;
  tbl.glIndexPointer = missing_glIndexPointer;
  tbl.glIndexub = missing_glIndexub;
  tbl.glIndexubv = missing_glIndexubv;
  tbl.glInterleavedArrays = missing_glInterleavedArrays;
  tbl.glIsTexture = missing_glIsTexture;
  tbl.glNormalPointer = missing_glNormalPointer;
  tbl.glPolygonOffset = missing_glPolygonOffset;
  tbl.glPopClientAttrib = missing_glPopClientAttrib;
  tbl.glPrioritizeTextures = missing_glPrioritizeTextures;
  tbl.glPushClientAttrib = missing_glPushClientAttrib;
  tbl.glTexCoordPointer = missing_glTexCoordPointer;
  tbl.glTexSubImage1D = missing_glTexSubImage1D;
  tbl.glTexSubImage2D = missing_glTexSubImage2D;
  tbl.glVertexPointer = missing_glVertexPointer;

  // GL_VERSION_1_2

  tbl.glBlendColor = missing_glBlendColor;
  tbl.glBlendEquation = missing_glBlendEquation;
  tbl.glCopyTexSubImage3D = missing_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = missing_glDrawRangeElements;
  tbl.glTexImage3D = missing_glTexImage3D;
  tbl.glTexSubImage3D = missing_glTexSubImage3D;

  // GL_VERSION_1_3

  tbl.glActiveTexture = missing_glActiveTexture;
  tbl.glClientActiveTexture = missing_glClientActiveTexture;
  tbl.glCompressedTexImage1D = missing_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = missing_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = missing_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = missing_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = missing_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = missing_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = missing_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = missing_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = missing_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = missing_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = missing_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = missing_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = missing_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = missing_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = missing_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = missing_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = missing_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = missing_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = missing_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = missing_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = missing_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = missing_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = missing_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = missing_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = missing_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = missing_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = missing_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = missing_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = missing_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = missing_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = missing_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = missing_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = missing_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = missing_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = missing_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = missing_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = missing_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = missing_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = missing_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = missing_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = missing_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = missing_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = missing_glMultiTexCoord4sv;
  tbl.glSampleCoverage = missing_glSampleCoverage;

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = missing_glBlendFuncSeparate;
  tbl.glFogCoordPointer = missing_glFogCoordPointer;
  tbl.glFogCoordd = missing_glFogCoordd;
  tbl.glFogCoorddv = missing_glFogCoorddv;
  tbl.glFogCoordf = missing_glFogCoordf;
  tbl.glFogCoordfv = missing_glFogCoordfv;
  tbl.glMultiDrawArrays = missing_glMultiDrawArrays;
  tbl.glMultiDrawElements = missing_glMultiDrawElements;
  tbl.glPointParameterf = missing_glPointParameterf;
  tbl.glPointParameterfv = missing_glPointParameterfv;
  tbl.glPointParameteri = missing_glPointParameteri;
  tbl.glPointParameteriv = missing_glPointParameteriv;
  tbl.glSecondaryColor3b = missing_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = missing_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = missing_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = missing_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = missing_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = missing_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = missing_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = missing_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = missing_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = missing_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = missing_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = missing_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = missing_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = missing_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = missing_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = missing_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = missing_glSecondaryColorPointer;
  tbl.glWindowPos2d = missing_glWindowPos2d;
  tbl.glWindowPos2dv = missing_glWindowPos2dv;
  tbl.glWindowPos2f = missing_glWindowPos2f;
  tbl.glWindowPos2fv = missing_glWindowPos2fv;
  tbl.glWindowPos2i = missing_glWindowPos2i;
  tbl.glWindowPos2iv = missing_glWindowPos2iv;
  tbl.glWindowPos2s = missing_glWindowPos2s;
  tbl.glWindowPos2sv = missing_glWindowPos2sv;
  tbl.glWindowPos3d = missing_glWindowPos3d;
  tbl.glWindowPos3dv = missing_glWindowPos3dv;
  tbl.glWindowPos3f = missing_glWindowPos3f;
  tbl.glWindowPos3fv = missing_glWindowPos3fv;
  tbl.glWindowPos3i = missing_glWindowPos3i;
  tbl.glWindowPos3iv = missing_glWindowPos3iv;
  tbl.glWindowPos3s = missing_glWindowPos3s;
  tbl.glWindowPos3sv = missing_glWindowPos3sv;

  // GL_VERSION_1_5

  tbl.glBeginQuery = missing_glBeginQuery;
  tbl.glBindBuffer = missing_glBindBuffer;
  tbl.glBufferData = missing_glBufferData;
  tbl.glBufferSubData = missing_glBufferSubData;
  tbl.glDeleteBuffers = missing_glDeleteBuffers;
  tbl.glDeleteQueries = missing_glDeleteQueries;
  tbl.glEndQuery = missing_glEndQuery;
  tbl.glGenBuffers = missing_glGenBuffers;
  tbl.glGenQueries = missing_glGenQueries;
  tbl.glGetBufferParameteriv = missing_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = missing_glGetBufferPointerv;
  tbl.glGetBufferSubData = missing_glGetBufferSubData;
  tbl.glGetQueryObjectiv = missing_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = missing_glGetQueryObjectuiv;
  tbl.glGetQueryiv = missing_glGetQueryiv;
  tbl.glIsBuffer = missing_glIsBuffer;
  tbl.glIsQuery = missing_glIsQuery;
  tbl.glMapBuffer = missing_glMapBuffer;
  tbl.glUnmapBuffer = missing_glUnmapBuffer;

  // GL_VERSION_2_0

  tbl.glAttachShader = missing_glAttachShader;
  tbl.glBindAttribLocation = missing_glBindAttribLocation;
  tbl.glBlendEquationSeparate = missing_glBlendEquationSeparate;
  tbl.glCompileShader = missing_glCompileShader;
  tbl.glCreateProgram = missing_glCreateProgram;
  tbl.glCreateShader = missing_glCreateShader;
  tbl.glDeleteProgram = missing_glDeleteProgram;
  tbl.glDeleteShader = missing_glDeleteShader;
  tbl.glDetachShader = missing_glDetachShader;
  tbl.glDisableVertexAttribArray = missing_glDisableVertexAttribArray;
  tbl.glDrawBuffers = missing_glDrawBuffers;
  tbl.glEnableVertexAttribArray = missing_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = missing_glGetActiveAttrib;
  tbl.glGetActiveUniform = missing_glGetActiveUniform;
  tbl.glGetAttachedShaders = missing_glGetAttachedShaders;
  tbl.glGetAttribLocation = missing_glGetAttribLocation;
  tbl.glGetProgramInfoLog = missing_glGetProgramInfoLog;
  tbl.glGetProgramiv = missing_glGetProgramiv;
  tbl.glGetShaderInfoLog = missing_glGetShaderInfoLog;
  tbl.glGetShaderSource = missing_glGetShaderSource;
  tbl.glGetShaderiv = missing_glGetShaderiv;
  tbl.glGetUniformLocation = missing_glGetUniformLocation;
  tbl.glGetUniformfv = missing_glGetUniformfv;
  tbl.glGetUniformiv = missing_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = missing_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = missing_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = missing_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = missing_glGetVertexAttribiv;
  tbl.glIsProgram = missing_glIsProgram;
  tbl.glIsShader = missing_glIsShader;
  tbl.glLinkProgram = missing_glLinkProgram;
  tbl.glShaderSource = missing_glShaderSource;
  tbl.glStencilFuncSeparate = missing_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = missing_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = missing_glStencilOpSeparate;
  tbl.glUniform1f = missing_glUniform1f;
  tbl.glUniform1fv = missing_glUniform1fv;
  tbl.glUniform1i = missing_glUniform1i;
  tbl.glUniform1iv = missing_glUniform1iv;
  tbl.glUniform2f = missing_glUniform2f;
  tbl.glUniform2fv = missing_glUniform2fv;
  tbl.glUniform2i = missing_glUniform2i;
  tbl.glUniform2iv = missing_glUniform2iv;
  tbl.glUniform3f = missing_glUniform3f;
  tbl.glUniform3fv = missing_glUniform3fv;
  tbl.glUniform3i = missing_glUniform3i;
  tbl.glUniform3iv = missing_glUniform3iv;
  tbl.glUniform4f = missing_glUniform4f;
  tbl.glUniform4fv = missing_glUniform4fv;
  tbl.glUniform4i = missing_glUniform4i;
  tbl.glUniform4iv = missing_glUniform4iv;
  tbl.glUniformMatrix2fv = missing_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = missing_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = missing_glUniformMatrix4fv;
  tbl.glUseProgram = missing_glUseProgram;
  tbl.glValidateProgram = missing_glValidateProgram;
  tbl.glVertexAttrib1d = missing_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = missing_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = missing_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = missing_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = missing_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = missing_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = missing_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = missing_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = missing_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = missing_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = missing_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = missing_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = missing_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = missing_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = missing_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = missing_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = missing_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = missing_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = missing_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = missing_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = missing_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = missing_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = missing_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = missing_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = missing_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = missing_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = missing_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = missing_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = missing_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = missing_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = missing_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = missing_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = missing_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = missing_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = missing_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = missing_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = missing_glVertexAttribPointer;

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = missing_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = missing_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = missing_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = missing_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = missing_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = missing_glUniformMatrix4x3fv;

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = missing_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = missing_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = missing_glBindFragDataLocation;
  tbl.glClampColor = missing_glClampColor;
  tbl.glClearBufferfi = missing_glClearBufferfi;
  tbl.glClearBufferfv = missing_glClearBufferfv;
  tbl.glClearBufferiv = missing_glClearBufferiv;
  tbl.glClearBufferuiv = missing_glClearBufferuiv;
  tbl.glColorMaski = missing_glColorMaski;
  tbl.glDisablei = missing_glDisablei;
  tbl.glEnablei = missing_glEnablei;
  tbl.glEndConditionalRender = missing_glEndConditionalRender;
  tbl.glEndTransformFeedback = missing_glEndTransformFeedback;
  tbl.glGetBooleani_v = missing_glGetBooleani_v;
  tbl.glGetFragDataLocation = missing_glGetFragDataLocation;
  tbl.glGetStringi = missing_glGetStringi;
  tbl.glGetTexParameterIiv = missing_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = missing_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = missing_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = missing_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = missing_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = missing_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = missing_glIsEnabledi;
  tbl.glTexParameterIiv = missing_glTexParameterIiv;
  tbl.glTexParameterIuiv = missing_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = missing_glTransformFeedbackVaryings;
  tbl.glUniform1ui = missing_glUniform1ui;
  tbl.glUniform1uiv = missing_glUniform1uiv;
  tbl.glUniform2ui = missing_glUniform2ui;
  tbl.glUniform2uiv = missing_glUniform2uiv;
  tbl.glUniform3ui = missing_glUniform3ui;
  tbl.glUniform3uiv = missing_glUniform3uiv;
  tbl.glUniform4ui = missing_glUniform4ui;
  tbl.glUniform4uiv = missing_glUniform4uiv;
  tbl.glVertexAttribI1i = missing_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = missing_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = missing_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = missing_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = missing_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = missing_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = missing_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = missing_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = missing_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = missing_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = missing_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = missing_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = missing_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = missing_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = missing_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = missing_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = missing_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = missing_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = missing_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = missing_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = missing_glVertexAttribIPointer;

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = missing_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = missing_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = missing_glPrimitiveRestartIndex;
  tbl.glTexBuffer = missing_glTexBuffer;

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = missing_glFramebufferTexture;
  tbl.glFramebufferTextureFace = missing_glFramebufferTextureFace;
  tbl.glGetBufferParameteri64v = missing_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = missing_glGetInteger64i_v;

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = missing_glVertexAttribDivisor;

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = missing_glBlendEquationSeparatei;
  tbl.glBlendEquationi = missing_glBlendEquationi;
  tbl.glBlendFuncSeparatei = missing_glBlendFuncSeparatei;
  tbl.glBlendFunci = missing_glBlendFunci;

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = missing_glTbufferMask3DFX;

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = missing_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = missing_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = missing_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = missing_glGetDebugMessageLogAMD;

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = missing_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = missing_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = missing_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = missing_glBlendFuncSeparateIndexedAMD;

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = missing_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = missing_glMultiDrawElementsIndirectAMD;

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = missing_glDeleteNamesAMD;
  tbl.glGenNamesAMD = missing_glGenNamesAMD;
  tbl.glIsNameAMD = missing_glIsNameAMD;

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = missing_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = missing_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = missing_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = missing_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = missing_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = missing_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = missing_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = missing_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = missing_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = missing_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = missing_glSelectPerfMonitorCountersAMD;

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = missing_glSetMultisamplefvAMD;

  // GL_AMD_stencil_operation_extended

  tbl.glStencilOpValueAMD = missing_glStencilOpValueAMD;

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = missing_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = missing_glTessellationModeAMD;

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = missing_glBlitFramebufferANGLE;

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = missing_glRenderbufferStorageMultisampleANGLE;

  // GL_ANGLE_instanced_arrays

  tbl.glDrawArraysInstancedANGLE = missing_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = missing_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = missing_glVertexAttribDivisorANGLE;

  // GL_ANGLE_translated_shader_source

  tbl.glGetTranslatedShaderSourceANGLE = missing_glGetTranslatedShaderSourceANGLE;

  // GL_APPLE_copy_texture_levels

  tbl.glCopyTextureLevelsAPPLE = missing_glCopyTextureLevelsAPPLE;

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = missing_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = missing_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = missing_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = missing_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = missing_glMultiDrawRangeElementArrayAPPLE;

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = missing_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = missing_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = missing_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = missing_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = missing_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = missing_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = missing_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = missing_glTestObjectAPPLE;

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = missing_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = missing_glFlushMappedBufferRangeAPPLE;

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = missing_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = missing_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = missing_glSwapAPPLE;

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = missing_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = missing_glResolveMultisampleFramebufferAPPLE;

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = missing_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = missing_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = missing_glObjectUnpurgeableAPPLE;

  // GL_APPLE_sync

  tbl.glClientWaitSyncAPPLE = missing_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = missing_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = missing_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = missing_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = missing_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = missing_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = missing_glWaitSyncAPPLE;

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = missing_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = missing_glTextureRangeAPPLE;

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = missing_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = missing_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = missing_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = missing_glIsVertexArrayAPPLE;

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = missing_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = missing_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = missing_glVertexArrayRangeAPPLE;

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = missing_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = missing_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = missing_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = missing_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = missing_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = missing_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = missing_glMapVertexAttrib2fAPPLE;

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = missing_glClearDepthf;
  tbl.glDepthRangef = missing_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = missing_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = missing_glReleaseShaderCompiler;
  tbl.glShaderBinary = missing_glShaderBinary;

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = missing_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = missing_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = missing_glDrawElementsInstancedBaseVertexBaseInstance;

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = missing_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = missing_glGetFragDataIndex;

  // GL_ARB_cl_event

  tbl.glCreateSyncFromCLeventARB = missing_glCreateSyncFromCLeventARB;

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = missing_glClearBufferData;
  tbl.glClearBufferSubData = missing_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = missing_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = missing_glClearNamedBufferSubDataEXT;

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = missing_glClampColorARB;

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = missing_glDispatchCompute;
  tbl.glDispatchComputeIndirect = missing_glDispatchComputeIndirect;

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = missing_glCopyBufferSubData;

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = missing_glCopyImageSubData;

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = missing_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = missing_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = missing_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = missing_glGetDebugMessageLogARB;

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = missing_glDrawBuffersARB;

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = missing_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = missing_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = missing_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = missing_glBlendFunciARB;

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = missing_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = missing_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = missing_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = missing_glMultiDrawElementsBaseVertex;

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = missing_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = missing_glDrawElementsIndirect;

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = missing_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = missing_glDrawElementsInstancedARB;

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = missing_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = missing_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = missing_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = missing_glNamedFramebufferParameteriEXT;

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = missing_glBindFramebuffer;
  tbl.glBindRenderbuffer = missing_glBindRenderbuffer;
  tbl.glBlitFramebuffer = missing_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = missing_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = missing_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = missing_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = missing_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = missing_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = missing_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = missing_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = missing_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = missing_glGenFramebuffers;
  tbl.glGenRenderbuffers = missing_glGenRenderbuffers;
  tbl.glGenerateMipmap = missing_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = missing_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = missing_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = missing_glIsFramebuffer;
  tbl.glIsRenderbuffer = missing_glIsRenderbuffer;
  tbl.glRenderbufferStorage = missing_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = missing_glRenderbufferStorageMultisample;

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = missing_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = missing_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = missing_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = missing_glProgramParameteriARB;

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = missing_glGetProgramBinary;
  tbl.glProgramBinary = missing_glProgramBinary;
  tbl.glProgramParameteri = missing_glProgramParameteri;

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = missing_glGetUniformdv;
  tbl.glUniform1d = missing_glUniform1d;
  tbl.glUniform1dv = missing_glUniform1dv;
  tbl.glUniform2d = missing_glUniform2d;
  tbl.glUniform2dv = missing_glUniform2dv;
  tbl.glUniform3d = missing_glUniform3d;
  tbl.glUniform3dv = missing_glUniform3dv;
  tbl.glUniform4d = missing_glUniform4d;
  tbl.glUniform4dv = missing_glUniform4dv;
  tbl.glUniformMatrix2dv = missing_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = missing_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = missing_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = missing_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = missing_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = missing_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = missing_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = missing_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = missing_glUniformMatrix4x3dv;

  // GL_ARB_imaging

  tbl.glColorSubTable = missing_glColorSubTable;
  tbl.glColorTable = missing_glColorTable;
  tbl.glColorTableParameterfv = missing_glColorTableParameterfv;
  tbl.glColorTableParameteriv = missing_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = missing_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = missing_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = missing_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = missing_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = missing_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = missing_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = missing_glCopyColorSubTable;
  tbl.glCopyColorTable = missing_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = missing_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = missing_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = missing_glGetColorTable;
  tbl.glGetColorTableParameterfv = missing_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = missing_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = missing_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = missing_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = missing_glGetConvolutionParameteriv;
  tbl.glGetHistogram = missing_glGetHistogram;
  tbl.glGetHistogramParameterfv = missing_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = missing_glGetHistogramParameteriv;
  tbl.glGetMinmax = missing_glGetMinmax;
  tbl.glGetMinmaxParameterfv = missing_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = missing_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = missing_glGetSeparableFilter;
  tbl.glHistogram = missing_glHistogram;
  tbl.glMinmax = missing_glMinmax;
  tbl.glResetHistogram = missing_glResetHistogram;
  tbl.glResetMinmax = missing_glResetMinmax;
  tbl.glSeparableFilter2D = missing_glSeparableFilter2D;

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = missing_glVertexAttribDivisorARB;

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = missing_glGetInternalformativ;

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = missing_glGetInternalformati64v;

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = missing_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = missing_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = missing_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = missing_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = missing_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = missing_glInvalidateTexSubImage;

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = missing_glFlushMappedBufferRange;
  tbl.glMapBufferRange = missing_glMapBufferRange;

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = missing_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = missing_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = missing_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = missing_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = missing_glMatrixIndexusvARB;

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = missing_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = missing_glMultiDrawElementsIndirect;

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = missing_glSampleCoverageARB;

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = missing_glActiveTextureARB;
  tbl.glClientActiveTextureARB = missing_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = missing_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = missing_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = missing_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = missing_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = missing_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = missing_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = missing_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = missing_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = missing_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = missing_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = missing_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = missing_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = missing_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = missing_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = missing_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = missing_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = missing_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = missing_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = missing_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = missing_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = missing_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = missing_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = missing_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = missing_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = missing_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = missing_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = missing_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = missing_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = missing_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = missing_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = missing_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = missing_glMultiTexCoord4svARB;

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = missing_glBeginQueryARB;
  tbl.glDeleteQueriesARB = missing_glDeleteQueriesARB;
  tbl.glEndQueryARB = missing_glEndQueryARB;
  tbl.glGenQueriesARB = missing_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = missing_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = missing_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = missing_glGetQueryivARB;
  tbl.glIsQueryARB = missing_glIsQueryARB;

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = missing_glPointParameterfARB;
  tbl.glPointParameterfvARB = missing_glPointParameterfvARB;

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = missing_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = missing_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = missing_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = missing_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = missing_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = missing_glGetProgramResourceiv;

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = missing_glProvokingVertex;

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = missing_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = missing_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = missing_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = missing_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = missing_glGetnHistogramARB;
  tbl.glGetnMapdvARB = missing_glGetnMapdvARB;
  tbl.glGetnMapfvARB = missing_glGetnMapfvARB;
  tbl.glGetnMapivARB = missing_glGetnMapivARB;
  tbl.glGetnMinmaxARB = missing_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = missing_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = missing_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = missing_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = missing_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = missing_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = missing_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = missing_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = missing_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = missing_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = missing_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = missing_glReadnPixelsARB;

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = missing_glMinSampleShading;
  tbl.glMinSampleShadingARB = missing_glMinSampleShadingARB;

  // GL_ARB_sampler_objects

  tbl.glBindSampler = missing_glBindSampler;
  tbl.glDeleteSamplers = missing_glDeleteSamplers;
  tbl.glGenSamplers = missing_glGenSamplers;
  tbl.glGetSamplerParameterIiv = missing_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = missing_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = missing_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = missing_glGetSamplerParameteriv;
  tbl.glIsSampler = missing_glIsSampler;
  tbl.glSamplerParameterIiv = missing_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = missing_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = missing_glSamplerParameterf;
  tbl.glSamplerParameterfv = missing_glSamplerParameterfv;
  tbl.glSamplerParameteri = missing_glSamplerParameteri;
  tbl.glSamplerParameteriv = missing_glSamplerParameteriv;

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = missing_glActiveShaderProgram;
  tbl.glBindProgramPipeline = missing_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = missing_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = missing_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = missing_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = missing_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = missing_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = missing_glIsProgramPipeline;
  tbl.glProgramUniform1d = missing_glProgramUniform1d;
  tbl.glProgramUniform1dv = missing_glProgramUniform1dv;
  tbl.glProgramUniform1f = missing_glProgramUniform1f;
  tbl.glProgramUniform1fv = missing_glProgramUniform1fv;
  tbl.glProgramUniform1i = missing_glProgramUniform1i;
  tbl.glProgramUniform1iv = missing_glProgramUniform1iv;
  tbl.glProgramUniform1ui = missing_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = missing_glProgramUniform1uiv;
  tbl.glProgramUniform2d = missing_glProgramUniform2d;
  tbl.glProgramUniform2dv = missing_glProgramUniform2dv;
  tbl.glProgramUniform2f = missing_glProgramUniform2f;
  tbl.glProgramUniform2fv = missing_glProgramUniform2fv;
  tbl.glProgramUniform2i = missing_glProgramUniform2i;
  tbl.glProgramUniform2iv = missing_glProgramUniform2iv;
  tbl.glProgramUniform2ui = missing_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = missing_glProgramUniform2uiv;
  tbl.glProgramUniform3d = missing_glProgramUniform3d;
  tbl.glProgramUniform3dv = missing_glProgramUniform3dv;
  tbl.glProgramUniform3f = missing_glProgramUniform3f;
  tbl.glProgramUniform3fv = missing_glProgramUniform3fv;
  tbl.glProgramUniform3i = missing_glProgramUniform3i;
  tbl.glProgramUniform3iv = missing_glProgramUniform3iv;
  tbl.glProgramUniform3ui = missing_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = missing_glProgramUniform3uiv;
  tbl.glProgramUniform4d = missing_glProgramUniform4d;
  tbl.glProgramUniform4dv = missing_glProgramUniform4dv;
  tbl.glProgramUniform4f = missing_glProgramUniform4f;
  tbl.glProgramUniform4fv = missing_glProgramUniform4fv;
  tbl.glProgramUniform4i = missing_glProgramUniform4i;
  tbl.glProgramUniform4iv = missing_glProgramUniform4iv;
  tbl.glProgramUniform4ui = missing_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = missing_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = missing_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = missing_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = missing_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = missing_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = missing_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = missing_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = missing_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = missing_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = missing_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = missing_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = missing_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = missing_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = missing_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = missing_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = missing_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = missing_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = missing_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = missing_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = missing_glUseProgramStages;
  tbl.glValidateProgramPipeline = missing_glValidateProgramPipeline;

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = missing_glGetActiveAtomicCounterBufferiv;

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = missing_glBindImageTexture;
  tbl.glMemoryBarrier = missing_glMemoryBarrier;

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = missing_glAttachObjectARB;
  tbl.glCompileShaderARB = missing_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = missing_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = missing_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = missing_glDeleteObjectARB;
  tbl.glDetachObjectARB = missing_glDetachObjectARB;
  tbl.glGetActiveUniformARB = missing_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = missing_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = missing_glGetHandleARB;
  tbl.glGetInfoLogARB = missing_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = missing_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = missing_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = missing_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = missing_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = missing_glGetUniformfvARB;
  tbl.glGetUniformivARB = missing_glGetUniformivARB;
  tbl.glLinkProgramARB = missing_glLinkProgramARB;
  tbl.glShaderSourceARB = missing_glShaderSourceARB;
  tbl.glUniform1fARB = missing_glUniform1fARB;
  tbl.glUniform1fvARB = missing_glUniform1fvARB;
  tbl.glUniform1iARB = missing_glUniform1iARB;
  tbl.glUniform1ivARB = missing_glUniform1ivARB;
  tbl.glUniform2fARB = missing_glUniform2fARB;
  tbl.glUniform2fvARB = missing_glUniform2fvARB;
  tbl.glUniform2iARB = missing_glUniform2iARB;
  tbl.glUniform2ivARB = missing_glUniform2ivARB;
  tbl.glUniform3fARB = missing_glUniform3fARB;
  tbl.glUniform3fvARB = missing_glUniform3fvARB;
  tbl.glUniform3iARB = missing_glUniform3iARB;
  tbl.glUniform3ivARB = missing_glUniform3ivARB;
  tbl.glUniform4fARB = missing_glUniform4fARB;
  tbl.glUniform4fvARB = missing_glUniform4fvARB;
  tbl.glUniform4iARB = missing_glUniform4iARB;
  tbl.glUniform4ivARB = missing_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = missing_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = missing_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = missing_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = missing_glUseProgramObjectARB;
  tbl.glValidateProgramARB = missing_glValidateProgramARB;

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = missing_glShaderStorageBlockBinding;

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = missing_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = missing_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = missing_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = missing_glGetProgramStageiv;
  tbl.glGetSubroutineIndex = missing_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = missing_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = missing_glGetUniformSubroutineuiv;
  tbl.glUniformSubroutinesuiv = missing_glUniformSubroutinesuiv;

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = missing_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = missing_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = missing_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = missing_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = missing_glIsNamedStringARB;
  tbl.glNamedStringARB = missing_glNamedStringARB;

  // GL_ARB_sync

  tbl.glClientWaitSync = missing_glClientWaitSync;
  tbl.glDeleteSync = missing_glDeleteSync;
  tbl.glFenceSync = missing_glFenceSync;
  tbl.glGetInteger64v = missing_glGetInteger64v;
  tbl.glGetSynciv = missing_glGetSynciv;
  tbl.glIsSync = missing_glIsSync;
  tbl.glWaitSync = missing_glWaitSync;

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = missing_glPatchParameterfv;
  tbl.glPatchParameteri = missing_glPatchParameteri;

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = missing_glTexBufferARB;

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = missing_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = missing_glTextureBufferRangeEXT;

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = missing_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = missing_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = missing_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = missing_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = missing_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = missing_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = missing_glGetCompressedTexImageARB;

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = missing_glGetMultisamplefv;
  tbl.glSampleMaski = missing_glSampleMaski;
  tbl.glTexImage2DMultisample = missing_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = missing_glTexImage3DMultisample;

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = missing_glTexStorage1D;
  tbl.glTexStorage2D = missing_glTexStorage2D;
  tbl.glTexStorage3D = missing_glTexStorage3D;
  tbl.glTextureStorage1DEXT = missing_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = missing_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = missing_glTextureStorage3DEXT;

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = missing_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = missing_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = missing_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = missing_glTextureStorage3DMultisampleEXT;

  // GL_ARB_texture_view

  tbl.glTextureView = missing_glTextureView;

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = missing_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = missing_glGetQueryObjectui64v;
  tbl.glQueryCounter = missing_glQueryCounter;

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = missing_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = missing_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = missing_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = missing_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = missing_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = missing_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = missing_glResumeTransformFeedback;

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = missing_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = missing_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = missing_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = missing_glGetQueryIndexediv;

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = missing_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = missing_glDrawTransformFeedbackStreamInstanced;

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = missing_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = missing_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = missing_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = missing_glMultTransposeMatrixfARB;

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = missing_glBindBufferBase;
  tbl.glBindBufferRange = missing_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = missing_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = missing_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = missing_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = missing_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = missing_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = missing_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = missing_glGetUniformIndices;
  tbl.glUniformBlockBinding = missing_glUniformBlockBinding;

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = missing_glBindVertexArray;
  tbl.glDeleteVertexArrays = missing_glDeleteVertexArrays;
  tbl.glGenVertexArrays = missing_glGenVertexArrays;
  tbl.glIsVertexArray = missing_glIsVertexArray;

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = missing_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = missing_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = missing_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = missing_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = missing_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = missing_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = missing_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = missing_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = missing_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = missing_glVertexAttribLPointer;

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = missing_glBindVertexBuffer;
  tbl.glVertexAttribBinding = missing_glVertexAttribBinding;
  tbl.glVertexAttribFormat = missing_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = missing_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = missing_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = missing_glVertexBindingDivisor;

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = missing_glVertexBlendARB;
  tbl.glWeightPointerARB = missing_glWeightPointerARB;
  tbl.glWeightbvARB = missing_glWeightbvARB;
  tbl.glWeightdvARB = missing_glWeightdvARB;
  tbl.glWeightfvARB = missing_glWeightfvARB;
  tbl.glWeightivARB = missing_glWeightivARB;
  tbl.glWeightsvARB = missing_glWeightsvARB;
  tbl.glWeightubvARB = missing_glWeightubvARB;
  tbl.glWeightuivARB = missing_glWeightuivARB;
  tbl.glWeightusvARB = missing_glWeightusvARB;

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = missing_glBindBufferARB;
  tbl.glBufferDataARB = missing_glBufferDataARB;
  tbl.glBufferSubDataARB = missing_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = missing_glDeleteBuffersARB;
  tbl.glGenBuffersARB = missing_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = missing_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = missing_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = missing_glGetBufferSubDataARB;
  tbl.glIsBufferARB = missing_glIsBufferARB;
  tbl.glMapBufferARB = missing_glMapBufferARB;
  tbl.glUnmapBufferARB = missing_glUnmapBufferARB;

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = missing_glBindProgramARB;
  tbl.glDeleteProgramsARB = missing_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = missing_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = missing_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = missing_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = missing_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = missing_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = missing_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = missing_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = missing_glGetProgramStringARB;
  tbl.glGetProgramivARB = missing_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = missing_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = missing_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = missing_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = missing_glGetVertexAttribivARB;
  tbl.glIsProgramARB = missing_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = missing_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = missing_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = missing_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = missing_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = missing_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = missing_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = missing_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = missing_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = missing_glProgramStringARB;
  tbl.glVertexAttrib1dARB = missing_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = missing_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = missing_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = missing_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = missing_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = missing_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = missing_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = missing_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = missing_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = missing_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = missing_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = missing_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = missing_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = missing_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = missing_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = missing_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = missing_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = missing_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = missing_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = missing_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = missing_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = missing_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = missing_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = missing_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = missing_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = missing_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = missing_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = missing_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = missing_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = missing_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = missing_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = missing_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = missing_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = missing_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = missing_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = missing_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = missing_glVertexAttribPointerARB;

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = missing_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = missing_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = missing_glGetAttribLocationARB;

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = missing_glColorP3ui;
  tbl.glColorP3uiv = missing_glColorP3uiv;
  tbl.glColorP4ui = missing_glColorP4ui;
  tbl.glColorP4uiv = missing_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = missing_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = missing_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = missing_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = missing_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = missing_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = missing_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = missing_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = missing_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = missing_glNormalP3ui;
  tbl.glNormalP3uiv = missing_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = missing_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = missing_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = missing_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = missing_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = missing_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = missing_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = missing_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = missing_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = missing_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = missing_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = missing_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = missing_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = missing_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = missing_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = missing_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = missing_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = missing_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = missing_glVertexAttribP4uiv;
  tbl.glVertexP2ui = missing_glVertexP2ui;
  tbl.glVertexP2uiv = missing_glVertexP2uiv;
  tbl.glVertexP3ui = missing_glVertexP3ui;
  tbl.glVertexP3uiv = missing_glVertexP3uiv;
  tbl.glVertexP4ui = missing_glVertexP4ui;
  tbl.glVertexP4uiv = missing_glVertexP4uiv;

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = missing_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = missing_glDepthRangeIndexed;
  tbl.glGetDoublei_v = missing_glGetDoublei_v;
  tbl.glGetFloati_v = missing_glGetFloati_v;
  tbl.glScissorArrayv = missing_glScissorArrayv;
  tbl.glScissorIndexed = missing_glScissorIndexed;
  tbl.glScissorIndexedv = missing_glScissorIndexedv;
  tbl.glViewportArrayv = missing_glViewportArrayv;
  tbl.glViewportIndexedf = missing_glViewportIndexedf;
  tbl.glViewportIndexedfv = missing_glViewportIndexedfv;

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = missing_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = missing_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = missing_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = missing_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = missing_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = missing_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = missing_glWindowPos2sARB;
  tbl.glWindowPos2svARB = missing_glWindowPos2svARB;
  tbl.glWindowPos3dARB = missing_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = missing_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = missing_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = missing_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = missing_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = missing_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = missing_glWindowPos3sARB;
  tbl.glWindowPos3svARB = missing_glWindowPos3svARB;

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = missing_glDrawBuffersATI;

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = missing_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = missing_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = missing_glElementPointerATI;

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = missing_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = missing_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = missing_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = missing_glTexBumpParameterivATI;

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = missing_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = missing_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = missing_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = missing_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = missing_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = missing_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = missing_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = missing_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = missing_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = missing_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = missing_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = missing_glPassTexCoordATI;
  tbl.glSampleMapATI = missing_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = missing_glSetFragmentShaderConstantATI;

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = missing_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = missing_glUnmapObjectBufferATI;

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = missing_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = missing_glPNTrianglesiATI;

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = missing_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = missing_glStencilOpSeparateATI;

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = missing_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = missing_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = missing_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = missing_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = missing_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = missing_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = missing_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = missing_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = missing_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = missing_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = missing_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = missing_glVariantArrayObjectATI;

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = missing_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = missing_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = missing_glVertexAttribArrayObjectATI;

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = missing_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = missing_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = missing_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = missing_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = missing_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = missing_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = missing_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = missing_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = missing_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = missing_glNormalStream3sATI;
  tbl.glNormalStream3svATI = missing_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = missing_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = missing_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = missing_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = missing_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = missing_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = missing_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = missing_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = missing_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = missing_glVertexStream1sATI;
  tbl.glVertexStream1svATI = missing_glVertexStream1svATI;
  tbl.glVertexStream2dATI = missing_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = missing_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = missing_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = missing_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = missing_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = missing_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = missing_glVertexStream2sATI;
  tbl.glVertexStream2svATI = missing_glVertexStream2svATI;
  tbl.glVertexStream3dATI = missing_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = missing_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = missing_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = missing_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = missing_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = missing_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = missing_glVertexStream3sATI;
  tbl.glVertexStream3svATI = missing_glVertexStream3svATI;
  tbl.glVertexStream4dATI = missing_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = missing_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = missing_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = missing_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = missing_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = missing_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = missing_glVertexStream4sATI;
  tbl.glVertexStream4svATI = missing_glVertexStream4svATI;

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = missing_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = missing_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = missing_glUniformBufferEXT;

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = missing_glBlendColorEXT;

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = missing_glBlendEquationSeparateEXT;

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = missing_glBlendFuncSeparateEXT;

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = missing_glBlendEquationEXT;

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = missing_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = missing_glCopyColorSubTableEXT;

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = missing_glLockArraysEXT;
  tbl.glUnlockArraysEXT = missing_glUnlockArraysEXT;

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = missing_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = missing_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = missing_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = missing_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = missing_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = missing_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = missing_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = missing_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = missing_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = missing_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = missing_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = missing_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = missing_glSeparableFilter2DEXT;

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = missing_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = missing_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = missing_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = missing_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = missing_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = missing_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = missing_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = missing_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = missing_glBinormal3sEXT;
  tbl.glBinormal3svEXT = missing_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = missing_glBinormalPointerEXT;
  tbl.glTangent3bEXT = missing_glTangent3bEXT;
  tbl.glTangent3bvEXT = missing_glTangent3bvEXT;
  tbl.glTangent3dEXT = missing_glTangent3dEXT;
  tbl.glTangent3dvEXT = missing_glTangent3dvEXT;
  tbl.glTangent3fEXT = missing_glTangent3fEXT;
  tbl.glTangent3fvEXT = missing_glTangent3fvEXT;
  tbl.glTangent3iEXT = missing_glTangent3iEXT;
  tbl.glTangent3ivEXT = missing_glTangent3ivEXT;
  tbl.glTangent3sEXT = missing_glTangent3sEXT;
  tbl.glTangent3svEXT = missing_glTangent3svEXT;
  tbl.glTangentPointerEXT = missing_glTangentPointerEXT;

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = missing_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = missing_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = missing_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = missing_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = missing_glCopyTexSubImage3DEXT;

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = missing_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = missing_glCullParameterfvEXT;

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = missing_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = missing_glLabelObjectEXT;

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = missing_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = missing_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = missing_glPushGroupMarkerEXT;

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = missing_glDepthBoundsEXT;

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = missing_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = missing_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = missing_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = missing_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = missing_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = missing_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = missing_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = missing_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = missing_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = missing_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = missing_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = missing_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = missing_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = missing_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = missing_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = missing_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = missing_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = missing_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = missing_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = missing_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = missing_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = missing_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = missing_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = missing_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = missing_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = missing_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = missing_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = missing_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = missing_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = missing_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = missing_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = missing_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = missing_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = missing_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = missing_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = missing_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = missing_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = missing_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = missing_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = missing_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = missing_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = missing_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = missing_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = missing_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = missing_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = missing_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = missing_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = missing_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = missing_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = missing_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = missing_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = missing_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = missing_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = missing_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = missing_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = missing_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = missing_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = missing_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = missing_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = missing_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = missing_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = missing_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = missing_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = missing_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = missing_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = missing_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = missing_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = missing_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = missing_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = missing_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = missing_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = missing_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = missing_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = missing_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = missing_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = missing_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = missing_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = missing_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = missing_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = missing_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = missing_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = missing_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = missing_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = missing_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = missing_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = missing_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = missing_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = missing_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = missing_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = missing_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = missing_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = missing_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = missing_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = missing_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = missing_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = missing_glMatrixPopEXT;
  tbl.glMatrixPushEXT = missing_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = missing_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = missing_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = missing_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = missing_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = missing_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = missing_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = missing_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = missing_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = missing_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = missing_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = missing_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = missing_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = missing_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = missing_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = missing_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = missing_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = missing_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = missing_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = missing_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = missing_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = missing_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = missing_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = missing_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = missing_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = missing_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = missing_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = missing_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = missing_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = missing_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = missing_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = missing_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = missing_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = missing_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = missing_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = missing_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = missing_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = missing_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = missing_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = missing_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = missing_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = missing_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = missing_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = missing_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = missing_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = missing_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = missing_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = missing_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = missing_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = missing_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = missing_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = missing_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = missing_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = missing_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = missing_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = missing_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = missing_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = missing_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = missing_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = missing_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = missing_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = missing_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = missing_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = missing_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = missing_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = missing_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = missing_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = missing_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = missing_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = missing_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = missing_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = missing_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = missing_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = missing_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = missing_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = missing_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = missing_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = missing_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = missing_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = missing_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = missing_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = missing_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = missing_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = missing_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = missing_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = missing_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = missing_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = missing_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = missing_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = missing_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = missing_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = missing_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = missing_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = missing_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = missing_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = missing_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = missing_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = missing_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = missing_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = missing_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = missing_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = missing_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = missing_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = missing_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = missing_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = missing_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = missing_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = missing_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = missing_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = missing_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = missing_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = missing_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = missing_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = missing_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = missing_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = missing_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = missing_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = missing_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = missing_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = missing_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = missing_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = missing_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = missing_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = missing_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = missing_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = missing_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = missing_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = missing_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = missing_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = missing_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = missing_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = missing_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = missing_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = missing_glVertexArrayVertexOffsetEXT;

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = missing_glDiscardFramebufferEXT;

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = missing_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = missing_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = missing_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = missing_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = missing_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = missing_glIsEnabledIndexedEXT;

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = missing_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = missing_glDrawElementsInstancedEXT;

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = missing_glDrawRangeElementsEXT;

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = missing_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = missing_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = missing_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = missing_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = missing_glFogCoordfvEXT;

  // GL_EXT_fragment_lighting

  tbl.glFragmentColorMaterialEXT = missing_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = missing_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = missing_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = missing_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = missing_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = missing_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = missing_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = missing_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = missing_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = missing_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = missing_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = missing_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = missing_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = missing_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = missing_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = missing_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = missing_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = missing_glLightEnviEXT;

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = missing_glBlitFramebufferEXT;

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = missing_glRenderbufferStorageMultisampleEXT;

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = missing_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = missing_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = missing_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = missing_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = missing_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = missing_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = missing_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = missing_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = missing_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = missing_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = missing_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = missing_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = missing_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = missing_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = missing_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = missing_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = missing_glRenderbufferStorageEXT;

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = missing_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = missing_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = missing_glProgramParameteriEXT;

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = missing_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = missing_glProgramLocalParameters4fvEXT;

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = missing_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = missing_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = missing_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = missing_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = missing_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = missing_glUniform1uiEXT;
  tbl.glUniform1uivEXT = missing_glUniform1uivEXT;
  tbl.glUniform2uiEXT = missing_glUniform2uiEXT;
  tbl.glUniform2uivEXT = missing_glUniform2uivEXT;
  tbl.glUniform3uiEXT = missing_glUniform3uiEXT;
  tbl.glUniform3uivEXT = missing_glUniform3uivEXT;
  tbl.glUniform4uiEXT = missing_glUniform4uiEXT;
  tbl.glUniform4uivEXT = missing_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = missing_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = missing_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = missing_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = missing_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = missing_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = missing_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = missing_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = missing_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = missing_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = missing_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = missing_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = missing_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = missing_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = missing_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = missing_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = missing_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = missing_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = missing_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = missing_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = missing_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = missing_glVertexAttribIPointerEXT;

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = missing_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = missing_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = missing_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = missing_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = missing_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = missing_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = missing_glHistogramEXT;
  tbl.glMinmaxEXT = missing_glMinmaxEXT;
  tbl.glResetHistogramEXT = missing_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = missing_glResetMinmaxEXT;

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = missing_glIndexFuncEXT;

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = missing_glIndexMaterialEXT;

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = missing_glApplyTextureEXT;
  tbl.glTextureLightEXT = missing_glTextureLightEXT;
  tbl.glTextureMaterialEXT = missing_glTextureMaterialEXT;

  // GL_EXT_map_buffer_range

  tbl.glFlushMappedBufferRangeEXT = missing_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = missing_glMapBufferRangeEXT;

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = missing_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = missing_glMultiDrawElementsEXT;

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = missing_glSampleMaskEXT;
  tbl.glSamplePatternEXT = missing_glSamplePatternEXT;

  // GL_EXT_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleEXT = missing_glFramebufferTexture2DMultisampleEXT;

  // GL_EXT_multiview_draw_buffers

  tbl.glDrawBuffersIndexedEXT = missing_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = missing_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = missing_glReadBufferIndexedEXT;

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = missing_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = missing_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = missing_glEndQueryEXT;
  tbl.glGenQueriesEXT = missing_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = missing_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = missing_glGetQueryivEXT;
  tbl.glIsQueryEXT = missing_glIsQueryEXT;

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = missing_glColorTableEXT;
  tbl.glGetColorTableEXT = missing_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = missing_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = missing_glGetColorTableParameterivEXT;

  // GL_EXT_pixel_transform

  tbl.glGetPixelTransformParameterfvEXT = missing_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = missing_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = missing_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = missing_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = missing_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = missing_glPixelTransformParameterivEXT;

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = missing_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = missing_glPointParameterfvEXT;

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = missing_glPolygonOffsetEXT;

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = missing_glProvokingVertexEXT;

  // GL_EXT_robustness

  tbl.glGetnUniformfvEXT = missing_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = missing_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = missing_glReadnPixelsEXT;

  // GL_EXT_scene_marker

  tbl.glBeginSceneEXT = missing_glBeginSceneEXT;
  tbl.glEndSceneEXT = missing_glEndSceneEXT;

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = missing_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = missing_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = missing_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = missing_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = missing_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = missing_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = missing_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = missing_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = missing_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = missing_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = missing_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = missing_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = missing_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = missing_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = missing_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = missing_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = missing_glSecondaryColorPointerEXT;

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = missing_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = missing_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = missing_glUseShaderProgramEXT;

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = missing_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = missing_glMemoryBarrierEXT;

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = missing_glStencilClearTagEXT;

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = missing_glActiveStencilFaceEXT;

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = missing_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = missing_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = missing_glTexSubImage3DEXT;

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = missing_glTexImage3DEXT;

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = missing_glFramebufferTextureLayerEXT;

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = missing_glTexBufferEXT;

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = missing_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = missing_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = missing_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = missing_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = missing_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = missing_glTexParameterIuivEXT;

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = missing_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = missing_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = missing_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = missing_glGenTexturesEXT;
  tbl.glIsTextureEXT = missing_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = missing_glPrioritizeTexturesEXT;

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = missing_glTextureNormalEXT;

  // GL_EXT_texture_storage

  tbl.glTexStorage1DEXT = missing_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = missing_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = missing_glTexStorage3DEXT;

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = missing_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = missing_glGetQueryObjectui64vEXT;

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = missing_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = missing_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = missing_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = missing_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = missing_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = missing_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = missing_glTransformFeedbackVaryingsEXT;

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = missing_glArrayElementEXT;
  tbl.glColorPointerEXT = missing_glColorPointerEXT;
  tbl.glDrawArraysEXT = missing_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = missing_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = missing_glGetPointervEXT;
  tbl.glIndexPointerEXT = missing_glIndexPointerEXT;
  tbl.glNormalPointerEXT = missing_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = missing_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = missing_glVertexPointerEXT;

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = missing_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = missing_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = missing_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = missing_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = missing_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = missing_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = missing_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = missing_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = missing_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = missing_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = missing_glVertexAttribLPointerEXT;

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = missing_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = missing_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = missing_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = missing_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = missing_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = missing_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = missing_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = missing_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = missing_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = missing_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = missing_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = missing_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = missing_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = missing_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = missing_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = missing_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = missing_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = missing_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = missing_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = missing_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = missing_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = missing_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = missing_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = missing_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = missing_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = missing_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = missing_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = missing_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = missing_glShaderOp1EXT;
  tbl.glShaderOp2EXT = missing_glShaderOp2EXT;
  tbl.glShaderOp3EXT = missing_glShaderOp3EXT;
  tbl.glSwizzleEXT = missing_glSwizzleEXT;
  tbl.glVariantPointerEXT = missing_glVariantPointerEXT;
  tbl.glVariantbvEXT = missing_glVariantbvEXT;
  tbl.glVariantdvEXT = missing_glVariantdvEXT;
  tbl.glVariantfvEXT = missing_glVariantfvEXT;
  tbl.glVariantivEXT = missing_glVariantivEXT;
  tbl.glVariantsvEXT = missing_glVariantsvEXT;
  tbl.glVariantubvEXT = missing_glVariantubvEXT;
  tbl.glVariantuivEXT = missing_glVariantuivEXT;
  tbl.glVariantusvEXT = missing_glVariantusvEXT;
  tbl.glWriteMaskEXT = missing_glWriteMaskEXT;

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = missing_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = missing_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = missing_glVertexWeightfvEXT;

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = missing_glImportSyncEXT;

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = missing_glFrameTerminatorGREMEDY;

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = missing_glStringMarkerGREMEDY;

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = missing_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = missing_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = missing_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = missing_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = missing_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = missing_glImageTransformParameterivHP;

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = missing_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = missing_glMultiModeDrawElementsIBM;

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = missing_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = missing_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = missing_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = missing_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = missing_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = missing_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = missing_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = missing_glVertexPointerListIBM;

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = missing_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = missing_glRenderbufferStorageMultisampleIMG;

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = missing_glBlendFuncSeparateINGR;

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = missing_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = missing_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = missing_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = missing_glVertexPointervINTEL;

  // GL_INTEL_texture_scissor

  tbl.glTexScissorFuncINTEL = missing_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = missing_glTexScissorINTEL;

  // GL_KHR_debug

  tbl.glDebugMessageCallback = missing_glDebugMessageCallback;
  tbl.glDebugMessageControl = missing_glDebugMessageControl;
  tbl.glDebugMessageInsert = missing_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = missing_glGetDebugMessageLog;
  tbl.glGetObjectLabel = missing_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = missing_glGetObjectPtrLabel;
  tbl.glObjectLabel = missing_glObjectLabel;
  tbl.glObjectPtrLabel = missing_glObjectPtrLabel;
  tbl.glPopDebugGroup = missing_glPopDebugGroup;
  tbl.glPushDebugGroup = missing_glPushDebugGroup;

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = missing_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = missing_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = missing_glDrawBufferRegion;
  tbl.glNewBufferRegion = missing_glNewBufferRegion;
  tbl.glReadBufferRegion = missing_glReadBufferRegion;

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = missing_glResizeBuffersMESA;

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = missing_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = missing_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = missing_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = missing_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = missing_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = missing_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = missing_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = missing_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = missing_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = missing_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = missing_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = missing_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = missing_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = missing_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = missing_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = missing_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = missing_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = missing_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = missing_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = missing_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = missing_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = missing_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = missing_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = missing_glWindowPos4svMESA;

  // GL_NVX_conditional_render

  tbl.glBeginConditionalRenderNVX = missing_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = missing_glEndConditionalRenderNVX;

  // GL_NV_bindless_texture

  tbl.glGetImageHandleNV = missing_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = missing_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = missing_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = missing_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = missing_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = missing_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = missing_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = missing_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = missing_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = missing_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = missing_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = missing_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = missing_glUniformHandleui64vNV;

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = missing_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = missing_glEndConditionalRenderNV;

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = missing_glCopyImageSubDataNV;

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = missing_glCoverageMaskNV;
  tbl.glCoverageOperationNV = missing_glCoverageOperationNV;

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = missing_glClearDepthdNV;
  tbl.glDepthBoundsdNV = missing_glDepthBoundsdNV;
  tbl.glDepthRangedNV = missing_glDepthRangedNV;

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = missing_glDrawBuffersNV;

  // GL_NV_evaluators

  tbl.glEvalMapsNV = missing_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = missing_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = missing_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = missing_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = missing_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = missing_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = missing_glMapControlPointsNV;
  tbl.glMapParameterfvNV = missing_glMapParameterfvNV;
  tbl.glMapParameterivNV = missing_glMapParameterivNV;

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = missing_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = missing_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = missing_glTexRenderbufferNV;

  // GL_NV_fence

  tbl.glDeleteFencesNV = missing_glDeleteFencesNV;
  tbl.glFinishFenceNV = missing_glFinishFenceNV;
  tbl.glGenFencesNV = missing_glGenFencesNV;
  tbl.glGetFenceivNV = missing_glGetFenceivNV;
  tbl.glIsFenceNV = missing_glIsFenceNV;
  tbl.glSetFenceNV = missing_glSetFenceNV;
  tbl.glTestFenceNV = missing_glTestFenceNV;

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = missing_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = missing_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = missing_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = missing_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = missing_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = missing_glProgramNamedParameter4fvNV;

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = missing_glRenderbufferStorageMultisampleCoverageNV;

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = missing_glProgramVertexLimitNV;

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = missing_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = missing_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = missing_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = missing_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = missing_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = missing_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = missing_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = missing_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = missing_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = missing_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = missing_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = missing_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = missing_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = missing_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = missing_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = missing_glProgramLocalParametersI4uivNV;

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = missing_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = missing_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = missing_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = missing_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = missing_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = missing_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = missing_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = missing_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = missing_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = missing_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = missing_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = missing_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = missing_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = missing_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = missing_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = missing_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = missing_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = missing_glUniform1i64NV;
  tbl.glUniform1i64vNV = missing_glUniform1i64vNV;
  tbl.glUniform1ui64NV = missing_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = missing_glUniform1ui64vNV;
  tbl.glUniform2i64NV = missing_glUniform2i64NV;
  tbl.glUniform2i64vNV = missing_glUniform2i64vNV;
  tbl.glUniform2ui64NV = missing_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = missing_glUniform2ui64vNV;
  tbl.glUniform3i64NV = missing_glUniform3i64NV;
  tbl.glUniform3i64vNV = missing_glUniform3i64vNV;
  tbl.glUniform3ui64NV = missing_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = missing_glUniform3ui64vNV;
  tbl.glUniform4i64NV = missing_glUniform4i64NV;
  tbl.glUniform4i64vNV = missing_glUniform4i64vNV;
  tbl.glUniform4ui64NV = missing_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = missing_glUniform4ui64vNV;

  // GL_NV_half_float

  tbl.glColor3hNV = missing_glColor3hNV;
  tbl.glColor3hvNV = missing_glColor3hvNV;
  tbl.glColor4hNV = missing_glColor4hNV;
  tbl.glColor4hvNV = missing_glColor4hvNV;
  tbl.glFogCoordhNV = missing_glFogCoordhNV;
  tbl.glFogCoordhvNV = missing_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = missing_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = missing_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = missing_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = missing_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = missing_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = missing_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = missing_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = missing_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = missing_glNormal3hNV;
  tbl.glNormal3hvNV = missing_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = missing_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = missing_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = missing_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = missing_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = missing_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = missing_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = missing_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = missing_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = missing_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = missing_glTexCoord4hvNV;
  tbl.glVertex2hNV = missing_glVertex2hNV;
  tbl.glVertex2hvNV = missing_glVertex2hvNV;
  tbl.glVertex3hNV = missing_glVertex3hNV;
  tbl.glVertex3hvNV = missing_glVertex3hvNV;
  tbl.glVertex4hNV = missing_glVertex4hNV;
  tbl.glVertex4hvNV = missing_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = missing_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = missing_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = missing_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = missing_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = missing_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = missing_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = missing_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = missing_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = missing_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = missing_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = missing_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = missing_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = missing_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = missing_glVertexWeighthvNV;

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = missing_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = missing_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = missing_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = missing_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = missing_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = missing_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = missing_glIsOcclusionQueryNV;

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = missing_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = missing_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = missing_glProgramBufferParametersfvNV;

  // GL_NV_path_rendering

  tbl.glCopyPathNV = missing_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = missing_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = missing_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = missing_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = missing_glCoverStrokePathNV;
  tbl.glDeletePathsNV = missing_glDeletePathsNV;
  tbl.glGenPathsNV = missing_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = missing_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = missing_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = missing_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = missing_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = missing_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = missing_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = missing_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = missing_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = missing_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = missing_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = missing_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = missing_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = missing_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = missing_glInterpolatePathsNV;
  tbl.glIsPathNV = missing_glIsPathNV;
  tbl.glIsPointInFillPathNV = missing_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = missing_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = missing_glPathColorGenNV;
  tbl.glPathCommandsNV = missing_glPathCommandsNV;
  tbl.glPathCoordsNV = missing_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = missing_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = missing_glPathDashArrayNV;
  tbl.glPathFogGenNV = missing_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = missing_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = missing_glPathGlyphsNV;
  tbl.glPathParameterfNV = missing_glPathParameterfNV;
  tbl.glPathParameterfvNV = missing_glPathParameterfvNV;
  tbl.glPathParameteriNV = missing_glPathParameteriNV;
  tbl.glPathParameterivNV = missing_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = missing_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = missing_glPathStencilFuncNV;
  tbl.glPathStringNV = missing_glPathStringNV;
  tbl.glPathSubCommandsNV = missing_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = missing_glPathSubCoordsNV;
  tbl.glPathTexGenNV = missing_glPathTexGenNV;
  tbl.glPointAlongPathNV = missing_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = missing_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = missing_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = missing_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = missing_glStencilStrokePathNV;
  tbl.glTransformPathNV = missing_glTransformPathNV;
  tbl.glWeightPathsNV = missing_glWeightPathsNV;

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = missing_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = missing_glPixelDataRangeNV;

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = missing_glPointParameteriNV;
  tbl.glPointParameterivNV = missing_glPointParameterivNV;

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = missing_glGetVideoi64vNV;
  tbl.glGetVideoivNV = missing_glGetVideoivNV;
  tbl.glGetVideoui64vNV = missing_glGetVideoui64vNV;
  tbl.glGetVideouivNV = missing_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = missing_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = missing_glPresentFrameKeyedNV;

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = missing_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = missing_glPrimitiveRestartNV;

  // GL_NV_read_buffer

  tbl.glReadBufferNV = missing_glReadBufferNV;

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = missing_glCombinerInputNV;
  tbl.glCombinerOutputNV = missing_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = missing_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = missing_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = missing_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = missing_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = missing_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = missing_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = missing_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = missing_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = missing_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = missing_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = missing_glGetFinalCombinerInputParameterivNV;

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = missing_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = missing_glGetCombinerStageParameterfvNV;

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = missing_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = missing_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = missing_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = missing_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = missing_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = missing_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = missing_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = missing_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = missing_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = missing_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = missing_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = missing_glProgramUniformui64vNV;
  tbl.glUniformui64NV = missing_glUniformui64NV;
  tbl.glUniformui64vNV = missing_glUniformui64vNV;

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = missing_glTextureBarrierNV;

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = missing_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = missing_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = missing_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = missing_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = missing_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = missing_glTextureImage3DMultisampleNV;

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = missing_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = missing_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = missing_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = missing_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = missing_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = missing_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = missing_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = missing_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = missing_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = missing_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = missing_glTransformFeedbackVaryingsNV;

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = missing_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = missing_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = missing_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = missing_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = missing_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = missing_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = missing_glResumeTransformFeedbackNV;

  // GL_NV_vdpau_interop

  tbl.glVDPAUFiniNV = missing_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = missing_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = missing_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = missing_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = missing_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = missing_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = missing_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = missing_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = missing_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = missing_glVDPAUUnregisterSurfaceNV;

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = missing_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = missing_glVertexArrayRangeNV;

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = missing_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = missing_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = missing_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = missing_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = missing_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = missing_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = missing_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = missing_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = missing_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = missing_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = missing_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = missing_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = missing_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = missing_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = missing_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = missing_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = missing_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = missing_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = missing_glVertexAttribLFormatNV;

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = missing_glBufferAddressRangeNV;
  tbl.glColorFormatNV = missing_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = missing_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = missing_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = missing_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = missing_glIndexFormatNV;
  tbl.glNormalFormatNV = missing_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = missing_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = missing_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = missing_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = missing_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = missing_glVertexFormatNV;

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = missing_glAreProgramsResidentNV;
  tbl.glBindProgramNV = missing_glBindProgramNV;
  tbl.glDeleteProgramsNV = missing_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = missing_glExecuteProgramNV;
  tbl.glGenProgramsNV = missing_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = missing_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = missing_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = missing_glGetProgramStringNV;
  tbl.glGetProgramivNV = missing_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = missing_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = missing_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = missing_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = missing_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = missing_glGetVertexAttribivNV;
  tbl.glIsProgramNV = missing_glIsProgramNV;
  tbl.glLoadProgramNV = missing_glLoadProgramNV;
  tbl.glProgramParameter4dNV = missing_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = missing_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = missing_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = missing_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = missing_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = missing_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = missing_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = missing_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = missing_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = missing_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = missing_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = missing_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = missing_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = missing_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = missing_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = missing_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = missing_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = missing_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = missing_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = missing_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = missing_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = missing_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = missing_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = missing_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = missing_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = missing_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = missing_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = missing_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = missing_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = missing_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = missing_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = missing_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = missing_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = missing_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = missing_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = missing_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = missing_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = missing_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = missing_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = missing_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = missing_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = missing_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = missing_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = missing_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = missing_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = missing_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = missing_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = missing_glVertexAttribs4ubvNV;

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = missing_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = missing_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = missing_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = missing_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = missing_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = missing_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = missing_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = missing_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = missing_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = missing_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = missing_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = missing_glVideoCaptureStreamParameterivNV;

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = missing_glBlendEquationSeparateOES;

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = missing_glBlendFuncSeparateOES;

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = missing_glBlendEquationOES;

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = missing_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = missing_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = missing_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = missing_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = missing_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = missing_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = missing_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = missing_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = missing_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = missing_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = missing_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = missing_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = missing_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = missing_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = missing_glRenderbufferStorageOES;

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = missing_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = missing_glProgramBinaryOES;

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = missing_glGetBufferPointervOES;
  tbl.glMapBufferOES = missing_glMapBufferOES;
  tbl.glUnmapBufferOES = missing_glUnmapBufferOES;

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = missing_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = missing_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = missing_glWeightPointerOES;

  // GL_OES_single_precision

  tbl.glClearDepthfOES = missing_glClearDepthfOES;
  tbl.glClipPlanefOES = missing_glClipPlanefOES;
  tbl.glDepthRangefOES = missing_glDepthRangefOES;
  tbl.glFrustumfOES = missing_glFrustumfOES;
  tbl.glGetClipPlanefOES = missing_glGetClipPlanefOES;
  tbl.glOrthofOES = missing_glOrthofOES;

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = missing_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = missing_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = missing_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = missing_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = missing_glTexImage3DOES;
  tbl.glTexSubImage3DOES = missing_glTexSubImage3DOES;

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = missing_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = missing_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = missing_glGetTexGenxvOES;
  tbl.glTexGenfOES = missing_glTexGenfOES;
  tbl.glTexGenfvOES = missing_glTexGenfvOES;
  tbl.glTexGeniOES = missing_glTexGeniOES;
  tbl.glTexGenivOES = missing_glTexGenivOES;
  tbl.glTexGenxOES = missing_glTexGenxOES;
  tbl.glTexGenxvOES = missing_glTexGenxvOES;

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = missing_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = missing_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = missing_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = missing_glIsVertexArrayOES;

  // GL_PGI_misc_hints

  tbl.glHintPGI = missing_glHintPGI;

  // GL_QCOM_alpha_test

  tbl.glAlphaFuncQCOM = missing_glAlphaFuncQCOM;

  // GL_QCOM_driver_control

  tbl.glDisableDriverControlQCOM = missing_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = missing_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = missing_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = missing_glGetDriverControlsQCOM;

  // GL_QCOM_extended_get

  tbl.glExtGetBufferPointervQCOM = missing_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = missing_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = missing_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = missing_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = missing_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = missing_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = missing_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = missing_glExtTexObjectStateOverrideiQCOM;

  // GL_QCOM_extended_get2

  tbl.glExtGetProgramBinarySourceQCOM = missing_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = missing_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = missing_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = missing_glExtIsProgramBinaryQCOM;

  // GL_QCOM_tiled_rendering

  tbl.glEndTilingQCOM = missing_glEndTilingQCOM;
  tbl.glStartTilingQCOM = missing_glStartTilingQCOM;

  // GL_REGAL_ES1_1_compatibility

  tbl.glPointSizePointerOES = missing_glPointSizePointerOES;

  // GL_REGAL_log

  tbl.glLogMessageCallbackREGAL = missing_glLogMessageCallbackREGAL;

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = missing_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = missing_glGetDetailTexFuncSGIS;

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = missing_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = missing_glGetFogFuncSGIS;

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = missing_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = missing_glSamplePatternSGIS;

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = missing_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = missing_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = missing_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = missing_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = missing_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = missing_glPixelTexGenParameterivSGIS;

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = missing_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = missing_glPointParameterfvSGIS;

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = missing_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = missing_glSharpenTexFuncSGIS;

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = missing_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = missing_glTexSubImage4DSGIS;

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = missing_glTextureColorMaskSGIS;

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = missing_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = missing_glTexFilterFuncSGIS;

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = missing_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = missing_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = missing_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = missing_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = missing_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = missing_glPollAsyncSGIX;

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = missing_glFlushRasterSGIX;

  // GL_SGIX_fog_texture

  tbl.glTextureFogSGIX = missing_glTextureFogSGIX;

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = missing_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = missing_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = missing_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = missing_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = missing_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = missing_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = missing_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = missing_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = missing_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = missing_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = missing_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = missing_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = missing_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = missing_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = missing_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = missing_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = missing_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = missing_glLightEnviSGIX;

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = missing_glFrameZoomSGIX;

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = missing_glIglooInterfaceSGIX;

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = missing_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = missing_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = missing_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = missing_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = missing_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = missing_glStopInstrumentsSGIX;

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = missing_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = missing_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = missing_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = missing_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = missing_glListParameteriSGIX;
  tbl.glListParameterivSGIX = missing_glListParameterivSGIX;

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = missing_glPixelTexGenSGIX;

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = missing_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = missing_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = missing_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = missing_glLoadIdentityDeformationMapSGIX;

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = missing_glReferencePlaneSGIX;

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = missing_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = missing_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = missing_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = missing_glSpriteParameterivSGIX;

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = missing_glTagSampleBufferSGIX;

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = missing_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = missing_glColorTableParameterivSGI;
  tbl.glColorTableSGI = missing_glColorTableSGI;
  tbl.glCopyColorTableSGI = missing_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = missing_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = missing_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = missing_glGetColorTableSGI;

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = missing_glFinishTextureSUNX;

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = missing_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = missing_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = missing_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = missing_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = missing_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = missing_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = missing_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = missing_glGlobalAlphaFactorusSUN;

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = missing_glDrawMeshArraysSUN;

  // GL_SUN_read_video_pixels

  tbl.glReadVideoPixelsSUN = missing_glReadVideoPixelsSUN;

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = missing_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = missing_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = missing_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = missing_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = missing_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = missing_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = missing_glReplacementCodeusvSUN;

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = missing_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = missing_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = missing_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = missing_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = missing_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = missing_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = missing_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = missing_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = missing_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = missing_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = missing_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = missing_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = missing_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = missing_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = missing_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = missing_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = missing_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = missing_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = missing_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = missing_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = missing_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = missing_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = missing_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = missing_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = missing_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = missing_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = missing_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = missing_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = missing_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = missing_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = missing_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = missing_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = missing_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = missing_glTexCoord4fVertex4fvSUN;

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = missing_glAddSwapHintRectWIN;

}

REGAL_NAMESPACE_END
