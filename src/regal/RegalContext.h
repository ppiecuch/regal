/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#ifndef __REGAL_CONTEXT_H__
#define __REGAL_CONTEXT_H__

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalThread.h"
#include "RegalPrivate.h"
#include "RegalContextInfo.h"
#include "RegalDispatcherGL.h"
#include "RegalDispatchError.h"
#include "RegalScopedPtr.h"
#include "RegalSharedList.h"

#if REGAL_SYS_PPAPI
#define __gl2_h_  // HACK - revisit
#include <ppapi/c/pp_resource.h>
#include <ppapi/c/ppb_opengles2.h>
#endif

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

struct EmuInfo;
struct DebugInfo;
struct Statistics;

struct Marker;
struct Frame;
#if REGAL_EMULATION
namespace Emu { struct Obj; };
namespace Emu { struct Hint; };
namespace Emu { struct Ppa; };
namespace Emu { struct Ppca; };
namespace Emu { struct Bin; };
namespace Emu { struct Xfer; };
namespace Emu { struct TexSto; };
namespace Emu { struct BaseVertex; };
namespace Emu { struct Rect; };
namespace Emu { struct Iff; };
namespace Emu { struct Quads; };
namespace Emu { struct So; };
namespace Emu { struct Dsa; };
namespace Emu { struct Vao; };
namespace Emu { struct TexC; };
namespace Emu { struct Filt; };
#endif

struct RegalContext
{
  RegalContext();
  ~RegalContext();

  void Init();
  void Cleanup();

  // If profile is forced at build-time, no need to check runtime flag

  inline bool isES1()    const { RegalAssert(info); return REGAL_SYS_ES1 && ( REGAL_FORCE_ES1_PROFILE  || info->es1  ); }
  inline bool isES2()    const { RegalAssert(info); return REGAL_SYS_ES2 && ( REGAL_FORCE_ES2_PROFILE  || info->es2  ); }
  inline bool isCore()   const { RegalAssert(info); return REGAL_SYS_GL  && ( REGAL_FORCE_CORE_PROFILE || info->core ); }
  inline bool isCompat() const { RegalAssert(info); return REGAL_SYS_GL  &&                               info->compat; }

  bool                    initialized;
  DispatcherGL            dispatcher;
  DispatchErrorState      err;
  scoped_ptr<DebugInfo>   dbg;
  scoped_ptr<ContextInfo> info;
  scoped_ptr<EmuInfo>     emuInfo;

#if REGAL_STATISTICS
  scoped_ptr<Statistics>  statistics;
#endif

  //
  // Emulation
  //

  scoped_ptr<Marker            > marker;
#if REGAL_FRAME
  scoped_ptr<Frame             > frame;
#endif /* REGAL_FRAME */
#if REGAL_EMULATION
  // Fixed function emulation
  int emuLevel;
  scoped_ptr<Emu::Obj          > obj;
  scoped_ptr<Emu::Hint         > hint;
  scoped_ptr<Emu::Ppa          > ppa;
  scoped_ptr<Emu::Ppca         > ppca;
  scoped_ptr<Emu::Bin          > bin;
  scoped_ptr<Emu::Xfer         > xfer;
  scoped_ptr<Emu::TexSto       > texsto;
  scoped_ptr<Emu::BaseVertex   > bv;
  scoped_ptr<Emu::Rect         > rect;
  scoped_ptr<Emu::Iff          > iff;
  scoped_ptr<Emu::Quads        > quads;
  scoped_ptr<Emu::So           > so;
  scoped_ptr<Emu::Dsa          > dsa;
  scoped_ptr<Emu::Vao          > vao;
  scoped_ptr<Emu::TexC         > texc;
  scoped_ptr<Emu::Filt         > filt;
#endif

  #if REGAL_SYS_PPAPI
  PPB_OpenGLES2      *ppapiES2;
  PP_Resource         ppapiResource;
  #endif

  RegalSystemContext  sysCtx;
  Thread::Thread      thread;

  #if REGAL_SYS_X11
  Display            *x11Display;
  #endif

  #if REGAL_SYS_GLX
  GLXDrawable         x11Drawable;
  #endif

  GLLOGPROCREGAL      logCallback;

  //
  // Regal context sharing
  //

  shared_list<RegalContext *> shareGroup;

  // Query that any of the contexts in the share
  // group are already initialized

  bool groupInitialized() const;

  // Get any context in the share group that is
  // already initialized

  RegalContext *groupInitializedContext();

  // For RegalDispatchCode

#if REGAL_CODE
  FILE               *codeSource;
  FILE               *codeHeader;
  size_t              codeInputNext;
  size_t              codeOutputNext;
  size_t              codeShaderNext;  // glCreateShader/glCreateShaderObjectARB
  size_t              codeProgramNext; // glCreateProgram/glCreateProgramObjectARB
  size_t              codeTextureNext; // glTexImage2D etc.
#endif

  // State tracked via EmuContextState.py / Regal.cpp

  size_t              depthBeginEnd;   // Normally zero or one
  size_t              depthPushMatrix; //
  size_t              depthPushAttrib; //
  size_t              depthNewList;    //
};

REGAL_NAMESPACE_END

#endif // __REGAL_CONTEXT_H__
