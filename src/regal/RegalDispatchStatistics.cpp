/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_STATISTICS

REGAL_GLOBAL_BEGIN

#include <string>
using namespace std;

#include "RegalLog.h"
#include "RegalBreak.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalPrivate.h"
#include "RegalContext.h"
#include "RegalStatistics.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

// GL_VERSION_1_0

static void REGAL_CALL statistics_glAccum(GLenum op, GLfloat value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAccum++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAccum)(op, value);
}

static void REGAL_CALL statistics_glAlphaFunc(GLenum func, GLclampf ref)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFunc++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFunc)(func, ref);
}

static void REGAL_CALL statistics_glBegin(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBegin++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBegin)(mode);
}

static void REGAL_CALL statistics_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBitmap++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);
}

static void REGAL_CALL statistics_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFunc++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFunc)(sfactor, dfactor);
}

static void REGAL_CALL statistics_glCallList(GLuint list)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCallList++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCallList)(list);
}

static void REGAL_CALL statistics_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCallLists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCallLists)(n, type, lists);
}

static void REGAL_CALL statistics_glClear(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClear++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClear)(mask);
}

static void REGAL_CALL statistics_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearAccum++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearAccum)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearColor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearColor)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glClearDepth(GLclampd depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearDepth++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearDepth)(depth);
}

static void REGAL_CALL statistics_glClearIndex(GLfloat c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearIndex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearIndex)(c);
}

static void REGAL_CALL statistics_glClearStencil(GLint s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearStencil++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearStencil)(s);
}

static void REGAL_CALL statistics_glClipPlane(GLenum plane, const GLdouble *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClipPlane++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClipPlane)(plane, equation);
}

static void REGAL_CALL statistics_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3b++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3b)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3bv(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3bv)(v);
}

static void REGAL_CALL statistics_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3d)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3dv)(v);
}

static void REGAL_CALL statistics_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3f)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3fv)(v);
}

static void REGAL_CALL statistics_glColor3i(GLint red, GLint green, GLint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3i)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3iv)(v);
}

static void REGAL_CALL statistics_glColor3s(GLshort red, GLshort green, GLshort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3s)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3sv)(v);
}

static void REGAL_CALL statistics_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3ub++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3ub)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3ubv(const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3ubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3ubv)(v);
}

static void REGAL_CALL statistics_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3ui)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3uiv(const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3uiv)(v);
}

static void REGAL_CALL statistics_glColor3us(GLushort red, GLushort green, GLushort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3us++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3us)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3usv(const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3usv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3usv)(v);
}

static void REGAL_CALL statistics_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4b++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4b)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4bv(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4bv)(v);
}

static void REGAL_CALL statistics_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4d)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4dv)(v);
}

static void REGAL_CALL statistics_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4f)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4fv)(v);
}

static void REGAL_CALL statistics_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4i)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4iv)(v);
}

static void REGAL_CALL statistics_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4s)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4sv)(v);
}

static void REGAL_CALL statistics_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ub++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ub)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4ubv(const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ubv)(v);
}

static void REGAL_CALL statistics_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ui)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4uiv(const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4uiv)(v);
}

static void REGAL_CALL statistics_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4us++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4us)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4usv(const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4usv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4usv)(v);
}

static void REGAL_CALL statistics_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorMask++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorMask)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColorMaterial(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorMaterial++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorMaterial)(face, mode);
}

static void REGAL_CALL statistics_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyPixels++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyPixels)(x, y, width, height, type);
}

static void REGAL_CALL statistics_glCullFace(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCullFace++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCullFace)(mode);
}

static void REGAL_CALL statistics_glDeleteLists(GLuint list, GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteLists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteLists)(list, range);
}

static void REGAL_CALL statistics_glDepthFunc(GLenum func)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthFunc++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthFunc)(func);
}

static void REGAL_CALL statistics_glDepthMask(GLboolean flag)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthMask++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthMask)(flag);
}

static void REGAL_CALL statistics_glDepthRange(GLclampd zNear, GLclampd zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRange++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRange)(zNear, zFar);
}

static void REGAL_CALL statistics_glDisable(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisable++;

  switch (cap)
  {
    case GL_BLEND:                                statistics.disable_GL_BLEND++;                               break;
    case GL_CLIP_DISTANCE0:                       statistics.disable_GL_CLIP_DISTANCE0++;                      break;
    case GL_CLIP_DISTANCE1:                       statistics.disable_GL_CLIP_DISTANCE1++;                      break;
    case GL_CLIP_DISTANCE2:                       statistics.disable_GL_CLIP_DISTANCE2++;                      break;
    case GL_CLIP_DISTANCE3:                       statistics.disable_GL_CLIP_DISTANCE3++;                      break;
    case GL_CLIP_DISTANCE4:                       statistics.disable_GL_CLIP_DISTANCE4++;                      break;
    case GL_CLIP_DISTANCE5:                       statistics.disable_GL_CLIP_DISTANCE5++;                      break;
    case GL_CLIP_DISTANCE6:                       statistics.disable_GL_CLIP_DISTANCE6++;                      break;
    case GL_CLIP_DISTANCE7:                       statistics.disable_GL_CLIP_DISTANCE7++;                      break;
    case GL_COLOR_LOGIC_OP:                       statistics.disable_GL_COLOR_LOGIC_OP++;                      break;
    case GL_CULL_FACE:                            statistics.disable_GL_CULL_FACE++;                           break;
    case GL_DEBUG_OUTPUT:                         statistics.disable_GL_DEBUG_OUTPUT++;                        break;
    case GL_DEBUG_OUTPUT_SYNCHRONOUS:             statistics.disable_GL_DEBUG_OUTPUT_SYNCHRONOUS++;            break;
    case GL_DEPTH_CLAMP:                          statistics.disable_GL_DEPTH_CLAMP++;                         break;
    case GL_DEPTH_TEST:                           statistics.disable_GL_DEPTH_TEST++;                          break;
    case GL_DITHER:                               statistics.disable_GL_DITHER++;                              break;
    case GL_FRAMEBUFFER_SRGB:                     statistics.disable_GL_FRAMEBUFFER_SRGB++;                    break;
    case GL_LINE_SMOOTH:                          statistics.disable_GL_LINE_SMOOTH++;                         break;
    case GL_MULTISAMPLE:                          statistics.disable_GL_MULTISAMPLE++;                         break;
    case GL_POLYGON_OFFSET_FILL:                  statistics.disable_GL_POLYGON_OFFSET_FILL++;                 break;
    case GL_POLYGON_OFFSET_LINE:                  statistics.disable_GL_POLYGON_OFFSET_LINE++;                 break;
    case GL_POLYGON_OFFSET_POINT:                 statistics.disable_GL_POLYGON_OFFSET_POINT++;                break;
    case GL_POLYGON_SMOOTH:                       statistics.disable_GL_POLYGON_SMOOTH++;                      break;
    case GL_PRIMITIVE_RESTART:                    statistics.disable_GL_PRIMITIVE_RESTART++;                   break;
    case GL_PRIMITIVE_RESTART_FIXED_INDEX:        statistics.disable_GL_PRIMITIVE_RESTART_FIXED_INDEX++;       break;
    case GL_PROGRAM_POINT_SIZE:                   statistics.disable_GL_PROGRAM_POINT_SIZE++;                  break;
    case GL_RESCALE_NORMAL:                       statistics.disable_GL_RESCALE_NORMAL++;                      break;
    case GL_SAMPLE_ALPHA_TO_COVERAGE:             statistics.disable_GL_SAMPLE_ALPHA_TO_COVERAGE++;            break;
    case GL_SAMPLE_ALPHA_TO_ONE:                  statistics.disable_GL_SAMPLE_ALPHA_TO_ONE++;                 break;
    case GL_SAMPLE_COVERAGE:                      statistics.disable_GL_SAMPLE_COVERAGE++;                     break;
    case GL_SAMPLE_MASK:                          statistics.disable_GL_SAMPLE_MASK++;                         break;
    case GL_SCISSOR_TEST:                         statistics.disable_GL_SCISSOR_TEST++;                        break;
    case GL_STENCIL_TEST:                         statistics.disable_GL_STENCIL_TEST++;                        break;
    case GL_TEXTURE_2D:                           statistics.disable_GL_TEXTURE_2D++;                          break;
    case GL_TEXTURE_CUBE_MAP_SEAMLESS:            statistics.disable_GL_TEXTURE_CUBE_MAP_SEAMLESS++;           break;
    default: break;
  }

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisable)(cap);
}

static void REGAL_CALL statistics_glDrawBuffer(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffer)(mode);
}

static void REGAL_CALL statistics_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawPixels++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawPixels)(width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glEdgeFlag(GLboolean flag)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlag++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlag)(flag);
}

static void REGAL_CALL statistics_glEdgeFlagv(const GLboolean *flag)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlagv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlagv)(flag);
}

static void REGAL_CALL statistics_glEnable(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnable++;

  switch (cap)
  {
    case GL_BLEND:                                statistics.enable_GL_BLEND++;                                break;
    case GL_CLIP_DISTANCE0:                       statistics.enable_GL_CLIP_DISTANCE0++;                       break;
    case GL_CLIP_DISTANCE1:                       statistics.enable_GL_CLIP_DISTANCE1++;                       break;
    case GL_CLIP_DISTANCE2:                       statistics.enable_GL_CLIP_DISTANCE2++;                       break;
    case GL_CLIP_DISTANCE3:                       statistics.enable_GL_CLIP_DISTANCE3++;                       break;
    case GL_CLIP_DISTANCE4:                       statistics.enable_GL_CLIP_DISTANCE4++;                       break;
    case GL_CLIP_DISTANCE5:                       statistics.enable_GL_CLIP_DISTANCE5++;                       break;
    case GL_CLIP_DISTANCE6:                       statistics.enable_GL_CLIP_DISTANCE6++;                       break;
    case GL_CLIP_DISTANCE7:                       statistics.enable_GL_CLIP_DISTANCE7++;                       break;
    case GL_COLOR_LOGIC_OP:                       statistics.enable_GL_COLOR_LOGIC_OP++;                       break;
    case GL_CULL_FACE:                            statistics.enable_GL_CULL_FACE++;                            break;
    case GL_DEBUG_OUTPUT:                         statistics.enable_GL_DEBUG_OUTPUT++;                         break;
    case GL_DEBUG_OUTPUT_SYNCHRONOUS:             statistics.enable_GL_DEBUG_OUTPUT_SYNCHRONOUS++;             break;
    case GL_DEPTH_CLAMP:                          statistics.enable_GL_DEPTH_CLAMP++;                          break;
    case GL_DEPTH_TEST:                           statistics.enable_GL_DEPTH_TEST++;                           break;
    case GL_DITHER:                               statistics.enable_GL_DITHER++;                               break;
    case GL_FRAMEBUFFER_SRGB:                     statistics.enable_GL_FRAMEBUFFER_SRGB++;                     break;
    case GL_LINE_SMOOTH:                          statistics.enable_GL_LINE_SMOOTH++;                          break;
    case GL_MULTISAMPLE:                          statistics.enable_GL_MULTISAMPLE++;                          break;
    case GL_POLYGON_OFFSET_FILL:                  statistics.enable_GL_POLYGON_OFFSET_FILL++;                  break;
    case GL_POLYGON_OFFSET_LINE:                  statistics.enable_GL_POLYGON_OFFSET_LINE++;                  break;
    case GL_POLYGON_OFFSET_POINT:                 statistics.enable_GL_POLYGON_OFFSET_POINT++;                 break;
    case GL_POLYGON_SMOOTH:                       statistics.enable_GL_POLYGON_SMOOTH++;                       break;
    case GL_PRIMITIVE_RESTART:                    statistics.enable_GL_PRIMITIVE_RESTART++;                    break;
    case GL_PRIMITIVE_RESTART_FIXED_INDEX:        statistics.enable_GL_PRIMITIVE_RESTART_FIXED_INDEX++;        break;
    case GL_PROGRAM_POINT_SIZE:                   statistics.enable_GL_PROGRAM_POINT_SIZE++;                   break;
    case GL_RESCALE_NORMAL:                       statistics.enable_GL_RESCALE_NORMAL++;                       break;
    case GL_SAMPLE_ALPHA_TO_COVERAGE:             statistics.enable_GL_SAMPLE_ALPHA_TO_COVERAGE++;             break;
    case GL_SAMPLE_ALPHA_TO_ONE:                  statistics.enable_GL_SAMPLE_ALPHA_TO_ONE++;                  break;
    case GL_SAMPLE_COVERAGE:                      statistics.enable_GL_SAMPLE_COVERAGE++;                      break;
    case GL_SAMPLE_MASK:                          statistics.enable_GL_SAMPLE_MASK++;                          break;
    case GL_SCISSOR_TEST:                         statistics.enable_GL_SCISSOR_TEST++;                         break;
    case GL_STENCIL_TEST:                         statistics.enable_GL_STENCIL_TEST++;                         break;
    case GL_TEXTURE_2D:                           statistics.enable_GL_TEXTURE_2D++;                           break;
    case GL_TEXTURE_CUBE_MAP_SEAMLESS:            statistics.enable_GL_TEXTURE_CUBE_MAP_SEAMLESS++;            break;
    default: break;
  }

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnable)(cap);
}

static void REGAL_CALL statistics_glEnd(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnd)();
}

static void REGAL_CALL statistics_glEndList(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndList++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndList)();
}

static void REGAL_CALL statistics_glEvalCoord1d(GLdouble u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord1d)(u);
}

static void REGAL_CALL statistics_glEvalCoord1dv(const GLdouble *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord1dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord1dv)(u);
}

static void REGAL_CALL statistics_glEvalCoord1f(GLfloat u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord1f)(u);
}

static void REGAL_CALL statistics_glEvalCoord1fv(const GLfloat *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord1fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord1fv)(u);
}

static void REGAL_CALL statistics_glEvalCoord2d(GLdouble u, GLdouble v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord2d)(u, v);
}

static void REGAL_CALL statistics_glEvalCoord2dv(const GLdouble *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord2dv)(u);
}

static void REGAL_CALL statistics_glEvalCoord2f(GLfloat u, GLfloat v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord2f)(u, v);
}

static void REGAL_CALL statistics_glEvalCoord2fv(const GLfloat *u)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalCoord2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalCoord2fv)(u);
}

static void REGAL_CALL statistics_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalMesh1++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalMesh1)(mode, i1, i2);
}

static void REGAL_CALL statistics_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalMesh2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalMesh2)(mode, i1, i2, j1, j2);
}

static void REGAL_CALL statistics_glEvalPoint1(GLint i)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalPoint1++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalPoint1)(i);
}

static void REGAL_CALL statistics_glEvalPoint2(GLint i, GLint j)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalPoint2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalPoint2)(i, j);
}

static void REGAL_CALL statistics_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFeedbackBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFeedbackBuffer)(size, type, buffer);
}

static void REGAL_CALL statistics_glFinish(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinish++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinish)();
}

static void REGAL_CALL statistics_glFlush(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlush++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlush)();
}

static void REGAL_CALL statistics_glFogf(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogf)(pname, param);
}

static void REGAL_CALL statistics_glFogfv(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogfv)(pname, params);
}

static void REGAL_CALL statistics_glFogi(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogi)(pname, param);
}

static void REGAL_CALL statistics_glFogiv(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogiv)(pname, params);
}

static void REGAL_CALL statistics_glFrontFace(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrontFace++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrontFace)(mode);
}

static void REGAL_CALL statistics_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrustum++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrustum)(left, right, bottom, top, zNear, zFar);
}

static GLuint REGAL_CALL statistics_glGenLists(GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenLists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenLists)(range);
  return ret;
}

static void REGAL_CALL statistics_glGetBooleanv(GLenum pname, GLboolean *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBooleanv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBooleanv)(pname, params);
}

static void REGAL_CALL statistics_glGetClipPlane(GLenum plane, GLdouble *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetClipPlane++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetClipPlane)(plane, equation);
}

static void REGAL_CALL statistics_glGetDoublev(GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDoublev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDoublev)(pname, params);
}

static GLenum REGAL_CALL statistics_glGetError(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetError++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glGetError)();
  return ret;
}

static void REGAL_CALL statistics_glGetFloatv(GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFloatv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFloatv)(pname, params);
}

static void REGAL_CALL statistics_glGetIntegerv(GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegerv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegerv)(pname, params);
}

static void REGAL_CALL statistics_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLightfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLightfv)(light, pname, params);
}

static void REGAL_CALL statistics_glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLightiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLightiv)(light, pname, params);
}

static void REGAL_CALL statistics_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapdv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapdv)(target, query, v);
}

static void REGAL_CALL statistics_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapfv)(target, query, v);
}

static void REGAL_CALL statistics_glGetMapiv(GLenum target, GLenum query, GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapiv)(target, query, v);
}

static void REGAL_CALL statistics_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMaterialfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMaterialfv)(face, pname, params);
}

static void REGAL_CALL statistics_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMaterialiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMaterialiv)(face, pname, params);
}

static void REGAL_CALL statistics_glGetPixelMapfv(GLenum map, GLfloat *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelMapfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelMapfv)(map, values);
}

static void REGAL_CALL statistics_glGetPixelMapuiv(GLenum map, GLuint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelMapuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelMapuiv)(map, values);
}

static void REGAL_CALL statistics_glGetPixelMapusv(GLenum map, GLushort *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelMapusv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelMapusv)(map, values);
}

static void REGAL_CALL statistics_glGetPolygonStipple(GLubyte *mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPolygonStipple++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPolygonStipple)(mask);
}

static const GLubyte *REGAL_CALL statistics_glGetString(GLenum name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetString++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  const GLubyte * ret = _next->call(&_next->glGetString)(name);
  return ret;
}

static void REGAL_CALL statistics_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexEnvfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexEnvfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexEnviv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexEnviv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGendv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGendv)(coord, pname, params);
}

static void REGAL_CALL statistics_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGenfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGenfv)(coord, pname, params);
}

static void REGAL_CALL statistics_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGeniv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGeniv)(coord, pname, params);
}

static void REGAL_CALL statistics_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexImage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexImage)(target, level, format, type, pixels);
}

static void REGAL_CALL statistics_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexLevelParameterfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexLevelParameterfv)(target, level, pname, params);
}

static void REGAL_CALL statistics_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexLevelParameteriv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexLevelParameteriv)(target, level, pname, params);
}

static void REGAL_CALL statistics_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameteriv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glHint(GLenum target, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glHint++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glHint)(target, mode);
}

static void REGAL_CALL statistics_glIndexMask(GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexMask++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexMask)(mask);
}

static void REGAL_CALL statistics_glIndexd(GLdouble c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexd)(c);
}

static void REGAL_CALL statistics_glIndexdv(const GLdouble *c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexdv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexdv)(c);
}

static void REGAL_CALL statistics_glIndexf(GLfloat c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexf)(c);
}

static void REGAL_CALL statistics_glIndexfv(const GLfloat *c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexfv)(c);
}

static void REGAL_CALL statistics_glIndexi(GLint c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexi)(c);
}

static void REGAL_CALL statistics_glIndexiv(const GLint *c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexiv)(c);
}

static void REGAL_CALL statistics_glIndexs(GLshort c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexs++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexs)(c);
}

static void REGAL_CALL statistics_glIndexsv(const GLshort *c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexsv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexsv)(c);
}

static void REGAL_CALL statistics_glInitNames(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInitNames++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInitNames)();
}

static GLboolean REGAL_CALL statistics_glIsEnabled(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsEnabled++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsEnabled)(cap);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsList(GLuint list)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsList++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsList)(list);
  return ret;
}

static void REGAL_CALL statistics_glLightModelf(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModelf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModelf)(pname, param);
}

static void REGAL_CALL statistics_glLightModelfv(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModelfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModelfv)(pname, params);
}

static void REGAL_CALL statistics_glLightModeli(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModeli++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModeli)(pname, param);
}

static void REGAL_CALL statistics_glLightModeliv(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModeliv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModeliv)(pname, params);
}

static void REGAL_CALL statistics_glLightf(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightf)(light, pname, param);
}

static void REGAL_CALL statistics_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightfv)(light, pname, params);
}

static void REGAL_CALL statistics_glLighti(GLenum light, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLighti++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLighti)(light, pname, param);
}

static void REGAL_CALL statistics_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightiv)(light, pname, params);
}

static void REGAL_CALL statistics_glLineStipple(GLint factor, GLushort pattern)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLineStipple++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLineStipple)(factor, pattern);
}

static void REGAL_CALL statistics_glLineWidth(GLfloat width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLineWidth++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLineWidth)(width);
}

static void REGAL_CALL statistics_glListBase(GLuint base)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glListBase++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glListBase)(base);
}

static void REGAL_CALL statistics_glLoadIdentity(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadIdentity++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadIdentity)();
}

static void REGAL_CALL statistics_glLoadMatrixd(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadMatrixd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadMatrixd)(m);
}

static void REGAL_CALL statistics_glLoadMatrixf(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadMatrixf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadMatrixf)(m);
}

static void REGAL_CALL statistics_glLoadName(GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadName++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadName)(name);
}

static void REGAL_CALL statistics_glLogicOp(GLenum opcode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLogicOp++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLogicOp)(opcode);
}

static void REGAL_CALL statistics_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMap1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMap1d)(target, u1, u2, stride, order, points);
}

static void REGAL_CALL statistics_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMap1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMap1f)(target, u1, u2, stride, order, points);
}

static void REGAL_CALL statistics_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMap2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL statistics_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMap2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL statistics_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapGrid1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapGrid1d)(un, u1, u2);
}

static void REGAL_CALL statistics_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapGrid1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapGrid1f)(un, u1, u2);
}

static void REGAL_CALL statistics_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapGrid2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapGrid2d)(un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL statistics_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapGrid2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapGrid2f)(un, u1, u2, vn, v1, v2);
}

static void REGAL_CALL statistics_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMaterialf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMaterialf)(face, pname, param);
}

static void REGAL_CALL statistics_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMaterialfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMaterialfv)(face, pname, params);
}

static void REGAL_CALL statistics_glMateriali(GLenum face, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMateriali++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMateriali)(face, pname, param);
}

static void REGAL_CALL statistics_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMaterialiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMaterialiv)(face, pname, params);
}

static void REGAL_CALL statistics_glMatrixMode(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixMode++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixMode)(mode);
}

static void REGAL_CALL statistics_glMultMatrixd(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultMatrixd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultMatrixd)(m);
}

static void REGAL_CALL statistics_glMultMatrixf(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultMatrixf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultMatrixf)(m);
}

static void REGAL_CALL statistics_glNewList(GLuint list, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNewList++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNewList)(list, mode);
}

static void REGAL_CALL statistics_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3b++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3b)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3bv(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3bv)(v);
}

static void REGAL_CALL statistics_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3d)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3dv)(v);
}

static void REGAL_CALL statistics_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3f)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3fv)(v);
}

static void REGAL_CALL statistics_glNormal3i(GLint nx, GLint ny, GLint nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3i)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3iv)(v);
}

static void REGAL_CALL statistics_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3s)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3sv)(v);
}

static void REGAL_CALL statistics_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glOrtho++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glOrtho)(left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glPassThrough(GLfloat token)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPassThrough++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPassThrough)(token);
}

static void REGAL_CALL statistics_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelMapfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelMapfv)(map, mapsize, values);
}

static void REGAL_CALL statistics_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelMapuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelMapuiv)(map, mapsize, values);
}

static void REGAL_CALL statistics_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelMapusv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelMapusv)(map, mapsize, values);
}

static void REGAL_CALL statistics_glPixelStoref(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelStoref++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelStoref)(pname, param);
}

static void REGAL_CALL statistics_glPixelStorei(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelStorei++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelStorei)(pname, param);
}

static void REGAL_CALL statistics_glPixelTransferf(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransferf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransferf)(pname, param);
}

static void REGAL_CALL statistics_glPixelTransferi(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransferi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransferi)(pname, param);
}

static void REGAL_CALL statistics_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelZoom++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelZoom)(xfactor, yfactor);
}

static void REGAL_CALL statistics_glPointSize(GLfloat size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointSize++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointSize)(size);
}

static void REGAL_CALL statistics_glPolygonMode(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPolygonMode++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPolygonMode)(face, mode);
}

static void REGAL_CALL statistics_glPolygonStipple(const GLubyte *mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPolygonStipple++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPolygonStipple)(mask);
}

static void REGAL_CALL statistics_glPopAttrib(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopAttrib++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopAttrib)();
}

static void REGAL_CALL statistics_glPopMatrix(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopMatrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopMatrix)();
}

static void REGAL_CALL statistics_glPopName(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopName++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopName)();
}

static void REGAL_CALL statistics_glPushAttrib(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushAttrib++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushAttrib)(mask);
}

static void REGAL_CALL statistics_glPushMatrix(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushMatrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushMatrix)();
}

static void REGAL_CALL statistics_glPushName(GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushName++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushName)(name);
}

static void REGAL_CALL statistics_glRasterPos2d(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2d)(x, y);
}

static void REGAL_CALL statistics_glRasterPos2dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2dv)(v);
}

static void REGAL_CALL statistics_glRasterPos2f(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2f)(x, y);
}

static void REGAL_CALL statistics_glRasterPos2fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2fv)(v);
}

static void REGAL_CALL statistics_glRasterPos2i(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2i)(x, y);
}

static void REGAL_CALL statistics_glRasterPos2iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2iv)(v);
}

static void REGAL_CALL statistics_glRasterPos2s(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2s)(x, y);
}

static void REGAL_CALL statistics_glRasterPos2sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos2sv)(v);
}

static void REGAL_CALL statistics_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3d)(x, y, z);
}

static void REGAL_CALL statistics_glRasterPos3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3dv)(v);
}

static void REGAL_CALL statistics_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3f)(x, y, z);
}

static void REGAL_CALL statistics_glRasterPos3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3fv)(v);
}

static void REGAL_CALL statistics_glRasterPos3i(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3i)(x, y, z);
}

static void REGAL_CALL statistics_glRasterPos3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3iv)(v);
}

static void REGAL_CALL statistics_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3s)(x, y, z);
}

static void REGAL_CALL statistics_glRasterPos3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos3sv)(v);
}

static void REGAL_CALL statistics_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4d)(x, y, z, w);
}

static void REGAL_CALL statistics_glRasterPos4dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4dv)(v);
}

static void REGAL_CALL statistics_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4f)(x, y, z, w);
}

static void REGAL_CALL statistics_glRasterPos4fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4fv)(v);
}

static void REGAL_CALL statistics_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4i)(x, y, z, w);
}

static void REGAL_CALL statistics_glRasterPos4iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4iv)(v);
}

static void REGAL_CALL statistics_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4s)(x, y, z, w);
}

static void REGAL_CALL statistics_glRasterPos4sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRasterPos4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRasterPos4sv)(v);
}

static void REGAL_CALL statistics_glReadBuffer(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadBuffer)(mode);
}

static void REGAL_CALL statistics_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadPixels++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadPixels)(x, y, width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectd)(x1, y1, x2, y2);
}

static void REGAL_CALL statistics_glRectdv(const GLdouble *v1, const GLdouble *v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectdv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectdv)(v1, v2);
}

static void REGAL_CALL statistics_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectf)(x1, y1, x2, y2);
}

static void REGAL_CALL statistics_glRectfv(const GLfloat *v1, const GLfloat *v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectfv)(v1, v2);
}

static void REGAL_CALL statistics_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRecti++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRecti)(x1, y1, x2, y2);
}

static void REGAL_CALL statistics_glRectiv(const GLint *v1, const GLint *v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectiv)(v1, v2);
}

static void REGAL_CALL statistics_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRects)(x1, y1, x2, y2);
}

static void REGAL_CALL statistics_glRectsv(const GLshort *v1, const GLshort *v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRectsv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRectsv)(v1, v2);
}

static GLint REGAL_CALL statistics_glRenderMode(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderMode++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glRenderMode)(mode);
  return ret;
}

static void REGAL_CALL statistics_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRotated++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRotated)(angle, x, y, z);
}

static void REGAL_CALL statistics_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRotatef++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRotatef)(angle, x, y, z);
}

static void REGAL_CALL statistics_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScaled++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScaled)(x, y, z);
}

static void REGAL_CALL statistics_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScalef++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScalef)(x, y, z);
}

static void REGAL_CALL statistics_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScissor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScissor)(x, y, width, height);
}

static void REGAL_CALL statistics_glSelectBuffer(GLsizei size, GLuint *buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSelectBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSelectBuffer)(size, buffer);
}

static void REGAL_CALL statistics_glShadeModel(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShadeModel++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShadeModel)(mode);
}

static void REGAL_CALL statistics_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilFunc++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilFunc)(func, ref, mask);
}

static void REGAL_CALL statistics_glStencilMask(GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilMask++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilMask)(mask);
}

static void REGAL_CALL statistics_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilOp++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilOp)(fail, zfail, zpass);
}

static void REGAL_CALL statistics_glTexCoord1d(GLdouble s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1d)(s);
}

static void REGAL_CALL statistics_glTexCoord1dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1dv)(v);
}

static void REGAL_CALL statistics_glTexCoord1f(GLfloat s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1f)(s);
}

static void REGAL_CALL statistics_glTexCoord1fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1fv)(v);
}

static void REGAL_CALL statistics_glTexCoord1i(GLint s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1i)(s);
}

static void REGAL_CALL statistics_glTexCoord1iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1iv)(v);
}

static void REGAL_CALL statistics_glTexCoord1s(GLshort s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1s)(s);
}

static void REGAL_CALL statistics_glTexCoord1sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1sv)(v);
}

static void REGAL_CALL statistics_glTexCoord2d(GLdouble s, GLdouble t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2d)(s, t);
}

static void REGAL_CALL statistics_glTexCoord2dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2dv)(v);
}

static void REGAL_CALL statistics_glTexCoord2f(GLfloat s, GLfloat t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2f)(s, t);
}

static void REGAL_CALL statistics_glTexCoord2fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fv)(v);
}

static void REGAL_CALL statistics_glTexCoord2i(GLint s, GLint t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2i)(s, t);
}

static void REGAL_CALL statistics_glTexCoord2iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2iv)(v);
}

static void REGAL_CALL statistics_glTexCoord2s(GLshort s, GLshort t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2s)(s, t);
}

static void REGAL_CALL statistics_glTexCoord2sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2sv)(v);
}

static void REGAL_CALL statistics_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3d)(s, t, r);
}

static void REGAL_CALL statistics_glTexCoord3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3dv)(v);
}

static void REGAL_CALL statistics_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3f)(s, t, r);
}

static void REGAL_CALL statistics_glTexCoord3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3fv)(v);
}

static void REGAL_CALL statistics_glTexCoord3i(GLint s, GLint t, GLint r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3i)(s, t, r);
}

static void REGAL_CALL statistics_glTexCoord3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3iv)(v);
}

static void REGAL_CALL statistics_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3s)(s, t, r);
}

static void REGAL_CALL statistics_glTexCoord3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3sv)(v);
}

static void REGAL_CALL statistics_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4d)(s, t, r, q);
}

static void REGAL_CALL statistics_glTexCoord4dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4dv)(v);
}

static void REGAL_CALL statistics_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4f)(s, t, r, q);
}

static void REGAL_CALL statistics_glTexCoord4fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4fv)(v);
}

static void REGAL_CALL statistics_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4i)(s, t, r, q);
}

static void REGAL_CALL statistics_glTexCoord4iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4iv)(v);
}

static void REGAL_CALL statistics_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4s)(s, t, r, q);
}

static void REGAL_CALL statistics_glTexCoord4sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4sv)(v);
}

static void REGAL_CALL statistics_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnvf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnvf)(target, pname, param);
}

static void REGAL_CALL statistics_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnvfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnvfv)(target, pname, params);
}

static void REGAL_CALL statistics_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnvi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnvi)(target, pname, param);
}

static void REGAL_CALL statistics_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnviv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnviv)(target, pname, params);
}

static void REGAL_CALL statistics_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGend)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGendv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGendv)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenf)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenfv)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGeni++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGeni)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGeniv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGeniv)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterf)(target, pname, param);
}

static void REGAL_CALL statistics_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameteri++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameteri)(target, pname, param);
}

static void REGAL_CALL statistics_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameteriv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTranslated++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTranslated)(x, y, z);
}

static void REGAL_CALL statistics_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTranslatef++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTranslatef)(x, y, z);
}

static void REGAL_CALL statistics_glVertex2d(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2d)(x, y);
}

static void REGAL_CALL statistics_glVertex2dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2dv)(v);
}

static void REGAL_CALL statistics_glVertex2f(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2f)(x, y);
}

static void REGAL_CALL statistics_glVertex2fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2fv)(v);
}

static void REGAL_CALL statistics_glVertex2i(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2i)(x, y);
}

static void REGAL_CALL statistics_glVertex2iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2iv)(v);
}

static void REGAL_CALL statistics_glVertex2s(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2s)(x, y);
}

static void REGAL_CALL statistics_glVertex2sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2sv)(v);
}

static void REGAL_CALL statistics_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3d)(x, y, z);
}

static void REGAL_CALL statistics_glVertex3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3dv)(v);
}

static void REGAL_CALL statistics_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3f)(x, y, z);
}

static void REGAL_CALL statistics_glVertex3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3fv)(v);
}

static void REGAL_CALL statistics_glVertex3i(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3i)(x, y, z);
}

static void REGAL_CALL statistics_glVertex3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3iv)(v);
}

static void REGAL_CALL statistics_glVertex3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3s)(x, y, z);
}

static void REGAL_CALL statistics_glVertex3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3sv)(v);
}

static void REGAL_CALL statistics_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4d)(x, y, z, w);
}

static void REGAL_CALL statistics_glVertex4dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4dv)(v);
}

static void REGAL_CALL statistics_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4f)(x, y, z, w);
}

static void REGAL_CALL statistics_glVertex4fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4fv)(v);
}

static void REGAL_CALL statistics_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4i)(x, y, z, w);
}

static void REGAL_CALL statistics_glVertex4iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4iv)(v);
}

static void REGAL_CALL statistics_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4s)(x, y, z, w);
}

static void REGAL_CALL statistics_glVertex4sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4sv)(v);
}

static void REGAL_CALL statistics_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glViewport++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glViewport)(x, y, width, height);
}

// GL_VERSION_1_1

static GLboolean REGAL_CALL statistics_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAreTexturesResident++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glAreTexturesResident)(n, textures, residences);
  return ret;
}

static void REGAL_CALL statistics_glArrayElement(GLint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glArrayElement++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glArrayElement)(index);
}

static void REGAL_CALL statistics_glBindTexture(GLenum target, GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindTexture)(target, texture);
}

static void REGAL_CALL statistics_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorPointer)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexImage1D)(target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL statistics_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL statistics_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage1D)(target, level, xoffset, x, y, width);
}

static void REGAL_CALL statistics_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glDeleteTextures(GLsizei n, const GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteTextures++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteTextures)(n, textures);
}

static void REGAL_CALL statistics_glDisableClientState(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableClientState++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableClientState)(cap);
}

static void REGAL_CALL statistics_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArrays)(mode, first, count);
}

static void REGAL_CALL statistics_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElements++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElements)(mode, count, type, indices);
}

static void REGAL_CALL statistics_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlagPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlagPointer)(stride, pointer);
}

static void REGAL_CALL statistics_glEnableClientState(GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableClientState++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableClientState)(cap);
}

static void REGAL_CALL statistics_glGenTextures(GLsizei n, GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenTextures++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenTextures)(n, textures);
}

static void REGAL_CALL statistics_glGetPointerv(GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPointerv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPointerv)(pname, params);
}

static void REGAL_CALL statistics_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexPointer)(type, stride, pointer);
}

static void REGAL_CALL statistics_glIndexub(GLubyte c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexub++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexub)(c);
}

static void REGAL_CALL statistics_glIndexubv(const GLubyte *c)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexubv)(c);
}

static void REGAL_CALL statistics_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInterleavedArrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInterleavedArrays)(format, stride, pointer);
}

static GLboolean REGAL_CALL statistics_glIsTexture(GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTexture)(texture);
  return ret;
}

static void REGAL_CALL statistics_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalPointer)(type, stride, pointer);
}

static void REGAL_CALL statistics_glPolygonOffset(GLfloat factor, GLfloat units)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPolygonOffset++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPolygonOffset)(factor, units);
}

static void REGAL_CALL statistics_glPopClientAttrib(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopClientAttrib++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopClientAttrib)();
}

static void REGAL_CALL statistics_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPrioritizeTextures++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPrioritizeTextures)(n, textures, priorities);
}

static void REGAL_CALL statistics_glPushClientAttrib(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushClientAttrib++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushClientAttrib)(mask);
}

static void REGAL_CALL statistics_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordPointer)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage1D)(target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexPointer)(size, type, stride, pointer);
}

// GL_VERSION_1_2

static void REGAL_CALL statistics_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendColor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendColor)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glBlendEquation(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquation)(mode);
}

static void REGAL_CALL statistics_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage3D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawRangeElements++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawRangeElements)(mode, start, end, count, type, indices);
}

static void REGAL_CALL statistics_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage3D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage3D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_VERSION_1_3

static void REGAL_CALL statistics_glActiveTexture(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveTexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveTexture)(texture);
}

static void REGAL_CALL statistics_glClientActiveTexture(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientActiveTexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClientActiveTexture)(texture);
}

static void REGAL_CALL statistics_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage3D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage1D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage2D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage3D++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL statistics_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCompressedTexImage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCompressedTexImage)(target, lod, img);
}

static void REGAL_CALL statistics_glLoadTransposeMatrixd(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadTransposeMatrixd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadTransposeMatrixd)(m);
}

static void REGAL_CALL statistics_glLoadTransposeMatrixf(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadTransposeMatrixf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadTransposeMatrixf)(m);
}

static void REGAL_CALL statistics_glMultTransposeMatrixd(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultTransposeMatrixd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultTransposeMatrixd)(m);
}

static void REGAL_CALL statistics_glMultTransposeMatrixf(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultTransposeMatrixf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultTransposeMatrixf)(m);
}

static void REGAL_CALL statistics_glMultiTexCoord1d(GLenum target, GLdouble s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1d)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1dv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1f(GLenum target, GLfloat s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1f)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1fv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1i(GLenum target, GLint s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1i)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1iv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1s(GLenum target, GLshort s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1s)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1sv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2d)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2dv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2f)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2fv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2i)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2iv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2s)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2sv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3d)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3dv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3f)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3fv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3i)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3iv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3s)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3sv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4d)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4dv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4f)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4fv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4i)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4iv)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4s)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4sv)(target, v);
}

static void REGAL_CALL statistics_glSampleCoverage(GLclampf value, GLboolean invert)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleCoverage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleCoverage)(value, invert);
}

// GL_VERSION_1_4

static void REGAL_CALL statistics_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

static void REGAL_CALL statistics_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordPointer)(type, stride, pointer);
}

static void REGAL_CALL statistics_glFogCoordd(GLdouble coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordd++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordd)(coord);
}

static void REGAL_CALL statistics_glFogCoorddv(const GLdouble *coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoorddv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoorddv)(coord);
}

static void REGAL_CALL statistics_glFogCoordf(GLfloat coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordf)(coord);
}

static void REGAL_CALL statistics_glFogCoordfv(const GLfloat *coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordfv)(coord);
}

static void REGAL_CALL statistics_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawArrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawArrays)(mode, first, count, primcount);
}

static void REGAL_CALL statistics_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElements++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElements)(mode, count, type, indices, primcount);
}

static void REGAL_CALL statistics_glPointParameterf(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterf++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterf)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterfv(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfv)(pname, params);
}

static void REGAL_CALL statistics_glPointParameteri(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameteri++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameteri)(pname, param);
}

static void REGAL_CALL statistics_glPointParameteriv(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameteriv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameteriv)(pname, params);
}

static void REGAL_CALL statistics_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3b++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3b)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3bv(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3bv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3d)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3dv(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3dv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3f)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3fv(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3fv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3i)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3iv(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3iv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3s)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3sv(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3sv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ub++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ub)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3ubv(const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ubv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ui)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3uiv(const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3uiv)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3us++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3us)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3usv(const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3usv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3usv)(v);
}

static void REGAL_CALL statistics_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorPointer)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glWindowPos2d(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2d)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2dv(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2dv)(p);
}

static void REGAL_CALL statistics_glWindowPos2f(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2f)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2fv(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2fv)(p);
}

static void REGAL_CALL statistics_glWindowPos2i(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2i)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2iv(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2iv)(p);
}

static void REGAL_CALL statistics_glWindowPos2s(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2s)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2sv(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2sv)(p);
}

static void REGAL_CALL statistics_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3d)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3dv(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3dv)(p);
}

static void REGAL_CALL statistics_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3f)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3fv(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3fv)(p);
}

static void REGAL_CALL statistics_glWindowPos3i(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3i)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3iv(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3iv)(p);
}

static void REGAL_CALL statistics_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3s)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3sv(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3sv)(p);
}

// GL_VERSION_1_5

static void REGAL_CALL statistics_glBeginQuery(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginQuery++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginQuery)(target, id);
}

static void REGAL_CALL statistics_glBindBuffer(GLenum target, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBuffer)(target, buffer);
}

static void REGAL_CALL statistics_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferData++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferData)(target, size, data, usage);
}

static void REGAL_CALL statistics_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferSubData++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferSubData)(target, offset, size, data);
}

static void REGAL_CALL statistics_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteBuffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteBuffers)(n, buffers);
}

static void REGAL_CALL statistics_glDeleteQueries(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteQueries++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteQueries)(n, ids);
}

static void REGAL_CALL statistics_glEndQuery(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndQuery++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndQuery)(target);
}

static void REGAL_CALL statistics_glGenBuffers(GLsizei n, GLuint *buffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenBuffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenBuffers)(n, buffers);
}

static void REGAL_CALL statistics_glGenQueries(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenQueries++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenQueries)(n, ids);
}

static void REGAL_CALL statistics_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferParameteriv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferPointerv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferPointerv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferSubData++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferSubData)(target, offset, size, data);
}

static void REGAL_CALL statistics_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectiv)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectuiv)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryiv)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsBuffer(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsBuffer)(buffer);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsQuery(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsQuery++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsQuery)(id);
  return ret;
}

static GLvoid *REGAL_CALL statistics_glMapBuffer(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapBuffer)(target, access);
  return ret;
}

static GLboolean REGAL_CALL statistics_glUnmapBuffer(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glUnmapBuffer)(target);
  return ret;
}

// GL_VERSION_2_0

static void REGAL_CALL statistics_glAttachShader(GLuint program, GLuint shader)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAttachShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAttachShader)(program, shader);
}

static void REGAL_CALL statistics_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindAttribLocation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindAttribLocation)(program, index, name);
}

static void REGAL_CALL statistics_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparate)(modeRGB, modeAlpha);
}

static void REGAL_CALL statistics_glCompileShader(GLuint shader)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompileShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompileShader)(shader);
}

static GLuint REGAL_CALL statistics_glCreateProgram(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glCreateProgram)();
  return ret;
}

static GLuint REGAL_CALL statistics_glCreateShader(GLenum type)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glCreateShader)(type);
  return ret;
}

static void REGAL_CALL statistics_glDeleteProgram(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteProgram)(program);
}

static void REGAL_CALL statistics_glDeleteShader(GLuint shader)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteShader)(shader);
}

static void REGAL_CALL statistics_glDetachShader(GLuint program, GLuint shader)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDetachShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDetachShader)(program, shader);
}

static void REGAL_CALL statistics_glDisableVertexAttribArray(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVertexAttribArray++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVertexAttribArray)(index);
}

static void REGAL_CALL statistics_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffers)(n, bufs);
}

static void REGAL_CALL statistics_glEnableVertexAttribArray(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVertexAttribArray++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVertexAttribArray)(index);
}

static void REGAL_CALL statistics_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveAttrib++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveAttrib)(program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL statistics_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniform)(program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL statistics_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetAttachedShaders++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetAttachedShaders)(program, maxCount, count, shaders);
}

static GLint REGAL_CALL statistics_glGetAttribLocation(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetAttribLocation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetAttribLocation)(program, name);
  return ret;
}

static void REGAL_CALL statistics_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramInfoLog++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramInfoLog)(program, bufSize, length, infoLog);
}

static void REGAL_CALL statistics_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramiv)(program, pname, params);
}

static void REGAL_CALL statistics_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetShaderInfoLog++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetShaderInfoLog)(shader, bufSize, length, infoLog);
}

static void REGAL_CALL statistics_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetShaderSource++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetShaderSource)(shader, bufSize, length, source);
}

static void REGAL_CALL statistics_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetShaderiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetShaderiv)(shader, pname, params);
}

static GLint REGAL_CALL statistics_glGetUniformLocation(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformLocation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetUniformLocation)(program, name);
  return ret;
}

static void REGAL_CALL statistics_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformfv)(program, location, params);
}

static void REGAL_CALL statistics_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformiv)(program, location, params);
}

static void REGAL_CALL statistics_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribPointerv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribPointerv)(index, pname, pointer);
}

static void REGAL_CALL statistics_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribdv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribdv)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribfv)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribiv)(index, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsProgram(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsProgram)(program);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsShader(GLuint shader)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsShader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsShader)(shader);
  return ret;
}

static void REGAL_CALL statistics_glLinkProgram(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLinkProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLinkProgram)(program);
}

static void REGAL_CALL statistics_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderSource++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderSource)(shader, count, string, length);
}

static void REGAL_CALL statistics_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilFuncSeparate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilFuncSeparate)(face, func, ref, mask);
}

static void REGAL_CALL statistics_glStencilMaskSeparate(GLenum face, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilMaskSeparate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilMaskSeparate)(face, mask);
}

static void REGAL_CALL statistics_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilOpSeparate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilOpSeparate)(face, fail, zfail, zpass);
}

static void REGAL_CALL statistics_glUniform1f(GLint location, GLfloat v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1f)(location, v0);
}

static void REGAL_CALL statistics_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1fv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform1i(GLint location, GLint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1i)(location, v0);
}

static void REGAL_CALL statistics_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1iv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2f)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2fv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2i(GLint location, GLint v0, GLint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2i)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2iv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3f)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3fv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3i)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3iv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4f)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4fv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4i)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4iv)(location, count, value);
}

static void REGAL_CALL statistics_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUseProgram(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUseProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUseProgram)(program);
}

static void REGAL_CALL statistics_glValidateProgram(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glValidateProgram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glValidateProgram)(program);
}

static void REGAL_CALL statistics_glVertexAttrib1d(GLuint index, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1d)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1f(GLuint index, GLfloat x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1f)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1fv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1s(GLuint index, GLshort x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1s)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1sv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2d)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2f)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2fv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2s)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2sv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3d)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3f)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3fv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3s)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3sv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nbv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nbv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Niv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Niv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nsv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nsv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nub++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nub)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nubv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nuiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4Nusv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4Nusv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4bv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4d)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4dv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4f++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4f)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4fv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4iv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4iv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4s++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4s)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4sv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4ubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4ubv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4uiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4usv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4usv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
}

// GL_VERSION_2_1

static void REGAL_CALL statistics_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x3fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x4fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x2fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x4fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x4fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x2fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x2fv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x3fv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x3fv)(location, count, transpose, value);
}

// GL_VERSION_3_0

static void REGAL_CALL statistics_glBeginConditionalRender(GLuint id, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginConditionalRender++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginConditionalRender)(id, mode);
}

static void REGAL_CALL statistics_glBeginTransformFeedback(GLenum primitiveMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginTransformFeedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginTransformFeedback)(primitiveMode);
}

static void REGAL_CALL statistics_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFragDataLocation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFragDataLocation)(program, color, name);
}

static void REGAL_CALL statistics_glClampColor(GLenum target, GLenum clamp)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClampColor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClampColor)(target, clamp);
}

static void REGAL_CALL statistics_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferfi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferfi)(buffer, drawbuffer, depth, stencil);
}

static void REGAL_CALL statistics_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferfv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferfv)(buffer, drawbuffer, value);
}

static void REGAL_CALL statistics_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferiv)(buffer, drawbuffer, value);
}

static void REGAL_CALL statistics_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferuiv)(buffer, drawbuffer, value);
}

static void REGAL_CALL statistics_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorMaski++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorMaski)(index, r, g, b, a);
}

static void REGAL_CALL statistics_glDisablei(GLenum cap, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisablei++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisablei)(cap, index);
}

static void REGAL_CALL statistics_glEnablei(GLenum cap, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnablei++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnablei)(cap, index);
}

static void REGAL_CALL statistics_glEndConditionalRender(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndConditionalRender++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndConditionalRender)();
}

static void REGAL_CALL statistics_glEndTransformFeedback(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndTransformFeedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndTransformFeedback)();
}

static void REGAL_CALL statistics_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBooleani_v++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBooleani_v)(target, index, data);
}

static GLint REGAL_CALL statistics_glGetFragDataLocation(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragDataLocation++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetFragDataLocation)(program, name);
  return ret;
}

static const GLubyte *REGAL_CALL statistics_glGetStringi(GLenum name, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetStringi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  const GLubyte * ret = _next->call(&_next->glGetStringi)(name, index);
  return ret;
}

static void REGAL_CALL statistics_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterIiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterIiv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterIuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterIuiv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTransformFeedbackVarying++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL statistics_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformuiv)(program, location, params);
}

static void REGAL_CALL statistics_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribIiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribIiv)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribIuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribIuiv)(index, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsEnabledi(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsEnabledi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsEnabledi)(target, index);
  return ret;
}

static void REGAL_CALL statistics_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterIiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterIiv)(target, pname, params);
}

static void REGAL_CALL statistics_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterIuiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterIuiv)(target, pname, params);
}

static void REGAL_CALL statistics_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTransformFeedbackVaryings++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTransformFeedbackVaryings)(program, count, varyings, bufferMode);
}

static void REGAL_CALL statistics_glUniform1ui(GLint location, GLuint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1ui)(location, v0);
}

static void REGAL_CALL statistics_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1uiv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2ui)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2uiv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3ui)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3uiv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4ui)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4uiv)(location, count, value);
}

static void REGAL_CALL statistics_glVertexAttribI1i(GLuint index, GLint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1i)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribI1iv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1iv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI1ui(GLuint index, GLuint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1ui)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1uiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2i)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribI2iv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2iv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2ui)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2uiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3i)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribI3iv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3iv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3ui)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3uiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4bv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4bv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4i++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4i)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribI4iv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4iv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4iv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4sv(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4sv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4sv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4ubv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4ubv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4ui++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4ui)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4uiv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4uiv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4usv(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4usv++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4usv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribIPointer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribIPointer)(index, size, type, stride, pointer);
}

// GL_VERSION_3_1

static void REGAL_CALL statistics_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysInstanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysInstanced)(mode, start, count, primcount);
}

static void REGAL_CALL statistics_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstanced)(mode, count, type, indices, primcount);
}

static void REGAL_CALL statistics_glPrimitiveRestartIndex(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPrimitiveRestartIndex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPrimitiveRestartIndex)(index);
}

static void REGAL_CALL statistics_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBuffer)(target, internalformat, buffer);
}

// GL_VERSION_3_2

static void REGAL_CALL statistics_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture)(target, attachment, texture, level);
}

static void REGAL_CALL statistics_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferParameteri64v++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferParameteri64v)(target, pname, params);
}

static void REGAL_CALL statistics_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInteger64i_v++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInteger64i_v)(target, index, data);
}

// GL_VERSION_3_3

static void REGAL_CALL statistics_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribDivisor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribDivisor)(index, divisor);
}

// GL_VERSION_4_0

static void REGAL_CALL statistics_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparatei++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);
}

static void REGAL_CALL statistics_glBlendEquationi(GLuint buf, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationi++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationi)(buf, mode);
}

static void REGAL_CALL statistics_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparatei++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL statistics_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFunci++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFunci)(buf, src, dst);
}

// GL_3DFX_tbuffer

static void REGAL_CALL statistics_glTbufferMask3DFX(GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTbufferMask3DFX++;

  statistics.gl_3dfx_tbuffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTbufferMask3DFX)(mask);
}

// GL_AMD_debug_output

static void REGAL_CALL statistics_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageCallbackAMD++;

  statistics.gl_amd_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageCallbackAMD)(callback, userParam);
}

static void REGAL_CALL statistics_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageEnableAMD++;

  statistics.gl_amd_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageEnableAMD)(category, severity, count, ids, enabled);
}

static void REGAL_CALL statistics_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageInsertAMD++;

  statistics.gl_amd_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageInsertAMD)(category, severity, id, length, buf);
}

static GLuint REGAL_CALL statistics_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDebugMessageLogAMD++;

  statistics.gl_amd_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetDebugMessageLogAMD)(count, bufsize, categories, severities, ids, lengths, message);
  return ret;
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL statistics_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationIndexedAMD++;

  statistics.gl_amd_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationIndexedAMD)(buf, mode);
}

static void REGAL_CALL statistics_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparateIndexedAMD++;

  statistics.gl_amd_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);
}

static void REGAL_CALL statistics_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncIndexedAMD++;

  statistics.gl_amd_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncIndexedAMD)(buf, src, dst);
}

static void REGAL_CALL statistics_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparateIndexedAMD++;

  statistics.gl_amd_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

// GL_AMD_interleaved_elements

static void REGAL_CALL statistics_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribParameteriAMD++;

  statistics.gl_amd_interleaved_elements++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribParameteriAMD)(index, pname, param);
}

// GL_AMD_multi_draw_indirect

static void REGAL_CALL statistics_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawArraysIndirectAMD++;

  statistics.gl_amd_multi_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
}

static void REGAL_CALL statistics_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementsIndirectAMD++;

  statistics.gl_amd_multi_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
}

// GL_AMD_name_gen_delete

static void REGAL_CALL statistics_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteNamesAMD++;

  statistics.gl_amd_name_gen_delete++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteNamesAMD)(identifier, num, names);
}

static void REGAL_CALL statistics_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenNamesAMD++;

  statistics.gl_amd_name_gen_delete++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenNamesAMD)(identifier, num, names);
}

static GLboolean REGAL_CALL statistics_glIsNameAMD(GLenum identifier, GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsNameAMD++;

  statistics.gl_amd_name_gen_delete++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsNameAMD)(identifier, name);
  return ret;
}

// GL_AMD_performance_monitor

static void REGAL_CALL statistics_glBeginPerfMonitorAMD(GLuint monitor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginPerfMonitorAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginPerfMonitorAMD)(monitor);
}

static void REGAL_CALL statistics_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeletePerfMonitorsAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeletePerfMonitorsAMD)(n, monitors);
}

static void REGAL_CALL statistics_glEndPerfMonitorAMD(GLuint monitor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndPerfMonitorAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndPerfMonitorAMD)(monitor);
}

static void REGAL_CALL statistics_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenPerfMonitorsAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenPerfMonitorsAMD)(n, monitors);
}

static void REGAL_CALL statistics_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorCounterDataAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);
}

static void REGAL_CALL statistics_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorCounterInfoAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);
}

static void REGAL_CALL statistics_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorCounterStringAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);
}

static void REGAL_CALL statistics_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorCountersAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, countersSize, counters);
}

static void REGAL_CALL statistics_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorGroupStringAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);
}

static void REGAL_CALL statistics_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPerfMonitorGroupsAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);
}

static void REGAL_CALL statistics_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSelectPerfMonitorCountersAMD++;

  statistics.gl_amd_performance_monitor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);
}

// GL_AMD_sample_positions

static void REGAL_CALL statistics_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetMultisamplefvAMD++;

  statistics.gl_amd_sample_positions++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetMultisamplefvAMD)(pname, index, val);
}

// GL_AMD_sparse_texture

static void REGAL_CALL statistics_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorageSparseAMD++;

  statistics.gl_amd_sparse_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorageSparseAMD)(target, internalFormat, width, height, depth, layers, flags);
}

static void REGAL_CALL statistics_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorageSparseAMD++;

  statistics.gl_amd_sparse_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorageSparseAMD)(texture, target, internalFormat, width, height, depth, layers, flags);
}

// GL_AMD_stencil_operation_extended

static void REGAL_CALL statistics_glStencilOpValueAMD(GLenum face, GLuint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilOpValueAMD++;

  statistics.gl_amd_stencil_operation_extended++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilOpValueAMD)(face, value);
}

// GL_AMD_vertex_shader_tessellator

static void REGAL_CALL statistics_glTessellationFactorAMD(GLfloat factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTessellationFactorAMD++;

  statistics.gl_amd_vertex_shader_tessellator++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTessellationFactorAMD)(factor);
}

static void REGAL_CALL statistics_glTessellationModeAMD(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTessellationModeAMD++;

  statistics.gl_amd_vertex_shader_tessellator++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTessellationModeAMD)(mode);
}

// GL_ANGLE_framebuffer_blit

static void REGAL_CALL statistics_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlitFramebufferANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlitFramebufferANGLE)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_ANGLE_framebuffer_multisample

static void REGAL_CALL statistics_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisampleANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisampleANGLE)(target, samples, internalformat, width, height);
}

// GL_ANGLE_instanced_arrays

static void REGAL_CALL statistics_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysInstancedANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysInstancedANGLE)(mode, first, count, primcount);
}

static void REGAL_CALL statistics_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedANGLE)(mode, count, type, indices, primcount);
}

static void REGAL_CALL statistics_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribDivisorANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribDivisorANGLE)(index, divisor);
}

// GL_ANGLE_timer_query

static void REGAL_CALL statistics_glBeginQueryANGLE(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginQueryANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginQueryANGLE)(target, id);
}

static void REGAL_CALL statistics_glDeleteQueriesANGLE(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteQueriesANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteQueriesANGLE)(n, ids);
}

static void REGAL_CALL statistics_glEndQueryANGLE(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndQueryANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndQueryANGLE)(target);
}

static void REGAL_CALL statistics_glGenQueriesANGLE(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenQueriesANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenQueriesANGLE)(n, ids);
}

static void REGAL_CALL statistics_glGetQueryObjecti64vANGLE(GLuint id, GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjecti64vANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjecti64vANGLE)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectivANGLE(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectivANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectivANGLE)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectui64vANGLE(GLuint id, GLenum pname, GLuint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectui64vANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectui64vANGLE)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectuivANGLE(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectuivANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectuivANGLE)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryivANGLE(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryivANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryivANGLE)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsQueryANGLE(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsQueryANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsQueryANGLE)(id);
  return ret;
}

static void REGAL_CALL statistics_glQueryCounterANGLE(GLuint id, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glQueryCounterANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glQueryCounterANGLE)(id, target);
}

// GL_ANGLE_translated_shader_source

static void REGAL_CALL statistics_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTranslatedShaderSourceANGLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTranslatedShaderSourceANGLE)(shader, bufsize, length, source);
}

// GL_APPLE_copy_texture_levels

static void REGAL_CALL statistics_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureLevelsAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureLevelsAPPLE)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
}

// GL_APPLE_element_array

static void REGAL_CALL statistics_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementArrayAPPLE++;

  statistics.gl_apple_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementArrayAPPLE)(mode, first, count);
}

static void REGAL_CALL statistics_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawRangeElementArrayAPPLE++;

  statistics.gl_apple_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);
}

static void REGAL_CALL statistics_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glElementPointerAPPLE++;

  statistics.gl_apple_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glElementPointerAPPLE)(type, pointer);
}

static void REGAL_CALL statistics_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementArrayAPPLE++;

  statistics.gl_apple_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
}

static void REGAL_CALL statistics_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawRangeElementArrayAPPLE++;

  statistics.gl_apple_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);
}

// GL_APPLE_fence

static void REGAL_CALL statistics_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFencesAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFencesAPPLE)(n, fences);
}

static void REGAL_CALL statistics_glFinishFenceAPPLE(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishFenceAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinishFenceAPPLE)(fence);
}

static void REGAL_CALL statistics_glFinishObjectAPPLE(GLenum object, GLint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishObjectAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinishObjectAPPLE)(object, name);
}

static void REGAL_CALL statistics_glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFencesAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenFencesAPPLE)(n, fences);
}

static GLboolean REGAL_CALL statistics_glIsFenceAPPLE(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsFenceAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsFenceAPPLE)(fence);
  return ret;
}

static void REGAL_CALL statistics_glSetFenceAPPLE(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetFenceAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetFenceAPPLE)(fence);
}

static GLboolean REGAL_CALL statistics_glTestFenceAPPLE(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTestFenceAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glTestFenceAPPLE)(fence);
  return ret;
}

static GLboolean REGAL_CALL statistics_glTestObjectAPPLE(GLenum object, GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTestObjectAPPLE++;

  statistics.gl_apple_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glTestObjectAPPLE)(object, name);
  return ret;
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL statistics_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferParameteriAPPLE++;

  statistics.gl_apple_flush_buffer_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferParameteriAPPLE)(target, pname, param);
}

static void REGAL_CALL statistics_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushMappedBufferRangeAPPLE++;

  statistics.gl_apple_flush_buffer_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushMappedBufferRangeAPPLE)(target, offset, size);
}

// GL_APPLE_flush_render

static void REGAL_CALL statistics_glFinishRenderAPPLE(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishRenderAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinishRenderAPPLE)();
}

static void REGAL_CALL statistics_glFlushRenderAPPLE(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushRenderAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushRenderAPPLE)();
}

static void REGAL_CALL statistics_glSwapAPPLE(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSwapAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSwapAPPLE)();
}

// GL_APPLE_framebuffer_multisample

static void REGAL_CALL statistics_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisampleAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisampleAPPLE)(target, samples, internalformat, width, height);
}

static void REGAL_CALL statistics_glResolveMultisampleFramebufferAPPLE(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResolveMultisampleFramebufferAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResolveMultisampleFramebufferAPPLE)();
}

// GL_APPLE_object_purgeable

static void REGAL_CALL statistics_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectParameterivAPPLE++;

  statistics.gl_apple_object_purgeable++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectParameterivAPPLE)(objectType, name, pname, params);
}

static GLenum REGAL_CALL statistics_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glObjectPurgeableAPPLE++;

  statistics.gl_apple_object_purgeable++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glObjectPurgeableAPPLE)(objectType, name, option);
  return ret;
}

static GLenum REGAL_CALL statistics_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glObjectUnpurgeableAPPLE++;

  statistics.gl_apple_object_purgeable++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glObjectUnpurgeableAPPLE)(objectType, name, option);
  return ret;
}

// GL_APPLE_sync

static GLenum REGAL_CALL statistics_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientWaitSyncAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glClientWaitSyncAPPLE)(sync, flags, timeout);
  return ret;
}

static void REGAL_CALL statistics_glDeleteSyncAPPLE(GLsync sync)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteSyncAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteSyncAPPLE)(sync);
}

static GLsync REGAL_CALL statistics_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFenceSyncAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLsync  ret = _next->call(&_next->glFenceSyncAPPLE)(condition, flags);
  return ret;
}

static void REGAL_CALL statistics_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInteger64vAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInteger64vAPPLE)(pname, params);
}

static void REGAL_CALL statistics_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSyncivAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSyncivAPPLE)(sync, pname, bufSize, length, values);
}

static GLboolean REGAL_CALL statistics_glIsSyncAPPLE(GLsync sync)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsSyncAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsSyncAPPLE)(sync);
  return ret;
}

static void REGAL_CALL statistics_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWaitSyncAPPLE++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWaitSyncAPPLE)(sync, flags, timeout);
}

// GL_APPLE_texture_range

static void REGAL_CALL statistics_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterPointervAPPLE++;

  statistics.gl_apple_texture_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterPointervAPPLE)(target, pname, params);
}

static void REGAL_CALL statistics_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureRangeAPPLE++;

  statistics.gl_apple_texture_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureRangeAPPLE)(target, length, pointer);
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL statistics_glBindVertexArrayAPPLE(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexArrayAPPLE++;

  statistics.gl_apple_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexArrayAPPLE)(array);
}

static void REGAL_CALL statistics_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteVertexArraysAPPLE++;

  statistics.gl_apple_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteVertexArraysAPPLE)(n, arrays);
}

static void REGAL_CALL statistics_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenVertexArraysAPPLE++;

  statistics.gl_apple_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenVertexArraysAPPLE)(n, arrays);
}

static GLboolean REGAL_CALL statistics_glIsVertexArrayAPPLE(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsVertexArrayAPPLE++;

  statistics.gl_apple_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsVertexArrayAPPLE)(array);
  return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL statistics_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushVertexArrayRangeAPPLE++;

  statistics.gl_apple_vertex_array_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushVertexArrayRangeAPPLE)(length, pointer);
}

static void REGAL_CALL statistics_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayParameteriAPPLE++;

  statistics.gl_apple_vertex_array_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayParameteriAPPLE)(pname, param);
}

static void REGAL_CALL statistics_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayRangeAPPLE++;

  statistics.gl_apple_vertex_array_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayRangeAPPLE)(length, pointer);
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL statistics_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVertexAttribAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVertexAttribAPPLE)(index, pname);
}

static void REGAL_CALL statistics_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVertexAttribAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVertexAttribAPPLE)(index, pname);
}

static GLboolean REGAL_CALL statistics_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsVertexAttribEnabledAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsVertexAttribEnabledAPPLE)(index, pname);
  return ret;
}

static void REGAL_CALL statistics_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapVertexAttrib1dAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL statistics_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapVertexAttrib1fAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);
}

static void REGAL_CALL statistics_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapVertexAttrib2dAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

static void REGAL_CALL statistics_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapVertexAttrib2fAPPLE++;

  statistics.gl_apple_vertex_program_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

// GL_ARB_ES2_compatibility

static void REGAL_CALL statistics_glClearDepthf(GLclampf d)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearDepthf++;

  statistics.gl_arb_es2_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearDepthf)(d);
}

static void REGAL_CALL statistics_glDepthRangef(GLclampf n, GLclampf f)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangef++;

  statistics.gl_arb_es2_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangef)(n, f);
}

static void REGAL_CALL statistics_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetShaderPrecisionFormat++;

  statistics.gl_arb_es2_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);
}

static void REGAL_CALL statistics_glReleaseShaderCompiler(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReleaseShaderCompiler++;

  statistics.gl_arb_es2_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReleaseShaderCompiler)();
}

static void REGAL_CALL statistics_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderBinary++;

  statistics.gl_arb_es2_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderBinary)(count, shaders, binaryformat, binary, length);
}

// GL_ARB_base_instance

static void REGAL_CALL statistics_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysInstancedBaseInstance++;

  statistics.gl_arb_base_instance++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysInstancedBaseInstance)(mode, first, count, primcount, baseinstance);
}

static void REGAL_CALL statistics_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedBaseInstance++;

  statistics.gl_arb_base_instance++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedBaseInstance)(mode, count, type, indices, primcount, baseinstance);
}

static void REGAL_CALL statistics_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedBaseVertexBaseInstance++;

  statistics.gl_arb_base_instance++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, primcount, basevertex, baseinstance);
}

// GL_ARB_bindless_texture

static GLuint64 REGAL_CALL statistics_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetImageHandleARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetImageHandleARB)(texture, level, layered, layer, format);
  return ret;
}

static GLuint64 REGAL_CALL statistics_glGetTextureHandleARB(GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureHandleARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetTextureHandleARB)(texture);
  return ret;
}

static GLuint64 REGAL_CALL statistics_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureSamplerHandleARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetTextureSamplerHandleARB)(texture, sampler);
  return ret;
}

static void REGAL_CALL statistics_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribLui64vARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribLui64vARB)(index, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsImageHandleResidentARB(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsImageHandleResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsImageHandleResidentARB)(handle);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsTextureHandleResidentARB(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTextureHandleResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTextureHandleResidentARB)(handle);
  return ret;
}

static void REGAL_CALL statistics_glMakeImageHandleNonResidentARB(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeImageHandleNonResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeImageHandleNonResidentARB)(handle);
}

static void REGAL_CALL statistics_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeImageHandleResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeImageHandleResidentARB)(handle, access);
}

static void REGAL_CALL statistics_glMakeTextureHandleNonResidentARB(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeTextureHandleNonResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeTextureHandleNonResidentARB)(handle);
}

static void REGAL_CALL statistics_glMakeTextureHandleResidentARB(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeTextureHandleResidentARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeTextureHandleResidentARB)(handle);
}

static void REGAL_CALL statistics_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformHandleui64ARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformHandleui64ARB)(program, location, value);
}

static void REGAL_CALL statistics_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformHandleui64vARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformHandleui64vARB)(program, location, count, values);
}

static void REGAL_CALL statistics_glUniformHandleui64ARB(GLint location, GLuint64 value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformHandleui64ARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformHandleui64ARB)(location, value);
}

static void REGAL_CALL statistics_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformHandleui64vARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformHandleui64vARB)(location, count, value);
}

static void REGAL_CALL statistics_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1ui64ARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1ui64ARB)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1ui64vARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1ui64vARB)(index, v);
}

// GL_ARB_blend_func_extended

static void REGAL_CALL statistics_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFragDataLocationIndexed++;

  statistics.gl_arb_blend_func_extended++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFragDataLocationIndexed)(program, colorNumber, index, name);
}

static GLint REGAL_CALL statistics_glGetFragDataIndex(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragDataIndex++;

  statistics.gl_arb_blend_func_extended++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetFragDataIndex)(program, name);
  return ret;
}

// GL_ARB_buffer_storage

static void REGAL_CALL statistics_glBufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferStorage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferStorage)(target, size, data, flags);
}

static void REGAL_CALL statistics_glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedBufferStorageEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedBufferStorageEXT)(buffer, size, data, flags);
}

// GL_ARB_cl_event

static GLsync REGAL_CALL statistics_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateSyncFromCLeventARB++;

  statistics.gl_arb_cl_event++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLsync  ret = _next->call(&_next->glCreateSyncFromCLeventARB)(context, event, flags);
  return ret;
}

// GL_ARB_clear_buffer_object

static void REGAL_CALL statistics_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferData++;

  statistics.gl_arb_clear_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferData)(target, internalformat, format, type, data);
}

static void REGAL_CALL statistics_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearBufferSubData++;

  statistics.gl_arb_clear_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearBufferSubData)(target, internalformat, offset, size, format, type, data);
}

static void REGAL_CALL statistics_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearNamedBufferDataEXT++;

  statistics.gl_arb_clear_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);
}

static void REGAL_CALL statistics_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearNamedBufferSubDataEXT++;

  statistics.gl_arb_clear_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);
}

// GL_ARB_clear_texture

static void REGAL_CALL statistics_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearTexImage++;

  statistics.gl_arb_clear_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearTexImage)(texture, level, format, type, data);
}

static void REGAL_CALL statistics_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearTexSubImage++;

  statistics.gl_arb_clear_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

// GL_ARB_color_buffer_float

static void REGAL_CALL statistics_glClampColorARB(GLenum target, GLenum clamp)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClampColorARB++;

  statistics.gl_arb_color_buffer_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClampColorARB)(target, clamp);
}

// GL_ARB_compute_shader

static void REGAL_CALL statistics_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDispatchCompute++;

  statistics.gl_arb_compute_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);
}

static void REGAL_CALL statistics_glDispatchComputeIndirect(GLintptr indirect)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDispatchComputeIndirect++;

  statistics.gl_arb_compute_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDispatchComputeIndirect)(indirect);
}

// GL_ARB_compute_variable_group_size

static void REGAL_CALL statistics_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDispatchComputeGroupSizeARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDispatchComputeGroupSizeARB)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

// GL_ARB_copy_buffer

static void REGAL_CALL statistics_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyBufferSubData++;

  statistics.gl_arb_copy_buffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyBufferSubData)(readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_ARB_copy_image

static void REGAL_CALL statistics_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyImageSubData++;

  statistics.gl_arb_copy_image++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

// GL_ARB_debug_output

static void REGAL_CALL statistics_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageCallbackARB++;

  statistics.gl_arb_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageCallbackARB)(callback, userParam);
}

static void REGAL_CALL statistics_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageControlARB++;

  statistics.gl_arb_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageControlARB)(source, type, severity, count, ids, enabled);
}

static void REGAL_CALL statistics_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageInsertARB++;

  statistics.gl_arb_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageInsertARB)(source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL statistics_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDebugMessageLogARB++;

  statistics.gl_arb_debug_output++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetDebugMessageLogARB)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL statistics_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffersARB++;

  statistics.gl_arb_draw_buffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffersARB)(n, bufs);
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL statistics_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparateiARB++;

  statistics.gl_arb_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);
}

static void REGAL_CALL statistics_glBlendEquationiARB(GLuint buf, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationiARB++;

  statistics.gl_arb_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationiARB)(buf, mode);
}

static void REGAL_CALL statistics_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparateiARB++;

  statistics.gl_arb_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}

static void REGAL_CALL statistics_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFunciARB++;

  statistics.gl_arb_draw_buffers_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFunciARB)(buf, src, dst);
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL statistics_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsBaseVertex++;

  statistics.gl_arb_draw_elements_base_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
}

static void REGAL_CALL statistics_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedBaseVertex++;

  statistics.gl_arb_draw_elements_base_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedBaseVertex)(mode, count, type, indices, primcount, basevertex);
}

static void REGAL_CALL statistics_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawRangeElementsBaseVertex++;

  statistics.gl_arb_draw_elements_base_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);
}

static void REGAL_CALL statistics_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementsBaseVertex++;

  statistics.gl_arb_draw_elements_base_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementsBaseVertex)(mode, count, type, indices, primcount, basevertex);
}

// GL_ARB_draw_indirect

static void REGAL_CALL statistics_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysIndirect++;

  statistics.gl_arb_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysIndirect)(mode, indirect);
}

static void REGAL_CALL statistics_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsIndirect++;

  statistics.gl_arb_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsIndirect)(mode, type, indirect);
}

// GL_ARB_draw_instanced

static void REGAL_CALL statistics_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysInstancedARB++;

  statistics.gl_arb_instanced_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysInstancedARB)(mode, start, count, primcount);
}

static void REGAL_CALL statistics_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedARB++;

  statistics.gl_arb_instanced_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
}

// GL_ARB_framebuffer_no_attachments

static void REGAL_CALL statistics_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferParameteri++;

  statistics.gl_arb_framebuffer_no_attachments++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferParameteri)(target, pname, param);
}

static void REGAL_CALL statistics_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFramebufferParameteriv++;

  statistics.gl_arb_framebuffer_no_attachments++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFramebufferParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedFramebufferParameterivEXT++;

  statistics.gl_arb_framebuffer_no_attachments++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params);
}

static void REGAL_CALL statistics_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferParameteriEXT++;

  statistics.gl_arb_framebuffer_no_attachments++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferParameteriEXT)(framebuffer, pname, param);
}

// GL_ARB_framebuffer_object

static void REGAL_CALL statistics_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFramebuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFramebuffer)(target, framebuffer);
}

static void REGAL_CALL statistics_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindRenderbuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindRenderbuffer)(target, renderbuffer);
}

static void REGAL_CALL statistics_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlitFramebuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

static GLenum REGAL_CALL statistics_glCheckFramebufferStatus(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCheckFramebufferStatus++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glCheckFramebufferStatus)(target);
  return ret;
}

static void REGAL_CALL statistics_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFramebuffers++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFramebuffers)(n, framebuffers);
}

static void REGAL_CALL statistics_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteRenderbuffers++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteRenderbuffers)(n, renderbuffers);
}

static void REGAL_CALL statistics_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferRenderbuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL statistics_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture1D++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture1D)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture2D++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture2D)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture3D++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture3D)(target, attachment, textarget, texture, level, layer);
}

static void REGAL_CALL statistics_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureLayer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureLayer)(target, attachment, texture, level, layer);
}

static void REGAL_CALL statistics_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFramebuffers++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenFramebuffers)(n, framebuffers);
}

static void REGAL_CALL statistics_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenRenderbuffers++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenRenderbuffers)(n, renderbuffers);
}

static void REGAL_CALL statistics_glGenerateMipmap(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenerateMipmap++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenerateMipmap)(target);
}

static void REGAL_CALL statistics_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFramebufferAttachmentParameteriv++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);
}

static void REGAL_CALL statistics_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetRenderbufferParameteriv++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetRenderbufferParameteriv)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsFramebuffer(GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsFramebuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsFramebuffer)(framebuffer);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsRenderbuffer(GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsRenderbuffer++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsRenderbuffer)(renderbuffer);
  return ret;
}

static void REGAL_CALL statistics_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorage++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorage)(target, internalformat, width, height);
}

static void REGAL_CALL statistics_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisample++;

  statistics.gl_arb_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
}

// GL_ARB_geometry_shader4

static void REGAL_CALL statistics_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureARB++;

  statistics.gl_arb_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureARB)(target, attachment, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureFaceARB++;

  statistics.gl_arb_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
}

static void REGAL_CALL statistics_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureLayerARB++;

  statistics.gl_arb_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
}

static void REGAL_CALL statistics_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameteriARB++;

  statistics.gl_arb_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameteriARB)(program, pname, value);
}

// GL_ARB_get_program_binary

static void REGAL_CALL statistics_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramBinary++;

  statistics.gl_arb_get_program_binary++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL statistics_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramBinary++;

  statistics.gl_arb_get_program_binary++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramBinary)(program, binaryFormat, binary, length);
}

static void REGAL_CALL statistics_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameteri++;

  statistics.gl_arb_get_program_binary++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameteri)(program, pname, value);
}

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL statistics_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformdv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformdv)(program, location, params);
}

static void REGAL_CALL statistics_glUniform1d(GLint location, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1d++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1d)(location, x);
}

static void REGAL_CALL statistics_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1dv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2d++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2d)(location, x, y);
}

static void REGAL_CALL statistics_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2dv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3d++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3d)(location, x, y, z);
}

static void REGAL_CALL statistics_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3dv)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4d++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4d)(location, x, y, z, w);
}

static void REGAL_CALL statistics_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4dv)(location, count, value);
}

static void REGAL_CALL statistics_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x3dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x3dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x4dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x4dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x2dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x2dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x4dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x4dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x2dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x2dv)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x3dv++;

  statistics.gl_arb_gpu_shader_fp64++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x3dv)(location, count, transpose, value);
}

// GL_ARB_imaging

static void REGAL_CALL statistics_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorSubTable++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorSubTable)(target, start, count, format, type, data);
}

static void REGAL_CALL statistics_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTable++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTable)(target, internalformat, width, format, type, table);
}

static void REGAL_CALL statistics_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionFilter1D++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionFilter1D)(target, internalformat, width, format, type, image);
}

static void REGAL_CALL statistics_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionFilter2D++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL statistics_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameterf++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameterf)(target, pname, params);
}

static void REGAL_CALL statistics_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameteri++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameteri)(target, pname, params);
}

static void REGAL_CALL statistics_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyColorSubTable++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyColorSubTable)(target, start, x, y, width);
}

static void REGAL_CALL statistics_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyColorTable++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyColorTable)(target, internalformat, x, y, width);
}

static void REGAL_CALL statistics_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyConvolutionFilter1D++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyConvolutionFilter1D)(target, internalformat, x, y, width);
}

static void REGAL_CALL statistics_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyConvolutionFilter2D++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);
}

static void REGAL_CALL statistics_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTable++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTable)(target, format, type, table);
}

static void REGAL_CALL statistics_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionFilter++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionFilter)(target, format, type, image);
}

static void REGAL_CALL statistics_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogram++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogram)(target, reset, format, type, values);
}

static void REGAL_CALL statistics_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogramParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogramParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogramParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogramParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmax++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmax)(target, reset, format, types, values);
}

static void REGAL_CALL statistics_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmaxParameterfv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmaxParameterfv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmaxParameteriv++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmaxParameteriv)(target, pname, params);
}

static void REGAL_CALL statistics_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSeparableFilter++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSeparableFilter)(target, format, type, row, column, span);
}

static void REGAL_CALL statistics_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glHistogram++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glHistogram)(target, width, internalformat, sink);
}

static void REGAL_CALL statistics_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMinmax++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMinmax)(target, internalformat, sink);
}

static void REGAL_CALL statistics_glResetHistogram(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResetHistogram++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResetHistogram)(target);
}

static void REGAL_CALL statistics_glResetMinmax(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResetMinmax++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResetMinmax)(target);
}

static void REGAL_CALL statistics_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSeparableFilter2D++;

  statistics.gl_arb_imaging++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);
}

// GL_ARB_indirect_parameters

static void REGAL_CALL statistics_glMultiDrawArraysIndirectCountARB(GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawArraysIndirectCountARB++;

  statistics.gl_arb_indirect_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawArraysIndirectCountARB)(mode, indirect, drawcount, maxdrawcount, stride);
}

static void REGAL_CALL statistics_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementsIndirectCountARB++;

  statistics.gl_arb_indirect_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementsIndirectCountARB)(mode, type, indirect, drawcount, maxdrawcount, stride);
}

// GL_ARB_instanced_arrays

static void REGAL_CALL statistics_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribDivisorARB++;

  statistics.gl_arb_instanced_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribDivisorARB)(index, divisor);
}

// GL_ARB_internalformat_query

static void REGAL_CALL statistics_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInternalformativ++;

  statistics.gl_arb_internalformat_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInternalformativ)(target, internalformat, pname, bufSize, params);
}

// GL_ARB_internalformat_query2

static void REGAL_CALL statistics_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInternalformati64v++;

  statistics.gl_arb_internalformat_query2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInternalformati64v)(target, internalformat, pname, bufSize, params);
}

// GL_ARB_invalidate_subdata

static void REGAL_CALL statistics_glInvalidateBufferData(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateBufferData++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateBufferData)(buffer);
}

static void REGAL_CALL statistics_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateBufferSubData++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateBufferSubData)(buffer, offset, length);
}

static void REGAL_CALL statistics_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateFramebuffer++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateFramebuffer)(target, numAttachments, attachments);
}

static void REGAL_CALL statistics_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateSubFramebuffer++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);
}

static void REGAL_CALL statistics_glInvalidateTexImage(GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateTexImage++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateTexImage)(texture, level);
}

static void REGAL_CALL statistics_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInvalidateTexSubImage++;

  statistics.gl_arb_invalidate_subdata++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

// GL_ARB_map_buffer_range

static void REGAL_CALL statistics_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushMappedBufferRange++;

  statistics.gl_arb_map_buffer_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushMappedBufferRange)(target, offset, length);
}

static GLvoid *REGAL_CALL statistics_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapBufferRange++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapBufferRange)(target, offset, length, access);
  return ret;
}

// GL_ARB_matrix_palette

static void REGAL_CALL statistics_glCurrentPaletteMatrixARB(GLint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCurrentPaletteMatrixARB++;

  statistics.gl_arb_matrix_palette++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCurrentPaletteMatrixARB)(index);
}

static void REGAL_CALL statistics_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixIndexPointerARB++;

  statistics.gl_arb_matrix_palette++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixIndexPointerARB)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixIndexubvARB++;

  statistics.gl_arb_matrix_palette++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixIndexubvARB)(size, indices);
}

static void REGAL_CALL statistics_glMatrixIndexuivARB(GLint size, const GLuint *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixIndexuivARB++;

  statistics.gl_arb_matrix_palette++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixIndexuivARB)(size, indices);
}

static void REGAL_CALL statistics_glMatrixIndexusvARB(GLint size, const GLushort *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixIndexusvARB++;

  statistics.gl_arb_matrix_palette++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixIndexusvARB)(size, indices);
}

// GL_ARB_multi_bind

static void REGAL_CALL statistics_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBuffersBase++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBuffersBase)(target, first, count, buffers);
}

static void REGAL_CALL statistics_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBuffersRange++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBuffersRange)(target, first, count, buffers, offsets, sizes);
}

static void REGAL_CALL statistics_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindImageTextures++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindImageTextures)(first, count, textures);
}

static void REGAL_CALL statistics_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindSamplers++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindSamplers)(first, count, samplers);
}

static void REGAL_CALL statistics_glBindTextures(GLuint first, GLsizei count, const GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTextures++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindTextures)(first, count, textures);
}

static void REGAL_CALL statistics_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexBuffers++;

  statistics.gl_arb_multi_bind++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexBuffers)(first, count, buffers, offsets, strides);
}

// GL_ARB_multi_draw_indirect

static void REGAL_CALL statistics_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawArraysIndirect++;

  statistics.gl_arb_multi_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawArraysIndirect)(mode, indirect, primcount, stride);
}

static void REGAL_CALL statistics_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementsIndirect++;

  statistics.gl_arb_multi_draw_indirect++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementsIndirect)(mode, type, indirect, primcount, stride);
}

// GL_ARB_multisample

static void REGAL_CALL statistics_glSampleCoverageARB(GLclampf value, GLboolean invert)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleCoverageARB++;

  statistics.gl_arb_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleCoverageARB)(value, invert);
}

// GL_ARB_multitexture

static void REGAL_CALL statistics_glActiveTextureARB(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveTextureARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveTextureARB)(texture);
}

static void REGAL_CALL statistics_glClientActiveTextureARB(GLenum texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientActiveTextureARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClientActiveTextureARB)(texture);
}

static void REGAL_CALL statistics_glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1dARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1dARB)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1dvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1dvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1fARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1fARB)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1fvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1fvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1iARB(GLenum target, GLint s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1iARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1iARB)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1ivARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1ivARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord1sARB(GLenum target, GLshort s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1sARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1sARB)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1svARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1svARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2dARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2dARB)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2dvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2dvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2fARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2fARB)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2fvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2fvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2iARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2iARB)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2ivARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2ivARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2sARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2sARB)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2svARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2svARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3dARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3dARB)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3dvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3dvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3fARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3fARB)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3fvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3fvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3iARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3iARB)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3ivARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3ivARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3sARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3sARB)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3svARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3svARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4dARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4dARB)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4dvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4dvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4fARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4fARB)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4fvARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4fvARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4iARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4iARB)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4ivARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4ivARB)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4sARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4sARB)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4svARB++;

  statistics.gl_arb_multitexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4svARB)(target, v);
}

// GL_ARB_occlusion_query

static void REGAL_CALL statistics_glBeginQueryARB(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginQueryARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginQueryARB)(target, id);
}

static void REGAL_CALL statistics_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteQueriesARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteQueriesARB)(n, ids);
}

static void REGAL_CALL statistics_glEndQueryARB(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndQueryARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndQueryARB)(target);
}

static void REGAL_CALL statistics_glGenQueriesARB(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenQueriesARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenQueriesARB)(n, ids);
}

static void REGAL_CALL statistics_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectivARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectivARB)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectuivARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectuivARB)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryivARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryivARB)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsQueryARB(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsQueryARB++;

  statistics.gl_arb_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsQueryARB)(id);
  return ret;
}

// GL_ARB_point_parameters

static void REGAL_CALL statistics_glPointParameterfARB(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfARB++;

  statistics.gl_arb_point_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfARB)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfvARB++;

  statistics.gl_arb_point_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfvARB)(pname, params);
}

// GL_ARB_program_interface_query

static void REGAL_CALL statistics_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramInterfaceiv++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramInterfaceiv)(program, programInterface, pname, params);
}

static GLuint REGAL_CALL statistics_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramResourceIndex++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetProgramResourceIndex)(program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL statistics_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramResourceLocation++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetProgramResourceLocation)(program, programInterface, name);
  return ret;
}

static GLint REGAL_CALL statistics_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramResourceLocationIndex++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetProgramResourceLocationIndex)(program, programInterface, name);
  return ret;
}

static void REGAL_CALL statistics_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramResourceName++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);
}

static void REGAL_CALL statistics_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramResourceiv++;

  statistics.gl_arb_program_interface_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);
}

// GL_ARB_provoking_vertex

static void REGAL_CALL statistics_glProvokingVertex(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProvokingVertex++;

  statistics.gl_arb_provoking_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProvokingVertex)(mode);
}

// GL_ARB_robustness

static GLenum REGAL_CALL statistics_glGetGraphicsResetStatusARB(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetGraphicsResetStatusARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glGetGraphicsResetStatusARB)();
  return ret;
}

static void REGAL_CALL statistics_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnColorTableARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnColorTableARB)(target, format, type, bufSize, table);
}

static void REGAL_CALL statistics_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnCompressedTexImageARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnCompressedTexImageARB)(target, lod, bufSize, img);
}

static void REGAL_CALL statistics_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnConvolutionFilterARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnConvolutionFilterARB)(target, format, type, bufSize, image);
}

static void REGAL_CALL statistics_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnHistogramARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnHistogramARB)(target, reset, format, type, bufSize, values);
}

static void REGAL_CALL statistics_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnMapdvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnMapdvARB)(target, query, bufSize, v);
}

static void REGAL_CALL statistics_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnMapfvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnMapfvARB)(target, query, bufSize, v);
}

static void REGAL_CALL statistics_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnMapivARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnMapivARB)(target, query, bufSize, v);
}

static void REGAL_CALL statistics_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnMinmaxARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnMinmaxARB)(target, reset, format, type, bufSize, values);
}

static void REGAL_CALL statistics_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnPixelMapfvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnPixelMapfvARB)(map, bufSize, values);
}

static void REGAL_CALL statistics_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnPixelMapuivARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnPixelMapuivARB)(map, bufSize, values);
}

static void REGAL_CALL statistics_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnPixelMapusvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnPixelMapusvARB)(map, bufSize, values);
}

static void REGAL_CALL statistics_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnPolygonStippleARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnPolygonStippleARB)(bufSize, pattern);
}

static void REGAL_CALL statistics_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnSeparableFilterARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);
}

static void REGAL_CALL statistics_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnTexImageARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnTexImageARB)(target, level, format, type, bufSize, img);
}

static void REGAL_CALL statistics_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformdvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformdvARB)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformfvARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformfvARB)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformivARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformivARB)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformuivARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformuivARB)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadnPixelsARB++;

  statistics.gl_arb_robustness++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);
}

// GL_ARB_sample_shading

static void REGAL_CALL statistics_glMinSampleShading(GLclampf value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMinSampleShading++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMinSampleShading)(value);
}

static void REGAL_CALL statistics_glMinSampleShadingARB(GLclampf value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMinSampleShadingARB++;

  statistics.gl_arb_sample_shading++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMinSampleShadingARB)(value);
}

// GL_ARB_sampler_objects

static void REGAL_CALL statistics_glBindSampler(GLuint unit, GLuint sampler)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindSampler++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindSampler)(unit, sampler);
}

static void REGAL_CALL statistics_glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteSamplers++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteSamplers)(count, samplers);
}

static void REGAL_CALL statistics_glGenSamplers(GLsizei count, GLuint *samplers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenSamplers++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenSamplers)(count, samplers);
}

static void REGAL_CALL statistics_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSamplerParameterIiv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSamplerParameterIiv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSamplerParameterIuiv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSamplerParameterIuiv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSamplerParameterfv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSamplerParameterfv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSamplerParameteriv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSamplerParameteriv)(sampler, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsSampler(GLuint sampler)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsSampler++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsSampler)(sampler);
  return ret;
}

static void REGAL_CALL statistics_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameterIiv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameterIiv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameterIuiv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameterIuiv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameterf++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameterf)(sampler, pname, param);
}

static void REGAL_CALL statistics_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameterfv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameterfv)(sampler, pname, params);
}

static void REGAL_CALL statistics_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameteri++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameteri)(sampler, pname, param);
}

static void REGAL_CALL statistics_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplerParameteriv++;

  statistics.gl_arb_sampler_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplerParameteriv)(sampler, pname, params);
}

// GL_ARB_separate_shader_objects

static void REGAL_CALL statistics_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveShaderProgram++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveShaderProgram)(pipeline, program);
}

static void REGAL_CALL statistics_glBindProgramPipeline(GLuint pipeline)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindProgramPipeline++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindProgramPipeline)(pipeline);
}

static GLuint REGAL_CALL statistics_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateShaderProgramv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glCreateShaderProgramv)(type, count, strings);
  return ret;
}

static void REGAL_CALL statistics_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteProgramPipelines++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteProgramPipelines)(n, pipelines);
}

static void REGAL_CALL statistics_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenProgramPipelines++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenProgramPipelines)(n, pipelines);
}

static void REGAL_CALL statistics_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramPipelineInfoLog++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);
}

static void REGAL_CALL statistics_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramPipelineiv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramPipelineiv)(pipeline, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsProgramPipeline(GLuint pipeline)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsProgramPipeline++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsProgramPipeline)(pipeline);
  return ret;
}

static void REGAL_CALL statistics_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1d++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1d)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1dv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1f++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1f)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1fv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1i(GLuint program, GLint location, GLint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1i++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1i)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1iv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1iv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1ui++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1ui)(program, location, v0);
}

static void REGAL_CALL statistics_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1uiv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1uiv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2d++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2d)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2dv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2f++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2f)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2fv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2i++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2i)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2iv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2iv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2ui++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2ui)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2uiv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2uiv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3d++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3d)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3dv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3f++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3f)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3fv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3i++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3i)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3iv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3iv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3ui++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3ui)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3uiv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3uiv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4d++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4d)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4dv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4f++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4f)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4fv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4i++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4i)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4iv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4iv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4ui++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4ui)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4uiv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4uiv)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x3dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x3fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x4dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x4fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x2dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x2fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x4dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x4fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x2dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x2fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x3dv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x3fv++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUseProgramStages++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUseProgramStages)(pipeline, stages, program);
}

static void REGAL_CALL statistics_glValidateProgramPipeline(GLuint pipeline)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glValidateProgramPipeline++;

  statistics.gl_arb_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glValidateProgramPipeline)(pipeline);
}

// GL_ARB_shader_atomic_counters

static void REGAL_CALL statistics_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveAtomicCounterBufferiv++;

  statistics.gl_arb_shader_atomic_counters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);
}

// GL_ARB_shader_image_load_store

static void REGAL_CALL statistics_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindImageTexture++;

  statistics.gl_arb_shader_image_load_store++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindImageTexture)(unit, texture, level, layered, layer, access, format);
}

static void REGAL_CALL statistics_glMemoryBarrier(GLbitfield barriers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMemoryBarrier++;

  statistics.gl_arb_shader_image_load_store++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMemoryBarrier)(barriers);
}

// GL_ARB_shader_objects

static void REGAL_CALL statistics_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAttachObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAttachObjectARB)(containerObj, obj);
}

static void REGAL_CALL statistics_glCompileShaderARB(GLhandleARB shaderObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompileShaderARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompileShaderARB)(shaderObj);
}

static GLhandleARB REGAL_CALL statistics_glCreateProgramObjectARB(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateProgramObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLhandleARB  ret = _next->call(&_next->glCreateProgramObjectARB)();
  return ret;
}

static GLhandleARB REGAL_CALL statistics_glCreateShaderObjectARB(GLenum shaderType)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateShaderObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLhandleARB  ret = _next->call(&_next->glCreateShaderObjectARB)(shaderType);
  return ret;
}

static void REGAL_CALL statistics_glDeleteObjectARB(GLhandleARB obj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteObjectARB)(obj);
}

static void REGAL_CALL statistics_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDetachObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDetachObjectARB)(containerObj, attachedObj);
}

static void REGAL_CALL statistics_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniformARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);
}

static void REGAL_CALL statistics_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetAttachedObjectsARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);
}

static GLhandleARB REGAL_CALL statistics_glGetHandleARB(GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHandleARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLhandleARB  ret = _next->call(&_next->glGetHandleARB)(pname);
  return ret;
}

static void REGAL_CALL statistics_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInfoLogARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInfoLogARB)(obj, maxLength, length, infoLog);
}

static void REGAL_CALL statistics_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectParameterfvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectParameterfvARB)(obj, pname, params);
}

static void REGAL_CALL statistics_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectParameterivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectParameterivARB)(obj, pname, params);
}

static void REGAL_CALL statistics_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetShaderSourceARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetShaderSourceARB)(obj, maxLength, length, source);
}

static GLint REGAL_CALL statistics_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformLocationARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetUniformLocationARB)(programObj, name);
  return ret;
}

static void REGAL_CALL statistics_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformfvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformfvARB)(programObj, location, params);
}

static void REGAL_CALL statistics_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformivARB)(programObj, location, params);
}

static void REGAL_CALL statistics_glLinkProgramARB(GLhandleARB programObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLinkProgramARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLinkProgramARB)(programObj);
}

static void REGAL_CALL statistics_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderSourceARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderSourceARB)(shaderObj, count, string, length);
}

static void REGAL_CALL statistics_glUniform1fARB(GLint location, GLfloat v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1fARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1fARB)(location, v0);
}

static void REGAL_CALL statistics_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1fvARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform1iARB(GLint location, GLint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1iARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1iARB)(location, v0);
}

static void REGAL_CALL statistics_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1ivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1ivARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2fARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2fARB)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2fvARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2iARB(GLint location, GLint v0, GLint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2iARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2iARB)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2ivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2ivARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3fARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3fARB)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3fvARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3iARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3iARB)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3ivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3ivARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4fARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4fARB)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4fvARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4iARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4iARB)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4ivARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4ivARB)(location, count, value);
}

static void REGAL_CALL statistics_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2fvARB)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3fvARB)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4fvARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4fvARB)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUseProgramObjectARB(GLhandleARB programObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUseProgramObjectARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUseProgramObjectARB)(programObj);
}

static void REGAL_CALL statistics_glValidateProgramARB(GLhandleARB programObj)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glValidateProgramARB++;

  statistics.gl_arb_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glValidateProgramARB)(programObj);
}

// GL_ARB_shader_storage_buffer_object

static void REGAL_CALL statistics_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderStorageBlockBinding++;

  statistics.gl_arb_shader_storage_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);
}

// GL_ARB_shader_subroutine

static void REGAL_CALL statistics_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveSubroutineName++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveSubroutineName)(program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL statistics_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveSubroutineUniformName++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveSubroutineUniformName)(program, shaderType, index, bufSize, length, name);
}

static void REGAL_CALL statistics_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveSubroutineUniformiv++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveSubroutineUniformiv)(program, shaderType, index, pname, values);
}

static void REGAL_CALL statistics_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramStageiv++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramStageiv)(program, shaderType, pname, values);
}

static void REGAL_CALL statistics_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramSubroutineParameteruivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramSubroutineParameteruivNV)(target, index, params);
}

static GLuint REGAL_CALL statistics_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSubroutineIndex++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetSubroutineIndex)(program, shaderType, name);
  return ret;
}

static GLint REGAL_CALL statistics_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSubroutineUniformLocation++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetSubroutineUniformLocation)(program, shaderType, name);
  return ret;
}

static void REGAL_CALL statistics_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformSubroutineuiv++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformSubroutineuiv)(shaderType, location, params);
}

static void REGAL_CALL statistics_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramSubroutineParametersuivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramSubroutineParametersuivNV)(target, count, params);
}

static void REGAL_CALL statistics_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformSubroutinesuiv++;

  statistics.gl_arb_shader_subroutine++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformSubroutinesuiv)(shaderType, count, indices);
}

// GL_ARB_shading_language_include

static void REGAL_CALL statistics_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompileShaderIncludeARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompileShaderIncludeARB)(shader, count, path, length);
}

static void REGAL_CALL statistics_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteNamedStringARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteNamedStringARB)(namelen, name);
}

static void REGAL_CALL statistics_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedStringARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedStringARB)(namelen, name, bufSize, stringlen, string);
}

static void REGAL_CALL statistics_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedStringivARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedStringivARB)(namelen, name, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsNamedStringARB(GLint namelen, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsNamedStringARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsNamedStringARB)(namelen, name);
  return ret;
}

static void REGAL_CALL statistics_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedStringARB++;

  statistics.gl_arb_shading_language_include++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedStringARB)(type, namelen, name, stringlen, string);
}

// GL_ARB_sparse_texture

static void REGAL_CALL statistics_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexPageCommitmentARB++;

  statistics.gl_arb_sparse_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

static void REGAL_CALL statistics_glTexturePageCommitmentEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexturePageCommitmentEXT++;

  statistics.gl_arb_sparse_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexturePageCommitmentEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

// GL_ARB_sync

static GLenum REGAL_CALL statistics_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientWaitSync++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glClientWaitSync)(sync, flags, timeout);
  return ret;
}

static void REGAL_CALL statistics_glDeleteSync(GLsync sync)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteSync++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteSync)(sync);
}

static GLsync REGAL_CALL statistics_glFenceSync(GLenum condition, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFenceSync++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLsync  ret = _next->call(&_next->glFenceSync)(condition, flags);
  return ret;
}

static void REGAL_CALL statistics_glGetInteger64v(GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInteger64v++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInteger64v)(pname, params);
}

static void REGAL_CALL statistics_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSynciv++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSynciv)(sync, pname, bufSize, length, values);
}

static GLboolean REGAL_CALL statistics_glIsSync(GLsync sync)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsSync++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsSync)(sync);
  return ret;
}

static void REGAL_CALL statistics_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWaitSync++;

  statistics.gl_arb_sync++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWaitSync)(sync, flags, timeout);
}

// GL_ARB_tessellation_shader

static void REGAL_CALL statistics_glPatchParameterfv(GLenum pname, const GLfloat *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPatchParameterfv++;

  statistics.gl_arb_tessellation_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPatchParameterfv)(pname, values);
}

static void REGAL_CALL statistics_glPatchParameteri(GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPatchParameteri++;

  statistics.gl_arb_tessellation_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPatchParameteri)(pname, value);
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL statistics_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBufferARB++;

  statistics.gl_arb_texture_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBufferARB)(target, internalformat, buffer);
}

// GL_ARB_texture_buffer_range

static void REGAL_CALL statistics_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBufferRange++;

  statistics.gl_arb_texture_buffer_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBufferRange)(target, internalformat, buffer, offset, size);
}

static void REGAL_CALL statistics_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureBufferRangeEXT++;

  statistics.gl_arb_texture_buffer_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);
}

// GL_ARB_texture_compression

static void REGAL_CALL statistics_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage1DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage2DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage3DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage1DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage2DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage3DARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL statistics_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCompressedTexImageARB++;

  statistics.gl_arb_texture_compression++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCompressedTexImageARB)(target, lod, img);
}

// GL_ARB_texture_multisample

static void REGAL_CALL statistics_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultisamplefv++;

  statistics.gl_arb_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultisamplefv)(pname, index, val);
}

static void REGAL_CALL statistics_glSampleMaski(GLuint index, GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleMaski++;

  statistics.gl_arb_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleMaski)(index, mask);
}

static void REGAL_CALL statistics_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage2DMultisample++;

  statistics.gl_arb_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL statistics_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage3DMultisample++;

  statistics.gl_arb_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_storage

static void REGAL_CALL statistics_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage1D++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage1D)(target, levels, internalformat, width);
}

static void REGAL_CALL statistics_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage2D++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage2D)(target, levels, internalformat, width, height);
}

static void REGAL_CALL statistics_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage3D++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage3D)(target, levels, internalformat, width, height, depth);
}

static void REGAL_CALL statistics_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorage1DEXT++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorage1DEXT)(texture, target, levels, internalformat, width);
}

static void REGAL_CALL statistics_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorage2DEXT++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);
}

static void REGAL_CALL statistics_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorage3DEXT++;

  statistics.gl_arb_texture_storage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);
}

// GL_ARB_texture_storage_multisample

static void REGAL_CALL statistics_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage2DMultisample++;

  statistics.gl_arb_texture_storage_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL statistics_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage3DMultisample++;

  statistics.gl_arb_texture_storage_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

static void REGAL_CALL statistics_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorage2DMultisampleEXT++;

  statistics.gl_arb_texture_storage_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

static void REGAL_CALL statistics_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureStorage3DMultisampleEXT++;

  statistics.gl_arb_texture_storage_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

// GL_ARB_texture_view

static void REGAL_CALL statistics_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureView++;

  statistics.gl_arb_texture_view++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

// GL_ARB_timer_query

static void REGAL_CALL statistics_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjecti64v++;

  statistics.gl_arb_timer_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjecti64v)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectui64v++;

  statistics.gl_arb_timer_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectui64v)(id, pname, params);
}

static void REGAL_CALL statistics_glQueryCounter(GLuint id, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glQueryCounter++;

  statistics.gl_arb_timer_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glQueryCounter)(id, target);
}

// GL_ARB_transform_feedback2

static void REGAL_CALL statistics_glBindTransformFeedback(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTransformFeedback++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindTransformFeedback)(target, id);
}

static void REGAL_CALL statistics_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteTransformFeedbacks++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteTransformFeedbacks)(n, ids);
}

static void REGAL_CALL statistics_glDrawTransformFeedback(GLenum mode, GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTransformFeedback++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTransformFeedback)(mode, name);
}

static void REGAL_CALL statistics_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenTransformFeedbacks++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenTransformFeedbacks)(n, ids);
}

static GLboolean REGAL_CALL statistics_glIsTransformFeedback(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTransformFeedback++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTransformFeedback)(id);
  return ret;
}

static void REGAL_CALL statistics_glPauseTransformFeedback(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPauseTransformFeedback++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPauseTransformFeedback)();
}

static void REGAL_CALL statistics_glResumeTransformFeedback(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResumeTransformFeedback++;

  statistics.gl_arb_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResumeTransformFeedback)();
}

// GL_ARB_transform_feedback3

static void REGAL_CALL statistics_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginQueryIndexed++;

  statistics.gl_arb_transform_feedback3++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginQueryIndexed)(target, index, id);
}

static void REGAL_CALL statistics_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTransformFeedbackStream++;

  statistics.gl_arb_transform_feedback3++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTransformFeedbackStream)(mode, id, stream);
}

static void REGAL_CALL statistics_glEndQueryIndexed(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndQueryIndexed++;

  statistics.gl_arb_transform_feedback3++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndQueryIndexed)(target, index);
}

static void REGAL_CALL statistics_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryIndexediv++;

  statistics.gl_arb_transform_feedback3++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryIndexediv)(target, index, pname, params);
}

// GL_ARB_transform_feedback_instanced

static void REGAL_CALL statistics_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTransformFeedbackInstanced++;

  statistics.gl_arb_transform_feedback_instanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTransformFeedbackInstanced)(mode, id, primcount);
}

static void REGAL_CALL statistics_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTransformFeedbackStreamInstanced++;

  statistics.gl_arb_transform_feedback_instanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTransformFeedbackStreamInstanced)(mode, id, stream, primcount);
}

// GL_ARB_transpose_matrix

static void REGAL_CALL statistics_glLoadTransposeMatrixdARB(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadTransposeMatrixdARB++;

  statistics.gl_arb_transpose_matrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadTransposeMatrixdARB)(m);
}

static void REGAL_CALL statistics_glLoadTransposeMatrixfARB(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadTransposeMatrixfARB++;

  statistics.gl_arb_transpose_matrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadTransposeMatrixfARB)(m);
}

static void REGAL_CALL statistics_glMultTransposeMatrixdARB(const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultTransposeMatrixdARB++;

  statistics.gl_arb_transpose_matrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultTransposeMatrixdARB)(m);
}

static void REGAL_CALL statistics_glMultTransposeMatrixfARB(const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultTransposeMatrixfARB++;

  statistics.gl_arb_transpose_matrix++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultTransposeMatrixfARB)(m);
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL statistics_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferBase++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferBase)(target, index, buffer);
}

static void REGAL_CALL statistics_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferRange++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferRange)(target, index, buffer, offset, size);
}

static void REGAL_CALL statistics_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniformBlockName++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

static void REGAL_CALL statistics_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniformBlockiv++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);
}

static void REGAL_CALL statistics_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniformName++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);
}

static void REGAL_CALL statistics_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveUniformsiv++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);
}

static void REGAL_CALL statistics_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegeri_v++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegeri_v)(target, index, data);
}

static GLuint REGAL_CALL statistics_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformBlockIndex++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetUniformBlockIndex)(program, uniformBlockName);
  return ret;
}

static void REGAL_CALL statistics_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformIndices++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);
}

static void REGAL_CALL statistics_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformBlockBinding++;

  statistics.gl_arb_uniform_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);
}

// GL_ARB_vertex_array_object

static void REGAL_CALL statistics_glBindVertexArray(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexArray++;

  statistics.gl_arb_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexArray)(array);
}

static void REGAL_CALL statistics_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteVertexArrays++;

  statistics.gl_arb_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteVertexArrays)(n, arrays);
}

static void REGAL_CALL statistics_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenVertexArrays++;

  statistics.gl_arb_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenVertexArrays)(n, arrays);
}

static GLboolean REGAL_CALL statistics_glIsVertexArray(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsVertexArray++;

  statistics.gl_arb_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsVertexArray)(array);
  return ret;
}

// GL_ARB_vertex_attrib_64bit

static void REGAL_CALL statistics_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribLdv++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribLdv)(index, pname, params);
}

static void REGAL_CALL statistics_glVertexAttribL1d(GLuint index, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1d++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1d)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1dv++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2d++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2d)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2dv++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3d++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3d)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3dv++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4d++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4d)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4dv++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4dv)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribLPointer++;

  statistics.gl_arb_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribLPointer)(index, size, type, stride, pointer);
}

// GL_ARB_vertex_attrib_binding

static void REGAL_CALL statistics_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexBuffer++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexBuffer)(bindingindex, buffer, offset, stride);
}

static void REGAL_CALL statistics_glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayBindVertexBufferEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayBindVertexBufferEXT)(vaobj, bindingindex, buffer, offset, stride);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribBindingEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribBindingEXT)(vaobj, attribindex, bindingindex);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribFormatEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribFormatEXT)(vaobj, attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribIFormatEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribIFormatEXT)(vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribLFormatEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribLFormatEXT)(vaobj, attribindex, size, type, relativeoffset);
}

static void REGAL_CALL statistics_glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexBindingDivisorEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexBindingDivisorEXT)(vaobj, bindingindex, divisor);
}

static void REGAL_CALL statistics_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribBinding++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribBinding)(attribindex, bindingindex);
}

static void REGAL_CALL statistics_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribFormat++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);
}

static void REGAL_CALL statistics_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribIFormat++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribIFormat)(attribindex, size, type, relativeoffset);
}

static void REGAL_CALL statistics_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribLFormat++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribLFormat)(attribindex, size, type, relativeoffset);
}

static void REGAL_CALL statistics_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexBindingDivisor++;

  statistics.gl_arb_vertex_attrib_binding++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexBindingDivisor)(bindingindex, divisor);
}

// GL_ARB_vertex_blend

static void REGAL_CALL statistics_glVertexBlendARB(GLint count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexBlendARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexBlendARB)(count);
}

static void REGAL_CALL statistics_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightPointerARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightPointerARB)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glWeightbvARB(GLint size, const GLbyte *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightbvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightbvARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightdvARB(GLint size, const GLdouble *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightdvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightdvARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightfvARB(GLint size, const GLfloat *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightfvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightfvARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightivARB(GLint size, const GLint *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightivARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightivARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightsvARB(GLint size, const GLshort *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightsvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightsvARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightubvARB(GLint size, const GLubyte *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightubvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightubvARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightuivARB(GLint size, const GLuint *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightuivARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightuivARB)(size, weights);
}

static void REGAL_CALL statistics_glWeightusvARB(GLint size, const GLushort *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightusvARB++;

  statistics.gl_arb_vertex_blend++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightusvARB)(size, weights);
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL statistics_glBindBufferARB(GLenum target, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferARB)(target, buffer);
}

static void REGAL_CALL statistics_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferDataARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferDataARB)(target, size, data, usage);
}

static void REGAL_CALL statistics_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferSubDataARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferSubDataARB)(target, offset, size, data);
}

static void REGAL_CALL statistics_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteBuffersARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteBuffersARB)(n, buffers);
}

static void REGAL_CALL statistics_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenBuffersARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenBuffersARB)(n, buffers);
}

static void REGAL_CALL statistics_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferParameterivARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferParameterivARB)(target, pname, params);
}

static void REGAL_CALL statistics_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferPointervARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferPointervARB)(target, pname, params);
}

static void REGAL_CALL statistics_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferSubDataARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferSubDataARB)(target, offset, size, data);
}

static GLboolean REGAL_CALL statistics_glIsBufferARB(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsBufferARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsBufferARB)(buffer);
  return ret;
}

static GLvoid *REGAL_CALL statistics_glMapBufferARB(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapBufferARB++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapBufferARB)(target, access);
  return ret;
}

static GLboolean REGAL_CALL statistics_glUnmapBufferARB(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapBufferARB++;

  statistics.gl_arb_vertex_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glUnmapBufferARB)(target);
  return ret;
}

// GL_ARB_vertex_program

static void REGAL_CALL statistics_glBindProgramARB(GLenum target, GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindProgramARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindProgramARB)(target, program);
}

static void REGAL_CALL statistics_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteProgramsARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteProgramsARB)(n, programs);
}

static void REGAL_CALL statistics_glDisableVertexAttribArrayARB(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVertexAttribArrayARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVertexAttribArrayARB)(index);
}

static void REGAL_CALL statistics_glEnableVertexAttribArrayARB(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVertexAttribArrayARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVertexAttribArrayARB)(index);
}

static void REGAL_CALL statistics_glGenProgramsARB(GLsizei n, GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenProgramsARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenProgramsARB)(n, programs);
}

static void REGAL_CALL statistics_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramEnvParameterdvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramEnvParameterdvARB)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramEnvParameterfvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramEnvParameterfvARB)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramLocalParameterdvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramLocalParameterdvARB)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramLocalParameterfvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramLocalParameterfvARB)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramStringARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramStringARB)(target, pname, string);
}

static void REGAL_CALL statistics_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramivARB)(target, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribPointervARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribPointervARB)(index, pname, pointer);
}

static void REGAL_CALL statistics_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribdvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribdvARB)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribfvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribfvARB)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribivARB)(index, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsProgramARB(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsProgramARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsProgramARB)(program);
  return ret;
}

static void REGAL_CALL statistics_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameter4dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameter4dARB)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameter4dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameter4dvARB)(target, index, params);
}

static void REGAL_CALL statistics_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameter4fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameter4fARB)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameter4fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameter4fvARB)(target, index, params);
}

static void REGAL_CALL statistics_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameter4dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameter4dARB)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameter4dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameter4dvARB)(target, index, params);
}

static void REGAL_CALL statistics_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameter4fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameter4fARB)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameter4fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameter4fvARB)(target, index, params);
}

static void REGAL_CALL statistics_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramStringARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramStringARB)(target, format, len, string);
}

static void REGAL_CALL statistics_glVertexAttrib1dARB(GLuint index, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1dARB)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1dvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1fARB(GLuint index, GLfloat x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1fARB)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1fvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1sARB(GLuint index, GLshort x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1sARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1sARB)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1svARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1svARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2dARB)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2dvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2fARB)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2fvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2sARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2sARB)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2svARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2svARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3dARB)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3dvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3fARB)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3fvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3sARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3sARB)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3svARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3svARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NbvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NbvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NivARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NsvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NsvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NubARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NubARB)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NubvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NubvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NuivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NuivARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4NusvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4NusvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4bvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4bvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4dARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4dARB)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4dvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4dvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4fARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4fARB)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4fvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4fvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4ivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4ivARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4sARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4sARB)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4svARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4svARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4ubvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4ubvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4uivARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4uivARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4usvARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4usvARB)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribPointerARB++;

  statistics.gl_arb_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
}

// GL_ARB_vertex_shader

static void REGAL_CALL statistics_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindAttribLocationARB++;

  statistics.gl_arb_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindAttribLocationARB)(programObj, index, name);
}

static void REGAL_CALL statistics_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveAttribARB++;

  statistics.gl_arb_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);
}

static GLint REGAL_CALL statistics_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetAttribLocationARB++;

  statistics.gl_arb_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetAttribLocationARB)(programObj, name);
  return ret;
}

// GL_ARB_vertex_type_2_10_10_10_rev

static void REGAL_CALL statistics_glColorP3ui(GLenum type, GLuint color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorP3ui)(type, color);
}

static void REGAL_CALL statistics_glColorP3uiv(GLenum type, const GLuint *color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorP3uiv)(type, color);
}

static void REGAL_CALL statistics_glColorP4ui(GLenum type, GLuint color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorP4ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorP4ui)(type, color);
}

static void REGAL_CALL statistics_glColorP4uiv(GLenum type, const GLuint *color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorP4uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorP4uiv)(type, color);
}

static void REGAL_CALL statistics_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP1ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP1ui)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP1uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP1uiv)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP2ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP2ui)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP2uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP2uiv)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP3ui)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP3uiv)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP4ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP4ui)(texture, type, coords);
}

static void REGAL_CALL statistics_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordP4uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordP4uiv)(texture, type, coords);
}

static void REGAL_CALL statistics_glNormalP3ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalP3ui)(type, coords);
}

static void REGAL_CALL statistics_glNormalP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalP3uiv)(type, coords);
}

static void REGAL_CALL statistics_glSecondaryColorP3ui(GLenum type, GLuint color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorP3ui)(type, color);
}

static void REGAL_CALL statistics_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorP3uiv)(type, color);
}

static void REGAL_CALL statistics_glTexCoordP1ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP1ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP1ui)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP1uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP1uiv)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP2ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP2ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP2ui)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP2uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP2uiv)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP3ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP3ui)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP3uiv)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP4ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP4ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP4ui)(type, coords);
}

static void REGAL_CALL statistics_glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordP4uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordP4uiv)(type, coords);
}

static void REGAL_CALL statistics_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP1ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP1ui)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP1uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP1uiv)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP2ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP2ui)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP2uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP2uiv)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP3ui)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP3uiv)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP4ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP4ui)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribP4uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribP4uiv)(index, type, normalized, value);
}

static void REGAL_CALL statistics_glVertexP2ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP2ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP2ui)(type, coords);
}

static void REGAL_CALL statistics_glVertexP2uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP2uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP2uiv)(type, coords);
}

static void REGAL_CALL statistics_glVertexP3ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP3ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP3ui)(type, coords);
}

static void REGAL_CALL statistics_glVertexP3uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP3uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP3uiv)(type, coords);
}

static void REGAL_CALL statistics_glVertexP4ui(GLenum type, GLuint coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP4ui++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP4ui)(type, coords);
}

static void REGAL_CALL statistics_glVertexP4uiv(GLenum type, const GLuint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexP4uiv++;

  statistics.gl_arb_vertex_type_2_10_10_10_rev++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexP4uiv)(type, coords);
}

// GL_ARB_viewport_array

static void REGAL_CALL statistics_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangeArrayv++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangeArrayv)(first, count, v);
}

static void REGAL_CALL statistics_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangeIndexed++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangeIndexed)(index, n, f);
}

static void REGAL_CALL statistics_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDoublei_v++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDoublei_v)(target, index, v);
}

static void REGAL_CALL statistics_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFloati_v++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFloati_v)(target, index, v);
}

static void REGAL_CALL statistics_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScissorArrayv++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScissorArrayv)(first, count, v);
}

static void REGAL_CALL statistics_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScissorIndexed++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScissorIndexed)(index, left, bottom, width, height);
}

static void REGAL_CALL statistics_glScissorIndexedv(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScissorIndexedv++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScissorIndexedv)(index, v);
}

static void REGAL_CALL statistics_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glViewportArrayv++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glViewportArrayv)(first, count, v);
}

static void REGAL_CALL statistics_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glViewportIndexedf++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glViewportIndexedf)(index, x, y, w, h);
}

static void REGAL_CALL statistics_glViewportIndexedfv(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glViewportIndexedfv++;

  statistics.gl_arb_viewport_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glViewportIndexedfv)(index, v);
}

// GL_ARB_window_pos

static void REGAL_CALL statistics_glWindowPos2dARB(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2dARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2dARB)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2dvARB(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2dvARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2dvARB)(p);
}

static void REGAL_CALL statistics_glWindowPos2fARB(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2fARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2fARB)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2fvARB(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2fvARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2fvARB)(p);
}

static void REGAL_CALL statistics_glWindowPos2iARB(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2iARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2iARB)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2ivARB(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2ivARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2ivARB)(p);
}

static void REGAL_CALL statistics_glWindowPos2sARB(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2sARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2sARB)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2svARB(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2svARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2svARB)(p);
}

static void REGAL_CALL statistics_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3dARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3dARB)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3dvARB(const GLdouble *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3dvARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3dvARB)(p);
}

static void REGAL_CALL statistics_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3fARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3fARB)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3fvARB(const GLfloat *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3fvARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3fvARB)(p);
}

static void REGAL_CALL statistics_glWindowPos3iARB(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3iARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3iARB)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3ivARB(const GLint *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3ivARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3ivARB)(p);
}

static void REGAL_CALL statistics_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3sARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3sARB)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3svARB(const GLshort *p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3svARB++;

  statistics.gl_arb_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3svARB)(p);
}

// GL_ATI_draw_buffers

static void REGAL_CALL statistics_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffersATI++;

  statistics.gl_ati_draw_buffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffersATI)(n, bufs);
}

// GL_ATI_element_array

static void REGAL_CALL statistics_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementArrayATI++;

  statistics.gl_ati_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementArrayATI)(mode, count);
}

static void REGAL_CALL statistics_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawRangeElementArrayATI++;

  statistics.gl_ati_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawRangeElementArrayATI)(mode, start, end, count);
}

static void REGAL_CALL statistics_glElementPointerATI(GLenum type, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glElementPointerATI++;

  statistics.gl_ati_element_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glElementPointerATI)(type, pointer);
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL statistics_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexBumpParameterfvATI++;

  statistics.gl_ati_envmap_bumpmap++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexBumpParameterfvATI)(pname, param);
}

static void REGAL_CALL statistics_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexBumpParameterivATI++;

  statistics.gl_ati_envmap_bumpmap++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexBumpParameterivATI)(pname, param);
}

static void REGAL_CALL statistics_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBumpParameterfvATI++;

  statistics.gl_ati_envmap_bumpmap++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBumpParameterfvATI)(pname, param);
}

static void REGAL_CALL statistics_glTexBumpParameterivATI(GLenum pname, const GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBumpParameterivATI++;

  statistics.gl_ati_envmap_bumpmap++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBumpParameterivATI)(pname, param);
}

// GL_ATI_fragment_shader

static void REGAL_CALL statistics_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFragmentOp1ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL statistics_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFragmentOp2ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL statistics_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFragmentOp3ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL statistics_glBeginFragmentShaderATI(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginFragmentShaderATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginFragmentShaderATI)();
}

static void REGAL_CALL statistics_glBindFragmentShaderATI(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFragmentShaderATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFragmentShaderATI)(id);
}

static void REGAL_CALL statistics_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorFragmentOp1ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

static void REGAL_CALL statistics_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorFragmentOp2ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

static void REGAL_CALL statistics_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorFragmentOp3ATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

static void REGAL_CALL statistics_glDeleteFragmentShaderATI(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFragmentShaderATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFragmentShaderATI)(id);
}

static void REGAL_CALL statistics_glEndFragmentShaderATI(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndFragmentShaderATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndFragmentShaderATI)();
}

static GLuint REGAL_CALL statistics_glGenFragmentShadersATI(GLuint range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFragmentShadersATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenFragmentShadersATI)(range);
  return ret;
}

static void REGAL_CALL statistics_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPassTexCoordATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPassTexCoordATI)(dst, coord, swizzle);
}

static void REGAL_CALL statistics_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleMapATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleMapATI)(dst, interp, swizzle);
}

static void REGAL_CALL statistics_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetFragmentShaderConstantATI++;

  statistics.gl_ati_fragment_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetFragmentShaderConstantATI)(dst, value);
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL statistics_glMapObjectBufferATI(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapObjectBufferATI++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapObjectBufferATI)(buffer);
  return ret;
}

static void REGAL_CALL statistics_glUnmapObjectBufferATI(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapObjectBufferATI++;

  statistics.gl_ati_map_object_buffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUnmapObjectBufferATI)(buffer);
}

// GL_ATI_pn_triangles

static void REGAL_CALL statistics_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPNTrianglesfATI++;

  statistics.gl_ati_pn_triangles++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPNTrianglesfATI)(pname, param);
}

static void REGAL_CALL statistics_glPNTrianglesiATI(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPNTrianglesiATI++;

  statistics.gl_ati_pn_triangles++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPNTrianglesiATI)(pname, param);
}

// GL_ATI_separate_stencil

static void REGAL_CALL statistics_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilFuncSeparateATI++;

  statistics.gl_ati_separate_stencil++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilFuncSeparateATI)(frontfunc, backfunc, ref, mask);
}

static void REGAL_CALL statistics_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilOpSeparateATI++;

  statistics.gl_ati_separate_stencil++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilOpSeparateATI)(face, sfail, dpfail, dppass);
}

// GL_ATI_vertex_array_object

static void REGAL_CALL statistics_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glArrayObjectATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glArrayObjectATI)(array, size, type, stride, buffer, offset);
}

static void REGAL_CALL statistics_glFreeObjectBufferATI(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFreeObjectBufferATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFreeObjectBufferATI)(buffer);
}

static void REGAL_CALL statistics_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetArrayObjectfvATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetArrayObjectfvATI)(array, pname, params);
}

static void REGAL_CALL statistics_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetArrayObjectivATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetArrayObjectivATI)(array, pname, params);
}

static void REGAL_CALL statistics_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectBufferfvATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectBufferfvATI)(buffer, pname, params);
}

static void REGAL_CALL statistics_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectBufferivATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectBufferivATI)(buffer, pname, params);
}

static void REGAL_CALL statistics_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantArrayObjectfvATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantArrayObjectfvATI)(id, pname, params);
}

static void REGAL_CALL statistics_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantArrayObjectivATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantArrayObjectivATI)(id, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsObjectBufferATI(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsObjectBufferATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsObjectBufferATI)(buffer);
  return ret;
}

static GLuint REGAL_CALL statistics_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNewObjectBufferATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glNewObjectBufferATI)(size, pointer, usage);
  return ret;
}

static void REGAL_CALL statistics_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUpdateObjectBufferATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);
}

static void REGAL_CALL statistics_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantArrayObjectATI++;

  statistics.gl_ati_vertex_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantArrayObjectATI)(id, type, stride, buffer, offset);
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL statistics_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribArrayObjectfvATI++;

  statistics.gl_ati_vertex_attrib_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribArrayObjectfvATI)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribArrayObjectivATI++;

  statistics.gl_ati_vertex_attrib_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribArrayObjectivATI)(index, pname, params);
}

static void REGAL_CALL statistics_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribArrayObjectATI++;

  statistics.gl_ati_vertex_attrib_array_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);
}

// GL_ATI_vertex_streams

static void REGAL_CALL statistics_glClientActiveVertexStreamATI(GLenum stream)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientActiveVertexStreamATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClientActiveVertexStreamATI)(stream);
}

static void REGAL_CALL statistics_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3bATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3bATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3bvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3bvATI)(stream, coords);
}

static void REGAL_CALL statistics_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3dATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3dATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3dvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3dvATI)(stream, coords);
}

static void REGAL_CALL statistics_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3fATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3fATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3fvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3fvATI)(stream, coords);
}

static void REGAL_CALL statistics_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3iATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3iATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3ivATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3ivATI)(stream, coords);
}

static void REGAL_CALL statistics_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3sATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3sATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalStream3svATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalStream3svATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexBlendEnvfATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexBlendEnvfATI)(pname, param);
}

static void REGAL_CALL statistics_glVertexBlendEnviATI(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexBlendEnviATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexBlendEnviATI)(pname, param);
}

static void REGAL_CALL statistics_glVertexStream1dATI(GLenum stream, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1dATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1dATI)(stream, x);
}

static void REGAL_CALL statistics_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1dvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1dvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream1fATI(GLenum stream, GLfloat x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1fATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1fATI)(stream, x);
}

static void REGAL_CALL statistics_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1fvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1fvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream1iATI(GLenum stream, GLint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1iATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1iATI)(stream, x);
}

static void REGAL_CALL statistics_glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1ivATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1ivATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream1sATI(GLenum stream, GLshort x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1sATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1sATI)(stream, x);
}

static void REGAL_CALL statistics_glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream1svATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream1svATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2dATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2dATI)(stream, x, y);
}

static void REGAL_CALL statistics_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2dvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2dvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2fATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2fATI)(stream, x, y);
}

static void REGAL_CALL statistics_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2fvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2fvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2iATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2iATI)(stream, x, y);
}

static void REGAL_CALL statistics_glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2ivATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2ivATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2sATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2sATI)(stream, x, y);
}

static void REGAL_CALL statistics_glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream2svATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream2svATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3dATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3dATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3dvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3dvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3fATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3fATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3fvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3fvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3iATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3iATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3ivATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3ivATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3sATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3sATI)(stream, x, y, z);
}

static void REGAL_CALL statistics_glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream3svATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream3svATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4dATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4dATI)(stream, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4dvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4dvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4fATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4fATI)(stream, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4fvATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4fvATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4iATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4iATI)(stream, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4ivATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4ivATI)(stream, coords);
}

static void REGAL_CALL statistics_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4sATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4sATI)(stream, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexStream4svATI++;

  statistics.gl_ati_vertex_streams++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexStream4svATI)(stream, coords);
}

// GL_EXT_bindable_uniform

static GLint REGAL_CALL statistics_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformBufferSizeEXT++;

  statistics.gl_ext_bindable_uniform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetUniformBufferSizeEXT)(program, location);
  return ret;
}

static GLintptr REGAL_CALL statistics_glGetUniformOffsetEXT(GLuint program, GLint location)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformOffsetEXT++;

  statistics.gl_ext_bindable_uniform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLintptr  ret = _next->call(&_next->glGetUniformOffsetEXT)(program, location);
  return ret;
}

static void REGAL_CALL statistics_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformBufferEXT++;

  statistics.gl_ext_bindable_uniform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformBufferEXT)(program, location, buffer);
}

// GL_EXT_blend_color

static void REGAL_CALL statistics_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendColorEXT++;

  statistics.gl_ext_blend_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendColorEXT)(red, green, blue, alpha);
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL statistics_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparateEXT++;

  statistics.gl_ext_blend_equation_separate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparateEXT)(modeRGB, modeAlpha);
}

// GL_EXT_blend_func_separate

static void REGAL_CALL statistics_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparateEXT++;

  statistics.gl_ext_blend_func_separate++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_EXT_blend_minmax

static void REGAL_CALL statistics_glBlendEquationEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationEXT++;

  statistics.gl_ext_blend_minmax++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationEXT)(mode);
}

// GL_EXT_color_subtable

static void REGAL_CALL statistics_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorSubTableEXT++;

  statistics.gl_ext_color_subtable++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorSubTableEXT)(target, start, count, format, type, table);
}

static void REGAL_CALL statistics_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyColorSubTableEXT++;

  statistics.gl_ext_color_subtable++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyColorSubTableEXT)(target, start, x, y, width);
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL statistics_glLockArraysEXT(GLint first, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLockArraysEXT++;

  statistics.gl_ext_compiled_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLockArraysEXT)(first, count);
}

static void REGAL_CALL statistics_glUnlockArraysEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnlockArraysEXT++;

  statistics.gl_ext_compiled_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUnlockArraysEXT)();
}

// GL_EXT_convolution

static void REGAL_CALL statistics_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionFilter1DEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);
}

static void REGAL_CALL statistics_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionFilter2DEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);
}

static void REGAL_CALL statistics_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameterfEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameterfEXT)(target, pname, param);
}

static void REGAL_CALL statistics_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameterfvEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameteriEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameteriEXT)(target, pname, param);
}

static void REGAL_CALL statistics_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glConvolutionParameterivEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glConvolutionParameterivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyConvolutionFilter1DEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);
}

static void REGAL_CALL statistics_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyConvolutionFilter2DEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);
}

static void REGAL_CALL statistics_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionFilterEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionFilterEXT)(target, format, type, image);
}

static void REGAL_CALL statistics_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionParameterfvEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetConvolutionParameterivEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetConvolutionParameterivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSeparableFilterEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSeparableFilterEXT)(target, format, type, row, column, span);
}

static void REGAL_CALL statistics_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSeparableFilter2DEXT++;

  statistics.gl_ext_convolution++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);
}

// GL_EXT_coordinate_frame

static void REGAL_CALL statistics_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3bEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3bEXT)(bx, by, bz);
}

static void REGAL_CALL statistics_glBinormal3bvEXT(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3bvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3bvEXT)(v);
}

static void REGAL_CALL statistics_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3dEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3dEXT)(bx, by, bz);
}

static void REGAL_CALL statistics_glBinormal3dvEXT(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3dvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3dvEXT)(v);
}

static void REGAL_CALL statistics_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3fEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3fEXT)(bx, by, bz);
}

static void REGAL_CALL statistics_glBinormal3fvEXT(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3fvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3fvEXT)(v);
}

static void REGAL_CALL statistics_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3iEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3iEXT)(bx, by, bz);
}

static void REGAL_CALL statistics_glBinormal3ivEXT(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3ivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3ivEXT)(v);
}

static void REGAL_CALL statistics_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3sEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3sEXT)(bx, by, bz);
}

static void REGAL_CALL statistics_glBinormal3svEXT(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormal3svEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormal3svEXT)(v);
}

static void REGAL_CALL statistics_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBinormalPointerEXT++;

  statistics.gl_ext_coordinate_frame++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBinormalPointerEXT)(type, stride, pointer);
}

static void REGAL_CALL statistics_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3bEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3bEXT)(tx, ty, tz);
}

static void REGAL_CALL statistics_glTangent3bvEXT(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3bvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3bvEXT)(v);
}

static void REGAL_CALL statistics_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3dEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3dEXT)(tx, ty, tz);
}

static void REGAL_CALL statistics_glTangent3dvEXT(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3dvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3dvEXT)(v);
}

static void REGAL_CALL statistics_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3fEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3fEXT)(tx, ty, tz);
}

static void REGAL_CALL statistics_glTangent3fvEXT(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3fvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3fvEXT)(v);
}

static void REGAL_CALL statistics_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3iEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3iEXT)(tx, ty, tz);
}

static void REGAL_CALL statistics_glTangent3ivEXT(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3ivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3ivEXT)(v);
}

static void REGAL_CALL statistics_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3sEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3sEXT)(tx, ty, tz);
}

static void REGAL_CALL statistics_glTangent3svEXT(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangent3svEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangent3svEXT)(v);
}

static void REGAL_CALL statistics_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTangentPointerEXT++;

  statistics.gl_ext_coordinate_frame++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTangentPointerEXT)(type, stride, pointer);
}

// GL_EXT_copy_texture

static void REGAL_CALL statistics_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexImage1DEXT++;

  statistics.gl_ext_copy_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL statistics_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexImage2DEXT++;

  statistics.gl_ext_copy_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL statistics_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage1DEXT++;

  statistics.gl_ext_copy_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);
}

static void REGAL_CALL statistics_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage2DEXT++;

  statistics.gl_ext_copy_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage3DEXT++;

  statistics.gl_ext_copy_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

// GL_EXT_cull_vertex

static void REGAL_CALL statistics_glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCullParameterdvEXT++;

  statistics.gl_ext_cull_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCullParameterdvEXT)(pname, params);
}

static void REGAL_CALL statistics_glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCullParameterfvEXT++;

  statistics.gl_ext_cull_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCullParameterfvEXT)(pname, params);
}

// GL_EXT_debug_label

static void REGAL_CALL statistics_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectLabelEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectLabelEXT)(type, object, bufSize, length, label);
}

static void REGAL_CALL statistics_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLabelObjectEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLabelObjectEXT)(type, object, length, label);
}

// GL_EXT_debug_marker

static void REGAL_CALL statistics_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInsertEventMarkerEXT++;

  statistics.gl_ext_debug_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInsertEventMarkerEXT)(length, marker);
}

static void REGAL_CALL statistics_glPopGroupMarkerEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopGroupMarkerEXT++;

  statistics.gl_ext_debug_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopGroupMarkerEXT)();
}

static void REGAL_CALL statistics_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushGroupMarkerEXT++;

  statistics.gl_ext_debug_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushGroupMarkerEXT)(length, marker);
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL statistics_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthBoundsEXT++;

  statistics.gl_ext_depth_bounds_test++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthBoundsEXT)(zmin, zmax);
}

// GL_EXT_direct_state_access

static void REGAL_CALL statistics_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindMultiTextureEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindMultiTextureEXT)(texunit, target, texture);
}

static GLenum REGAL_CALL statistics_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCheckNamedFramebufferStatusEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glCheckNamedFramebufferStatusEXT)(framebuffer, target);
  return ret;
}

static void REGAL_CALL statistics_glClientAttribDefaultEXT(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClientAttribDefaultEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClientAttribDefaultEXT)(mask);
}

static void REGAL_CALL statistics_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedMultiTexSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
}

static void REGAL_CALL statistics_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTextureSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
}

static void REGAL_CALL statistics_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyMultiTexImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL statistics_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyMultiTexImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL statistics_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyMultiTexSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
}

static void REGAL_CALL statistics_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyMultiTexSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyMultiTexSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
}

static void REGAL_CALL statistics_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
}

static void REGAL_CALL statistics_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
}

static void REGAL_CALL statistics_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTextureSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableClientStateIndexedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableClientStateIndexedEXT)(array, index);
}

static void REGAL_CALL statistics_glDisableClientStateiEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableClientStateiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableClientStateiEXT)(array, index);
}

static void REGAL_CALL statistics_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVertexArrayAttribEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVertexArrayAttribEXT)(vaobj, array);
}

static void REGAL_CALL statistics_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVertexArrayEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVertexArrayEXT)(vaobj, array);
}

static void REGAL_CALL statistics_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableClientStateIndexedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableClientStateIndexedEXT)(array, index);
}

static void REGAL_CALL statistics_glEnableClientStateiEXT(GLenum array, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableClientStateiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableClientStateiEXT)(array, index);
}

static void REGAL_CALL statistics_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVertexArrayAttribEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVertexArrayAttribEXT)(vaobj, array);
}

static void REGAL_CALL statistics_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVertexArrayEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVertexArrayEXT)(vaobj, array);
}

static void REGAL_CALL statistics_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushMappedNamedBufferRangeEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
}

static void REGAL_CALL statistics_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferDrawBufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferDrawBufferEXT)(framebuffer, mode);
}

static void REGAL_CALL statistics_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferDrawBuffersEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
}

static void REGAL_CALL statistics_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferReadBufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferReadBufferEXT)(framebuffer, mode);
}

static void REGAL_CALL statistics_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenerateMultiTexMipmapEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenerateMultiTexMipmapEXT)(texunit, target);
}

static void REGAL_CALL statistics_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenerateTextureMipmapEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenerateTextureMipmapEXT)(texture, target);
}

static void REGAL_CALL statistics_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCompressedMultiTexImageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
}

static void REGAL_CALL statistics_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCompressedTextureImageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCompressedTextureImageEXT)(texture, target, lod, img);
}

static void REGAL_CALL statistics_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDoubleIndexedvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDoubleIndexedvEXT)(target, index, data);
}

static void REGAL_CALL statistics_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDoublei_vEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDoublei_vEXT)(target, index, data);
}

static void REGAL_CALL statistics_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFloatIndexedvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFloatIndexedvEXT)(target, index, data);
}

static void REGAL_CALL statistics_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFloati_vEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFloati_vEXT)(target, index, data);
}

static void REGAL_CALL statistics_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFramebufferParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFramebufferParameterivEXT)(framebuffer, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexEnvfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexEnvfvEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexEnvivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexEnvivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexGendvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexGendvEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexGenfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexGenfvEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexGenivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexGenivEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexImageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
}

static void REGAL_CALL statistics_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexLevelParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexLevelParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexParameterIivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexParameterIivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexParameterIuivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexParameterfvEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultiTexParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultiTexParameterivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedBufferParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedBufferParameterivEXT)(buffer, pname, params);
}

static void REGAL_CALL statistics_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedBufferPointervEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedBufferPointervEXT)(buffer, pname, params);
}

static void REGAL_CALL statistics_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedBufferSubDataEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
}

static void REGAL_CALL statistics_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedFramebufferAttachmentParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);
}

static void REGAL_CALL statistics_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramLocalParameterIivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramLocalParameterIuivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramLocalParameterdvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramLocalParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramStringEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramStringEXT)(program, target, pname, string);
}

static void REGAL_CALL statistics_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedProgramivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedProgramivEXT)(program, target, pname, params);
}

static void REGAL_CALL statistics_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedRenderbufferParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);
}

static void REGAL_CALL statistics_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPointerIndexedvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPointerIndexedvEXT)(target, index, data);
}

static void REGAL_CALL statistics_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPointeri_vEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPointeri_vEXT)(pname, index, params);
}

static void REGAL_CALL statistics_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureImageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureImageEXT)(texture, target, level, format, type, pixels);
}

static void REGAL_CALL statistics_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureLevelParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);
}

static void REGAL_CALL statistics_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureLevelParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);
}

static void REGAL_CALL statistics_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureParameterIivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureParameterIivEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureParameterIuivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureParameterIuivEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureParameterfvEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTextureParameterivEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexArrayIntegeri_vEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);
}

static void REGAL_CALL statistics_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexArrayIntegervEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexArrayIntegervEXT)(vaobj, pname, param);
}

static void REGAL_CALL statistics_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexArrayPointeri_vEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);
}

static void REGAL_CALL statistics_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexArrayPointervEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexArrayPointervEXT)(vaobj, pname, param);
}

static GLvoid *REGAL_CALL statistics_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapNamedBufferEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapNamedBufferEXT)(buffer, access);
  return ret;
}

static GLvoid *REGAL_CALL statistics_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapNamedBufferRangeEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapNamedBufferRangeEXT)(buffer, offset, length, access);
  return ret;
}

static void REGAL_CALL statistics_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixFrustumEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glMatrixLoadIdentityEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixLoadIdentityEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixLoadIdentityEXT)(mode);
}

static void REGAL_CALL statistics_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixLoadTransposedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixLoadTransposedEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixLoadTransposefEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixLoadTransposefEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixLoaddEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixLoaddEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixLoadfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixLoadfEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixMultTransposedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixMultTransposedEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixMultTransposefEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixMultTransposefEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixMultdEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixMultdEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixMultfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixMultfEXT)(mode, m);
}

static void REGAL_CALL statistics_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixOrthoEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glMatrixPopEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixPopEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixPopEXT)(mode);
}

static void REGAL_CALL statistics_glMatrixPushEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixPushEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixPushEXT)(mode);
}

static void REGAL_CALL statistics_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixRotatedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixRotatedEXT)(mode, angle, x, y, z);
}

static void REGAL_CALL statistics_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixRotatefEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixRotatefEXT)(mode, angle, x, y, z);
}

static void REGAL_CALL statistics_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixScaledEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixScaledEXT)(mode, x, y, z);
}

static void REGAL_CALL statistics_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixScalefEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixScalefEXT)(mode, x, y, z);
}

static void REGAL_CALL statistics_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixTranslatedEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixTranslatedEXT)(mode, x, y, z);
}

static void REGAL_CALL statistics_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixTranslatefEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixTranslatefEXT)(mode, x, y, z);
}

static void REGAL_CALL statistics_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexBufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
}

static void REGAL_CALL statistics_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoordPointerEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
}

static void REGAL_CALL statistics_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexEnvfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexEnvfEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexEnvfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexEnvfvEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexEnviEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexEnviEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexEnvivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexEnvivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGendEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGendEXT)(texunit, coord, pname, param);
}

static void REGAL_CALL statistics_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGendvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGendvEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGenfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGenfEXT)(texunit, coord, pname, param);
}

static void REGAL_CALL statistics_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGenfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGenfvEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGeniEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGeniEXT)(texunit, coord, pname, param);
}

static void REGAL_CALL statistics_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexGenivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexGenivEXT)(texunit, coord, pname, params);
}

static void REGAL_CALL statistics_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL statistics_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL statistics_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL statistics_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameterIivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameterIivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameterIuivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameterIuivEXT)(texunit, target, pname, params);
}

static void REGAL_CALL statistics_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameterfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameterfEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameterfvEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameteriEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameteriEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexParameterivEXT)(texunit, target, pname, param);
}

static void REGAL_CALL statistics_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexRenderbufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
}

static void REGAL_CALL statistics_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL statistics_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static void REGAL_CALL statistics_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedBufferDataEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedBufferDataEXT)(buffer, size, data, usage);
}

static void REGAL_CALL statistics_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedBufferSubDataEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedBufferSubDataEXT)(buffer, offset, size, data);
}

static void REGAL_CALL statistics_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedCopyBufferSubDataEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

static void REGAL_CALL statistics_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferRenderbufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL statistics_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTexture1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTexture2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTexture3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL statistics_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTextureEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
}

static void REGAL_CALL statistics_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTextureFaceEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
}

static void REGAL_CALL statistics_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedFramebufferTextureLayerEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameter4dEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameter4dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameter4dvEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameter4fEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameter4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameter4fvEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameterI4iEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameterI4ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameterI4uiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameterI4uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParameters4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParametersI4ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);
}

static void REGAL_CALL statistics_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramLocalParametersI4uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);
}

static void REGAL_CALL statistics_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedProgramStringEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedProgramStringEXT)(program, target, format, len, string);
}

static void REGAL_CALL statistics_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedRenderbufferStorageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
}

static void REGAL_CALL statistics_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedRenderbufferStorageMultisampleCoverageEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
}

static void REGAL_CALL statistics_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNamedRenderbufferStorageMultisampleEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
}

static void REGAL_CALL statistics_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1dEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1dEXT)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1dvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1fEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1fEXT)(program, location, v0);
}

static void REGAL_CALL statistics_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1fvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1iEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1iEXT)(program, location, v0);
}

static void REGAL_CALL statistics_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1ivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1uiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1uiEXT)(program, location, v0);
}

static void REGAL_CALL statistics_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1uivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2dEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2dEXT)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2dvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2fEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2fEXT)(program, location, v0, v1);
}

static void REGAL_CALL statistics_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2fvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2iEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2iEXT)(program, location, v0, v1);
}

static void REGAL_CALL statistics_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2ivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2uiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2uiEXT)(program, location, v0, v1);
}

static void REGAL_CALL statistics_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2uivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3dEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3dEXT)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3dvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3fEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3fEXT)(program, location, v0, v1, v2);
}

static void REGAL_CALL statistics_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3fvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3iEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3iEXT)(program, location, v0, v1, v2);
}

static void REGAL_CALL statistics_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3ivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3uiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3uiEXT)(program, location, v0, v1, v2);
}

static void REGAL_CALL statistics_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3uivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4dEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4dEXT)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4dvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4fEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4fvEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4iEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4ivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4ivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4uiEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4uivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4uivEXT)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x3dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x3fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x4dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix2x4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x2dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x2fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x4dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix3x4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x2dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x2fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x3dvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformMatrix4x3fvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
}

static void REGAL_CALL statistics_glPushClientAttribDefaultEXT(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushClientAttribDefaultEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushClientAttribDefaultEXT)(mask);
}

static void REGAL_CALL statistics_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureBufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureBufferEXT)(texture, target, internalformat, buffer);
}

static void REGAL_CALL statistics_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameterIivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameterIivEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameterIuivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameterIuivEXT)(texture, target, pname, params);
}

static void REGAL_CALL statistics_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameterfEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameterfEXT)(texture, target, pname, param);
}

static void REGAL_CALL statistics_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameterfvEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameterfvEXT)(texture, target, pname, param);
}

static void REGAL_CALL statistics_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameteriEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameteriEXT)(texture, target, pname, param);
}

static void REGAL_CALL statistics_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureParameterivEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureParameterivEXT)(texture, target, pname, param);
}

static void REGAL_CALL statistics_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureRenderbufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureRenderbufferEXT)(texture, target, renderbuffer);
}

static void REGAL_CALL statistics_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureSubImage1DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL statistics_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureSubImage2DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureSubImage3DEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

static GLboolean REGAL_CALL statistics_glUnmapNamedBufferEXT(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapNamedBufferEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glUnmapNamedBufferEXT)(buffer);
  return ret;
}

static void REGAL_CALL statistics_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayColorOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayEdgeFlagOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayFogCoordOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayIndexOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayMultiTexCoordOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayNormalOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArraySecondaryColorOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayTexCoordOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribIOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);
}

static void REGAL_CALL statistics_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexOffsetEXT++;

  statistics.gl_ext_direct_state_access++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);
}

// GL_EXT_discard_framebuffer

static void REGAL_CALL statistics_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDiscardFramebufferEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDiscardFramebufferEXT)(target, numAttachments, attachments);
}

// GL_EXT_disjoint_timer_query

static void REGAL_CALL statistics_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectivEXT)(id, pname, params);
}

static void REGAL_CALL statistics_glQueryCounterEXT(GLuint id, GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glQueryCounterEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glQueryCounterEXT)(id, target);
}

// GL_EXT_draw_buffers2

static void REGAL_CALL statistics_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorMaskIndexedEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorMaskIndexedEXT)(buf, r, g, b, a);
}

static void REGAL_CALL statistics_glDisableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableIndexedEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableIndexedEXT)(target, index);
}

static void REGAL_CALL statistics_glEnableIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableIndexedEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableIndexedEXT)(target, index);
}

static void REGAL_CALL statistics_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBooleanIndexedvEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBooleanIndexedvEXT)(value, index, data);
}

static void REGAL_CALL statistics_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegerIndexedvEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegerIndexedvEXT)(value, index, data);
}

static GLboolean REGAL_CALL statistics_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsEnabledIndexedEXT++;

  statistics.gl_ext_draw_buffers2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsEnabledIndexedEXT)(target, index);
  return ret;
}

// GL_EXT_draw_instanced

static void REGAL_CALL statistics_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysInstancedEXT++;

  statistics.gl_ext_draw_instanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysInstancedEXT)(mode, start, count, primcount);
}

static void REGAL_CALL statistics_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawElementsInstancedEXT++;

  statistics.gl_ext_draw_instanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
}

// GL_EXT_draw_range_elements

static void REGAL_CALL statistics_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawRangeElementsEXT++;

  statistics.gl_ext_draw_range_elements++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawRangeElementsEXT)(mode, start, end, count, type, indices);
}

// GL_EXT_fog_coord

static void REGAL_CALL statistics_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordPointerEXT++;

  statistics.gl_ext_fog_coord++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordPointerEXT)(type, stride, pointer);
}

static void REGAL_CALL statistics_glFogCoorddEXT(GLdouble coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoorddEXT++;

  statistics.gl_ext_fog_coord++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoorddEXT)(coord);
}

static void REGAL_CALL statistics_glFogCoorddvEXT(const GLdouble *coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoorddvEXT++;

  statistics.gl_ext_fog_coord++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoorddvEXT)(coord);
}

static void REGAL_CALL statistics_glFogCoordfEXT(GLfloat coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordfEXT++;

  statistics.gl_ext_fog_coord++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordfEXT)(coord);
}

static void REGAL_CALL statistics_glFogCoordfvEXT(const GLfloat *coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordfvEXT++;

  statistics.gl_ext_fog_coord++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordfvEXT)(coord);
}

// GL_EXT_fragment_lighting

static void REGAL_CALL statistics_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentColorMaterialEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentColorMaterialEXT)(face, mode);
}

static void REGAL_CALL statistics_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelfEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelfEXT)(pname, param);
}

static void REGAL_CALL statistics_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelfvEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelfvEXT)(pname, params);
}

static void REGAL_CALL statistics_glFragmentLightModeliEXT(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModeliEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModeliEXT)(pname, param);
}

static void REGAL_CALL statistics_glFragmentLightModelivEXT(GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelivEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelivEXT)(pname, params);
}

static void REGAL_CALL statistics_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightfEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightfEXT)(light, pname, param);
}

static void REGAL_CALL statistics_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightfvEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightfvEXT)(light, pname, params);
}

static void REGAL_CALL statistics_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightiEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightiEXT)(light, pname, param);
}

static void REGAL_CALL statistics_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightivEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightivEXT)(light, pname, params);
}

static void REGAL_CALL statistics_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialfEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialfEXT)(face, pname, param);
}

static void REGAL_CALL statistics_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialfvEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialfvEXT)(face, pname, params);
}

static void REGAL_CALL statistics_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialiEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialiEXT)(face, pname, param);
}

static void REGAL_CALL statistics_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialivEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialivEXT)(face, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentLightfvEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentLightfvEXT)(light, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentLightivEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentLightivEXT)(light, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentMaterialfvEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentMaterialfvEXT)(face, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentMaterialivEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentMaterialivEXT)(face, pname, params);
}

static void REGAL_CALL statistics_glLightEnviEXT(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightEnviEXT++;

  statistics.gl_ext_fragment_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightEnviEXT)(pname, param);
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL statistics_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlitFramebufferEXT++;

  statistics.gl_ext_framebuffer_blit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL statistics_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisampleEXT++;

  statistics.gl_ext_framebuffer_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
}

// GL_EXT_framebuffer_object

static void REGAL_CALL statistics_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFramebufferEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFramebufferEXT)(target, framebuffer);
}

static void REGAL_CALL statistics_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindRenderbufferEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindRenderbufferEXT)(target, renderbuffer);
}

static GLenum REGAL_CALL statistics_glCheckFramebufferStatusEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCheckFramebufferStatusEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glCheckFramebufferStatusEXT)(target);
  return ret;
}

static void REGAL_CALL statistics_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFramebuffersEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFramebuffersEXT)(n, framebuffers);
}

static void REGAL_CALL statistics_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteRenderbuffersEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteRenderbuffersEXT)(n, renderbuffers);
}

static void REGAL_CALL statistics_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferRenderbufferEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL statistics_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture1DEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture2DEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture3DEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL statistics_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFramebuffersEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenFramebuffersEXT)(n, framebuffers);
}

static void REGAL_CALL statistics_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenRenderbuffersEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenRenderbuffersEXT)(n, renderbuffers);
}

static void REGAL_CALL statistics_glGenerateMipmapEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenerateMipmapEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenerateMipmapEXT)(target);
}

static void REGAL_CALL statistics_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFramebufferAttachmentParameterivEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, params);
}

static void REGAL_CALL statistics_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetRenderbufferParameterivEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetRenderbufferParameterivEXT)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsFramebufferEXT(GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsFramebufferEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsFramebufferEXT)(framebuffer);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsRenderbufferEXT(GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsRenderbufferEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsRenderbufferEXT)(renderbuffer);
  return ret;
}

static void REGAL_CALL statistics_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageEXT++;

  statistics.gl_ext_framebuffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageEXT)(target, internalformat, width, height);
}

// GL_EXT_geometry_shader4

static void REGAL_CALL statistics_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureEXT++;

  statistics.gl_ext_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureEXT)(target, attachment, texture, level);
}

static void REGAL_CALL statistics_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureFaceEXT++;

  statistics.gl_ext_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
}

static void REGAL_CALL statistics_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameteriEXT++;

  statistics.gl_ext_geometry_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameteriEXT)(program, pname, value);
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL statistics_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameters4fvEXT++;

  statistics.gl_ext_gpu_program_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameters4fvEXT)(target, index, count, params);
}

static void REGAL_CALL statistics_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameters4fvEXT++;

  statistics.gl_ext_gpu_program_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameters4fvEXT)(target, index, count, params);
}

// GL_EXT_gpu_shader4

static void REGAL_CALL statistics_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFragDataLocationEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFragDataLocationEXT)(program, color, name);
}

static GLint REGAL_CALL statistics_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragDataLocationEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetFragDataLocationEXT)(program, name);
  return ret;
}

static void REGAL_CALL statistics_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformuivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformuivEXT)(program, location, params);
}

static void REGAL_CALL statistics_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribIivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribIivEXT)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribIuivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribIuivEXT)(index, pname, params);
}

static void REGAL_CALL statistics_glUniform1uiEXT(GLint location, GLuint v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1uiEXT)(location, v0);
}

static void REGAL_CALL statistics_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1uivEXT)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2uiEXT)(location, v0, v1);
}

static void REGAL_CALL statistics_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2uivEXT)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3uiEXT)(location, v0, v1, v2);
}

static void REGAL_CALL statistics_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3uivEXT)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4uiEXT)(location, v0, v1, v2, v3);
}

static void REGAL_CALL statistics_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4uivEXT)(location, count, value);
}

static void REGAL_CALL statistics_glVertexAttribI1iEXT(GLuint index, GLint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1iEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1iEXT)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1ivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1ivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1uiEXT)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI1uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI1uivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2iEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2iEXT)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2ivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2ivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2uiEXT)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI2uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI2uivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3iEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3iEXT)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3ivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3ivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3uiEXT)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI3uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI3uivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4bvEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4bvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4iEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4iEXT)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4ivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4ivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4svEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4svEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4ubvEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4ubvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4uiEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4uiEXT)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4uivEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4uivEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribI4usvEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribI4usvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribIPointerEXT++;

  statistics.gl_ext_gpu_shader4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribIPointerEXT)(index, size, type, stride, pointer);
}

// GL_EXT_histogram

static void REGAL_CALL statistics_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogramEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogramEXT)(target, reset, format, type, values);
}

static void REGAL_CALL statistics_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogramParameterfvEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogramParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetHistogramParameterivEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetHistogramParameterivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmaxEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmaxEXT)(target, reset, format, type, values);
}

static void REGAL_CALL statistics_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmaxParameterfvEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmaxParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMinmaxParameterivEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMinmaxParameterivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glHistogramEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glHistogramEXT)(target, width, internalformat, sink);
}

static void REGAL_CALL statistics_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMinmaxEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMinmaxEXT)(target, internalformat, sink);
}

static void REGAL_CALL statistics_glResetHistogramEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResetHistogramEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResetHistogramEXT)(target);
}

static void REGAL_CALL statistics_glResetMinmaxEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResetMinmaxEXT++;

  statistics.gl_ext_histogram++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResetMinmaxEXT)(target);
}

// GL_EXT_index_func

static void REGAL_CALL statistics_glIndexFuncEXT(GLenum func, GLfloat ref)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexFuncEXT++;

  statistics.gl_ext_index_func++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexFuncEXT)(func, ref);
}

// GL_EXT_index_material

static void REGAL_CALL statistics_glIndexMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexMaterialEXT++;

  statistics.gl_ext_index_material++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexMaterialEXT)(face, mode);
}

// GL_EXT_light_texture

static void REGAL_CALL statistics_glApplyTextureEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glApplyTextureEXT++;

  statistics.gl_ext_light_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glApplyTextureEXT)(mode);
}

static void REGAL_CALL statistics_glTextureLightEXT(GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureLightEXT++;

  statistics.gl_ext_light_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureLightEXT)(pname);
}

static void REGAL_CALL statistics_glTextureMaterialEXT(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureMaterialEXT++;

  statistics.gl_ext_light_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureMaterialEXT)(face, mode);
}

// GL_EXT_map_buffer_range

static void REGAL_CALL statistics_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushMappedBufferRangeEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushMappedBufferRangeEXT)(target, offset, length);
}

static GLvoid *REGAL_CALL statistics_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapBufferRangeEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapBufferRangeEXT)(target, offset, length, access);
  return ret;
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL statistics_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawArraysEXT++;

  statistics.gl_ext_multi_draw_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawArraysEXT)(mode, first, count, primcount);
}

static void REGAL_CALL statistics_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiDrawElementsEXT++;

  statistics.gl_ext_multi_draw_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
}

// GL_EXT_multisample

static void REGAL_CALL statistics_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleMaskEXT++;

  statistics.gl_ext_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleMaskEXT)(value, invert);
}

static void REGAL_CALL statistics_glSamplePatternEXT(GLenum pattern)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplePatternEXT++;

  statistics.gl_ext_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplePatternEXT)(pattern);
}

// GL_EXT_multisampled_render_to_texture

static void REGAL_CALL statistics_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture2DMultisampleEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples);
}

// GL_EXT_multiview_draw_buffers

static void REGAL_CALL statistics_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffersIndexedEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffersIndexedEXT)(n, location, indices);
}

static void REGAL_CALL statistics_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegeri_vEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegeri_vEXT)(target, index, data);
}

static void REGAL_CALL statistics_glReadBufferIndexedEXT(GLenum src, GLint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadBufferIndexedEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadBufferIndexedEXT)(src, index);
}

// GL_EXT_occlusion_query_boolean

static void REGAL_CALL statistics_glBeginQueryEXT(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginQueryEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginQueryEXT)(target, id);
}

static void REGAL_CALL statistics_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteQueriesEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteQueriesEXT)(n, ids);
}

static void REGAL_CALL statistics_glEndQueryEXT(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndQueryEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndQueryEXT)(target);
}

static void REGAL_CALL statistics_glGenQueriesEXT(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenQueriesEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenQueriesEXT)(n, ids);
}

static void REGAL_CALL statistics_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectuivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectuivEXT)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryivEXT)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsQueryEXT(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsQueryEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsQueryEXT)(id);
  return ret;
}

// GL_EXT_paletted_texture

static void REGAL_CALL statistics_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableEXT++;

  statistics.gl_ext_paletted_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableEXT)(target, internalFormat, width, format, type, table);
}

static void REGAL_CALL statistics_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableEXT++;

  statistics.gl_ext_paletted_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableEXT)(target, format, type, data);
}

static void REGAL_CALL statistics_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameterfvEXT++;

  statistics.gl_ext_paletted_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameterivEXT++;

  statistics.gl_ext_paletted_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameterivEXT)(target, pname, params);
}

// GL_EXT_pixel_transform

static void REGAL_CALL statistics_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelTransformParameterfvEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelTransformParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelTransformParameterivEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelTransformParameterivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransformParameterfEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransformParameterfEXT)(target, pname, param);
}

static void REGAL_CALL statistics_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransformParameterfvEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransformParameterfvEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransformParameteriEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransformParameteriEXT)(target, pname, param);
}

static void REGAL_CALL statistics_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTransformParameterivEXT++;

  statistics.gl_ext_pixel_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTransformParameterivEXT)(target, pname, params);
}

// GL_EXT_point_parameters

static void REGAL_CALL statistics_glPointParameterfEXT(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfEXT++;

  statistics.gl_ext_point_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfEXT)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfvEXT++;

  statistics.gl_ext_point_parameters++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfvEXT)(pname, params);
}

// GL_EXT_polygon_offset

static void REGAL_CALL statistics_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPolygonOffsetEXT++;

  statistics.gl_ext_polygon_offset++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPolygonOffsetEXT)(factor, bias);
}

// GL_EXT_provoking_vertex

static void REGAL_CALL statistics_glProvokingVertexEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProvokingVertexEXT++;

  statistics.gl_ext_provoking_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProvokingVertexEXT)(mode);
}

// GL_EXT_robustness

static void REGAL_CALL statistics_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformfvEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformfvEXT)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetnUniformivEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetnUniformivEXT)(program, location, bufSize, params);
}

static void REGAL_CALL statistics_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadnPixelsEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadnPixelsEXT)(x, y, width, height, format, type, bufSize, data);
}

// GL_EXT_scene_marker

static void REGAL_CALL statistics_glBeginSceneEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginSceneEXT++;

  statistics.gl_ext_scene_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginSceneEXT)();
}

static void REGAL_CALL statistics_glEndSceneEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndSceneEXT++;

  statistics.gl_ext_scene_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndSceneEXT)();
}

// GL_EXT_secondary_color

static void REGAL_CALL statistics_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3bEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3bEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3bvEXT(const GLbyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3bvEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3bvEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3dEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3dEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3dvEXT(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3dvEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3dvEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3fEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3fEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3fvEXT(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3fvEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3fvEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3iEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3iEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3ivEXT(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ivEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ivEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3sEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3sEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3svEXT(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3svEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3svEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ubEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ubEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3ubvEXT(const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3ubvEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3ubvEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3uiEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3uiEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3uivEXT(const GLuint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3uivEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3uivEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3usEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3usEXT)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3usvEXT(const GLushort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3usvEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3usvEXT)(v);
}

static void REGAL_CALL statistics_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorPointerEXT++;

  statistics.gl_ext_secondary_color++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorPointerEXT)(size, type, stride, pointer);
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL statistics_glActiveProgramEXT(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveProgramEXT++;

  statistics.gl_ext_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveProgramEXT)(program);
}

static GLuint REGAL_CALL statistics_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCreateShaderProgramEXT++;

  statistics.gl_ext_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glCreateShaderProgramEXT)(type, string);
  return ret;
}

static void REGAL_CALL statistics_glUseShaderProgramEXT(GLenum type, GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUseShaderProgramEXT++;

  statistics.gl_ext_separate_shader_objects++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUseShaderProgramEXT)(type, program);
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL statistics_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindImageTextureEXT++;

  statistics.gl_ext_shader_image_load_store++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);
}

static void REGAL_CALL statistics_glMemoryBarrierEXT(GLbitfield barriers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMemoryBarrierEXT++;

  statistics.gl_ext_shader_image_load_store++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMemoryBarrierEXT)(barriers);
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL statistics_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilClearTagEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilClearTagEXT)(stencilTagBits, stencilClearTag);
}

// GL_EXT_stencil_two_side

static void REGAL_CALL statistics_glActiveStencilFaceEXT(GLenum face)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveStencilFaceEXT++;

  statistics.gl_ext_stencil_two_side++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveStencilFaceEXT)(face);
}

// GL_EXT_subtexture

static void REGAL_CALL statistics_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage1DEXT++;

  statistics.gl_ext_subtexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage2DEXT++;

  statistics.gl_ext_subtexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage3DEXT++;

  statistics.gl_ext_subtexture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_EXT_texture3D

static void REGAL_CALL statistics_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage3DEXT++;

  statistics.gl_ext_texture3d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

// GL_EXT_texture_array

static void REGAL_CALL statistics_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTextureLayerEXT++;

  statistics.gl_ext_texture_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL statistics_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexBufferEXT++;

  statistics.gl_ext_texture_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexBufferEXT)(target, internalformat, buffer);
}

// GL_EXT_texture_integer

static void REGAL_CALL statistics_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearColorIiEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearColorIiEXT)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearColorIuiEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearColorIuiEXT)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterIivEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterIivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterIuivEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterIuivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterIivEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterIivEXT)(target, pname, params);
}

static void REGAL_CALL statistics_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterIuivEXT++;

  statistics.gl_ext_texture_integer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterIuivEXT)(target, pname, params);
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL statistics_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAreTexturesResidentEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glAreTexturesResidentEXT)(n, textures, residences);
  return ret;
}

static void REGAL_CALL statistics_glBindTextureEXT(GLenum target, GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTextureEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindTextureEXT)(target, texture);
}

static void REGAL_CALL statistics_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteTexturesEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteTexturesEXT)(n, textures);
}

static void REGAL_CALL statistics_glGenTexturesEXT(GLsizei n, GLuint *textures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenTexturesEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenTexturesEXT)(n, textures);
}

static GLboolean REGAL_CALL statistics_glIsTextureEXT(GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTextureEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTextureEXT)(texture);
  return ret;
}

static void REGAL_CALL statistics_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPrioritizeTexturesEXT++;

  statistics.gl_ext_texture_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPrioritizeTexturesEXT)(n, textures, priorities);
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL statistics_glTextureNormalEXT(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureNormalEXT++;

  statistics.gl_ext_texture_perturb_normal++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureNormalEXT)(mode);
}

// GL_EXT_texture_storage

static void REGAL_CALL statistics_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage1DEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage1DEXT)(target, levels, internalformat, width);
}

static void REGAL_CALL statistics_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage2DEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage2DEXT)(target, levels, internalformat, width, height);
}

static void REGAL_CALL statistics_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexStorage3DEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexStorage3DEXT)(target, levels, internalformat, width, height, depth);
}

// GL_EXT_timer_query

static void REGAL_CALL statistics_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjecti64vEXT++;

  statistics.gl_ext_timer_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjecti64vEXT)(id, pname, params);
}

static void REGAL_CALL statistics_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetQueryObjectui64vEXT++;

  statistics.gl_ext_timer_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetQueryObjectui64vEXT)(id, pname, params);
}

// GL_EXT_transform_feedback

static void REGAL_CALL statistics_glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginTransformFeedbackEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginTransformFeedbackEXT)(primitiveMode);
}

static void REGAL_CALL statistics_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferBaseEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferBaseEXT)(target, index, buffer);
}

static void REGAL_CALL statistics_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferOffsetEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferOffsetEXT)(target, index, buffer, offset);
}

static void REGAL_CALL statistics_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferRangeEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferRangeEXT)(target, index, buffer, offset, size);
}

static void REGAL_CALL statistics_glEndTransformFeedbackEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndTransformFeedbackEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndTransformFeedbackEXT)();
}

static void REGAL_CALL statistics_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTransformFeedbackVaryingEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL statistics_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTransformFeedbackVaryingsEXT++;

  statistics.gl_ext_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);
}

// GL_EXT_vertex_array

static void REGAL_CALL statistics_glArrayElementEXT(GLint i)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glArrayElementEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glArrayElementEXT)(i);
}

static void REGAL_CALL statistics_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorPointerEXT)(size, type, stride, count, pointer);
}

static void REGAL_CALL statistics_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawArraysEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawArraysEXT)(mode, first, count);
}

static void REGAL_CALL statistics_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlagPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlagPointerEXT)(stride, count, pointer);
}

static void REGAL_CALL statistics_glGetPointervEXT(GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPointervEXT++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPointervEXT)(pname, params);
}

static void REGAL_CALL statistics_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexPointerEXT)(type, stride, count, pointer);
}

static void REGAL_CALL statistics_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalPointerEXT)(type, stride, count, pointer);
}

static void REGAL_CALL statistics_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordPointerEXT)(size, type, stride, count, pointer);
}

static void REGAL_CALL statistics_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexPointerEXT++;

  statistics.gl_ext_vertex_array++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexPointerEXT)(size, type, stride, count, pointer);
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL statistics_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribLdvEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribLdvEXT)(index, pname, params);
}

static void REGAL_CALL statistics_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayVertexAttribLOffsetEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
}

static void REGAL_CALL statistics_glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1dEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1dEXT)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1dvEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1dvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2dEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2dEXT)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2dvEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2dvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3dEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3dEXT)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3dvEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3dvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4dEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4dEXT)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4dvEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4dvEXT)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribLPointerEXT++;

  statistics.gl_ext_vertex_attrib_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribLPointerEXT)(index, size, type, stride, pointer);
}

// GL_EXT_vertex_shader

static void REGAL_CALL statistics_glBeginVertexShaderEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginVertexShaderEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginVertexShaderEXT)();
}

static GLuint REGAL_CALL statistics_glBindLightParameterEXT(GLenum light, GLenum value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindLightParameterEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBindLightParameterEXT)(light, value);
  return ret;
}

static GLuint REGAL_CALL statistics_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindMaterialParameterEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBindMaterialParameterEXT)(face, value);
  return ret;
}

static GLuint REGAL_CALL statistics_glBindParameterEXT(GLenum value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindParameterEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBindParameterEXT)(value);
  return ret;
}

static GLuint REGAL_CALL statistics_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTexGenParameterEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBindTexGenParameterEXT)(unit, coord, value);
  return ret;
}

static GLuint REGAL_CALL statistics_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTextureUnitParameterEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBindTextureUnitParameterEXT)(unit, value);
  return ret;
}

static void REGAL_CALL statistics_glBindVertexShaderEXT(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexShaderEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexShaderEXT)(id);
}

static void REGAL_CALL statistics_glDeleteVertexShaderEXT(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteVertexShaderEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteVertexShaderEXT)(id);
}

static void REGAL_CALL statistics_glDisableVariantClientStateEXT(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableVariantClientStateEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableVariantClientStateEXT)(id);
}

static void REGAL_CALL statistics_glEnableVariantClientStateEXT(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableVariantClientStateEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableVariantClientStateEXT)(id);
}

static void REGAL_CALL statistics_glEndVertexShaderEXT(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndVertexShaderEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndVertexShaderEXT)();
}

static void REGAL_CALL statistics_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtractComponentEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtractComponentEXT)(res, src, num);
}

static GLuint REGAL_CALL statistics_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenSymbolsEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenSymbolsEXT)(datatype, storagetype, range, components);
  return ret;
}

static GLuint REGAL_CALL statistics_glGenVertexShadersEXT(GLuint range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenVertexShadersEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenVertexShadersEXT)(range);
  return ret;
}

static void REGAL_CALL statistics_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInvariantBooleanvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInvariantBooleanvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInvariantFloatvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInvariantFloatvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInvariantIntegervEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetInvariantIntegervEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLocalConstantBooleanvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLocalConstantBooleanvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLocalConstantFloatvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLocalConstantFloatvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLocalConstantIntegervEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLocalConstantIntegervEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantBooleanvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantBooleanvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantFloatvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantFloatvEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantIntegervEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantIntegervEXT)(id, value, data);
}

static void REGAL_CALL statistics_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVariantPointervEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVariantPointervEXT)(id, value, data);
}

static void REGAL_CALL statistics_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInsertComponentEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInsertComponentEXT)(res, src, num);
}

static GLboolean REGAL_CALL statistics_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsVariantEnabledEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsVariantEnabledEXT)(id, cap);
  return ret;
}

static void REGAL_CALL statistics_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetInvariantEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetInvariantEXT)(id, type, addr);
}

static void REGAL_CALL statistics_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetLocalConstantEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetLocalConstantEXT)(id, type, addr);
}

static void REGAL_CALL statistics_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderOp1EXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderOp1EXT)(op, res, arg1);
}

static void REGAL_CALL statistics_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderOp2EXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderOp2EXT)(op, res, arg1, arg2);
}

static void REGAL_CALL statistics_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glShaderOp3EXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glShaderOp3EXT)(op, res, arg1, arg2, arg3);
}

static void REGAL_CALL statistics_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSwizzleEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSwizzleEXT)(res, in, outX, outY, outZ, outW);
}

static void REGAL_CALL statistics_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantPointerEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantPointerEXT)(id, type, stride, addr);
}

static void REGAL_CALL statistics_glVariantbvEXT(GLuint id, const GLbyte *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantbvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantbvEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantdvEXT(GLuint id, const GLdouble *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantdvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantdvEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantfvEXT(GLuint id, const GLfloat *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantfvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantfvEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantivEXT(GLuint id, const GLint *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantivEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantivEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantsvEXT(GLuint id, const GLshort *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantsvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantsvEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantubvEXT(GLuint id, const GLubyte *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantubvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantubvEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantuivEXT(GLuint id, const GLuint *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantuivEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantuivEXT)(id, addr);
}

static void REGAL_CALL statistics_glVariantusvEXT(GLuint id, const GLushort *addr)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVariantusvEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVariantusvEXT)(id, addr);
}

static void REGAL_CALL statistics_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWriteMaskEXT++;

  statistics.gl_ext_vertex_shader++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWriteMaskEXT)(res, in, outX, outY, outZ, outW);
}

// GL_EXT_vertex_weighting

static void REGAL_CALL statistics_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexWeightPointerEXT++;

  statistics.gl_ext_vertex_weighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexWeightPointerEXT)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glVertexWeightfEXT(GLfloat weight)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexWeightfEXT++;

  statistics.gl_ext_vertex_weighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexWeightfEXT)(weight);
}

static void REGAL_CALL statistics_glVertexWeightfvEXT(const GLfloat *weight)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexWeightfvEXT++;

  statistics.gl_ext_vertex_weighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexWeightfvEXT)(weight);
}

// GL_EXT_x11_sync_object

static GLsync REGAL_CALL statistics_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glImportSyncEXT++;

  statistics.gl_ext_x11_sync_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLsync  ret = _next->call(&_next->glImportSyncEXT)(external_sync_type, external_sync, flags);
  return ret;
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL statistics_glFrameTerminatorGREMEDY(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrameTerminatorGREMEDY++;

  statistics.gl_gremedy_frame_terminator++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrameTerminatorGREMEDY)();
}

// GL_GREMEDY_string_marker

static void REGAL_CALL statistics_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStringMarkerGREMEDY++;

  statistics.gl_gremedy_string_marker++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStringMarkerGREMEDY)(len, string);
}

// GL_HP_image_transform

static void REGAL_CALL statistics_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetImageTransformParameterfvHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetImageTransformParameterfvHP)(target, pname, params);
}

static void REGAL_CALL statistics_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetImageTransformParameterivHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetImageTransformParameterivHP)(target, pname, params);
}

static void REGAL_CALL statistics_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glImageTransformParameterfHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glImageTransformParameterfHP)(target, pname, param);
}

static void REGAL_CALL statistics_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glImageTransformParameterfvHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glImageTransformParameterfvHP)(target, pname, params);
}

static void REGAL_CALL statistics_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glImageTransformParameteriHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glImageTransformParameteriHP)(target, pname, param);
}

static void REGAL_CALL statistics_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glImageTransformParameterivHP++;

  statistics.gl_hp_image_transform++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glImageTransformParameterivHP)(target, pname, params);
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL statistics_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiModeDrawArraysIBM++;

  statistics.gl_ibm_multimode_draw_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);
}

static void REGAL_CALL statistics_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiModeDrawElementsIBM++;

  statistics.gl_ibm_multimode_draw_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL statistics_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorPointerListIBM)(size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlagPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexPointerListIBM)(type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalPointerListIBM)(type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);
}

static void REGAL_CALL statistics_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexPointerListIBM++;

  statistics.gl_ibm_vertex_array_lists++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);
}

// GL_IMG_multisampled_render_to_texture

static void REGAL_CALL statistics_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture2DMultisampleIMG++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture2DMultisampleIMG)(target, attachment, textarget, texture, level, samples);
}

static void REGAL_CALL statistics_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisampleIMG++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisampleIMG)(target, samples, internalformat, width, height);
}

// GL_INGR_blend_func_separate

static void REGAL_CALL statistics_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparateINGR++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_INTEL_map_texture

static GLvoid *REGAL_CALL statistics_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapTexture2DINTEL++;

  statistics.gl_intel_map_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapTexture2DINTEL)(texture, level, access, stride, layout);
  return ret;
}

static void REGAL_CALL statistics_glSyncTextureINTEL(GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSyncTextureINTEL++;

  statistics.gl_intel_map_texture++;

  statistics.gl_intel_map_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSyncTextureINTEL)(texture);
}

static void REGAL_CALL statistics_glUnmapTexture2DINTEL(GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapTexture2DINTEL++;

  statistics.gl_intel_map_texture++;

  statistics.gl_intel_map_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUnmapTexture2DINTEL)(texture, level);
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL statistics_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorPointervINTEL++;

  statistics.gl_intel_parallel_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorPointervINTEL)(size, type, pointer);
}

static void REGAL_CALL statistics_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalPointervINTEL++;

  statistics.gl_intel_parallel_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalPointervINTEL)(type, pointer);
}

static void REGAL_CALL statistics_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordPointervINTEL++;

  statistics.gl_intel_parallel_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordPointervINTEL)(size, type, pointer);
}

static void REGAL_CALL statistics_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexPointervINTEL++;

  statistics.gl_intel_parallel_arrays++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexPointervINTEL)(size, type, pointer);
}

// GL_INTEL_texture_scissor

static void REGAL_CALL statistics_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexScissorFuncINTEL++;

  statistics.gl_intel_texture_scissor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexScissorFuncINTEL)(target, lfunc, hfunc);
}

static void REGAL_CALL statistics_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexScissorINTEL++;

  statistics.gl_intel_texture_scissor++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexScissorINTEL)(target, tlow, thigh);
}

// GL_KHR_debug

static void REGAL_CALL statistics_glDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageCallback++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageCallback)(callback, userParam);
}

static void REGAL_CALL statistics_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageControl++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageControl)(source, type, severity, count, ids, enabled);
}

static void REGAL_CALL statistics_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDebugMessageInsert++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDebugMessageInsert)(source, type, id, severity, length, buf);
}

static GLuint REGAL_CALL statistics_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDebugMessageLog++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGetDebugMessageLog)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
  return ret;
}

static void REGAL_CALL statistics_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectLabel++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectLabel)(identifier, name, bufSize, length, label);
}

static void REGAL_CALL statistics_glGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetObjectPtrLabel++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetObjectPtrLabel)(ptr, bufSize, length, label);
}

static void REGAL_CALL statistics_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glObjectLabel++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glObjectLabel)(identifier, name, length, label);
}

static void REGAL_CALL statistics_glObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glObjectPtrLabel++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glObjectPtrLabel)(ptr, length, label);
}

static void REGAL_CALL statistics_glPopDebugGroup(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPopDebugGroup++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPopDebugGroup)();
}

static void REGAL_CALL statistics_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPushDebugGroup++;

  statistics.gl_khr_debug++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPushDebugGroup)(source, id, length, message);
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL statistics_glBufferRegionEnabled(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferRegionEnabled++;

  statistics.gl_ktx_buffer_region++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glBufferRegionEnabled)();
  return ret;
}

static void REGAL_CALL statistics_glDeleteBufferRegion(GLenum region)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteBufferRegion++;

  statistics.gl_ktx_buffer_region++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteBufferRegion)(region);
}

static void REGAL_CALL statistics_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBufferRegion++;

  statistics.gl_ktx_buffer_region++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBufferRegion)(region, x, y, width, height, xDest, yDest);
}

static GLuint REGAL_CALL statistics_glNewBufferRegion(GLenum region)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNewBufferRegion++;

  statistics.gl_ktx_buffer_region++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glNewBufferRegion)(region);
  return ret;
}

static void REGAL_CALL statistics_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadBufferRegion++;

  statistics.gl_ktx_buffer_region++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadBufferRegion)(region, x, y, width, height);
}

// GL_MESA_resize_buffers

static void REGAL_CALL statistics_glResizeBuffersMESA(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResizeBuffersMESA++;

  statistics.gl_mesa_resize_buffers++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResizeBuffersMESA)();
}

// GL_MESA_window_pos

static void REGAL_CALL statistics_glWindowPos2dMESA(GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2dMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2dMESA)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2dvMESA(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2dvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2dvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos2fMESA(GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2fMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2fMESA)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2fvMESA(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2fvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2fvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos2iMESA(GLint x, GLint y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2iMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2iMESA)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2ivMESA(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2ivMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2ivMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos2sMESA(GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2sMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2sMESA)(x, y);
}

static void REGAL_CALL statistics_glWindowPos2svMESA(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos2svMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos2svMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3dMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3dMESA)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3dvMESA(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3dvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3dvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3fMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3fMESA)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3fvMESA(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3fvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3fvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3iMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3iMESA)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3ivMESA(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3ivMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3ivMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3sMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3sMESA)(x, y, z);
}

static void REGAL_CALL statistics_glWindowPos3svMESA(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos3svMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos3svMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4dMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4dMESA)(x, y, z, w);
}

static void REGAL_CALL statistics_glWindowPos4dvMESA(const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4dvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4dvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4fMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4fMESA)(x, y, z, w);
}

static void REGAL_CALL statistics_glWindowPos4fvMESA(const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4fvMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4fvMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4iMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4iMESA)(x, y, z, w);
}

static void REGAL_CALL statistics_glWindowPos4ivMESA(const GLint *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4ivMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4ivMESA)(v);
}

static void REGAL_CALL statistics_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4sMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4sMESA)(x, y, z, w);
}

static void REGAL_CALL statistics_glWindowPos4svMESA(const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWindowPos4svMESA++;

  statistics.gl_mesa_window_pos++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWindowPos4svMESA)(v);
}

// GL_NVX_conditional_render

static void REGAL_CALL statistics_glBeginConditionalRenderNVX(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginConditionalRenderNVX++;

  statistics.gl_nvx_conditional_render++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginConditionalRenderNVX)(id);
}

static void REGAL_CALL statistics_glEndConditionalRenderNVX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndConditionalRenderNVX++;

  statistics.gl_nvx_conditional_render++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndConditionalRenderNVX)();
}

// GL_NV_bindless_texture

static GLuint64 REGAL_CALL statistics_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetImageHandleNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetImageHandleNV)(texture, level, layered, layer, format);
  return ret;
}

static GLuint64 REGAL_CALL statistics_glGetTextureHandleNV(GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureHandleNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetTextureHandleNV)(texture);
  return ret;
}

static GLuint64 REGAL_CALL statistics_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTextureSamplerHandleNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint64  ret = _next->call(&_next->glGetTextureSamplerHandleNV)(texture, sampler);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsImageHandleResidentNV(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsImageHandleResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsImageHandleResidentNV)(handle);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsTextureHandleResidentNV(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTextureHandleResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTextureHandleResidentNV)(handle);
  return ret;
}

static void REGAL_CALL statistics_glMakeImageHandleNonResidentNV(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeImageHandleNonResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeImageHandleNonResidentNV)(handle);
}

static void REGAL_CALL statistics_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeImageHandleResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeImageHandleResidentNV)(handle, access);
}

static void REGAL_CALL statistics_glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeTextureHandleNonResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeTextureHandleNonResidentNV)(handle);
}

static void REGAL_CALL statistics_glMakeTextureHandleResidentNV(GLuint64 handle)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeTextureHandleResidentNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeTextureHandleResidentNV)(handle);
}

static void REGAL_CALL statistics_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformHandleui64NV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformHandleui64NV)(program, location, value);
}

static void REGAL_CALL statistics_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformHandleui64vNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformHandleui64vNV)(program, location, count, values);
}

static void REGAL_CALL statistics_glUniformHandleui64NV(GLint location, GLuint64 value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformHandleui64NV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformHandleui64NV)(location, value);
}

static void REGAL_CALL statistics_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformHandleui64vNV++;

  statistics.gl_nv_bindless_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformHandleui64vNV)(location, count, value);
}

// GL_NV_blend_equation_advanced

static void REGAL_CALL statistics_glBlendBarrierNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendBarrierNV++;

  statistics.gl_nv_blend_equation_advanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendBarrierNV)();
}

static void REGAL_CALL statistics_glBlendParameteriNV(GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendParameteriNV++;

  statistics.gl_nv_blend_equation_advanced++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendParameteriNV)(pname, value);
}

// GL_NV_conditional_render

static void REGAL_CALL statistics_glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginConditionalRenderNV++;

  statistics.gl_nv_conditional_render++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginConditionalRenderNV)(id, mode);
}

static void REGAL_CALL statistics_glEndConditionalRenderNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndConditionalRenderNV++;

  statistics.gl_nv_conditional_render++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndConditionalRenderNV)();
}

// GL_NV_copy_buffer

static void REGAL_CALL statistics_glCopyBufferSubDataNV(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyBufferSubDataNV++;

  statistics.gl_nv_copy_buffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyBufferSubDataNV)(readtarget, writetarget, readoffset, writeoffset, size);
}

// GL_NV_copy_image

static void REGAL_CALL statistics_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyImageSubDataNV++;

  statistics.gl_nv_copy_image++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

// GL_NV_coverage_sample

static void REGAL_CALL statistics_glCoverageMaskNV(GLboolean mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverageMaskNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverageMaskNV)(mask);
}

static void REGAL_CALL statistics_glCoverageOperationNV(GLenum operation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverageOperationNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverageOperationNV)(operation);
}

// GL_NV_depth_buffer_float

static void REGAL_CALL statistics_glClearDepthdNV(GLdouble depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearDepthdNV++;

  statistics.gl_nv_depth_buffer_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearDepthdNV)(depth);
}

static void REGAL_CALL statistics_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthBoundsdNV++;

  statistics.gl_nv_depth_buffer_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthBoundsdNV)(zmin, zmax);
}

static void REGAL_CALL statistics_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangedNV++;

  statistics.gl_nv_depth_buffer_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangedNV)(zNear, zFar);
}

// GL_NV_draw_buffers

static void REGAL_CALL statistics_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawBuffersNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawBuffersNV)(n, bufs);
}

// GL_NV_draw_texture

static void REGAL_CALL statistics_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTextureNV++;

  statistics.gl_nv_draw_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTextureNV)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
}

// GL_NV_evaluators

static void REGAL_CALL statistics_glEvalMapsNV(GLenum target, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEvalMapsNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEvalMapsNV)(target, mode);
}

static void REGAL_CALL statistics_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapAttribParameterfvNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapAttribParameterfvNV)(target, index, pname, params);
}

static void REGAL_CALL statistics_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapAttribParameterivNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapAttribParameterivNV)(target, index, pname, params);
}

static void REGAL_CALL statistics_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapControlPointsNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);
}

static void REGAL_CALL statistics_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapParameterfvNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapParameterfvNV)(target, pname, params);
}

static void REGAL_CALL statistics_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMapParameterivNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMapParameterivNV)(target, pname, params);
}

static void REGAL_CALL statistics_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapControlPointsNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
}

static void REGAL_CALL statistics_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapParameterfvNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapParameterfvNV)(target, pname, params);
}

static void REGAL_CALL statistics_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapParameterivNV++;

  statistics.gl_nv_evaluators++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMapParameterivNV)(target, pname, params);
}

// GL_NV_explicit_multisample

static void REGAL_CALL statistics_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMultisamplefvNV++;

  statistics.gl_nv_explicit_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMultisamplefvNV)(pname, index, val);
}

static void REGAL_CALL statistics_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleMaskIndexedNV++;

  statistics.gl_nv_explicit_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleMaskIndexedNV)(index, mask);
}

static void REGAL_CALL statistics_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexRenderbufferNV++;

  statistics.gl_nv_explicit_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexRenderbufferNV)(target, renderbuffer);
}

// GL_NV_fence

static void REGAL_CALL statistics_glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFencesNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFencesNV)(n, fences);
}

static void REGAL_CALL statistics_glFinishFenceNV(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishFenceNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinishFenceNV)(fence);
}

static void REGAL_CALL statistics_glGenFencesNV(GLsizei n, GLuint *fences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFencesNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenFencesNV)(n, fences);
}

static void REGAL_CALL statistics_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFenceivNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFenceivNV)(fence, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsFenceNV(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsFenceNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsFenceNV)(fence);
  return ret;
}

static void REGAL_CALL statistics_glSetFenceNV(GLuint fence, GLenum condition)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSetFenceNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSetFenceNV)(fence, condition);
}

static GLboolean REGAL_CALL statistics_glTestFenceNV(GLuint fence)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTestFenceNV++;

  statistics.gl_nv_fence++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glTestFenceNV)(fence);
  return ret;
}

// GL_NV_fragment_program

static void REGAL_CALL statistics_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramNamedParameterdvNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramNamedParameterdvNV)(id, len, name, params);
}

static void REGAL_CALL statistics_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramNamedParameterfvNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramNamedParameterfvNV)(id, len, name, params);
}

static void REGAL_CALL statistics_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramNamedParameter4dNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramNamedParameter4dvNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramNamedParameter4dvNV)(id, len, name, v);
}

static void REGAL_CALL statistics_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramNamedParameter4fNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramNamedParameter4fvNV++;

  statistics.gl_nv_fragment_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramNamedParameter4fvNV)(id, len, name, v);
}

// GL_NV_framebuffer_blit

static void REGAL_CALL statistics_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlitFramebufferNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlitFramebufferNV)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL statistics_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageMultisampleCoverageNV++;

  statistics.gl_nv_framebuffer_multisample_coverage++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
}

// GL_NV_geometry_program4

static void REGAL_CALL statistics_glProgramVertexLimitNV(GLenum target, GLint limit)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramVertexLimitNV++;

  statistics.gl_nv_geometry_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramVertexLimitNV)(target, limit);
}

// GL_NV_gpu_program4

static void REGAL_CALL statistics_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramEnvParameterIivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramEnvParameterIivNV)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramEnvParameterIuivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramEnvParameterIuivNV)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramLocalParameterIivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramLocalParameterIivNV)(target, index, params);
}

static void REGAL_CALL statistics_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramLocalParameterIuivNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramLocalParameterIuivNV)(target, index, params);
}

static void REGAL_CALL statistics_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameterI4iNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameterI4ivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameterI4ivNV)(target, index, params);
}

static void REGAL_CALL statistics_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameterI4uiNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParameterI4uivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParameterI4uivNV)(target, index, params);
}

static void REGAL_CALL statistics_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParametersI4ivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParametersI4ivNV)(target, index, count, params);
}

static void REGAL_CALL statistics_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramEnvParametersI4uivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramEnvParametersI4uivNV)(target, index, count, params);
}

static void REGAL_CALL statistics_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameterI4iNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameterI4ivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameterI4ivNV)(target, index, params);
}

static void REGAL_CALL statistics_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameterI4uiNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParameterI4uivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParameterI4uivNV)(target, index, params);
}

static void REGAL_CALL statistics_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParametersI4ivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParametersI4ivNV)(target, index, count, params);
}

static void REGAL_CALL statistics_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramLocalParametersI4uivNV++;

  statistics.gl_nv_gpu_program4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramLocalParametersI4uivNV)(target, index, count, params);
}

// GL_NV_gpu_shader5

static void REGAL_CALL statistics_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformi64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformi64vNV)(program, location, params);
}

static void REGAL_CALL statistics_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1i64NV)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1i64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1ui64NV)(program, location, x);
}

static void REGAL_CALL statistics_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform1ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform1ui64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2i64NV)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2i64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2ui64NV)(program, location, x, y);
}

static void REGAL_CALL statistics_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform2ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform2ui64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3i64NV)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3i64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3ui64NV)(program, location, x, y, z);
}

static void REGAL_CALL statistics_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform3ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform3ui64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4i64NV)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4i64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4ui64NV)(program, location, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniform4ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniform4ui64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glUniform1i64NV(GLint location, GLint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1i64NV)(location, x);
}

static void REGAL_CALL statistics_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1i64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1ui64NV)(location, x);
}

static void REGAL_CALL statistics_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform1ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform1ui64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2i64NV)(location, x, y);
}

static void REGAL_CALL statistics_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2i64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2ui64NV)(location, x, y);
}

static void REGAL_CALL statistics_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform2ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform2ui64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3i64NV)(location, x, y, z);
}

static void REGAL_CALL statistics_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3i64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3ui64NV)(location, x, y, z);
}

static void REGAL_CALL statistics_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform3ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform3ui64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4i64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4i64NV)(location, x, y, z, w);
}

static void REGAL_CALL statistics_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4i64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4i64vNV)(location, count, value);
}

static void REGAL_CALL statistics_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4ui64NV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4ui64NV)(location, x, y, z, w);
}

static void REGAL_CALL statistics_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniform4ui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniform4ui64vNV)(location, count, value);
}

// GL_NV_half_float

static void REGAL_CALL statistics_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3hNV)(red, green, blue);
}

static void REGAL_CALL statistics_glColor3hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3hvNV)(v);
}

static void REGAL_CALL statistics_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4hNV)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glColor4hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4hvNV)(v);
}

static void REGAL_CALL statistics_glFogCoordhNV(GLhalfNV coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordhNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordhNV)(coord);
}

static void REGAL_CALL statistics_glFogCoordhvNV(const GLhalfNV *coord)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordhvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordhvNV)(coord);
}

static void REGAL_CALL statistics_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1hNV)(target, s);
}

static void REGAL_CALL statistics_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord1hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord1hvNV)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2hNV)(target, s, t);
}

static void REGAL_CALL statistics_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord2hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord2hvNV)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3hNV)(target, s, t, r);
}

static void REGAL_CALL statistics_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord3hvNV)(target, v);
}

static void REGAL_CALL statistics_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4hNV)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4hvNV)(target, v);
}

static void REGAL_CALL statistics_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3hNV)(nx, ny, nz);
}

static void REGAL_CALL statistics_glNormal3hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3hvNV)(v);
}

static void REGAL_CALL statistics_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3hNV)(red, green, blue);
}

static void REGAL_CALL statistics_glSecondaryColor3hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColor3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColor3hvNV)(v);
}

static void REGAL_CALL statistics_glTexCoord1hNV(GLhalfNV s)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1hNV)(s);
}

static void REGAL_CALL statistics_glTexCoord1hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord1hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord1hvNV)(v);
}

static void REGAL_CALL statistics_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2hNV)(s, t);
}

static void REGAL_CALL statistics_glTexCoord2hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2hvNV)(v);
}

static void REGAL_CALL statistics_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3hNV)(s, t, r);
}

static void REGAL_CALL statistics_glTexCoord3hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord3hvNV)(v);
}

static void REGAL_CALL statistics_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4hNV)(s, t, r, q);
}

static void REGAL_CALL statistics_glTexCoord4hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4hvNV)(v);
}

static void REGAL_CALL statistics_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2hNV)(x, y);
}

static void REGAL_CALL statistics_glVertex2hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex2hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex2hvNV)(v);
}

static void REGAL_CALL statistics_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3hNV)(x, y, z);
}

static void REGAL_CALL statistics_glVertex3hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex3hvNV)(v);
}

static void REGAL_CALL statistics_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4hNV)(x, y, z, w);
}

static void REGAL_CALL statistics_glVertex4hvNV(const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertex4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertex4hvNV)(v);
}

static void REGAL_CALL statistics_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1hNV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1hvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2hNV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2hvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3hNV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3hvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4hNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4hNV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4hvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs1hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs1hvNV)(index, count, v);
}

static void REGAL_CALL statistics_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs2hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs2hvNV)(index, count, v);
}

static void REGAL_CALL statistics_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs3hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs3hvNV)(index, count, v);
}

static void REGAL_CALL statistics_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs4hvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs4hvNV)(index, count, v);
}

static void REGAL_CALL statistics_glVertexWeighthNV(GLhalfNV weight)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexWeighthNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexWeighthNV)(weight);
}

static void REGAL_CALL statistics_glVertexWeighthvNV(const GLhalfNV *weight)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexWeighthvNV++;

  statistics.gl_nv_half_float++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexWeighthvNV)(weight);
}

// GL_NV_non_square_matrices

static void REGAL_CALL statistics_glUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x3fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x3fvNV)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix2x4fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix2x4fvNV)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x2fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x2fvNV)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix3x4fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix3x4fvNV)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x2fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x2fvNV)(location, count, transpose, value);
}

static void REGAL_CALL statistics_glUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformMatrix4x3fvNV++;

  statistics.gl_nv_non_square_matrices++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformMatrix4x3fvNV)(location, count, transpose, value);
}

// GL_NV_occlusion_query

static void REGAL_CALL statistics_glBeginOcclusionQueryNV(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginOcclusionQueryNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginOcclusionQueryNV)(id);
}

static void REGAL_CALL statistics_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteOcclusionQueriesNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteOcclusionQueriesNV)(n, ids);
}

static void REGAL_CALL statistics_glEndOcclusionQueryNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndOcclusionQueryNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndOcclusionQueryNV)();
}

static void REGAL_CALL statistics_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenOcclusionQueriesNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenOcclusionQueriesNV)(n, ids);
}

static void REGAL_CALL statistics_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetOcclusionQueryivNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetOcclusionQueryivNV)(id, pname, params);
}

static void REGAL_CALL statistics_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetOcclusionQueryuivNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetOcclusionQueryuivNV)(id, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsOcclusionQueryNV(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsOcclusionQueryNV++;

  statistics.gl_nv_occlusion_query++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsOcclusionQueryNV)(id);
  return ret;
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL statistics_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramBufferParametersIivNV++;

  statistics.gl_nv_parameter_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramBufferParametersIivNV)(target, buffer, index, count, params);
}

static void REGAL_CALL statistics_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramBufferParametersIuivNV++;

  statistics.gl_nv_parameter_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramBufferParametersIuivNV)(target, buffer, index, count, params);
}

static void REGAL_CALL statistics_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramBufferParametersfvNV++;

  statistics.gl_nv_parameter_buffer_object++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramBufferParametersfvNV)(target, buffer, index, count, params);
}

// GL_NV_path_rendering

static void REGAL_CALL statistics_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyPathNV)(resultPath, srcPath);
}

static void REGAL_CALL statistics_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverFillPathInstancedNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL statistics_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverFillPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverFillPathNV)(path, coverMode);
}

static void REGAL_CALL statistics_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverStrokePathInstancedNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
}

static void REGAL_CALL statistics_glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCoverStrokePathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCoverStrokePathNV)(name, coverMode);
}

static void REGAL_CALL statistics_glDeletePathsNV(GLuint path, GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeletePathsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeletePathsNV)(path, range);
}

static GLuint REGAL_CALL statistics_glGenPathsNV(GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenPathsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenPathsNV)(range);
  return ret;
}

static void REGAL_CALL statistics_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathColorGenfvNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathColorGenfvNV)(color, pname, value);
}

static void REGAL_CALL statistics_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathColorGenivNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathColorGenivNV)(color, pname, value);
}

static void REGAL_CALL statistics_glGetPathCommandsNV(GLuint name, GLubyte *commands)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathCommandsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathCommandsNV)(name, commands);
}

static void REGAL_CALL statistics_glGetPathCoordsNV(GLuint name, GLfloat *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathCoordsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathCoordsNV)(name, coords);
}

static void REGAL_CALL statistics_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathDashArrayNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathDashArrayNV)(name, dashArray);
}

static GLfloat REGAL_CALL statistics_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathLengthNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLfloat  ret = _next->call(&_next->glGetPathLengthNV)(path, startSegment, numSegments);
  return ret;
}

static void REGAL_CALL statistics_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathMetricRangeNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathMetricRangeNV)(metricQueryMask, fistPathName, numPaths, stride, metrics);
}

static void REGAL_CALL statistics_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathMetricsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
}

static void REGAL_CALL statistics_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathParameterfvNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathParameterfvNV)(name, param, value);
}

static void REGAL_CALL statistics_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathParameterivNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathParameterivNV)(name, param, value);
}

static void REGAL_CALL statistics_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathSpacingNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
}

static void REGAL_CALL statistics_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathTexGenfvNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathTexGenfvNV)(texCoordSet, pname, value);
}

static void REGAL_CALL statistics_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPathTexGenivNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPathTexGenivNV)(texCoordSet, pname, value);
}

static void REGAL_CALL statistics_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInterpolatePathsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
}

static GLboolean REGAL_CALL statistics_glIsPathNV(GLuint path)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsPathNV)(path);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsPointInFillPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsPointInFillPathNV)(path, mask, x, y);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsPointInStrokePathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsPointInStrokePathNV)(path, x, y);
  return ret;
}

static void REGAL_CALL statistics_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathColorGenNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathColorGenNV)(color, genMode, colorFormat, coeffs);
}

static void REGAL_CALL statistics_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathCommandsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL statistics_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathCoordsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathCoordsNV)(path, numCoords, coordType, coords);
}

static void REGAL_CALL statistics_glPathCoverDepthFuncNV(GLenum zfunc)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathCoverDepthFuncNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathCoverDepthFuncNV)(zfunc);
}

static void REGAL_CALL statistics_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathDashArrayNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathDashArrayNV)(path, dashCount, dashArray);
}

static void REGAL_CALL statistics_glPathFogGenNV(GLenum genMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathFogGenNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathFogGenNV)(genMode);
}

static void REGAL_CALL statistics_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathGlyphRangeNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL statistics_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathGlyphsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
}

static void REGAL_CALL statistics_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathParameterfNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathParameterfNV)(path, pname, value);
}

static void REGAL_CALL statistics_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathParameterfvNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathParameterfvNV)(path, pname, value);
}

static void REGAL_CALL statistics_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathParameteriNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathParameteriNV)(path, pname, value);
}

static void REGAL_CALL statistics_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathParameterivNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathParameterivNV)(path, pname, value);
}

static void REGAL_CALL statistics_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathStencilDepthOffsetNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathStencilDepthOffsetNV)(factor, units);
}

static void REGAL_CALL statistics_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathStencilFuncNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathStencilFuncNV)(func, ref, mask);
}

static void REGAL_CALL statistics_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathStringNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathStringNV)(path, format, length, pathString);
}

static void REGAL_CALL statistics_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathSubCommandsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
}

static void REGAL_CALL statistics_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathSubCoordsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
}

static void REGAL_CALL statistics_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPathTexGenNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
}

static GLboolean REGAL_CALL statistics_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointAlongPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
  return ret;
}

static void REGAL_CALL statistics_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilFillPathInstancedNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
}

static void REGAL_CALL statistics_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilFillPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilFillPathNV)(path, fillMode, mask);
}

static void REGAL_CALL statistics_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilStrokePathInstancedNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
}

static void REGAL_CALL statistics_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStencilStrokePathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStencilStrokePathNV)(path, reference, mask);
}

static void REGAL_CALL statistics_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTransformPathNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
}

static void REGAL_CALL statistics_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightPathsNV++;

  statistics.gl_nv_path_rendering++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightPathsNV)(resultPath, numPaths, paths, weights);
}

// GL_NV_pixel_data_range

static void REGAL_CALL statistics_glFlushPixelDataRangeNV(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushPixelDataRangeNV++;

  statistics.gl_nv_pixel_data_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushPixelDataRangeNV)(target);
}

static void REGAL_CALL statistics_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelDataRangeNV++;

  statistics.gl_nv_pixel_data_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelDataRangeNV)(target, size, pointer);
}

// GL_NV_point_sprite

static void REGAL_CALL statistics_glPointParameteriNV(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameteriNV++;

  statistics.gl_nv_point_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameteriNV)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterivNV(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterivNV++;

  statistics.gl_nv_point_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterivNV)(pname, params);
}

// GL_NV_present_video

static void REGAL_CALL statistics_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoi64vNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoi64vNV)(video_slot, pname, params);
}

static void REGAL_CALL statistics_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoivNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoivNV)(video_slot, pname, params);
}

static void REGAL_CALL statistics_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoui64vNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoui64vNV)(video_slot, pname, params);
}

static void REGAL_CALL statistics_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideouivNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideouivNV)(video_slot, pname, params);
}

static void REGAL_CALL statistics_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPresentFrameDualFillNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
}

static void REGAL_CALL statistics_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPresentFrameKeyedNV++;

  statistics.gl_nv_present_video++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
}

// GL_NV_primitive_restart

static void REGAL_CALL statistics_glPrimitiveRestartIndexNV(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPrimitiveRestartIndexNV++;

  statistics.gl_nv_primitive_restart++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPrimitiveRestartIndexNV)(index);
}

static void REGAL_CALL statistics_glPrimitiveRestartNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPrimitiveRestartNV++;

  statistics.gl_nv_primitive_restart++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPrimitiveRestartNV)();
}

// GL_NV_read_buffer

static void REGAL_CALL statistics_glReadBufferNV(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadBufferNV++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadBufferNV)(mode);
}

// GL_NV_register_combiners

static void REGAL_CALL statistics_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerInputNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);
}

static void REGAL_CALL statistics_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerOutputNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
}

static void REGAL_CALL statistics_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerParameterfNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerParameterfNV)(pname, param);
}

static void REGAL_CALL statistics_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerParameterfvNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerParameterfvNV)(pname, params);
}

static void REGAL_CALL statistics_glCombinerParameteriNV(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerParameteriNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerParameteriNV)(pname, param);
}

static void REGAL_CALL statistics_glCombinerParameterivNV(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerParameterivNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerParameterivNV)(pname, params);
}

static void REGAL_CALL statistics_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinalCombinerInputNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinalCombinerInputNV)(variable, input, mapping, componentUsage);
}

static void REGAL_CALL statistics_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCombinerInputParameterfvNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, params);
}

static void REGAL_CALL statistics_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCombinerInputParameterivNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCombinerInputParameterivNV)(stage, portion, variable, pname, params);
}

static void REGAL_CALL statistics_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCombinerOutputParameterfvNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCombinerOutputParameterfvNV)(stage, portion, pname, params);
}

static void REGAL_CALL statistics_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCombinerOutputParameterivNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCombinerOutputParameterivNV)(stage, portion, pname, params);
}

static void REGAL_CALL statistics_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFinalCombinerInputParameterfvNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFinalCombinerInputParameterfvNV)(variable, pname, params);
}

static void REGAL_CALL statistics_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFinalCombinerInputParameterivNV++;

  statistics.gl_nv_register_combiners++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFinalCombinerInputParameterivNV)(variable, pname, params);
}

// GL_NV_register_combiners2

static void REGAL_CALL statistics_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCombinerStageParameterfvNV++;

  statistics.gl_nv_register_combiners2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCombinerStageParameterfvNV)(stage, pname, params);
}

static void REGAL_CALL statistics_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetCombinerStageParameterfvNV++;

  statistics.gl_nv_register_combiners2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetCombinerStageParameterfvNV)(stage, pname, params);
}

// GL_NV_shader_buffer_load

static void REGAL_CALL statistics_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferParameterui64vNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferParameterui64vNV)(target, pname, params);
}

static void REGAL_CALL statistics_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegerui64vNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegerui64vNV)(target, data);
}

static void REGAL_CALL statistics_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetNamedBufferParameterui64vNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetNamedBufferParameterui64vNV)(buffer, pname, params);
}

static void REGAL_CALL statistics_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetUniformui64vNV++;

  statistics.gl_nv_gpu_shader5++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetUniformui64vNV)(program, location, params);
}

static GLboolean REGAL_CALL statistics_glIsBufferResidentNV(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsBufferResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsBufferResidentNV)(target);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsNamedBufferResidentNV(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsNamedBufferResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsNamedBufferResidentNV)(buffer);
  return ret;
}

static void REGAL_CALL statistics_glMakeBufferNonResidentNV(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeBufferNonResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeBufferNonResidentNV)(target);
}

static void REGAL_CALL statistics_glMakeBufferResidentNV(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeBufferResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeBufferResidentNV)(target, access);
}

static void REGAL_CALL statistics_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeNamedBufferNonResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeNamedBufferNonResidentNV)(buffer);
}

static void REGAL_CALL statistics_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMakeNamedBufferResidentNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMakeNamedBufferResidentNV)(buffer, access);
}

static void REGAL_CALL statistics_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformui64NV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformui64NV)(program, location, v0);
}

static void REGAL_CALL statistics_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramUniformui64vNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramUniformui64vNV)(program, location, count, value);
}

static void REGAL_CALL statistics_glUniformui64NV(GLint location, GLuint64EXT v0)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformui64NV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformui64NV)(location, v0);
}

static void REGAL_CALL statistics_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUniformui64vNV++;

  statistics.gl_nv_shader_buffer_load++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glUniformui64vNV)(location, count, value);
}

// GL_NV_texture_barrier

static void REGAL_CALL statistics_glTextureBarrierNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureBarrierNV++;

  statistics.gl_nv_texture_barrier++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureBarrierNV)();
}

// GL_NV_texture_multisample

static void REGAL_CALL statistics_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage2DMultisampleCoverageNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL statistics_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage3DMultisampleCoverageNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL statistics_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage2DMultisampleCoverageNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL statistics_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage2DMultisampleNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
}

static void REGAL_CALL statistics_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage3DMultisampleCoverageNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
}

static void REGAL_CALL statistics_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureImage3DMultisampleNV++;

  statistics.gl_nv_texture_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
}

// GL_NV_transform_feedback

static void REGAL_CALL statistics_glActiveVaryingNV(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glActiveVaryingNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glActiveVaryingNV)(program, name);
}

static void REGAL_CALL statistics_glBeginTransformFeedbackNV(GLenum primitiveMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginTransformFeedbackNV)(primitiveMode);
}

static void REGAL_CALL statistics_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferBaseNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferBaseNV)(target, index, buffer);
}

static void REGAL_CALL statistics_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferOffsetNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferOffsetNV)(target, index, buffer, offset);
}

static void REGAL_CALL statistics_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindBufferRangeNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindBufferRangeNV)(target, index, buffer, offset, size);
}

static void REGAL_CALL statistics_glEndTransformFeedbackNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndTransformFeedbackNV)();
}

static void REGAL_CALL statistics_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetActiveVaryingNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);
}

static void REGAL_CALL statistics_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTransformFeedbackVaryingNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTransformFeedbackVaryingNV)(program, index, location);
}

static GLint REGAL_CALL statistics_glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVaryingLocationNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetVaryingLocationNV)(program, name);
  return ret;
}

static void REGAL_CALL statistics_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTransformFeedbackAttribsNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTransformFeedbackAttribsNV)(count, attribs, bufferMode);
}

static void REGAL_CALL statistics_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTransformFeedbackVaryingsNV++;

  statistics.gl_nv_transform_feedback++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);
}

// GL_NV_transform_feedback2

static void REGAL_CALL statistics_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindTransformFeedbackNV)(target, id);
}

static void REGAL_CALL statistics_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteTransformFeedbacksNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteTransformFeedbacksNV)(n, ids);
}

static void REGAL_CALL statistics_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawTransformFeedbackNV)(mode, name);
}

static void REGAL_CALL statistics_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenTransformFeedbacksNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenTransformFeedbacksNV)(n, ids);
}

static GLboolean REGAL_CALL statistics_glIsTransformFeedbackNV(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsTransformFeedbackNV)(id);
  return ret;
}

static void REGAL_CALL statistics_glPauseTransformFeedbackNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPauseTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPauseTransformFeedbackNV)();
}

static void REGAL_CALL statistics_glResumeTransformFeedbackNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glResumeTransformFeedbackNV++;

  statistics.gl_nv_transform_feedback2++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glResumeTransformFeedbackNV)();
}

// GL_NV_vdpau_interop

static void REGAL_CALL statistics_glVDPAUFiniNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUFiniNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUFiniNV)();
}

static void REGAL_CALL statistics_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUGetSurfaceivNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUGetSurfaceivNV)(surface, pname, bufSize, length, values);
}

static void REGAL_CALL statistics_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUInitNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUInitNV)(vdpDevice, getProcAddress);
}

static GLboolean REGAL_CALL statistics_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUIsSurfaceNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glVDPAUIsSurfaceNV)(surface);
  return ret;
}

static void REGAL_CALL statistics_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUMapSurfacesNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUMapSurfacesNV)(numSurfaces, surfaces);
}

static GLvdpauSurfaceNV REGAL_CALL statistics_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAURegisterOutputSurfaceNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvdpauSurfaceNV  ret = _next->call(&_next->glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
  return ret;
}

static GLvdpauSurfaceNV REGAL_CALL statistics_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAURegisterVideoSurfaceNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvdpauSurfaceNV  ret = _next->call(&_next->glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
  return ret;
}

static void REGAL_CALL statistics_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUSurfaceAccessNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUSurfaceAccessNV)(surface, access);
}

static void REGAL_CALL statistics_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUUnmapSurfacesNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUUnmapSurfacesNV)(numSurfaces, surfaces);
}

static void REGAL_CALL statistics_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVDPAUUnregisterSurfaceNV++;

  statistics.gl_nv_vdpau_interop++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVDPAUUnregisterSurfaceNV)(surface);
}

// GL_NV_vertex_array_range

static void REGAL_CALL statistics_glFlushVertexArrayRangeNV(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushVertexArrayRangeNV++;

  statistics.gl_nv_vertex_array_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushVertexArrayRangeNV)();
}

static void REGAL_CALL statistics_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexArrayRangeNV++;

  statistics.gl_nv_vertex_array_range++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexArrayRangeNV)(size, pointer);
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL statistics_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribLi64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribLi64vNV)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribLui64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribLui64vNV)(index, pname, params);
}

static void REGAL_CALL statistics_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1i64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1i64NV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1i64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1i64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1ui64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1ui64NV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL1ui64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL1ui64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2i64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2i64NV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2i64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2i64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2ui64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2ui64NV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL2ui64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL2ui64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3i64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3i64NV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3i64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3i64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3ui64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3ui64NV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL3ui64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL3ui64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4i64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4i64NV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4i64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4i64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4ui64NV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4ui64NV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribL4ui64vNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribL4ui64vNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribLFormatNV++;

  statistics.gl_nv_vertex_attrib_integer_64bit++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribLFormatNV)(index, size, type, stride);
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL statistics_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBufferAddressRangeNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBufferAddressRangeNV)(pname, index, address, length);
}

static void REGAL_CALL statistics_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorFormatNV)(size, type, stride);
}

static void REGAL_CALL statistics_glEdgeFlagFormatNV(GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEdgeFlagFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEdgeFlagFormatNV)(stride);
}

static void REGAL_CALL statistics_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogCoordFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogCoordFormatNV)(type, stride);
}

static void REGAL_CALL statistics_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetIntegerui64i_vNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetIntegerui64i_vNV)(target, index, data);
}

static void REGAL_CALL statistics_glIndexFormatNV(GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIndexFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIndexFormatNV)(type, stride);
}

static void REGAL_CALL statistics_glNormalFormatNV(GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormalFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormalFormatNV)(type, stride);
}

static void REGAL_CALL statistics_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSecondaryColorFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSecondaryColorFormatNV)(size, type, stride);
}

static void REGAL_CALL statistics_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoordFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoordFormatNV)(size, type, stride);
}

static void REGAL_CALL statistics_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribFormatNV)(index, size, type, normalized, stride);
}

static void REGAL_CALL statistics_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribIFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribIFormatNV)(index, size, type, stride);
}

static void REGAL_CALL statistics_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexFormatNV++;

  statistics.gl_nv_vertex_buffer_unified_memory++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexFormatNV)(size, type, stride);
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL statistics_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAreProgramsResidentNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glAreProgramsResidentNV)(n, programs, residences);
  return ret;
}

static void REGAL_CALL statistics_glBindProgramNV(GLenum target, GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindProgramNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindProgramNV)(target, id);
}

static void REGAL_CALL statistics_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteProgramsNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteProgramsNV)(n, programs);
}

static void REGAL_CALL statistics_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExecuteProgramNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExecuteProgramNV)(target, id, params);
}

static void REGAL_CALL statistics_glGenProgramsNV(GLsizei n, GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenProgramsNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenProgramsNV)(n, programs);
}

static void REGAL_CALL statistics_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramParameterdvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramParameterdvNV)(target, index, pname, params);
}

static void REGAL_CALL statistics_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramParameterfvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramParameterfvNV)(target, index, pname, params);
}

static void REGAL_CALL statistics_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramStringNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramStringNV)(id, pname, program);
}

static void REGAL_CALL statistics_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramivNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramivNV)(id, pname, params);
}

static void REGAL_CALL statistics_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTrackMatrixivNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTrackMatrixivNV)(target, address, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribPointervNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribPointervNV)(index, pname, pointer);
}

static void REGAL_CALL statistics_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribdvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribdvNV)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribfvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribfvNV)(index, pname, params);
}

static void REGAL_CALL statistics_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVertexAttribivNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVertexAttribivNV)(index, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsProgramNV(GLuint id)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsProgramNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsProgramNV)(id);
  return ret;
}

static void REGAL_CALL statistics_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadProgramNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadProgramNV)(target, id, len, program);
}

static void REGAL_CALL statistics_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameter4dNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameter4dNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameter4dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameter4dvNV)(target, index, v);
}

static void REGAL_CALL statistics_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameter4fNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameter4fNV)(target, index, x, y, z, w);
}

static void REGAL_CALL statistics_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameter4fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameter4fvNV)(target, index, v);
}

static void REGAL_CALL statistics_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameters4dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameters4dvNV)(target, index, count, v);
}

static void REGAL_CALL statistics_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramParameters4fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramParameters4fvNV)(target, index, count, v);
}

static void REGAL_CALL statistics_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRequestResidentProgramsNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRequestResidentProgramsNV)(n, programs);
}

static void REGAL_CALL statistics_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTrackMatrixNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTrackMatrixNV)(target, address, matrix, transform);
}

static void REGAL_CALL statistics_glVertexAttrib1dNV(GLuint index, GLdouble x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1dNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1dNV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1dvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1fNV(GLuint index, GLfloat x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1fNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1fNV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1fvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib1sNV(GLuint index, GLshort x)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1sNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1sNV)(index, x);
}

static void REGAL_CALL statistics_glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib1svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib1svNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2dNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2dNV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2dvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2fNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2fNV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2fvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2sNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2sNV)(index, x, y);
}

static void REGAL_CALL statistics_glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib2svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib2svNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3dNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3dNV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3dvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3fNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3fNV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3fvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3sNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3sNV)(index, x, y, z);
}

static void REGAL_CALL statistics_glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib3svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib3svNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4dNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4dNV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4dvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4fNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4fNV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4fvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4sNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4sNV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4svNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4ubNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4ubNV)(index, x, y, z, w);
}

static void REGAL_CALL statistics_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttrib4ubvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttrib4ubvNV)(index, v);
}

static void REGAL_CALL statistics_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribPointerNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribPointerNV)(index, fsize, type, stride, pointer);
}

static void REGAL_CALL statistics_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs1dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs1dvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs1fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs1fvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs1svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs1svNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs2dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs2dvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs2fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs2fvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs2svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs2svNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs3dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs3dvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs3fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs3fvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs3svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs3svNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs4dvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs4dvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs4fvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs4fvNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs4svNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs4svNV)(index, n, v);
}

static void REGAL_CALL statistics_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVertexAttribs4ubvNV++;

  statistics.gl_nv_vertex_program++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVertexAttribs4ubvNV)(index, n, v);
}

// GL_NV_video_capture

static void REGAL_CALL statistics_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBeginVideoCaptureNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBeginVideoCaptureNV)(video_capture_slot);
}

static void REGAL_CALL statistics_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVideoCaptureStreamBufferNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);
}

static void REGAL_CALL statistics_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVideoCaptureStreamTextureNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);
}

static void REGAL_CALL statistics_glEndVideoCaptureNV(GLuint video_capture_slot)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndVideoCaptureNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndVideoCaptureNV)(video_capture_slot);
}

static void REGAL_CALL statistics_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoCaptureStreamdvNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, params);
}

static void REGAL_CALL statistics_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoCaptureStreamfvNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, params);
}

static void REGAL_CALL statistics_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoCaptureStreamivNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, params);
}

static void REGAL_CALL statistics_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetVideoCaptureivNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetVideoCaptureivNV)(video_capture_slot, pname, params);
}

static GLenum REGAL_CALL statistics_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVideoCaptureNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time);
  return ret;
}

static void REGAL_CALL statistics_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVideoCaptureStreamParameterdvNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, params);
}

static void REGAL_CALL statistics_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVideoCaptureStreamParameterfvNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, params);
}

static void REGAL_CALL statistics_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glVideoCaptureStreamParameterivNV++;

  statistics.gl_nv_video_capture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, params);
}

// GL_OES_blend_equation_separate

static void REGAL_CALL statistics_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationSeparateOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationSeparateOES)(modeRGB, modeAlpha);
}

// GL_OES_blend_func_separate

static void REGAL_CALL statistics_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendFuncSeparateOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendFuncSeparateOES)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

// GL_OES_blend_subtract

static void REGAL_CALL statistics_glBlendEquationOES(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBlendEquationOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBlendEquationOES)(mode);
}

// GL_OES_framebuffer_object

static void REGAL_CALL statistics_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindFramebufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindFramebufferOES)(target, framebuffer);
}

static void REGAL_CALL statistics_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindRenderbufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindRenderbufferOES)(target, renderbuffer);
}

static GLenum REGAL_CALL statistics_glCheckFramebufferStatusOES(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCheckFramebufferStatusOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLenum  ret = _next->call(&_next->glCheckFramebufferStatusOES)(target);
  return ret;
}

static void REGAL_CALL statistics_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteFramebuffersOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteFramebuffersOES)(n, framebuffers);
}

static void REGAL_CALL statistics_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteRenderbuffersOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteRenderbuffersOES)(n, renderbuffers);
}

static void REGAL_CALL statistics_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferRenderbufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferRenderbufferOES)(target, attachment, renderbuffertarget, renderbuffer);
}

static void REGAL_CALL statistics_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture2DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture2DOES)(target, attachment, textarget, texture, level);
}

static void REGAL_CALL statistics_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenFramebuffersOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenFramebuffersOES)(n, framebuffers);
}

static void REGAL_CALL statistics_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenRenderbuffersOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenRenderbuffersOES)(n, renderbuffers);
}

static void REGAL_CALL statistics_glGenerateMipmapOES(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenerateMipmapOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenerateMipmapOES)(target);
}

static void REGAL_CALL statistics_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFramebufferAttachmentParameterivOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFramebufferAttachmentParameterivOES)(target, attachment, pname, params);
}

static void REGAL_CALL statistics_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetRenderbufferParameterivOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetRenderbufferParameterivOES)(target, pname, params);
}

static GLboolean REGAL_CALL statistics_glIsFramebufferOES(GLuint framebuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsFramebufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsFramebufferOES)(framebuffer);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsRenderbufferOES(GLuint renderbuffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsRenderbufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsRenderbufferOES)(renderbuffer);
  return ret;
}

static void REGAL_CALL statistics_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRenderbufferStorageOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRenderbufferStorageOES)(target, internalformat, width, height);
}

// GL_OES_get_program_binary

static void REGAL_CALL statistics_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetProgramBinaryOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetProgramBinaryOES)(program, bufSize, length, binaryFormat, binary);
}

static void REGAL_CALL statistics_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glProgramBinaryOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glProgramBinaryOES)(program, binaryFormat, binary, length);
}

// GL_OES_mapbuffer

static void REGAL_CALL statistics_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetBufferPointervOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetBufferPointervOES)(target, pname, params);
}

static GLvoid *REGAL_CALL statistics_glMapBufferOES(GLenum target, GLenum access)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMapBufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLvoid * ret = _next->call(&_next->glMapBufferOES)(target, access);
  return ret;
}

static GLboolean REGAL_CALL statistics_glUnmapBufferOES(GLenum target)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glUnmapBufferOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glUnmapBufferOES)(target);
  return ret;
}

// GL_OES_matrix_palette

static void REGAL_CALL statistics_glCurrentPaletteMatrixOES(GLuint index)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCurrentPaletteMatrixOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCurrentPaletteMatrixOES)(index);
}

static void REGAL_CALL statistics_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMatrixIndexPointerOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMatrixIndexPointerOES)(size, type, stride, pointer);
}

static void REGAL_CALL statistics_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glWeightPointerOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glWeightPointerOES)(size, type, stride, pointer);
}

// GL_OES_single_precision

static void REGAL_CALL statistics_glClearDepthfOES(GLclampd depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearDepthfOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearDepthfOES)(depth);
}

static void REGAL_CALL statistics_glClipPlanefOES(GLenum plane, const GLfloat *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClipPlanefOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClipPlanefOES)(plane, equation);
}

static void REGAL_CALL statistics_glDepthRangefOES(GLclampf n, GLclampf f)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangefOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangefOES)(n, f);
}

static void REGAL_CALL statistics_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrustumfOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrustumfOES)(l, r, b, t, n, f);
}

static void REGAL_CALL statistics_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetClipPlanefOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetClipPlanefOES)(plane, equation);
}

static void REGAL_CALL statistics_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glOrthofOES++;

  statistics.gl_oes_single_precision++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glOrthofOES)(l, r, b, t, n, f);
}

// GL_OES_texture_3D

static void REGAL_CALL statistics_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexImage3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

static void REGAL_CALL statistics_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCompressedTexSubImage3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

static void REGAL_CALL statistics_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyTexSubImage3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

static void REGAL_CALL statistics_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFramebufferTexture3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset);
}

static void REGAL_CALL statistics_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage3DOES)(target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage3DOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

// GL_OES_texture_cube_map

static void REGAL_CALL statistics_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGenfvOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGenfvOES)(coord, pname, params);
}

static void REGAL_CALL statistics_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGenivOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGenivOES)(coord, pname, params);
}

static void REGAL_CALL statistics_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexGenxvOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexGenxvOES)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenfOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenfOES)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenfvOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenfvOES)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGeniOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGeniOES)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenivOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenivOES)(coord, pname, params);
}

static void REGAL_CALL statistics_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenxOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenxOES)(coord, pname, param);
}

static void REGAL_CALL statistics_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexGenxvOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexGenxvOES)(coord, pname, params);
}

// GL_OES_vertex_array_object

static void REGAL_CALL statistics_glBindVertexArrayOES(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glBindVertexArrayOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glBindVertexArrayOES)(array);
}

static void REGAL_CALL statistics_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteVertexArraysOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteVertexArraysOES)(n, arrays);
}

static void REGAL_CALL statistics_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenVertexArraysOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGenVertexArraysOES)(n, arrays);
}

static GLboolean REGAL_CALL statistics_glIsVertexArrayOES(GLuint array)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsVertexArrayOES++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsVertexArrayOES)(array);
  return ret;
}

// GL_PGI_misc_hints

static void REGAL_CALL statistics_glHintPGI(GLenum target, GLint mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glHintPGI++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glHintPGI)(target, mode);
}

// GL_QCOM_alpha_test

static void REGAL_CALL statistics_glAlphaFuncQCOM(GLenum func, GLclampf ref)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFuncQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFuncQCOM)(func, ref);
}

// GL_QCOM_driver_control

static void REGAL_CALL statistics_glDisableDriverControlQCOM(GLuint driverControl)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDisableDriverControlQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDisableDriverControlQCOM)(driverControl);
}

static void REGAL_CALL statistics_glEnableDriverControlQCOM(GLuint driverControl)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEnableDriverControlQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEnableDriverControlQCOM)(driverControl);
}

static void REGAL_CALL statistics_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDriverControlStringQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDriverControlStringQCOM)(driverControl, bufSize, length, driverControlString);
}

static void REGAL_CALL statistics_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDriverControlsQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDriverControlsQCOM)(num, size, driverControls);
}

// GL_QCOM_extended_get

static void REGAL_CALL statistics_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetBufferPointervQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetBufferPointervQCOM)(target, params);
}

static void REGAL_CALL statistics_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetBuffersQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetBuffersQCOM)(buffers, maxBuffers, numBuffers);
}

static void REGAL_CALL statistics_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetFramebuffersQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetFramebuffersQCOM)(framebuffers, maxFramebuffers, numFramebuffers);
}

static void REGAL_CALL statistics_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetRenderbuffersQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetRenderbuffersQCOM)(renderbuffers, maxRenderbuffers, numRenderbuffers);
}

static void REGAL_CALL statistics_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetTexLevelParameterivQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetTexLevelParameterivQCOM)(texture, face, level, pname, params);
}

static void REGAL_CALL statistics_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetTexSubImageQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetTexSubImageQCOM)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
}

static void REGAL_CALL statistics_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetTexturesQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetTexturesQCOM)(textures, maxTextures, numTextures);
}

static void REGAL_CALL statistics_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtTexObjectStateOverrideiQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtTexObjectStateOverrideiQCOM)(target, pname, param);
}

// GL_QCOM_extended_get2

static void REGAL_CALL statistics_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetProgramBinarySourceQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetProgramBinarySourceQCOM)(program, shadertype, source, length);
}

static void REGAL_CALL statistics_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetProgramsQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetProgramsQCOM)(programs, maxPrograms, numPrograms);
}

static void REGAL_CALL statistics_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtGetShadersQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glExtGetShadersQCOM)(shaders, maxShaders, numShaders);
}

static GLboolean REGAL_CALL statistics_glExtIsProgramBinaryQCOM(GLuint program)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glExtIsProgramBinaryQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glExtIsProgramBinaryQCOM)(program);
  return ret;
}

// GL_QCOM_tiled_rendering

static void REGAL_CALL statistics_glEndTilingQCOM(GLbitfield preserveMask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glEndTilingQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glEndTilingQCOM)(preserveMask);
}

static void REGAL_CALL statistics_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStartTilingQCOM++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStartTilingQCOM)(x, y, width, height, preserveMask);
}

// GL_REGAL_ES1_0_compatibility

static void REGAL_CALL statistics_glAlphaFuncx(GLenum func, GLclampx ref)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAlphaFuncx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAlphaFuncx)(func, ref);
}

static void REGAL_CALL statistics_glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearColorx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearColorx)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glClearDepthx(GLclampx depth)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClearDepthx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClearDepthx)(depth);
}

static void REGAL_CALL statistics_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4x++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4x)(red, green, blue, alpha);
}

static void REGAL_CALL statistics_glDepthRangex(GLclampx zNear, GLclampx zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDepthRangex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDepthRangex)(zNear, zFar);
}

static void REGAL_CALL statistics_glFogx(GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogx)(pname, param);
}

static void REGAL_CALL statistics_glFogxv(GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogxv++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogxv)(pname, params);
}

static void REGAL_CALL statistics_glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrustumf++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrustumf)(left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrustumx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrustumx)(left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glLightModelx(GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModelx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModelx)(pname, param);
}

static void REGAL_CALL statistics_glLightModelxv(GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightModelxv++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightModelxv)(pname, params);
}

static void REGAL_CALL statistics_glLightx(GLenum light, GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightx)(light, pname, param);
}

static void REGAL_CALL statistics_glLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightxv++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightxv)(light, pname, params);
}

static void REGAL_CALL statistics_glLineWidthx(GLfixed width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLineWidthx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLineWidthx)(width);
}

static void REGAL_CALL statistics_glLoadMatrixx(const GLfixed *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadMatrixx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadMatrixx)(m);
}

static void REGAL_CALL statistics_glMaterialx(GLenum face, GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMaterialx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMaterialx)(face, pname, param);
}

static void REGAL_CALL statistics_glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMaterialxv++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMaterialxv)(face, pname, params);
}

static void REGAL_CALL statistics_glMultMatrixx(const GLfixed *m)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultMatrixx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultMatrixx)(m);
}

static void REGAL_CALL statistics_glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glMultiTexCoord4x++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glMultiTexCoord4x)(target, s, t, r, q);
}

static void REGAL_CALL statistics_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3x++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3x)(nx, ny, nz);
}

static void REGAL_CALL statistics_glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glOrthof++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glOrthof)(left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glOrthox++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glOrthox)(left, right, bottom, top, zNear, zFar);
}

static void REGAL_CALL statistics_glPointSizex(GLfixed size)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointSizex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointSizex)(size);
}

static void REGAL_CALL statistics_glPolygonOffsetx(GLfixed factor, GLfixed units)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPolygonOffsetx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPolygonOffsetx)(factor, units);
}

static void REGAL_CALL statistics_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glRotatex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glRotatex)(angle, x, y, z);
}

static void REGAL_CALL statistics_glSampleCoveragex(GLclampx value, GLboolean invert)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleCoveragex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleCoveragex)(value, invert);
}

static void REGAL_CALL statistics_glScalex(GLfixed x, GLfixed y, GLfixed z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glScalex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glScalex)(x, y, z);
}

static void REGAL_CALL statistics_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnvx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnvx)(target, pname, param);
}

static void REGAL_CALL statistics_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexEnvxv++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexEnvxv)(target, pname, params);
}

static void REGAL_CALL statistics_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterx++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterx)(target, pname, param);
}

static void REGAL_CALL statistics_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTranslatex++;

  statistics.gl_regal_es1_0_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTranslatex)(x, y, z);
}

// GL_REGAL_ES1_1_compatibility

static void REGAL_CALL statistics_glClipPlanef(GLenum plane, const GLfloat *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClipPlanef++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClipPlanef)(plane, equation);
}

static void REGAL_CALL statistics_glClipPlanex(GLenum plane, const GLfixed *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glClipPlanex++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glClipPlanex)(plane, equation);
}

static void REGAL_CALL statistics_glGetClipPlanef(GLenum pname, GLfloat *eqn)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetClipPlanef++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetClipPlanef)(pname, eqn);
}

static void REGAL_CALL statistics_glGetClipPlanex(GLenum pname, GLfixed *eqn)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetClipPlanex++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetClipPlanex)(pname, eqn);
}

static void REGAL_CALL statistics_glGetFixedv(GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFixedv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFixedv)(pname, params);
}

static void REGAL_CALL statistics_glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetLightxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetLightxv)(light, pname, params);
}

static void REGAL_CALL statistics_glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetMaterialxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetMaterialxv)(face, pname, params);
}

static void REGAL_CALL statistics_glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexEnvxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexEnvxv)(env, pname, params);
}

static void REGAL_CALL statistics_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexParameterxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexParameterxv)(target, pname, params);
}

static void REGAL_CALL statistics_glPointParameterx(GLenum pname, GLfixed param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterx++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterx)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterxv(GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterxv)(pname, params);
}

static void REGAL_CALL statistics_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointSizePointerOES++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointSizePointerOES)(type, stride, pointer);
}

static void REGAL_CALL statistics_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexParameterxv++;

  statistics.gl_regal_es1_1_compatibility++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexParameterxv)(target, pname, params);
}

// GL_REGAL_log

static void REGAL_CALL statistics_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLogMessageCallbackREGAL++;

  statistics.gl_regal_log++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLogMessageCallbackREGAL)(callback);
}

// GL_SGIS_detail_texture

static void REGAL_CALL statistics_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDetailTexFuncSGIS++;

  statistics.gl_sgis_detail_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDetailTexFuncSGIS)(target, n, points);
}

static void REGAL_CALL statistics_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetDetailTexFuncSGIS++;

  statistics.gl_sgis_detail_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetDetailTexFuncSGIS)(target, points);
}

// GL_SGIS_fog_function

static void REGAL_CALL statistics_glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFogFuncSGIS++;

  statistics.gl_sgis_fog_function++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFogFuncSGIS)(n, points);
}

static void REGAL_CALL statistics_glGetFogFuncSGIS(GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFogFuncSGIS++;

  statistics.gl_sgis_fog_function++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFogFuncSGIS)(points);
}

// GL_SGIS_multisample

static void REGAL_CALL statistics_glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSampleMaskSGIS++;

  statistics.gl_sgis_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSampleMaskSGIS)(value, invert);
}

static void REGAL_CALL statistics_glSamplePatternSGIS(GLenum pattern)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSamplePatternSGIS++;

  statistics.gl_sgis_multisample++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSamplePatternSGIS)(pattern);
}

// GL_SGIS_pixel_texture

static void REGAL_CALL statistics_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelTexGenParameterfvSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelTexGenParameterfvSGIS)(pname, params);
}

static void REGAL_CALL statistics_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetPixelTexGenParameterivSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetPixelTexGenParameterivSGIS)(pname, params);
}

static void REGAL_CALL statistics_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTexGenParameterfSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTexGenParameterfSGIS)(pname, param);
}

static void REGAL_CALL statistics_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTexGenParameterfvSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTexGenParameterfvSGIS)(pname, params);
}

static void REGAL_CALL statistics_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTexGenParameteriSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTexGenParameteriSGIS)(pname, param);
}

static void REGAL_CALL statistics_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTexGenParameterivSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTexGenParameterivSGIS)(pname, params);
}

// GL_SGIS_point_parameters

static void REGAL_CALL statistics_glPointParameterfSGIS(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfSGIS)(pname, param);
}

static void REGAL_CALL statistics_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPointParameterfvSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPointParameterfvSGIS)(pname, params);
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL statistics_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetSharpenTexFuncSGIS++;

  statistics.gl_sgis_sharpen_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetSharpenTexFuncSGIS)(target, points);
}

static void REGAL_CALL statistics_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSharpenTexFuncSGIS++;

  statistics.gl_sgis_sharpen_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSharpenTexFuncSGIS)(target, n, points);
}

// GL_SGIS_texture4D

static void REGAL_CALL statistics_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexImage4DSGIS++;

  statistics.gl_sgis_texture4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
}

static void REGAL_CALL statistics_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexSubImage4DSGIS++;

  statistics.gl_sgis_texture4d++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL statistics_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureColorMaskSGIS++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureColorMaskSGIS)(red, green, blue, alpha);
}

// GL_SGIS_texture_filter4

static void REGAL_CALL statistics_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetTexFilterFuncSGIS++;

  statistics.gl_sgis_texture_filter4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetTexFilterFuncSGIS)(target, filter, weights);
}

static void REGAL_CALL statistics_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexFilterFuncSGIS++;

  statistics.gl_sgis_texture_filter4++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexFilterFuncSGIS)(target, filter, n, weights);
}

// GL_SGIX_async

static void REGAL_CALL statistics_glAsyncMarkerSGIX(GLuint marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAsyncMarkerSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAsyncMarkerSGIX)(marker);
}

static void REGAL_CALL statistics_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeleteAsyncMarkersSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeleteAsyncMarkersSGIX)(marker, range);
}

static GLint REGAL_CALL statistics_glFinishAsyncSGIX(GLuint *markerp)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishAsyncSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glFinishAsyncSGIX)(markerp);
  return ret;
}

static GLuint REGAL_CALL statistics_glGenAsyncMarkersSGIX(GLsizei range)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGenAsyncMarkersSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLuint  ret = _next->call(&_next->glGenAsyncMarkersSGIX)(range);
  return ret;
}

static GLboolean REGAL_CALL statistics_glIsAsyncMarkerSGIX(GLuint marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIsAsyncMarkerSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLboolean  ret = _next->call(&_next->glIsAsyncMarkerSGIX)(marker);
  return ret;
}

static GLint REGAL_CALL statistics_glPollAsyncSGIX(GLuint *markerp)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPollAsyncSGIX++;

  statistics.gl_sgix_async++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glPollAsyncSGIX)(markerp);
  return ret;
}

// GL_SGIX_flush_raster

static void REGAL_CALL statistics_glFlushRasterSGIX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFlushRasterSGIX++;

  statistics.gl_sgix_flush_raster++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFlushRasterSGIX)();
}

// GL_SGIX_fog_texture

static void REGAL_CALL statistics_glTextureFogSGIX(GLenum pname)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTextureFogSGIX++;

  statistics.gl_sgix_fog_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTextureFogSGIX)(pname);
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL statistics_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentColorMaterialSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentColorMaterialSGIX)(face, mode);
}

static void REGAL_CALL statistics_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelfSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelfSGIX)(pname, param);
}

static void REGAL_CALL statistics_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelfvSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelfvSGIX)(pname, params);
}

static void REGAL_CALL statistics_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModeliSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModeliSGIX)(pname, param);
}

static void REGAL_CALL statistics_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightModelivSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightModelivSGIX)(pname, params);
}

static void REGAL_CALL statistics_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightfSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightfSGIX)(light, pname, param);
}

static void REGAL_CALL statistics_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightfvSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightfvSGIX)(light, pname, params);
}

static void REGAL_CALL statistics_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightiSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightiSGIX)(light, pname, param);
}

static void REGAL_CALL statistics_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentLightivSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentLightivSGIX)(light, pname, params);
}

static void REGAL_CALL statistics_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialfSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialfSGIX)(face, pname, param);
}

static void REGAL_CALL statistics_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialfvSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialfvSGIX)(face, pname, params);
}

static void REGAL_CALL statistics_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialiSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialiSGIX)(face, pname, param);
}

static void REGAL_CALL statistics_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFragmentMaterialivSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFragmentMaterialivSGIX)(face, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentLightfvSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentLightfvSGIX)(light, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentLightivSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentLightivSGIX)(light, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentMaterialfvSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentMaterialfvSGIX)(face, pname, params);
}

static void REGAL_CALL statistics_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetFragmentMaterialivSGIX++;

  statistics.gl_sgix_fragment_specular_lighting++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetFragmentMaterialivSGIX)(face, pname, params);
}

static void REGAL_CALL statistics_glLightEnviSGIX(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLightEnviSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLightEnviSGIX)(pname, param);
}

// GL_SGIX_framezoom

static void REGAL_CALL statistics_glFrameZoomSGIX(GLint factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFrameZoomSGIX++;

  statistics.gl_sgix_framezoom++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFrameZoomSGIX)(factor);
}

// GL_SGIX_igloo_interface

static void REGAL_CALL statistics_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glIglooInterfaceSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glIglooInterfaceSGIX)(pname, params);
}

// GL_SGIX_instruments

static GLint REGAL_CALL statistics_glGetInstrumentsSGIX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetInstrumentsSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glGetInstrumentsSGIX)();
  return ret;
}

static void REGAL_CALL statistics_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glInstrumentsBufferSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glInstrumentsBufferSGIX)(size, buffer);
}

static GLint REGAL_CALL statistics_glPollInstrumentsSGIX(GLint *marker_p)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPollInstrumentsSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  GLint  ret = _next->call(&_next->glPollInstrumentsSGIX)(marker_p);
  return ret;
}

static void REGAL_CALL statistics_glReadInstrumentsSGIX(GLint marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadInstrumentsSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadInstrumentsSGIX)(marker);
}

static void REGAL_CALL statistics_glStartInstrumentsSGIX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStartInstrumentsSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStartInstrumentsSGIX)();
}

static void REGAL_CALL statistics_glStopInstrumentsSGIX(GLint marker)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glStopInstrumentsSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glStopInstrumentsSGIX)(marker);
}

// GL_SGIX_list_priority

static void REGAL_CALL statistics_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetListParameterfvSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetListParameterfvSGIX)(list, pname, params);
}

static void REGAL_CALL statistics_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetListParameterivSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetListParameterivSGIX)(list, pname, params);
}

static void REGAL_CALL statistics_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glListParameterfSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glListParameterfSGIX)(list, pname, param);
}

static void REGAL_CALL statistics_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glListParameterfvSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glListParameterfvSGIX)(list, pname, params);
}

static void REGAL_CALL statistics_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glListParameteriSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glListParameteriSGIX)(list, pname, param);
}

static void REGAL_CALL statistics_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glListParameterivSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glListParameterivSGIX)(list, pname, params);
}

// GL_SGIX_pixel_texture

static void REGAL_CALL statistics_glPixelTexGenSGIX(GLenum mode)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glPixelTexGenSGIX++;

  statistics.gl_sgix_pixel_texture++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glPixelTexGenSGIX)(mode);
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL statistics_glDeformSGIX(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeformSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeformSGIX)(mask);
}

static void REGAL_CALL statistics_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeformationMap3dSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL statistics_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDeformationMap3fSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
}

static void REGAL_CALL statistics_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glLoadIdentityDeformationMapSGIX++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glLoadIdentityDeformationMapSGIX)(mask);
}

// GL_SGIX_reference_plane

static void REGAL_CALL statistics_glReferencePlaneSGIX(const GLdouble *equation)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReferencePlaneSGIX++;

  statistics.gl_sgix_reference_plane++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReferencePlaneSGIX)(equation);
}

// GL_SGIX_sprite

static void REGAL_CALL statistics_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSpriteParameterfSGIX++;

  statistics.gl_sgix_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSpriteParameterfSGIX)(pname, param);
}

static void REGAL_CALL statistics_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSpriteParameterfvSGIX++;

  statistics.gl_sgix_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSpriteParameterfvSGIX)(pname, params);
}

static void REGAL_CALL statistics_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSpriteParameteriSGIX++;

  statistics.gl_sgix_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSpriteParameteriSGIX)(pname, param);
}

static void REGAL_CALL statistics_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glSpriteParameterivSGIX++;

  statistics.gl_sgix_sprite++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glSpriteParameterivSGIX)(pname, params);
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL statistics_glTagSampleBufferSGIX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTagSampleBufferSGIX++;

  statistics.gl_sgix_tag_sample_buffer++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTagSampleBufferSGIX)();
}

// GL_SGI_color_table

static void REGAL_CALL statistics_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableParameterfvSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableParameterfvSGI)(target, pname, params);
}

static void REGAL_CALL statistics_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableParameterivSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableParameterivSGI)(target, pname, params);
}

static void REGAL_CALL statistics_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColorTableSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColorTableSGI)(target, internalformat, width, format, type, table);
}

static void REGAL_CALL statistics_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glCopyColorTableSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glCopyColorTableSGI)(target, internalformat, x, y, width);
}

static void REGAL_CALL statistics_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameterfvSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameterfvSGI)(target, pname, params);
}

static void REGAL_CALL statistics_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableParameterivSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableParameterivSGI)(target, pname, params);
}

static void REGAL_CALL statistics_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGetColorTableSGI++;

  statistics.gl_sgi_color_table++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGetColorTableSGI)(target, format, type, table);
}

// GL_SUNX_constant_data

static void REGAL_CALL statistics_glFinishTextureSUNX(void)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glFinishTextureSUNX++;

  statistics.gl_sunx_constant_data++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glFinishTextureSUNX)();
}

// GL_SUN_global_alpha

static void REGAL_CALL statistics_glGlobalAlphaFactorbSUN(GLbyte factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactorbSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactorbSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactordSUN(GLdouble factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactordSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactordSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactorfSUN(GLfloat factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactorfSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactorfSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactoriSUN(GLint factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactoriSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactoriSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactorsSUN(GLshort factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactorsSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactorsSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactorubSUN(GLubyte factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactorubSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactorubSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactoruiSUN(GLuint factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactoruiSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactoruiSUN)(factor);
}

static void REGAL_CALL statistics_glGlobalAlphaFactorusSUN(GLushort factor)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glGlobalAlphaFactorusSUN++;

  statistics.gl_sun_global_alpha++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glGlobalAlphaFactorusSUN)(factor);
}

// GL_SUN_mesh_array

static void REGAL_CALL statistics_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glDrawMeshArraysSUN++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glDrawMeshArraysSUN)(mode, first, count, width);
}

// GL_SUN_read_video_pixels

static void REGAL_CALL statistics_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReadVideoPixelsSUN++;

  statistics.gl_sun_read_video_pixels++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReadVideoPixelsSUN)(x, y, width, height, format, type, pixels);
}

// GL_SUN_triangle_list

static void REGAL_CALL statistics_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodePointerSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodePointerSUN)(type, stride, pointer);
}

static void REGAL_CALL statistics_glReplacementCodeubSUN(GLubyte code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeubSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeubSUN)(code);
}

static void REGAL_CALL statistics_glReplacementCodeubvSUN(const GLubyte *code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeubvSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeubvSUN)(code);
}

static void REGAL_CALL statistics_glReplacementCodeuiSUN(GLuint code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiSUN)(code);
}

static void REGAL_CALL statistics_glReplacementCodeuivSUN(const GLuint *code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuivSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuivSUN)(code);
}

static void REGAL_CALL statistics_glReplacementCodeusSUN(GLushort code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeusSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeusSUN)(code);
}

static void REGAL_CALL statistics_glReplacementCodeusvSUN(const GLushort *code)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeusvSUN++;

  statistics.gl_sun_triangle_list++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeusvSUN)(code);
}

// GL_SUN_vertex

static void REGAL_CALL statistics_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3fVertex3fSUN)(r, g, b, x, y, z);
}

static void REGAL_CALL statistics_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor3fVertex3fvSUN)(c, v);
}

static void REGAL_CALL statistics_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4fNormal3fVertex3fvSUN)(c, n, v);
}

static void REGAL_CALL statistics_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ubVertex2fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ubVertex2fSUN)(r, g, b, a, x, y);
}

static void REGAL_CALL statistics_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ubVertex2fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ubVertex2fvSUN)(c, v);
}

static void REGAL_CALL statistics_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ubVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);
}

static void REGAL_CALL statistics_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glColor4ubVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glColor4ubVertex3fvSUN)(c, v);
}

static void REGAL_CALL statistics_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glNormal3fVertex3fvSUN)(n, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor4fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor4fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor4ubVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiColor4ubVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiTexCoord2fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);
}

static void REGAL_CALL statistics_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiVertex3fSUN)(rc, x, y, z);
}

static void REGAL_CALL statistics_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glReplacementCodeuiVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glReplacementCodeuiVertex3fvSUN)(rc, v);
}

static void REGAL_CALL statistics_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);
}

static void REGAL_CALL statistics_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);
}

static void REGAL_CALL statistics_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor4fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor4fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);
}

static void REGAL_CALL statistics_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor4ubVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);
}

static void REGAL_CALL statistics_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fColor4ubVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);
}

static void REGAL_CALL statistics_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fNormal3fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);
}

static void REGAL_CALL statistics_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fNormal3fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);
}

static void REGAL_CALL statistics_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fVertex3fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fVertex3fSUN)(s, t, x, y, z);
}

static void REGAL_CALL statistics_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord2fVertex3fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord2fVertex3fvSUN)(tc, v);
}

static void REGAL_CALL statistics_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4fColor4fNormal3fVertex4fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
}

static void REGAL_CALL statistics_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4fColor4fNormal3fVertex4fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);
}

static void REGAL_CALL statistics_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4fVertex4fSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);
}

static void REGAL_CALL statistics_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glTexCoord4fVertex4fvSUN++;

  statistics.gl_sun_vertex++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glTexCoord4fVertex4fvSUN)(tc, v);
}

// GL_WIN_swap_hint

static void REGAL_CALL statistics_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
  RegalContext *_context = REGAL_GET_CONTEXT();
  RegalAssert(_context);

  RegalAssert(_context->statistics);
  Statistics &statistics = *_context->statistics;
  statistics.glAddSwapHintRectWIN++;

  statistics.gl_win_swap_hint++;

  DispatchTableGL *_next = _context->dispatcher.statistics.next();
  RegalAssert(_next);
  _next->call(&_next->glAddSwapHintRectWIN)(x, y, width, height);
}

void InitDispatchTableStatistics(DispatchTableGL &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = statistics_glAccum;
  tbl.glAlphaFunc = statistics_glAlphaFunc;
  tbl.glBegin = statistics_glBegin;
  tbl.glBitmap = statistics_glBitmap;
  tbl.glBlendFunc = statistics_glBlendFunc;
  tbl.glCallList = statistics_glCallList;
  tbl.glCallLists = statistics_glCallLists;
  tbl.glClear = statistics_glClear;
  tbl.glClearAccum = statistics_glClearAccum;
  tbl.glClearColor = statistics_glClearColor;
  tbl.glClearDepth = statistics_glClearDepth;
  tbl.glClearIndex = statistics_glClearIndex;
  tbl.glClearStencil = statistics_glClearStencil;
  tbl.glClipPlane = statistics_glClipPlane;
  tbl.glColor3b = statistics_glColor3b;
  tbl.glColor3bv = statistics_glColor3bv;
  tbl.glColor3d = statistics_glColor3d;
  tbl.glColor3dv = statistics_glColor3dv;
  tbl.glColor3f = statistics_glColor3f;
  tbl.glColor3fv = statistics_glColor3fv;
  tbl.glColor3i = statistics_glColor3i;
  tbl.glColor3iv = statistics_glColor3iv;
  tbl.glColor3s = statistics_glColor3s;
  tbl.glColor3sv = statistics_glColor3sv;
  tbl.glColor3ub = statistics_glColor3ub;
  tbl.glColor3ubv = statistics_glColor3ubv;
  tbl.glColor3ui = statistics_glColor3ui;
  tbl.glColor3uiv = statistics_glColor3uiv;
  tbl.glColor3us = statistics_glColor3us;
  tbl.glColor3usv = statistics_glColor3usv;
  tbl.glColor4b = statistics_glColor4b;
  tbl.glColor4bv = statistics_glColor4bv;
  tbl.glColor4d = statistics_glColor4d;
  tbl.glColor4dv = statistics_glColor4dv;
  tbl.glColor4f = statistics_glColor4f;
  tbl.glColor4fv = statistics_glColor4fv;
  tbl.glColor4i = statistics_glColor4i;
  tbl.glColor4iv = statistics_glColor4iv;
  tbl.glColor4s = statistics_glColor4s;
  tbl.glColor4sv = statistics_glColor4sv;
  tbl.glColor4ub = statistics_glColor4ub;
  tbl.glColor4ubv = statistics_glColor4ubv;
  tbl.glColor4ui = statistics_glColor4ui;
  tbl.glColor4uiv = statistics_glColor4uiv;
  tbl.glColor4us = statistics_glColor4us;
  tbl.glColor4usv = statistics_glColor4usv;
  tbl.glColorMask = statistics_glColorMask;
  tbl.glColorMaterial = statistics_glColorMaterial;
  tbl.glCopyPixels = statistics_glCopyPixels;
  tbl.glCullFace = statistics_glCullFace;
  tbl.glDeleteLists = statistics_glDeleteLists;
  tbl.glDepthFunc = statistics_glDepthFunc;
  tbl.glDepthMask = statistics_glDepthMask;
  tbl.glDepthRange = statistics_glDepthRange;
  tbl.glDisable = statistics_glDisable;
  tbl.glDrawBuffer = statistics_glDrawBuffer;
  tbl.glDrawPixels = statistics_glDrawPixels;
  tbl.glEdgeFlag = statistics_glEdgeFlag;
  tbl.glEdgeFlagv = statistics_glEdgeFlagv;
  tbl.glEnable = statistics_glEnable;
  tbl.glEnd = statistics_glEnd;
  tbl.glEndList = statistics_glEndList;
  tbl.glEvalCoord1d = statistics_glEvalCoord1d;
  tbl.glEvalCoord1dv = statistics_glEvalCoord1dv;
  tbl.glEvalCoord1f = statistics_glEvalCoord1f;
  tbl.glEvalCoord1fv = statistics_glEvalCoord1fv;
  tbl.glEvalCoord2d = statistics_glEvalCoord2d;
  tbl.glEvalCoord2dv = statistics_glEvalCoord2dv;
  tbl.glEvalCoord2f = statistics_glEvalCoord2f;
  tbl.glEvalCoord2fv = statistics_glEvalCoord2fv;
  tbl.glEvalMesh1 = statistics_glEvalMesh1;
  tbl.glEvalMesh2 = statistics_glEvalMesh2;
  tbl.glEvalPoint1 = statistics_glEvalPoint1;
  tbl.glEvalPoint2 = statistics_glEvalPoint2;
  tbl.glFeedbackBuffer = statistics_glFeedbackBuffer;
  tbl.glFinish = statistics_glFinish;
  tbl.glFlush = statistics_glFlush;
  tbl.glFogf = statistics_glFogf;
  tbl.glFogfv = statistics_glFogfv;
  tbl.glFogi = statistics_glFogi;
  tbl.glFogiv = statistics_glFogiv;
  tbl.glFrontFace = statistics_glFrontFace;
  tbl.glFrustum = statistics_glFrustum;
  tbl.glGenLists = statistics_glGenLists;
  tbl.glGetBooleanv = statistics_glGetBooleanv;
  tbl.glGetClipPlane = statistics_glGetClipPlane;
  tbl.glGetDoublev = statistics_glGetDoublev;
  tbl.glGetError = statistics_glGetError;
  tbl.glGetFloatv = statistics_glGetFloatv;
  tbl.glGetIntegerv = statistics_glGetIntegerv;
  tbl.glGetLightfv = statistics_glGetLightfv;
  tbl.glGetLightiv = statistics_glGetLightiv;
  tbl.glGetMapdv = statistics_glGetMapdv;
  tbl.glGetMapfv = statistics_glGetMapfv;
  tbl.glGetMapiv = statistics_glGetMapiv;
  tbl.glGetMaterialfv = statistics_glGetMaterialfv;
  tbl.glGetMaterialiv = statistics_glGetMaterialiv;
  tbl.glGetPixelMapfv = statistics_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = statistics_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = statistics_glGetPixelMapusv;
  tbl.glGetPolygonStipple = statistics_glGetPolygonStipple;
  tbl.glGetString = statistics_glGetString;
  tbl.glGetTexEnvfv = statistics_glGetTexEnvfv;
  tbl.glGetTexEnviv = statistics_glGetTexEnviv;
  tbl.glGetTexGendv = statistics_glGetTexGendv;
  tbl.glGetTexGenfv = statistics_glGetTexGenfv;
  tbl.glGetTexGeniv = statistics_glGetTexGeniv;
  tbl.glGetTexImage = statistics_glGetTexImage;
  tbl.glGetTexLevelParameterfv = statistics_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = statistics_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = statistics_glGetTexParameterfv;
  tbl.glGetTexParameteriv = statistics_glGetTexParameteriv;
  tbl.glHint = statistics_glHint;
  tbl.glIndexMask = statistics_glIndexMask;
  tbl.glIndexd = statistics_glIndexd;
  tbl.glIndexdv = statistics_glIndexdv;
  tbl.glIndexf = statistics_glIndexf;
  tbl.glIndexfv = statistics_glIndexfv;
  tbl.glIndexi = statistics_glIndexi;
  tbl.glIndexiv = statistics_glIndexiv;
  tbl.glIndexs = statistics_glIndexs;
  tbl.glIndexsv = statistics_glIndexsv;
  tbl.glInitNames = statistics_glInitNames;
  tbl.glIsEnabled = statistics_glIsEnabled;
  tbl.glIsList = statistics_glIsList;
  tbl.glLightModelf = statistics_glLightModelf;
  tbl.glLightModelfv = statistics_glLightModelfv;
  tbl.glLightModeli = statistics_glLightModeli;
  tbl.glLightModeliv = statistics_glLightModeliv;
  tbl.glLightf = statistics_glLightf;
  tbl.glLightfv = statistics_glLightfv;
  tbl.glLighti = statistics_glLighti;
  tbl.glLightiv = statistics_glLightiv;
  tbl.glLineStipple = statistics_glLineStipple;
  tbl.glLineWidth = statistics_glLineWidth;
  tbl.glListBase = statistics_glListBase;
  tbl.glLoadIdentity = statistics_glLoadIdentity;
  tbl.glLoadMatrixd = statistics_glLoadMatrixd;
  tbl.glLoadMatrixf = statistics_glLoadMatrixf;
  tbl.glLoadName = statistics_glLoadName;
  tbl.glLogicOp = statistics_glLogicOp;
  tbl.glMap1d = statistics_glMap1d;
  tbl.glMap1f = statistics_glMap1f;
  tbl.glMap2d = statistics_glMap2d;
  tbl.glMap2f = statistics_glMap2f;
  tbl.glMapGrid1d = statistics_glMapGrid1d;
  tbl.glMapGrid1f = statistics_glMapGrid1f;
  tbl.glMapGrid2d = statistics_glMapGrid2d;
  tbl.glMapGrid2f = statistics_glMapGrid2f;
  tbl.glMaterialf = statistics_glMaterialf;
  tbl.glMaterialfv = statistics_glMaterialfv;
  tbl.glMateriali = statistics_glMateriali;
  tbl.glMaterialiv = statistics_glMaterialiv;
  tbl.glMatrixMode = statistics_glMatrixMode;
  tbl.glMultMatrixd = statistics_glMultMatrixd;
  tbl.glMultMatrixf = statistics_glMultMatrixf;
  tbl.glNewList = statistics_glNewList;
  tbl.glNormal3b = statistics_glNormal3b;
  tbl.glNormal3bv = statistics_glNormal3bv;
  tbl.glNormal3d = statistics_glNormal3d;
  tbl.glNormal3dv = statistics_glNormal3dv;
  tbl.glNormal3f = statistics_glNormal3f;
  tbl.glNormal3fv = statistics_glNormal3fv;
  tbl.glNormal3i = statistics_glNormal3i;
  tbl.glNormal3iv = statistics_glNormal3iv;
  tbl.glNormal3s = statistics_glNormal3s;
  tbl.glNormal3sv = statistics_glNormal3sv;
  tbl.glOrtho = statistics_glOrtho;
  tbl.glPassThrough = statistics_glPassThrough;
  tbl.glPixelMapfv = statistics_glPixelMapfv;
  tbl.glPixelMapuiv = statistics_glPixelMapuiv;
  tbl.glPixelMapusv = statistics_glPixelMapusv;
  tbl.glPixelStoref = statistics_glPixelStoref;
  tbl.glPixelStorei = statistics_glPixelStorei;
  tbl.glPixelTransferf = statistics_glPixelTransferf;
  tbl.glPixelTransferi = statistics_glPixelTransferi;
  tbl.glPixelZoom = statistics_glPixelZoom;
  tbl.glPointSize = statistics_glPointSize;
  tbl.glPolygonMode = statistics_glPolygonMode;
  tbl.glPolygonStipple = statistics_glPolygonStipple;
  tbl.glPopAttrib = statistics_glPopAttrib;
  tbl.glPopMatrix = statistics_glPopMatrix;
  tbl.glPopName = statistics_glPopName;
  tbl.glPushAttrib = statistics_glPushAttrib;
  tbl.glPushMatrix = statistics_glPushMatrix;
  tbl.glPushName = statistics_glPushName;
  tbl.glRasterPos2d = statistics_glRasterPos2d;
  tbl.glRasterPos2dv = statistics_glRasterPos2dv;
  tbl.glRasterPos2f = statistics_glRasterPos2f;
  tbl.glRasterPos2fv = statistics_glRasterPos2fv;
  tbl.glRasterPos2i = statistics_glRasterPos2i;
  tbl.glRasterPos2iv = statistics_glRasterPos2iv;
  tbl.glRasterPos2s = statistics_glRasterPos2s;
  tbl.glRasterPos2sv = statistics_glRasterPos2sv;
  tbl.glRasterPos3d = statistics_glRasterPos3d;
  tbl.glRasterPos3dv = statistics_glRasterPos3dv;
  tbl.glRasterPos3f = statistics_glRasterPos3f;
  tbl.glRasterPos3fv = statistics_glRasterPos3fv;
  tbl.glRasterPos3i = statistics_glRasterPos3i;
  tbl.glRasterPos3iv = statistics_glRasterPos3iv;
  tbl.glRasterPos3s = statistics_glRasterPos3s;
  tbl.glRasterPos3sv = statistics_glRasterPos3sv;
  tbl.glRasterPos4d = statistics_glRasterPos4d;
  tbl.glRasterPos4dv = statistics_glRasterPos4dv;
  tbl.glRasterPos4f = statistics_glRasterPos4f;
  tbl.glRasterPos4fv = statistics_glRasterPos4fv;
  tbl.glRasterPos4i = statistics_glRasterPos4i;
  tbl.glRasterPos4iv = statistics_glRasterPos4iv;
  tbl.glRasterPos4s = statistics_glRasterPos4s;
  tbl.glRasterPos4sv = statistics_glRasterPos4sv;
  tbl.glReadBuffer = statistics_glReadBuffer;
  tbl.glReadPixels = statistics_glReadPixels;
  tbl.glRectd = statistics_glRectd;
  tbl.glRectdv = statistics_glRectdv;
  tbl.glRectf = statistics_glRectf;
  tbl.glRectfv = statistics_glRectfv;
  tbl.glRecti = statistics_glRecti;
  tbl.glRectiv = statistics_glRectiv;
  tbl.glRects = statistics_glRects;
  tbl.glRectsv = statistics_glRectsv;
  tbl.glRenderMode = statistics_glRenderMode;
  tbl.glRotated = statistics_glRotated;
  tbl.glRotatef = statistics_glRotatef;
  tbl.glScaled = statistics_glScaled;
  tbl.glScalef = statistics_glScalef;
  tbl.glScissor = statistics_glScissor;
  tbl.glSelectBuffer = statistics_glSelectBuffer;
  tbl.glShadeModel = statistics_glShadeModel;
  tbl.glStencilFunc = statistics_glStencilFunc;
  tbl.glStencilMask = statistics_glStencilMask;
  tbl.glStencilOp = statistics_glStencilOp;
  tbl.glTexCoord1d = statistics_glTexCoord1d;
  tbl.glTexCoord1dv = statistics_glTexCoord1dv;
  tbl.glTexCoord1f = statistics_glTexCoord1f;
  tbl.glTexCoord1fv = statistics_glTexCoord1fv;
  tbl.glTexCoord1i = statistics_glTexCoord1i;
  tbl.glTexCoord1iv = statistics_glTexCoord1iv;
  tbl.glTexCoord1s = statistics_glTexCoord1s;
  tbl.glTexCoord1sv = statistics_glTexCoord1sv;
  tbl.glTexCoord2d = statistics_glTexCoord2d;
  tbl.glTexCoord2dv = statistics_glTexCoord2dv;
  tbl.glTexCoord2f = statistics_glTexCoord2f;
  tbl.glTexCoord2fv = statistics_glTexCoord2fv;
  tbl.glTexCoord2i = statistics_glTexCoord2i;
  tbl.glTexCoord2iv = statistics_glTexCoord2iv;
  tbl.glTexCoord2s = statistics_glTexCoord2s;
  tbl.glTexCoord2sv = statistics_glTexCoord2sv;
  tbl.glTexCoord3d = statistics_glTexCoord3d;
  tbl.glTexCoord3dv = statistics_glTexCoord3dv;
  tbl.glTexCoord3f = statistics_glTexCoord3f;
  tbl.glTexCoord3fv = statistics_glTexCoord3fv;
  tbl.glTexCoord3i = statistics_glTexCoord3i;
  tbl.glTexCoord3iv = statistics_glTexCoord3iv;
  tbl.glTexCoord3s = statistics_glTexCoord3s;
  tbl.glTexCoord3sv = statistics_glTexCoord3sv;
  tbl.glTexCoord4d = statistics_glTexCoord4d;
  tbl.glTexCoord4dv = statistics_glTexCoord4dv;
  tbl.glTexCoord4f = statistics_glTexCoord4f;
  tbl.glTexCoord4fv = statistics_glTexCoord4fv;
  tbl.glTexCoord4i = statistics_glTexCoord4i;
  tbl.glTexCoord4iv = statistics_glTexCoord4iv;
  tbl.glTexCoord4s = statistics_glTexCoord4s;
  tbl.glTexCoord4sv = statistics_glTexCoord4sv;
  tbl.glTexEnvf = statistics_glTexEnvf;
  tbl.glTexEnvfv = statistics_glTexEnvfv;
  tbl.glTexEnvi = statistics_glTexEnvi;
  tbl.glTexEnviv = statistics_glTexEnviv;
  tbl.glTexGend = statistics_glTexGend;
  tbl.glTexGendv = statistics_glTexGendv;
  tbl.glTexGenf = statistics_glTexGenf;
  tbl.glTexGenfv = statistics_glTexGenfv;
  tbl.glTexGeni = statistics_glTexGeni;
  tbl.glTexGeniv = statistics_glTexGeniv;
  tbl.glTexImage1D = statistics_glTexImage1D;
  tbl.glTexImage2D = statistics_glTexImage2D;
  tbl.glTexParameterf = statistics_glTexParameterf;
  tbl.glTexParameterfv = statistics_glTexParameterfv;
  tbl.glTexParameteri = statistics_glTexParameteri;
  tbl.glTexParameteriv = statistics_glTexParameteriv;
  tbl.glTranslated = statistics_glTranslated;
  tbl.glTranslatef = statistics_glTranslatef;
  tbl.glVertex2d = statistics_glVertex2d;
  tbl.glVertex2dv = statistics_glVertex2dv;
  tbl.glVertex2f = statistics_glVertex2f;
  tbl.glVertex2fv = statistics_glVertex2fv;
  tbl.glVertex2i = statistics_glVertex2i;
  tbl.glVertex2iv = statistics_glVertex2iv;
  tbl.glVertex2s = statistics_glVertex2s;
  tbl.glVertex2sv = statistics_glVertex2sv;
  tbl.glVertex3d = statistics_glVertex3d;
  tbl.glVertex3dv = statistics_glVertex3dv;
  tbl.glVertex3f = statistics_glVertex3f;
  tbl.glVertex3fv = statistics_glVertex3fv;
  tbl.glVertex3i = statistics_glVertex3i;
  tbl.glVertex3iv = statistics_glVertex3iv;
  tbl.glVertex3s = statistics_glVertex3s;
  tbl.glVertex3sv = statistics_glVertex3sv;
  tbl.glVertex4d = statistics_glVertex4d;
  tbl.glVertex4dv = statistics_glVertex4dv;
  tbl.glVertex4f = statistics_glVertex4f;
  tbl.glVertex4fv = statistics_glVertex4fv;
  tbl.glVertex4i = statistics_glVertex4i;
  tbl.glVertex4iv = statistics_glVertex4iv;
  tbl.glVertex4s = statistics_glVertex4s;
  tbl.glVertex4sv = statistics_glVertex4sv;
  tbl.glViewport = statistics_glViewport;

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = statistics_glAreTexturesResident;
  tbl.glArrayElement = statistics_glArrayElement;
  tbl.glBindTexture = statistics_glBindTexture;
  tbl.glColorPointer = statistics_glColorPointer;
  tbl.glCopyTexImage1D = statistics_glCopyTexImage1D;
  tbl.glCopyTexImage2D = statistics_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = statistics_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = statistics_glCopyTexSubImage2D;
  tbl.glDeleteTextures = statistics_glDeleteTextures;
  tbl.glDisableClientState = statistics_glDisableClientState;
  tbl.glDrawArrays = statistics_glDrawArrays;
  tbl.glDrawElements = statistics_glDrawElements;
  tbl.glEdgeFlagPointer = statistics_glEdgeFlagPointer;
  tbl.glEnableClientState = statistics_glEnableClientState;
  tbl.glGenTextures = statistics_glGenTextures;
  tbl.glGetPointerv = statistics_glGetPointerv;
  tbl.glIndexPointer = statistics_glIndexPointer;
  tbl.glIndexub = statistics_glIndexub;
  tbl.glIndexubv = statistics_glIndexubv;
  tbl.glInterleavedArrays = statistics_glInterleavedArrays;
  tbl.glIsTexture = statistics_glIsTexture;
  tbl.glNormalPointer = statistics_glNormalPointer;
  tbl.glPolygonOffset = statistics_glPolygonOffset;
  tbl.glPopClientAttrib = statistics_glPopClientAttrib;
  tbl.glPrioritizeTextures = statistics_glPrioritizeTextures;
  tbl.glPushClientAttrib = statistics_glPushClientAttrib;
  tbl.glTexCoordPointer = statistics_glTexCoordPointer;
  tbl.glTexSubImage1D = statistics_glTexSubImage1D;
  tbl.glTexSubImage2D = statistics_glTexSubImage2D;
  tbl.glVertexPointer = statistics_glVertexPointer;

  // GL_VERSION_1_2

  tbl.glBlendColor = statistics_glBlendColor;
  tbl.glBlendEquation = statistics_glBlendEquation;
  tbl.glCopyTexSubImage3D = statistics_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = statistics_glDrawRangeElements;
  tbl.glTexImage3D = statistics_glTexImage3D;
  tbl.glTexSubImage3D = statistics_glTexSubImage3D;

  // GL_VERSION_1_3

  tbl.glActiveTexture = statistics_glActiveTexture;
  tbl.glClientActiveTexture = statistics_glClientActiveTexture;
  tbl.glCompressedTexImage1D = statistics_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = statistics_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = statistics_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = statistics_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = statistics_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = statistics_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = statistics_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = statistics_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = statistics_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = statistics_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = statistics_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = statistics_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = statistics_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = statistics_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = statistics_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = statistics_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = statistics_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = statistics_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = statistics_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = statistics_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = statistics_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = statistics_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = statistics_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = statistics_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = statistics_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = statistics_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = statistics_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = statistics_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = statistics_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = statistics_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = statistics_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = statistics_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = statistics_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = statistics_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = statistics_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = statistics_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = statistics_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = statistics_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = statistics_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = statistics_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = statistics_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = statistics_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = statistics_glMultiTexCoord4sv;
  tbl.glSampleCoverage = statistics_glSampleCoverage;

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = statistics_glBlendFuncSeparate;
  tbl.glFogCoordPointer = statistics_glFogCoordPointer;
  tbl.glFogCoordd = statistics_glFogCoordd;
  tbl.glFogCoorddv = statistics_glFogCoorddv;
  tbl.glFogCoordf = statistics_glFogCoordf;
  tbl.glFogCoordfv = statistics_glFogCoordfv;
  tbl.glMultiDrawArrays = statistics_glMultiDrawArrays;
  tbl.glMultiDrawElements = statistics_glMultiDrawElements;
  tbl.glPointParameterf = statistics_glPointParameterf;
  tbl.glPointParameterfv = statistics_glPointParameterfv;
  tbl.glPointParameteri = statistics_glPointParameteri;
  tbl.glPointParameteriv = statistics_glPointParameteriv;
  tbl.glSecondaryColor3b = statistics_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = statistics_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = statistics_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = statistics_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = statistics_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = statistics_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = statistics_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = statistics_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = statistics_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = statistics_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = statistics_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = statistics_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = statistics_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = statistics_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = statistics_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = statistics_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = statistics_glSecondaryColorPointer;
  tbl.glWindowPos2d = statistics_glWindowPos2d;
  tbl.glWindowPos2dv = statistics_glWindowPos2dv;
  tbl.glWindowPos2f = statistics_glWindowPos2f;
  tbl.glWindowPos2fv = statistics_glWindowPos2fv;
  tbl.glWindowPos2i = statistics_glWindowPos2i;
  tbl.glWindowPos2iv = statistics_glWindowPos2iv;
  tbl.glWindowPos2s = statistics_glWindowPos2s;
  tbl.glWindowPos2sv = statistics_glWindowPos2sv;
  tbl.glWindowPos3d = statistics_glWindowPos3d;
  tbl.glWindowPos3dv = statistics_glWindowPos3dv;
  tbl.glWindowPos3f = statistics_glWindowPos3f;
  tbl.glWindowPos3fv = statistics_glWindowPos3fv;
  tbl.glWindowPos3i = statistics_glWindowPos3i;
  tbl.glWindowPos3iv = statistics_glWindowPos3iv;
  tbl.glWindowPos3s = statistics_glWindowPos3s;
  tbl.glWindowPos3sv = statistics_glWindowPos3sv;

  // GL_VERSION_1_5

  tbl.glBeginQuery = statistics_glBeginQuery;
  tbl.glBindBuffer = statistics_glBindBuffer;
  tbl.glBufferData = statistics_glBufferData;
  tbl.glBufferSubData = statistics_glBufferSubData;
  tbl.glDeleteBuffers = statistics_glDeleteBuffers;
  tbl.glDeleteQueries = statistics_glDeleteQueries;
  tbl.glEndQuery = statistics_glEndQuery;
  tbl.glGenBuffers = statistics_glGenBuffers;
  tbl.glGenQueries = statistics_glGenQueries;
  tbl.glGetBufferParameteriv = statistics_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = statistics_glGetBufferPointerv;
  tbl.glGetBufferSubData = statistics_glGetBufferSubData;
  tbl.glGetQueryObjectiv = statistics_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = statistics_glGetQueryObjectuiv;
  tbl.glGetQueryiv = statistics_glGetQueryiv;
  tbl.glIsBuffer = statistics_glIsBuffer;
  tbl.glIsQuery = statistics_glIsQuery;
  tbl.glMapBuffer = statistics_glMapBuffer;
  tbl.glUnmapBuffer = statistics_glUnmapBuffer;

  // GL_VERSION_2_0

  tbl.glAttachShader = statistics_glAttachShader;
  tbl.glBindAttribLocation = statistics_glBindAttribLocation;
  tbl.glBlendEquationSeparate = statistics_glBlendEquationSeparate;
  tbl.glCompileShader = statistics_glCompileShader;
  tbl.glCreateProgram = statistics_glCreateProgram;
  tbl.glCreateShader = statistics_glCreateShader;
  tbl.glDeleteProgram = statistics_glDeleteProgram;
  tbl.glDeleteShader = statistics_glDeleteShader;
  tbl.glDetachShader = statistics_glDetachShader;
  tbl.glDisableVertexAttribArray = statistics_glDisableVertexAttribArray;
  tbl.glDrawBuffers = statistics_glDrawBuffers;
  tbl.glEnableVertexAttribArray = statistics_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = statistics_glGetActiveAttrib;
  tbl.glGetActiveUniform = statistics_glGetActiveUniform;
  tbl.glGetAttachedShaders = statistics_glGetAttachedShaders;
  tbl.glGetAttribLocation = statistics_glGetAttribLocation;
  tbl.glGetProgramInfoLog = statistics_glGetProgramInfoLog;
  tbl.glGetProgramiv = statistics_glGetProgramiv;
  tbl.glGetShaderInfoLog = statistics_glGetShaderInfoLog;
  tbl.glGetShaderSource = statistics_glGetShaderSource;
  tbl.glGetShaderiv = statistics_glGetShaderiv;
  tbl.glGetUniformLocation = statistics_glGetUniformLocation;
  tbl.glGetUniformfv = statistics_glGetUniformfv;
  tbl.glGetUniformiv = statistics_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = statistics_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = statistics_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = statistics_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = statistics_glGetVertexAttribiv;
  tbl.glIsProgram = statistics_glIsProgram;
  tbl.glIsShader = statistics_glIsShader;
  tbl.glLinkProgram = statistics_glLinkProgram;
  tbl.glShaderSource = statistics_glShaderSource;
  tbl.glStencilFuncSeparate = statistics_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = statistics_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = statistics_glStencilOpSeparate;
  tbl.glUniform1f = statistics_glUniform1f;
  tbl.glUniform1fv = statistics_glUniform1fv;
  tbl.glUniform1i = statistics_glUniform1i;
  tbl.glUniform1iv = statistics_glUniform1iv;
  tbl.glUniform2f = statistics_glUniform2f;
  tbl.glUniform2fv = statistics_glUniform2fv;
  tbl.glUniform2i = statistics_glUniform2i;
  tbl.glUniform2iv = statistics_glUniform2iv;
  tbl.glUniform3f = statistics_glUniform3f;
  tbl.glUniform3fv = statistics_glUniform3fv;
  tbl.glUniform3i = statistics_glUniform3i;
  tbl.glUniform3iv = statistics_glUniform3iv;
  tbl.glUniform4f = statistics_glUniform4f;
  tbl.glUniform4fv = statistics_glUniform4fv;
  tbl.glUniform4i = statistics_glUniform4i;
  tbl.glUniform4iv = statistics_glUniform4iv;
  tbl.glUniformMatrix2fv = statistics_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = statistics_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = statistics_glUniformMatrix4fv;
  tbl.glUseProgram = statistics_glUseProgram;
  tbl.glValidateProgram = statistics_glValidateProgram;
  tbl.glVertexAttrib1d = statistics_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = statistics_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = statistics_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = statistics_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = statistics_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = statistics_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = statistics_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = statistics_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = statistics_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = statistics_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = statistics_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = statistics_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = statistics_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = statistics_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = statistics_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = statistics_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = statistics_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = statistics_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = statistics_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = statistics_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = statistics_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = statistics_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = statistics_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = statistics_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = statistics_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = statistics_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = statistics_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = statistics_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = statistics_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = statistics_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = statistics_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = statistics_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = statistics_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = statistics_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = statistics_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = statistics_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = statistics_glVertexAttribPointer;

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = statistics_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = statistics_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = statistics_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = statistics_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = statistics_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = statistics_glUniformMatrix4x3fv;

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = statistics_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = statistics_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = statistics_glBindFragDataLocation;
  tbl.glClampColor = statistics_glClampColor;
  tbl.glClearBufferfi = statistics_glClearBufferfi;
  tbl.glClearBufferfv = statistics_glClearBufferfv;
  tbl.glClearBufferiv = statistics_glClearBufferiv;
  tbl.glClearBufferuiv = statistics_glClearBufferuiv;
  tbl.glColorMaski = statistics_glColorMaski;
  tbl.glDisablei = statistics_glDisablei;
  tbl.glEnablei = statistics_glEnablei;
  tbl.glEndConditionalRender = statistics_glEndConditionalRender;
  tbl.glEndTransformFeedback = statistics_glEndTransformFeedback;
  tbl.glGetBooleani_v = statistics_glGetBooleani_v;
  tbl.glGetFragDataLocation = statistics_glGetFragDataLocation;
  tbl.glGetStringi = statistics_glGetStringi;
  tbl.glGetTexParameterIiv = statistics_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = statistics_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = statistics_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = statistics_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = statistics_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = statistics_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = statistics_glIsEnabledi;
  tbl.glTexParameterIiv = statistics_glTexParameterIiv;
  tbl.glTexParameterIuiv = statistics_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = statistics_glTransformFeedbackVaryings;
  tbl.glUniform1ui = statistics_glUniform1ui;
  tbl.glUniform1uiv = statistics_glUniform1uiv;
  tbl.glUniform2ui = statistics_glUniform2ui;
  tbl.glUniform2uiv = statistics_glUniform2uiv;
  tbl.glUniform3ui = statistics_glUniform3ui;
  tbl.glUniform3uiv = statistics_glUniform3uiv;
  tbl.glUniform4ui = statistics_glUniform4ui;
  tbl.glUniform4uiv = statistics_glUniform4uiv;
  tbl.glVertexAttribI1i = statistics_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = statistics_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = statistics_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = statistics_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = statistics_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = statistics_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = statistics_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = statistics_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = statistics_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = statistics_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = statistics_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = statistics_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = statistics_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = statistics_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = statistics_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = statistics_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = statistics_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = statistics_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = statistics_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = statistics_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = statistics_glVertexAttribIPointer;

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = statistics_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = statistics_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = statistics_glPrimitiveRestartIndex;
  tbl.glTexBuffer = statistics_glTexBuffer;

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = statistics_glFramebufferTexture;
  tbl.glGetBufferParameteri64v = statistics_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = statistics_glGetInteger64i_v;

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = statistics_glVertexAttribDivisor;

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = statistics_glBlendEquationSeparatei;
  tbl.glBlendEquationi = statistics_glBlendEquationi;
  tbl.glBlendFuncSeparatei = statistics_glBlendFuncSeparatei;
  tbl.glBlendFunci = statistics_glBlendFunci;

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = statistics_glTbufferMask3DFX;

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = statistics_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = statistics_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = statistics_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = statistics_glGetDebugMessageLogAMD;

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = statistics_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = statistics_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = statistics_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = statistics_glBlendFuncSeparateIndexedAMD;

  // GL_AMD_interleaved_elements

  tbl.glVertexAttribParameteriAMD = statistics_glVertexAttribParameteriAMD;

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = statistics_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = statistics_glMultiDrawElementsIndirectAMD;

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = statistics_glDeleteNamesAMD;
  tbl.glGenNamesAMD = statistics_glGenNamesAMD;
  tbl.glIsNameAMD = statistics_glIsNameAMD;

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = statistics_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = statistics_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = statistics_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = statistics_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = statistics_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = statistics_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = statistics_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = statistics_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = statistics_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = statistics_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = statistics_glSelectPerfMonitorCountersAMD;

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = statistics_glSetMultisamplefvAMD;

  // GL_AMD_sparse_texture

  tbl.glTexStorageSparseAMD = statistics_glTexStorageSparseAMD;
  tbl.glTextureStorageSparseAMD = statistics_glTextureStorageSparseAMD;

  // GL_AMD_stencil_operation_extended

  tbl.glStencilOpValueAMD = statistics_glStencilOpValueAMD;

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = statistics_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = statistics_glTessellationModeAMD;

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = statistics_glBlitFramebufferANGLE;

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = statistics_glRenderbufferStorageMultisampleANGLE;

  // GL_ANGLE_instanced_arrays

  tbl.glDrawArraysInstancedANGLE = statistics_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = statistics_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = statistics_glVertexAttribDivisorANGLE;

  // GL_ANGLE_timer_query

  tbl.glBeginQueryANGLE = statistics_glBeginQueryANGLE;
  tbl.glDeleteQueriesANGLE = statistics_glDeleteQueriesANGLE;
  tbl.glEndQueryANGLE = statistics_glEndQueryANGLE;
  tbl.glGenQueriesANGLE = statistics_glGenQueriesANGLE;
  tbl.glGetQueryObjecti64vANGLE = statistics_glGetQueryObjecti64vANGLE;
  tbl.glGetQueryObjectivANGLE = statistics_glGetQueryObjectivANGLE;
  tbl.glGetQueryObjectui64vANGLE = statistics_glGetQueryObjectui64vANGLE;
  tbl.glGetQueryObjectuivANGLE = statistics_glGetQueryObjectuivANGLE;
  tbl.glGetQueryivANGLE = statistics_glGetQueryivANGLE;
  tbl.glIsQueryANGLE = statistics_glIsQueryANGLE;
  tbl.glQueryCounterANGLE = statistics_glQueryCounterANGLE;

  // GL_ANGLE_translated_shader_source

  tbl.glGetTranslatedShaderSourceANGLE = statistics_glGetTranslatedShaderSourceANGLE;

  // GL_APPLE_copy_texture_levels

  tbl.glCopyTextureLevelsAPPLE = statistics_glCopyTextureLevelsAPPLE;

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = statistics_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = statistics_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = statistics_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = statistics_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = statistics_glMultiDrawRangeElementArrayAPPLE;

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = statistics_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = statistics_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = statistics_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = statistics_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = statistics_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = statistics_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = statistics_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = statistics_glTestObjectAPPLE;

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = statistics_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = statistics_glFlushMappedBufferRangeAPPLE;

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = statistics_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = statistics_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = statistics_glSwapAPPLE;

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = statistics_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = statistics_glResolveMultisampleFramebufferAPPLE;

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = statistics_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = statistics_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = statistics_glObjectUnpurgeableAPPLE;

  // GL_APPLE_sync

  tbl.glClientWaitSyncAPPLE = statistics_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = statistics_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = statistics_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = statistics_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = statistics_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = statistics_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = statistics_glWaitSyncAPPLE;

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = statistics_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = statistics_glTextureRangeAPPLE;

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = statistics_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = statistics_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = statistics_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = statistics_glIsVertexArrayAPPLE;

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = statistics_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = statistics_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = statistics_glVertexArrayRangeAPPLE;

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = statistics_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = statistics_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = statistics_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = statistics_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = statistics_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = statistics_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = statistics_glMapVertexAttrib2fAPPLE;

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = statistics_glClearDepthf;
  tbl.glDepthRangef = statistics_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = statistics_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = statistics_glReleaseShaderCompiler;
  tbl.glShaderBinary = statistics_glShaderBinary;

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = statistics_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = statistics_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = statistics_glDrawElementsInstancedBaseVertexBaseInstance;

  // GL_ARB_bindless_texture

  tbl.glGetImageHandleARB = statistics_glGetImageHandleARB;
  tbl.glGetTextureHandleARB = statistics_glGetTextureHandleARB;
  tbl.glGetTextureSamplerHandleARB = statistics_glGetTextureSamplerHandleARB;
  tbl.glGetVertexAttribLui64vARB = statistics_glGetVertexAttribLui64vARB;
  tbl.glIsImageHandleResidentARB = statistics_glIsImageHandleResidentARB;
  tbl.glIsTextureHandleResidentARB = statistics_glIsTextureHandleResidentARB;
  tbl.glMakeImageHandleNonResidentARB = statistics_glMakeImageHandleNonResidentARB;
  tbl.glMakeImageHandleResidentARB = statistics_glMakeImageHandleResidentARB;
  tbl.glMakeTextureHandleNonResidentARB = statistics_glMakeTextureHandleNonResidentARB;
  tbl.glMakeTextureHandleResidentARB = statistics_glMakeTextureHandleResidentARB;
  tbl.glProgramUniformHandleui64ARB = statistics_glProgramUniformHandleui64ARB;
  tbl.glProgramUniformHandleui64vARB = statistics_glProgramUniformHandleui64vARB;
  tbl.glUniformHandleui64ARB = statistics_glUniformHandleui64ARB;
  tbl.glUniformHandleui64vARB = statistics_glUniformHandleui64vARB;
  tbl.glVertexAttribL1ui64ARB = statistics_glVertexAttribL1ui64ARB;
  tbl.glVertexAttribL1ui64vARB = statistics_glVertexAttribL1ui64vARB;

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = statistics_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = statistics_glGetFragDataIndex;

  // GL_ARB_buffer_storage

  tbl.glBufferStorage = statistics_glBufferStorage;
  tbl.glNamedBufferStorageEXT = statistics_glNamedBufferStorageEXT;

  // GL_ARB_cl_event

  tbl.glCreateSyncFromCLeventARB = statistics_glCreateSyncFromCLeventARB;

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = statistics_glClearBufferData;
  tbl.glClearBufferSubData = statistics_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = statistics_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = statistics_glClearNamedBufferSubDataEXT;

  // GL_ARB_clear_texture

  tbl.glClearTexImage = statistics_glClearTexImage;
  tbl.glClearTexSubImage = statistics_glClearTexSubImage;

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = statistics_glClampColorARB;

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = statistics_glDispatchCompute;
  tbl.glDispatchComputeIndirect = statistics_glDispatchComputeIndirect;

  // GL_ARB_compute_variable_group_size

  tbl.glDispatchComputeGroupSizeARB = statistics_glDispatchComputeGroupSizeARB;

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = statistics_glCopyBufferSubData;

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = statistics_glCopyImageSubData;

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = statistics_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = statistics_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = statistics_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = statistics_glGetDebugMessageLogARB;

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = statistics_glDrawBuffersARB;

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = statistics_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = statistics_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = statistics_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = statistics_glBlendFunciARB;

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = statistics_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = statistics_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = statistics_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = statistics_glMultiDrawElementsBaseVertex;

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = statistics_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = statistics_glDrawElementsIndirect;

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = statistics_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = statistics_glDrawElementsInstancedARB;

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = statistics_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = statistics_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = statistics_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = statistics_glNamedFramebufferParameteriEXT;

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = statistics_glBindFramebuffer;
  tbl.glBindRenderbuffer = statistics_glBindRenderbuffer;
  tbl.glBlitFramebuffer = statistics_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = statistics_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = statistics_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = statistics_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = statistics_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = statistics_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = statistics_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = statistics_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = statistics_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = statistics_glGenFramebuffers;
  tbl.glGenRenderbuffers = statistics_glGenRenderbuffers;
  tbl.glGenerateMipmap = statistics_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = statistics_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = statistics_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = statistics_glIsFramebuffer;
  tbl.glIsRenderbuffer = statistics_glIsRenderbuffer;
  tbl.glRenderbufferStorage = statistics_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = statistics_glRenderbufferStorageMultisample;

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = statistics_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = statistics_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = statistics_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = statistics_glProgramParameteriARB;

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = statistics_glGetProgramBinary;
  tbl.glProgramBinary = statistics_glProgramBinary;
  tbl.glProgramParameteri = statistics_glProgramParameteri;

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = statistics_glGetUniformdv;
  tbl.glUniform1d = statistics_glUniform1d;
  tbl.glUniform1dv = statistics_glUniform1dv;
  tbl.glUniform2d = statistics_glUniform2d;
  tbl.glUniform2dv = statistics_glUniform2dv;
  tbl.glUniform3d = statistics_glUniform3d;
  tbl.glUniform3dv = statistics_glUniform3dv;
  tbl.glUniform4d = statistics_glUniform4d;
  tbl.glUniform4dv = statistics_glUniform4dv;
  tbl.glUniformMatrix2dv = statistics_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = statistics_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = statistics_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = statistics_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = statistics_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = statistics_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = statistics_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = statistics_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = statistics_glUniformMatrix4x3dv;

  // GL_ARB_imaging

  tbl.glColorSubTable = statistics_glColorSubTable;
  tbl.glColorTable = statistics_glColorTable;
  tbl.glColorTableParameterfv = statistics_glColorTableParameterfv;
  tbl.glColorTableParameteriv = statistics_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = statistics_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = statistics_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = statistics_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = statistics_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = statistics_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = statistics_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = statistics_glCopyColorSubTable;
  tbl.glCopyColorTable = statistics_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = statistics_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = statistics_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = statistics_glGetColorTable;
  tbl.glGetColorTableParameterfv = statistics_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = statistics_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = statistics_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = statistics_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = statistics_glGetConvolutionParameteriv;
  tbl.glGetHistogram = statistics_glGetHistogram;
  tbl.glGetHistogramParameterfv = statistics_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = statistics_glGetHistogramParameteriv;
  tbl.glGetMinmax = statistics_glGetMinmax;
  tbl.glGetMinmaxParameterfv = statistics_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = statistics_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = statistics_glGetSeparableFilter;
  tbl.glHistogram = statistics_glHistogram;
  tbl.glMinmax = statistics_glMinmax;
  tbl.glResetHistogram = statistics_glResetHistogram;
  tbl.glResetMinmax = statistics_glResetMinmax;
  tbl.glSeparableFilter2D = statistics_glSeparableFilter2D;

  // GL_ARB_indirect_parameters

  tbl.glMultiDrawArraysIndirectCountARB = statistics_glMultiDrawArraysIndirectCountARB;
  tbl.glMultiDrawElementsIndirectCountARB = statistics_glMultiDrawElementsIndirectCountARB;

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = statistics_glVertexAttribDivisorARB;

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = statistics_glGetInternalformativ;

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = statistics_glGetInternalformati64v;

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = statistics_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = statistics_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = statistics_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = statistics_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = statistics_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = statistics_glInvalidateTexSubImage;

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = statistics_glFlushMappedBufferRange;
  tbl.glMapBufferRange = statistics_glMapBufferRange;

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = statistics_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = statistics_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = statistics_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = statistics_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = statistics_glMatrixIndexusvARB;

  // GL_ARB_multi_bind

  tbl.glBindBuffersBase = statistics_glBindBuffersBase;
  tbl.glBindBuffersRange = statistics_glBindBuffersRange;
  tbl.glBindImageTextures = statistics_glBindImageTextures;
  tbl.glBindSamplers = statistics_glBindSamplers;
  tbl.glBindTextures = statistics_glBindTextures;
  tbl.glBindVertexBuffers = statistics_glBindVertexBuffers;

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = statistics_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = statistics_glMultiDrawElementsIndirect;

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = statistics_glSampleCoverageARB;

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = statistics_glActiveTextureARB;
  tbl.glClientActiveTextureARB = statistics_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = statistics_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = statistics_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = statistics_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = statistics_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = statistics_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = statistics_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = statistics_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = statistics_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = statistics_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = statistics_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = statistics_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = statistics_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = statistics_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = statistics_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = statistics_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = statistics_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = statistics_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = statistics_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = statistics_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = statistics_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = statistics_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = statistics_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = statistics_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = statistics_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = statistics_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = statistics_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = statistics_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = statistics_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = statistics_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = statistics_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = statistics_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = statistics_glMultiTexCoord4svARB;

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = statistics_glBeginQueryARB;
  tbl.glDeleteQueriesARB = statistics_glDeleteQueriesARB;
  tbl.glEndQueryARB = statistics_glEndQueryARB;
  tbl.glGenQueriesARB = statistics_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = statistics_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = statistics_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = statistics_glGetQueryivARB;
  tbl.glIsQueryARB = statistics_glIsQueryARB;

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = statistics_glPointParameterfARB;
  tbl.glPointParameterfvARB = statistics_glPointParameterfvARB;

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = statistics_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = statistics_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = statistics_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = statistics_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = statistics_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = statistics_glGetProgramResourceiv;

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = statistics_glProvokingVertex;

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = statistics_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = statistics_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = statistics_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = statistics_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = statistics_glGetnHistogramARB;
  tbl.glGetnMapdvARB = statistics_glGetnMapdvARB;
  tbl.glGetnMapfvARB = statistics_glGetnMapfvARB;
  tbl.glGetnMapivARB = statistics_glGetnMapivARB;
  tbl.glGetnMinmaxARB = statistics_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = statistics_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = statistics_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = statistics_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = statistics_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = statistics_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = statistics_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = statistics_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = statistics_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = statistics_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = statistics_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = statistics_glReadnPixelsARB;

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = statistics_glMinSampleShading;
  tbl.glMinSampleShadingARB = statistics_glMinSampleShadingARB;

  // GL_ARB_sampler_objects

  tbl.glBindSampler = statistics_glBindSampler;
  tbl.glDeleteSamplers = statistics_glDeleteSamplers;
  tbl.glGenSamplers = statistics_glGenSamplers;
  tbl.glGetSamplerParameterIiv = statistics_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = statistics_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = statistics_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = statistics_glGetSamplerParameteriv;
  tbl.glIsSampler = statistics_glIsSampler;
  tbl.glSamplerParameterIiv = statistics_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = statistics_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = statistics_glSamplerParameterf;
  tbl.glSamplerParameterfv = statistics_glSamplerParameterfv;
  tbl.glSamplerParameteri = statistics_glSamplerParameteri;
  tbl.glSamplerParameteriv = statistics_glSamplerParameteriv;

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = statistics_glActiveShaderProgram;
  tbl.glBindProgramPipeline = statistics_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = statistics_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = statistics_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = statistics_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = statistics_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = statistics_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = statistics_glIsProgramPipeline;
  tbl.glProgramUniform1d = statistics_glProgramUniform1d;
  tbl.glProgramUniform1dv = statistics_glProgramUniform1dv;
  tbl.glProgramUniform1f = statistics_glProgramUniform1f;
  tbl.glProgramUniform1fv = statistics_glProgramUniform1fv;
  tbl.glProgramUniform1i = statistics_glProgramUniform1i;
  tbl.glProgramUniform1iv = statistics_glProgramUniform1iv;
  tbl.glProgramUniform1ui = statistics_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = statistics_glProgramUniform1uiv;
  tbl.glProgramUniform2d = statistics_glProgramUniform2d;
  tbl.glProgramUniform2dv = statistics_glProgramUniform2dv;
  tbl.glProgramUniform2f = statistics_glProgramUniform2f;
  tbl.glProgramUniform2fv = statistics_glProgramUniform2fv;
  tbl.glProgramUniform2i = statistics_glProgramUniform2i;
  tbl.glProgramUniform2iv = statistics_glProgramUniform2iv;
  tbl.glProgramUniform2ui = statistics_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = statistics_glProgramUniform2uiv;
  tbl.glProgramUniform3d = statistics_glProgramUniform3d;
  tbl.glProgramUniform3dv = statistics_glProgramUniform3dv;
  tbl.glProgramUniform3f = statistics_glProgramUniform3f;
  tbl.glProgramUniform3fv = statistics_glProgramUniform3fv;
  tbl.glProgramUniform3i = statistics_glProgramUniform3i;
  tbl.glProgramUniform3iv = statistics_glProgramUniform3iv;
  tbl.glProgramUniform3ui = statistics_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = statistics_glProgramUniform3uiv;
  tbl.glProgramUniform4d = statistics_glProgramUniform4d;
  tbl.glProgramUniform4dv = statistics_glProgramUniform4dv;
  tbl.glProgramUniform4f = statistics_glProgramUniform4f;
  tbl.glProgramUniform4fv = statistics_glProgramUniform4fv;
  tbl.glProgramUniform4i = statistics_glProgramUniform4i;
  tbl.glProgramUniform4iv = statistics_glProgramUniform4iv;
  tbl.glProgramUniform4ui = statistics_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = statistics_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = statistics_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = statistics_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = statistics_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = statistics_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = statistics_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = statistics_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = statistics_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = statistics_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = statistics_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = statistics_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = statistics_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = statistics_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = statistics_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = statistics_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = statistics_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = statistics_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = statistics_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = statistics_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = statistics_glUseProgramStages;
  tbl.glValidateProgramPipeline = statistics_glValidateProgramPipeline;

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = statistics_glGetActiveAtomicCounterBufferiv;

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = statistics_glBindImageTexture;
  tbl.glMemoryBarrier = statistics_glMemoryBarrier;

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = statistics_glAttachObjectARB;
  tbl.glCompileShaderARB = statistics_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = statistics_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = statistics_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = statistics_glDeleteObjectARB;
  tbl.glDetachObjectARB = statistics_glDetachObjectARB;
  tbl.glGetActiveUniformARB = statistics_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = statistics_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = statistics_glGetHandleARB;
  tbl.glGetInfoLogARB = statistics_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = statistics_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = statistics_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = statistics_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = statistics_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = statistics_glGetUniformfvARB;
  tbl.glGetUniformivARB = statistics_glGetUniformivARB;
  tbl.glLinkProgramARB = statistics_glLinkProgramARB;
  tbl.glShaderSourceARB = statistics_glShaderSourceARB;
  tbl.glUniform1fARB = statistics_glUniform1fARB;
  tbl.glUniform1fvARB = statistics_glUniform1fvARB;
  tbl.glUniform1iARB = statistics_glUniform1iARB;
  tbl.glUniform1ivARB = statistics_glUniform1ivARB;
  tbl.glUniform2fARB = statistics_glUniform2fARB;
  tbl.glUniform2fvARB = statistics_glUniform2fvARB;
  tbl.glUniform2iARB = statistics_glUniform2iARB;
  tbl.glUniform2ivARB = statistics_glUniform2ivARB;
  tbl.glUniform3fARB = statistics_glUniform3fARB;
  tbl.glUniform3fvARB = statistics_glUniform3fvARB;
  tbl.glUniform3iARB = statistics_glUniform3iARB;
  tbl.glUniform3ivARB = statistics_glUniform3ivARB;
  tbl.glUniform4fARB = statistics_glUniform4fARB;
  tbl.glUniform4fvARB = statistics_glUniform4fvARB;
  tbl.glUniform4iARB = statistics_glUniform4iARB;
  tbl.glUniform4ivARB = statistics_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = statistics_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = statistics_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = statistics_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = statistics_glUseProgramObjectARB;
  tbl.glValidateProgramARB = statistics_glValidateProgramARB;

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = statistics_glShaderStorageBlockBinding;

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = statistics_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = statistics_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = statistics_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = statistics_glGetProgramStageiv;
  tbl.glGetProgramSubroutineParameteruivNV = statistics_glGetProgramSubroutineParameteruivNV;
  tbl.glGetSubroutineIndex = statistics_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = statistics_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = statistics_glGetUniformSubroutineuiv;
  tbl.glProgramSubroutineParametersuivNV = statistics_glProgramSubroutineParametersuivNV;
  tbl.glUniformSubroutinesuiv = statistics_glUniformSubroutinesuiv;

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = statistics_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = statistics_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = statistics_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = statistics_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = statistics_glIsNamedStringARB;
  tbl.glNamedStringARB = statistics_glNamedStringARB;

  // GL_ARB_sparse_texture

  tbl.glTexPageCommitmentARB = statistics_glTexPageCommitmentARB;
  tbl.glTexturePageCommitmentEXT = statistics_glTexturePageCommitmentEXT;

  // GL_ARB_sync

  tbl.glClientWaitSync = statistics_glClientWaitSync;
  tbl.glDeleteSync = statistics_glDeleteSync;
  tbl.glFenceSync = statistics_glFenceSync;
  tbl.glGetInteger64v = statistics_glGetInteger64v;
  tbl.glGetSynciv = statistics_glGetSynciv;
  tbl.glIsSync = statistics_glIsSync;
  tbl.glWaitSync = statistics_glWaitSync;

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = statistics_glPatchParameterfv;
  tbl.glPatchParameteri = statistics_glPatchParameteri;

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = statistics_glTexBufferARB;

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = statistics_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = statistics_glTextureBufferRangeEXT;

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = statistics_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = statistics_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = statistics_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = statistics_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = statistics_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = statistics_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = statistics_glGetCompressedTexImageARB;

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = statistics_glGetMultisamplefv;
  tbl.glSampleMaski = statistics_glSampleMaski;
  tbl.glTexImage2DMultisample = statistics_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = statistics_glTexImage3DMultisample;

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = statistics_glTexStorage1D;
  tbl.glTexStorage2D = statistics_glTexStorage2D;
  tbl.glTexStorage3D = statistics_glTexStorage3D;
  tbl.glTextureStorage1DEXT = statistics_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = statistics_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = statistics_glTextureStorage3DEXT;

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = statistics_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = statistics_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = statistics_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = statistics_glTextureStorage3DMultisampleEXT;

  // GL_ARB_texture_view

  tbl.glTextureView = statistics_glTextureView;

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = statistics_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = statistics_glGetQueryObjectui64v;
  tbl.glQueryCounter = statistics_glQueryCounter;

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = statistics_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = statistics_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = statistics_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = statistics_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = statistics_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = statistics_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = statistics_glResumeTransformFeedback;

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = statistics_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = statistics_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = statistics_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = statistics_glGetQueryIndexediv;

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = statistics_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = statistics_glDrawTransformFeedbackStreamInstanced;

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = statistics_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = statistics_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = statistics_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = statistics_glMultTransposeMatrixfARB;

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = statistics_glBindBufferBase;
  tbl.glBindBufferRange = statistics_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = statistics_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = statistics_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = statistics_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = statistics_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = statistics_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = statistics_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = statistics_glGetUniformIndices;
  tbl.glUniformBlockBinding = statistics_glUniformBlockBinding;

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = statistics_glBindVertexArray;
  tbl.glDeleteVertexArrays = statistics_glDeleteVertexArrays;
  tbl.glGenVertexArrays = statistics_glGenVertexArrays;
  tbl.glIsVertexArray = statistics_glIsVertexArray;

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = statistics_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = statistics_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = statistics_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = statistics_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = statistics_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = statistics_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = statistics_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = statistics_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = statistics_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = statistics_glVertexAttribLPointer;

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = statistics_glBindVertexBuffer;
  tbl.glVertexArrayBindVertexBufferEXT = statistics_glVertexArrayBindVertexBufferEXT;
  tbl.glVertexArrayVertexAttribBindingEXT = statistics_glVertexArrayVertexAttribBindingEXT;
  tbl.glVertexArrayVertexAttribFormatEXT = statistics_glVertexArrayVertexAttribFormatEXT;
  tbl.glVertexArrayVertexAttribIFormatEXT = statistics_glVertexArrayVertexAttribIFormatEXT;
  tbl.glVertexArrayVertexAttribLFormatEXT = statistics_glVertexArrayVertexAttribLFormatEXT;
  tbl.glVertexArrayVertexBindingDivisorEXT = statistics_glVertexArrayVertexBindingDivisorEXT;
  tbl.glVertexAttribBinding = statistics_glVertexAttribBinding;
  tbl.glVertexAttribFormat = statistics_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = statistics_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = statistics_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = statistics_glVertexBindingDivisor;

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = statistics_glVertexBlendARB;
  tbl.glWeightPointerARB = statistics_glWeightPointerARB;
  tbl.glWeightbvARB = statistics_glWeightbvARB;
  tbl.glWeightdvARB = statistics_glWeightdvARB;
  tbl.glWeightfvARB = statistics_glWeightfvARB;
  tbl.glWeightivARB = statistics_glWeightivARB;
  tbl.glWeightsvARB = statistics_glWeightsvARB;
  tbl.glWeightubvARB = statistics_glWeightubvARB;
  tbl.glWeightuivARB = statistics_glWeightuivARB;
  tbl.glWeightusvARB = statistics_glWeightusvARB;

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = statistics_glBindBufferARB;
  tbl.glBufferDataARB = statistics_glBufferDataARB;
  tbl.glBufferSubDataARB = statistics_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = statistics_glDeleteBuffersARB;
  tbl.glGenBuffersARB = statistics_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = statistics_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = statistics_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = statistics_glGetBufferSubDataARB;
  tbl.glIsBufferARB = statistics_glIsBufferARB;
  tbl.glMapBufferARB = statistics_glMapBufferARB;
  tbl.glUnmapBufferARB = statistics_glUnmapBufferARB;

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = statistics_glBindProgramARB;
  tbl.glDeleteProgramsARB = statistics_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = statistics_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = statistics_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = statistics_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = statistics_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = statistics_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = statistics_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = statistics_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = statistics_glGetProgramStringARB;
  tbl.glGetProgramivARB = statistics_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = statistics_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = statistics_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = statistics_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = statistics_glGetVertexAttribivARB;
  tbl.glIsProgramARB = statistics_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = statistics_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = statistics_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = statistics_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = statistics_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = statistics_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = statistics_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = statistics_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = statistics_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = statistics_glProgramStringARB;
  tbl.glVertexAttrib1dARB = statistics_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = statistics_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = statistics_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = statistics_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = statistics_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = statistics_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = statistics_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = statistics_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = statistics_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = statistics_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = statistics_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = statistics_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = statistics_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = statistics_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = statistics_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = statistics_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = statistics_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = statistics_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = statistics_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = statistics_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = statistics_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = statistics_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = statistics_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = statistics_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = statistics_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = statistics_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = statistics_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = statistics_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = statistics_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = statistics_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = statistics_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = statistics_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = statistics_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = statistics_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = statistics_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = statistics_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = statistics_glVertexAttribPointerARB;

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = statistics_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = statistics_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = statistics_glGetAttribLocationARB;

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = statistics_glColorP3ui;
  tbl.glColorP3uiv = statistics_glColorP3uiv;
  tbl.glColorP4ui = statistics_glColorP4ui;
  tbl.glColorP4uiv = statistics_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = statistics_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = statistics_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = statistics_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = statistics_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = statistics_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = statistics_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = statistics_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = statistics_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = statistics_glNormalP3ui;
  tbl.glNormalP3uiv = statistics_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = statistics_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = statistics_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = statistics_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = statistics_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = statistics_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = statistics_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = statistics_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = statistics_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = statistics_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = statistics_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = statistics_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = statistics_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = statistics_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = statistics_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = statistics_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = statistics_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = statistics_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = statistics_glVertexAttribP4uiv;
  tbl.glVertexP2ui = statistics_glVertexP2ui;
  tbl.glVertexP2uiv = statistics_glVertexP2uiv;
  tbl.glVertexP3ui = statistics_glVertexP3ui;
  tbl.glVertexP3uiv = statistics_glVertexP3uiv;
  tbl.glVertexP4ui = statistics_glVertexP4ui;
  tbl.glVertexP4uiv = statistics_glVertexP4uiv;

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = statistics_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = statistics_glDepthRangeIndexed;
  tbl.glGetDoublei_v = statistics_glGetDoublei_v;
  tbl.glGetFloati_v = statistics_glGetFloati_v;
  tbl.glScissorArrayv = statistics_glScissorArrayv;
  tbl.glScissorIndexed = statistics_glScissorIndexed;
  tbl.glScissorIndexedv = statistics_glScissorIndexedv;
  tbl.glViewportArrayv = statistics_glViewportArrayv;
  tbl.glViewportIndexedf = statistics_glViewportIndexedf;
  tbl.glViewportIndexedfv = statistics_glViewportIndexedfv;

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = statistics_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = statistics_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = statistics_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = statistics_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = statistics_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = statistics_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = statistics_glWindowPos2sARB;
  tbl.glWindowPos2svARB = statistics_glWindowPos2svARB;
  tbl.glWindowPos3dARB = statistics_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = statistics_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = statistics_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = statistics_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = statistics_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = statistics_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = statistics_glWindowPos3sARB;
  tbl.glWindowPos3svARB = statistics_glWindowPos3svARB;

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = statistics_glDrawBuffersATI;

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = statistics_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = statistics_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = statistics_glElementPointerATI;

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = statistics_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = statistics_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = statistics_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = statistics_glTexBumpParameterivATI;

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = statistics_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = statistics_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = statistics_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = statistics_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = statistics_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = statistics_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = statistics_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = statistics_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = statistics_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = statistics_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = statistics_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = statistics_glPassTexCoordATI;
  tbl.glSampleMapATI = statistics_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = statistics_glSetFragmentShaderConstantATI;

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = statistics_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = statistics_glUnmapObjectBufferATI;

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = statistics_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = statistics_glPNTrianglesiATI;

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = statistics_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = statistics_glStencilOpSeparateATI;

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = statistics_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = statistics_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = statistics_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = statistics_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = statistics_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = statistics_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = statistics_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = statistics_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = statistics_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = statistics_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = statistics_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = statistics_glVariantArrayObjectATI;

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = statistics_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = statistics_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = statistics_glVertexAttribArrayObjectATI;

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = statistics_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = statistics_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = statistics_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = statistics_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = statistics_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = statistics_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = statistics_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = statistics_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = statistics_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = statistics_glNormalStream3sATI;
  tbl.glNormalStream3svATI = statistics_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = statistics_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = statistics_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = statistics_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = statistics_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = statistics_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = statistics_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = statistics_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = statistics_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = statistics_glVertexStream1sATI;
  tbl.glVertexStream1svATI = statistics_glVertexStream1svATI;
  tbl.glVertexStream2dATI = statistics_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = statistics_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = statistics_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = statistics_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = statistics_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = statistics_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = statistics_glVertexStream2sATI;
  tbl.glVertexStream2svATI = statistics_glVertexStream2svATI;
  tbl.glVertexStream3dATI = statistics_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = statistics_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = statistics_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = statistics_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = statistics_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = statistics_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = statistics_glVertexStream3sATI;
  tbl.glVertexStream3svATI = statistics_glVertexStream3svATI;
  tbl.glVertexStream4dATI = statistics_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = statistics_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = statistics_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = statistics_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = statistics_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = statistics_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = statistics_glVertexStream4sATI;
  tbl.glVertexStream4svATI = statistics_glVertexStream4svATI;

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = statistics_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = statistics_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = statistics_glUniformBufferEXT;

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = statistics_glBlendColorEXT;

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = statistics_glBlendEquationSeparateEXT;

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = statistics_glBlendFuncSeparateEXT;

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = statistics_glBlendEquationEXT;

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = statistics_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = statistics_glCopyColorSubTableEXT;

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = statistics_glLockArraysEXT;
  tbl.glUnlockArraysEXT = statistics_glUnlockArraysEXT;

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = statistics_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = statistics_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = statistics_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = statistics_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = statistics_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = statistics_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = statistics_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = statistics_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = statistics_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = statistics_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = statistics_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = statistics_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = statistics_glSeparableFilter2DEXT;

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = statistics_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = statistics_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = statistics_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = statistics_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = statistics_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = statistics_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = statistics_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = statistics_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = statistics_glBinormal3sEXT;
  tbl.glBinormal3svEXT = statistics_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = statistics_glBinormalPointerEXT;
  tbl.glTangent3bEXT = statistics_glTangent3bEXT;
  tbl.glTangent3bvEXT = statistics_glTangent3bvEXT;
  tbl.glTangent3dEXT = statistics_glTangent3dEXT;
  tbl.glTangent3dvEXT = statistics_glTangent3dvEXT;
  tbl.glTangent3fEXT = statistics_glTangent3fEXT;
  tbl.glTangent3fvEXT = statistics_glTangent3fvEXT;
  tbl.glTangent3iEXT = statistics_glTangent3iEXT;
  tbl.glTangent3ivEXT = statistics_glTangent3ivEXT;
  tbl.glTangent3sEXT = statistics_glTangent3sEXT;
  tbl.glTangent3svEXT = statistics_glTangent3svEXT;
  tbl.glTangentPointerEXT = statistics_glTangentPointerEXT;

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = statistics_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = statistics_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = statistics_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = statistics_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = statistics_glCopyTexSubImage3DEXT;

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = statistics_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = statistics_glCullParameterfvEXT;

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = statistics_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = statistics_glLabelObjectEXT;

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = statistics_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = statistics_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = statistics_glPushGroupMarkerEXT;

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = statistics_glDepthBoundsEXT;

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = statistics_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = statistics_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = statistics_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = statistics_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = statistics_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = statistics_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = statistics_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = statistics_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = statistics_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = statistics_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = statistics_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = statistics_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = statistics_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = statistics_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = statistics_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = statistics_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = statistics_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = statistics_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = statistics_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = statistics_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = statistics_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = statistics_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = statistics_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = statistics_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = statistics_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = statistics_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = statistics_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = statistics_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = statistics_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = statistics_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = statistics_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = statistics_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = statistics_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = statistics_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = statistics_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = statistics_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = statistics_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = statistics_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = statistics_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = statistics_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = statistics_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = statistics_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = statistics_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = statistics_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = statistics_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = statistics_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = statistics_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = statistics_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = statistics_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = statistics_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = statistics_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = statistics_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = statistics_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = statistics_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = statistics_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = statistics_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = statistics_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = statistics_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = statistics_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = statistics_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = statistics_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = statistics_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = statistics_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = statistics_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = statistics_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = statistics_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = statistics_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = statistics_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = statistics_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = statistics_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = statistics_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = statistics_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = statistics_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = statistics_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = statistics_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = statistics_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = statistics_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = statistics_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = statistics_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = statistics_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = statistics_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = statistics_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = statistics_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = statistics_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = statistics_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = statistics_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = statistics_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = statistics_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = statistics_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = statistics_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = statistics_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = statistics_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = statistics_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = statistics_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = statistics_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = statistics_glMatrixPopEXT;
  tbl.glMatrixPushEXT = statistics_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = statistics_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = statistics_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = statistics_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = statistics_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = statistics_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = statistics_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = statistics_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = statistics_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = statistics_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = statistics_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = statistics_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = statistics_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = statistics_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = statistics_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = statistics_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = statistics_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = statistics_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = statistics_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = statistics_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = statistics_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = statistics_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = statistics_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = statistics_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = statistics_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = statistics_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = statistics_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = statistics_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = statistics_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = statistics_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = statistics_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = statistics_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = statistics_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = statistics_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = statistics_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = statistics_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = statistics_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = statistics_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = statistics_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = statistics_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = statistics_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = statistics_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = statistics_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = statistics_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = statistics_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = statistics_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = statistics_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = statistics_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = statistics_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = statistics_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = statistics_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = statistics_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = statistics_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = statistics_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = statistics_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = statistics_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = statistics_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = statistics_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = statistics_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = statistics_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = statistics_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = statistics_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = statistics_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = statistics_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = statistics_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = statistics_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = statistics_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = statistics_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = statistics_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = statistics_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = statistics_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = statistics_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = statistics_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = statistics_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = statistics_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = statistics_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = statistics_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = statistics_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = statistics_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = statistics_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = statistics_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = statistics_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = statistics_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = statistics_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = statistics_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = statistics_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = statistics_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = statistics_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = statistics_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = statistics_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = statistics_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = statistics_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = statistics_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = statistics_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = statistics_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = statistics_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = statistics_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = statistics_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = statistics_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = statistics_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = statistics_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = statistics_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = statistics_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = statistics_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = statistics_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = statistics_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = statistics_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = statistics_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = statistics_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = statistics_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = statistics_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = statistics_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = statistics_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = statistics_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = statistics_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = statistics_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = statistics_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = statistics_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = statistics_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = statistics_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = statistics_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = statistics_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = statistics_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = statistics_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = statistics_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = statistics_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = statistics_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = statistics_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = statistics_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = statistics_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = statistics_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = statistics_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = statistics_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = statistics_glVertexArrayVertexOffsetEXT;

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = statistics_glDiscardFramebufferEXT;

  // GL_EXT_disjoint_timer_query

  tbl.glGetQueryObjectivEXT = statistics_glGetQueryObjectivEXT;
  tbl.glQueryCounterEXT = statistics_glQueryCounterEXT;

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = statistics_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = statistics_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = statistics_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = statistics_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = statistics_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = statistics_glIsEnabledIndexedEXT;

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = statistics_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = statistics_glDrawElementsInstancedEXT;

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = statistics_glDrawRangeElementsEXT;

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = statistics_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = statistics_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = statistics_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = statistics_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = statistics_glFogCoordfvEXT;

  // GL_EXT_fragment_lighting

  tbl.glFragmentColorMaterialEXT = statistics_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = statistics_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = statistics_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = statistics_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = statistics_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = statistics_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = statistics_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = statistics_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = statistics_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = statistics_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = statistics_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = statistics_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = statistics_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = statistics_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = statistics_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = statistics_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = statistics_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = statistics_glLightEnviEXT;

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = statistics_glBlitFramebufferEXT;

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = statistics_glRenderbufferStorageMultisampleEXT;

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = statistics_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = statistics_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = statistics_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = statistics_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = statistics_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = statistics_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = statistics_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = statistics_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = statistics_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = statistics_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = statistics_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = statistics_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = statistics_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = statistics_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = statistics_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = statistics_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = statistics_glRenderbufferStorageEXT;

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = statistics_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = statistics_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = statistics_glProgramParameteriEXT;

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = statistics_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = statistics_glProgramLocalParameters4fvEXT;

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = statistics_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = statistics_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = statistics_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = statistics_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = statistics_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = statistics_glUniform1uiEXT;
  tbl.glUniform1uivEXT = statistics_glUniform1uivEXT;
  tbl.glUniform2uiEXT = statistics_glUniform2uiEXT;
  tbl.glUniform2uivEXT = statistics_glUniform2uivEXT;
  tbl.glUniform3uiEXT = statistics_glUniform3uiEXT;
  tbl.glUniform3uivEXT = statistics_glUniform3uivEXT;
  tbl.glUniform4uiEXT = statistics_glUniform4uiEXT;
  tbl.glUniform4uivEXT = statistics_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = statistics_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = statistics_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = statistics_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = statistics_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = statistics_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = statistics_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = statistics_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = statistics_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = statistics_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = statistics_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = statistics_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = statistics_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = statistics_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = statistics_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = statistics_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = statistics_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = statistics_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = statistics_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = statistics_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = statistics_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = statistics_glVertexAttribIPointerEXT;

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = statistics_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = statistics_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = statistics_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = statistics_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = statistics_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = statistics_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = statistics_glHistogramEXT;
  tbl.glMinmaxEXT = statistics_glMinmaxEXT;
  tbl.glResetHistogramEXT = statistics_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = statistics_glResetMinmaxEXT;

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = statistics_glIndexFuncEXT;

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = statistics_glIndexMaterialEXT;

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = statistics_glApplyTextureEXT;
  tbl.glTextureLightEXT = statistics_glTextureLightEXT;
  tbl.glTextureMaterialEXT = statistics_glTextureMaterialEXT;

  // GL_EXT_map_buffer_range

  tbl.glFlushMappedBufferRangeEXT = statistics_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = statistics_glMapBufferRangeEXT;

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = statistics_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = statistics_glMultiDrawElementsEXT;

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = statistics_glSampleMaskEXT;
  tbl.glSamplePatternEXT = statistics_glSamplePatternEXT;

  // GL_EXT_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleEXT = statistics_glFramebufferTexture2DMultisampleEXT;

  // GL_EXT_multiview_draw_buffers

  tbl.glDrawBuffersIndexedEXT = statistics_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = statistics_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = statistics_glReadBufferIndexedEXT;

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = statistics_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = statistics_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = statistics_glEndQueryEXT;
  tbl.glGenQueriesEXT = statistics_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = statistics_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = statistics_glGetQueryivEXT;
  tbl.glIsQueryEXT = statistics_glIsQueryEXT;

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = statistics_glColorTableEXT;
  tbl.glGetColorTableEXT = statistics_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = statistics_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = statistics_glGetColorTableParameterivEXT;

  // GL_EXT_pixel_transform

  tbl.glGetPixelTransformParameterfvEXT = statistics_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = statistics_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = statistics_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = statistics_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = statistics_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = statistics_glPixelTransformParameterivEXT;

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = statistics_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = statistics_glPointParameterfvEXT;

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = statistics_glPolygonOffsetEXT;

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = statistics_glProvokingVertexEXT;

  // GL_EXT_robustness

  tbl.glGetnUniformfvEXT = statistics_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = statistics_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = statistics_glReadnPixelsEXT;

  // GL_EXT_scene_marker

  tbl.glBeginSceneEXT = statistics_glBeginSceneEXT;
  tbl.glEndSceneEXT = statistics_glEndSceneEXT;

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = statistics_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = statistics_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = statistics_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = statistics_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = statistics_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = statistics_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = statistics_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = statistics_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = statistics_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = statistics_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = statistics_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = statistics_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = statistics_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = statistics_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = statistics_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = statistics_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = statistics_glSecondaryColorPointerEXT;

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = statistics_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = statistics_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = statistics_glUseShaderProgramEXT;

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = statistics_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = statistics_glMemoryBarrierEXT;

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = statistics_glStencilClearTagEXT;

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = statistics_glActiveStencilFaceEXT;

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = statistics_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = statistics_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = statistics_glTexSubImage3DEXT;

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = statistics_glTexImage3DEXT;

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = statistics_glFramebufferTextureLayerEXT;

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = statistics_glTexBufferEXT;

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = statistics_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = statistics_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = statistics_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = statistics_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = statistics_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = statistics_glTexParameterIuivEXT;

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = statistics_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = statistics_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = statistics_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = statistics_glGenTexturesEXT;
  tbl.glIsTextureEXT = statistics_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = statistics_glPrioritizeTexturesEXT;

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = statistics_glTextureNormalEXT;

  // GL_EXT_texture_storage

  tbl.glTexStorage1DEXT = statistics_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = statistics_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = statistics_glTexStorage3DEXT;

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = statistics_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = statistics_glGetQueryObjectui64vEXT;

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = statistics_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = statistics_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = statistics_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = statistics_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = statistics_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = statistics_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = statistics_glTransformFeedbackVaryingsEXT;

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = statistics_glArrayElementEXT;
  tbl.glColorPointerEXT = statistics_glColorPointerEXT;
  tbl.glDrawArraysEXT = statistics_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = statistics_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = statistics_glGetPointervEXT;
  tbl.glIndexPointerEXT = statistics_glIndexPointerEXT;
  tbl.glNormalPointerEXT = statistics_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = statistics_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = statistics_glVertexPointerEXT;

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = statistics_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = statistics_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = statistics_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = statistics_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = statistics_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = statistics_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = statistics_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = statistics_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = statistics_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = statistics_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = statistics_glVertexAttribLPointerEXT;

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = statistics_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = statistics_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = statistics_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = statistics_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = statistics_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = statistics_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = statistics_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = statistics_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = statistics_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = statistics_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = statistics_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = statistics_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = statistics_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = statistics_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = statistics_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = statistics_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = statistics_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = statistics_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = statistics_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = statistics_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = statistics_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = statistics_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = statistics_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = statistics_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = statistics_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = statistics_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = statistics_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = statistics_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = statistics_glShaderOp1EXT;
  tbl.glShaderOp2EXT = statistics_glShaderOp2EXT;
  tbl.glShaderOp3EXT = statistics_glShaderOp3EXT;
  tbl.glSwizzleEXT = statistics_glSwizzleEXT;
  tbl.glVariantPointerEXT = statistics_glVariantPointerEXT;
  tbl.glVariantbvEXT = statistics_glVariantbvEXT;
  tbl.glVariantdvEXT = statistics_glVariantdvEXT;
  tbl.glVariantfvEXT = statistics_glVariantfvEXT;
  tbl.glVariantivEXT = statistics_glVariantivEXT;
  tbl.glVariantsvEXT = statistics_glVariantsvEXT;
  tbl.glVariantubvEXT = statistics_glVariantubvEXT;
  tbl.glVariantuivEXT = statistics_glVariantuivEXT;
  tbl.glVariantusvEXT = statistics_glVariantusvEXT;
  tbl.glWriteMaskEXT = statistics_glWriteMaskEXT;

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = statistics_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = statistics_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = statistics_glVertexWeightfvEXT;

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = statistics_glImportSyncEXT;

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = statistics_glFrameTerminatorGREMEDY;

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = statistics_glStringMarkerGREMEDY;

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = statistics_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = statistics_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = statistics_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = statistics_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = statistics_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = statistics_glImageTransformParameterivHP;

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = statistics_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = statistics_glMultiModeDrawElementsIBM;

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = statistics_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = statistics_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = statistics_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = statistics_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = statistics_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = statistics_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = statistics_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = statistics_glVertexPointerListIBM;

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = statistics_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = statistics_glRenderbufferStorageMultisampleIMG;

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = statistics_glBlendFuncSeparateINGR;

  // GL_INTEL_map_texture

  tbl.glMapTexture2DINTEL = statistics_glMapTexture2DINTEL;
  tbl.glSyncTextureINTEL = statistics_glSyncTextureINTEL;
  tbl.glUnmapTexture2DINTEL = statistics_glUnmapTexture2DINTEL;

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = statistics_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = statistics_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = statistics_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = statistics_glVertexPointervINTEL;

  // GL_INTEL_texture_scissor

  tbl.glTexScissorFuncINTEL = statistics_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = statistics_glTexScissorINTEL;

  // GL_KHR_debug

  tbl.glDebugMessageCallback = statistics_glDebugMessageCallback;
  tbl.glDebugMessageControl = statistics_glDebugMessageControl;
  tbl.glDebugMessageInsert = statistics_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = statistics_glGetDebugMessageLog;
  tbl.glGetObjectLabel = statistics_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = statistics_glGetObjectPtrLabel;
  tbl.glObjectLabel = statistics_glObjectLabel;
  tbl.glObjectPtrLabel = statistics_glObjectPtrLabel;
  tbl.glPopDebugGroup = statistics_glPopDebugGroup;
  tbl.glPushDebugGroup = statistics_glPushDebugGroup;

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = statistics_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = statistics_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = statistics_glDrawBufferRegion;
  tbl.glNewBufferRegion = statistics_glNewBufferRegion;
  tbl.glReadBufferRegion = statistics_glReadBufferRegion;

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = statistics_glResizeBuffersMESA;

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = statistics_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = statistics_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = statistics_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = statistics_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = statistics_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = statistics_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = statistics_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = statistics_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = statistics_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = statistics_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = statistics_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = statistics_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = statistics_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = statistics_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = statistics_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = statistics_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = statistics_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = statistics_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = statistics_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = statistics_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = statistics_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = statistics_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = statistics_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = statistics_glWindowPos4svMESA;

  // GL_NVX_conditional_render

  tbl.glBeginConditionalRenderNVX = statistics_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = statistics_glEndConditionalRenderNVX;

  // GL_NV_bindless_texture

  tbl.glGetImageHandleNV = statistics_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = statistics_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = statistics_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = statistics_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = statistics_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = statistics_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = statistics_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = statistics_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = statistics_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = statistics_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = statistics_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = statistics_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = statistics_glUniformHandleui64vNV;

  // GL_NV_blend_equation_advanced

  tbl.glBlendBarrierNV = statistics_glBlendBarrierNV;
  tbl.glBlendParameteriNV = statistics_glBlendParameteriNV;

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = statistics_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = statistics_glEndConditionalRenderNV;

  // GL_NV_copy_buffer

  tbl.glCopyBufferSubDataNV = statistics_glCopyBufferSubDataNV;

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = statistics_glCopyImageSubDataNV;

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = statistics_glCoverageMaskNV;
  tbl.glCoverageOperationNV = statistics_glCoverageOperationNV;

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = statistics_glClearDepthdNV;
  tbl.glDepthBoundsdNV = statistics_glDepthBoundsdNV;
  tbl.glDepthRangedNV = statistics_glDepthRangedNV;

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = statistics_glDrawBuffersNV;

  // GL_NV_draw_texture

  tbl.glDrawTextureNV = statistics_glDrawTextureNV;

  // GL_NV_evaluators

  tbl.glEvalMapsNV = statistics_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = statistics_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = statistics_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = statistics_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = statistics_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = statistics_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = statistics_glMapControlPointsNV;
  tbl.glMapParameterfvNV = statistics_glMapParameterfvNV;
  tbl.glMapParameterivNV = statistics_glMapParameterivNV;

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = statistics_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = statistics_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = statistics_glTexRenderbufferNV;

  // GL_NV_fence

  tbl.glDeleteFencesNV = statistics_glDeleteFencesNV;
  tbl.glFinishFenceNV = statistics_glFinishFenceNV;
  tbl.glGenFencesNV = statistics_glGenFencesNV;
  tbl.glGetFenceivNV = statistics_glGetFenceivNV;
  tbl.glIsFenceNV = statistics_glIsFenceNV;
  tbl.glSetFenceNV = statistics_glSetFenceNV;
  tbl.glTestFenceNV = statistics_glTestFenceNV;

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = statistics_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = statistics_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = statistics_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = statistics_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = statistics_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = statistics_glProgramNamedParameter4fvNV;

  // GL_NV_framebuffer_blit

  tbl.glBlitFramebufferNV = statistics_glBlitFramebufferNV;

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = statistics_glRenderbufferStorageMultisampleCoverageNV;

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = statistics_glProgramVertexLimitNV;

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = statistics_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = statistics_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = statistics_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = statistics_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = statistics_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = statistics_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = statistics_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = statistics_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = statistics_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = statistics_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = statistics_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = statistics_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = statistics_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = statistics_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = statistics_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = statistics_glProgramLocalParametersI4uivNV;

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = statistics_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = statistics_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = statistics_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = statistics_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = statistics_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = statistics_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = statistics_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = statistics_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = statistics_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = statistics_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = statistics_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = statistics_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = statistics_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = statistics_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = statistics_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = statistics_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = statistics_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = statistics_glUniform1i64NV;
  tbl.glUniform1i64vNV = statistics_glUniform1i64vNV;
  tbl.glUniform1ui64NV = statistics_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = statistics_glUniform1ui64vNV;
  tbl.glUniform2i64NV = statistics_glUniform2i64NV;
  tbl.glUniform2i64vNV = statistics_glUniform2i64vNV;
  tbl.glUniform2ui64NV = statistics_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = statistics_glUniform2ui64vNV;
  tbl.glUniform3i64NV = statistics_glUniform3i64NV;
  tbl.glUniform3i64vNV = statistics_glUniform3i64vNV;
  tbl.glUniform3ui64NV = statistics_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = statistics_glUniform3ui64vNV;
  tbl.glUniform4i64NV = statistics_glUniform4i64NV;
  tbl.glUniform4i64vNV = statistics_glUniform4i64vNV;
  tbl.glUniform4ui64NV = statistics_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = statistics_glUniform4ui64vNV;

  // GL_NV_half_float

  tbl.glColor3hNV = statistics_glColor3hNV;
  tbl.glColor3hvNV = statistics_glColor3hvNV;
  tbl.glColor4hNV = statistics_glColor4hNV;
  tbl.glColor4hvNV = statistics_glColor4hvNV;
  tbl.glFogCoordhNV = statistics_glFogCoordhNV;
  tbl.glFogCoordhvNV = statistics_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = statistics_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = statistics_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = statistics_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = statistics_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = statistics_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = statistics_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = statistics_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = statistics_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = statistics_glNormal3hNV;
  tbl.glNormal3hvNV = statistics_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = statistics_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = statistics_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = statistics_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = statistics_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = statistics_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = statistics_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = statistics_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = statistics_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = statistics_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = statistics_glTexCoord4hvNV;
  tbl.glVertex2hNV = statistics_glVertex2hNV;
  tbl.glVertex2hvNV = statistics_glVertex2hvNV;
  tbl.glVertex3hNV = statistics_glVertex3hNV;
  tbl.glVertex3hvNV = statistics_glVertex3hvNV;
  tbl.glVertex4hNV = statistics_glVertex4hNV;
  tbl.glVertex4hvNV = statistics_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = statistics_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = statistics_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = statistics_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = statistics_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = statistics_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = statistics_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = statistics_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = statistics_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = statistics_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = statistics_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = statistics_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = statistics_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = statistics_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = statistics_glVertexWeighthvNV;

  // GL_NV_non_square_matrices

  tbl.glUniformMatrix2x3fvNV = statistics_glUniformMatrix2x3fvNV;
  tbl.glUniformMatrix2x4fvNV = statistics_glUniformMatrix2x4fvNV;
  tbl.glUniformMatrix3x2fvNV = statistics_glUniformMatrix3x2fvNV;
  tbl.glUniformMatrix3x4fvNV = statistics_glUniformMatrix3x4fvNV;
  tbl.glUniformMatrix4x2fvNV = statistics_glUniformMatrix4x2fvNV;
  tbl.glUniformMatrix4x3fvNV = statistics_glUniformMatrix4x3fvNV;

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = statistics_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = statistics_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = statistics_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = statistics_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = statistics_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = statistics_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = statistics_glIsOcclusionQueryNV;

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = statistics_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = statistics_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = statistics_glProgramBufferParametersfvNV;

  // GL_NV_path_rendering

  tbl.glCopyPathNV = statistics_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = statistics_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = statistics_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = statistics_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = statistics_glCoverStrokePathNV;
  tbl.glDeletePathsNV = statistics_glDeletePathsNV;
  tbl.glGenPathsNV = statistics_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = statistics_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = statistics_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = statistics_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = statistics_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = statistics_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = statistics_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = statistics_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = statistics_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = statistics_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = statistics_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = statistics_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = statistics_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = statistics_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = statistics_glInterpolatePathsNV;
  tbl.glIsPathNV = statistics_glIsPathNV;
  tbl.glIsPointInFillPathNV = statistics_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = statistics_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = statistics_glPathColorGenNV;
  tbl.glPathCommandsNV = statistics_glPathCommandsNV;
  tbl.glPathCoordsNV = statistics_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = statistics_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = statistics_glPathDashArrayNV;
  tbl.glPathFogGenNV = statistics_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = statistics_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = statistics_glPathGlyphsNV;
  tbl.glPathParameterfNV = statistics_glPathParameterfNV;
  tbl.glPathParameterfvNV = statistics_glPathParameterfvNV;
  tbl.glPathParameteriNV = statistics_glPathParameteriNV;
  tbl.glPathParameterivNV = statistics_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = statistics_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = statistics_glPathStencilFuncNV;
  tbl.glPathStringNV = statistics_glPathStringNV;
  tbl.glPathSubCommandsNV = statistics_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = statistics_glPathSubCoordsNV;
  tbl.glPathTexGenNV = statistics_glPathTexGenNV;
  tbl.glPointAlongPathNV = statistics_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = statistics_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = statistics_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = statistics_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = statistics_glStencilStrokePathNV;
  tbl.glTransformPathNV = statistics_glTransformPathNV;
  tbl.glWeightPathsNV = statistics_glWeightPathsNV;

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = statistics_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = statistics_glPixelDataRangeNV;

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = statistics_glPointParameteriNV;
  tbl.glPointParameterivNV = statistics_glPointParameterivNV;

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = statistics_glGetVideoi64vNV;
  tbl.glGetVideoivNV = statistics_glGetVideoivNV;
  tbl.glGetVideoui64vNV = statistics_glGetVideoui64vNV;
  tbl.glGetVideouivNV = statistics_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = statistics_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = statistics_glPresentFrameKeyedNV;

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = statistics_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = statistics_glPrimitiveRestartNV;

  // GL_NV_read_buffer

  tbl.glReadBufferNV = statistics_glReadBufferNV;

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = statistics_glCombinerInputNV;
  tbl.glCombinerOutputNV = statistics_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = statistics_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = statistics_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = statistics_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = statistics_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = statistics_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = statistics_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = statistics_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = statistics_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = statistics_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = statistics_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = statistics_glGetFinalCombinerInputParameterivNV;

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = statistics_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = statistics_glGetCombinerStageParameterfvNV;

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = statistics_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = statistics_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = statistics_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = statistics_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = statistics_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = statistics_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = statistics_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = statistics_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = statistics_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = statistics_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = statistics_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = statistics_glProgramUniformui64vNV;
  tbl.glUniformui64NV = statistics_glUniformui64NV;
  tbl.glUniformui64vNV = statistics_glUniformui64vNV;

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = statistics_glTextureBarrierNV;

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = statistics_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = statistics_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = statistics_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = statistics_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = statistics_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = statistics_glTextureImage3DMultisampleNV;

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = statistics_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = statistics_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = statistics_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = statistics_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = statistics_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = statistics_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = statistics_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = statistics_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = statistics_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = statistics_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = statistics_glTransformFeedbackVaryingsNV;

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = statistics_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = statistics_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = statistics_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = statistics_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = statistics_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = statistics_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = statistics_glResumeTransformFeedbackNV;

  // GL_NV_vdpau_interop

  tbl.glVDPAUFiniNV = statistics_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = statistics_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = statistics_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = statistics_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = statistics_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = statistics_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = statistics_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = statistics_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = statistics_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = statistics_glVDPAUUnregisterSurfaceNV;

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = statistics_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = statistics_glVertexArrayRangeNV;

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = statistics_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = statistics_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = statistics_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = statistics_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = statistics_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = statistics_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = statistics_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = statistics_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = statistics_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = statistics_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = statistics_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = statistics_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = statistics_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = statistics_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = statistics_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = statistics_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = statistics_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = statistics_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = statistics_glVertexAttribLFormatNV;

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = statistics_glBufferAddressRangeNV;
  tbl.glColorFormatNV = statistics_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = statistics_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = statistics_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = statistics_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = statistics_glIndexFormatNV;
  tbl.glNormalFormatNV = statistics_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = statistics_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = statistics_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = statistics_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = statistics_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = statistics_glVertexFormatNV;

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = statistics_glAreProgramsResidentNV;
  tbl.glBindProgramNV = statistics_glBindProgramNV;
  tbl.glDeleteProgramsNV = statistics_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = statistics_glExecuteProgramNV;
  tbl.glGenProgramsNV = statistics_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = statistics_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = statistics_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = statistics_glGetProgramStringNV;
  tbl.glGetProgramivNV = statistics_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = statistics_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = statistics_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = statistics_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = statistics_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = statistics_glGetVertexAttribivNV;
  tbl.glIsProgramNV = statistics_glIsProgramNV;
  tbl.glLoadProgramNV = statistics_glLoadProgramNV;
  tbl.glProgramParameter4dNV = statistics_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = statistics_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = statistics_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = statistics_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = statistics_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = statistics_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = statistics_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = statistics_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = statistics_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = statistics_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = statistics_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = statistics_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = statistics_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = statistics_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = statistics_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = statistics_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = statistics_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = statistics_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = statistics_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = statistics_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = statistics_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = statistics_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = statistics_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = statistics_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = statistics_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = statistics_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = statistics_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = statistics_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = statistics_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = statistics_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = statistics_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = statistics_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = statistics_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = statistics_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = statistics_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = statistics_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = statistics_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = statistics_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = statistics_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = statistics_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = statistics_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = statistics_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = statistics_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = statistics_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = statistics_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = statistics_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = statistics_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = statistics_glVertexAttribs4ubvNV;

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = statistics_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = statistics_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = statistics_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = statistics_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = statistics_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = statistics_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = statistics_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = statistics_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = statistics_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = statistics_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = statistics_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = statistics_glVideoCaptureStreamParameterivNV;

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = statistics_glBlendEquationSeparateOES;

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = statistics_glBlendFuncSeparateOES;

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = statistics_glBlendEquationOES;

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = statistics_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = statistics_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = statistics_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = statistics_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = statistics_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = statistics_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = statistics_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = statistics_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = statistics_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = statistics_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = statistics_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = statistics_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = statistics_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = statistics_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = statistics_glRenderbufferStorageOES;

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = statistics_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = statistics_glProgramBinaryOES;

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = statistics_glGetBufferPointervOES;
  tbl.glMapBufferOES = statistics_glMapBufferOES;
  tbl.glUnmapBufferOES = statistics_glUnmapBufferOES;

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = statistics_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = statistics_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = statistics_glWeightPointerOES;

  // GL_OES_single_precision

  tbl.glClearDepthfOES = statistics_glClearDepthfOES;
  tbl.glClipPlanefOES = statistics_glClipPlanefOES;
  tbl.glDepthRangefOES = statistics_glDepthRangefOES;
  tbl.glFrustumfOES = statistics_glFrustumfOES;
  tbl.glGetClipPlanefOES = statistics_glGetClipPlanefOES;
  tbl.glOrthofOES = statistics_glOrthofOES;

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = statistics_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = statistics_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = statistics_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = statistics_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = statistics_glTexImage3DOES;
  tbl.glTexSubImage3DOES = statistics_glTexSubImage3DOES;

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = statistics_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = statistics_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = statistics_glGetTexGenxvOES;
  tbl.glTexGenfOES = statistics_glTexGenfOES;
  tbl.glTexGenfvOES = statistics_glTexGenfvOES;
  tbl.glTexGeniOES = statistics_glTexGeniOES;
  tbl.glTexGenivOES = statistics_glTexGenivOES;
  tbl.glTexGenxOES = statistics_glTexGenxOES;
  tbl.glTexGenxvOES = statistics_glTexGenxvOES;

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = statistics_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = statistics_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = statistics_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = statistics_glIsVertexArrayOES;

  // GL_PGI_misc_hints

  tbl.glHintPGI = statistics_glHintPGI;

  // GL_QCOM_alpha_test

  tbl.glAlphaFuncQCOM = statistics_glAlphaFuncQCOM;

  // GL_QCOM_driver_control

  tbl.glDisableDriverControlQCOM = statistics_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = statistics_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = statistics_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = statistics_glGetDriverControlsQCOM;

  // GL_QCOM_extended_get

  tbl.glExtGetBufferPointervQCOM = statistics_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = statistics_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = statistics_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = statistics_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = statistics_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = statistics_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = statistics_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = statistics_glExtTexObjectStateOverrideiQCOM;

  // GL_QCOM_extended_get2

  tbl.glExtGetProgramBinarySourceQCOM = statistics_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = statistics_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = statistics_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = statistics_glExtIsProgramBinaryQCOM;

  // GL_QCOM_tiled_rendering

  tbl.glEndTilingQCOM = statistics_glEndTilingQCOM;
  tbl.glStartTilingQCOM = statistics_glStartTilingQCOM;

  // GL_REGAL_ES1_0_compatibility

  tbl.glAlphaFuncx = statistics_glAlphaFuncx;
  tbl.glClearColorx = statistics_glClearColorx;
  tbl.glClearDepthx = statistics_glClearDepthx;
  tbl.glColor4x = statistics_glColor4x;
  tbl.glDepthRangex = statistics_glDepthRangex;
  tbl.glFogx = statistics_glFogx;
  tbl.glFogxv = statistics_glFogxv;
  tbl.glFrustumf = statistics_glFrustumf;
  tbl.glFrustumx = statistics_glFrustumx;
  tbl.glLightModelx = statistics_glLightModelx;
  tbl.glLightModelxv = statistics_glLightModelxv;
  tbl.glLightx = statistics_glLightx;
  tbl.glLightxv = statistics_glLightxv;
  tbl.glLineWidthx = statistics_glLineWidthx;
  tbl.glLoadMatrixx = statistics_glLoadMatrixx;
  tbl.glMaterialx = statistics_glMaterialx;
  tbl.glMaterialxv = statistics_glMaterialxv;
  tbl.glMultMatrixx = statistics_glMultMatrixx;
  tbl.glMultiTexCoord4x = statistics_glMultiTexCoord4x;
  tbl.glNormal3x = statistics_glNormal3x;
  tbl.glOrthof = statistics_glOrthof;
  tbl.glOrthox = statistics_glOrthox;
  tbl.glPointSizex = statistics_glPointSizex;
  tbl.glPolygonOffsetx = statistics_glPolygonOffsetx;
  tbl.glRotatex = statistics_glRotatex;
  tbl.glSampleCoveragex = statistics_glSampleCoveragex;
  tbl.glScalex = statistics_glScalex;
  tbl.glTexEnvx = statistics_glTexEnvx;
  tbl.glTexEnvxv = statistics_glTexEnvxv;
  tbl.glTexParameterx = statistics_glTexParameterx;
  tbl.glTranslatex = statistics_glTranslatex;

  // GL_REGAL_ES1_1_compatibility

  tbl.glClipPlanef = statistics_glClipPlanef;
  tbl.glClipPlanex = statistics_glClipPlanex;
  tbl.glGetClipPlanef = statistics_glGetClipPlanef;
  tbl.glGetClipPlanex = statistics_glGetClipPlanex;
  tbl.glGetFixedv = statistics_glGetFixedv;
  tbl.glGetLightxv = statistics_glGetLightxv;
  tbl.glGetMaterialxv = statistics_glGetMaterialxv;
  tbl.glGetTexEnvxv = statistics_glGetTexEnvxv;
  tbl.glGetTexParameterxv = statistics_glGetTexParameterxv;
  tbl.glPointParameterx = statistics_glPointParameterx;
  tbl.glPointParameterxv = statistics_glPointParameterxv;
  tbl.glPointSizePointerOES = statistics_glPointSizePointerOES;
  tbl.glTexParameterxv = statistics_glTexParameterxv;

  // GL_REGAL_log

  tbl.glLogMessageCallbackREGAL = statistics_glLogMessageCallbackREGAL;

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = statistics_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = statistics_glGetDetailTexFuncSGIS;

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = statistics_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = statistics_glGetFogFuncSGIS;

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = statistics_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = statistics_glSamplePatternSGIS;

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = statistics_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = statistics_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = statistics_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = statistics_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = statistics_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = statistics_glPixelTexGenParameterivSGIS;

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = statistics_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = statistics_glPointParameterfvSGIS;

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = statistics_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = statistics_glSharpenTexFuncSGIS;

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = statistics_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = statistics_glTexSubImage4DSGIS;

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = statistics_glTextureColorMaskSGIS;

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = statistics_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = statistics_glTexFilterFuncSGIS;

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = statistics_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = statistics_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = statistics_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = statistics_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = statistics_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = statistics_glPollAsyncSGIX;

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = statistics_glFlushRasterSGIX;

  // GL_SGIX_fog_texture

  tbl.glTextureFogSGIX = statistics_glTextureFogSGIX;

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = statistics_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = statistics_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = statistics_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = statistics_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = statistics_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = statistics_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = statistics_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = statistics_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = statistics_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = statistics_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = statistics_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = statistics_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = statistics_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = statistics_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = statistics_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = statistics_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = statistics_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = statistics_glLightEnviSGIX;

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = statistics_glFrameZoomSGIX;

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = statistics_glIglooInterfaceSGIX;

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = statistics_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = statistics_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = statistics_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = statistics_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = statistics_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = statistics_glStopInstrumentsSGIX;

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = statistics_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = statistics_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = statistics_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = statistics_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = statistics_glListParameteriSGIX;
  tbl.glListParameterivSGIX = statistics_glListParameterivSGIX;

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = statistics_glPixelTexGenSGIX;

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = statistics_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = statistics_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = statistics_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = statistics_glLoadIdentityDeformationMapSGIX;

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = statistics_glReferencePlaneSGIX;

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = statistics_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = statistics_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = statistics_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = statistics_glSpriteParameterivSGIX;

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = statistics_glTagSampleBufferSGIX;

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = statistics_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = statistics_glColorTableParameterivSGI;
  tbl.glColorTableSGI = statistics_glColorTableSGI;
  tbl.glCopyColorTableSGI = statistics_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = statistics_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = statistics_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = statistics_glGetColorTableSGI;

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = statistics_glFinishTextureSUNX;

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = statistics_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = statistics_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = statistics_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = statistics_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = statistics_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = statistics_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = statistics_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = statistics_glGlobalAlphaFactorusSUN;

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = statistics_glDrawMeshArraysSUN;

  // GL_SUN_read_video_pixels

  tbl.glReadVideoPixelsSUN = statistics_glReadVideoPixelsSUN;

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = statistics_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = statistics_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = statistics_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = statistics_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = statistics_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = statistics_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = statistics_glReplacementCodeusvSUN;

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = statistics_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = statistics_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = statistics_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = statistics_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = statistics_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = statistics_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = statistics_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = statistics_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = statistics_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = statistics_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = statistics_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = statistics_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = statistics_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = statistics_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = statistics_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = statistics_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = statistics_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = statistics_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = statistics_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = statistics_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = statistics_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = statistics_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = statistics_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = statistics_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = statistics_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = statistics_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = statistics_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = statistics_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = statistics_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = statistics_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = statistics_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = statistics_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = statistics_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = statistics_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = statistics_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = statistics_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = statistics_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = statistics_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = statistics_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = statistics_glTexCoord4fVertex4fvSUN;

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = statistics_glAddSwapHintRectWIN;

}

REGAL_NAMESPACE_END

#endif
