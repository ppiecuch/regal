/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_LOG

REGAL_GLOBAL_BEGIN

#include "RegalLog.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalContext.h"
#include "RegalDispatch.h"
#include "RegalDispatcherGL.h"
#include "RegalDispatcherGlobal.h"

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

// GL_VERSION_1_0

static void REGAL_CALL log_glAccum(GLenum op, GLfloat value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAccum)(op, value);
    Driver("glAccum","(", toString(op), ", ", value, ")");
}

static void REGAL_CALL log_glAlphaFunc(GLenum func, GLclampf ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFunc)(func, ref);
    Driver("glAlphaFunc","(", toString(func), ", ", ref, ")");
}

static void REGAL_CALL log_glBegin(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    RegalAssert(_context->depthBeginEnd>0);
    Push<size_t> pushDepth(_context->depthBeginEnd);
    _context->depthBeginEnd--;
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBegin)(mode);
    Driver("glBegin","(", toString(mode), ")");
}

static void REGAL_CALL log_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);
    Driver("glBitmap","(", width, ", ", height, ", ", xorig, ", ", yorig, ", ", xmove, ", ", ymove, ", ", boost::print::optional(bitmap,Logging::pointers), ")");
}

static void REGAL_CALL log_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFunc)(sfactor, dfactor);
    Driver("glBlendFunc","(", toString(sfactor), ", ", toString(dfactor), ")");
}

static void REGAL_CALL log_glCallList(GLuint list)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCallList)(list);
    Driver("glCallList","(", list, ")");
}

static void REGAL_CALL log_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCallLists)(n, type, lists);
    Driver("glCallLists","(", n, ", ", toString(type), ", ", boost::print::array(reinterpret_cast<const GLubyte *>(lists),helper::size::callLists(n, type)), ")");
}

static void REGAL_CALL log_glClear(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClear)(mask);
    Driver("glClear","(", GLclearToString(mask), ")");
}

static void REGAL_CALL log_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearAccum)(red, green, blue, alpha);
    Driver("glClearAccum","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearColor)(red, green, blue, alpha);
    Driver("glClearColor","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glClearDepth(GLclampd depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearDepth)(depth);
    Driver("glClearDepth","(", depth, ")");
}

static void REGAL_CALL log_glClearIndex(GLfloat c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearIndex)(c);
    Driver("glClearIndex","(", c, ")");
}

static void REGAL_CALL log_glClearStencil(GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearStencil)(s);
    Driver("glClearStencil","(", s, ")");
}

static void REGAL_CALL log_glClipPlane(GLenum plane, const GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClipPlane)(plane, equation);
    Driver("glClipPlane","(", toString(plane), ", ", boost::print::array(equation,4), ")");
}

static void REGAL_CALL log_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3b)(red, green, blue);
    Driver("glColor3b","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3bv)(v);
    Driver("glColor3bv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3d)(red, green, blue);
    Driver("glColor3d","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3dv)(v);
    Driver("glColor3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3f)(red, green, blue);
    Driver("glColor3f","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3fv)(v);
    Driver("glColor3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3i)(red, green, blue);
    Driver("glColor3i","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3iv)(v);
    Driver("glColor3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3s)(red, green, blue);
    Driver("glColor3s","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3sv)(v);
    Driver("glColor3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3ub)(red, green, blue);
    Driver("glColor3ub","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3ubv)(v);
    Driver("glColor3ubv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3ui)(red, green, blue);
    Driver("glColor3ui","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3uiv)(v);
    Driver("glColor3uiv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3us)(red, green, blue);
    Driver("glColor3us","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3usv)(v);
    Driver("glColor3usv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4b)(red, green, blue, alpha);
    Driver("glColor4b","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4bv)(v);
    Driver("glColor4bv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4d)(red, green, blue, alpha);
    Driver("glColor4d","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4dv)(v);
    Driver("glColor4dv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4f)(red, green, blue, alpha);
    Driver("glColor4f","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4fv)(v);
    Driver("glColor4fv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4i)(red, green, blue, alpha);
    Driver("glColor4i","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4iv)(v);
    Driver("glColor4iv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4s)(red, green, blue, alpha);
    Driver("glColor4s","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4sv)(v);
    Driver("glColor4sv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ub)(red, green, blue, alpha);
    Driver("glColor4ub","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ubv)(v);
    Driver("glColor4ubv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ui)(red, green, blue, alpha);
    Driver("glColor4ui","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4uiv)(v);
    Driver("glColor4uiv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4us)(red, green, blue, alpha);
    Driver("glColor4us","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4usv)(v);
    Driver("glColor4usv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorMask)(red, green, blue, alpha);
    Driver("glColorMask","(", toString(red), ", ", toString(green), ", ", toString(blue), ", ", toString(alpha), ")");
}

static void REGAL_CALL log_glColorMaterial(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorMaterial)(face, mode);
    Driver("glColorMaterial","(", toString(face), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyPixels)(x, y, width, height, type);
    Driver("glCopyPixels","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(type), ")");
}

static void REGAL_CALL log_glCullFace(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCullFace)(mode);
    Driver("glCullFace","(", toString(mode), ")");
}

static void REGAL_CALL log_glDeleteLists(GLuint list, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteLists)(list, range);
    Driver("glDeleteLists","(", list, ", ", range, ")");
}

static void REGAL_CALL log_glDepthFunc(GLenum func)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthFunc)(func);
    Driver("glDepthFunc","(", toString(func), ")");
}

static void REGAL_CALL log_glDepthMask(GLboolean flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthMask)(flag);
    Driver("glDepthMask","(", toString(flag), ")");
}

static void REGAL_CALL log_glDepthRange(GLclampd zNear, GLclampd zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRange)(zNear, zFar);
    Driver("glDepthRange","(", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glDisable(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisable)(cap);
    Driver("glDisable","(", toString(cap), ")");
}

static void REGAL_CALL log_glDrawBuffer(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffer)(mode);
    Driver("glDrawBuffer","(", toString(mode), ")");
}

static void REGAL_CALL log_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawPixels)(width, height, format, type, pixels);
    Driver("glDrawPixels","(", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glEdgeFlag(GLboolean flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlag)(flag);
    Driver("glEdgeFlag","(", toString(flag), ")");
}

static void REGAL_CALL log_glEdgeFlagv(const GLboolean *flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagv)(flag);
    Driver("glEdgeFlagv","(", boost::print::array(flag,1), ")");
}

static void REGAL_CALL log_glEnable(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnable)(cap);
    Driver("glEnable","(", toString(cap), ")");
}

static void REGAL_CALL log_glEnd(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnd)();
    Driver("glEnd","()");
}

static void REGAL_CALL log_glEndList(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndList)();
    Driver("glEndList","()");
}

static void REGAL_CALL log_glEvalCoord1d(GLdouble u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1d)(u);
    Driver("glEvalCoord1d","(", u, ")");
}

static void REGAL_CALL log_glEvalCoord1dv(const GLdouble *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1dv)(u);
    Driver("glEvalCoord1dv","(", boost::print::array(u,1), ")");
}

static void REGAL_CALL log_glEvalCoord1f(GLfloat u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1f)(u);
    Driver("glEvalCoord1f","(", u, ")");
}

static void REGAL_CALL log_glEvalCoord1fv(const GLfloat *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1fv)(u);
    Driver("glEvalCoord1fv","(", boost::print::array(u,1), ")");
}

static void REGAL_CALL log_glEvalCoord2d(GLdouble u, GLdouble v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2d)(u, v);
    Driver("glEvalCoord2d","(", u, ", ", v, ")");
}

static void REGAL_CALL log_glEvalCoord2dv(const GLdouble *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2dv)(u);
    Driver("glEvalCoord2dv","(", boost::print::array(u,2), ")");
}

static void REGAL_CALL log_glEvalCoord2f(GLfloat u, GLfloat v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2f)(u, v);
    Driver("glEvalCoord2f","(", u, ", ", v, ")");
}

static void REGAL_CALL log_glEvalCoord2fv(const GLfloat *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2fv)(u);
    Driver("glEvalCoord2fv","(", boost::print::array(u,2), ")");
}

static void REGAL_CALL log_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh1)(mode, i1, i2);
    Driver("glEvalMesh1","(", toString(mode), ", ", i1, ", ", i2, ")");
}

static void REGAL_CALL log_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh2)(mode, i1, i2, j1, j2);
    Driver("glEvalMesh2","(", toString(mode), ", ", i1, ", ", i2, ", ", j1, ", ", j2, ")");
}

static void REGAL_CALL log_glEvalPoint1(GLint i)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint1)(i);
    Driver("glEvalPoint1","(", i, ")");
}

static void REGAL_CALL log_glEvalPoint2(GLint i, GLint j)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint2)(i, j);
    Driver("glEvalPoint2","(", i, ", ", j, ")");
}

static void REGAL_CALL log_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFeedbackBuffer)(size, type, buffer);
    Driver("glFeedbackBuffer","(", size, ", ", toString(type), ", ", boost::print::optional(buffer,Logging::pointers), ")");
}

static void REGAL_CALL log_glFinish(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinish)();
    Driver("glFinish","()");
}

static void REGAL_CALL log_glFlush(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlush)();
    Driver("glFlush","()");
}

static void REGAL_CALL log_glFogf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogf)(pname, param);
    Driver("glFogf","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFogfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogfv)(pname, params);
    Driver("glFogfv","(", toString(pname), ", ", boost::print::array(params,helper::size::fogv(pname)), ")");
}

static void REGAL_CALL log_glFogi(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogi)(pname, param);
    Driver("glFogi","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFogiv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogiv)(pname, params);
    Driver("glFogiv","(", toString(pname), ", ", boost::print::array(params,helper::size::fogv(pname)), ")");
}

static void REGAL_CALL log_glFrontFace(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrontFace)(mode);
    Driver("glFrontFace","(", toString(mode), ")");
}

static void REGAL_CALL log_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrustum)(left, right, bottom, top, zNear, zFar);
    Driver("glFrustum","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static GLuint REGAL_CALL log_glGenLists(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenLists)(range);
    Driver("glGenLists","(", range, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetBooleanv(GLenum pname, GLboolean *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanv)(pname, params);
    Driver("glGetBooleanv","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetClipPlane(GLenum plane, GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlane)(plane, equation);
    Driver("glGetClipPlane","(", toString(plane), ", ", boost::print::array(equation,4), ")");
}

static void REGAL_CALL log_glGetDoublev(GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDoublev)(pname, params);
    Driver("glGetDoublev","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLenum REGAL_CALL log_glGetError(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glGetError)();
    Driver("glGetError","()", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glGetFloatv(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFloatv)(pname, params);
    Driver("glGetFloatv","(", toString(pname), ", ", boost::print::array(params,helper::size::get(pname)), ")");
}

static void REGAL_CALL log_glGetIntegerv(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerv)(pname, params);
    Driver("glGetIntegerv","(", toString(pname), ", ", boost::print::array(params,helper::size::get(pname)), ")");
}

static void REGAL_CALL log_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLightfv)(light, pname, params);
    Driver("glGetLightfv","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLightiv)(light, pname, params);
    Driver("glGetLightiv","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapdv)(target, query, v);
    Driver("glGetMapdv","(", toString(target), ", ", toString(query), ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapfv)(target, query, v);
    Driver("glGetMapfv","(", toString(target), ", ", toString(query), ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapiv(GLenum target, GLenum query, GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapiv)(target, query, v);
    Driver("glGetMapiv","(", toString(target), ", ", toString(query), ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialfv)(face, pname, params);
    Driver("glGetMaterialfv","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialiv)(face, pname, params);
    Driver("glGetMaterialiv","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPixelMapfv(GLenum map, GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapfv)(map, values);
    Driver("glGetPixelMapfv","(", toString(map), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPixelMapuiv(GLenum map, GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapuiv)(map, values);
    Driver("glGetPixelMapuiv","(", toString(map), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPixelMapusv(GLenum map, GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapusv)(map, values);
    Driver("glGetPixelMapusv","(", toString(map), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPolygonStipple(GLubyte *mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPolygonStipple)(mask);
    Driver("glGetPolygonStipple","(", boost::print::optional(mask,Logging::pointers), ")");
}

static const GLubyte *REGAL_CALL log_glGetString(GLenum name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    const GLubyte * ret = _next->call(&_next->glGetString)(name);
    Driver("glGetString","(", toString(name), ")", " returned ", boost::print::quote(reinterpret_cast<const GLchar *>(ret),'"'));
    return ret;
}

static void REGAL_CALL log_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnvfv)(target, pname, params);
    Driver("glGetTexEnvfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnviv)(target, pname, params);
    Driver("glGetTexEnviv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGendv)(coord, pname, params);
    Driver("glGetTexGendv","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfv)(coord, pname, params);
    Driver("glGetTexGenfv","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGeniv)(coord, pname, params);
    Driver("glGetTexGeniv","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexImage)(target, level, format, type, pixels);
    Driver("glGetTexImage","(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameterfv)(target, level, pname, params);
    Driver("glGetTexLevelParameterfv","(", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameteriv)(target, level, pname, params);
    Driver("glGetTexLevelParameteriv","(", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterfv)(target, pname, params);
    Driver("glGetTexParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameteriv)(target, pname, params);
    Driver("glGetTexParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glHint(GLenum target, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glHint)(target, mode);
    Driver("glHint","(", toString(target), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glIndexMask(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexMask)(mask);
    Driver("glIndexMask","(", mask, ")");
}

static void REGAL_CALL log_glIndexd(GLdouble c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexd)(c);
    Driver("glIndexd","(", c, ")");
}

static void REGAL_CALL log_glIndexdv(const GLdouble *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexdv)(c);
    Driver("glIndexdv","(", boost::print::array(c,1), ")");
}

static void REGAL_CALL log_glIndexf(GLfloat c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexf)(c);
    Driver("glIndexf","(", c, ")");
}

static void REGAL_CALL log_glIndexfv(const GLfloat *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexfv)(c);
    Driver("glIndexfv","(", boost::print::array(c,1), ")");
}

static void REGAL_CALL log_glIndexi(GLint c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexi)(c);
    Driver("glIndexi","(", c, ")");
}

static void REGAL_CALL log_glIndexiv(const GLint *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexiv)(c);
    Driver("glIndexiv","(", boost::print::array(c,1), ")");
}

static void REGAL_CALL log_glIndexs(GLshort c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexs)(c);
    Driver("glIndexs","(", c, ")");
}

static void REGAL_CALL log_glIndexsv(const GLshort *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexsv)(c);
    Driver("glIndexsv","(", boost::print::array(c,1), ")");
}

static void REGAL_CALL log_glInitNames(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInitNames)();
    Driver("glInitNames","()");
}

static GLboolean REGAL_CALL log_glIsEnabled(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsEnabled)(cap);
    Driver("glIsEnabled","(", toString(cap), ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsList(GLuint list)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsList)(list);
    Driver("glIsList","(", list, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glLightModelf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModelf)(pname, param);
    Driver("glLightModelf","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightModelfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModelfv)(pname, params);
    Driver("glLightModelfv","(", toString(pname), ", ", boost::print::array(params,helper::size::lightModelv(pname)), ")");
}

static void REGAL_CALL log_glLightModeli(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModeli)(pname, param);
    Driver("glLightModeli","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightModeliv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModeliv)(pname, params);
    Driver("glLightModeliv","(", toString(pname), ", ", boost::print::array(params,helper::size::lightModelv(pname)), ")");
}

static void REGAL_CALL log_glLightf(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightf)(light, pname, param);
    Driver("glLightf","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightfv)(light, pname, params);
    Driver("glLightfv","(", toString(light), ", ", toString(pname), ", ", boost::print::array(params,helper::size::lightv(pname)), ")");
}

static void REGAL_CALL log_glLighti(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLighti)(light, pname, param);
    Driver("glLighti","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightiv)(light, pname, params);
    Driver("glLightiv","(", toString(light), ", ", toString(pname), ", ", boost::print::array(params,helper::size::lightv(pname)), ")");
}

static void REGAL_CALL log_glLineStipple(GLint factor, GLushort pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLineStipple)(factor, pattern);
    Driver("glLineStipple","(", factor, ", ", pattern, ")");
}

static void REGAL_CALL log_glLineWidth(GLfloat width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLineWidth)(width);
    Driver("glLineWidth","(", width, ")");
}

static void REGAL_CALL log_glListBase(GLuint base)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glListBase)(base);
    Driver("glListBase","(", base, ")");
}

static void REGAL_CALL log_glLoadIdentity(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentity)();
    Driver("glLoadIdentity","()");
}

static void REGAL_CALL log_glLoadMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixd)(m);
    Driver("glLoadMatrixd","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glLoadMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixf)(m);
    Driver("glLoadMatrixf","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glLoadName(GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadName)(name);
    Driver("glLoadName","(", name, ")");
}

static void REGAL_CALL log_glLogicOp(GLenum opcode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLogicOp)(opcode);
    Driver("glLogicOp","(", toString(opcode), ")");
}

static void REGAL_CALL log_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMap1d)(target, u1, u2, stride, order, points);
    Driver("glMap1d","(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMap1f)(target, u1, u2, stride, order, points);
    Driver("glMap1f","(", toString(target), ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    Driver("glMap2d","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
}

static void REGAL_CALL log_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    Driver("glMap2f","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
}

static void REGAL_CALL log_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1d)(un, u1, u2);
    Driver("glMapGrid1d","(", un, ", ", u1, ", ", u2, ")");
}

static void REGAL_CALL log_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1f)(un, u1, u2);
    Driver("glMapGrid1f","(", un, ", ", u1, ", ", u2, ")");
}

static void REGAL_CALL log_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2d)(un, u1, u2, vn, v1, v2);
    Driver("glMapGrid2d","(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2f)(un, u1, u2, vn, v1, v2);
    Driver("glMapGrid2f","(", un, ", ", u1, ", ", u2, ", ", vn, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMaterialf)(face, pname, param);
    Driver("glMaterialf","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMaterialfv)(face, pname, params);
    Driver("glMaterialfv","(", toString(face), ", ", toString(pname), ", ", boost::print::array(params,helper::size::materialv(pname)), ")");
}

static void REGAL_CALL log_glMateriali(GLenum face, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMateriali)(face, pname, param);
    Driver("glMateriali","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMaterialiv)(face, pname, params);
    Driver("glMaterialiv","(", toString(face), ", ", toString(pname), ", ", boost::print::array(params,helper::size::materialv(pname)), ")");
}

static void REGAL_CALL log_glMatrixMode(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixMode)(mode);
    Driver("glMatrixMode","(", toString(mode), ")");
}

static void REGAL_CALL log_glMultMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixd)(m);
    Driver("glMultMatrixd","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixf)(m);
    Driver("glMultMatrixf","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glNewList(GLuint list, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    RegalAssert(_context->depthNewList>0);
    Push<size_t> pushDepth(_context->depthNewList);
    _context->depthNewList--;
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNewList)(list, mode);
    Driver("glNewList","(", list, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3b)(nx, ny, nz);
    Driver("glNormal3b","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3bv)(v);
    Driver("glNormal3bv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3d)(nx, ny, nz);
    Driver("glNormal3d","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3dv)(v);
    Driver("glNormal3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3f)(nx, ny, nz);
    Driver("glNormal3f","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3fv)(v);
    Driver("glNormal3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glNormal3i(GLint nx, GLint ny, GLint nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3i)(nx, ny, nz);
    Driver("glNormal3i","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3iv)(v);
    Driver("glNormal3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3s)(nx, ny, nz);
    Driver("glNormal3s","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3sv)(v);
    Driver("glNormal3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glOrtho)(left, right, bottom, top, zNear, zFar);
    Driver("glOrtho","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glPassThrough(GLfloat token)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPassThrough)(token);
    Driver("glPassThrough","(", token, ")");
}

static void REGAL_CALL log_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelMapfv)(map, mapsize, values);
    Driver("glPixelMapfv","(", toString(map), ", ", mapsize, ", ", boost::print::array(values,mapsize), ")");
}

static void REGAL_CALL log_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelMapuiv)(map, mapsize, values);
    Driver("glPixelMapuiv","(", toString(map), ", ", mapsize, ", ", boost::print::array(values,mapsize), ")");
}

static void REGAL_CALL log_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelMapusv)(map, mapsize, values);
    Driver("glPixelMapusv","(", toString(map), ", ", mapsize, ", ", boost::print::array(values,mapsize), ")");
}

static void REGAL_CALL log_glPixelStoref(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelStoref)(pname, param);
    Driver("glPixelStoref","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelStorei(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelStorei)(pname, param);
    Driver("glPixelStorei","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTransferf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferf)(pname, param);
    Driver("glPixelTransferf","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTransferi(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferi)(pname, param);
    Driver("glPixelTransferi","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelZoom)(xfactor, yfactor);
    Driver("glPixelZoom","(", xfactor, ", ", yfactor, ")");
}

static void REGAL_CALL log_glPointSize(GLfloat size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointSize)(size);
    Driver("glPointSize","(", size, ")");
}

static void REGAL_CALL log_glPolygonMode(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPolygonMode)(face, mode);
    Driver("glPolygonMode","(", toString(face), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glPolygonStipple(const GLubyte *mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPolygonStipple)(mask);
    Driver("glPolygonStipple","(", boost::print::optional(mask,Logging::pointers), ")");
}

static void REGAL_CALL log_glPopAttrib(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopAttrib)();
    Driver("glPopAttrib","()");
}

static void REGAL_CALL log_glPopMatrix(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopMatrix)();
    Driver("glPopMatrix","()");
}

static void REGAL_CALL log_glPopName(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopName)();
    Driver("glPopName","()");
}

static void REGAL_CALL log_glPushAttrib(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushAttrib)(mask);
    Driver("glPushAttrib","(", GLpushAttribToString(mask), ")");
}

static void REGAL_CALL log_glPushMatrix(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    RegalAssert(_context->depthPushMatrix>0);
    Push<size_t> pushDepth(_context->depthPushMatrix);
    _context->depthPushMatrix--;
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushMatrix)();
    Driver("glPushMatrix","()");
}

static void REGAL_CALL log_glPushName(GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushName)(name);
    Driver("glPushName","(", name, ")");
}

static void REGAL_CALL log_glRasterPos2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2d)(x, y);
    Driver("glRasterPos2d","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glRasterPos2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2dv)(v);
    Driver("glRasterPos2dv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glRasterPos2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2f)(x, y);
    Driver("glRasterPos2f","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glRasterPos2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2fv)(v);
    Driver("glRasterPos2fv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glRasterPos2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2i)(x, y);
    Driver("glRasterPos2i","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glRasterPos2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2iv)(v);
    Driver("glRasterPos2iv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glRasterPos2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2s)(x, y);
    Driver("glRasterPos2s","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glRasterPos2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2sv)(v);
    Driver("glRasterPos2sv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3d)(x, y, z);
    Driver("glRasterPos3d","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glRasterPos3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3dv)(v);
    Driver("glRasterPos3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3f)(x, y, z);
    Driver("glRasterPos3f","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glRasterPos3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3fv)(v);
    Driver("glRasterPos3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glRasterPos3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3i)(x, y, z);
    Driver("glRasterPos3i","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glRasterPos3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3iv)(v);
    Driver("glRasterPos3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3s)(x, y, z);
    Driver("glRasterPos3s","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glRasterPos3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3sv)(v);
    Driver("glRasterPos3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4d)(x, y, z, w);
    Driver("glRasterPos4d","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glRasterPos4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4dv)(v);
    Driver("glRasterPos4dv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4f)(x, y, z, w);
    Driver("glRasterPos4f","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glRasterPos4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4fv)(v);
    Driver("glRasterPos4fv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4i)(x, y, z, w);
    Driver("glRasterPos4i","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glRasterPos4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4iv)(v);
    Driver("glRasterPos4iv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4s)(x, y, z, w);
    Driver("glRasterPos4s","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glRasterPos4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4sv)(v);
    Driver("glRasterPos4sv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glReadBuffer(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadBuffer)(mode);
    Driver("glReadBuffer","(", toString(mode), ")");
}

static void REGAL_CALL log_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadPixels)(x, y, width, height, format, type, pixels);
    Driver("glReadPixels","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectd)(x1, y1, x2, y2);
    Driver("glRectd","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
}

static void REGAL_CALL log_glRectdv(const GLdouble *v1, const GLdouble *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectdv)(v1, v2);
    Driver("glRectdv","(", boost::print::array(v1,2), ", ", boost::print::array(v2,2), ")");
}

static void REGAL_CALL log_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectf)(x1, y1, x2, y2);
    Driver("glRectf","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
}

static void REGAL_CALL log_glRectfv(const GLfloat *v1, const GLfloat *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectfv)(v1, v2);
    Driver("glRectfv","(", boost::print::array(v1,2), ", ", boost::print::array(v2,2), ")");
}

static void REGAL_CALL log_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRecti)(x1, y1, x2, y2);
    Driver("glRecti","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
}

static void REGAL_CALL log_glRectiv(const GLint *v1, const GLint *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectiv)(v1, v2);
    Driver("glRectiv","(", boost::print::array(v1,2), ", ", boost::print::array(v2,2), ")");
}

static void REGAL_CALL log_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRects)(x1, y1, x2, y2);
    Driver("glRects","(", x1, ", ", y1, ", ", x2, ", ", y2, ")");
}

static void REGAL_CALL log_glRectsv(const GLshort *v1, const GLshort *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRectsv)(v1, v2);
    Driver("glRectsv","(", boost::print::array(v1,2), ", ", boost::print::array(v2,2), ")");
}

static GLint REGAL_CALL log_glRenderMode(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glRenderMode)(mode);
    Driver("glRenderMode","(", toString(mode), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRotated)(angle, x, y, z);
    Driver("glRotated","(", angle, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRotatef)(angle, x, y, z);
    Driver("glRotatef","(", angle, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScaled)(x, y, z);
    Driver("glScaled","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScalef)(x, y, z);
    Driver("glScalef","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScissor)(x, y, width, height);
    Driver("glScissor","(", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glSelectBuffer(GLsizei size, GLuint *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSelectBuffer)(size, buffer);
    Driver("glSelectBuffer","(", size, ", ", boost::print::array(buffer,size), ")");
}

static void REGAL_CALL log_glShadeModel(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShadeModel)(mode);
    Driver("glShadeModel","(", toString(mode), ")");
}

static void REGAL_CALL log_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilFunc)(func, ref, mask);
    Driver("glStencilFunc","(", toString(func), ", ", boost::print::hex(ref), ", ", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glStencilMask(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilMask)(mask);
    Driver("glStencilMask","(", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilOp)(fail, zfail, zpass);
    Driver("glStencilOp","(", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
}

static void REGAL_CALL log_glTexCoord1d(GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1d)(s);
    Driver("glTexCoord1d","(", s, ")");
}

static void REGAL_CALL log_glTexCoord1dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1dv)(v);
    Driver("glTexCoord1dv","(", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glTexCoord1f(GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1f)(s);
    Driver("glTexCoord1f","(", s, ")");
}

static void REGAL_CALL log_glTexCoord1fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1fv)(v);
    Driver("glTexCoord1fv","(", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glTexCoord1i(GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1i)(s);
    Driver("glTexCoord1i","(", s, ")");
}

static void REGAL_CALL log_glTexCoord1iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1iv)(v);
    Driver("glTexCoord1iv","(", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glTexCoord1s(GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1s)(s);
    Driver("glTexCoord1s","(", s, ")");
}

static void REGAL_CALL log_glTexCoord1sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1sv)(v);
    Driver("glTexCoord1sv","(", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glTexCoord2d(GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2d)(s, t);
    Driver("glTexCoord2d","(", s, ", ", t, ")");
}

static void REGAL_CALL log_glTexCoord2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2dv)(v);
    Driver("glTexCoord2dv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glTexCoord2f(GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2f)(s, t);
    Driver("glTexCoord2f","(", s, ", ", t, ")");
}

static void REGAL_CALL log_glTexCoord2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fv)(v);
    Driver("glTexCoord2fv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glTexCoord2i(GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2i)(s, t);
    Driver("glTexCoord2i","(", s, ", ", t, ")");
}

static void REGAL_CALL log_glTexCoord2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2iv)(v);
    Driver("glTexCoord2iv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glTexCoord2s(GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2s)(s, t);
    Driver("glTexCoord2s","(", s, ", ", t, ")");
}

static void REGAL_CALL log_glTexCoord2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2sv)(v);
    Driver("glTexCoord2sv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3d)(s, t, r);
    Driver("glTexCoord3d","(", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glTexCoord3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3dv)(v);
    Driver("glTexCoord3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3f)(s, t, r);
    Driver("glTexCoord3f","(", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glTexCoord3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3fv)(v);
    Driver("glTexCoord3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord3i(GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3i)(s, t, r);
    Driver("glTexCoord3i","(", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glTexCoord3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3iv)(v);
    Driver("glTexCoord3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3s)(s, t, r);
    Driver("glTexCoord3s","(", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glTexCoord3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3sv)(v);
    Driver("glTexCoord3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4d)(s, t, r, q);
    Driver("glTexCoord4d","(", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glTexCoord4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4dv)(v);
    Driver("glTexCoord4dv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4f)(s, t, r, q);
    Driver("glTexCoord4f","(", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glTexCoord4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fv)(v);
    Driver("glTexCoord4fv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4i)(s, t, r, q);
    Driver("glTexCoord4i","(", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glTexCoord4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4iv)(v);
    Driver("glTexCoord4iv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4s)(s, t, r, q);
    Driver("glTexCoord4s","(", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glTexCoord4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4sv)(v);
    Driver("glTexCoord4sv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnvf)(target, pname, param);
    Driver("glTexEnvf","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnvfv)(target, pname, params);
    Driver("glTexEnvfv","(", toString(target), ", ", toString(pname), ", ", boost::print::array(params,helper::size::texEnvv(target, pname)), ")");
}

static void REGAL_CALL log_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnvi)(target, pname, param);
    Driver("glTexEnvi","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnviv)(target, pname, params);
    Driver("glTexEnviv","(", toString(target), ", ", toString(pname), ", ", boost::print::array(params,helper::size::texEnvv(target, pname)), ")");
}

static void REGAL_CALL log_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGend)(coord, pname, param);
    Driver("glTexGend","(", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGendv)(coord, pname, params);
    Driver("glTexGendv","(", toString(coord), ", ", toString(pname), ", ", boost::print::array(params,helper::size::texGenv(pname)), ")");
}

static void REGAL_CALL log_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenf)(coord, pname, param);
    Driver("glTexGenf","(", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenfv)(coord, pname, params);
    Driver("glTexGenfv","(", toString(coord), ", ", toString(pname), ", ", boost::print::array(params,helper::size::texGenv(pname)), ")");
}

static void REGAL_CALL log_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGeni)(coord, pname, param);
    Driver("glTexGeni","(", toString(coord), ", ", toString(pname), ", ", GLenumToString(static_cast<GLenum>(param)), ")");
}

static void REGAL_CALL log_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGeniv)(coord, pname, params);
    Driver("glTexGeniv","(", toString(coord), ", ", toString(pname), ", ", boost::print::array(params,helper::size::texGenv(pname)), ")");
}

static void REGAL_CALL log_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
    Driver("glTexImage1D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
    Driver("glTexImage2D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterf)(target, pname, param);
    Driver("glTexParameterf","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
}

static void REGAL_CALL log_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterfv)(target, pname, params);
    Driver("glTexParameterfv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameteri)(target, pname, param);
    Driver("glTexParameteri","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
}

static void REGAL_CALL log_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameteriv)(target, pname, params);
    Driver("glTexParameteriv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTranslated)(x, y, z);
    Driver("glTranslated","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTranslatef)(x, y, z);
    Driver("glTranslatef","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2d)(x, y);
    Driver("glVertex2d","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertex2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2dv)(v);
    Driver("glVertex2dv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertex2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2f)(x, y);
    Driver("glVertex2f","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertex2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2fv)(v);
    Driver("glVertex2fv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertex2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2i)(x, y);
    Driver("glVertex2i","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertex2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2iv)(v);
    Driver("glVertex2iv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertex2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2s)(x, y);
    Driver("glVertex2s","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertex2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2sv)(v);
    Driver("glVertex2sv","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3d)(x, y, z);
    Driver("glVertex3d","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3dv)(v);
    Driver("glVertex3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3f)(x, y, z);
    Driver("glVertex3f","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3fv)(v);
    Driver("glVertex3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertex3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3i)(x, y, z);
    Driver("glVertex3i","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3iv)(v);
    Driver("glVertex3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertex3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3s)(x, y, z);
    Driver("glVertex3s","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3sv)(v);
    Driver("glVertex3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4d)(x, y, z, w);
    Driver("glVertex4d","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertex4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4dv)(v);
    Driver("glVertex4dv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4f)(x, y, z, w);
    Driver("glVertex4f","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertex4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4fv)(v);
    Driver("glVertex4fv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4i)(x, y, z, w);
    Driver("glVertex4i","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertex4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4iv)(v);
    Driver("glVertex4iv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4s)(x, y, z, w);
    Driver("glVertex4s","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertex4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4sv)(v);
    Driver("glVertex4sv","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glViewport)(x, y, width, height);
    Driver("glViewport","(", x, ", ", y, ", ", width, ", ", height, ")");
}

// GL_VERSION_1_1

static GLboolean REGAL_CALL log_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glAreTexturesResident)(n, textures, residences);
    Driver("glAreTexturesResident","(", n, ", ", boost::print::array(textures,n), ", ", boost::print::array(residences,n), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glArrayElement(GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glArrayElement)(index);
    Driver("glArrayElement","(", index, ")");
}

static void REGAL_CALL log_glBindTexture(GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindTexture)(target, texture);
    Driver("glBindTexture","(", toString(target), ", ", texture, ")");
}

static void REGAL_CALL log_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorPointer)(size, type, stride, pointer);
    Driver("glColorPointer","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1D)(target, level, internalformat, x, y, width, border);
    Driver("glCopyTexImage1D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);
    Driver("glCopyTexImage2D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1D)(target, level, xoffset, x, y, width);
    Driver("glCopyTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);
    Driver("glCopyTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glDeleteTextures(GLsizei n, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteTextures)(n, textures);
    Driver("glDeleteTextures","(", n, ", ", boost::print::array(textures,n), ")");
}

static void REGAL_CALL log_glDisableClientState(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableClientState)(cap);
    Driver("glDisableClientState","(", toString(cap), ")");
}

static void REGAL_CALL log_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArrays)(mode, first, count);
    Driver("glDrawArrays","(", toString(mode), ", ", first, ", ", count, ")");
}

static void REGAL_CALL log_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElements)(mode, count, type, indices);
    Driver("glDrawElements","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(indices),Logging::pointers), ")");
}

static void REGAL_CALL log_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointer)(stride, pointer);
    Driver("glEdgeFlagPointer","(", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glEnableClientState(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableClientState)(cap);
    Driver("glEnableClientState","(", toString(cap), ")");
}

static void REGAL_CALL log_glGenTextures(GLsizei n, GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenTextures)(n, textures);
    Driver("glGenTextures","(", n, ", ", boost::print::array(textures,n), ")");
}

static void REGAL_CALL log_glGetPointerv(GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPointerv)(pname, params);
    Driver("glGetPointerv","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexPointer)(type, stride, pointer);
    Driver("glIndexPointer","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glIndexub(GLubyte c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexub)(c);
    Driver("glIndexub","(", c, ")");
}

static void REGAL_CALL log_glIndexubv(const GLubyte *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexubv)(c);
    Driver("glIndexubv","(", boost::print::array(c,1), ")");
}

static void REGAL_CALL log_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInterleavedArrays)(format, stride, pointer);
    Driver("glInterleavedArrays","(", toString(format), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsTexture(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTexture)(texture);
    Driver("glIsTexture","(", texture, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalPointer)(type, stride, pointer);
    Driver("glNormalPointer","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glPolygonOffset(GLfloat factor, GLfloat units)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffset)(factor, units);
    Driver("glPolygonOffset","(", factor, ", ", units, ")");
}

static void REGAL_CALL log_glPopClientAttrib(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopClientAttrib)();
    Driver("glPopClientAttrib","()");
}

static void REGAL_CALL log_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTextures)(n, textures, priorities);
    Driver("glPrioritizeTextures","(", n, ", ", boost::print::array(textures,n), ", ", boost::print::array(priorities,n), ")");
}

static void REGAL_CALL log_glPushClientAttrib(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttrib)(mask);
    Driver("glPushClientAttrib","(", mask, ")");
}

static void REGAL_CALL log_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointer)(size, type, stride, pointer);
    Driver("glTexCoordPointer","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1D)(target, level, xoffset, width, format, type, pixels);
    Driver("glTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);
    Driver("glTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexPointer)(size, type, stride, pointer);
    Driver("glVertexPointer","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_VERSION_1_2

static void REGAL_CALL log_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendColor)(red, green, blue, alpha);
    Driver("glBlendColor","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glBlendEquation(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquation)(mode);
    Driver("glBlendEquation","(", toString(mode), ")");
}

static void REGAL_CALL log_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    Driver("glCopyTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElements)(mode, start, end, count, type, indices);
    Driver("glDrawRangeElements","(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
    Driver("glTexImage3D","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    Driver("glTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

// GL_VERSION_1_3

static void REGAL_CALL log_glActiveTexture(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveTexture)(texture);
    Driver("glActiveTexture","(", toString(texture), ")");
}

static void REGAL_CALL log_glClientActiveTexture(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTexture)(texture);
    Driver("glClientActiveTexture","(", toString(texture), ")");
}

static void REGAL_CALL log_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);
    Driver("glCompressedTexImage1D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);
    Driver("glCompressedTexImage2D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);
    Driver("glCompressedTexImage3D","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);
    Driver("glCompressedTexSubImage1D","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    Driver("glCompressedTexSubImage2D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    Driver("glCompressedTexSubImage3D","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

static void REGAL_CALL log_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImage)(target, lod, img);
    Driver("glGetCompressedTexImage","(", toString(target), ", ", lod, ", ", boost::print::optional(img,Logging::pointers), ")");
}

static void REGAL_CALL log_glLoadTransposeMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixd)(m);
    Driver("glLoadTransposeMatrixd","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glLoadTransposeMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixf)(m);
    Driver("glLoadTransposeMatrixf","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultTransposeMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixd)(m);
    Driver("glMultTransposeMatrixd","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultTransposeMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixf)(m);
    Driver("glMultTransposeMatrixf","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultiTexCoord1d(GLenum target, GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1d)(target, s);
    Driver("glMultiTexCoord1d","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dv)(target, v);
    Driver("glMultiTexCoord1dv","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1f(GLenum target, GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1f)(target, s);
    Driver("glMultiTexCoord1f","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fv)(target, v);
    Driver("glMultiTexCoord1fv","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1i(GLenum target, GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1i)(target, s);
    Driver("glMultiTexCoord1i","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iv)(target, v);
    Driver("glMultiTexCoord1iv","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1s(GLenum target, GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1s)(target, s);
    Driver("glMultiTexCoord1s","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sv)(target, v);
    Driver("glMultiTexCoord1sv","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2d)(target, s, t);
    Driver("glMultiTexCoord2d","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dv)(target, v);
    Driver("glMultiTexCoord2dv","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2f)(target, s, t);
    Driver("glMultiTexCoord2f","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fv)(target, v);
    Driver("glMultiTexCoord2fv","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2i)(target, s, t);
    Driver("glMultiTexCoord2i","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iv)(target, v);
    Driver("glMultiTexCoord2iv","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2s)(target, s, t);
    Driver("glMultiTexCoord2s","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sv)(target, v);
    Driver("glMultiTexCoord2sv","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3d)(target, s, t, r);
    Driver("glMultiTexCoord3d","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dv)(target, v);
    Driver("glMultiTexCoord3dv","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3f)(target, s, t, r);
    Driver("glMultiTexCoord3f","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fv)(target, v);
    Driver("glMultiTexCoord3fv","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3i)(target, s, t, r);
    Driver("glMultiTexCoord3i","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iv)(target, v);
    Driver("glMultiTexCoord3iv","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3s)(target, s, t, r);
    Driver("glMultiTexCoord3s","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sv)(target, v);
    Driver("glMultiTexCoord3sv","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4d)(target, s, t, r, q);
    Driver("glMultiTexCoord4d","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dv)(target, v);
    Driver("glMultiTexCoord4dv","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4f)(target, s, t, r, q);
    Driver("glMultiTexCoord4f","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fv)(target, v);
    Driver("glMultiTexCoord4fv","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4i)(target, s, t, r, q);
    Driver("glMultiTexCoord4i","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iv)(target, v);
    Driver("glMultiTexCoord4iv","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4s)(target, s, t, r, q);
    Driver("glMultiTexCoord4s","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sv)(target, v);
    Driver("glMultiTexCoord4sv","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glSampleCoverage(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverage)(value, invert);
    Driver("glSampleCoverage","(", value, ", ", toString(invert), ")");
}

// GL_VERSION_1_4

static void REGAL_CALL log_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    Driver("glBlendFuncSeparate","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
}

static void REGAL_CALL log_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointer)(type, stride, pointer);
    Driver("glFogCoordPointer","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glFogCoordd(GLdouble coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordd)(coord);
    Driver("glFogCoordd","(", coord, ")");
}

static void REGAL_CALL log_glFogCoorddv(const GLdouble *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddv)(coord);
    Driver("glFogCoorddv","(", boost::print::array(coord,1), ")");
}

static void REGAL_CALL log_glFogCoordf(GLfloat coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordf)(coord);
    Driver("glFogCoordf","(", coord, ")");
}

static void REGAL_CALL log_glFogCoordfv(const GLfloat *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfv)(coord);
    Driver("glFogCoordfv","(", boost::print::array(coord,1), ")");
}

static void REGAL_CALL log_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArrays)(mode, first, count, primcount);
    Driver("glMultiDrawArrays","(", toString(mode), ", ", boost::print::array(first,primcount), ", ", boost::print::array(count,primcount), ", ", primcount, ")");
}

static void REGAL_CALL log_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElements)(mode, count, type, indices, primcount);
    Driver("glMultiDrawElements","(", toString(mode), ", ", boost::print::array(count,primcount), ", ", toString(type), ", ", indices, ", ", primcount, ")");
}

static void REGAL_CALL log_glPointParameterf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterf)(pname, param);
    Driver("glPointParameterf","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfv)(pname, params);
    Driver("glPointParameterfv","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glPointParameteri(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameteri)(pname, param);
    Driver("glPointParameteri","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameteriv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriv)(pname, params);
    Driver("glPointParameteriv","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3b)(red, green, blue);
    Driver("glSecondaryColor3b","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bv)(v);
    Driver("glSecondaryColor3bv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3d)(red, green, blue);
    Driver("glSecondaryColor3d","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dv)(v);
    Driver("glSecondaryColor3dv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3f)(red, green, blue);
    Driver("glSecondaryColor3f","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fv)(v);
    Driver("glSecondaryColor3fv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3i)(red, green, blue);
    Driver("glSecondaryColor3i","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iv)(v);
    Driver("glSecondaryColor3iv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3s)(red, green, blue);
    Driver("glSecondaryColor3s","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sv)(v);
    Driver("glSecondaryColor3sv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ub)(red, green, blue);
    Driver("glSecondaryColor3ub","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubv)(v);
    Driver("glSecondaryColor3ubv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ui)(red, green, blue);
    Driver("glSecondaryColor3ui","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiv)(v);
    Driver("glSecondaryColor3uiv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3us)(red, green, blue);
    Driver("glSecondaryColor3us","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usv)(v);
    Driver("glSecondaryColor3usv","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointer)(size, type, stride, pointer);
    Driver("glSecondaryColorPointer","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glWindowPos2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2d)(x, y);
    Driver("glWindowPos2d","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2dv(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dv)(p);
    Driver("glWindowPos2dv","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2f)(x, y);
    Driver("glWindowPos2f","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2fv(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fv)(p);
    Driver("glWindowPos2fv","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2i)(x, y);
    Driver("glWindowPos2i","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2iv(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iv)(p);
    Driver("glWindowPos2iv","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2s)(x, y);
    Driver("glWindowPos2s","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2sv(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sv)(p);
    Driver("glWindowPos2sv","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3d)(x, y, z);
    Driver("glWindowPos3d","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3dv(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dv)(p);
    Driver("glWindowPos3dv","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3f)(x, y, z);
    Driver("glWindowPos3f","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3fv(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fv)(p);
    Driver("glWindowPos3fv","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3i)(x, y, z);
    Driver("glWindowPos3i","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3iv(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iv)(p);
    Driver("glWindowPos3iv","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3s)(x, y, z);
    Driver("glWindowPos3s","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3sv(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sv)(p);
    Driver("glWindowPos3sv","(", boost::print::array(p,3), ")");
}

// GL_VERSION_1_5

static void REGAL_CALL log_glBeginQuery(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginQuery)(target, id);
    Driver("glBeginQuery","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glBindBuffer(GLenum target, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBuffer)(target, buffer);
    Driver("glBindBuffer","(", toString(target), ", ", buffer, ")");
}

static void REGAL_CALL log_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferData)(target, size, data, usage);
    Driver("glBufferData","(", toString(target), ", ", size, ", ", boost::print::raw(data,Logging::rawLimit(data ? size : 0)), ", ", toString(usage), ")");
}

static void REGAL_CALL log_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferSubData)(target, offset, size, data);
    Driver("glBufferSubData","(", toString(target), ", ", offset, ", ", size, ", ", boost::print::raw(data,Logging::rawLimit(data ? size : 0)), ")");
}

static void REGAL_CALL log_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffers)(n, buffers);
    Driver("glDeleteBuffers","(", n, ", ", boost::print::array(buffers,n), ")");
}

static void REGAL_CALL log_glDeleteQueries(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueries)(n, ids);
    Driver("glDeleteQueries","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glEndQuery(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndQuery)(target);
    Driver("glEndQuery","(", toString(target), ")");
}

static void REGAL_CALL log_glGenBuffers(GLsizei n, GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenBuffers)(n, buffers);
    Driver("glGenBuffers","(", n, ", ", boost::print::array(buffers,n), ")");
}

static void REGAL_CALL log_glGenQueries(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenQueries)(n, ids);
    Driver("glGenQueries","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteriv)(target, pname, params);
    Driver("glGetBufferParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointerv)(target, pname, params);
    Driver("glGetBufferPointerv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubData)(target, offset, size, data);
    Driver("glGetBufferSubData","(", toString(target), ", ", offset, ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectiv)(id, pname, params);
    Driver("glGetQueryObjectiv","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuiv)(id, pname, params);
    Driver("glGetQueryObjectuiv","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryiv)(target, pname, params);
    Driver("glGetQueryiv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsBuffer(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsBuffer)(buffer);
    Driver("glIsBuffer","(", buffer, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsQuery(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsQuery)(id);
    Driver("glIsQuery","(", id, ")", " returned ", toString(ret));
    return ret;
}

static GLvoid *REGAL_CALL log_glMapBuffer(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapBuffer)(target, access);
    Driver("glMapBuffer","(", toString(target), ", ", toString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLboolean REGAL_CALL log_glUnmapBuffer(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glUnmapBuffer)(target);
    Driver("glUnmapBuffer","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

// GL_VERSION_2_0

static void REGAL_CALL log_glAttachShader(GLuint program, GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAttachShader)(program, shader);
    Driver("glAttachShader","(", program, ", ", shader, ")");
}

static void REGAL_CALL log_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocation)(program, index, name);
    Driver("glBindAttribLocation","(", program, ", ", index, ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparate)(modeRGB, modeAlpha);
    Driver("glBlendEquationSeparate","(", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

static void REGAL_CALL log_glCompileShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompileShader)(shader);
    Driver("glCompileShader","(", shader, ")");
}

static GLuint REGAL_CALL log_glCreateProgram(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glCreateProgram)();
    Driver("glCreateProgram","()", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glCreateShader(GLenum type)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glCreateShader)(type);
    Driver("glCreateShader","(", toString(type), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glDeleteProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgram)(program);
    Driver("glDeleteProgram","(", program, ")");
}

static void REGAL_CALL log_glDeleteShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteShader)(shader);
    Driver("glDeleteShader","(", shader, ")");
}

static void REGAL_CALL log_glDetachShader(GLuint program, GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDetachShader)(program, shader);
    Driver("glDetachShader","(", program, ", ", shader, ")");
}

static void REGAL_CALL log_glDisableVertexAttribArray(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArray)(index);
    Driver("glDisableVertexAttribArray","(", index, ")");
}

static void REGAL_CALL log_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffers)(n, bufs);
    Driver("glDrawBuffers","(", n, ", ", boost::print::array(bufs,n), ")");
}

static void REGAL_CALL log_glEnableVertexAttribArray(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArray)(index);
    Driver("glEnableVertexAttribArray","(", index, ")");
}

static void REGAL_CALL log_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttrib)(program, index, bufSize, length, size, type, name);
    Driver("glGetActiveAttrib","(", program, ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniform)(program, index, bufSize, length, size, type, name);
    Driver("glGetActiveUniform","(", program, ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedShaders)(program, maxCount, count, shaders);
    Driver("glGetAttachedShaders","(", program, ", ", maxCount, ", ", boost::print::array(count,1), ", ", boost::print::array(shaders,count ? *count : 0), ")");
}

static GLint REGAL_CALL log_glGetAttribLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetAttribLocation)(program, name);
    Driver("glGetAttribLocation","(", program, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInfoLog)(program, bufSize, length, infoLog);
    Driver("glGetProgramInfoLog","(", program, ", ", bufSize, ", ", boost::print::array(length,length ? 1 : 0), ", ", boost::print::quote(infoLog,'"'), ")");
}

static void REGAL_CALL log_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramiv)(program, pname, params);
    Driver("glGetProgramiv","(", program, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetShaderInfoLog)(shader, bufSize, length, infoLog);
    Driver("glGetShaderInfoLog","(", shader, ", ", bufSize, ", ", boost::print::array(length,length ? 1 : 0), ", ", boost::print::quote(infoLog,'"'), ")");
}

static void REGAL_CALL log_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSource)(shader, bufSize, length, source);
    Driver("glGetShaderSource","(", shader, ", ", bufSize, ", ", boost::print::array(length,length ? 1 : 0), ", ", boost::print::quote(source,'"'), ")");
}

static void REGAL_CALL log_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetShaderiv)(shader, pname, params);
    Driver("glGetShaderiv","(", shader, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static GLint REGAL_CALL log_glGetUniformLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetUniformLocation)(program, name);
    Driver("glGetUniformLocation","(", program, ", ", boost::print::quote(reinterpret_cast<const char *>(name),'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfv)(program, location, params);
    Driver("glGetUniformfv","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformiv)(program, location, params);
    Driver("glGetUniformiv","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointerv)(index, pname, pointer);
    Driver("glGetVertexAttribPointerv","(", index, ", ", toString(pname), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdv)(index, pname, params);
    Driver("glGetVertexAttribdv","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfv)(index, pname, params);
    Driver("glGetVertexAttribfv","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribiv)(index, pname, params);
    Driver("glGetVertexAttribiv","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static GLboolean REGAL_CALL log_glIsProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsProgram)(program);
    Driver("glIsProgram","(", program, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsShader)(shader);
    Driver("glIsShader","(", shader, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glLinkProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLinkProgram)(program);
    Driver("glLinkProgram","(", program, ")");
}

static void REGAL_CALL log_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderSource)(shader, count, string, length);
    Driver("glShaderSource","(", shader, ", ", count, ", ", boost::print::array(reinterpret_cast<const char * const *>(string),string ? count : 0,"\""), ", ", boost::print::array(length,length ? count : 0), ")");
}

static void REGAL_CALL log_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparate)(face, func, ref, mask);
    Driver("glStencilFuncSeparate","(", toString(face), ", ", toString(func), ", ", boost::print::hex(ref), ", ", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glStencilMaskSeparate(GLenum face, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilMaskSeparate)(face, mask);
    Driver("glStencilMaskSeparate","(", toString(face), ", ", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparate)(face, fail, zfail, zpass);
    Driver("glStencilOpSeparate","(", toString(face), ", ", toString(fail), ", ", toString(zfail), ", ", toString(zpass), ")");
}

static void REGAL_CALL log_glUniform1f(GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1f)(location, v0);
    Driver("glUniform1f","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1fv)(location, count, value);
    Driver("glUniform1fv","(", location, ", ", count, ", ", boost::print::array(value,1 * count), ")");
}

static void REGAL_CALL log_glUniform1i(GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1i)(location, v0);
    Driver("glUniform1i","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1iv)(location, count, value);
    Driver("glUniform1iv","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2f)(location, v0, v1);
    Driver("glUniform2f","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2fv)(location, count, value);
    Driver("glUniform2fv","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2i(GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2i)(location, v0, v1);
    Driver("glUniform2i","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2iv)(location, count, value);
    Driver("glUniform2iv","(", location, ", ", count, ", ", boost::print::array(value,2 * count), ")");
}

static void REGAL_CALL log_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3f)(location, v0, v1, v2);
    Driver("glUniform3f","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3fv)(location, count, value);
    Driver("glUniform3fv","(", location, ", ", count, ", ", boost::print::array(value,3 * count), ")");
}

static void REGAL_CALL log_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3i)(location, v0, v1, v2);
    Driver("glUniform3i","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3iv)(location, count, value);
    Driver("glUniform3iv","(", location, ", ", count, ", ", boost::print::array(value,3 * count), ")");
}

static void REGAL_CALL log_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4f)(location, v0, v1, v2, v3);
    Driver("glUniform4f","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4fv)(location, count, value);
    Driver("glUniform4fv","(", location, ", ", count, ", ", boost::print::array(value,4 * count), ")");
}

static void REGAL_CALL log_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4i)(location, v0, v1, v2, v3);
    Driver("glUniform4i","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4iv)(location, count, value);
    Driver("glUniform4iv","(", location, ", ", count, ", ", boost::print::array(value,4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fv)(location, count, transpose, value);
    Driver("glUniformMatrix2fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fv)(location, count, transpose, value);
    Driver("glUniformMatrix3fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 3 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fv)(location, count, transpose, value);
    Driver("glUniformMatrix4fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 4 * count), ")");
}

static void REGAL_CALL log_glUseProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUseProgram)(program);
    Driver("glUseProgram","(", program, ")");
    #if !REGAL_SYS_PPAPI
    if (Logging::enableDriver && program && log_glIsProgram(program))
    {
      GLuint  _shaders[16];
      GLsizei _count;
      log_glGetAttachedShaders(program,16,&_count,_shaders);
    }
    #endif // REGAL_SYS_PPAPI
}

static void REGAL_CALL log_glValidateProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glValidateProgram)(program);
    Driver("glValidateProgram","(", program, ")");
}

static void REGAL_CALL log_glVertexAttrib1d(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1d)(index, x);
    Driver("glVertexAttrib1d","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dv)(index, v);
    Driver("glVertexAttrib1dv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1f(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1f)(index, x);
    Driver("glVertexAttrib1f","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fv)(index, v);
    Driver("glVertexAttrib1fv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1s(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1s)(index, x);
    Driver("glVertexAttrib1s","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sv)(index, v);
    Driver("glVertexAttrib1sv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2d)(index, x, y);
    Driver("glVertexAttrib2d","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dv)(index, v);
    Driver("glVertexAttrib2dv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2f)(index, x, y);
    Driver("glVertexAttrib2f","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fv)(index, v);
    Driver("glVertexAttrib2fv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2s)(index, x, y);
    Driver("glVertexAttrib2s","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sv)(index, v);
    Driver("glVertexAttrib2sv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3d)(index, x, y, z);
    Driver("glVertexAttrib3d","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dv)(index, v);
    Driver("glVertexAttrib3dv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3f)(index, x, y, z);
    Driver("glVertexAttrib3f","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fv)(index, v);
    Driver("glVertexAttrib3fv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3s)(index, x, y, z);
    Driver("glVertexAttrib3s","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sv)(index, v);
    Driver("glVertexAttrib3sv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nbv)(index, v);
    Driver("glVertexAttrib4Nbv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Niv)(index, v);
    Driver("glVertexAttrib4Niv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nsv)(index, v);
    Driver("glVertexAttrib4Nsv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nub)(index, x, y, z, w);
    Driver("glVertexAttrib4Nub","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nubv)(index, v);
    Driver("glVertexAttrib4Nubv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nuiv)(index, v);
    Driver("glVertexAttrib4Nuiv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nusv)(index, v);
    Driver("glVertexAttrib4Nusv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bv)(index, v);
    Driver("glVertexAttrib4bv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4d)(index, x, y, z, w);
    Driver("glVertexAttrib4d","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dv)(index, v);
    Driver("glVertexAttrib4dv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4f)(index, x, y, z, w);
    Driver("glVertexAttrib4f","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fv)(index, v);
    Driver("glVertexAttrib4fv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4iv)(index, v);
    Driver("glVertexAttrib4iv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4s)(index, x, y, z, w);
    Driver("glVertexAttrib4s","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sv)(index, v);
    Driver("glVertexAttrib4sv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubv)(index, v);
    Driver("glVertexAttrib4ubv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uiv)(index, v);
    Driver("glVertexAttrib4uiv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usv)(index, v);
    Driver("glVertexAttrib4usv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
    Driver("glVertexAttribPointer","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_VERSION_2_1

static void REGAL_CALL log_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3fv)(location, count, transpose, value);
    Driver("glUniformMatrix2x3fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 3 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4fv)(location, count, transpose, value);
    Driver("glUniformMatrix2x4fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2fv)(location, count, transpose, value);
    Driver("glUniformMatrix3x2fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4fv)(location, count, transpose, value);
    Driver("glUniformMatrix3x4fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2fv)(location, count, transpose, value);
    Driver("glUniformMatrix4x2fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3fv)(location, count, transpose, value);
    Driver("glUniformMatrix4x3fv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 3 * count), ")");
}

// GL_VERSION_3_0

static void REGAL_CALL log_glBeginConditionalRender(GLuint id, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRender)(id, mode);
    Driver("glBeginConditionalRender","(", id, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glBeginTransformFeedback(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedback)(primitiveMode);
    Driver("glBeginTransformFeedback","(", toString(primitiveMode), ")");
}

static void REGAL_CALL log_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocation)(program, color, name);
    Driver("glBindFragDataLocation","(", program, ", ", color, ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glClampColor(GLenum target, GLenum clamp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClampColor)(target, clamp);
    Driver("glClampColor","(", toString(target), ", ", toString(clamp), ")");
}

static void REGAL_CALL log_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfi)(buffer, drawbuffer, depth, stencil);
    Driver("glClearBufferfi","(", toString(buffer), ", ", drawbuffer, ", ", depth, ", ", stencil, ")");
}

static void REGAL_CALL log_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfv)(buffer, drawbuffer, value);
    Driver("glClearBufferfv","(", toString(buffer), ", ", drawbuffer, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferiv)(buffer, drawbuffer, value);
    Driver("glClearBufferiv","(", toString(buffer), ", ", drawbuffer, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferuiv)(buffer, drawbuffer, value);
    Driver("glClearBufferuiv","(", toString(buffer), ", ", drawbuffer, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorMaski)(index, r, g, b, a);
    Driver("glColorMaski","(", index, ", ", toString(r), ", ", toString(g), ", ", toString(b), ", ", toString(a), ")");
}

static void REGAL_CALL log_glDisablei(GLenum cap, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisablei)(cap, index);
    Driver("glDisablei","(", toString(cap), ", ", index, ")");
}

static void REGAL_CALL log_glEnablei(GLenum cap, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnablei)(cap, index);
    Driver("glEnablei","(", toString(cap), ", ", index, ")");
}

static void REGAL_CALL log_glEndConditionalRender(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRender)();
    Driver("glEndConditionalRender","()");
}

static void REGAL_CALL log_glEndTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedback)();
    Driver("glEndTransformFeedback","()");
}

static void REGAL_CALL log_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBooleani_v)(target, index, data);
    Driver("glGetBooleani_v","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static GLint REGAL_CALL log_glGetFragDataLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetFragDataLocation)(program, name);
    Driver("glGetFragDataLocation","(", program, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static const GLubyte *REGAL_CALL log_glGetStringi(GLenum name, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    const GLubyte * ret = _next->call(&_next->glGetStringi)(name, index);
    Driver("glGetStringi","(", toString(name), ", ", index, ")", " returned ", boost::print::quote(reinterpret_cast<const GLchar *>(ret),'"'));
    return ret;
}

static void REGAL_CALL log_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIiv)(target, pname, params);
    Driver("glGetTexParameterIiv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuiv)(target, pname, params);
    Driver("glGetTexParameterIuiv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);
    Driver("glGetTransformFeedbackVarying","(", program, ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuiv)(program, location, params);
    Driver("glGetUniformuiv","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIiv)(index, pname, params);
    Driver("glGetVertexAttribIiv","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuiv)(index, pname, params);
    Driver("glGetVertexAttribIuiv","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static GLboolean REGAL_CALL log_glIsEnabledi(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsEnabledi)(target, index);
    Driver("glIsEnabledi","(", toString(target), ", ", index, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIiv)(target, pname, params);
    Driver("glTexParameterIiv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuiv)(target, pname, params);
    Driver("glTexParameterIuiv","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryings)(program, count, varyings, bufferMode);
    Driver("glTransformFeedbackVaryings","(", program, ", ", count, ", ", boost::print::array(varyings,count,"\""), ", ", toString(bufferMode), ")");
}

static void REGAL_CALL log_glUniform1ui(GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui)(location, v0);
    Driver("glUniform1ui","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiv)(location, count, value);
    Driver("glUniform1uiv","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui)(location, v0, v1);
    Driver("glUniform2ui","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiv)(location, count, value);
    Driver("glUniform2uiv","(", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui)(location, v0, v1, v2);
    Driver("glUniform3ui","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiv)(location, count, value);
    Driver("glUniform3uiv","(", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui)(location, v0, v1, v2, v3);
    Driver("glUniform4ui","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiv)(location, count, value);
    Driver("glUniform4uiv","(", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glVertexAttribI1i(GLuint index, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1i)(index, x);
    Driver("glVertexAttribI1i","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribI1iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iv)(index, v);
    Driver("glVertexAttribI1iv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribI1ui(GLuint index, GLuint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ui)(index, x);
    Driver("glVertexAttribI1ui","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiv)(index, v);
    Driver("glVertexAttribI1uiv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2i)(index, x, y);
    Driver("glVertexAttribI2i","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribI2iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iv)(index, v);
    Driver("glVertexAttribI2iv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ui)(index, x, y);
    Driver("glVertexAttribI2ui","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiv)(index, v);
    Driver("glVertexAttribI2uiv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3i)(index, x, y, z);
    Driver("glVertexAttribI3i","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribI3iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iv)(index, v);
    Driver("glVertexAttribI3iv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ui)(index, x, y, z);
    Driver("glVertexAttribI3ui","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiv)(index, v);
    Driver("glVertexAttribI3uiv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bv)(index, v);
    Driver("glVertexAttribI4bv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4i)(index, x, y, z, w);
    Driver("glVertexAttribI4i","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribI4iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iv)(index, v);
    Driver("glVertexAttribI4iv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4sv)(index, v);
    Driver("glVertexAttribI4sv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubv)(index, v);
    Driver("glVertexAttribI4ubv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ui)(index, x, y, z, w);
    Driver("glVertexAttribI4ui","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiv)(index, v);
    Driver("glVertexAttribI4uiv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4usv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usv)(index, v);
    Driver("glVertexAttribI4usv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointer)(index, size, type, stride, pointer);
    Driver("glVertexAttribIPointer","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_VERSION_3_1

static void REGAL_CALL log_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstanced)(mode, start, count, primcount);
    Driver("glDrawArraysInstanced","(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
}

static void REGAL_CALL log_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstanced)(mode, count, type, indices, primcount);
    Driver("glDrawElementsInstanced","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ")");
}

static void REGAL_CALL log_glPrimitiveRestartIndex(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndex)(index);
    Driver("glPrimitiveRestartIndex","(", index, ")");
}

static void REGAL_CALL log_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBuffer)(target, internalformat, buffer);
    Driver("glTexBuffer","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
}

// GL_VERSION_3_2

static void REGAL_CALL log_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture)(target, attachment, texture, level);
    Driver("glFramebufferTexture","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFace)(target, attachment, texture, level, face);
    Driver("glFramebufferTextureFace","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
}

static void REGAL_CALL log_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteri64v)(target, pname, params);
    Driver("glGetBufferParameteri64v","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64i_v)(target, index, data);
    Driver("glGetInteger64i_v","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

// GL_VERSION_3_3

static void REGAL_CALL log_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisor)(index, divisor);
    Driver("glVertexAttribDivisor","(", index, ", ", divisor, ")");
}

// GL_VERSION_4_0

static void REGAL_CALL log_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);
    Driver("glBlendEquationSeparatei","(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

static void REGAL_CALL log_glBlendEquationi(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationi)(buf, mode);
    Driver("glBlendEquationi","(", buf, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    Driver("glBlendFuncSeparatei","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
}

static void REGAL_CALL log_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFunci)(buf, src, dst);
    Driver("glBlendFunci","(", buf, ", ", toString(src), ", ", toString(dst), ")");
}

// GL_3DFX_tbuffer

static void REGAL_CALL log_glTbufferMask3DFX(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTbufferMask3DFX)(mask);
    Driver("glTbufferMask3DFX","(", mask, ")");
}

// GL_AMD_debug_output

static void REGAL_CALL log_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackAMD)(callback, userParam);
    Driver("glDebugMessageCallbackAMD","(", boost::print::optional(userParam,Logging::pointers), ")");
}

static void REGAL_CALL log_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageEnableAMD)(category, severity, count, ids, enabled);
    Driver("glDebugMessageEnableAMD","(", toString(category), ", ", toString(severity), ", ", count, ", ", boost::print::optional(ids,Logging::pointers), ", ", toString(enabled), ")");
}

static void REGAL_CALL log_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertAMD)(category, severity, id, length, buf);
    Driver("glDebugMessageInsertAMD","(", toString(category), ", ", toString(severity), ", ", id, ", ", length, ", ", boost::print::quote(buf,'"'), ")");
}

static GLuint REGAL_CALL log_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetDebugMessageLogAMD)(count, bufsize, categories, severities, ids, lengths, message);
    Driver("glGetDebugMessageLogAMD","(", count, ", ", bufsize, ", ", boost::print::optional(categories,Logging::pointers), ", ", boost::print::optional(severities,Logging::pointers), ", ", boost::print::optional(ids,Logging::pointers), ", ", boost::print::optional(lengths,Logging::pointers), ", ", boost::print::quote(message,'"'), ")", " returned ", ret);
    return ret;
}

// GL_AMD_draw_buffers_blend

static void REGAL_CALL log_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationIndexedAMD)(buf, mode);
    Driver("glBlendEquationIndexedAMD","(", buf, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);
    Driver("glBlendEquationSeparateIndexedAMD","(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

static void REGAL_CALL log_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncIndexedAMD)(buf, src, dst);
    Driver("glBlendFuncIndexedAMD","(", buf, ", ", toString(src), ", ", toString(dst), ")");
}

static void REGAL_CALL log_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    Driver("glBlendFuncSeparateIndexedAMD","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
}

// GL_AMD_interleaved_elements

static void REGAL_CALL log_glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribParameteriAMD)(index, pname, param);
    Driver("glVertexAttribParameteriAMD","(", index, ", ", toString(pname), ", ", param, ")");
}

// GL_AMD_multi_draw_indirect

static void REGAL_CALL log_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
    Driver("glMultiDrawArraysIndirectAMD","(", toString(mode), ", ", boost::print::optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
}

static void REGAL_CALL log_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
    Driver("glMultiDrawElementsIndirectAMD","(", toString(mode), ", ", toString(type), ", ", boost::print::optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
}

// GL_AMD_name_gen_delete

static void REGAL_CALL log_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamesAMD)(identifier, num, names);
    Driver("glDeleteNamesAMD","(", toString(identifier), ", ", num, ", ", boost::print::optional(names,Logging::pointers), ")");
}

static void REGAL_CALL log_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenNamesAMD)(identifier, num, names);
    Driver("glGenNamesAMD","(", toString(identifier), ", ", num, ", ", boost::print::optional(names,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsNameAMD(GLenum identifier, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsNameAMD)(identifier, name);
    Driver("glIsNameAMD","(", toString(identifier), ", ", name, ")", " returned ", toString(ret));
    return ret;
}

// GL_AMD_performance_monitor

static void REGAL_CALL log_glBeginPerfMonitorAMD(GLuint monitor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginPerfMonitorAMD)(monitor);
    Driver("glBeginPerfMonitorAMD","(", monitor, ")");
}

static void REGAL_CALL log_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeletePerfMonitorsAMD)(n, monitors);
    Driver("glDeletePerfMonitorsAMD","(", n, ", ", boost::print::optional(monitors,Logging::pointers), ")");
}

static void REGAL_CALL log_glEndPerfMonitorAMD(GLuint monitor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndPerfMonitorAMD)(monitor);
    Driver("glEndPerfMonitorAMD","(", monitor, ")");
}

static void REGAL_CALL log_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenPerfMonitorsAMD)(n, monitors);
    Driver("glGenPerfMonitorsAMD","(", n, ", ", boost::print::optional(monitors,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);
    Driver("glGetPerfMonitorCounterDataAMD","(", monitor, ", ", toString(pname), ", ", dataSize, ", ", boost::print::optional(data,Logging::pointers), ", ", boost::print::array(bytesWritten,1), ")");
}

static void REGAL_CALL log_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);
    Driver("glGetPerfMonitorCounterInfoAMD","(", group, ", ", counter, ", ", toString(pname), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);
    Driver("glGetPerfMonitorCounterStringAMD","(", group, ", ", counter, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(counterString,'"'), ")");
}

static void REGAL_CALL log_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, countersSize, counters);
    Driver("glGetPerfMonitorCountersAMD","(", group, ", ", boost::print::array(numCounters,1), ", ", boost::print::array(maxActiveCounters,1), ", ", countersSize, ", ", boost::print::optional(counters,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);
    Driver("glGetPerfMonitorGroupStringAMD","(", group, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(groupString,'"'), ")");
}

static void REGAL_CALL log_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);
    Driver("glGetPerfMonitorGroupsAMD","(", boost::print::array(numGroups,1), ", ", groupsSize, ", ", boost::print::optional(groups,Logging::pointers), ")");
}

static void REGAL_CALL log_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);
    Driver("glSelectPerfMonitorCountersAMD","(", monitor, ", ", toString(enable), ", ", group, ", ", numCounters, ", ", boost::print::optional(counterList,Logging::pointers), ")");
}

// GL_AMD_sample_positions

static void REGAL_CALL log_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetMultisamplefvAMD)(pname, index, val);
    Driver("glSetMultisamplefvAMD","(", toString(pname), ", ", index, ", ", boost::print::optional(val,Logging::pointers), ")");
}

// GL_AMD_sparse_texture

static void REGAL_CALL log_glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorageSparseAMD)(target, internalFormat, width, height, depth, layers, flags);
    Driver("glTexStorageSparseAMD","(", toString(target), ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", layers, ", ", flags, ")");
}

static void REGAL_CALL log_glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorageSparseAMD)(texture, target, internalFormat, width, height, depth, layers, flags);
    Driver("glTextureStorageSparseAMD","(", texture, ", ", toString(target), ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", layers, ", ", flags, ")");
}

// GL_AMD_stencil_operation_extended

static void REGAL_CALL log_glStencilOpValueAMD(GLenum face, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilOpValueAMD)(face, value);
    Driver("glStencilOpValueAMD","(", toString(face), ", ", value, ")");
}

// GL_AMD_vertex_shader_tessellator

static void REGAL_CALL log_glTessellationFactorAMD(GLfloat factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTessellationFactorAMD)(factor);
    Driver("glTessellationFactorAMD","(", factor, ")");
}

static void REGAL_CALL log_glTessellationModeAMD(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTessellationModeAMD)(mode);
    Driver("glTessellationModeAMD","(", toString(mode), ")");
}

// GL_ANGLE_framebuffer_blit

static void REGAL_CALL log_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferANGLE)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("glBlitFramebufferANGLE","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
}

// GL_ANGLE_framebuffer_multisample

static void REGAL_CALL log_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleANGLE)(target, samples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisampleANGLE","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_ANGLE_instanced_arrays

static void REGAL_CALL log_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedANGLE)(mode, first, count, primcount);
    Driver("glDrawArraysInstancedANGLE","(", toString(mode), ", ", first, ", ", count, ", ", primcount, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedANGLE)(mode, count, type, indices, primcount);
    Driver("glDrawElementsInstancedANGLE","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ")");
}

static void REGAL_CALL log_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorANGLE)(index, divisor);
    Driver("glVertexAttribDivisorANGLE","(", index, ", ", divisor, ")");
}

// GL_ANGLE_translated_shader_source

static void REGAL_CALL log_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTranslatedShaderSourceANGLE)(shader, bufsize, length, source);
    Driver("glGetTranslatedShaderSourceANGLE","(", shader, ", ", bufsize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(source,'"'), ")");
}

// GL_APPLE_copy_texture_levels

static void REGAL_CALL log_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureLevelsAPPLE)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
    Driver("glCopyTextureLevelsAPPLE","(", destinationTexture, ", ", sourceTexture, ", ", sourceBaseLevel, ", ", sourceLevelCount, ")");
}

// GL_APPLE_element_array

static void REGAL_CALL log_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayAPPLE)(mode, first, count);
    Driver("glDrawElementArrayAPPLE","(", toString(mode), ", ", first, ", ", count, ")");
}

static void REGAL_CALL log_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);
    Driver("glDrawRangeElementArrayAPPLE","(", toString(mode), ", ", start, ", ", end, ", ", first, ", ", count, ")");
}

static void REGAL_CALL log_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glElementPointerAPPLE)(type, pointer);
    Driver("glElementPointerAPPLE","(", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
    Driver("glMultiDrawElementArrayAPPLE","(", toString(mode), ", ", boost::print::optional(first,Logging::pointers), ", ", boost::print::optional(count,Logging::pointers), ", ", primcount, ")");
}

static void REGAL_CALL log_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);
    Driver("glMultiDrawRangeElementArrayAPPLE","(", toString(mode), ", ", start, ", ", end, ", ", boost::print::optional(first,Logging::pointers), ", ", boost::print::optional(count,Logging::pointers), ", ", primcount, ")");
}

// GL_APPLE_fence

static void REGAL_CALL log_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesAPPLE)(n, fences);
    Driver("glDeleteFencesAPPLE","(", n, ", ", boost::print::optional(fences,Logging::pointers), ")");
}

static void REGAL_CALL log_glFinishFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceAPPLE)(fence);
    Driver("glFinishFenceAPPLE","(", fence, ")");
}

static void REGAL_CALL log_glFinishObjectAPPLE(GLenum object, GLint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinishObjectAPPLE)(object, name);
    Driver("glFinishObjectAPPLE","(", toString(object), ", ", name, ")");
}

static void REGAL_CALL log_glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenFencesAPPLE)(n, fences);
    Driver("glGenFencesAPPLE","(", n, ", ", boost::print::optional(fences,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsFenceAPPLE)(fence);
    Driver("glIsFenceAPPLE","(", fence, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glSetFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetFenceAPPLE)(fence);
    Driver("glSetFenceAPPLE","(", fence, ")");
}

static GLboolean REGAL_CALL log_glTestFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glTestFenceAPPLE)(fence);
    Driver("glTestFenceAPPLE","(", fence, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glTestObjectAPPLE(GLenum object, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glTestObjectAPPLE)(object, name);
    Driver("glTestObjectAPPLE","(", toString(object), ", ", name, ")", " returned ", toString(ret));
    return ret;
}

// GL_APPLE_flush_buffer_range

static void REGAL_CALL log_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferParameteriAPPLE)(target, pname, param);
    Driver("glBufferParameteriAPPLE","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeAPPLE)(target, offset, size);
    Driver("glFlushMappedBufferRangeAPPLE","(", toString(target), ", ", offset, ", ", size, ")");
}

// GL_APPLE_flush_render

static void REGAL_CALL log_glFinishRenderAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinishRenderAPPLE)();
    Driver("glFinishRenderAPPLE","()");
}

static void REGAL_CALL log_glFlushRenderAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushRenderAPPLE)();
    Driver("glFlushRenderAPPLE","()");
}

static void REGAL_CALL log_glSwapAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSwapAPPLE)();
    Driver("glSwapAPPLE","()");
}

// GL_APPLE_framebuffer_multisample

static void REGAL_CALL log_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleAPPLE)(target, samples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisampleAPPLE","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glResolveMultisampleFramebufferAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResolveMultisampleFramebufferAPPLE)();
    Driver("glResolveMultisampleFramebufferAPPLE","()");
}

// GL_APPLE_object_purgeable

static void REGAL_CALL log_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivAPPLE)(objectType, name, pname, params);
    Driver("glGetObjectParameterivAPPLE","(", toString(objectType), ", ", name, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLenum REGAL_CALL log_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glObjectPurgeableAPPLE)(objectType, name, option);
    Driver("glObjectPurgeableAPPLE","(", toString(objectType), ", ", name, ", ", toString(option), ")", " returned ", toString(ret));
    return ret;
}

static GLenum REGAL_CALL log_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glObjectUnpurgeableAPPLE)(objectType, name, option);
    Driver("glObjectUnpurgeableAPPLE","(", toString(objectType), ", ", name, ", ", toString(option), ")", " returned ", toString(ret));
    return ret;
}

// GL_APPLE_sync

static GLenum REGAL_CALL log_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glClientWaitSyncAPPLE)(sync, flags, timeout);
    Driver("glClientWaitSyncAPPLE","(", sync, ", ", flags, ", ", timeout, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glDeleteSyncAPPLE(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteSyncAPPLE)(sync);
    Driver("glDeleteSyncAPPLE","(", sync, ")");
}

static GLsync REGAL_CALL log_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLsync  ret = _next->call(&_next->glFenceSyncAPPLE)(condition, flags);
    Driver("glFenceSyncAPPLE","(", toString(condition), ", ", flags, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64vAPPLE)(pname, params);
    Driver("glGetInteger64vAPPLE","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSyncivAPPLE)(sync, pname, bufSize, length, values);
    Driver("glGetSyncivAPPLE","(", sync, ", ", toString(pname), ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsSyncAPPLE(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsSyncAPPLE)(sync);
    Driver("glIsSyncAPPLE","(", sync, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWaitSyncAPPLE)(sync, flags, timeout);
    Driver("glWaitSyncAPPLE","(", sync, ", ", flags, ", ", timeout, ")");
}

// GL_APPLE_texture_range

static void REGAL_CALL log_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterPointervAPPLE)(target, pname, params);
    Driver("glGetTexParameterPointervAPPLE","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureRangeAPPLE)(target, length, pointer);
    Driver("glTextureRangeAPPLE","(", toString(target), ", ", length, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_APPLE_vertex_array_object

static void REGAL_CALL log_glBindVertexArrayAPPLE(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayAPPLE)(array);
    Driver("glBindVertexArrayAPPLE","(", array, ")");
}

static void REGAL_CALL log_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysAPPLE)(n, arrays);
    Driver("glDeleteVertexArraysAPPLE","(", n, ", ", boost::print::optional(arrays,Logging::pointers), ")");
}

static void REGAL_CALL log_glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysAPPLE)(n, arrays);
    Driver("glGenVertexArraysAPPLE","(", n, ", ", boost::print::optional(arrays,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsVertexArrayAPPLE(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsVertexArrayAPPLE)(array);
    Driver("glIsVertexArrayAPPLE","(", array, ")", " returned ", toString(ret));
    return ret;
}

// GL_APPLE_vertex_array_range

static void REGAL_CALL log_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeAPPLE)(length, pointer);
    Driver("glFlushVertexArrayRangeAPPLE","(", length, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayParameteriAPPLE)(pname, param);
    Driver("glVertexArrayParameteriAPPLE","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeAPPLE)(length, pointer);
    Driver("glVertexArrayRangeAPPLE","(", length, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_APPLE_vertex_program_evaluators

static void REGAL_CALL log_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribAPPLE)(index, pname);
    Driver("glDisableVertexAttribAPPLE","(", index, ", ", toString(pname), ")");
}

static void REGAL_CALL log_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribAPPLE)(index, pname);
    Driver("glEnableVertexAttribAPPLE","(", index, ", ", toString(pname), ")");
}

static GLboolean REGAL_CALL log_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsVertexAttribEnabledAPPLE)(index, pname);
    Driver("glIsVertexAttribEnabledAPPLE","(", index, ", ", toString(pname), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);
    Driver("glMapVertexAttrib1dAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);
    Driver("glMapVertexAttrib1fAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", stride, ", ", order, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    Driver("glMapVertexAttrib2dAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ")");
}

static void REGAL_CALL log_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    Driver("glMapVertexAttrib2fAPPLE","(", index, ", ", size, ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ")");
}

// GL_ARB_ES2_compatibility

static void REGAL_CALL log_glClearDepthf(GLclampf d)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearDepthf)(d);
    Driver("glClearDepthf","(", d, ")");
}

static void REGAL_CALL log_glDepthRangef(GLclampf n, GLclampf f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangef)(n, f);
    Driver("glDepthRangef","(", n, ", ", f, ")");
}

static void REGAL_CALL log_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);
    Driver("glGetShaderPrecisionFormat","(", toString(shadertype), ", ", toString(precisiontype), ", ", boost::print::array(range,2), ", ", boost::print::array(precision,1), ")");
}

static void REGAL_CALL log_glReleaseShaderCompiler(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReleaseShaderCompiler)();
    Driver("glReleaseShaderCompiler","()");
}

static void REGAL_CALL log_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderBinary)(count, shaders, binaryformat, binary, length);
    Driver("glShaderBinary","(", count, ", ", boost::print::array(shaders,count), ", ", toString(binaryformat), ", ", boost::print::optional(binary,Logging::pointers), ", ", length, ")");
}

// GL_ARB_base_instance

static void REGAL_CALL log_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedBaseInstance)(mode, first, count, primcount, baseinstance);
    Driver("glDrawArraysInstancedBaseInstance","(", toString(mode), ", ", first, ", ", count, ", ", primcount, ", ", baseinstance, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseInstance)(mode, count, type, indices, primcount, baseinstance);
    Driver("glDrawElementsInstancedBaseInstance","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ", ", baseinstance, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, primcount, basevertex, baseinstance);
    Driver("glDrawElementsInstancedBaseVertexBaseInstance","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ", ", basevertex, ", ", baseinstance, ")");
}

// GL_ARB_bindless_texture

static GLuint64 REGAL_CALL log_glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetImageHandleARB)(texture, level, layered, layer, format);
    Driver("glGetImageHandleARB","(", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(format), ")", " returned ", ret);
    return ret;
}

static GLuint64 REGAL_CALL log_glGetTextureHandleARB(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetTextureHandleARB)(texture);
    Driver("glGetTextureHandleARB","(", texture, ")", " returned ", ret);
    return ret;
}

static GLuint64 REGAL_CALL log_glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetTextureSamplerHandleARB)(texture, sampler);
    Driver("glGetTextureSamplerHandleARB","(", texture, ", ", sampler, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLui64vARB)(index, pname, params);
    Driver("glGetVertexAttribLui64vARB","(", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsImageHandleResidentARB(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsImageHandleResidentARB)(handle);
    Driver("glIsImageHandleResidentARB","(", handle, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsTextureHandleResidentARB(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTextureHandleResidentARB)(handle);
    Driver("glIsTextureHandleResidentARB","(", handle, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glMakeImageHandleNonResidentARB(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleNonResidentARB)(handle);
    Driver("glMakeImageHandleNonResidentARB","(", handle, ")");
}

static void REGAL_CALL log_glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleResidentARB)(handle, access);
    Driver("glMakeImageHandleResidentARB","(", handle, ", ", toString(access), ")");
}

static void REGAL_CALL log_glMakeTextureHandleNonResidentARB(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleNonResidentARB)(handle);
    Driver("glMakeTextureHandleNonResidentARB","(", handle, ")");
}

static void REGAL_CALL log_glMakeTextureHandleResidentARB(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleResidentARB)(handle);
    Driver("glMakeTextureHandleResidentARB","(", handle, ")");
}

static void REGAL_CALL log_glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64ARB)(program, location, value);
    Driver("glProgramUniformHandleui64ARB","(", program, ", ", location, ", ", value, ")");
}

static void REGAL_CALL log_glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64vARB)(program, location, count, values);
    Driver("glProgramUniformHandleui64vARB","(", program, ", ", location, ", ", count, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniformHandleui64ARB(GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64ARB)(location, value);
    Driver("glUniformHandleui64ARB","(", location, ", ", value, ")");
}

static void REGAL_CALL log_glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64vARB)(location, count, value);
    Driver("glUniformHandleui64vARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64ARB)(index, x);
    Driver("glVertexAttribL1ui64ARB","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64vARB)(index, v);
    Driver("glVertexAttribL1ui64vARB","(", index, ", ", boost::print::optional(v,Logging::pointers), ")");
}

// GL_ARB_blend_func_extended

static void REGAL_CALL log_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationIndexed)(program, colorNumber, index, name);
    Driver("glBindFragDataLocationIndexed","(", program, ", ", colorNumber, ", ", index, ", ", boost::print::quote(name,'"'), ")");
}

static GLint REGAL_CALL log_glGetFragDataIndex(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetFragDataIndex)(program, name);
    Driver("glGetFragDataIndex","(", program, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

// GL_ARB_buffer_storage

static void REGAL_CALL log_glBufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferStorage)(target, size, data, flags);
    Driver("glBufferStorage","(", toString(target), ", ", size, ", ", boost::print::optional(data,Logging::pointers), ", ", flags, ")");
}

// GL_ARB_cl_event

static GLsync REGAL_CALL log_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLsync  ret = _next->call(&_next->glCreateSyncFromCLeventARB)(context, event, flags);
    Driver("glCreateSyncFromCLeventARB","(", context, ", ", event, ", ", flags, ")", " returned ", ret);
    return ret;
}

// GL_ARB_clear_buffer_object

static void REGAL_CALL log_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferData)(target, internalformat, format, type, data);
    Driver("glClearBufferData","(", toString(target), ", ", toString(internalformat), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearBufferSubData)(target, internalformat, offset, size, format, type, data);
    Driver("glClearBufferSubData","(", toString(target), ", ", toString(internalformat), ", ", offset, ", ", size, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);
    Driver("glClearNamedBufferDataEXT","(", buffer, ", ", toString(internalformat), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);
    Driver("glClearNamedBufferSubDataEXT","(", buffer, ", ", toString(internalformat), ", ", offset, ", ", size, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

// GL_ARB_clear_texture

static void REGAL_CALL log_glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearTexImage)(texture, level, format, type, data);
    Driver("glClearTexImage","(", texture, ", ", level, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
    Driver("glClearTexSubImage","(", texture, ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

// GL_ARB_color_buffer_float

static void REGAL_CALL log_glClampColorARB(GLenum target, GLenum clamp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClampColorARB)(target, clamp);
    Driver("glClampColorARB","(", toString(target), ", ", toString(clamp), ")");
}

// GL_ARB_compute_shader

static void REGAL_CALL log_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);
    Driver("glDispatchCompute","(", num_groups_x, ", ", num_groups_y, ", ", num_groups_z, ")");
}

static void REGAL_CALL log_glDispatchComputeIndirect(GLintptr indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDispatchComputeIndirect)(indirect);
    Driver("glDispatchComputeIndirect","(", indirect, ")");
}

// GL_ARB_compute_variable_group_size

static void REGAL_CALL log_glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDispatchComputeGroupSizeARB)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
    Driver("glDispatchComputeGroupSizeARB","(", num_groups_x, ", ", num_groups_y, ", ", num_groups_z, ", ", group_size_x, ", ", group_size_y, ", ", group_size_z, ")");
}

// GL_ARB_copy_buffer

static void REGAL_CALL log_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyBufferSubData)(readtarget, writetarget, readoffset, writeoffset, size);
    Driver("glCopyBufferSubData","(", toString(readtarget), ", ", toString(writetarget), ", ", readoffset, ", ", writeoffset, ", ", size, ")");
}

// GL_ARB_copy_image

static void REGAL_CALL log_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    Driver("glCopyImageSubData","(", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ")");
}

// GL_ARB_debug_output

static void REGAL_CALL log_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackARB)(callback, userParam);
    Driver("glDebugMessageCallbackARB","(", boost::print::optional(userParam,Logging::pointers), ")");
}

static void REGAL_CALL log_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControlARB)(source, type, severity, count, ids, enabled);
    Driver("glDebugMessageControlARB","(", toString(source), ", ", toString(type), ", ", toString(severity), ", ", count, ", ", boost::print::array(ids,count>0 && ids ? count : 0), ", ", toString(enabled), ")");
}

static void REGAL_CALL log_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertARB)(source, type, id, severity, length, buf);
    Driver("glDebugMessageInsertARB","(", toString(source), ", ", toString(type), ", ", id, ", ", toString(severity), ", ", length, ", ", boost::print::quote(buf,'"'), ")");
}

static GLuint REGAL_CALL log_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetDebugMessageLogARB)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    Driver("glGetDebugMessageLogARB","(", count, ", ", bufsize, ", ", boost::print::array(sources,ret), ", ", boost::print::array(types,ret), ", ", boost::print::array(ids,ret), ", ", boost::print::array(severities,ret), ", ", boost::print::array(lengths,ret), ", ", boost::print::quote(messageLog,'"'), ")", " returned ", ret);
    return ret;
}

// GL_ARB_draw_buffers

static void REGAL_CALL log_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersARB)(n, bufs);
    Driver("glDrawBuffersARB","(", n, ", ", boost::print::array(bufs,n), ")");
}

// GL_ARB_draw_buffers_blend

static void REGAL_CALL log_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);
    Driver("glBlendEquationSeparateiARB","(", buf, ", ", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

static void REGAL_CALL log_glBlendEquationiARB(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationiARB)(buf, mode);
    Driver("glBlendEquationiARB","(", buf, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    Driver("glBlendFuncSeparateiARB","(", buf, ", ", toString(srcRGB), ", ", toString(dstRGB), ", ", toString(srcAlpha), ", ", toString(dstAlpha), ")");
}

static void REGAL_CALL log_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFunciARB)(buf, src, dst);
    Driver("glBlendFunciARB","(", buf, ", ", toString(src), ", ", toString(dst), ")");
}

// GL_ARB_draw_elements_base_vertex

static void REGAL_CALL log_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
    Driver("glDrawElementsBaseVertex","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", basevertex, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertex)(mode, count, type, indices, primcount, basevertex);
    Driver("glDrawElementsInstancedBaseVertex","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ", ", basevertex, ")");
}

static void REGAL_CALL log_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);
    Driver("glDrawRangeElementsBaseVertex","(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", basevertex, ")");
}

static void REGAL_CALL log_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsBaseVertex)(mode, count, type, indices, primcount, basevertex);
    Driver("glMultiDrawElementsBaseVertex","(", toString(mode), ", ", boost::print::array(count,primcount), ", ", toString(type), ", ", indices, ", ", primcount, ", ", boost::print::array(basevertex,primcount), ")");
}

// GL_ARB_draw_indirect

static void REGAL_CALL log_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysIndirect)(mode, indirect);
    Driver("glDrawArraysIndirect","(", toString(mode), ", ", boost::print::optional(indirect,Logging::pointers), ")");
}

static void REGAL_CALL log_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsIndirect)(mode, type, indirect);
    Driver("glDrawElementsIndirect","(", toString(mode), ", ", toString(type), ", ", boost::print::optional(indirect,Logging::pointers), ")");
}

// GL_ARB_draw_instanced

static void REGAL_CALL log_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedARB)(mode, start, count, primcount);
    Driver("glDrawArraysInstancedARB","(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
    Driver("glDrawElementsInstancedARB","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ")");
}

// GL_ARB_framebuffer_no_attachments

static void REGAL_CALL log_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferParameteri)(target, pname, param);
    Driver("glFramebufferParameteri","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameteriv)(target, pname, params);
    Driver("glGetFramebufferParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params);
    Driver("glGetNamedFramebufferParameterivEXT","(", framebuffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferParameteriEXT)(framebuffer, pname, param);
    Driver("glNamedFramebufferParameteriEXT","(", framebuffer, ", ", toString(pname), ", ", param, ")");
}

// GL_ARB_framebuffer_object

static void REGAL_CALL log_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFramebuffer)(target, framebuffer);
    Driver("glBindFramebuffer","(", toString(target), ", ", framebuffer, ")");
}

static void REGAL_CALL log_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbuffer)(target, renderbuffer);
    Driver("glBindRenderbuffer","(", toString(target), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("glBlitFramebuffer","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
}

static GLenum REGAL_CALL log_glCheckFramebufferStatus(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glCheckFramebufferStatus)(target);
    Driver("glCheckFramebufferStatus","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffers)(n, framebuffers);
    Driver("glDeleteFramebuffers","(", n, ", ", boost::print::array(framebuffers,n), ")");
}

static void REGAL_CALL log_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffers)(n, renderbuffers);
    Driver("glDeleteRenderbuffers","(", n, ", ", boost::print::array(renderbuffers,n), ")");
}

static void REGAL_CALL log_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
    Driver("glFramebufferRenderbuffer","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1D)(target, attachment, textarget, texture, level);
    Driver("glFramebufferTexture1D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2D)(target, attachment, textarget, texture, level);
    Driver("glFramebufferTexture2D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3D)(target, attachment, textarget, texture, level, layer);
    Driver("glFramebufferTexture3D","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", layer, ")");
}

static void REGAL_CALL log_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayer)(target, attachment, texture, level, layer);
    Driver("glFramebufferTextureLayer","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
}

static void REGAL_CALL log_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffers)(n, framebuffers);
    Driver("glGenFramebuffers","(", n, ", ", boost::print::array(framebuffers,n), ")");
}

static void REGAL_CALL log_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffers)(n, renderbuffers);
    Driver("glGenRenderbuffers","(", n, ", ", boost::print::array(renderbuffers,n), ")");
}

static void REGAL_CALL log_glGenerateMipmap(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmap)(target);
    Driver("glGenerateMipmap","(", toString(target), ")");
}

static void REGAL_CALL log_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);
    Driver("glGetFramebufferAttachmentParameteriv","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameteriv)(target, pname, params);
    Driver("glGetRenderbufferParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsFramebuffer(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsFramebuffer)(framebuffer);
    Driver("glIsFramebuffer","(", framebuffer, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsRenderbuffer(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsRenderbuffer)(renderbuffer);
    Driver("glIsRenderbuffer","(", renderbuffer, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorage)(target, internalformat, width, height);
    Driver("glRenderbufferStorage","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_ARB_geometry_shader4

static void REGAL_CALL log_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureARB)(target, attachment, texture, level);
    Driver("glFramebufferTextureARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
    Driver("glFramebufferTextureFaceARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
}

static void REGAL_CALL log_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
    Driver("glFramebufferTextureLayerARB","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
}

static void REGAL_CALL log_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriARB)(program, pname, value);
    Driver("glProgramParameteriARB","(", program, ", ", toString(pname), ", ", value, ")");
}

// GL_ARB_get_program_binary

static void REGAL_CALL log_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);
    Driver("glGetProgramBinary","(", program, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(binaryFormat,1), ", ", boost::print::optional(binary,Logging::pointers), ")");
}

static void REGAL_CALL log_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramBinary)(program, binaryFormat, binary, length);
    Driver("glProgramBinary","(", program, ", ", toString(binaryFormat), ", ", boost::print::optional(binary,Logging::pointers), ", ", length, ")");
}

static void REGAL_CALL log_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteri)(program, pname, value);
    Driver("glProgramParameteri","(", program, ", ", toString(pname), ", ", value, ")");
}

// GL_ARB_gpu_shader_fp64

static void REGAL_CALL log_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformdv)(program, location, params);
    Driver("glGetUniformdv","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform1d(GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1d)(location, x);
    Driver("glUniform1d","(", location, ", ", x, ")");
}

static void REGAL_CALL log_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1dv)(location, count, value);
    Driver("glUniform1dv","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2d)(location, x, y);
    Driver("glUniform2d","(", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2dv)(location, count, value);
    Driver("glUniform2dv","(", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3d)(location, x, y, z);
    Driver("glUniform3d","(", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3dv)(location, count, value);
    Driver("glUniform3dv","(", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4d)(location, x, y, z, w);
    Driver("glUniform4d","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4dv)(location, count, value);
    Driver("glUniform4dv","(", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2dv)(location, count, transpose, value);
    Driver("glUniformMatrix2dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3dv)(location, count, transpose, value);
    Driver("glUniformMatrix2x3dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 3 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4dv)(location, count, transpose, value);
    Driver("glUniformMatrix2x4dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3dv)(location, count, transpose, value);
    Driver("glUniformMatrix3dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 3 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2dv)(location, count, transpose, value);
    Driver("glUniformMatrix3x2dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4dv)(location, count, transpose, value);
    Driver("glUniformMatrix3x4dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4dv)(location, count, transpose, value);
    Driver("glUniformMatrix4dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 4 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2dv)(location, count, transpose, value);
    Driver("glUniformMatrix4x2dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3dv)(location, count, transpose, value);
    Driver("glUniformMatrix4x3dv","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 3 * count), ")");
}

// GL_ARB_imaging

static void REGAL_CALL log_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorSubTable)(target, start, count, format, type, data);
    Driver("glColorSubTable","(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTable)(target, internalformat, width, format, type, table);
    Driver("glColorTable","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfv)(target, pname, params);
    Driver("glColorTableParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameteriv)(target, pname, params);
    Driver("glColorTableParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1D)(target, internalformat, width, format, type, image);
    Driver("glConvolutionFilter1D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);
    Driver("glConvolutionFilter2D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterf)(target, pname, params);
    Driver("glConvolutionParameterf","(", toString(target), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfv)(target, pname, params);
    Driver("glConvolutionParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteri)(target, pname, params);
    Driver("glConvolutionParameteri","(", toString(target), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriv)(target, pname, params);
    Driver("glConvolutionParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTable)(target, start, x, y, width);
    Driver("glCopyColorSubTable","(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTable)(target, internalformat, x, y, width);
    Driver("glCopyColorTable","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1D)(target, internalformat, x, y, width);
    Driver("glCopyConvolutionFilter1D","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);
    Driver("glCopyConvolutionFilter2D","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTable)(target, format, type, table);
    Driver("glGetColorTable","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfv)(target, pname, params);
    Driver("glGetColorTableParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameteriv)(target, pname, params);
    Driver("glGetColorTableParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilter)(target, format, type, image);
    Driver("glGetConvolutionFilter","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfv)(target, pname, params);
    Driver("glGetConvolutionParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameteriv)(target, pname, params);
    Driver("glGetConvolutionParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogram)(target, reset, format, type, values);
    Driver("glGetHistogram","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfv)(target, pname, params);
    Driver("glGetHistogramParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameteriv)(target, pname, params);
    Driver("glGetHistogramParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmax)(target, reset, format, types, values);
    Driver("glGetMinmax","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(types), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfv)(target, pname, params);
    Driver("glGetMinmaxParameterfv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameteriv)(target, pname, params);
    Driver("glGetMinmaxParameteriv","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilter)(target, format, type, row, column, span);
    Driver("glGetSeparableFilter","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(row,Logging::pointers), ", ", boost::print::optional(column,Logging::pointers), ", ", boost::print::optional(span,Logging::pointers), ")");
}

static void REGAL_CALL log_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glHistogram)(target, width, internalformat, sink);
    Driver("glHistogram","(", toString(target), ", ", width, ", ", toString(internalformat), ", ", toString(sink), ")");
}

static void REGAL_CALL log_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMinmax)(target, internalformat, sink);
    Driver("glMinmax","(", toString(target), ", ", toString(internalformat), ", ", toString(sink), ")");
}

static void REGAL_CALL log_glResetHistogram(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResetHistogram)(target);
    Driver("glResetHistogram","(", toString(target), ")");
}

static void REGAL_CALL log_glResetMinmax(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResetMinmax)(target);
    Driver("glResetMinmax","(", toString(target), ")");
}

static void REGAL_CALL log_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);
    Driver("glSeparableFilter2D","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(row,Logging::pointers), ", ", boost::print::optional(column,Logging::pointers), ")");
}

// GL_ARB_indirect_parameters

static void REGAL_CALL log_glMultiDrawArraysIndirectCountARB(GLenum mode, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirectCountARB)(mode, indirect, drawcount, maxdrawcount, stride);
    Driver("glMultiDrawArraysIndirectCountARB","(", toString(mode), ", ", boost::print::optional(indirect,Logging::pointers), ", ", drawcount, ", ", maxdrawcount, ", ", stride, ")");
}

static void REGAL_CALL log_glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const GLvoid *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirectCountARB)(mode, type, indirect, drawcount, maxdrawcount, stride);
    Driver("glMultiDrawElementsIndirectCountARB","(", toString(mode), ", ", toString(type), ", ", boost::print::optional(indirect,Logging::pointers), ", ", drawcount, ", ", maxdrawcount, ", ", stride, ")");
}

// GL_ARB_instanced_arrays

static void REGAL_CALL log_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorARB)(index, divisor);
    Driver("glVertexAttribDivisorARB","(", index, ", ", divisor, ")");
}

// GL_ARB_internalformat_query

static void REGAL_CALL log_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformativ)(target, internalformat, pname, bufSize, params);
    Driver("glGetInternalformativ","(", toString(target), ", ", toString(internalformat), ", ", toString(pname), ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_internalformat_query2

static void REGAL_CALL log_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformati64v)(target, internalformat, pname, bufSize, params);
    Driver("glGetInternalformati64v","(", toString(target), ", ", toString(internalformat), ", ", toString(pname), ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_invalidate_subdata

static void REGAL_CALL log_glInvalidateBufferData(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferData)(buffer);
    Driver("glInvalidateBufferData","(", buffer, ")");
}

static void REGAL_CALL log_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferSubData)(buffer, offset, length);
    Driver("glInvalidateBufferSubData","(", buffer, ", ", offset, ", ", length, ")");
}

static void REGAL_CALL log_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateFramebuffer)(target, numAttachments, attachments);
    Driver("glInvalidateFramebuffer","(", toString(target), ", ", numAttachments, ", ", attachments, ")");
}

static void REGAL_CALL log_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);
    Driver("glInvalidateSubFramebuffer","(", toString(target), ", ", numAttachments, ", ", attachments, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glInvalidateTexImage(GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexImage)(texture, level);
    Driver("glInvalidateTexImage","(", texture, ", ", level, ")");
}

static void REGAL_CALL log_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    Driver("glInvalidateTexSubImage","(", texture, ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

// GL_ARB_map_buffer_range

static void REGAL_CALL log_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRange)(target, offset, length);
    Driver("glFlushMappedBufferRange","(", toString(target), ", ", offset, ", ", length, ")");
}

static GLvoid *REGAL_CALL log_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapBufferRange)(target, offset, length, access);
    Driver("glMapBufferRange","(", toString(target), ", ", offset, ", ", length, ", ", GLbufferAccessToString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GL_ARB_matrix_palette

static void REGAL_CALL log_glCurrentPaletteMatrixARB(GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixARB)(index);
    Driver("glCurrentPaletteMatrixARB","(", index, ")");
}

static void REGAL_CALL log_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerARB)(size, type, stride, pointer);
    Driver("glMatrixIndexPointerARB","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glMatrixIndexubvARB(GLint size, const GLubyte *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexubvARB)(size, indices);
    Driver("glMatrixIndexubvARB","(", size, ", ", boost::print::optional(indices,Logging::pointers), ")");
}

static void REGAL_CALL log_glMatrixIndexuivARB(GLint size, const GLuint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexuivARB)(size, indices);
    Driver("glMatrixIndexuivARB","(", size, ", ", boost::print::optional(indices,Logging::pointers), ")");
}

static void REGAL_CALL log_glMatrixIndexusvARB(GLint size, const GLushort *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexusvARB)(size, indices);
    Driver("glMatrixIndexusvARB","(", size, ", ", boost::print::optional(indices,Logging::pointers), ")");
}

// GL_ARB_multi_bind

static void REGAL_CALL log_glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBuffersBase)(target, first, count, buffers);
    Driver("glBindBuffersBase","(", toString(target), ", ", first, ", ", count, ", ", boost::print::optional(buffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBuffersRange)(target, first, count, buffers, offsets, sizes);
    Driver("glBindBuffersRange","(", toString(target), ", ", first, ", ", count, ", ", boost::print::optional(buffers,Logging::pointers), ", ", offsets, ", ", sizes, ")");
}

static void REGAL_CALL log_glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindImageTextures)(first, count, textures);
    Driver("glBindImageTextures","(", first, ", ", count, ", ", boost::print::optional(textures,Logging::pointers), ")");
}

static void REGAL_CALL log_glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindSamplers)(first, count, samplers);
    Driver("glBindSamplers","(", first, ", ", count, ", ", boost::print::optional(samplers,Logging::pointers), ")");
}

static void REGAL_CALL log_glBindTextures(GLuint first, GLsizei count, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindTextures)(first, count, textures);
    Driver("glBindTextures","(", first, ", ", count, ", ", boost::print::optional(textures,Logging::pointers), ")");
}

static void REGAL_CALL log_glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexBuffers)(first, count, buffers, offsets, strides);
    Driver("glBindVertexBuffers","(", first, ", ", count, ", ", boost::print::optional(buffers,Logging::pointers), ", ", offsets, ", ", boost::print::optional(strides,Logging::pointers), ")");
}

// GL_ARB_multi_draw_indirect

static void REGAL_CALL log_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirect)(mode, indirect, primcount, stride);
    Driver("glMultiDrawArraysIndirect","(", toString(mode), ", ", boost::print::optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
}

static void REGAL_CALL log_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirect)(mode, type, indirect, primcount, stride);
    Driver("glMultiDrawElementsIndirect","(", toString(mode), ", ", toString(type), ", ", boost::print::optional(indirect,Logging::pointers), ", ", primcount, ", ", stride, ")");
}

// GL_ARB_multisample

static void REGAL_CALL log_glSampleCoverageARB(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverageARB)(value, invert);
    Driver("glSampleCoverageARB","(", value, ", ", toString(invert), ")");
}

// GL_ARB_multitexture

static void REGAL_CALL log_glActiveTextureARB(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveTextureARB)(texture);
    Driver("glActiveTextureARB","(", toString(texture), ")");
}

static void REGAL_CALL log_glClientActiveTextureARB(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTextureARB)(texture);
    Driver("glClientActiveTextureARB","(", toString(texture), ")");
}

static void REGAL_CALL log_glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dARB)(target, s);
    Driver("glMultiTexCoord1dARB","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dvARB)(target, v);
    Driver("glMultiTexCoord1dvARB","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fARB)(target, s);
    Driver("glMultiTexCoord1fARB","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fvARB)(target, v);
    Driver("glMultiTexCoord1fvARB","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1iARB(GLenum target, GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iARB)(target, s);
    Driver("glMultiTexCoord1iARB","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1ivARB)(target, v);
    Driver("glMultiTexCoord1ivARB","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1sARB(GLenum target, GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sARB)(target, s);
    Driver("glMultiTexCoord1sARB","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1svARB)(target, v);
    Driver("glMultiTexCoord1svARB","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dARB)(target, s, t);
    Driver("glMultiTexCoord2dARB","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dvARB)(target, v);
    Driver("glMultiTexCoord2dvARB","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fARB)(target, s, t);
    Driver("glMultiTexCoord2fARB","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fvARB)(target, v);
    Driver("glMultiTexCoord2fvARB","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iARB)(target, s, t);
    Driver("glMultiTexCoord2iARB","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2ivARB)(target, v);
    Driver("glMultiTexCoord2ivARB","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sARB)(target, s, t);
    Driver("glMultiTexCoord2sARB","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2svARB)(target, v);
    Driver("glMultiTexCoord2svARB","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dARB)(target, s, t, r);
    Driver("glMultiTexCoord3dARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dvARB)(target, v);
    Driver("glMultiTexCoord3dvARB","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fARB)(target, s, t, r);
    Driver("glMultiTexCoord3fARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fvARB)(target, v);
    Driver("glMultiTexCoord3fvARB","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iARB)(target, s, t, r);
    Driver("glMultiTexCoord3iARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3ivARB)(target, v);
    Driver("glMultiTexCoord3ivARB","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sARB)(target, s, t, r);
    Driver("glMultiTexCoord3sARB","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3svARB)(target, v);
    Driver("glMultiTexCoord3svARB","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dARB)(target, s, t, r, q);
    Driver("glMultiTexCoord4dARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dvARB)(target, v);
    Driver("glMultiTexCoord4dvARB","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fARB)(target, s, t, r, q);
    Driver("glMultiTexCoord4fARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fvARB)(target, v);
    Driver("glMultiTexCoord4fvARB","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iARB)(target, s, t, r, q);
    Driver("glMultiTexCoord4iARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4ivARB)(target, v);
    Driver("glMultiTexCoord4ivARB","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sARB)(target, s, t, r, q);
    Driver("glMultiTexCoord4sARB","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4svARB)(target, v);
    Driver("glMultiTexCoord4svARB","(", toString(target), ", ", boost::print::array(v,4), ")");
}

// GL_ARB_occlusion_query

static void REGAL_CALL log_glBeginQueryARB(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryARB)(target, id);
    Driver("glBeginQueryARB","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesARB)(n, ids);
    Driver("glDeleteQueriesARB","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glEndQueryARB(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndQueryARB)(target);
    Driver("glEndQueryARB","(", toString(target), ")");
}

static void REGAL_CALL log_glGenQueriesARB(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesARB)(n, ids);
    Driver("glGenQueriesARB","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectivARB)(id, pname, params);
    Driver("glGetQueryObjectivARB","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivARB)(id, pname, params);
    Driver("glGetQueryObjectuivARB","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivARB)(target, pname, params);
    Driver("glGetQueryivARB","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsQueryARB(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsQueryARB)(id);
    Driver("glIsQueryARB","(", id, ")", " returned ", toString(ret));
    return ret;
}

// GL_ARB_point_parameters

static void REGAL_CALL log_glPointParameterfARB(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfARB)(pname, param);
    Driver("glPointParameterfARB","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvARB)(pname, params);
    Driver("glPointParameterfvARB","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_program_interface_query

static void REGAL_CALL log_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInterfaceiv)(program, programInterface, pname, params);
    Driver("glGetProgramInterfaceiv","(", program, ", ", toString(programInterface), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLuint REGAL_CALL log_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetProgramResourceIndex)(program, programInterface, name);
    Driver("glGetProgramResourceIndex","(", program, ", ", toString(programInterface), ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static GLint REGAL_CALL log_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetProgramResourceLocation)(program, programInterface, name);
    Driver("glGetProgramResourceLocation","(", program, ", ", toString(programInterface), ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static GLint REGAL_CALL log_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetProgramResourceLocationIndex)(program, programInterface, name);
    Driver("glGetProgramResourceLocationIndex","(", program, ", ", toString(programInterface), ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);
    Driver("glGetProgramResourceName","(", program, ", ", toString(programInterface), ", ", index, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);
    Driver("glGetProgramResourceiv","(", program, ", ", toString(programInterface), ", ", index, ", ", propCount, ", ", props, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_provoking_vertex

static void REGAL_CALL log_glProvokingVertex(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertex)(mode);
    Driver("glProvokingVertex","(", toString(mode), ")");
}

// GL_ARB_robustness

static GLenum REGAL_CALL log_glGetGraphicsResetStatusARB(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glGetGraphicsResetStatusARB)();
    Driver("glGetGraphicsResetStatusARB","()", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnColorTableARB)(target, format, type, bufSize, table);
    Driver("glGetnColorTableARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnCompressedTexImageARB)(target, lod, bufSize, img);
    Driver("glGetnCompressedTexImageARB","(", toString(target), ", ", lod, ", ", bufSize, ", ", boost::print::optional(img,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnConvolutionFilterARB)(target, format, type, bufSize, image);
    Driver("glGetnConvolutionFilterARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnHistogramARB)(target, reset, format, type, bufSize, values);
    Driver("glGetnHistogramARB","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnMapdvARB)(target, query, bufSize, v);
    Driver("glGetnMapdvARB","(", toString(target), ", ", toString(query), ", ", bufSize, ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnMapfvARB)(target, query, bufSize, v);
    Driver("glGetnMapfvARB","(", toString(target), ", ", toString(query), ", ", bufSize, ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnMapivARB)(target, query, bufSize, v);
    Driver("glGetnMapivARB","(", toString(target), ", ", toString(query), ", ", bufSize, ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnMinmaxARB)(target, reset, format, type, bufSize, values);
    Driver("glGetnMinmaxARB","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapfvARB)(map, bufSize, values);
    Driver("glGetnPixelMapfvARB","(", toString(map), ", ", bufSize, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapuivARB)(map, bufSize, values);
    Driver("glGetnPixelMapuivARB","(", toString(map), ", ", bufSize, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapusvARB)(map, bufSize, values);
    Driver("glGetnPixelMapusvARB","(", toString(map), ", ", bufSize, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnPolygonStippleARB)(bufSize, pattern);
    Driver("glGetnPolygonStippleARB","(", bufSize, ", ", boost::print::optional(pattern,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);
    Driver("glGetnSeparableFilterARB","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", rowBufSize, ", ", boost::print::optional(row,Logging::pointers), ", ", columnBufSize, ", ", boost::print::optional(column,Logging::pointers), ", ", boost::print::optional(span,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnTexImageARB)(target, level, format, type, bufSize, img);
    Driver("glGetnTexImageARB","(", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(img,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformdvARB)(program, location, bufSize, params);
    Driver("glGetnUniformdvARB","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvARB)(program, location, bufSize, params);
    Driver("glGetnUniformfvARB","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivARB)(program, location, bufSize, params);
    Driver("glGetnUniformivARB","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformuivARB)(program, location, bufSize, params);
    Driver("glGetnUniformuivARB","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);
    Driver("glReadnPixelsARB","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

// GL_ARB_sample_shading

static void REGAL_CALL log_glMinSampleShading(GLclampf value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShading)(value);
    Driver("glMinSampleShading","(", value, ")");
}

static void REGAL_CALL log_glMinSampleShadingARB(GLclampf value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShadingARB)(value);
    Driver("glMinSampleShadingARB","(", value, ")");
}

// GL_ARB_sampler_objects

static void REGAL_CALL log_glBindSampler(GLuint unit, GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindSampler)(unit, sampler);
    Driver("glBindSampler","(", unit, ", ", sampler, ")");
}

static void REGAL_CALL log_glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteSamplers)(count, samplers);
    Driver("glDeleteSamplers","(", count, ", ", boost::print::array(samplers,count), ")");
}

static void REGAL_CALL log_glGenSamplers(GLsizei count, GLuint *samplers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenSamplers)(count, samplers);
    Driver("glGenSamplers","(", count, ", ", boost::print::array(samplers,count), ")");
}

static void REGAL_CALL log_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIiv)(sampler, pname, params);
    Driver("glGetSamplerParameterIiv","(", sampler, ", ", toString(pname), ", ", boost::print::array(params,helper::size::samplerParameterv(pname)), ")");
}

static void REGAL_CALL log_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIuiv)(sampler, pname, params);
    Driver("glGetSamplerParameterIuiv","(", sampler, ", ", toString(pname), ", ", boost::print::array(params,helper::size::samplerParameterv(pname)), ")");
}

static void REGAL_CALL log_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterfv)(sampler, pname, params);
    Driver("glGetSamplerParameterfv","(", sampler, ", ", toString(pname), ", ", boost::print::array(params,helper::size::samplerParameterv(pname)), ")");
}

static void REGAL_CALL log_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameteriv)(sampler, pname, params);
    Driver("glGetSamplerParameteriv","(", sampler, ", ", toString(pname), ", ", boost::print::array(params,helper::size::samplerParameterv(pname)), ")");
}

static GLboolean REGAL_CALL log_glIsSampler(GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsSampler)(sampler);
    Driver("glIsSampler","(", sampler, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIiv)(sampler, pname, params);
    Driver("glSamplerParameterIiv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIuiv)(sampler, pname, params);
    Driver("glSamplerParameterIuiv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterf)(sampler, pname, param);
    Driver("glSamplerParameterf","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
}

static void REGAL_CALL log_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterfv)(sampler, pname, params);
    Driver("glSamplerParameterfv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteri)(sampler, pname, param);
    Driver("glSamplerParameteri","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,param), ")");
}

static void REGAL_CALL log_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteriv)(sampler, pname, params);
    Driver("glSamplerParameteriv","(", sampler, ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

// GL_ARB_separate_shader_objects

static void REGAL_CALL log_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveShaderProgram)(pipeline, program);
    Driver("glActiveShaderProgram","(", pipeline, ", ", program, ")");
}

static void REGAL_CALL log_glBindProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindProgramPipeline)(pipeline);
    Driver("glBindProgramPipeline","(", pipeline, ")");
}

static GLuint REGAL_CALL log_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glCreateShaderProgramv)(type, count, strings);
    Driver("glCreateShaderProgramv","(", toString(type), ", ", count, ", ", boost::print::array(strings,count,"\""), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramPipelines)(n, pipelines);
    Driver("glDeleteProgramPipelines","(", n, ", ", boost::print::array(pipelines,n), ")");
}

static void REGAL_CALL log_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenProgramPipelines)(n, pipelines);
    Driver("glGenProgramPipelines","(", n, ", ", boost::print::array(pipelines,n), ")");
}

static void REGAL_CALL log_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);
    Driver("glGetProgramPipelineInfoLog","(", pipeline, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(infoLog,'"'), ")");
}

static void REGAL_CALL log_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineiv)(pipeline, pname, params);
    Driver("glGetProgramPipelineiv","(", pipeline, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsProgramPipeline)(pipeline);
    Driver("glIsProgramPipeline","(", pipeline, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1d)(program, location, x);
    Driver("glProgramUniform1d","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dv)(program, location, count, value);
    Driver("glProgramUniform1dv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1f)(program, location, x);
    Driver("glProgramUniform1f","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fv)(program, location, count, value);
    Driver("glProgramUniform1fv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1i(GLuint program, GLint location, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i)(program, location, x);
    Driver("glProgramUniform1i","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iv)(program, location, count, value);
    Driver("glProgramUniform1iv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui)(program, location, v0);
    Driver("glProgramUniform1ui","(", program, ", ", location, ", ", v0, ")");
}

static void REGAL_CALL log_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiv)(program, location, count, value);
    Driver("glProgramUniform1uiv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2d)(program, location, x, y);
    Driver("glProgramUniform2d","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dv)(program, location, count, value);
    Driver("glProgramUniform2dv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2f)(program, location, x, y);
    Driver("glProgramUniform2f","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fv)(program, location, count, value);
    Driver("glProgramUniform2fv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i)(program, location, x, y);
    Driver("glProgramUniform2i","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iv)(program, location, count, value);
    Driver("glProgramUniform2iv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui)(program, location, x, y);
    Driver("glProgramUniform2ui","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiv)(program, location, count, value);
    Driver("glProgramUniform2uiv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3d)(program, location, x, y, z);
    Driver("glProgramUniform3d","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dv)(program, location, count, value);
    Driver("glProgramUniform3dv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3f)(program, location, x, y, z);
    Driver("glProgramUniform3f","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fv)(program, location, count, value);
    Driver("glProgramUniform3fv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i)(program, location, x, y, z);
    Driver("glProgramUniform3i","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iv)(program, location, count, value);
    Driver("glProgramUniform3iv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui)(program, location, x, y, z);
    Driver("glProgramUniform3ui","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiv)(program, location, count, value);
    Driver("glProgramUniform3uiv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4d)(program, location, x, y, z, w);
    Driver("glProgramUniform4d","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dv)(program, location, count, value);
    Driver("glProgramUniform4dv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4f)(program, location, x, y, z, w);
    Driver("glProgramUniform4f","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fv)(program, location, count, value);
    Driver("glProgramUniform4fv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i)(program, location, x, y, z, w);
    Driver("glProgramUniform4i","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iv)(program, location, count, value);
    Driver("glProgramUniform4iv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui)(program, location, x, y, z, w);
    Driver("glProgramUniform4ui","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiv)(program, location, count, value);
    Driver("glProgramUniform4uiv","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 9), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 9), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 16), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 16), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x2dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x2fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x3dv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x3fv","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUseProgramStages)(pipeline, stages, program);
    Driver("glUseProgramStages","(", pipeline, ", ", stages, ", ", program, ")");
}

static void REGAL_CALL log_glValidateProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramPipeline)(pipeline);
    Driver("glValidateProgramPipeline","(", pipeline, ")");
}

// GL_ARB_shader_atomic_counters

static void REGAL_CALL log_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);
    Driver("glGetActiveAtomicCounterBufferiv","(", program, ", ", bufferIndex, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_shader_image_load_store

static void REGAL_CALL log_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindImageTexture)(unit, texture, level, layered, layer, access, format);
    Driver("glBindImageTexture","(", unit, ", ", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(access), ", ", toString(format), ")");
}

static void REGAL_CALL log_glMemoryBarrier(GLbitfield barriers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrier)(barriers);
    Driver("glMemoryBarrier","(", barriers, ")");
}

// GL_ARB_shader_objects

static void REGAL_CALL log_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAttachObjectARB)(containerObj, obj);
    Driver("glAttachObjectARB","(", containerObj, ", ", obj, ")");
}

static void REGAL_CALL log_glCompileShaderARB(GLhandleARB shaderObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderARB)(shaderObj);
    Driver("glCompileShaderARB","(", shaderObj, ")");
}

static GLhandleARB REGAL_CALL log_glCreateProgramObjectARB(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLhandleARB  ret = _next->call(&_next->glCreateProgramObjectARB)();
    Driver("glCreateProgramObjectARB","()", " returned ", ret);
    return ret;
}

static GLhandleARB REGAL_CALL log_glCreateShaderObjectARB(GLenum shaderType)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLhandleARB  ret = _next->call(&_next->glCreateShaderObjectARB)(shaderType);
    Driver("glCreateShaderObjectARB","(", toString(shaderType), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glDeleteObjectARB(GLhandleARB obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteObjectARB)(obj);
    Driver("glDeleteObjectARB","(", obj, ")");
}

static void REGAL_CALL log_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDetachObjectARB)(containerObj, attachedObj);
    Driver("glDetachObjectARB","(", containerObj, ", ", attachedObj, ")");
}

static void REGAL_CALL log_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);
    Driver("glGetActiveUniformARB","(", programObj, ", ", index, ", ", maxLength, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);
    Driver("glGetAttachedObjectsARB","(", containerObj, ", ", maxCount, ", ", boost::print::array(count,1), ", ", boost::print::optional(obj,Logging::pointers), ")");
}

static GLhandleARB REGAL_CALL log_glGetHandleARB(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLhandleARB  ret = _next->call(&_next->glGetHandleARB)(pname);
    Driver("glGetHandleARB","(", toString(pname), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInfoLogARB)(obj, maxLength, length, infoLog);
    Driver("glGetInfoLogARB","(", obj, ", ", maxLength, ", ", boost::print::array(length,length ? 1 : 0), ", ", boost::print::quote(infoLog,'"'), ")");
}

static void REGAL_CALL log_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterfvARB)(obj, pname, params);
    Driver("glGetObjectParameterfvARB","(", obj, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivARB)(obj, pname, params);
    Driver("glGetObjectParameterivARB","(", obj, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSourceARB)(obj, maxLength, length, source);
    Driver("glGetShaderSourceARB","(", obj, ", ", maxLength, ", ", boost::print::array(length,1), ", ", boost::print::quote(source,'"'), ")");
}

static GLint REGAL_CALL log_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetUniformLocationARB)(programObj, name);
    Driver("glGetUniformLocationARB","(", programObj, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfvARB)(programObj, location, params);
    Driver("glGetUniformfvARB","(", programObj, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformivARB)(programObj, location, params);
    Driver("glGetUniformivARB","(", programObj, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glLinkProgramARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLinkProgramARB)(programObj);
    Driver("glLinkProgramARB","(", programObj, ")");
}

static void REGAL_CALL log_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** const string, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderSourceARB)(shaderObj, count, string, length);
    Driver("glShaderSourceARB","(", shaderObj, ", ", count, ", ", boost::print::array(reinterpret_cast<const char ** const>(string),string ? count : 0), ", ", boost::print::array(length,length ? count : 0), ")");
}

static void REGAL_CALL log_glUniform1fARB(GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1fARB)(location, v0);
    Driver("glUniform1fARB","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1fvARB)(location, count, value);
    Driver("glUniform1fvARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform1iARB(GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1iARB)(location, v0);
    Driver("glUniform1iARB","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1ivARB)(location, count, value);
    Driver("glUniform1ivARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2fARB)(location, v0, v1);
    Driver("glUniform2fARB","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2fvARB)(location, count, value);
    Driver("glUniform2fvARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform2iARB(GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2iARB)(location, v0, v1);
    Driver("glUniform2iARB","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2ivARB)(location, count, value);
    Driver("glUniform2ivARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3fARB)(location, v0, v1, v2);
    Driver("glUniform3fARB","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3fvARB)(location, count, value);
    Driver("glUniform3fvARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3iARB)(location, v0, v1, v2);
    Driver("glUniform3iARB","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3ivARB)(location, count, value);
    Driver("glUniform3ivARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4fARB)(location, v0, v1, v2, v3);
    Driver("glUniform4fARB","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4fvARB)(location, count, value);
    Driver("glUniform4fvARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4iARB)(location, v0, v1, v2, v3);
    Driver("glUniform4iARB","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4ivARB)(location, count, value);
    Driver("glUniform4ivARB","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fvARB)(location, count, transpose, value);
    Driver("glUniformMatrix2fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,2 * 2 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fvARB)(location, count, transpose, value);
    Driver("glUniformMatrix3fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,3 * 3 * count), ")");
}

static void REGAL_CALL log_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fvARB)(location, count, transpose, value);
    Driver("glUniformMatrix4fvARB","(", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,4 * 4 * count), ")");
}

static void REGAL_CALL log_glUseProgramObjectARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUseProgramObjectARB)(programObj);
    Driver("glUseProgramObjectARB","(", programObj, ")");
}

static void REGAL_CALL log_glValidateProgramARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramARB)(programObj);
    Driver("glValidateProgramARB","(", programObj, ")");
}

// GL_ARB_shader_storage_buffer_object

static void REGAL_CALL log_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);
    Driver("glShaderStorageBlockBinding","(", program, ", ", storageBlockIndex, ", ", storageBlockBinding, ")");
}

// GL_ARB_shader_subroutine

static void REGAL_CALL log_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineName)(program, shaderType, index, bufSize, length, name);
    Driver("glGetActiveSubroutineName","(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformName)(program, shaderType, index, bufSize, length, name);
    Driver("glGetActiveSubroutineUniformName","(", program, ", ", toString(shaderType), ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformiv)(program, shaderType, index, pname, values);
    Driver("glGetActiveSubroutineUniformiv","(", program, ", ", toString(shaderType), ", ", index, ", ", toString(pname), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStageiv)(program, shaderType, pname, values);
    Driver("glGetProgramStageiv","(", program, ", ", toString(shaderType), ", ", toString(pname), ", ", boost::print::array(values,1), ")");
}

static void REGAL_CALL log_glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramSubroutineParameteruivNV)(target, index, params);
    Driver("glGetProgramSubroutineParameteruivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,1), ")");
}

static GLuint REGAL_CALL log_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetSubroutineIndex)(program, shaderType, name);
    Driver("glGetSubroutineIndex","(", program, ", ", toString(shaderType), ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static GLint REGAL_CALL log_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetSubroutineUniformLocation)(program, shaderType, name);
    Driver("glGetSubroutineUniformLocation","(", program, ", ", toString(shaderType), ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformSubroutineuiv)(shaderType, location, params);
    Driver("glGetUniformSubroutineuiv","(", toString(shaderType), ", ", location, ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramSubroutineParametersuivNV)(target, count, params);
    Driver("glProgramSubroutineParametersuivNV","(", toString(target), ", ", count, ", ", boost::print::array(params,count), ")");
}

static void REGAL_CALL log_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformSubroutinesuiv)(shaderType, count, indices);
    Driver("glUniformSubroutinesuiv","(", toString(shaderType), ", ", count, ", ", boost::print::array(indices,count), ")");
}

// GL_ARB_shading_language_include

static void REGAL_CALL log_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderIncludeARB)(shader, count, path, length);
    Driver("glCompileShaderIncludeARB","(", shader, ", ", count, ", ", boost::print::array(path,count,"\""), ", ", boost::print::array(length,count), ")");
}

static void REGAL_CALL log_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamedStringARB)(namelen, name);
    Driver("glDeleteNamedStringARB","(", namelen, ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringARB)(namelen, name, bufSize, stringlen, string);
    Driver("glGetNamedStringARB","(", namelen, ", ", boost::print::quote(name,'"'), ", ", bufSize, ", ", boost::print::array(stringlen,1), ", ", boost::print::quote(string,'"'), ")");
}

static void REGAL_CALL log_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringivARB)(namelen, name, pname, params);
    Driver("glGetNamedStringivARB","(", namelen, ", ", boost::print::quote(name,'"'), ", ", toString(pname), ", ", boost::print::array(params,helper::size::namedStringParams(pname)), ")");
}

static GLboolean REGAL_CALL log_glIsNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsNamedStringARB)(namelen, name);
    Driver("glIsNamedStringARB","(", namelen, ", ", boost::print::quote(name,'"'), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedStringARB)(type, namelen, name, stringlen, string);
    Driver("glNamedStringARB","(", toString(type), ", ", namelen, ", ", boost::print::quote(name,'"'), ", ", stringlen, ", ", boost::print::quote(string,'"'), ")");
}

// GL_ARB_sparse_texture

static void REGAL_CALL log_glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexPageCommitmentARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
    Driver("glTexPageCommitmentARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(commit), ")");
}

static void REGAL_CALL log_glTexturePageCommitmentEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexturePageCommitmentEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
    Driver("glTexturePageCommitmentEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

// GL_ARB_sync

static GLenum REGAL_CALL log_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glClientWaitSync)(sync, flags, timeout);
    Driver("glClientWaitSync","(", boost::print::optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", flags, ", ", timeout, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glDeleteSync(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteSync)(sync);
    Driver("glDeleteSync","(", boost::print::optional(reinterpret_cast<void *>(sync),Logging::pointers), ")");
}

static GLsync REGAL_CALL log_glFenceSync(GLenum condition, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLsync  ret = _next->call(&_next->glFenceSync)(condition, flags);
    Driver("glFenceSync","(", toString(condition), ", ", flags, ")", " returned ", boost::print::optional(reinterpret_cast<void *>(ret),Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glGetInteger64v(GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64v)(pname, params);
    Driver("glGetInteger64v","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSynciv)(sync, pname, bufSize, length, values);
    Driver("glGetSynciv","(", boost::print::optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", toString(pname), ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(values,bufSize), ")");
}

static GLboolean REGAL_CALL log_glIsSync(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsSync)(sync);
    Driver("glIsSync","(", boost::print::optional(reinterpret_cast<void *>(sync),Logging::pointers), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWaitSync)(sync, flags, timeout);
    Driver("glWaitSync","(", boost::print::optional(reinterpret_cast<void *>(sync),Logging::pointers), ", ", flags, ", ", timeout, ")");
}

// GL_ARB_tessellation_shader

static void REGAL_CALL log_glPatchParameterfv(GLenum pname, const GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPatchParameterfv)(pname, values);
    Driver("glPatchParameterfv","(", toString(pname), ", ", boost::print::array(values,1), ")");
}

static void REGAL_CALL log_glPatchParameteri(GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPatchParameteri)(pname, value);
    Driver("glPatchParameteri","(", toString(pname), ", ", value, ")");
}

// GL_ARB_texture_buffer_object

static void REGAL_CALL log_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBufferARB)(target, internalformat, buffer);
    Driver("glTexBufferARB","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
}

// GL_ARB_texture_buffer_range

static void REGAL_CALL log_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBufferRange)(target, internalformat, buffer, offset, size);
    Driver("glTexBufferRange","(", toString(target), ", ", toString(internalformat), ", ", buffer, ", ", offset, ", ", size, ")");
}

static void REGAL_CALL log_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);
    Driver("glTextureBufferRangeEXT","(", texture, ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ", ", offset, ", ", size, ")");
}

// GL_ARB_texture_compression

static void REGAL_CALL log_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);
    Driver("glCompressedTexImage1DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);
    Driver("glCompressedTexImage2DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);
    Driver("glCompressedTexImage3DARB","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);
    Driver("glCompressedTexSubImage1DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    Driver("glCompressedTexSubImage2DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    Driver("glCompressedTexSubImage3DARB","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

static void REGAL_CALL log_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImageARB)(target, lod, img);
    Driver("glGetCompressedTexImageARB","(", toString(target), ", ", lod, ", ", boost::print::optional(img,Logging::pointers), ")");
}

// GL_ARB_texture_multisample

static void REGAL_CALL log_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefv)(pname, index, val);
    Driver("glGetMultisamplefv","(", toString(pname), ", ", index, ", ", boost::print::optional(val,Logging::pointers), ")");
}

static void REGAL_CALL log_glSampleMaski(GLuint index, GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleMaski)(index, mask);
    Driver("glSampleMaski","(", index, ", ", mask, ")");
}

static void REGAL_CALL log_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
    Driver("glTexImage2DMultisample","(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
}

static void REGAL_CALL log_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    Driver("glTexImage3DMultisample","(", toString(target), ", ", samples, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
}

// GL_ARB_texture_storage

static void REGAL_CALL log_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1D)(target, levels, internalformat, width);
    Driver("glTexStorage1D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
}

static void REGAL_CALL log_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2D)(target, levels, internalformat, width, height);
    Driver("glTexStorage2D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3D)(target, levels, internalformat, width, height, depth);
    Driver("glTexStorage3D","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
}

static void REGAL_CALL log_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage1DEXT)(texture, target, levels, internalformat, width);
    Driver("glTextureStorage1DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
}

static void REGAL_CALL log_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);
    Driver("glTextureStorage2DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);
    Driver("glTextureStorage3DEXT","(", texture, ", ", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
}

// GL_ARB_texture_storage_multisample

static void REGAL_CALL log_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
    Driver("glTexStorage2DMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
}

static void REGAL_CALL log_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    Driver("glTexStorage3DMultisample","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
}

static void REGAL_CALL log_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
    Driver("glTextureStorage2DMultisampleEXT","(", texture, ", ", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(fixedsamplelocations), ")");
}

static void REGAL_CALL log_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
    Driver("glTextureStorage3DMultisampleEXT","(", texture, ", ", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", toString(fixedsamplelocations), ")");
}

// GL_ARB_texture_view

static void REGAL_CALL log_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
    Driver("glTextureView","(", texture, ", ", toString(target), ", ", origtexture, ", ", toString(internalformat), ", ", minlevel, ", ", numlevels, ", ", minlayer, ", ", numlayers, ")");
}

// GL_ARB_timer_query

static void REGAL_CALL log_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64v)(id, pname, params);
    Driver("glGetQueryObjecti64v","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64v)(id, pname, params);
    Driver("glGetQueryObjectui64v","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glQueryCounter(GLuint id, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glQueryCounter)(id, target);
    Driver("glQueryCounter","(", id, ", ", toString(target), ")");
}

// GL_ARB_transform_feedback2

static void REGAL_CALL log_glBindTransformFeedback(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedback)(target, id);
    Driver("glBindTransformFeedback","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacks)(n, ids);
    Driver("glDeleteTransformFeedbacks","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glDrawTransformFeedback(GLenum mode, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedback)(mode, name);
    Driver("glDrawTransformFeedback","(", toString(mode), ", ", name, ")");
}

static void REGAL_CALL log_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacks)(n, ids);
    Driver("glGenTransformFeedbacks","(", n, ", ", boost::print::array(ids,n), ")");
}

static GLboolean REGAL_CALL log_glIsTransformFeedback(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTransformFeedback)(id);
    Driver("glIsTransformFeedback","(", id, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glPauseTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedback)();
    Driver("glPauseTransformFeedback","()");
}

static void REGAL_CALL log_glResumeTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedback)();
    Driver("glResumeTransformFeedback","()");
}

// GL_ARB_transform_feedback3

static void REGAL_CALL log_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryIndexed)(target, index, id);
    Driver("glBeginQueryIndexed","(", toString(target), ", ", index, ", ", id, ")");
}

static void REGAL_CALL log_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStream)(mode, id, stream);
    Driver("glDrawTransformFeedbackStream","(", toString(mode), ", ", id, ", ", stream, ")");
}

static void REGAL_CALL log_glEndQueryIndexed(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndQueryIndexed)(target, index);
    Driver("glEndQueryIndexed","(", toString(target), ", ", index, ")");
}

static void REGAL_CALL log_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryIndexediv)(target, index, pname, params);
    Driver("glGetQueryIndexediv","(", toString(target), ", ", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_ARB_transform_feedback_instanced

static void REGAL_CALL log_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackInstanced)(mode, id, primcount);
    Driver("glDrawTransformFeedbackInstanced","(", toString(mode), ", ", id, ", ", primcount, ")");
}

static void REGAL_CALL log_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStreamInstanced)(mode, id, stream, primcount);
    Driver("glDrawTransformFeedbackStreamInstanced","(", toString(mode), ", ", id, ", ", stream, ", ", primcount, ")");
}

// GL_ARB_transpose_matrix

static void REGAL_CALL log_glLoadTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixdARB)(m);
    Driver("glLoadTransposeMatrixdARB","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glLoadTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixfARB)(m);
    Driver("glLoadTransposeMatrixfARB","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixdARB)(m);
    Driver("glMultTransposeMatrixdARB","(", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMultTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixfARB)(m);
    Driver("glMultTransposeMatrixfARB","(", boost::print::array(m,16), ")");
}

// GL_ARB_uniform_buffer_object

static void REGAL_CALL log_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBase)(target, index, buffer);
    Driver("glBindBufferBase","(", toString(target), ", ", index, ", ", buffer, ")");
}

static void REGAL_CALL log_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRange)(target, index, buffer, offset, size);
    Driver("glBindBufferRange","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
}

static void REGAL_CALL log_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    Driver("glGetActiveUniformBlockName","(", program, ", ", uniformBlockIndex, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(uniformBlockName,'"'), ")");
}

static void REGAL_CALL log_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);
    Driver("glGetActiveUniformBlockiv","(", program, ", ", uniformBlockIndex, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);
    Driver("glGetActiveUniformName","(", program, ", ", uniformIndex, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::quote(uniformName,'"'), ")");
}

static void REGAL_CALL log_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);
    Driver("glGetActiveUniformsiv","(", program, ", ", uniformCount, ", ", boost::print::optional(uniformIndices,Logging::pointers), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_v)(target, index, data);
    Driver("glGetIntegeri_v","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static GLuint REGAL_CALL log_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetUniformBlockIndex)(program, uniformBlockName);
    Driver("glGetUniformBlockIndex","(", program, ", ", boost::print::quote(uniformBlockName,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);
    Driver("glGetUniformIndices","(", program, ", ", uniformCount, ", ", uniformNames, ", ", boost::print::optional(uniformIndices,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);
    Driver("glUniformBlockBinding","(", program, ", ", uniformBlockIndex, ", ", uniformBlockBinding, ")");
}

// GL_ARB_vertex_array_object

static void REGAL_CALL log_glBindVertexArray(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArray)(array);
    Driver("glBindVertexArray","(", array, ")");
}

static void REGAL_CALL log_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArrays)(n, arrays);
    Driver("glDeleteVertexArrays","(", n, ", ", boost::print::array(arrays,n), ")");
}

static void REGAL_CALL log_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArrays)(n, arrays);
    Driver("glGenVertexArrays","(", n, ", ", boost::print::array(arrays,n), ")");
}

static GLboolean REGAL_CALL log_glIsVertexArray(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsVertexArray)(array);
    Driver("glIsVertexArray","(", array, ")", " returned ", toString(ret));
    return ret;
}

// GL_ARB_vertex_attrib_64bit

static void REGAL_CALL log_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdv)(index, pname, params);
    Driver("glGetVertexAttribLdv","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glVertexAttribL1d(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1d)(index, x);
    Driver("glVertexAttribL1d","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dv)(index, v);
    Driver("glVertexAttribL1dv","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2d)(index, x, y);
    Driver("glVertexAttribL2d","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dv)(index, v);
    Driver("glVertexAttribL2dv","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3d)(index, x, y, z);
    Driver("glVertexAttribL3d","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dv)(index, v);
    Driver("glVertexAttribL3dv","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4d)(index, x, y, z, w);
    Driver("glVertexAttribL4d","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dv)(index, v);
    Driver("glVertexAttribL4dv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointer)(index, size, type, stride, pointer);
    Driver("glVertexAttribLPointer","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_ARB_vertex_attrib_binding

static void REGAL_CALL log_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexBuffer)(bindingindex, buffer, offset, stride);
    Driver("glBindVertexBuffer","(", bindingindex, ", ", buffer, ", ", offset, ", ", stride, ")");
}

static void REGAL_CALL log_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribBinding)(attribindex, bindingindex);
    Driver("glVertexAttribBinding","(", attribindex, ", ", bindingindex, ")");
}

static void REGAL_CALL log_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);
    Driver("glVertexAttribFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", relativeoffset, ")");
}

static void REGAL_CALL log_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormat)(attribindex, size, type, relativeoffset);
    Driver("glVertexAttribIFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
}

static void REGAL_CALL log_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormat)(attribindex, size, type, relativeoffset);
    Driver("glVertexAttribLFormat","(", attribindex, ", ", size, ", ", toString(type), ", ", relativeoffset, ")");
}

static void REGAL_CALL log_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexBindingDivisor)(bindingindex, divisor);
    Driver("glVertexBindingDivisor","(", bindingindex, ", ", divisor, ")");
}

// GL_ARB_vertex_blend

static void REGAL_CALL log_glVertexBlendARB(GLint count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendARB)(count);
    Driver("glVertexBlendARB","(", count, ")");
}

static void REGAL_CALL log_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerARB)(size, type, stride, pointer);
    Driver("glWeightPointerARB","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightbvARB(GLint size, const GLbyte *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightbvARB)(size, weights);
    Driver("glWeightbvARB","(", size, ", ", weights, ")");
}

static void REGAL_CALL log_glWeightdvARB(GLint size, const GLdouble *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightdvARB)(size, weights);
    Driver("glWeightdvARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightfvARB(GLint size, const GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightfvARB)(size, weights);
    Driver("glWeightfvARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightivARB(GLint size, const GLint *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightivARB)(size, weights);
    Driver("glWeightivARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightsvARB(GLint size, const GLshort *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightsvARB)(size, weights);
    Driver("glWeightsvARB","(", size, ", ", weights, ")");
}

static void REGAL_CALL log_glWeightubvARB(GLint size, const GLubyte *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightubvARB)(size, weights);
    Driver("glWeightubvARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightuivARB(GLint size, const GLuint *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightuivARB)(size, weights);
    Driver("glWeightuivARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightusvARB(GLint size, const GLushort *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightusvARB)(size, weights);
    Driver("glWeightusvARB","(", size, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

// GL_ARB_vertex_buffer_object

static void REGAL_CALL log_glBindBufferARB(GLenum target, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferARB)(target, buffer);
    Driver("glBindBufferARB","(", toString(target), ", ", buffer, ")");
}

static void REGAL_CALL log_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferDataARB)(target, size, data, usage);
    Driver("glBufferDataARB","(", toString(target), ", ", size, ", ", boost::print::raw(data,Logging::rawLimit(data ? size : 0)), ", ", toString(usage), ")");
}

static void REGAL_CALL log_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferSubDataARB)(target, offset, size, data);
    Driver("glBufferSubDataARB","(", toString(target), ", ", offset, ", ", size, ", ", boost::print::raw(data,Logging::rawLimit(data ? size : 0)), ")");
}

static void REGAL_CALL log_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffersARB)(n, buffers);
    Driver("glDeleteBuffersARB","(", n, ", ", boost::print::array(buffers,n), ")");
}

static void REGAL_CALL log_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenBuffersARB)(n, buffers);
    Driver("glGenBuffersARB","(", n, ", ", boost::print::array(buffers,n), ")");
}

static void REGAL_CALL log_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterivARB)(target, pname, params);
    Driver("glGetBufferParameterivARB","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervARB)(target, pname, params);
    Driver("glGetBufferPointervARB","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubDataARB)(target, offset, size, data);
    Driver("glGetBufferSubDataARB","(", toString(target), ", ", offset, ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsBufferARB(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsBufferARB)(buffer);
    Driver("glIsBufferARB","(", buffer, ")", " returned ", toString(ret));
    return ret;
}

static GLvoid *REGAL_CALL log_glMapBufferARB(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapBufferARB)(target, access);
    Driver("glMapBufferARB","(", toString(target), ", ", toString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLboolean REGAL_CALL log_glUnmapBufferARB(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glUnmapBufferARB)(target);
    Driver("glUnmapBufferARB","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

// GL_ARB_vertex_program

static void REGAL_CALL log_glBindProgramARB(GLenum target, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindProgramARB)(target, program);
    Driver("glBindProgramARB","(", toString(target), ", ", program, ")");
}

static void REGAL_CALL log_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsARB)(n, programs);
    Driver("glDeleteProgramsARB","(", n, ", ", boost::print::array(programs,n), ")");
}

static void REGAL_CALL log_glDisableVertexAttribArrayARB(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArrayARB)(index);
    Driver("glDisableVertexAttribArrayARB","(", index, ")");
}

static void REGAL_CALL log_glEnableVertexAttribArrayARB(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArrayARB)(index);
    Driver("glEnableVertexAttribArrayARB","(", index, ")");
}

static void REGAL_CALL log_glGenProgramsARB(GLsizei n, GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsARB)(n, programs);
    Driver("glGenProgramsARB","(", n, ", ", boost::print::array(programs,n), ")");
}

static void REGAL_CALL log_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterdvARB)(target, index, params);
    Driver("glGetProgramEnvParameterdvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterfvARB)(target, index, params);
    Driver("glGetProgramEnvParameterfvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterdvARB)(target, index, params);
    Driver("glGetProgramLocalParameterdvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterfvARB)(target, index, params);
    Driver("glGetProgramLocalParameterfvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringARB)(target, pname, string);
    Driver("glGetProgramStringARB","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(string,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivARB)(target, pname, params);
    Driver("glGetProgramivARB","(", toString(target), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervARB)(index, pname, pointer);
    Driver("glGetVertexAttribPointervARB","(", index, ", ", toString(pname), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvARB)(index, pname, params);
    Driver("glGetVertexAttribdvARB","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvARB)(index, pname, params);
    Driver("glGetVertexAttribfvARB","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivARB)(index, pname, params);
    Driver("glGetVertexAttribivARB","(", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static GLboolean REGAL_CALL log_glIsProgramARB(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsProgramARB)(program);
    Driver("glIsProgramARB","(", program, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dARB)(target, index, x, y, z, w);
    Driver("glProgramEnvParameter4dARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dvARB)(target, index, params);
    Driver("glProgramEnvParameter4dvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fARB)(target, index, x, y, z, w);
    Driver("glProgramEnvParameter4fARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fvARB)(target, index, params);
    Driver("glProgramEnvParameter4fvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dARB)(target, index, x, y, z, w);
    Driver("glProgramLocalParameter4dARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dvARB)(target, index, params);
    Driver("glProgramLocalParameter4dvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fARB)(target, index, x, y, z, w);
    Driver("glProgramLocalParameter4fARB","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fvARB)(target, index, params);
    Driver("glProgramLocalParameter4fvARB","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramStringARB)(target, format, len, string);
    Driver("glProgramStringARB","(", toString(target), ", ", toString(format), ", ", len, ", ", boost::print::quote(reinterpret_cast<const char *>(string),'"'), ")");
}

static void REGAL_CALL log_glVertexAttrib1dARB(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dARB)(index, x);
    Driver("glVertexAttrib1dARB","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvARB)(index, v);
    Driver("glVertexAttrib1dvARB","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1fARB(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fARB)(index, x);
    Driver("glVertexAttrib1fARB","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvARB)(index, v);
    Driver("glVertexAttrib1fvARB","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1sARB(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sARB)(index, x);
    Driver("glVertexAttrib1sARB","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svARB)(index, v);
    Driver("glVertexAttrib1svARB","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dARB)(index, x, y);
    Driver("glVertexAttrib2dARB","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvARB)(index, v);
    Driver("glVertexAttrib2dvARB","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fARB)(index, x, y);
    Driver("glVertexAttrib2fARB","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvARB)(index, v);
    Driver("glVertexAttrib2fvARB","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sARB)(index, x, y);
    Driver("glVertexAttrib2sARB","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svARB)(index, v);
    Driver("glVertexAttrib2svARB","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dARB)(index, x, y, z);
    Driver("glVertexAttrib3dARB","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvARB)(index, v);
    Driver("glVertexAttrib3dvARB","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fARB)(index, x, y, z);
    Driver("glVertexAttrib3fARB","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvARB)(index, v);
    Driver("glVertexAttrib3fvARB","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sARB)(index, x, y, z);
    Driver("glVertexAttrib3sARB","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svARB)(index, v);
    Driver("glVertexAttrib3svARB","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NbvARB)(index, v);
    Driver("glVertexAttrib4NbvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NivARB)(index, v);
    Driver("glVertexAttrib4NivARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NsvARB)(index, v);
    Driver("glVertexAttrib4NsvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubARB)(index, x, y, z, w);
    Driver("glVertexAttrib4NubARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubvARB)(index, v);
    Driver("glVertexAttrib4NubvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NuivARB)(index, v);
    Driver("glVertexAttrib4NuivARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NusvARB)(index, v);
    Driver("glVertexAttrib4NusvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bvARB)(index, v);
    Driver("glVertexAttrib4bvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dARB)(index, x, y, z, w);
    Driver("glVertexAttrib4dARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvARB)(index, v);
    Driver("glVertexAttrib4dvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fARB)(index, x, y, z, w);
    Driver("glVertexAttrib4fARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvARB)(index, v);
    Driver("glVertexAttrib4fvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ivARB)(index, v);
    Driver("glVertexAttrib4ivARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sARB)(index, x, y, z, w);
    Driver("glVertexAttrib4sARB","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svARB)(index, v);
    Driver("glVertexAttrib4svARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvARB)(index, v);
    Driver("glVertexAttrib4ubvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uivARB)(index, v);
    Driver("glVertexAttrib4uivARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usvARB)(index, v);
    Driver("glVertexAttrib4usvARB","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
    Driver("glVertexAttribPointerARB","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_ARB_vertex_shader

static void REGAL_CALL log_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocationARB)(programObj, index, name);
    Driver("glBindAttribLocationARB","(", programObj, ", ", index, ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);
    Driver("glGetActiveAttribARB","(", programObj, ", ", index, ", ", maxLength, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static GLint REGAL_CALL log_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetAttribLocationARB)(programObj, name);
    Driver("glGetAttribLocationARB","(", programObj, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

// GL_ARB_vertex_type_2_10_10_10_rev

static void REGAL_CALL log_glColorP3ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorP3ui)(type, color);
    Driver("glColorP3ui","(", toString(type), ", ", color, ")");
}

static void REGAL_CALL log_glColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorP3uiv)(type, color);
    Driver("glColorP3uiv","(", toString(type), ", ", boost::print::array(color,1), ")");
}

static void REGAL_CALL log_glColorP4ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorP4ui)(type, color);
    Driver("glColorP4ui","(", toString(type), ", ", color, ")");
}

static void REGAL_CALL log_glColorP4uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorP4uiv)(type, color);
    Driver("glColorP4uiv","(", toString(type), ", ", boost::print::array(color,1), ")");
}

static void REGAL_CALL log_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1ui)(texture, type, coords);
    Driver("glMultiTexCoordP1ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1uiv)(texture, type, coords);
    Driver("glMultiTexCoordP1uiv","(", toString(texture), ", ", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2ui)(texture, type, coords);
    Driver("glMultiTexCoordP2ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2uiv)(texture, type, coords);
    Driver("glMultiTexCoordP2uiv","(", toString(texture), ", ", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3ui)(texture, type, coords);
    Driver("glMultiTexCoordP3ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3uiv)(texture, type, coords);
    Driver("glMultiTexCoordP3uiv","(", toString(texture), ", ", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4ui)(texture, type, coords);
    Driver("glMultiTexCoordP4ui","(", toString(texture), ", ", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4uiv)(texture, type, coords);
    Driver("glMultiTexCoordP4uiv","(", toString(texture), ", ", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glNormalP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalP3ui)(type, coords);
    Driver("glNormalP3ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glNormalP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalP3uiv)(type, coords);
    Driver("glNormalP3uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glSecondaryColorP3ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3ui)(type, color);
    Driver("glSecondaryColorP3ui","(", toString(type), ", ", color, ")");
}

static void REGAL_CALL log_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3uiv)(type, color);
    Driver("glSecondaryColorP3uiv","(", toString(type), ", ", boost::print::array(color,1), ")");
}

static void REGAL_CALL log_glTexCoordP1ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1ui)(type, coords);
    Driver("glTexCoordP1ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1uiv)(type, coords);
    Driver("glTexCoordP1uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glTexCoordP2ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2ui)(type, coords);
    Driver("glTexCoordP2ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2uiv)(type, coords);
    Driver("glTexCoordP2uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glTexCoordP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3ui)(type, coords);
    Driver("glTexCoordP3ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3uiv)(type, coords);
    Driver("glTexCoordP3uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glTexCoordP4ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4ui)(type, coords);
    Driver("glTexCoordP4ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4uiv)(type, coords);
    Driver("glTexCoordP4uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1ui)(index, type, normalized, value);
    Driver("glVertexAttribP1ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
}

static void REGAL_CALL log_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1uiv)(index, type, normalized, value);
    Driver("glVertexAttribP1uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2ui)(index, type, normalized, value);
    Driver("glVertexAttribP2ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
}

static void REGAL_CALL log_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2uiv)(index, type, normalized, value);
    Driver("glVertexAttribP2uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3ui)(index, type, normalized, value);
    Driver("glVertexAttribP3ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
}

static void REGAL_CALL log_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3uiv)(index, type, normalized, value);
    Driver("glVertexAttribP3uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4ui)(index, type, normalized, value);
    Driver("glVertexAttribP4ui","(", index, ", ", toString(type), ", ", toString(normalized), ", ", value, ")");
}

static void REGAL_CALL log_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4uiv)(index, type, normalized, value);
    Driver("glVertexAttribP4uiv","(", index, ", ", toString(type), ", ", toString(normalized), ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glVertexP2ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP2ui)(type, coords);
    Driver("glVertexP2ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glVertexP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP2uiv)(type, coords);
    Driver("glVertexP2uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP3ui)(type, coords);
    Driver("glVertexP3ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glVertexP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP3uiv)(type, coords);
    Driver("glVertexP3uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexP4ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP4ui)(type, coords);
    Driver("glVertexP4ui","(", toString(type), ", ", coords, ")");
}

static void REGAL_CALL log_glVertexP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexP4uiv)(type, coords);
    Driver("glVertexP4uiv","(", toString(type), ", ", boost::print::array(coords,1), ")");
}

// GL_ARB_viewport_array

static void REGAL_CALL log_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeArrayv)(first, count, v);
    Driver("glDepthRangeArrayv","(", first, ", ", count, ", ", boost::print::array(v,count * 2), ")");
}

static void REGAL_CALL log_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeIndexed)(index, n, f);
    Driver("glDepthRangeIndexed","(", index, ", ", n, ", ", f, ")");
}

static void REGAL_CALL log_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_v)(target, index, v);
    Driver("glGetDoublei_v","(", toString(target), ", ", index, ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_v)(target, index, v);
    Driver("glGetFloati_v","(", toString(target), ", ", index, ", ", boost::print::optional(v,Logging::pointers), ")");
}

static void REGAL_CALL log_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScissorArrayv)(first, count, v);
    Driver("glScissorArrayv","(", first, ", ", count, ", ", boost::print::array(v,count * 4), ")");
}

static void REGAL_CALL log_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexed)(index, left, bottom, width, height);
    Driver("glScissorIndexed","(", index, ", ", left, ", ", bottom, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glScissorIndexedv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexedv)(index, v);
    Driver("glScissorIndexedv","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glViewportArrayv)(first, count, v);
    Driver("glViewportArrayv","(", first, ", ", count, ", ", boost::print::array(v,count * 4), ")");
}

static void REGAL_CALL log_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedf)(index, x, y, w, h);
    Driver("glViewportIndexedf","(", index, ", ", x, ", ", y, ", ", w, ", ", h, ")");
}

static void REGAL_CALL log_glViewportIndexedfv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedfv)(index, v);
    Driver("glViewportIndexedfv","(", index, ", ", boost::print::array(v,4), ")");
}

// GL_ARB_window_pos

static void REGAL_CALL log_glWindowPos2dARB(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dARB)(x, y);
    Driver("glWindowPos2dARB","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2dvARB(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvARB)(p);
    Driver("glWindowPos2dvARB","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2fARB(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fARB)(x, y);
    Driver("glWindowPos2fARB","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2fvARB(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvARB)(p);
    Driver("glWindowPos2fvARB","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2iARB(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iARB)(x, y);
    Driver("glWindowPos2iARB","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2ivARB(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivARB)(p);
    Driver("glWindowPos2ivARB","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos2sARB(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sARB)(x, y);
    Driver("glWindowPos2sARB","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2svARB(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svARB)(p);
    Driver("glWindowPos2svARB","(", boost::print::array(p,2), ")");
}

static void REGAL_CALL log_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dARB)(x, y, z);
    Driver("glWindowPos3dARB","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3dvARB(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvARB)(p);
    Driver("glWindowPos3dvARB","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fARB)(x, y, z);
    Driver("glWindowPos3fARB","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3fvARB(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvARB)(p);
    Driver("glWindowPos3fvARB","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3iARB(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iARB)(x, y, z);
    Driver("glWindowPos3iARB","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3ivARB(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivARB)(p);
    Driver("glWindowPos3ivARB","(", boost::print::array(p,3), ")");
}

static void REGAL_CALL log_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sARB)(x, y, z);
    Driver("glWindowPos3sARB","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3svARB(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svARB)(p);
    Driver("glWindowPos3svARB","(", boost::print::array(p,3), ")");
}

// GL_ATI_draw_buffers

static void REGAL_CALL log_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersATI)(n, bufs);
    Driver("glDrawBuffersATI","(", n, ", ", boost::print::array(bufs,n), ")");
}

// GL_ATI_element_array

static void REGAL_CALL log_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayATI)(mode, count);
    Driver("glDrawElementArrayATI","(", toString(mode), ", ", count, ")");
}

static void REGAL_CALL log_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayATI)(mode, start, end, count);
    Driver("glDrawRangeElementArrayATI","(", toString(mode), ", ", start, ", ", end, ", ", count, ")");
}

static void REGAL_CALL log_glElementPointerATI(GLenum type, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glElementPointerATI)(type, pointer);
    Driver("glElementPointerATI","(", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_ATI_envmap_bumpmap

static void REGAL_CALL log_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterfvATI)(pname, param);
    Driver("glGetTexBumpParameterfvATI","(", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterivATI)(pname, param);
    Driver("glGetTexBumpParameterivATI","(", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterfvATI)(pname, param);
    Driver("glTexBumpParameterfvATI","(", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexBumpParameterivATI(GLenum pname, const GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterivATI)(pname, param);
    Driver("glTexBumpParameterivATI","(", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

// GL_ATI_fragment_shader

static void REGAL_CALL log_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
    Driver("glAlphaFragmentOp1ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
}

static void REGAL_CALL log_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    Driver("glAlphaFragmentOp2ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
}

static void REGAL_CALL log_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    Driver("glAlphaFragmentOp3ATI","(", toString(op), ", ", dst, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ", ", arg2Mod, ")");
}

static void REGAL_CALL log_glBeginFragmentShaderATI(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginFragmentShaderATI)();
    Driver("glBeginFragmentShaderATI","()");
}

static void REGAL_CALL log_glBindFragmentShaderATI(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFragmentShaderATI)(id);
    Driver("glBindFragmentShaderATI","(", id, ")");
}

static void REGAL_CALL log_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
    Driver("glColorFragmentOp1ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ")");
}

static void REGAL_CALL log_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    Driver("glColorFragmentOp2ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ")");
}

static void REGAL_CALL log_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    Driver("glColorFragmentOp3ATI","(", toString(op), ", ", dst, ", ", dstMask, ", ", dstMod, ", ", arg1, ", ", arg1Rep, ", ", arg1Mod, ", ", arg2, ", ", arg2Rep, ")");
}

static void REGAL_CALL log_glDeleteFragmentShaderATI(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFragmentShaderATI)(id);
    Driver("glDeleteFragmentShaderATI","(", id, ")");
}

static void REGAL_CALL log_glEndFragmentShaderATI(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndFragmentShaderATI)();
    Driver("glEndFragmentShaderATI","()");
}

static GLuint REGAL_CALL log_glGenFragmentShadersATI(GLuint range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenFragmentShadersATI)(range);
    Driver("glGenFragmentShadersATI","(", range, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPassTexCoordATI)(dst, coord, swizzle);
    Driver("glPassTexCoordATI","(", dst, ", ", coord, ", ", toString(swizzle), ")");
}

static void REGAL_CALL log_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleMapATI)(dst, interp, swizzle);
    Driver("glSampleMapATI","(", dst, ", ", interp, ", ", toString(swizzle), ")");
}

static void REGAL_CALL log_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetFragmentShaderConstantATI)(dst, value);
    Driver("glSetFragmentShaderConstantATI","(", dst, ", ", boost::print::array(value,4), ")");
}

// GL_ATI_map_object_buffer

static GLvoid *REGAL_CALL log_glMapObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapObjectBufferATI)(buffer);
    Driver("glMapObjectBufferATI","(", buffer, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glUnmapObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUnmapObjectBufferATI)(buffer);
    Driver("glUnmapObjectBufferATI","(", buffer, ")");
}

// GL_ATI_pn_triangles

static void REGAL_CALL log_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesfATI)(pname, param);
    Driver("glPNTrianglesfATI","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPNTrianglesiATI(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesiATI)(pname, param);
    Driver("glPNTrianglesiATI","(", toString(pname), ", ", param, ")");
}

// GL_ATI_separate_stencil

static void REGAL_CALL log_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparateATI)(frontfunc, backfunc, ref, mask);
    Driver("glStencilFuncSeparateATI","(", toString(frontfunc), ", ", toString(backfunc), ", ", boost::print::hex(ref), ", ", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparateATI)(face, sfail, dpfail, dppass);
    Driver("glStencilOpSeparateATI","(", toString(face), ", ", toString(sfail), ", ", toString(dpfail), ", ", toString(dppass), ")");
}

// GL_ATI_vertex_array_object

static void REGAL_CALL log_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glArrayObjectATI)(array, size, type, stride, buffer, offset);
    Driver("glArrayObjectATI","(", toString(array), ", ", size, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
}

static void REGAL_CALL log_glFreeObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFreeObjectBufferATI)(buffer);
    Driver("glFreeObjectBufferATI","(", buffer, ")");
}

static void REGAL_CALL log_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectfvATI)(array, pname, params);
    Driver("glGetArrayObjectfvATI","(", toString(array), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectivATI)(array, pname, params);
    Driver("glGetArrayObjectivATI","(", toString(array), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferfvATI)(buffer, pname, params);
    Driver("glGetObjectBufferfvATI","(", buffer, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferivATI)(buffer, pname, params);
    Driver("glGetObjectBufferivATI","(", buffer, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectfvATI)(id, pname, params);
    Driver("glGetVariantArrayObjectfvATI","(", id, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectivATI)(id, pname, params);
    Driver("glGetVariantArrayObjectivATI","(", id, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static GLboolean REGAL_CALL log_glIsObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsObjectBufferATI)(buffer);
    Driver("glIsObjectBufferATI","(", buffer, ")", " returned ", toString(ret));
    return ret;
}

static GLuint REGAL_CALL log_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glNewObjectBufferATI)(size, pointer, usage);
    Driver("glNewObjectBufferATI","(", size, ", ", boost::print::optional(pointer,Logging::pointers), ", ", toString(usage), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);
    Driver("glUpdateObjectBufferATI","(", buffer, ", ", offset, ", ", size, ", ", boost::print::optional(pointer,Logging::pointers), ", ", toString(preserve), ")");
}

static void REGAL_CALL log_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantArrayObjectATI)(id, type, stride, buffer, offset);
    Driver("glVariantArrayObjectATI","(", id, ", ", toString(type), ", ", stride, ", ", buffer, ", ", offset, ")");
}

// GL_ATI_vertex_attrib_array_object

static void REGAL_CALL log_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectfvATI)(index, pname, params);
    Driver("glGetVertexAttribArrayObjectfvATI","(", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectivATI)(index, pname, params);
    Driver("glGetVertexAttribArrayObjectivATI","(", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);
    Driver("glVertexAttribArrayObjectATI","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", buffer, ", ", offset, ")");
}

// GL_ATI_vertex_streams

static void REGAL_CALL log_glClientActiveVertexStreamATI(GLenum stream)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClientActiveVertexStreamATI)(stream);
    Driver("glClientActiveVertexStreamATI","(", toString(stream), ")");
}

static void REGAL_CALL log_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bATI)(stream, x, y, z);
    Driver("glNormalStream3bATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bvATI)(stream, coords);
    Driver("glNormalStream3bvATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dATI)(stream, x, y, z);
    Driver("glNormalStream3dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dvATI)(stream, coords);
    Driver("glNormalStream3dvATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fATI)(stream, x, y, z);
    Driver("glNormalStream3fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fvATI)(stream, coords);
    Driver("glNormalStream3fvATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3iATI)(stream, x, y, z);
    Driver("glNormalStream3iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3ivATI)(stream, coords);
    Driver("glNormalStream3ivATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3sATI)(stream, x, y, z);
    Driver("glNormalStream3sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3svATI)(stream, coords);
    Driver("glNormalStream3svATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnvfATI)(pname, param);
    Driver("glVertexBlendEnvfATI","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glVertexBlendEnviATI(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnviATI)(pname, param);
    Driver("glVertexBlendEnviATI","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glVertexStream1dATI(GLenum stream, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dATI)(stream, x);
    Driver("glVertexStream1dATI","(", toString(stream), ", ", x, ")");
}

static void REGAL_CALL log_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dvATI)(stream, coords);
    Driver("glVertexStream1dvATI","(", toString(stream), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexStream1fATI(GLenum stream, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fATI)(stream, x);
    Driver("glVertexStream1fATI","(", toString(stream), ", ", x, ")");
}

static void REGAL_CALL log_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fvATI)(stream, coords);
    Driver("glVertexStream1fvATI","(", toString(stream), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexStream1iATI(GLenum stream, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1iATI)(stream, x);
    Driver("glVertexStream1iATI","(", toString(stream), ", ", x, ")");
}

static void REGAL_CALL log_glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1ivATI)(stream, coords);
    Driver("glVertexStream1ivATI","(", toString(stream), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexStream1sATI(GLenum stream, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1sATI)(stream, x);
    Driver("glVertexStream1sATI","(", toString(stream), ", ", x, ")");
}

static void REGAL_CALL log_glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1svATI)(stream, coords);
    Driver("glVertexStream1svATI","(", toString(stream), ", ", boost::print::array(coords,1), ")");
}

static void REGAL_CALL log_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dATI)(stream, x, y);
    Driver("glVertexStream2dATI","(", toString(stream), ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dvATI)(stream, coords);
    Driver("glVertexStream2dvATI","(", toString(stream), ", ", boost::print::array(coords,2), ")");
}

static void REGAL_CALL log_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fATI)(stream, x, y);
    Driver("glVertexStream2fATI","(", toString(stream), ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fvATI)(stream, coords);
    Driver("glVertexStream2fvATI","(", toString(stream), ", ", boost::print::array(coords,2), ")");
}

static void REGAL_CALL log_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2iATI)(stream, x, y);
    Driver("glVertexStream2iATI","(", toString(stream), ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2ivATI)(stream, coords);
    Driver("glVertexStream2ivATI","(", toString(stream), ", ", boost::print::array(coords,2), ")");
}

static void REGAL_CALL log_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2sATI)(stream, x, y);
    Driver("glVertexStream2sATI","(", toString(stream), ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2svATI)(stream, coords);
    Driver("glVertexStream2svATI","(", toString(stream), ", ", boost::print::array(coords,2), ")");
}

static void REGAL_CALL log_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dATI)(stream, x, y, z);
    Driver("glVertexStream3dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dvATI)(stream, coords);
    Driver("glVertexStream3dvATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fATI)(stream, x, y, z);
    Driver("glVertexStream3fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fvATI)(stream, coords);
    Driver("glVertexStream3fvATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3iATI)(stream, x, y, z);
    Driver("glVertexStream3iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3ivATI)(stream, coords);
    Driver("glVertexStream3ivATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3sATI)(stream, x, y, z);
    Driver("glVertexStream3sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3svATI)(stream, coords);
    Driver("glVertexStream3svATI","(", toString(stream), ", ", boost::print::array(coords,3), ")");
}

static void REGAL_CALL log_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dATI)(stream, x, y, z, w);
    Driver("glVertexStream4dATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dvATI)(stream, coords);
    Driver("glVertexStream4dvATI","(", toString(stream), ", ", boost::print::array(coords,4), ")");
}

static void REGAL_CALL log_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fATI)(stream, x, y, z, w);
    Driver("glVertexStream4fATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fvATI)(stream, coords);
    Driver("glVertexStream4fvATI","(", toString(stream), ", ", boost::print::array(coords,4), ")");
}

static void REGAL_CALL log_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4iATI)(stream, x, y, z, w);
    Driver("glVertexStream4iATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4ivATI)(stream, coords);
    Driver("glVertexStream4ivATI","(", toString(stream), ", ", boost::print::array(coords,4), ")");
}

static void REGAL_CALL log_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4sATI)(stream, x, y, z, w);
    Driver("glVertexStream4sATI","(", toString(stream), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4svATI)(stream, coords);
    Driver("glVertexStream4svATI","(", toString(stream), ", ", boost::print::array(coords,4), ")");
}

// GL_EXT_bindable_uniform

static GLint REGAL_CALL log_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetUniformBufferSizeEXT)(program, location);
    Driver("glGetUniformBufferSizeEXT","(", program, ", ", location, ")", " returned ", ret);
    return ret;
}

static GLintptr REGAL_CALL log_glGetUniformOffsetEXT(GLuint program, GLint location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLintptr  ret = _next->call(&_next->glGetUniformOffsetEXT)(program, location);
    Driver("glGetUniformOffsetEXT","(", program, ", ", location, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformBufferEXT)(program, location, buffer);
    Driver("glUniformBufferEXT","(", program, ", ", location, ", ", buffer, ")");
}

// GL_EXT_blend_color

static void REGAL_CALL log_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendColorEXT)(red, green, blue, alpha);
    Driver("glBlendColorEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

// GL_EXT_blend_equation_separate

static void REGAL_CALL log_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateEXT)(modeRGB, modeAlpha);
    Driver("glBlendEquationSeparateEXT","(", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

// GL_EXT_blend_func_separate

static void REGAL_CALL log_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    Driver("glBlendFuncSeparateEXT","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
}

// GL_EXT_blend_minmax

static void REGAL_CALL log_glBlendEquationEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationEXT)(mode);
    Driver("glBlendEquationEXT","(", toString(mode), ")");
}

// GL_EXT_color_subtable

static void REGAL_CALL log_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorSubTableEXT)(target, start, count, format, type, table);
    Driver("glColorSubTableEXT","(", toString(target), ", ", start, ", ", count, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTableEXT)(target, start, x, y, width);
    Driver("glCopyColorSubTableEXT","(", toString(target), ", ", start, ", ", x, ", ", y, ", ", width, ")");
}

// GL_EXT_compiled_vertex_array

static void REGAL_CALL log_glLockArraysEXT(GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLockArraysEXT)(first, count);
    Driver("glLockArraysEXT","(", first, ", ", count, ")");
}

static void REGAL_CALL log_glUnlockArraysEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUnlockArraysEXT)();
    Driver("glUnlockArraysEXT","()");
}

// GL_EXT_convolution

static void REGAL_CALL log_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);
    Driver("glConvolutionFilter1DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);
    Driver("glConvolutionFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfEXT)(target, pname, param);
    Driver("glConvolutionParameterfEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfvEXT)(target, pname, params);
    Driver("glConvolutionParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriEXT)(target, pname, param);
    Driver("glConvolutionParameteriEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterivEXT)(target, pname, params);
    Driver("glConvolutionParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);
    Driver("glCopyConvolutionFilter1DEXT","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);
    Driver("glCopyConvolutionFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilterEXT)(target, format, type, image);
    Driver("glGetConvolutionFilterEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(image,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfvEXT)(target, pname, params);
    Driver("glGetConvolutionParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterivEXT)(target, pname, params);
    Driver("glGetConvolutionParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilterEXT)(target, format, type, row, column, span);
    Driver("glGetSeparableFilterEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(row,Logging::pointers), ", ", boost::print::optional(column,Logging::pointers), ", ", boost::print::optional(span,Logging::pointers), ")");
}

static void REGAL_CALL log_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);
    Driver("glSeparableFilter2DEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(row,Logging::pointers), ", ", boost::print::optional(column,Logging::pointers), ")");
}

// GL_EXT_coordinate_frame

static void REGAL_CALL log_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bEXT)(bx, by, bz);
    Driver("glBinormal3bEXT","(", bx, ", ", by, ", ", bz, ")");
}

static void REGAL_CALL log_glBinormal3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bvEXT)(v);
    Driver("glBinormal3bvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dEXT)(bx, by, bz);
    Driver("glBinormal3dEXT","(", bx, ", ", by, ", ", bz, ")");
}

static void REGAL_CALL log_glBinormal3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dvEXT)(v);
    Driver("glBinormal3dvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fEXT)(bx, by, bz);
    Driver("glBinormal3fEXT","(", bx, ", ", by, ", ", bz, ")");
}

static void REGAL_CALL log_glBinormal3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fvEXT)(v);
    Driver("glBinormal3fvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3iEXT)(bx, by, bz);
    Driver("glBinormal3iEXT","(", bx, ", ", by, ", ", bz, ")");
}

static void REGAL_CALL log_glBinormal3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3ivEXT)(v);
    Driver("glBinormal3ivEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3sEXT)(bx, by, bz);
    Driver("glBinormal3sEXT","(", bx, ", ", by, ", ", bz, ")");
}

static void REGAL_CALL log_glBinormal3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormal3svEXT)(v);
    Driver("glBinormal3svEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBinormalPointerEXT)(type, stride, pointer);
    Driver("glBinormalPointerEXT","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3bEXT)(tx, ty, tz);
    Driver("glTangent3bEXT","(", tx, ", ", ty, ", ", tz, ")");
}

static void REGAL_CALL log_glTangent3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3bvEXT)(v);
    Driver("glTangent3bvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3dEXT)(tx, ty, tz);
    Driver("glTangent3dEXT","(", tx, ", ", ty, ", ", tz, ")");
}

static void REGAL_CALL log_glTangent3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3dvEXT)(v);
    Driver("glTangent3dvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3fEXT)(tx, ty, tz);
    Driver("glTangent3fEXT","(", tx, ", ", ty, ", ", tz, ")");
}

static void REGAL_CALL log_glTangent3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3fvEXT)(v);
    Driver("glTangent3fvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3iEXT)(tx, ty, tz);
    Driver("glTangent3iEXT","(", tx, ", ", ty, ", ", tz, ")");
}

static void REGAL_CALL log_glTangent3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3ivEXT)(v);
    Driver("glTangent3ivEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3sEXT)(tx, ty, tz);
    Driver("glTangent3sEXT","(", tx, ", ", ty, ", ", tz, ")");
}

static void REGAL_CALL log_glTangent3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangent3svEXT)(v);
    Driver("glTangent3svEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTangentPointerEXT)(type, stride, pointer);
    Driver("glTangentPointerEXT","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_EXT_copy_texture

static void REGAL_CALL log_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);
    Driver("glCopyTexImage1DEXT","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);
    Driver("glCopyTexImage2DEXT","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);
    Driver("glCopyTexSubImage1DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);
    Driver("glCopyTexSubImage2DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    Driver("glCopyTexSubImage3DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

// GL_EXT_cull_vertex

static void REGAL_CALL log_glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCullParameterdvEXT)(pname, params);
    Driver("glCullParameterdvEXT","(", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCullParameterfvEXT)(pname, params);
    Driver("glCullParameterfvEXT","(", toString(pname), ", ", boost::print::array(params,4), ")");
}

// GL_EXT_debug_label

static void REGAL_CALL log_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabelEXT)(type, object, bufSize, length, label);
    Driver("glGetObjectLabelEXT","(", toString(type), ", ", object, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(label,'"'), ")");
}

static void REGAL_CALL log_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLabelObjectEXT)(type, object, length, label);
    Driver("glLabelObjectEXT","(", toString(type), ", ", object, ", ", length, ", ", boost::print::quote(label,'"'), ")");
}

// GL_EXT_debug_marker

static void REGAL_CALL log_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInsertEventMarkerEXT)(length, marker);
    Driver("glInsertEventMarkerEXT","(", length, ", ", boost::print::quote(marker,'"'), ")");
}

static void REGAL_CALL log_glPopGroupMarkerEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopGroupMarkerEXT)();
    Driver("glPopGroupMarkerEXT","()");
}

static void REGAL_CALL log_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushGroupMarkerEXT)(length, marker);
    Driver("glPushGroupMarkerEXT","(", length, ", ", boost::print::quote(marker,'"'), ")");
}

// GL_EXT_depth_bounds_test

static void REGAL_CALL log_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsEXT)(zmin, zmax);
    Driver("glDepthBoundsEXT","(", zmin, ", ", zmax, ")");
}

// GL_EXT_direct_state_access

static void REGAL_CALL log_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindMultiTextureEXT)(texunit, target, texture);
    Driver("glBindMultiTextureEXT","(", toString(texunit), ", ", toString(target), ", ", texture, ")");
}

static GLenum REGAL_CALL log_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glCheckNamedFramebufferStatusEXT)(framebuffer, target);
    Driver("glCheckNamedFramebufferStatusEXT","(", framebuffer, ", ", toString(target), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClientAttribDefaultEXT)(mask);
    Driver("glClientAttribDefaultEXT","(", mask, ")");
}

static void REGAL_CALL log_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, data);
    Driver("glCompressedMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
    Driver("glCompressedMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", boost::print::optional(bits,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
    Driver("glCompressedMultiTexImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ")");
}

static void REGAL_CALL log_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, data);
    Driver("glCompressedMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
    Driver("glCompressedMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ")");
}

static void REGAL_CALL log_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    Driver("glCompressedMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

static void REGAL_CALL log_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
    Driver("glCompressedTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", border, ", ", imageSize, ", ", boost::print::optional(bits,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
    Driver("glCompressedTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", border, ", ", imageSize, ", ", boost::print::optional(bits,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
    Driver("glCompressedTextureImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ")");
}

static void REGAL_CALL log_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
    Driver("glCompressedTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", imageSize, ", ", boost::print::optional(bits,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    Driver("glCompressedTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", imageSize, ")");
}

static void REGAL_CALL log_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    Driver("glCompressedTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

static void REGAL_CALL log_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
    Driver("glCopyMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
}

static void REGAL_CALL log_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
    Driver("glCopyMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
}

static void REGAL_CALL log_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
    Driver("glCopyMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
    Driver("glCopyMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    Driver("glCopyMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
    Driver("glCopyTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
    Driver("glCopyTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ", ", height, ", ", border, ")");
}

static void REGAL_CALL log_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
    Driver("glCopyTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
    Driver("glCopyTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    Driver("glCopyTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateIndexedEXT)(array, index);
    Driver("glDisableClientStateIndexedEXT","(", toString(array), ", ", index, ")");
}

static void REGAL_CALL log_glDisableClientStateiEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateiEXT)(array, index);
    Driver("glDisableClientStateiEXT","(", toString(array), ", ", index, ")");
}

static void REGAL_CALL log_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayAttribEXT)(vaobj, array);
    Driver("glDisableVertexArrayAttribEXT","(", vaobj, ", ", toString(array), ")");
}

static void REGAL_CALL log_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayEXT)(vaobj, array);
    Driver("glDisableVertexArrayEXT","(", vaobj, ", ", toString(array), ")");
}

static void REGAL_CALL log_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateIndexedEXT)(array, index);
    Driver("glEnableClientStateIndexedEXT","(", toString(array), ", ", index, ")");
}

static void REGAL_CALL log_glEnableClientStateiEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateiEXT)(array, index);
    Driver("glEnableClientStateiEXT","(", toString(array), ", ", index, ")");
}

static void REGAL_CALL log_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayAttribEXT)(vaobj, array);
    Driver("glEnableVertexArrayAttribEXT","(", vaobj, ", ", toString(array), ")");
}

static void REGAL_CALL log_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayEXT)(vaobj, array);
    Driver("glEnableVertexArrayEXT","(", vaobj, ", ", toString(array), ")");
}

static void REGAL_CALL log_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
    Driver("glFlushMappedNamedBufferRangeEXT","(", buffer, ", ", offset, ", ", length, ")");
}

static void REGAL_CALL log_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBufferEXT)(framebuffer, mode);
    Driver("glFramebufferDrawBufferEXT","(", framebuffer, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
    Driver("glFramebufferDrawBuffersEXT","(", framebuffer, ", ", n, ", ", boost::print::array(bufs,n), ")");
}

static void REGAL_CALL log_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferReadBufferEXT)(framebuffer, mode);
    Driver("glFramebufferReadBufferEXT","(", framebuffer, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenerateMultiTexMipmapEXT)(texunit, target);
    Driver("glGenerateMultiTexMipmapEXT","(", toString(texunit), ", ", toString(target), ")");
}

static void REGAL_CALL log_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenerateTextureMipmapEXT)(texture, target);
    Driver("glGenerateTextureMipmapEXT","(", texture, ", ", toString(target), ")");
}

static void REGAL_CALL log_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
    Driver("glGetCompressedMultiTexImageEXT","(", toString(texunit), ", ", toString(target), ", ", lod, ", ", boost::print::optional(img,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTextureImageEXT)(texture, target, lod, img);
    Driver("glGetCompressedTextureImageEXT","(", texture, ", ", toString(target), ", ", lod, ", ", boost::print::optional(img,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDoubleIndexedvEXT)(target, index, data);
    Driver("glGetDoubleIndexedvEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_vEXT)(target, index, data);
    Driver("glGetDoublei_vEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFloatIndexedvEXT)(target, index, data);
    Driver("glGetFloatIndexedvEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_vEXT)(target, index, data);
    Driver("glGetFloati_vEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameterivEXT)(framebuffer, pname, params);
    Driver("glGetFramebufferParameterivEXT","(", framebuffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvfvEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexEnvfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvivEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexEnvivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGendvEXT)(texunit, coord, pname, params);
    Driver("glGetMultiTexGendvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenfvEXT)(texunit, coord, pname, params);
    Driver("glGetMultiTexGenfvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenivEXT)(texunit, coord, pname, params);
    Driver("glGetMultiTexGenivEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
    Driver("glGetMultiTexImageEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);
    Driver("glGetMultiTexLevelParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);
    Driver("glGetMultiTexLevelParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIivEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexParameterIivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexParameterIuivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterfvEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterivEXT)(texunit, target, pname, params);
    Driver("glGetMultiTexParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterivEXT)(buffer, pname, params);
    Driver("glGetNamedBufferParameterivEXT","(", buffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferPointervEXT)(buffer, pname, params);
    Driver("glGetNamedBufferPointervEXT","(", buffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
    Driver("glGetNamedBufferSubDataEXT","(", buffer, ", ", offset, ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);
    Driver("glGetNamedFramebufferAttachmentParameterivEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);
    Driver("glGetNamedProgramLocalParameterIivEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);
    Driver("glGetNamedProgramLocalParameterIuivEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);
    Driver("glGetNamedProgramLocalParameterdvEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);
    Driver("glGetNamedProgramLocalParameterfvEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramStringEXT)(program, target, pname, string);
    Driver("glGetNamedProgramStringEXT","(", program, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(string,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramivEXT)(program, target, pname, params);
    Driver("glGetNamedProgramivEXT","(", program, ", ", toString(target), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);
    Driver("glGetNamedRenderbufferParameterivEXT","(", renderbuffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPointerIndexedvEXT)(target, index, data);
    Driver("glGetPointerIndexedvEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPointeri_vEXT)(pname, index, params);
    Driver("glGetPointeri_vEXT","(", toString(pname), ", ", index, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureImageEXT)(texture, target, level, format, type, pixels);
    Driver("glGetTextureImageEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);
    Driver("glGetTextureLevelParameterfvEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);
    Driver("glGetTextureLevelParameterivEXT","(", texture, ", ", toString(target), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIivEXT)(texture, target, pname, params);
    Driver("glGetTextureParameterIivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIuivEXT)(texture, target, pname, params);
    Driver("glGetTextureParameterIuivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterfvEXT)(texture, target, pname, params);
    Driver("glGetTextureParameterfvEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterivEXT)(texture, target, pname, params);
    Driver("glGetTextureParameterivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);
    Driver("glGetVertexArrayIntegeri_vEXT","(", vaobj, ", ", index, ", ", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegervEXT)(vaobj, pname, param);
    Driver("glGetVertexArrayIntegervEXT","(", vaobj, ", ", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);
    Driver("glGetVertexArrayPointeri_vEXT","(", vaobj, ", ", index, ", ", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointervEXT)(vaobj, pname, param);
    Driver("glGetVertexArrayPointervEXT","(", vaobj, ", ", toString(pname), ", ", boost::print::optional(param,Logging::pointers), ")");
}

static GLvoid *REGAL_CALL log_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapNamedBufferEXT)(buffer, access);
    Driver("glMapNamedBufferEXT","(", buffer, ", ", toString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLvoid *REGAL_CALL log_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapNamedBufferRangeEXT)(buffer, offset, length, access);
    Driver("glMapNamedBufferRangeEXT","(", buffer, ", ", offset, ", ", length, ", ", access, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
    Driver("glMatrixFrustumEXT","(", toString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glMatrixLoadIdentityEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadIdentityEXT)(mode);
    Driver("glMatrixLoadIdentityEXT","(", toString(mode), ")");
}

static void REGAL_CALL log_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposedEXT)(mode, m);
    Driver("glMatrixLoadTransposedEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposefEXT)(mode, m);
    Driver("glMatrixLoadTransposefEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoaddEXT)(mode, m);
    Driver("glMatrixLoaddEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadfEXT)(mode, m);
    Driver("glMatrixLoadfEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposedEXT)(mode, m);
    Driver("glMatrixMultTransposedEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposefEXT)(mode, m);
    Driver("glMatrixMultTransposefEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultdEXT)(mode, m);
    Driver("glMatrixMultdEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultfEXT)(mode, m);
    Driver("glMatrixMultfEXT","(", toString(mode), ", ", boost::print::array(m,16), ")");
}

static void REGAL_CALL log_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
    Driver("glMatrixOrthoEXT","(", toString(mode), ", ", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glMatrixPopEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixPopEXT)(mode);
    Driver("glMatrixPopEXT","(", toString(mode), ")");
}

static void REGAL_CALL log_glMatrixPushEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixPushEXT)(mode);
    Driver("glMatrixPushEXT","(", toString(mode), ")");
}

static void REGAL_CALL log_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatedEXT)(mode, angle, x, y, z);
    Driver("glMatrixRotatedEXT","(", toString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatefEXT)(mode, angle, x, y, z);
    Driver("glMatrixRotatefEXT","(", toString(mode), ", ", angle, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixScaledEXT)(mode, x, y, z);
    Driver("glMatrixScaledEXT","(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixScalefEXT)(mode, x, y, z);
    Driver("glMatrixScalefEXT","(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatedEXT)(mode, x, y, z);
    Driver("glMatrixTranslatedEXT","(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatefEXT)(mode, x, y, z);
    Driver("glMatrixTranslatefEXT","(", toString(mode), ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
    Driver("glMultiTexBufferEXT","(", toString(texunit), ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
}

static void REGAL_CALL log_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
    Driver("glMultiTexCoordPointerEXT","(", toString(texunit), ", ", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfEXT)(texunit, target, pname, param);
    Driver("glMultiTexEnvfEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfvEXT)(texunit, target, pname, params);
    Driver("glMultiTexEnvfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnviEXT)(texunit, target, pname, param);
    Driver("glMultiTexEnviEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvivEXT)(texunit, target, pname, params);
    Driver("glMultiTexEnvivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendEXT)(texunit, coord, pname, param);
    Driver("glMultiTexGendEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendvEXT)(texunit, coord, pname, params);
    Driver("glMultiTexGendvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfEXT)(texunit, coord, pname, param);
    Driver("glMultiTexGenfEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfvEXT)(texunit, coord, pname, params);
    Driver("glMultiTexGenfvEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGeniEXT)(texunit, coord, pname, param);
    Driver("glMultiTexGeniEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenivEXT)(texunit, coord, pname, params);
    Driver("glMultiTexGenivEXT","(", toString(texunit), ", ", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
    Driver("glMultiTexImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
    Driver("glMultiTexImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
    Driver("glMultiTexImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", internalformat, ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ")");
}

static void REGAL_CALL log_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIivEXT)(texunit, target, pname, params);
    Driver("glMultiTexParameterIivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIuivEXT)(texunit, target, pname, params);
    Driver("glMultiTexParameterIuivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfEXT)(texunit, target, pname, param);
    Driver("glMultiTexParameterfEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfvEXT)(texunit, target, pname, param);
    Driver("glMultiTexParameterfvEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::array(param,helper::size::texParameterv(pname)), ")");
}

static void REGAL_CALL log_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameteriEXT)(texunit, target, pname, param);
    Driver("glMultiTexParameteriEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterivEXT)(texunit, target, pname, param);
    Driver("glMultiTexParameterivEXT","(", toString(texunit), ", ", toString(target), ", ", toString(pname), ", ", boost::print::array(param,helper::size::texParameterv(pname)), ")");
}

static void REGAL_CALL log_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
    Driver("glMultiTexRenderbufferEXT","(", toString(texunit), ", ", toString(target), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
    Driver("glMultiTexSubImage1DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
    Driver("glMultiTexSubImage2DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    Driver("glMultiTexSubImage3DEXT","(", toString(texunit), ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

static void REGAL_CALL log_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferDataEXT)(buffer, size, data, usage);
    Driver("glNamedBufferDataEXT","(", buffer, ", ", size, ", ", boost::print::optional(data,Logging::pointers), ", ", toString(usage), ")");
}

static void REGAL_CALL log_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferSubDataEXT)(buffer, offset, size, data);
    Driver("glNamedBufferSubDataEXT","(", buffer, ", ", offset, ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
    Driver("glNamedCopyBufferSubDataEXT","(", readBuffer, ", ", writeBuffer, ", ", readOffset, ", ", writeOffset, ", ", size, ")");
}

static void REGAL_CALL log_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
    Driver("glNamedFramebufferRenderbufferEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
    Driver("glNamedFramebufferTexture1DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
    Driver("glNamedFramebufferTexture2DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
    Driver("glNamedFramebufferTexture3DEXT","(", framebuffer, ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
}

static void REGAL_CALL log_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
    Driver("glNamedFramebufferTextureEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
    Driver("glNamedFramebufferTextureFaceEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
}

static void REGAL_CALL log_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
    Driver("glNamedFramebufferTextureLayerEXT","(", framebuffer, ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
    Driver("glNamedProgramLocalParameter4dEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dvEXT)(program, target, index, params);
    Driver("glNamedProgramLocalParameter4dvEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
    Driver("glNamedProgramLocalParameter4fEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fvEXT)(program, target, index, params);
    Driver("glNamedProgramLocalParameter4fvEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
    Driver("glNamedProgramLocalParameterI4iEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);
    Driver("glNamedProgramLocalParameterI4ivEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
    Driver("glNamedProgramLocalParameterI4uiEXT","(", program, ", ", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);
    Driver("glNamedProgramLocalParameterI4uivEXT","(", program, ", ", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);
    Driver("glNamedProgramLocalParameters4fvEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);
    Driver("glNamedProgramLocalParametersI4ivEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);
    Driver("glNamedProgramLocalParametersI4uivEXT","(", program, ", ", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramStringEXT)(program, target, format, len, string);
    Driver("glNamedProgramStringEXT","(", program, ", ", toString(target), ", ", toString(format), ", ", len, ", ", boost::print::quote(reinterpret_cast<const char *>(string),'"'), ")");
}

static void REGAL_CALL log_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
    Driver("glNamedRenderbufferStorageEXT","(", renderbuffer, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
    Driver("glNamedRenderbufferStorageMultisampleCoverageEXT","(", renderbuffer, ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
    Driver("glNamedRenderbufferStorageMultisampleEXT","(", renderbuffer, ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dEXT)(program, location, x);
    Driver("glProgramUniform1dEXT","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dvEXT)(program, location, count, value);
    Driver("glProgramUniform1dvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fEXT)(program, location, v0);
    Driver("glProgramUniform1fEXT","(", program, ", ", location, ", ", v0, ")");
}

static void REGAL_CALL log_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fvEXT)(program, location, count, value);
    Driver("glProgramUniform1fvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iEXT)(program, location, v0);
    Driver("glProgramUniform1iEXT","(", program, ", ", location, ", ", v0, ")");
}

static void REGAL_CALL log_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ivEXT)(program, location, count, value);
    Driver("glProgramUniform1ivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiEXT)(program, location, v0);
    Driver("glProgramUniform1uiEXT","(", program, ", ", location, ", ", v0, ")");
}

static void REGAL_CALL log_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uivEXT)(program, location, count, value);
    Driver("glProgramUniform1uivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dEXT)(program, location, x, y);
    Driver("glProgramUniform2dEXT","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dvEXT)(program, location, count, value);
    Driver("glProgramUniform2dvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fEXT)(program, location, v0, v1);
    Driver("glProgramUniform2fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fvEXT)(program, location, count, value);
    Driver("glProgramUniform2fvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iEXT)(program, location, v0, v1);
    Driver("glProgramUniform2iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ivEXT)(program, location, count, value);
    Driver("glProgramUniform2ivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiEXT)(program, location, v0, v1);
    Driver("glProgramUniform2uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uivEXT)(program, location, count, value);
    Driver("glProgramUniform2uivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dEXT)(program, location, x, y, z);
    Driver("glProgramUniform3dEXT","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dvEXT)(program, location, count, value);
    Driver("glProgramUniform3dvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fEXT)(program, location, v0, v1, v2);
    Driver("glProgramUniform3fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fvEXT)(program, location, count, value);
    Driver("glProgramUniform3fvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iEXT)(program, location, v0, v1, v2);
    Driver("glProgramUniform3iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ivEXT)(program, location, count, value);
    Driver("glProgramUniform3ivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiEXT)(program, location, v0, v1, v2);
    Driver("glProgramUniform3uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uivEXT)(program, location, count, value);
    Driver("glProgramUniform3uivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dEXT)(program, location, x, y, z, w);
    Driver("glProgramUniform4dEXT","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dvEXT)(program, location, count, value);
    Driver("glProgramUniform4dvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
    Driver("glProgramUniform4fEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fvEXT)(program, location, count, value);
    Driver("glProgramUniform4fvEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
    Driver("glProgramUniform4iEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ivEXT)(program, location, count, value);
    Driver("glProgramUniform4ivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
    Driver("glProgramUniform4uiEXT","(", program, ", ", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uivEXT)(program, location, count, value);
    Driver("glProgramUniform4uivEXT","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix2x4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 9), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 9), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 6), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix3x4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 16), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 16), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x2dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x2fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 8), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x3dvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
    Driver("glProgramUniformMatrix4x3fvEXT","(", program, ", ", location, ", ", count, ", ", toString(transpose), ", ", boost::print::array(value,count * 12), ")");
}

static void REGAL_CALL log_glPushClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttribDefaultEXT)(mask);
    Driver("glPushClientAttribDefaultEXT","(", mask, ")");
}

static void REGAL_CALL log_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferEXT)(texture, target, internalformat, buffer);
    Driver("glTextureBufferEXT","(", texture, ", ", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
}

static void REGAL_CALL log_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
    Driver("glTextureImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", border, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
    Driver("glTextureImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", border, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
    Driver("glTextureImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ")");
}

static void REGAL_CALL log_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIivEXT)(texture, target, pname, params);
    Driver("glTextureParameterIivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIuivEXT)(texture, target, pname, params);
    Driver("glTextureParameterIuivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfEXT)(texture, target, pname, param);
    Driver("glTextureParameterfEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfvEXT)(texture, target, pname, param);
    Driver("glTextureParameterfvEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::array(param,helper::size::texParameterv(pname)), ")");
}

static void REGAL_CALL log_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameteriEXT)(texture, target, pname, param);
    Driver("glTextureParameteriEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterivEXT)(texture, target, pname, param);
    Driver("glTextureParameterivEXT","(", texture, ", ", toString(target), ", ", toString(pname), ", ", boost::print::array(param,helper::size::texParameterv(pname)), ")");
}

static void REGAL_CALL log_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureRenderbufferEXT)(texture, target, renderbuffer);
    Driver("glTextureRenderbufferEXT","(", texture, ", ", toString(target), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
    Driver("glTextureSubImage1DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

static void REGAL_CALL log_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
    Driver("glTextureSubImage2DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    Driver("glTextureSubImage3DEXT","(", texture, ", ", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ")");
}

static GLboolean REGAL_CALL log_glUnmapNamedBufferEXT(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glUnmapNamedBufferEXT)(buffer);
    Driver("glUnmapNamedBufferEXT","(", buffer, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    Driver("glVertexArrayColorOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);
    Driver("glVertexArrayEdgeFlagOffsetEXT","(", vaobj, ", ", buffer, ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);
    Driver("glVertexArrayFogCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);
    Driver("glVertexArrayIndexOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);
    Driver("glVertexArrayMultiTexCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(texunit), ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);
    Driver("glVertexArrayNormalOffsetEXT","(", vaobj, ", ", buffer, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    Driver("glVertexArraySecondaryColorOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    Driver("glVertexArrayTexCoordOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
    Driver("glVertexArrayVertexAttribIOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);
    Driver("glVertexArrayVertexAttribOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    Driver("glVertexArrayVertexOffsetEXT","(", vaobj, ", ", buffer, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

// GL_EXT_discard_framebuffer

static void REGAL_CALL log_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDiscardFramebufferEXT)(target, numAttachments, attachments);
    Driver("glDiscardFramebufferEXT","(", toString(target), ", ", numAttachments, ", ", attachments, ")");
}

// GL_EXT_disjoint_timer_query

static void REGAL_CALL log_glGetQueryObjectivEXT(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectivEXT)(id, pname, params);
    Driver("glGetQueryObjectivEXT","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glQueryCounterEXT(GLuint id, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glQueryCounterEXT)(id, target);
    Driver("glQueryCounterEXT","(", id, ", ", toString(target), ")");
}

// GL_EXT_draw_buffers2

static void REGAL_CALL log_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorMaskIndexedEXT)(buf, r, g, b, a);
    Driver("glColorMaskIndexedEXT","(", buf, ", ", toString(r), ", ", toString(g), ", ", toString(b), ", ", toString(a), ")");
}

static void REGAL_CALL log_glDisableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableIndexedEXT)(target, index);
    Driver("glDisableIndexedEXT","(", toString(target), ", ", index, ")");
}

static void REGAL_CALL log_glEnableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableIndexedEXT)(target, index);
    Driver("glEnableIndexedEXT","(", toString(target), ", ", index, ")");
}

static void REGAL_CALL log_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanIndexedvEXT)(value, index, data);
    Driver("glGetBooleanIndexedvEXT","(", toString(value), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerIndexedvEXT)(value, index, data);
    Driver("glGetIntegerIndexedvEXT","(", toString(value), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsEnabledIndexedEXT)(target, index);
    Driver("glIsEnabledIndexedEXT","(", toString(target), ", ", index, ")", " returned ", toString(ret));
    return ret;
}

// GL_EXT_draw_instanced

static void REGAL_CALL log_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedEXT)(mode, start, count, primcount);
    Driver("glDrawArraysInstancedEXT","(", toString(mode), ", ", start, ", ", count, ", ", primcount, ")");
}

static void REGAL_CALL log_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
    Driver("glDrawElementsInstancedEXT","(", toString(mode), ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ")");
}

// GL_EXT_draw_range_elements

static void REGAL_CALL log_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsEXT)(mode, start, end, count, type, indices);
    Driver("glDrawRangeElementsEXT","(", toString(mode), ", ", start, ", ", end, ", ", count, ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ")");
}

// GL_EXT_fog_coord

static void REGAL_CALL log_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerEXT)(type, stride, pointer);
    Driver("glFogCoordPointerEXT","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glFogCoorddEXT(GLdouble coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddEXT)(coord);
    Driver("glFogCoorddEXT","(", coord, ")");
}

static void REGAL_CALL log_glFogCoorddvEXT(const GLdouble *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddvEXT)(coord);
    Driver("glFogCoorddvEXT","(", boost::print::array(coord,1), ")");
}

static void REGAL_CALL log_glFogCoordfEXT(GLfloat coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfEXT)(coord);
    Driver("glFogCoordfEXT","(", coord, ")");
}

static void REGAL_CALL log_glFogCoordfvEXT(const GLfloat *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfvEXT)(coord);
    Driver("glFogCoordfvEXT","(", boost::print::array(coord,1), ")");
}

// GL_EXT_fragment_lighting

static void REGAL_CALL log_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialEXT)(face, mode);
    Driver("glFragmentColorMaterialEXT","(", toString(face), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfEXT)(pname, param);
    Driver("glFragmentLightModelfEXT","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvEXT)(pname, params);
    Driver("glFragmentLightModelfvEXT","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightModeliEXT(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliEXT)(pname, param);
    Driver("glFragmentLightModeliEXT","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightModelivEXT(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivEXT)(pname, params);
    Driver("glFragmentLightModelivEXT","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfEXT)(light, pname, param);
    Driver("glFragmentLightfEXT","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvEXT)(light, pname, params);
    Driver("glFragmentLightfvEXT","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiEXT)(light, pname, param);
    Driver("glFragmentLightiEXT","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivEXT)(light, pname, params);
    Driver("glFragmentLightivEXT","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfEXT)(face, pname, param);
    Driver("glFragmentMaterialfEXT","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvEXT)(face, pname, params);
    Driver("glFragmentMaterialfvEXT","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiEXT)(face, pname, param);
    Driver("glFragmentMaterialiEXT","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivEXT)(face, pname, params);
    Driver("glFragmentMaterialivEXT","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvEXT)(light, pname, params);
    Driver("glGetFragmentLightfvEXT","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivEXT)(light, pname, params);
    Driver("glGetFragmentLightivEXT","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvEXT)(face, pname, params);
    Driver("glGetFragmentMaterialfvEXT","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivEXT)(face, pname, params);
    Driver("glGetFragmentMaterialivEXT","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glLightEnviEXT(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightEnviEXT)(pname, param);
    Driver("glLightEnviEXT","(", toString(pname), ", ", param, ")");
}

// GL_EXT_framebuffer_blit

static void REGAL_CALL log_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("glBlitFramebufferEXT","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
}

// GL_EXT_framebuffer_multisample

static void REGAL_CALL log_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisampleEXT","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_EXT_framebuffer_object

static void REGAL_CALL log_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferEXT)(target, framebuffer);
    Driver("glBindFramebufferEXT","(", toString(target), ", ", framebuffer, ")");
}

static void REGAL_CALL log_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferEXT)(target, renderbuffer);
    Driver("glBindRenderbufferEXT","(", toString(target), ", ", renderbuffer, ")");
}

static GLenum REGAL_CALL log_glCheckFramebufferStatusEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glCheckFramebufferStatusEXT)(target);
    Driver("glCheckFramebufferStatusEXT","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersEXT)(n, framebuffers);
    Driver("glDeleteFramebuffersEXT","(", n, ", ", boost::print::array(framebuffers,n), ")");
}

static void REGAL_CALL log_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersEXT)(n, renderbuffers);
    Driver("glDeleteRenderbuffersEXT","(", n, ", ", boost::print::array(renderbuffers,n), ")");
}

static void REGAL_CALL log_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
    Driver("glFramebufferRenderbufferEXT","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
    Driver("glFramebufferTexture1DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
    Driver("glFramebufferTexture2DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
    Driver("glFramebufferTexture3DEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
}

static void REGAL_CALL log_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersEXT)(n, framebuffers);
    Driver("glGenFramebuffersEXT","(", n, ", ", boost::print::array(framebuffers,n), ")");
}

static void REGAL_CALL log_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersEXT)(n, renderbuffers);
    Driver("glGenRenderbuffersEXT","(", n, ", ", boost::print::array(renderbuffers,n), ")");
}

static void REGAL_CALL log_glGenerateMipmapEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapEXT)(target);
    Driver("glGenerateMipmapEXT","(", toString(target), ")");
}

static void REGAL_CALL log_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, params);
    Driver("glGetFramebufferAttachmentParameterivEXT","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivEXT)(target, pname, params);
    Driver("glGetRenderbufferParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsFramebufferEXT(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsFramebufferEXT)(framebuffer);
    Driver("glIsFramebufferEXT","(", framebuffer, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsRenderbufferEXT(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsRenderbufferEXT)(renderbuffer);
    Driver("glIsRenderbufferEXT","(", renderbuffer, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageEXT)(target, internalformat, width, height);
    Driver("glRenderbufferStorageEXT","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_EXT_geometry_shader4

static void REGAL_CALL log_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureEXT)(target, attachment, texture, level);
    Driver("glFramebufferTextureEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
    Driver("glFramebufferTextureFaceEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", toString(face), ")");
}

static void REGAL_CALL log_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriEXT)(program, pname, value);
    Driver("glProgramParameteriEXT","(", program, ", ", toString(pname), ", ", value, ")");
}

// GL_EXT_gpu_program_parameters

static void REGAL_CALL log_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameters4fvEXT)(target, index, count, params);
    Driver("glProgramEnvParameters4fvEXT","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameters4fvEXT)(target, index, count, params);
    Driver("glProgramLocalParameters4fvEXT","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

// GL_EXT_gpu_shader4

static void REGAL_CALL log_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationEXT)(program, color, name);
    Driver("glBindFragDataLocationEXT","(", program, ", ", color, ", ", boost::print::quote(name,'"'), ")");
}

static GLint REGAL_CALL log_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetFragDataLocationEXT)(program, name);
    Driver("glGetFragDataLocationEXT","(", program, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuivEXT)(program, location, params);
    Driver("glGetUniformuivEXT","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIivEXT)(index, pname, params);
    Driver("glGetVertexAttribIivEXT","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuivEXT)(index, pname, params);
    Driver("glGetVertexAttribIuivEXT","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glUniform1uiEXT(GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiEXT)(location, v0);
    Driver("glUniform1uiEXT","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1uivEXT)(location, count, value);
    Driver("glUniform1uivEXT","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiEXT)(location, v0, v1);
    Driver("glUniform2uiEXT","(", location, ", ", v0, ", ", v1, ")");
}

static void REGAL_CALL log_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2uivEXT)(location, count, value);
    Driver("glUniform2uivEXT","(", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiEXT)(location, v0, v1, v2);
    Driver("glUniform3uiEXT","(", location, ", ", v0, ", ", v1, ", ", v2, ")");
}

static void REGAL_CALL log_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3uivEXT)(location, count, value);
    Driver("glUniform3uivEXT","(", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiEXT)(location, v0, v1, v2, v3);
    Driver("glUniform4uiEXT","(", location, ", ", v0, ", ", v1, ", ", v2, ", ", v3, ")");
}

static void REGAL_CALL log_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4uivEXT)(location, count, value);
    Driver("glUniform4uivEXT","(", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glVertexAttribI1iEXT(GLuint index, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iEXT)(index, x);
    Driver("glVertexAttribI1iEXT","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ivEXT)(index, v);
    Driver("glVertexAttribI1ivEXT","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiEXT)(index, x);
    Driver("glVertexAttribI1uiEXT","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uivEXT)(index, v);
    Driver("glVertexAttribI1uivEXT","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iEXT)(index, x, y);
    Driver("glVertexAttribI2iEXT","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ivEXT)(index, v);
    Driver("glVertexAttribI2ivEXT","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiEXT)(index, x, y);
    Driver("glVertexAttribI2uiEXT","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uivEXT)(index, v);
    Driver("glVertexAttribI2uivEXT","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iEXT)(index, x, y, z);
    Driver("glVertexAttribI3iEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ivEXT)(index, v);
    Driver("glVertexAttribI3ivEXT","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiEXT)(index, x, y, z);
    Driver("glVertexAttribI3uiEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uivEXT)(index, v);
    Driver("glVertexAttribI3uivEXT","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bvEXT)(index, v);
    Driver("glVertexAttribI4bvEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iEXT)(index, x, y, z, w);
    Driver("glVertexAttribI4iEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ivEXT)(index, v);
    Driver("glVertexAttribI4ivEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4svEXT)(index, v);
    Driver("glVertexAttribI4svEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubvEXT)(index, v);
    Driver("glVertexAttribI4ubvEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiEXT)(index, x, y, z, w);
    Driver("glVertexAttribI4uiEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uivEXT)(index, v);
    Driver("glVertexAttribI4uivEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usvEXT)(index, v);
    Driver("glVertexAttribI4usvEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointerEXT)(index, size, type, stride, pointer);
    Driver("glVertexAttribIPointerEXT","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_EXT_histogram

static void REGAL_CALL log_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramEXT)(target, reset, format, type, values);
    Driver("glGetHistogramEXT","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfvEXT)(target, pname, params);
    Driver("glGetHistogramParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterivEXT)(target, pname, params);
    Driver("glGetHistogramParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxEXT)(target, reset, format, type, values);
    Driver("glGetMinmaxEXT","(", toString(target), ", ", toString(reset), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfvEXT)(target, pname, params);
    Driver("glGetMinmaxParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterivEXT)(target, pname, params);
    Driver("glGetMinmaxParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glHistogramEXT)(target, width, internalformat, sink);
    Driver("glHistogramEXT","(", toString(target), ", ", width, ", ", toString(internalformat), ", ", toString(sink), ")");
}

static void REGAL_CALL log_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMinmaxEXT)(target, internalformat, sink);
    Driver("glMinmaxEXT","(", toString(target), ", ", toString(internalformat), ", ", toString(sink), ")");
}

static void REGAL_CALL log_glResetHistogramEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResetHistogramEXT)(target);
    Driver("glResetHistogramEXT","(", toString(target), ")");
}

static void REGAL_CALL log_glResetMinmaxEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResetMinmaxEXT)(target);
    Driver("glResetMinmaxEXT","(", toString(target), ")");
}

// GL_EXT_index_func

static void REGAL_CALL log_glIndexFuncEXT(GLenum func, GLfloat ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexFuncEXT)(func, ref);
    Driver("glIndexFuncEXT","(", toString(func), ", ", ref, ")");
}

// GL_EXT_index_material

static void REGAL_CALL log_glIndexMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexMaterialEXT)(face, mode);
    Driver("glIndexMaterialEXT","(", toString(face), ", ", toString(mode), ")");
}

// GL_EXT_light_texture

static void REGAL_CALL log_glApplyTextureEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glApplyTextureEXT)(mode);
    Driver("glApplyTextureEXT","(", toString(mode), ")");
}

static void REGAL_CALL log_glTextureLightEXT(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureLightEXT)(pname);
    Driver("glTextureLightEXT","(", toString(pname), ")");
}

static void REGAL_CALL log_glTextureMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureMaterialEXT)(face, mode);
    Driver("glTextureMaterialEXT","(", toString(face), ", ", toString(mode), ")");
}

// GL_EXT_map_buffer_range

static void REGAL_CALL log_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeEXT)(target, offset, length);
    Driver("glFlushMappedBufferRangeEXT","(", toString(target), ", ", offset, ", ", length, ")");
}

static GLvoid *REGAL_CALL log_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapBufferRangeEXT)(target, offset, length, access);
    Driver("glMapBufferRangeEXT","(", toString(target), ", ", offset, ", ", length, ", ", GLbufferAccessToString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GL_EXT_multi_draw_arrays

static void REGAL_CALL log_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysEXT)(mode, first, count, primcount);
    Driver("glMultiDrawArraysEXT","(", toString(mode), ", ", boost::print::array(first,primcount), ", ", boost::print::array(count,primcount), ", ", primcount, ")");
}

static void REGAL_CALL log_glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
    Driver("glMultiDrawElementsEXT","(", toString(mode), ", ", boost::print::array(count,primcount), ", ", toString(type), ", ", boost::print::optional(indices,Logging::pointers), ", ", primcount, ")");
}

// GL_EXT_multisample

static void REGAL_CALL log_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskEXT)(value, invert);
    Driver("glSampleMaskEXT","(", value, ", ", toString(invert), ")");
}

static void REGAL_CALL log_glSamplePatternEXT(GLenum pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternEXT)(pattern);
    Driver("glSamplePatternEXT","(", toString(pattern), ")");
}

// GL_EXT_multisampled_render_to_texture

static void REGAL_CALL log_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples);
    Driver("glFramebufferTexture2DMultisampleEXT","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", samples, ")");
}

// GL_EXT_multiview_draw_buffers

static void REGAL_CALL log_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersIndexedEXT)(n, location, indices);
    Driver("glDrawBuffersIndexedEXT","(", n, ", ", location, ", ", boost::print::optional(indices,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_vEXT)(target, index, data);
    Driver("glGetIntegeri_vEXT","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glReadBufferIndexedEXT(GLenum src, GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadBufferIndexedEXT)(src, index);
    Driver("glReadBufferIndexedEXT","(", toString(src), ", ", index, ")");
}

// GL_EXT_occlusion_query_boolean

static void REGAL_CALL log_glBeginQueryEXT(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryEXT)(target, id);
    Driver("glBeginQueryEXT","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesEXT)(n, ids);
    Driver("glDeleteQueriesEXT","(", n, ", ", boost::print::optional(ids,Logging::pointers), ")");
}

static void REGAL_CALL log_glEndQueryEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndQueryEXT)(target);
    Driver("glEndQueryEXT","(", toString(target), ")");
}

static void REGAL_CALL log_glGenQueriesEXT(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesEXT)(n, ids);
    Driver("glGenQueriesEXT","(", n, ", ", boost::print::optional(ids,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivEXT)(id, pname, params);
    Driver("glGetQueryObjectuivEXT","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivEXT)(target, pname, params);
    Driver("glGetQueryivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsQueryEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsQueryEXT)(id);
    Driver("glIsQueryEXT","(", id, ")", " returned ", toString(ret));
    return ret;
}

// GL_EXT_paletted_texture

static void REGAL_CALL log_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableEXT)(target, internalFormat, width, format, type, table);
    Driver("glColorTableEXT","(", toString(target), ", ", toString(internalFormat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableEXT)(target, format, type, data);
    Driver("glGetColorTableEXT","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvEXT)(target, pname, params);
    Driver("glGetColorTableParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivEXT)(target, pname, params);
    Driver("glGetColorTableParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_EXT_pixel_transform

static void REGAL_CALL log_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterfvEXT)(target, pname, params);
    Driver("glGetPixelTransformParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterivEXT)(target, pname, params);
    Driver("glGetPixelTransformParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfEXT)(target, pname, param);
    Driver("glPixelTransformParameterfEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfvEXT)(target, pname, params);
    Driver("glPixelTransformParameterfvEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameteriEXT)(target, pname, param);
    Driver("glPixelTransformParameteriEXT","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterivEXT)(target, pname, params);
    Driver("glPixelTransformParameterivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

// GL_EXT_point_parameters

static void REGAL_CALL log_glPointParameterfEXT(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfEXT)(pname, param);
    Driver("glPointParameterfEXT","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvEXT)(pname, params);
    Driver("glPointParameterfvEXT","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_EXT_polygon_offset

static void REGAL_CALL log_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffsetEXT)(factor, bias);
    Driver("glPolygonOffsetEXT","(", factor, ", ", bias, ")");
}

// GL_EXT_provoking_vertex

static void REGAL_CALL log_glProvokingVertexEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertexEXT)(mode);
    Driver("glProvokingVertexEXT","(", toString(mode), ")");
}

// GL_EXT_robustness

static void REGAL_CALL log_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvEXT)(program, location, bufSize, params);
    Driver("glGetnUniformfvEXT","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivEXT)(program, location, bufSize, params);
    Driver("glGetnUniformivEXT","(", program, ", ", location, ", ", bufSize, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsEXT)(x, y, width, height, format, type, bufSize, data);
    Driver("glReadnPixelsEXT","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", bufSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

// GL_EXT_scene_marker

static void REGAL_CALL log_glBeginSceneEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginSceneEXT)();
    Driver("glBeginSceneEXT","()");
}

static void REGAL_CALL log_glEndSceneEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndSceneEXT)();
    Driver("glEndSceneEXT","()");
}

// GL_EXT_secondary_color

static void REGAL_CALL log_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bEXT)(red, green, blue);
    Driver("glSecondaryColor3bEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bvEXT)(v);
    Driver("glSecondaryColor3bvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dEXT)(red, green, blue);
    Driver("glSecondaryColor3dEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dvEXT)(v);
    Driver("glSecondaryColor3dvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fEXT)(red, green, blue);
    Driver("glSecondaryColor3fEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fvEXT)(v);
    Driver("glSecondaryColor3fvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iEXT)(red, green, blue);
    Driver("glSecondaryColor3iEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ivEXT)(v);
    Driver("glSecondaryColor3ivEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sEXT)(red, green, blue);
    Driver("glSecondaryColor3sEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3svEXT)(v);
    Driver("glSecondaryColor3svEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubEXT)(red, green, blue);
    Driver("glSecondaryColor3ubEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3ubvEXT(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubvEXT)(v);
    Driver("glSecondaryColor3ubvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiEXT)(red, green, blue);
    Driver("glSecondaryColor3uiEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3uivEXT(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uivEXT)(v);
    Driver("glSecondaryColor3uivEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usEXT)(red, green, blue);
    Driver("glSecondaryColor3usEXT","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3usvEXT(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usvEXT)(v);
    Driver("glSecondaryColor3usvEXT","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerEXT)(size, type, stride, pointer);
    Driver("glSecondaryColorPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_EXT_separate_shader_objects

static void REGAL_CALL log_glActiveProgramEXT(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveProgramEXT)(program);
    Driver("glActiveProgramEXT","(", program, ")");
}

static GLuint REGAL_CALL log_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glCreateShaderProgramEXT)(type, string);
    Driver("glCreateShaderProgramEXT","(", toString(type), ", ", boost::print::quote(string,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glUseShaderProgramEXT(GLenum type, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUseShaderProgramEXT)(type, program);
    Driver("glUseShaderProgramEXT","(", toString(type), ", ", program, ")");
}

// GL_EXT_shader_image_load_store

static void REGAL_CALL log_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);
    Driver("glBindImageTextureEXT","(", index, ", ", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(access), ", ", format, ")");
}

static void REGAL_CALL log_glMemoryBarrierEXT(GLbitfield barriers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrierEXT)(barriers);
    Driver("glMemoryBarrierEXT","(", barriers, ")");
}

// GL_EXT_stencil_clear_tag

static void REGAL_CALL log_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilClearTagEXT)(stencilTagBits, stencilClearTag);
    Driver("glStencilClearTagEXT","(", stencilTagBits, ", ", stencilClearTag, ")");
}

// GL_EXT_stencil_two_side

static void REGAL_CALL log_glActiveStencilFaceEXT(GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveStencilFaceEXT)(face);
    Driver("glActiveStencilFaceEXT","(", toString(face), ")");
}

// GL_EXT_subtexture

static void REGAL_CALL log_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);
    Driver("glTexSubImage1DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);
    Driver("glTexSubImage2DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(reinterpret_cast<const GLubyte *>(pixels),Logging::pointers), ")");
}

static void REGAL_CALL log_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    Driver("glTexSubImage3DEXT","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

// GL_EXT_texture3D

static void REGAL_CALL log_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
    Driver("glTexImage3DEXT","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ")");
}

// GL_EXT_texture_array

static void REGAL_CALL log_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
    Driver("glFramebufferTextureLayerEXT","(", toString(target), ", ", toString(attachment), ", ", texture, ", ", level, ", ", layer, ")");
}

// GL_EXT_texture_buffer_object

static void REGAL_CALL log_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexBufferEXT)(target, internalformat, buffer);
    Driver("glTexBufferEXT","(", toString(target), ", ", toString(internalformat), ", ", buffer, ")");
}

// GL_EXT_texture_integer

static void REGAL_CALL log_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearColorIiEXT)(red, green, blue, alpha);
    Driver("glClearColorIiEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearColorIuiEXT)(red, green, blue, alpha);
    Driver("glClearColorIuiEXT","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIivEXT)(target, pname, params);
    Driver("glGetTexParameterIivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuivEXT)(target, pname, params);
    Driver("glGetTexParameterIuivEXT","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIivEXT)(target, pname, params);
    Driver("glTexParameterIivEXT","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

static void REGAL_CALL log_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuivEXT)(target, pname, params);
    Driver("glTexParameterIuivEXT","(", toString(target), ", ", toString(pname), ", ", GLTexParameterToString(pname,params), ")");
}

// GL_EXT_texture_object

static GLboolean REGAL_CALL log_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glAreTexturesResidentEXT)(n, textures, residences);
    Driver("glAreTexturesResidentEXT","(", n, ", ", boost::print::array(textures,n), ", ", boost::print::array(residences,n), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glBindTextureEXT(GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindTextureEXT)(target, texture);
    Driver("glBindTextureEXT","(", toString(target), ", ", texture, ")");
}

static void REGAL_CALL log_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteTexturesEXT)(n, textures);
    Driver("glDeleteTexturesEXT","(", n, ", ", boost::print::array(textures,n), ")");
}

static void REGAL_CALL log_glGenTexturesEXT(GLsizei n, GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenTexturesEXT)(n, textures);
    Driver("glGenTexturesEXT","(", n, ", ", boost::print::array(textures,n), ")");
}

static GLboolean REGAL_CALL log_glIsTextureEXT(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTextureEXT)(texture);
    Driver("glIsTextureEXT","(", texture, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTexturesEXT)(n, textures, priorities);
    Driver("glPrioritizeTexturesEXT","(", n, ", ", boost::print::array(textures,n), ", ", boost::print::array(priorities,n), ")");
}

// GL_EXT_texture_perturb_normal

static void REGAL_CALL log_glTextureNormalEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureNormalEXT)(mode);
    Driver("glTextureNormalEXT","(", toString(mode), ")");
}

// GL_EXT_texture_storage

static void REGAL_CALL log_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1DEXT)(target, levels, internalformat, width);
    Driver("glTexStorage1DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ")");
}

static void REGAL_CALL log_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DEXT)(target, levels, internalformat, width, height);
    Driver("glTexStorage2DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DEXT)(target, levels, internalformat, width, height, depth);
    Driver("glTexStorage3DEXT","(", toString(target), ", ", levels, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ")");
}

// GL_EXT_timer_query

static void REGAL_CALL log_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64vEXT)(id, pname, params);
    Driver("glGetQueryObjecti64vEXT","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64vEXT)(id, pname, params);
    Driver("glGetQueryObjectui64vEXT","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_EXT_transform_feedback

static void REGAL_CALL log_glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackEXT)(primitiveMode);
    Driver("glBeginTransformFeedbackEXT","(", toString(primitiveMode), ")");
}

static void REGAL_CALL log_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseEXT)(target, index, buffer);
    Driver("glBindBufferBaseEXT","(", toString(target), ", ", index, ", ", buffer, ")");
}

static void REGAL_CALL log_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetEXT)(target, index, buffer, offset);
    Driver("glBindBufferOffsetEXT","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
}

static void REGAL_CALL log_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeEXT)(target, index, buffer, offset, size);
    Driver("glBindBufferRangeEXT","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
}

static void REGAL_CALL log_glEndTransformFeedbackEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackEXT)();
    Driver("glEndTransformFeedbackEXT","()");
}

static void REGAL_CALL log_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);
    Driver("glGetTransformFeedbackVaryingEXT","(", program, ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar ** const varyings, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);
    Driver("glTransformFeedbackVaryingsEXT","(", program, ", ", count, ", ", boost::print::array(varyings,count), ", ", toString(bufferMode), ")");
}

// GL_EXT_vertex_array

static void REGAL_CALL log_glArrayElementEXT(GLint i)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glArrayElementEXT)(i);
    Driver("glArrayElementEXT","(", i, ")");
}

static void REGAL_CALL log_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorPointerEXT)(size, type, stride, count, pointer);
    Driver("glColorPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysEXT)(mode, first, count);
    Driver("glDrawArraysEXT","(", toString(mode), ", ", first, ", ", count, ")");
}

static void REGAL_CALL log_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerEXT)(stride, count, pointer);
    Driver("glEdgeFlagPointerEXT","(", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPointervEXT(GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPointervEXT)(pname, params);
    Driver("glGetPointervEXT","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerEXT)(type, stride, count, pointer);
    Driver("glIndexPointerEXT","(", toString(type), ", ", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerEXT)(type, stride, count, pointer);
    Driver("glNormalPointerEXT","(", toString(type), ", ", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerEXT)(size, type, stride, count, pointer);
    Driver("glTexCoordPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerEXT)(size, type, stride, count, pointer);
    Driver("glVertexPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", count, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_EXT_vertex_attrib_64bit

static void REGAL_CALL log_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdvEXT)(index, pname, params);
    Driver("glGetVertexAttribLdvEXT","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
    Driver("glVertexArrayVertexAttribLOffsetEXT","(", vaobj, ", ", buffer, ", ", index, ", ", size, ", ", toString(type), ", ", stride, ", ", offset, ")");
}

static void REGAL_CALL log_glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dEXT)(index, x);
    Driver("glVertexAttribL1dEXT","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dvEXT)(index, v);
    Driver("glVertexAttribL1dvEXT","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dEXT)(index, x, y);
    Driver("glVertexAttribL2dEXT","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dvEXT)(index, v);
    Driver("glVertexAttribL2dvEXT","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dEXT)(index, x, y, z);
    Driver("glVertexAttribL3dEXT","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dvEXT)(index, v);
    Driver("glVertexAttribL3dvEXT","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dEXT)(index, x, y, z, w);
    Driver("glVertexAttribL4dEXT","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dvEXT)(index, v);
    Driver("glVertexAttribL4dvEXT","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointerEXT)(index, size, type, stride, pointer);
    Driver("glVertexAttribLPointerEXT","(", index, ", ", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_EXT_vertex_shader

static void REGAL_CALL log_glBeginVertexShaderEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginVertexShaderEXT)();
    Driver("glBeginVertexShaderEXT","()");
}

static GLuint REGAL_CALL log_glBindLightParameterEXT(GLenum light, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBindLightParameterEXT)(light, value);
    Driver("glBindLightParameterEXT","(", toString(light), ", ", toString(value), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBindMaterialParameterEXT)(face, value);
    Driver("glBindMaterialParameterEXT","(", toString(face), ", ", toString(value), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glBindParameterEXT(GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBindParameterEXT)(value);
    Driver("glBindParameterEXT","(", toString(value), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBindTexGenParameterEXT)(unit, coord, value);
    Driver("glBindTexGenParameterEXT","(", toString(unit), ", ", toString(coord), ", ", toString(value), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBindTextureUnitParameterEXT)(unit, value);
    Driver("glBindTextureUnitParameterEXT","(", toString(unit), ", ", toString(value), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glBindVertexShaderEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexShaderEXT)(id);
    Driver("glBindVertexShaderEXT","(", id, ")");
}

static void REGAL_CALL log_glDeleteVertexShaderEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexShaderEXT)(id);
    Driver("glDeleteVertexShaderEXT","(", id, ")");
}

static void REGAL_CALL log_glDisableVariantClientStateEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableVariantClientStateEXT)(id);
    Driver("glDisableVariantClientStateEXT","(", id, ")");
}

static void REGAL_CALL log_glEnableVariantClientStateEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableVariantClientStateEXT)(id);
    Driver("glEnableVariantClientStateEXT","(", id, ")");
}

static void REGAL_CALL log_glEndVertexShaderEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndVertexShaderEXT)();
    Driver("glEndVertexShaderEXT","()");
}

static void REGAL_CALL log_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtractComponentEXT)(res, src, num);
    Driver("glExtractComponentEXT","(", res, ", ", src, ", ", num, ")");
}

static GLuint REGAL_CALL log_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenSymbolsEXT)(datatype, storagetype, range, components);
    Driver("glGenSymbolsEXT","(", toString(datatype), ", ", toString(storagetype), ", ", toString(range), ", ", components, ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glGenVertexShadersEXT(GLuint range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenVertexShadersEXT)(range);
    Driver("glGenVertexShadersEXT","(", range, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantBooleanvEXT)(id, value, data);
    Driver("glGetInvariantBooleanvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantFloatvEXT)(id, value, data);
    Driver("glGetInvariantFloatvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantIntegervEXT)(id, value, data);
    Driver("glGetInvariantIntegervEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantBooleanvEXT)(id, value, data);
    Driver("glGetLocalConstantBooleanvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantFloatvEXT)(id, value, data);
    Driver("glGetLocalConstantFloatvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantIntegervEXT)(id, value, data);
    Driver("glGetLocalConstantIntegervEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantBooleanvEXT)(id, value, data);
    Driver("glGetVariantBooleanvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantFloatvEXT)(id, value, data);
    Driver("glGetVariantFloatvEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantIntegervEXT)(id, value, data);
    Driver("glGetVariantIntegervEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVariantPointervEXT)(id, value, data);
    Driver("glGetVariantPointervEXT","(", id, ", ", toString(value), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInsertComponentEXT)(res, src, num);
    Driver("glInsertComponentEXT","(", res, ", ", src, ", ", num, ")");
}

static GLboolean REGAL_CALL log_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsVariantEnabledEXT)(id, cap);
    Driver("glIsVariantEnabledEXT","(", id, ", ", toString(cap), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetInvariantEXT)(id, type, addr);
    Driver("glSetInvariantEXT","(", id, ", ", toString(type), ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetLocalConstantEXT)(id, type, addr);
    Driver("glSetLocalConstantEXT","(", id, ", ", toString(type), ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderOp1EXT)(op, res, arg1);
    Driver("glShaderOp1EXT","(", toString(op), ", ", res, ", ", arg1, ")");
}

static void REGAL_CALL log_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderOp2EXT)(op, res, arg1, arg2);
    Driver("glShaderOp2EXT","(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ")");
}

static void REGAL_CALL log_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glShaderOp3EXT)(op, res, arg1, arg2, arg3);
    Driver("glShaderOp3EXT","(", toString(op), ", ", res, ", ", arg1, ", ", arg2, ", ", arg3, ")");
}

static void REGAL_CALL log_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSwizzleEXT)(res, in, outX, outY, outZ, outW);
    Driver("glSwizzleEXT","(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
}

static void REGAL_CALL log_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantPointerEXT)(id, type, stride, addr);
    Driver("glVariantPointerEXT","(", id, ", ", toString(type), ", ", stride, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantbvEXT(GLuint id, const GLbyte *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantbvEXT)(id, addr);
    Driver("glVariantbvEXT","(", id, ", ", addr, ")");
}

static void REGAL_CALL log_glVariantdvEXT(GLuint id, const GLdouble *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantdvEXT)(id, addr);
    Driver("glVariantdvEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantfvEXT(GLuint id, const GLfloat *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantfvEXT)(id, addr);
    Driver("glVariantfvEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantivEXT(GLuint id, const GLint *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantivEXT)(id, addr);
    Driver("glVariantivEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantsvEXT(GLuint id, const GLshort *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantsvEXT)(id, addr);
    Driver("glVariantsvEXT","(", id, ", ", addr, ")");
}

static void REGAL_CALL log_glVariantubvEXT(GLuint id, const GLubyte *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantubvEXT)(id, addr);
    Driver("glVariantubvEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantuivEXT(GLuint id, const GLuint *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantuivEXT)(id, addr);
    Driver("glVariantuivEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glVariantusvEXT(GLuint id, const GLushort *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVariantusvEXT)(id, addr);
    Driver("glVariantusvEXT","(", id, ", ", boost::print::optional(addr,Logging::pointers), ")");
}

static void REGAL_CALL log_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWriteMaskEXT)(res, in, outX, outY, outZ, outW);
    Driver("glWriteMaskEXT","(", res, ", ", in, ", ", toString(outX), ", ", toString(outY), ", ", toString(outZ), ", ", toString(outW), ")");
}

// GL_EXT_vertex_weighting

static void REGAL_CALL log_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightPointerEXT)(size, type, stride, pointer);
    Driver("glVertexWeightPointerEXT","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexWeightfEXT(GLfloat weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfEXT)(weight);
    Driver("glVertexWeightfEXT","(", weight, ")");
}

static void REGAL_CALL log_glVertexWeightfvEXT(const GLfloat *weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfvEXT)(weight);
    Driver("glVertexWeightfvEXT","(", boost::print::array(weight,1), ")");
}

// GL_EXT_x11_sync_object

static GLsync REGAL_CALL log_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLsync  ret = _next->call(&_next->glImportSyncEXT)(external_sync_type, external_sync, flags);
    Driver("glImportSyncEXT","(", toString(external_sync_type), ", ", external_sync, ", ", flags, ")", " returned ", ret);
    return ret;
}

// GL_GREMEDY_frame_terminator

static void REGAL_CALL log_glFrameTerminatorGREMEDY(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrameTerminatorGREMEDY)();
    Driver("glFrameTerminatorGREMEDY","()");
}

// GL_GREMEDY_string_marker

static void REGAL_CALL log_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStringMarkerGREMEDY)(len, string);
    Driver("glStringMarkerGREMEDY","(", len, ", ", boost::print::optional(string,Logging::pointers), ")");
}

// GL_HP_image_transform

static void REGAL_CALL log_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterfvHP)(target, pname, params);
    Driver("glGetImageTransformParameterfvHP","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterivHP)(target, pname, params);
    Driver("glGetImageTransformParameterivHP","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfHP)(target, pname, param);
    Driver("glImageTransformParameterfHP","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfvHP)(target, pname, params);
    Driver("glImageTransformParameterfvHP","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameteriHP)(target, pname, param);
    Driver("glImageTransformParameteriHP","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterivHP)(target, pname, params);
    Driver("glImageTransformParameterivHP","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_IBM_multimode_draw_arrays

static void REGAL_CALL log_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);
    Driver("glMultiModeDrawArraysIBM","(", mode, ", ", boost::print::optional(first,Logging::pointers), ", ", boost::print::optional(count,Logging::pointers), ", ", primcount, ", ", modestride, ")");
}

static void REGAL_CALL log_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);
    Driver("glMultiModeDrawElementsIBM","(", mode, ", ", boost::print::optional(count,Logging::pointers), ", ", toString(type), ", ", indices, ", ", primcount, ", ", modestride, ")");
}

// GL_IBM_vertex_array_lists

static void REGAL_CALL log_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorPointerListIBM)(size, type, stride, pointer, ptrstride);
    Driver("glColorPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);
    Driver("glEdgeFlagPointerListIBM","(", stride, ", ", pointer, ", ", ptrstride, ")");
}

static void REGAL_CALL log_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);
    Driver("glFogCoordPointerListIBM","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerListIBM)(type, stride, pointer, ptrstride);
    Driver("glIndexPointerListIBM","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerListIBM)(type, stride, pointer, ptrstride);
    Driver("glNormalPointerListIBM","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);
    Driver("glSecondaryColorPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);
    Driver("glTexCoordPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

static void REGAL_CALL log_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);
    Driver("glVertexPointerListIBM","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ", ", ptrstride, ")");
}

// GL_IMG_multisampled_render_to_texture

static void REGAL_CALL log_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleIMG)(target, attachment, textarget, texture, level, samples);
    Driver("glFramebufferTexture2DMultisampleIMG","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", samples, ")");
}

static void REGAL_CALL log_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleIMG)(target, samples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisampleIMG","(", toString(target), ", ", samples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_INGR_blend_func_separate

static void REGAL_CALL log_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    Driver("glBlendFuncSeparateINGR","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
}

// GL_INTEL_map_texture

static GLvoid *REGAL_CALL log_glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapTexture2DINTEL)(texture, level, access, stride, layout);
    Driver("glMapTexture2DINTEL","(", texture, ", ", level, ", ", access, ", ", boost::print::optional(stride,Logging::pointers), ", ", boost::print::optional(layout,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glSyncTextureINTEL(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSyncTextureINTEL)(texture);
    Driver("glSyncTextureINTEL","(", texture, ")");
}

static void REGAL_CALL log_glUnmapTexture2DINTEL(GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUnmapTexture2DINTEL)(texture, level);
    Driver("glUnmapTexture2DINTEL","(", texture, ", ", level, ")");
}

// GL_INTEL_parallel_arrays

static void REGAL_CALL log_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorPointervINTEL)(size, type, pointer);
    Driver("glColorPointervINTEL","(", size, ", ", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalPointervINTEL)(type, pointer);
    Driver("glNormalPointervINTEL","(", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointervINTEL)(size, type, pointer);
    Driver("glTexCoordPointervINTEL","(", size, ", ", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexPointervINTEL)(size, type, pointer);
    Driver("glVertexPointervINTEL","(", size, ", ", toString(type), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_INTEL_texture_scissor

static void REGAL_CALL log_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexScissorFuncINTEL)(target, lfunc, hfunc);
    Driver("glTexScissorFuncINTEL","(", toString(target), ", ", toString(lfunc), ", ", toString(hfunc), ")");
}

static void REGAL_CALL log_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexScissorINTEL)(target, tlow, thigh);
    Driver("glTexScissorINTEL","(", toString(target), ", ", tlow, ", ", thigh, ")");
}

// GL_KHR_debug

static void REGAL_CALL log_glDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallback)(callback, userParam);
    Driver("glDebugMessageCallback","(", boost::print::optional(userParam,Logging::pointers), ")");
}

static void REGAL_CALL log_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControl)(source, type, severity, count, ids, enabled);
    Driver("glDebugMessageControl","(", toString(source), ", ", toString(type), ", ", toString(severity), ", ", count, ", ", boost::print::optional(ids,Logging::pointers), ", ", toString(enabled), ")");
}

static void REGAL_CALL log_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsert)(source, type, id, severity, length, buf);
    Driver("glDebugMessageInsert","(", toString(source), ", ", toString(type), ", ", id, ", ", toString(severity), ", ", length, ", ", boost::print::quote(buf,'"'), ")");
}

static GLuint REGAL_CALL log_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGetDebugMessageLog)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    Driver("glGetDebugMessageLog","(", count, ", ", bufsize, ", ", boost::print::optional(sources,Logging::pointers), ", ", boost::print::optional(types,Logging::pointers), ", ", boost::print::optional(ids,Logging::pointers), ", ", boost::print::optional(severities,Logging::pointers), ", ", boost::print::optional(lengths,Logging::pointers), ", ", boost::print::quote(messageLog,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabel)(identifier, name, bufSize, length, label);
    Driver("glGetObjectLabel","(", toString(identifier), ", ", name, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(label,'"'), ")");
}

static void REGAL_CALL log_glGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetObjectPtrLabel)(ptr, bufSize, length, label);
    Driver("glGetObjectPtrLabel","(", boost::print::optional(ptr,Logging::pointers), ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(label,'"'), ")");
}

static void REGAL_CALL log_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glObjectLabel)(identifier, name, length, label);
    Driver("glObjectLabel","(", toString(identifier), ", ", name, ", ", length, ", ", boost::print::quote(label,'"'), ")");
}

static void REGAL_CALL log_glObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glObjectPtrLabel)(ptr, length, label);
    Driver("glObjectPtrLabel","(", boost::print::optional(ptr,Logging::pointers), ", ", length, ", ", boost::print::quote(label,'"'), ")");
}

static void REGAL_CALL log_glPopDebugGroup(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPopDebugGroup)();
    Driver("glPopDebugGroup","()");
}

static void REGAL_CALL log_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPushDebugGroup)(source, id, length, message);
    Driver("glPushDebugGroup","(", toString(source), ", ", id, ", ", length, ", ", boost::print::quote(message,'"'), ")");
}

// GL_KTX_buffer_region

static GLuint REGAL_CALL log_glBufferRegionEnabled(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glBufferRegionEnabled)();
    Driver("glBufferRegionEnabled","()", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glDeleteBufferRegion(GLenum region)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteBufferRegion)(region);
    Driver("glDeleteBufferRegion","(", toString(region), ")");
}

static void REGAL_CALL log_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBufferRegion)(region, x, y, width, height, xDest, yDest);
    Driver("glDrawBufferRegion","(", region, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xDest, ", ", yDest, ")");
}

static GLuint REGAL_CALL log_glNewBufferRegion(GLenum region)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glNewBufferRegion)(region);
    Driver("glNewBufferRegion","(", toString(region), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadBufferRegion)(region, x, y, width, height);
    Driver("glReadBufferRegion","(", region, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

// GL_MESA_resize_buffers

static void REGAL_CALL log_glResizeBuffersMESA(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResizeBuffersMESA)();
    Driver("glResizeBuffersMESA","()");
}

// GL_MESA_window_pos

static void REGAL_CALL log_glWindowPos2dMESA(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dMESA)(x, y);
    Driver("glWindowPos2dMESA","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvMESA)(v);
    Driver("glWindowPos2dvMESA","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glWindowPos2fMESA(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fMESA)(x, y);
    Driver("glWindowPos2fMESA","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvMESA)(v);
    Driver("glWindowPos2fvMESA","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glWindowPos2iMESA(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iMESA)(x, y);
    Driver("glWindowPos2iMESA","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivMESA)(v);
    Driver("glWindowPos2ivMESA","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glWindowPos2sMESA(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sMESA)(x, y);
    Driver("glWindowPos2sMESA","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glWindowPos2svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svMESA)(v);
    Driver("glWindowPos2svMESA","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dMESA)(x, y, z);
    Driver("glWindowPos3dMESA","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvMESA)(v);
    Driver("glWindowPos3dvMESA","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fMESA)(x, y, z);
    Driver("glWindowPos3fMESA","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvMESA)(v);
    Driver("glWindowPos3fvMESA","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iMESA)(x, y, z);
    Driver("glWindowPos3iMESA","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivMESA)(v);
    Driver("glWindowPos3ivMESA","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sMESA)(x, y, z);
    Driver("glWindowPos3sMESA","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glWindowPos3svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svMESA)(v);
    Driver("glWindowPos3svMESA","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dMESA)(x, y, z, w);
    Driver("glWindowPos4dMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glWindowPos4dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dvMESA)(v);
    Driver("glWindowPos4dvMESA","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fMESA)(x, y, z, w);
    Driver("glWindowPos4fMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glWindowPos4fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fvMESA)(v);
    Driver("glWindowPos4fvMESA","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4iMESA)(x, y, z, w);
    Driver("glWindowPos4iMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glWindowPos4ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4ivMESA)(v);
    Driver("glWindowPos4ivMESA","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4sMESA)(x, y, z, w);
    Driver("glWindowPos4sMESA","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glWindowPos4svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4svMESA)(v);
    Driver("glWindowPos4svMESA","(", boost::print::array(v,4), ")");
}

// GL_NVX_conditional_render

static void REGAL_CALL log_glBeginConditionalRenderNVX(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNVX)(id);
    Driver("glBeginConditionalRenderNVX","(", id, ")");
}

static void REGAL_CALL log_glEndConditionalRenderNVX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNVX)();
    Driver("glEndConditionalRenderNVX","()");
}

// GL_NV_bindless_texture

static GLuint64 REGAL_CALL log_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetImageHandleNV)(texture, level, layered, layer, format);
    Driver("glGetImageHandleNV","(", texture, ", ", level, ", ", toString(layered), ", ", layer, ", ", toString(format), ")", " returned ", ret);
    return ret;
}

static GLuint64 REGAL_CALL log_glGetTextureHandleNV(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetTextureHandleNV)(texture);
    Driver("glGetTextureHandleNV","(", texture, ")", " returned ", ret);
    return ret;
}

static GLuint64 REGAL_CALL log_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint64  ret = _next->call(&_next->glGetTextureSamplerHandleNV)(texture, sampler);
    Driver("glGetTextureSamplerHandleNV","(", texture, ", ", sampler, ")", " returned ", ret);
    return ret;
}

static GLboolean REGAL_CALL log_glIsImageHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsImageHandleResidentNV)(handle);
    Driver("glIsImageHandleResidentNV","(", handle, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsTextureHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTextureHandleResidentNV)(handle);
    Driver("glIsTextureHandleResidentNV","(", handle, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glMakeImageHandleNonResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleNonResidentNV)(handle);
    Driver("glMakeImageHandleNonResidentNV","(", handle, ")");
}

static void REGAL_CALL log_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleResidentNV)(handle, access);
    Driver("glMakeImageHandleResidentNV","(", handle, ", ", toString(access), ")");
}

static void REGAL_CALL log_glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleNonResidentNV)(handle);
    Driver("glMakeTextureHandleNonResidentNV","(", handle, ")");
}

static void REGAL_CALL log_glMakeTextureHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleResidentNV)(handle);
    Driver("glMakeTextureHandleResidentNV","(", handle, ")");
}

static void REGAL_CALL log_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64NV)(program, location, value);
    Driver("glProgramUniformHandleui64NV","(", program, ", ", location, ", ", value, ")");
}

static void REGAL_CALL log_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64vNV)(program, location, count, values);
    Driver("glProgramUniformHandleui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::optional(values,Logging::pointers), ")");
}

static void REGAL_CALL log_glUniformHandleui64NV(GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64NV)(location, value);
    Driver("glUniformHandleui64NV","(", location, ", ", value, ")");
}

static void REGAL_CALL log_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64vNV)(location, count, value);
    Driver("glUniformHandleui64vNV","(", location, ", ", count, ", ", boost::print::optional(value,Logging::pointers), ")");
}

// GL_NV_conditional_render

static void REGAL_CALL log_glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNV)(id, mode);
    Driver("glBeginConditionalRenderNV","(", id, ", ", toString(mode), ")");
}

static void REGAL_CALL log_glEndConditionalRenderNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNV)();
    Driver("glEndConditionalRenderNV","()");
}

// GL_NV_copy_image

static void REGAL_CALL log_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    Driver("glCopyImageSubDataNV","(", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", dstName, ", ", toString(dstTarget), ", ", dstLevel, ")");
}

// GL_NV_coverage_sample

static void REGAL_CALL log_glCoverageMaskNV(GLboolean mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverageMaskNV)(mask);
    Driver("glCoverageMaskNV","(", toString(mask), ")");
}

static void REGAL_CALL log_glCoverageOperationNV(GLenum operation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverageOperationNV)(operation);
    Driver("glCoverageOperationNV","(", toString(operation), ")");
}

// GL_NV_depth_buffer_float

static void REGAL_CALL log_glClearDepthdNV(GLdouble depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearDepthdNV)(depth);
    Driver("glClearDepthdNV","(", depth, ")");
}

static void REGAL_CALL log_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsdNV)(zmin, zmax);
    Driver("glDepthBoundsdNV","(", zmin, ", ", zmax, ")");
}

static void REGAL_CALL log_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangedNV)(zNear, zFar);
    Driver("glDepthRangedNV","(", zNear, ", ", zFar, ")");
}

// GL_NV_draw_buffers

static void REGAL_CALL log_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersNV)(n, bufs);
    Driver("glDrawBuffersNV","(", n, ", ", bufs, ")");
}

// GL_NV_draw_texture

static void REGAL_CALL log_glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTextureNV)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
    Driver("glDrawTextureNV","(", texture, ", ", sampler, ", ", x0, ", ", y0, ", ", x1, ", ", y1, ", ", z, ", ", s0, ", ", t0, ")");
}

// GL_NV_evaluators

static void REGAL_CALL log_glEvalMapsNV(GLenum target, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEvalMapsNV)(target, mode);
    Driver("glEvalMapsNV","(", toString(target), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterfvNV)(target, index, pname, params);
    Driver("glGetMapAttribParameterfvNV","(", toString(target), ", ", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterivNV)(target, index, pname, params);
    Driver("glGetMapAttribParameterivNV","(", toString(target), ", ", index, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);
    Driver("glGetMapControlPointsNV","(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", toString(packed), ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterfvNV)(target, pname, params);
    Driver("glGetMapParameterfvNV","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterivNV)(target, pname, params);
    Driver("glGetMapParameterivNV","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
    Driver("glMapControlPointsNV","(", toString(target), ", ", index, ", ", toString(type), ", ", ustride, ", ", vstride, ", ", uorder, ", ", vorder, ", ", toString(packed), ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapParameterfvNV)(target, pname, params);
    Driver("glMapParameterfvNV","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMapParameterivNV)(target, pname, params);
    Driver("glMapParameterivNV","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_NV_explicit_multisample

static void REGAL_CALL log_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefvNV)(pname, index, val);
    Driver("glGetMultisamplefvNV","(", toString(pname), ", ", index, ", ", boost::print::array(val,2), ")");
}

static void REGAL_CALL log_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskIndexedNV)(index, mask);
    Driver("glSampleMaskIndexedNV","(", index, ", ", mask, ")");
}

static void REGAL_CALL log_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexRenderbufferNV)(target, renderbuffer);
    Driver("glTexRenderbufferNV","(", toString(target), ", ", renderbuffer, ")");
}

// GL_NV_fence

static void REGAL_CALL log_glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesNV)(n, fences);
    Driver("glDeleteFencesNV","(", n, ", ", boost::print::array(fences,n), ")");
}

static void REGAL_CALL log_glFinishFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceNV)(fence);
    Driver("glFinishFenceNV","(", fence, ")");
}

static void REGAL_CALL log_glGenFencesNV(GLsizei n, GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenFencesNV)(n, fences);
    Driver("glGenFencesNV","(", n, ", ", boost::print::array(fences,n), ")");
}

static void REGAL_CALL log_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFenceivNV)(fence, pname, params);
    Driver("glGetFenceivNV","(", fence, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsFenceNV)(fence);
    Driver("glIsFenceNV","(", fence, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glSetFenceNV(GLuint fence, GLenum condition)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSetFenceNV)(fence, condition);
    Driver("glSetFenceNV","(", fence, ", ", toString(condition), ")");
}

static GLboolean REGAL_CALL log_glTestFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glTestFenceNV)(fence);
    Driver("glTestFenceNV","(", fence, ")", " returned ", toString(ret));
    return ret;
}

// GL_NV_fragment_program

static void REGAL_CALL log_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterdvNV)(id, len, name, params);
    Driver("glGetProgramNamedParameterdvNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterfvNV)(id, len, name, params);
    Driver("glGetProgramNamedParameterfvNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);
    Driver("glProgramNamedParameter4dNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dvNV)(id, len, name, v);
    Driver("glProgramNamedParameter4dvNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);
    Driver("glProgramNamedParameter4fNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fvNV)(id, len, name, v);
    Driver("glProgramNamedParameter4fvNV","(", id, ", ", len, ", ", boost::print::array(name,1), ", ", boost::print::array(v,4), ")");
}

// GL_NV_framebuffer_blit

static void REGAL_CALL log_glBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferNV)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("glBlitFramebufferNV","(", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ", ", mask, ")");
}

// GL_NV_framebuffer_multisample_coverage

static void REGAL_CALL log_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
    Driver("glRenderbufferStorageMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_NV_geometry_program4

static void REGAL_CALL log_glProgramVertexLimitNV(GLenum target, GLint limit)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramVertexLimitNV)(target, limit);
    Driver("glProgramVertexLimitNV","(", toString(target), ", ", limit, ")");
}

// GL_NV_gpu_program4

static void REGAL_CALL log_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIivNV)(target, index, params);
    Driver("glGetProgramEnvParameterIivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIuivNV)(target, index, params);
    Driver("glGetProgramEnvParameterIuivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIivNV)(target, index, params);
    Driver("glGetProgramLocalParameterIivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIuivNV)(target, index, params);
    Driver("glGetProgramLocalParameterIuivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
    Driver("glProgramEnvParameterI4iNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4ivNV)(target, index, params);
    Driver("glProgramEnvParameterI4ivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
    Driver("glProgramEnvParameterI4uiNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uivNV)(target, index, params);
    Driver("glProgramEnvParameterI4uivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4ivNV)(target, index, count, params);
    Driver("glProgramEnvParametersI4ivNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4uivNV)(target, index, count, params);
    Driver("glProgramEnvParametersI4uivNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
    Driver("glProgramLocalParameterI4iNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4ivNV)(target, index, params);
    Driver("glProgramLocalParameterI4ivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
    Driver("glProgramLocalParameterI4uiNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uivNV)(target, index, params);
    Driver("glProgramLocalParameterI4uivNV","(", toString(target), ", ", index, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4ivNV)(target, index, count, params);
    Driver("glProgramLocalParametersI4ivNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

static void REGAL_CALL log_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4uivNV)(target, index, count, params);
    Driver("glProgramLocalParametersI4uivNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(params,count * 4), ")");
}

// GL_NV_gpu_shader5

static void REGAL_CALL log_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformi64vNV)(program, location, params);
    Driver("glGetUniformi64vNV","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64NV)(program, location, x);
    Driver("glProgramUniform1i64NV","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64vNV)(program, location, count, value);
    Driver("glProgramUniform1i64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64NV)(program, location, x);
    Driver("glProgramUniform1ui64NV","(", program, ", ", location, ", ", x, ")");
}

static void REGAL_CALL log_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64vNV)(program, location, count, value);
    Driver("glProgramUniform1ui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64NV)(program, location, x, y);
    Driver("glProgramUniform2i64NV","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64vNV)(program, location, count, value);
    Driver("glProgramUniform2i64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64NV)(program, location, x, y);
    Driver("glProgramUniform2ui64NV","(", program, ", ", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64vNV)(program, location, count, value);
    Driver("glProgramUniform2ui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64NV)(program, location, x, y, z);
    Driver("glProgramUniform3i64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64vNV)(program, location, count, value);
    Driver("glProgramUniform3i64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64NV)(program, location, x, y, z);
    Driver("glProgramUniform3ui64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64vNV)(program, location, count, value);
    Driver("glProgramUniform3ui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64NV)(program, location, x, y, z, w);
    Driver("glProgramUniform4i64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64vNV)(program, location, count, value);
    Driver("glProgramUniform4i64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64NV)(program, location, x, y, z, w);
    Driver("glProgramUniform4ui64NV","(", program, ", ", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64vNV)(program, location, count, value);
    Driver("glProgramUniform4ui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glUniform1i64NV(GLint location, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64NV)(location, x);
    Driver("glUniform1i64NV","(", location, ", ", x, ")");
}

static void REGAL_CALL log_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64vNV)(location, count, value);
    Driver("glUniform1i64vNV","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64NV)(location, x);
    Driver("glUniform1ui64NV","(", location, ", ", x, ")");
}

static void REGAL_CALL log_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64vNV)(location, count, value);
    Driver("glUniform1ui64vNV","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64NV)(location, x, y);
    Driver("glUniform2i64NV","(", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64vNV)(location, count, value);
    Driver("glUniform2i64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64NV)(location, x, y);
    Driver("glUniform2ui64NV","(", location, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64vNV)(location, count, value);
    Driver("glUniform2ui64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 2), ")");
}

static void REGAL_CALL log_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64NV)(location, x, y, z);
    Driver("glUniform3i64NV","(", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64vNV)(location, count, value);
    Driver("glUniform3i64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64NV)(location, x, y, z);
    Driver("glUniform3ui64NV","(", location, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64vNV)(location, count, value);
    Driver("glUniform3ui64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 3), ")");
}

static void REGAL_CALL log_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64NV)(location, x, y, z, w);
    Driver("glUniform4i64NV","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64vNV)(location, count, value);
    Driver("glUniform4i64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

static void REGAL_CALL log_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64NV)(location, x, y, z, w);
    Driver("glUniform4ui64NV","(", location, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64vNV)(location, count, value);
    Driver("glUniform4ui64vNV","(", location, ", ", count, ", ", boost::print::array(value,count * 4), ")");
}

// GL_NV_half_float

static void REGAL_CALL log_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3hNV)(red, green, blue);
    Driver("glColor3hNV","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glColor3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3hvNV)(v);
    Driver("glColor3hvNV","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4hNV)(red, green, blue, alpha);
    Driver("glColor4hNV","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glColor4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4hvNV)(v);
    Driver("glColor4hvNV","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glFogCoordhNV(GLhalfNV coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhNV)(coord);
    Driver("glFogCoordhNV","(", coord, ")");
}

static void REGAL_CALL log_glFogCoordhvNV(const GLhalfNV *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhvNV)(coord);
    Driver("glFogCoordhvNV","(", boost::print::array(coord,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hNV)(target, s);
    Driver("glMultiTexCoord1hNV","(", toString(target), ", ", s, ")");
}

static void REGAL_CALL log_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hvNV)(target, v);
    Driver("glMultiTexCoord1hvNV","(", toString(target), ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hNV)(target, s, t);
    Driver("glMultiTexCoord2hNV","(", toString(target), ", ", s, ", ", t, ")");
}

static void REGAL_CALL log_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hvNV)(target, v);
    Driver("glMultiTexCoord2hvNV","(", toString(target), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hNV)(target, s, t, r);
    Driver("glMultiTexCoord3hNV","(", toString(target), ", ", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hvNV)(target, v);
    Driver("glMultiTexCoord3hvNV","(", toString(target), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hNV)(target, s, t, r, q);
    Driver("glMultiTexCoord4hNV","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hvNV)(target, v);
    Driver("glMultiTexCoord4hvNV","(", toString(target), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3hNV)(nx, ny, nz);
    Driver("glNormal3hNV","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glNormal3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3hvNV)(v);
    Driver("glNormal3hvNV","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hNV)(red, green, blue);
    Driver("glSecondaryColor3hNV","(", red, ", ", green, ", ", blue, ")");
}

static void REGAL_CALL log_glSecondaryColor3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hvNV)(v);
    Driver("glSecondaryColor3hvNV","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord1hNV(GLhalfNV s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hNV)(s);
    Driver("glTexCoord1hNV","(", s, ")");
}

static void REGAL_CALL log_glTexCoord1hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hvNV)(v);
    Driver("glTexCoord1hvNV","(", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hNV)(s, t);
    Driver("glTexCoord2hNV","(", s, ", ", t, ")");
}

static void REGAL_CALL log_glTexCoord2hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hvNV)(v);
    Driver("glTexCoord2hvNV","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hNV)(s, t, r);
    Driver("glTexCoord3hNV","(", s, ", ", t, ", ", r, ")");
}

static void REGAL_CALL log_glTexCoord3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hvNV)(v);
    Driver("glTexCoord3hvNV","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hNV)(s, t, r, q);
    Driver("glTexCoord4hNV","(", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glTexCoord4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hvNV)(v);
    Driver("glTexCoord4hvNV","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2hNV)(x, y);
    Driver("glVertex2hNV","(", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertex2hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex2hvNV)(v);
    Driver("glVertex2hvNV","(", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3hNV)(x, y, z);
    Driver("glVertex3hNV","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertex3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex3hvNV)(v);
    Driver("glVertex3hvNV","(", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4hNV)(x, y, z, w);
    Driver("glVertex4hNV","(", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertex4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertex4hvNV)(v);
    Driver("glVertex4hvNV","(", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hNV)(index, x);
    Driver("glVertexAttrib1hNV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hvNV)(index, v);
    Driver("glVertexAttrib1hvNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hNV)(index, x, y);
    Driver("glVertexAttrib2hNV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hvNV)(index, v);
    Driver("glVertexAttrib2hvNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hNV)(index, x, y, z);
    Driver("glVertexAttrib3hNV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hvNV)(index, v);
    Driver("glVertexAttrib3hvNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hNV)(index, x, y, z, w);
    Driver("glVertexAttrib4hNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hvNV)(index, v);
    Driver("glVertexAttrib4hvNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1hvNV)(index, count, v);
    Driver("glVertexAttribs1hvNV","(", index, ", ", count, ", ", boost::print::array(v,count), ")");
}

static void REGAL_CALL log_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2hvNV)(index, count, v);
    Driver("glVertexAttribs2hvNV","(", index, ", ", count, ", ", boost::print::array(v,count * 2), ")");
}

static void REGAL_CALL log_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3hvNV)(index, count, v);
    Driver("glVertexAttribs3hvNV","(", index, ", ", count, ", ", boost::print::array(v,count * 3), ")");
}

static void REGAL_CALL log_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4hvNV)(index, count, v);
    Driver("glVertexAttribs4hvNV","(", index, ", ", count, ", ", boost::print::array(v,count * 4), ")");
}

static void REGAL_CALL log_glVertexWeighthNV(GLhalfNV weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthNV)(weight);
    Driver("glVertexWeighthNV","(", weight, ")");
}

static void REGAL_CALL log_glVertexWeighthvNV(const GLhalfNV *weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthvNV)(weight);
    Driver("glVertexWeighthvNV","(", boost::print::array(weight,1), ")");
}

// GL_NV_occlusion_query

static void REGAL_CALL log_glBeginOcclusionQueryNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginOcclusionQueryNV)(id);
    Driver("glBeginOcclusionQueryNV","(", id, ")");
}

static void REGAL_CALL log_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteOcclusionQueriesNV)(n, ids);
    Driver("glDeleteOcclusionQueriesNV","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glEndOcclusionQueryNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndOcclusionQueryNV)();
    Driver("glEndOcclusionQueryNV","()");
}

static void REGAL_CALL log_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenOcclusionQueriesNV)(n, ids);
    Driver("glGenOcclusionQueriesNV","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryivNV)(id, pname, params);
    Driver("glGetOcclusionQueryivNV","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryuivNV)(id, pname, params);
    Driver("glGetOcclusionQueryuivNV","(", id, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsOcclusionQueryNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsOcclusionQueryNV)(id);
    Driver("glIsOcclusionQueryNV","(", id, ")", " returned ", toString(ret));
    return ret;
}

// GL_NV_parameter_buffer_object

static void REGAL_CALL log_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIivNV)(target, buffer, index, count, params);
    Driver("glProgramBufferParametersIivNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", boost::print::array(params,count), ")");
}

static void REGAL_CALL log_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIuivNV)(target, buffer, index, count, params);
    Driver("glProgramBufferParametersIuivNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", boost::print::array(params,count), ")");
}

static void REGAL_CALL log_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersfvNV)(target, buffer, index, count, params);
    Driver("glProgramBufferParametersfvNV","(", toString(target), ", ", buffer, ", ", index, ", ", count, ", ", boost::print::array(params,count), ")");
}

// GL_NV_path_rendering

static void REGAL_CALL log_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyPathNV)(resultPath, srcPath);
    Driver("glCopyPathNV","(", resultPath, ", ", srcPath, ")");
}

static void REGAL_CALL log_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    Driver("glCoverFillPathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", boost::print::optional(transformValues,Logging::pointers), ")");
}

static void REGAL_CALL log_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathNV)(path, coverMode);
    Driver("glCoverFillPathNV","(", path, ", ", toString(coverMode), ")");
}

static void REGAL_CALL log_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    Driver("glCoverStrokePathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(coverMode), ", ", toString(transformType), ", ", boost::print::optional(transformValues,Logging::pointers), ")");
}

static void REGAL_CALL log_glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathNV)(name, coverMode);
    Driver("glCoverStrokePathNV","(", name, ", ", toString(coverMode), ")");
}

static void REGAL_CALL log_glDeletePathsNV(GLuint path, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeletePathsNV)(path, range);
    Driver("glDeletePathsNV","(", path, ", ", range, ")");
}

static GLuint REGAL_CALL log_glGenPathsNV(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenPathsNV)(range);
    Driver("glGenPathsNV","(", range, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenfvNV)(color, pname, value);
    Driver("glGetPathColorGenfvNV","(", toString(color), ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenivNV)(color, pname, value);
    Driver("glGetPathColorGenivNV","(", toString(color), ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathCommandsNV(GLuint name, GLubyte *commands)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathCommandsNV)(name, commands);
    Driver("glGetPathCommandsNV","(", name, ", ", boost::print::optional(commands,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathCoordsNV(GLuint name, GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathCoordsNV)(name, coords);
    Driver("glGetPathCoordsNV","(", name, ", ", boost::print::optional(coords,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathDashArrayNV)(name, dashArray);
    Driver("glGetPathDashArrayNV","(", name, ", ", boost::print::optional(dashArray,Logging::pointers), ")");
}

static GLfloat REGAL_CALL log_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLfloat  ret = _next->call(&_next->glGetPathLengthNV)(path, startSegment, numSegments);
    Driver("glGetPathLengthNV","(", path, ", ", startSegment, ", ", numSegments, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricRangeNV)(metricQueryMask, fistPathName, numPaths, stride, metrics);
    Driver("glGetPathMetricRangeNV","(", metricQueryMask, ", ", fistPathName, ", ", numPaths, ", ", stride, ", ", boost::print::optional(metrics,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    Driver("glGetPathMetricsNV","(", metricQueryMask, ", ", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", stride, ", ", boost::print::optional(metrics,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterfvNV)(name, param, value);
    Driver("glGetPathParameterfvNV","(", name, ", ", toString(param), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterivNV)(name, param, value);
    Driver("glGetPathParameterivNV","(", name, ", ", toString(param), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    Driver("glGetPathSpacingNV","(", toString(pathListMode), ", ", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", advanceScale, ", ", kerningScale, ", ", toString(transformType), ", ", boost::print::optional(returnedSpacing,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenfvNV)(texCoordSet, pname, value);
    Driver("glGetPathTexGenfvNV","(", toString(texCoordSet), ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenivNV)(texCoordSet, pname, value);
    Driver("glGetPathTexGenivNV","(", toString(texCoordSet), ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
    Driver("glInterpolatePathsNV","(", resultPath, ", ", pathA, ", ", pathB, ", ", weight, ")");
}

static GLboolean REGAL_CALL log_glIsPathNV(GLuint path)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsPathNV)(path);
    Driver("glIsPathNV","(", path, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsPointInFillPathNV)(path, mask, x, y);
    Driver("glIsPointInFillPathNV","(", path, ", ", mask, ", ", x, ", ", y, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsPointInStrokePathNV)(path, x, y);
    Driver("glIsPointInStrokePathNV","(", path, ", ", x, ", ", y, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathColorGenNV)(color, genMode, colorFormat, coeffs);
    Driver("glPathColorGenNV","(", toString(color), ", ", toString(genMode), ", ", toString(colorFormat), ", ", boost::print::optional(coeffs,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
    Driver("glPathCommandsNV","(", path, ", ", numCommands, ", ", boost::print::optional(commands,Logging::pointers), ", ", numCoords, ", ", toString(coordType), ", ", boost::print::optional(coords,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathCoordsNV)(path, numCoords, coordType, coords);
    Driver("glPathCoordsNV","(", path, ", ", numCoords, ", ", toString(coordType), ", ", boost::print::optional(coords,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathCoverDepthFuncNV(GLenum zfunc)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathCoverDepthFuncNV)(zfunc);
    Driver("glPathCoverDepthFuncNV","(", toString(zfunc), ")");
}

static void REGAL_CALL log_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathDashArrayNV)(path, dashCount, dashArray);
    Driver("glPathDashArrayNV","(", path, ", ", dashCount, ", ", boost::print::optional(dashArray,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathFogGenNV(GLenum genMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathFogGenNV)(genMode);
    Driver("glPathFogGenNV","(", toString(genMode), ")");
}

static void REGAL_CALL log_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
    Driver("glPathGlyphRangeNV","(", firstPathName, ", ", toString(fontTarget), ", ", boost::print::optional(fontName,Logging::pointers), ", ", fontStyle, ", ", firstGlyph, ", ", numGlyphs, ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ", ", emScale, ")");
}

static void REGAL_CALL log_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
    Driver("glPathGlyphsNV","(", firstPathName, ", ", toString(fontTarget), ", ", boost::print::optional(fontName,Logging::pointers), ", ", fontStyle, ", ", numGlyphs, ", ", toString(type), ", ", boost::print::optional(charcodes,Logging::pointers), ", ", toString(handleMissingGlyphs), ", ", pathParameterTemplate, ")");
}

static void REGAL_CALL log_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfNV)(path, pname, value);
    Driver("glPathParameterfNV","(", path, ", ", toString(pname), ", ", value, ")");
}

static void REGAL_CALL log_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfvNV)(path, pname, value);
    Driver("glPathParameterfvNV","(", path, ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathParameteriNV)(path, pname, value);
    Driver("glPathParameteriNV","(", path, ", ", toString(pname), ", ", value, ")");
}

static void REGAL_CALL log_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathParameterivNV)(path, pname, value);
    Driver("glPathParameterivNV","(", path, ", ", toString(pname), ", ", boost::print::optional(value,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathStencilDepthOffsetNV)(factor, units);
    Driver("glPathStencilDepthOffsetNV","(", factor, ", ", units, ")");
}

static void REGAL_CALL log_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathStencilFuncNV)(func, ref, mask);
    Driver("glPathStencilFuncNV","(", toString(func), ", ", boost::print::hex(ref), ", ", boost::print::hex(mask), ")");
}

static void REGAL_CALL log_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathStringNV)(path, format, length, pathString);
    Driver("glPathStringNV","(", path, ", ", toString(format), ", ", length, ", ", boost::print::optional(pathString,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    Driver("glPathSubCommandsNV","(", path, ", ", commandStart, ", ", commandsToDelete, ", ", numCommands, ", ", boost::print::optional(commands,Logging::pointers), ", ", numCoords, ", ", toString(coordType), ", ", boost::print::optional(coords,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
    Driver("glPathSubCoordsNV","(", path, ", ", coordStart, ", ", numCoords, ", ", toString(coordType), ", ", boost::print::optional(coords,Logging::pointers), ")");
}

static void REGAL_CALL log_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
    Driver("glPathTexGenNV","(", toString(texCoordSet), ", ", toString(genMode), ", ", components, ", ", boost::print::optional(coeffs,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    Driver("glPointAlongPathNV","(", path, ", ", startSegment, ", ", numSegments, ", ", distance, ", ", boost::print::optional(x,Logging::pointers), ", ", boost::print::optional(y,Logging::pointers), ", ", boost::print::optional(tangentX,Logging::pointers), ", ", boost::print::optional(tangentY,Logging::pointers), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    Driver("glStencilFillPathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", toString(fillMode), ", ", mask, ", ", toString(transformType), ", ", boost::print::optional(transformValues,Logging::pointers), ")");
}

static void REGAL_CALL log_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathNV)(path, fillMode, mask);
    Driver("glStencilFillPathNV","(", path, ", ", toString(fillMode), ", ", mask, ")");
}

static void REGAL_CALL log_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    Driver("glStencilStrokePathInstancedNV","(", numPaths, ", ", toString(pathNameType), ", ", boost::print::optional(paths,Logging::pointers), ", ", pathBase, ", ", reference, ", ", mask, ", ", toString(transformType), ", ", boost::print::optional(transformValues,Logging::pointers), ")");
}

static void REGAL_CALL log_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathNV)(path, reference, mask);
    Driver("glStencilStrokePathNV","(", path, ", ", reference, ", ", mask, ")");
}

static void REGAL_CALL log_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
    Driver("glTransformPathNV","(", resultPath, ", ", srcPath, ", ", toString(transformType), ", ", boost::print::optional(transformValues,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightPathsNV)(resultPath, numPaths, paths, weights);
    Driver("glWeightPathsNV","(", resultPath, ", ", numPaths, ", ", boost::print::optional(paths,Logging::pointers), ", ", boost::print::optional(weights,Logging::pointers), ")");
}

// GL_NV_pixel_data_range

static void REGAL_CALL log_glFlushPixelDataRangeNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushPixelDataRangeNV)(target);
    Driver("glFlushPixelDataRangeNV","(", toString(target), ")");
}

static void REGAL_CALL log_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelDataRangeNV)(target, size, pointer);
    Driver("glPixelDataRangeNV","(", toString(target), ", ", size, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_NV_point_sprite

static void REGAL_CALL log_glPointParameteriNV(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriNV)(pname, param);
    Driver("glPointParameteriNV","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterivNV)(pname, params);
    Driver("glPointParameterivNV","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_NV_present_video

static void REGAL_CALL log_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoi64vNV)(video_slot, pname, params);
    Driver("glGetVideoi64vNV","(", video_slot, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoivNV)(video_slot, pname, params);
    Driver("glGetVideoivNV","(", video_slot, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoui64vNV)(video_slot, pname, params);
    Driver("glGetVideoui64vNV","(", video_slot, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideouivNV)(video_slot, pname, params);
    Driver("glGetVideouivNV","(", video_slot, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
    Driver("glPresentFrameDualFillNV","(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", toString(target1), ", ", fill1, ")");
}

static void REGAL_CALL log_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
    Driver("glPresentFrameKeyedNV","(", video_slot, ", ", minPresentTime, ", ", beginPresentTimeId, ", ", presentDurationId, ", ", toString(type), ", ", toString(target0), ", ", fill0, ", ", key0, ", ", toString(target1), ")");
}

// GL_NV_primitive_restart

static void REGAL_CALL log_glPrimitiveRestartIndexNV(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndexNV)(index);
    Driver("glPrimitiveRestartIndexNV","(", index, ")");
}

static void REGAL_CALL log_glPrimitiveRestartNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartNV)();
    Driver("glPrimitiveRestartNV","()");
}

// GL_NV_read_buffer

static void REGAL_CALL log_glReadBufferNV(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadBufferNV)(mode);
    Driver("glReadBufferNV","(", toString(mode), ")");
}

// GL_NV_register_combiners

static void REGAL_CALL log_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);
    Driver("glCombinerInputNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
}

static void REGAL_CALL log_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
    Driver("glCombinerOutputNV","(", toString(stage), ", ", toString(portion), ", ", toString(abOutput), ", ", toString(cdOutput), ", ", toString(sumOutput), ", ", toString(scale), ", ", toString(bias), ", ", toString(abDotProduct), ", ", toString(cdDotProduct), ")");
}

static void REGAL_CALL log_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfNV)(pname, param);
    Driver("glCombinerParameterfNV","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfvNV)(pname, params);
    Driver("glCombinerParameterfvNV","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glCombinerParameteriNV(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameteriNV)(pname, param);
    Driver("glCombinerParameteriNV","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glCombinerParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterivNV)(pname, params);
    Driver("glCombinerParameterivNV","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinalCombinerInputNV)(variable, input, mapping, componentUsage);
    Driver("glFinalCombinerInputNV","(", toString(variable), ", ", toString(input), ", ", toString(mapping), ", ", toString(componentUsage), ")");
}

static void REGAL_CALL log_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, params);
    Driver("glGetCombinerInputParameterfvNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterivNV)(stage, portion, variable, pname, params);
    Driver("glGetCombinerInputParameterivNV","(", toString(stage), ", ", toString(portion), ", ", toString(variable), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterfvNV)(stage, portion, pname, params);
    Driver("glGetCombinerOutputParameterfvNV","(", toString(stage), ", ", toString(portion), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterivNV)(stage, portion, pname, params);
    Driver("glGetCombinerOutputParameterivNV","(", toString(stage), ", ", toString(portion), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterfvNV)(variable, pname, params);
    Driver("glGetFinalCombinerInputParameterfvNV","(", toString(variable), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterivNV)(variable, pname, params);
    Driver("glGetFinalCombinerInputParameterivNV","(", toString(variable), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_NV_register_combiners2

static void REGAL_CALL log_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCombinerStageParameterfvNV)(stage, pname, params);
    Driver("glCombinerStageParameterfvNV","(", toString(stage), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerStageParameterfvNV)(stage, pname, params);
    Driver("glGetCombinerStageParameterfvNV","(", toString(stage), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_NV_shader_buffer_load

static void REGAL_CALL log_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterui64vNV)(target, pname, params);
    Driver("glGetBufferParameterui64vNV","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64vNV)(target, data);
    Driver("glGetIntegerui64vNV","(", toString(target), ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterui64vNV)(buffer, pname, params);
    Driver("glGetNamedBufferParameterui64vNV","(", buffer, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetUniformui64vNV)(program, location, params);
    Driver("glGetUniformui64vNV","(", program, ", ", location, ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsBufferResidentNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsBufferResidentNV)(target);
    Driver("glIsBufferResidentNV","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsNamedBufferResidentNV(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsNamedBufferResidentNV)(buffer);
    Driver("glIsNamedBufferResidentNV","(", buffer, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glMakeBufferNonResidentNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferNonResidentNV)(target);
    Driver("glMakeBufferNonResidentNV","(", toString(target), ")");
}

static void REGAL_CALL log_glMakeBufferResidentNV(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferResidentNV)(target, access);
    Driver("glMakeBufferResidentNV","(", toString(target), ", ", toString(access), ")");
}

static void REGAL_CALL log_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferNonResidentNV)(buffer);
    Driver("glMakeNamedBufferNonResidentNV","(", buffer, ")");
}

static void REGAL_CALL log_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferResidentNV)(buffer, access);
    Driver("glMakeNamedBufferResidentNV","(", buffer, ", ", toString(access), ")");
}

static void REGAL_CALL log_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64NV)(program, location, v0);
    Driver("glProgramUniformui64NV","(", program, ", ", location, ", ", v0, ")");
}

static void REGAL_CALL log_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64vNV)(program, location, count, value);
    Driver("glProgramUniformui64vNV","(", program, ", ", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

static void REGAL_CALL log_glUniformui64NV(GLint location, GLuint64EXT v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformui64NV)(location, v0);
    Driver("glUniformui64NV","(", location, ", ", v0, ")");
}

static void REGAL_CALL log_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glUniformui64vNV)(location, count, value);
    Driver("glUniformui64vNV","(", location, ", ", count, ", ", boost::print::array(value,count), ")");
}

// GL_NV_texture_barrier

static void REGAL_CALL log_glTextureBarrierNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureBarrierNV)();
    Driver("glTextureBarrierNV","()");
}

// GL_NV_texture_multisample

static void REGAL_CALL log_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    Driver("glTexImage2DMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
}

static void REGAL_CALL log_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    Driver("glTexImage3DMultisampleCoverageNV","(", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
}

static void REGAL_CALL log_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    Driver("glTextureImage2DMultisampleCoverageNV","(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
}

static void REGAL_CALL log_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
    Driver("glTextureImage2DMultisampleNV","(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", toString(fixedSampleLocations), ")");
}

static void REGAL_CALL log_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    Driver("glTextureImage3DMultisampleCoverageNV","(", texture, ", ", toString(target), ", ", coverageSamples, ", ", colorSamples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
}

static void REGAL_CALL log_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
    Driver("glTextureImage3DMultisampleNV","(", texture, ", ", toString(target), ", ", samples, ", ", internalFormat, ", ", width, ", ", height, ", ", depth, ", ", toString(fixedSampleLocations), ")");
}

// GL_NV_transform_feedback

static void REGAL_CALL log_glActiveVaryingNV(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glActiveVaryingNV)(program, name);
    Driver("glActiveVaryingNV","(", program, ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glBeginTransformFeedbackNV(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackNV)(primitiveMode);
    Driver("glBeginTransformFeedbackNV","(", toString(primitiveMode), ")");
}

static void REGAL_CALL log_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseNV)(target, index, buffer);
    Driver("glBindBufferBaseNV","(", toString(target), ", ", index, ", ", buffer, ")");
}

static void REGAL_CALL log_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetNV)(target, index, buffer, offset);
    Driver("glBindBufferOffsetNV","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ")");
}

static void REGAL_CALL log_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeNV)(target, index, buffer, offset, size);
    Driver("glBindBufferRangeNV","(", toString(target), ", ", index, ", ", buffer, ", ", offset, ", ", size, ")");
}

static void REGAL_CALL log_glEndTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackNV)();
    Driver("glEndTransformFeedbackNV","()");
}

static void REGAL_CALL log_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);
    Driver("glGetActiveVaryingNV","(", program, ", ", index, ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(size,1), ", ", boost::print::array(type,1), ", ", boost::print::quote(name,'"'), ")");
}

static void REGAL_CALL log_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingNV)(program, index, location);
    Driver("glGetTransformFeedbackVaryingNV","(", program, ", ", index, ", ", boost::print::array(location,1), ")");
}

static GLint REGAL_CALL log_glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetVaryingLocationNV)(program, name);
    Driver("glGetVaryingLocationNV","(", program, ", ", boost::print::quote(name,'"'), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackAttribsNV)(count, attribs, bufferMode);
    Driver("glTransformFeedbackAttribsNV","(", count, ", ", boost::print::optional(attribs,Logging::pointers), ", ", toString(bufferMode), ")");
}

static void REGAL_CALL log_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);
    Driver("glTransformFeedbackVaryingsNV","(", program, ", ", count, ", ", boost::print::array(locations,count), ", ", toString(bufferMode), ")");
}

// GL_NV_transform_feedback2

static void REGAL_CALL log_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedbackNV)(target, id);
    Driver("glBindTransformFeedbackNV","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacksNV)(n, ids);
    Driver("glDeleteTransformFeedbacksNV","(", n, ", ", boost::print::array(ids,n), ")");
}

static void REGAL_CALL log_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackNV)(mode, name);
    Driver("glDrawTransformFeedbackNV","(", toString(mode), ", ", name, ")");
}

static void REGAL_CALL log_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacksNV)(n, ids);
    Driver("glGenTransformFeedbacksNV","(", n, ", ", boost::print::array(ids,n), ")");
}

static GLboolean REGAL_CALL log_glIsTransformFeedbackNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsTransformFeedbackNV)(id);
    Driver("glIsTransformFeedbackNV","(", id, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glPauseTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedbackNV)();
    Driver("glPauseTransformFeedbackNV","()");
}

static void REGAL_CALL log_glResumeTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedbackNV)();
    Driver("glResumeTransformFeedbackNV","()");
}

// GL_NV_vdpau_interop

static void REGAL_CALL log_glVDPAUFiniNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUFiniNV)();
    Driver("glVDPAUFiniNV","()");
}

static void REGAL_CALL log_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUGetSurfaceivNV)(surface, pname, bufSize, length, values);
    Driver("glVDPAUGetSurfaceivNV","(", surface, ", ", toString(pname), ", ", bufSize, ", ", boost::print::array(length,1), ", ", boost::print::array(values,bufSize), ")");
}

static void REGAL_CALL log_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUInitNV)(vdpDevice, getProcAddress);
    Driver("glVDPAUInitNV","(", boost::print::optional(vdpDevice,Logging::pointers), ", ", boost::print::optional(getProcAddress,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glVDPAUIsSurfaceNV)(surface);
    Driver("glVDPAUIsSurfaceNV","(", surface, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUMapSurfacesNV)(numSurfaces, surfaces);
    Driver("glVDPAUMapSurfacesNV","(", numSurfaces, ", ", boost::print::array(surfaces,numSurfaces), ")");
}

static GLvdpauSurfaceNV REGAL_CALL log_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvdpauSurfaceNV  ret = _next->call(&_next->glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
    Driver("glVDPAURegisterOutputSurfaceNV","(", boost::print::optional(vdpSurface,Logging::pointers), ", ", toString(target), ", ", numTextureNames, ", ", boost::print::array(textureNames,numTextureNames), ")", " returned ", ret);
    return ret;
}

static GLvdpauSurfaceNV REGAL_CALL log_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvdpauSurfaceNV  ret = _next->call(&_next->glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
    Driver("glVDPAURegisterVideoSurfaceNV","(", boost::print::optional(vdpSurface,Logging::pointers), ", ", toString(target), ", ", numTextureNames, ", ", boost::print::array(textureNames,numTextureNames), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUSurfaceAccessNV)(surface, access);
    Driver("glVDPAUSurfaceAccessNV","(", surface, ", ", toString(access), ")");
}

static void REGAL_CALL log_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnmapSurfacesNV)(numSurfaces, surfaces);
    Driver("glVDPAUUnmapSurfacesNV","(", numSurfaces, ", ", boost::print::array(surfaces,numSurfaces), ")");
}

static void REGAL_CALL log_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnregisterSurfaceNV)(surface);
    Driver("glVDPAUUnregisterSurfaceNV","(", surface, ")");
}

// GL_NV_vertex_array_range

static void REGAL_CALL log_glFlushVertexArrayRangeNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeNV)();
    Driver("glFlushVertexArrayRangeNV","()");
}

static void REGAL_CALL log_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeNV)(size, pointer);
    Driver("glVertexArrayRangeNV","(", size, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_NV_vertex_attrib_integer_64bit

static void REGAL_CALL log_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLi64vNV)(index, pname, params);
    Driver("glGetVertexAttribLi64vNV","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLui64vNV)(index, pname, params);
    Driver("glGetVertexAttribLui64vNV","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64NV)(index, x);
    Driver("glVertexAttribL1i64NV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64vNV)(index, v);
    Driver("glVertexAttribL1i64vNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64NV)(index, x);
    Driver("glVertexAttribL1ui64NV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64vNV)(index, v);
    Driver("glVertexAttribL1ui64vNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64NV)(index, x, y);
    Driver("glVertexAttribL2i64NV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64vNV)(index, v);
    Driver("glVertexAttribL2i64vNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64NV)(index, x, y);
    Driver("glVertexAttribL2ui64NV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64vNV)(index, v);
    Driver("glVertexAttribL2ui64vNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64NV)(index, x, y, z);
    Driver("glVertexAttribL3i64NV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64vNV)(index, v);
    Driver("glVertexAttribL3i64vNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64NV)(index, x, y, z);
    Driver("glVertexAttribL3ui64NV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64vNV)(index, v);
    Driver("glVertexAttribL3ui64vNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64NV)(index, x, y, z, w);
    Driver("glVertexAttribL4i64NV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64vNV)(index, v);
    Driver("glVertexAttribL4i64vNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64NV)(index, x, y, z, w);
    Driver("glVertexAttribL4ui64NV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64vNV)(index, v);
    Driver("glVertexAttribL4ui64vNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormatNV)(index, size, type, stride);
    Driver("glVertexAttribLFormatNV","(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
}

// GL_NV_vertex_buffer_unified_memory

static void REGAL_CALL log_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBufferAddressRangeNV)(pname, index, address, length);
    Driver("glBufferAddressRangeNV","(", toString(pname), ", ", index, ", ", address, ", ", length, ")");
}

static void REGAL_CALL log_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorFormatNV)(size, type, stride);
    Driver("glColorFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glEdgeFlagFormatNV(GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagFormatNV)(stride);
    Driver("glEdgeFlagFormatNV","(", stride, ")");
}

static void REGAL_CALL log_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogCoordFormatNV)(type, stride);
    Driver("glFogCoordFormatNV","(", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64i_vNV)(target, index, data);
    Driver("glGetIntegerui64i_vNV","(", toString(target), ", ", index, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glIndexFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIndexFormatNV)(type, stride);
    Driver("glIndexFormatNV","(", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glNormalFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormalFormatNV)(type, stride);
    Driver("glNormalFormatNV","(", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorFormatNV)(size, type, stride);
    Driver("glSecondaryColorFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoordFormatNV)(size, type, stride);
    Driver("glTexCoordFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormatNV)(index, size, type, normalized, stride);
    Driver("glVertexAttribFormatNV","(", index, ", ", size, ", ", toString(type), ", ", toString(normalized), ", ", stride, ")");
}

static void REGAL_CALL log_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormatNV)(index, size, type, stride);
    Driver("glVertexAttribIFormatNV","(", index, ", ", size, ", ", toString(type), ", ", stride, ")");
}

static void REGAL_CALL log_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexFormatNV)(size, type, stride);
    Driver("glVertexFormatNV","(", size, ", ", toString(type), ", ", stride, ")");
}

// GL_NV_vertex_program

static GLboolean REGAL_CALL log_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glAreProgramsResidentNV)(n, programs, residences);
    Driver("glAreProgramsResidentNV","(", n, ", ", boost::print::array(programs,n), ", ", boost::print::array(residences,n), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glBindProgramNV(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindProgramNV)(target, id);
    Driver("glBindProgramNV","(", toString(target), ", ", id, ")");
}

static void REGAL_CALL log_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsNV)(n, programs);
    Driver("glDeleteProgramsNV","(", n, ", ", boost::print::array(programs,n), ")");
}

static void REGAL_CALL log_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExecuteProgramNV)(target, id, params);
    Driver("glExecuteProgramNV","(", toString(target), ", ", id, ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGenProgramsNV(GLsizei n, GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsNV)(n, programs);
    Driver("glGenProgramsNV","(", n, ", ", boost::print::array(programs,n), ")");
}

static void REGAL_CALL log_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterdvNV)(target, index, pname, params);
    Driver("glGetProgramParameterdvNV","(", toString(target), ", ", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterfvNV)(target, index, pname, params);
    Driver("glGetProgramParameterfvNV","(", toString(target), ", ", index, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringNV)(id, pname, program);
    Driver("glGetProgramStringNV","(", id, ", ", toString(pname), ", ", boost::print::optional(program,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivNV)(id, pname, params);
    Driver("glGetProgramivNV","(", id, ", ", toString(pname), ", ", boost::print::array(params,4), ")");
}

static void REGAL_CALL log_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTrackMatrixivNV)(target, address, pname, params);
    Driver("glGetTrackMatrixivNV","(", toString(target), ", ", address, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervNV)(index, pname, pointer);
    Driver("glGetVertexAttribPointervNV","(", index, ", ", toString(pname), ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvNV)(index, pname, params);
    Driver("glGetVertexAttribdvNV","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvNV)(index, pname, params);
    Driver("glGetVertexAttribfvNV","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static void REGAL_CALL log_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivNV)(index, pname, params);
    Driver("glGetVertexAttribivNV","(", index, ", ", toString(pname), ", ", boost::print::array(params,1), ")");
}

static GLboolean REGAL_CALL log_glIsProgramNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsProgramNV)(id);
    Driver("glIsProgramNV","(", id, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadProgramNV)(target, id, len, program);
    Driver("glLoadProgramNV","(", toString(target), ", ", id, ", ", len, ", ", boost::print::array(program,len), ")");
}

static void REGAL_CALL log_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dNV)(target, index, x, y, z, w);
    Driver("glProgramParameter4dNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dvNV)(target, index, v);
    Driver("glProgramParameter4dvNV","(", toString(target), ", ", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fNV)(target, index, x, y, z, w);
    Driver("glProgramParameter4fNV","(", toString(target), ", ", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fvNV)(target, index, v);
    Driver("glProgramParameter4fvNV","(", toString(target), ", ", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4dvNV)(target, index, count, v);
    Driver("glProgramParameters4dvNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(v,count * 4), ")");
}

static void REGAL_CALL log_glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4fvNV)(target, index, count, v);
    Driver("glProgramParameters4fvNV","(", toString(target), ", ", index, ", ", count, ", ", boost::print::array(v,count * 4), ")");
}

static void REGAL_CALL log_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRequestResidentProgramsNV)(n, programs);
    Driver("glRequestResidentProgramsNV","(", n, ", ", boost::print::array(programs,n), ")");
}

static void REGAL_CALL log_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTrackMatrixNV)(target, address, matrix, transform);
    Driver("glTrackMatrixNV","(", toString(target), ", ", address, ", ", toString(matrix), ", ", toString(transform), ")");
}

static void REGAL_CALL log_glVertexAttrib1dNV(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dNV)(index, x);
    Driver("glVertexAttrib1dNV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvNV)(index, v);
    Driver("glVertexAttrib1dvNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1fNV(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fNV)(index, x);
    Driver("glVertexAttrib1fNV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvNV)(index, v);
    Driver("glVertexAttrib1fvNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib1sNV(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sNV)(index, x);
    Driver("glVertexAttrib1sNV","(", index, ", ", x, ")");
}

static void REGAL_CALL log_glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svNV)(index, v);
    Driver("glVertexAttrib1svNV","(", index, ", ", boost::print::array(v,1), ")");
}

static void REGAL_CALL log_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dNV)(index, x, y);
    Driver("glVertexAttrib2dNV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvNV)(index, v);
    Driver("glVertexAttrib2dvNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fNV)(index, x, y);
    Driver("glVertexAttrib2fNV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvNV)(index, v);
    Driver("glVertexAttrib2fvNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sNV)(index, x, y);
    Driver("glVertexAttrib2sNV","(", index, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svNV)(index, v);
    Driver("glVertexAttrib2svNV","(", index, ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dNV)(index, x, y, z);
    Driver("glVertexAttrib3dNV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvNV)(index, v);
    Driver("glVertexAttrib3dvNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fNV)(index, x, y, z);
    Driver("glVertexAttrib3fNV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvNV)(index, v);
    Driver("glVertexAttrib3fvNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sNV)(index, x, y, z);
    Driver("glVertexAttrib3sNV","(", index, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svNV)(index, v);
    Driver("glVertexAttrib3svNV","(", index, ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dNV)(index, x, y, z, w);
    Driver("glVertexAttrib4dNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvNV)(index, v);
    Driver("glVertexAttrib4dvNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fNV)(index, x, y, z, w);
    Driver("glVertexAttrib4fNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvNV)(index, v);
    Driver("glVertexAttrib4fvNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sNV)(index, x, y, z, w);
    Driver("glVertexAttrib4sNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svNV)(index, v);
    Driver("glVertexAttrib4svNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubNV)(index, x, y, z, w);
    Driver("glVertexAttrib4ubNV","(", index, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvNV)(index, v);
    Driver("glVertexAttrib4ubvNV","(", index, ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerNV)(index, fsize, type, stride, pointer);
    Driver("glVertexAttribPointerNV","(", index, ", ", fsize, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1dvNV)(index, n, v);
    Driver("glVertexAttribs1dvNV","(", index, ", ", n, ", ", boost::print::array(v,n), ")");
}

static void REGAL_CALL log_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1fvNV)(index, n, v);
    Driver("glVertexAttribs1fvNV","(", index, ", ", n, ", ", boost::print::array(v,n), ")");
}

static void REGAL_CALL log_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1svNV)(index, n, v);
    Driver("glVertexAttribs1svNV","(", index, ", ", n, ", ", boost::print::array(v,n), ")");
}

static void REGAL_CALL log_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2dvNV)(index, n, v);
    Driver("glVertexAttribs2dvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 2), ")");
}

static void REGAL_CALL log_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2fvNV)(index, n, v);
    Driver("glVertexAttribs2fvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 2), ")");
}

static void REGAL_CALL log_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2svNV)(index, n, v);
    Driver("glVertexAttribs2svNV","(", index, ", ", n, ", ", boost::print::array(v,n * 2), ")");
}

static void REGAL_CALL log_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3dvNV)(index, n, v);
    Driver("glVertexAttribs3dvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 3), ")");
}

static void REGAL_CALL log_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3fvNV)(index, n, v);
    Driver("glVertexAttribs3fvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 3), ")");
}

static void REGAL_CALL log_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3svNV)(index, n, v);
    Driver("glVertexAttribs3svNV","(", index, ", ", n, ", ", boost::print::array(v,n * 3), ")");
}

static void REGAL_CALL log_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4dvNV)(index, n, v);
    Driver("glVertexAttribs4dvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 4), ")");
}

static void REGAL_CALL log_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4fvNV)(index, n, v);
    Driver("glVertexAttribs4fvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 4), ")");
}

static void REGAL_CALL log_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4svNV)(index, n, v);
    Driver("glVertexAttribs4svNV","(", index, ", ", n, ", ", boost::print::array(v,n * 4), ")");
}

static void REGAL_CALL log_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4ubvNV)(index, n, v);
    Driver("glVertexAttribs4ubvNV","(", index, ", ", n, ", ", boost::print::array(v,n * 4), ")");
}

// GL_NV_video_capture

static void REGAL_CALL log_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBeginVideoCaptureNV)(video_capture_slot);
    Driver("glBeginVideoCaptureNV","(", video_capture_slot, ")");
}

static void REGAL_CALL log_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);
    Driver("glBindVideoCaptureStreamBufferNV","(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", offset, ")");
}

static void REGAL_CALL log_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);
    Driver("glBindVideoCaptureStreamTextureNV","(", video_capture_slot, ", ", stream, ", ", toString(frame_region), ", ", toString(target), ", ", texture, ")");
}

static void REGAL_CALL log_glEndVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndVideoCaptureNV)(video_capture_slot);
    Driver("glEndVideoCaptureNV","(", video_capture_slot, ")");
}

static void REGAL_CALL log_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, params);
    Driver("glGetVideoCaptureStreamdvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, params);
    Driver("glGetVideoCaptureStreamfvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, params);
    Driver("glGetVideoCaptureStreamivNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureivNV)(video_capture_slot, pname, params);
    Driver("glGetVideoCaptureivNV","(", video_capture_slot, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLenum REGAL_CALL log_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time);
    Driver("glVideoCaptureNV","(", video_capture_slot, ", ", boost::print::array(sequence_num,1), ", ", boost::print::array(capture_time,1), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, params);
    Driver("glVideoCaptureStreamParameterdvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, params);
    Driver("glVideoCaptureStreamParameterfvNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, params);
    Driver("glVideoCaptureStreamParameterivNV","(", video_capture_slot, ", ", stream, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_OES_blend_equation_separate

static void REGAL_CALL log_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateOES)(modeRGB, modeAlpha);
    Driver("glBlendEquationSeparateOES","(", toString(modeRGB), ", ", toString(modeAlpha), ")");
}

// GL_OES_blend_func_separate

static void REGAL_CALL log_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateOES)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    Driver("glBlendFuncSeparateOES","(", toString(sfactorRGB), ", ", toString(dfactorRGB), ", ", toString(sfactorAlpha), ", ", toString(dfactorAlpha), ")");
}

// GL_OES_blend_subtract

static void REGAL_CALL log_glBlendEquationOES(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationOES)(mode);
    Driver("glBlendEquationOES","(", toString(mode), ")");
}

// GL_OES_framebuffer_object

static void REGAL_CALL log_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferOES)(target, framebuffer);
    Driver("glBindFramebufferOES","(", toString(target), ", ", framebuffer, ")");
}

static void REGAL_CALL log_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferOES)(target, renderbuffer);
    Driver("glBindRenderbufferOES","(", toString(target), ", ", renderbuffer, ")");
}

static GLenum REGAL_CALL log_glCheckFramebufferStatusOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLenum  ret = _next->call(&_next->glCheckFramebufferStatusOES)(target);
    Driver("glCheckFramebufferStatusOES","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersOES)(n, framebuffers);
    Driver("glDeleteFramebuffersOES","(", n, ", ", boost::print::optional(framebuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersOES)(n, renderbuffers);
    Driver("glDeleteRenderbuffersOES","(", n, ", ", boost::print::optional(renderbuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferOES)(target, attachment, renderbuffertarget, renderbuffer);
    Driver("glFramebufferRenderbufferOES","(", toString(target), ", ", toString(attachment), ", ", toString(renderbuffertarget), ", ", renderbuffer, ")");
}

static void REGAL_CALL log_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DOES)(target, attachment, textarget, texture, level);
    Driver("glFramebufferTexture2DOES","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ")");
}

static void REGAL_CALL log_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersOES)(n, framebuffers);
    Driver("glGenFramebuffersOES","(", n, ", ", boost::print::optional(framebuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersOES)(n, renderbuffers);
    Driver("glGenRenderbuffersOES","(", n, ", ", boost::print::optional(renderbuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glGenerateMipmapOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapOES)(target);
    Driver("glGenerateMipmapOES","(", toString(target), ")");
}

static void REGAL_CALL log_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivOES)(target, attachment, pname, params);
    Driver("glGetFramebufferAttachmentParameterivOES","(", toString(target), ", ", toString(attachment), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivOES)(target, pname, params);
    Driver("glGetRenderbufferParameterivOES","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsFramebufferOES(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsFramebufferOES)(framebuffer);
    Driver("glIsFramebufferOES","(", framebuffer, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_glIsRenderbufferOES(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsRenderbufferOES)(renderbuffer);
    Driver("glIsRenderbufferOES","(", renderbuffer, ")", " returned ", toString(ret));
    return ret;
}

static void REGAL_CALL log_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageOES)(target, internalformat, width, height);
    Driver("glRenderbufferStorageOES","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", height, ")");
}

// GL_OES_get_program_binary

static void REGAL_CALL log_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinaryOES)(program, bufSize, length, binaryFormat, binary);
    Driver("glGetProgramBinaryOES","(", program, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::optional(binaryFormat,Logging::pointers), ", ", boost::print::optional(binary,Logging::pointers), ")");
}

static void REGAL_CALL log_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glProgramBinaryOES)(program, binaryFormat, binary, length);
    Driver("glProgramBinaryOES","(", program, ", ", toString(binaryFormat), ", ", boost::print::optional(binary,Logging::pointers), ", ", length, ")");
}

// GL_OES_mapbuffer

static void REGAL_CALL log_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervOES)(target, pname, params);
    Driver("glGetBufferPointervOES","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static GLvoid *REGAL_CALL log_glMapBufferOES(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLvoid * ret = _next->call(&_next->glMapBufferOES)(target, access);
    Driver("glMapBufferOES","(", toString(target), ", ", toString(access), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLboolean REGAL_CALL log_glUnmapBufferOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glUnmapBufferOES)(target);
    Driver("glUnmapBufferOES","(", toString(target), ")", " returned ", toString(ret));
    return ret;
}

// GL_OES_matrix_palette

static void REGAL_CALL log_glCurrentPaletteMatrixOES(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixOES)(index);
    Driver("glCurrentPaletteMatrixOES","(", index, ")");
}

static void REGAL_CALL log_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerOES)(size, type, stride, pointer);
    Driver("glMatrixIndexPointerOES","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerOES)(size, type, stride, pointer);
    Driver("glWeightPointerOES","(", size, ", ", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

// GL_OES_single_precision

static void REGAL_CALL log_glClearDepthfOES(GLclampd depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearDepthfOES)(depth);
    Driver("glClearDepthfOES","(", depth, ")");
}

static void REGAL_CALL log_glClipPlanefOES(GLenum plane, const GLfloat *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClipPlanefOES)(plane, equation);
    Driver("glClipPlanefOES","(", toString(plane), ", ", boost::print::optional(equation,Logging::pointers), ")");
}

static void REGAL_CALL log_glDepthRangefOES(GLclampf n, GLclampf f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangefOES)(n, f);
    Driver("glDepthRangefOES","(", n, ", ", f, ")");
}

static void REGAL_CALL log_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrustumfOES)(l, r, b, t, n, f);
    Driver("glFrustumfOES","(", l, ", ", r, ", ", b, ", ", t, ", ", n, ", ", f, ")");
}

static void REGAL_CALL log_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanefOES)(plane, equation);
    Driver("glGetClipPlanefOES","(", toString(plane), ", ", boost::print::optional(equation,Logging::pointers), ")");
}

static void REGAL_CALL log_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glOrthofOES)(l, r, b, t, n, f);
    Driver("glOrthofOES","(", l, ", ", r, ", ", b, ", ", t, ", ", n, ", ", f, ")");
}

// GL_OES_texture_3D

static void REGAL_CALL log_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data);
    Driver("glCompressedTexImage3DOES","(", toString(target), ", ", level, ", ", toString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", imageSize, ", ", boost::print::optional(data,Logging::pointers), ")");
}

static void REGAL_CALL log_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    Driver("glCompressedTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

static void REGAL_CALL log_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    Driver("glCopyTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

static void REGAL_CALL log_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset);
    Driver("glFramebufferTexture3DOES","(", toString(target), ", ", toString(attachment), ", ", toString(textarget), ", ", texture, ", ", level, ", ", zoffset, ")");
}

static void REGAL_CALL log_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DOES)(target, level, internalFormat, width, height, depth, border, format, type, pixels);
    Driver("glTexImage3DOES","(", toString(target), ", ", level, ", ", toString(internalFormat), ", ", width, ", ", height, ", ", depth, ", ", border, ", ", toString(format), ", ", toString(type), ")");
}

static void REGAL_CALL log_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    Driver("glTexSubImage3DOES","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

// GL_OES_texture_cube_map

static void REGAL_CALL log_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfvOES)(coord, pname, params);
    Driver("glGetTexGenfvOES","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenivOES)(coord, pname, params);
    Driver("glGetTexGenivOES","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenxvOES)(coord, pname, params);
    Driver("glGetTexGenxvOES","(", toString(coord), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenfOES)(coord, pname, param);
    Driver("glTexGenfOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenfvOES)(coord, pname, params);
    Driver("glTexGenfvOES","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGeniOES)(coord, pname, param);
    Driver("glTexGeniOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenivOES)(coord, pname, params);
    Driver("glTexGenivOES","(", toString(coord), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenxOES)(coord, pname, param);
    Driver("glTexGenxOES","(", toString(coord), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexGenxvOES)(coord, pname, params);
    Driver("glTexGenxvOES","(", toString(coord), ", ", toString(pname), ", ", params, ")");
}

// GL_OES_vertex_array_object

static void REGAL_CALL log_glBindVertexArrayOES(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayOES)(array);
    Driver("glBindVertexArrayOES","(", array, ")");
}

static void REGAL_CALL log_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysOES)(n, arrays);
    Driver("glDeleteVertexArraysOES","(", n, ", ", boost::print::optional(arrays,Logging::pointers), ")");
}

static void REGAL_CALL log_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysOES)(n, arrays);
    Driver("glGenVertexArraysOES","(", n, ", ", boost::print::optional(arrays,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glIsVertexArrayOES(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsVertexArrayOES)(array);
    Driver("glIsVertexArrayOES","(", array, ")", " returned ", toString(ret));
    return ret;
}

// GL_PGI_misc_hints

static void REGAL_CALL log_glHintPGI(GLenum target, GLint mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glHintPGI)(target, mode);
    Driver("glHintPGI","(", toString(target), ", ", mode, ")");
}

// GL_QCOM_alpha_test

static void REGAL_CALL log_glAlphaFuncQCOM(GLenum func, GLclampf ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFuncQCOM)(func, ref);
    Driver("glAlphaFuncQCOM","(", toString(func), ", ", ref, ")");
}

// GL_QCOM_driver_control

static void REGAL_CALL log_glDisableDriverControlQCOM(GLuint driverControl)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDisableDriverControlQCOM)(driverControl);
    Driver("glDisableDriverControlQCOM","(", driverControl, ")");
}

static void REGAL_CALL log_glEnableDriverControlQCOM(GLuint driverControl)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEnableDriverControlQCOM)(driverControl);
    Driver("glEnableDriverControlQCOM","(", driverControl, ")");
}

static void REGAL_CALL log_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlStringQCOM)(driverControl, bufSize, length, driverControlString);
    Driver("glGetDriverControlStringQCOM","(", driverControl, ", ", bufSize, ", ", boost::print::optional(length,Logging::pointers), ", ", boost::print::quote(driverControlString,'"'), ")");
}

static void REGAL_CALL log_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlsQCOM)(num, size, driverControls);
    Driver("glGetDriverControlsQCOM","(", boost::print::optional(num,Logging::pointers), ", ", size, ", ", boost::print::optional(driverControls,Logging::pointers), ")");
}

// GL_QCOM_extended_get

static void REGAL_CALL log_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetBufferPointervQCOM)(target, params);
    Driver("glExtGetBufferPointervQCOM","(", toString(target), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetBuffersQCOM)(buffers, maxBuffers, numBuffers);
    Driver("glExtGetBuffersQCOM","(", boost::print::optional(buffers,Logging::pointers), ", ", maxBuffers, ", ", boost::print::optional(numBuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetFramebuffersQCOM)(framebuffers, maxFramebuffers, numFramebuffers);
    Driver("glExtGetFramebuffersQCOM","(", boost::print::optional(framebuffers,Logging::pointers), ", ", maxFramebuffers, ", ", boost::print::optional(numFramebuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetRenderbuffersQCOM)(renderbuffers, maxRenderbuffers, numRenderbuffers);
    Driver("glExtGetRenderbuffersQCOM","(", boost::print::optional(renderbuffers,Logging::pointers), ", ", maxRenderbuffers, ", ", boost::print::optional(numRenderbuffers,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexLevelParameterivQCOM)(texture, face, level, pname, params);
    Driver("glExtGetTexLevelParameterivQCOM","(", texture, ", ", toString(face), ", ", level, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexSubImageQCOM)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
    Driver("glExtGetTexSubImageQCOM","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", width, ", ", height, ", ", depth, ", ", toString(format), ")");
}

static void REGAL_CALL log_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexturesQCOM)(textures, maxTextures, numTextures);
    Driver("glExtGetTexturesQCOM","(", boost::print::optional(textures,Logging::pointers), ", ", maxTextures, ", ", boost::print::optional(numTextures,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtTexObjectStateOverrideiQCOM)(target, pname, param);
    Driver("glExtTexObjectStateOverrideiQCOM","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

// GL_QCOM_extended_get2

static void REGAL_CALL log_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramBinarySourceQCOM)(program, shadertype, source, length);
    Driver("glExtGetProgramBinarySourceQCOM","(", program, ", ", toString(shadertype), ", ", boost::print::quote(source,'"'), ", ", boost::print::optional(length,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramsQCOM)(programs, maxPrograms, numPrograms);
    Driver("glExtGetProgramsQCOM","(", boost::print::optional(programs,Logging::pointers), ", ", maxPrograms, ", ", boost::print::optional(numPrograms,Logging::pointers), ")");
}

static void REGAL_CALL log_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glExtGetShadersQCOM)(shaders, maxShaders, numShaders);
    Driver("glExtGetShadersQCOM","(", boost::print::optional(shaders,Logging::pointers), ", ", maxShaders, ", ", boost::print::optional(numShaders,Logging::pointers), ")");
}

static GLboolean REGAL_CALL log_glExtIsProgramBinaryQCOM(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glExtIsProgramBinaryQCOM)(program);
    Driver("glExtIsProgramBinaryQCOM","(", program, ")", " returned ", toString(ret));
    return ret;
}

// GL_QCOM_tiled_rendering

static void REGAL_CALL log_glEndTilingQCOM(GLbitfield preserveMask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glEndTilingQCOM)(preserveMask);
    Driver("glEndTilingQCOM","(", preserveMask, ")");
}

static void REGAL_CALL log_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStartTilingQCOM)(x, y, width, height, preserveMask);
    Driver("glStartTilingQCOM","(", x, ", ", y, ", ", width, ", ", height, ", ", preserveMask, ")");
}

// GL_REGAL_ES1_0_compatibility

static void REGAL_CALL log_glAlphaFuncx(GLenum func, GLclampx ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAlphaFuncx)(func, ref);
    Driver("glAlphaFuncx","(", toString(func), ", ", ref, ")");
}

static void REGAL_CALL log_glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearColorx)(red, green, blue, alpha);
    Driver("glClearColorx","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glClearDepthx(GLclampx depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClearDepthx)(depth);
    Driver("glClearDepthx","(", depth, ")");
}

static void REGAL_CALL log_glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4x)(red, green, blue, alpha);
    Driver("glColor4x","(", red, ", ", green, ", ", blue, ", ", alpha, ")");
}

static void REGAL_CALL log_glDepthRangex(GLclampx zNear, GLclampx zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDepthRangex)(zNear, zFar);
    Driver("glDepthRangex","(", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glFogx(GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogx)(pname, param);
    Driver("glFogx","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFogxv(GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogxv)(pname, params);
    Driver("glFogxv","(", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrustumf)(left, right, bottom, top, zNear, zFar);
    Driver("glFrustumf","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrustumx)(left, right, bottom, top, zNear, zFar);
    Driver("glFrustumx","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glLightModelx(GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModelx)(pname, param);
    Driver("glLightModelx","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightModelxv(GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightModelxv)(pname, params);
    Driver("glLightModelxv","(", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glLightx(GLenum light, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightx)(light, pname, param);
    Driver("glLightx","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightxv)(light, pname, params);
    Driver("glLightxv","(", toString(light), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glLineWidthx(GLfixed width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLineWidthx)(width);
    Driver("glLineWidthx","(", width, ")");
}

static void REGAL_CALL log_glLoadMatrixx(const GLfixed *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixx)(m);
    Driver("glLoadMatrixx","(", m, ")");
}

static void REGAL_CALL log_glMaterialx(GLenum face, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMaterialx)(face, pname, param);
    Driver("glMaterialx","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMaterialxv)(face, pname, params);
    Driver("glMaterialxv","(", toString(face), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glMultMatrixx(const GLfixed *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixx)(m);
    Driver("glMultMatrixx","(", m, ")");
}

static void REGAL_CALL log_glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4x)(target, s, t, r, q);
    Driver("glMultiTexCoord4x","(", toString(target), ", ", s, ", ", t, ", ", r, ", ", q, ")");
}

static void REGAL_CALL log_glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3x)(nx, ny, nz);
    Driver("glNormal3x","(", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glOrthof)(left, right, bottom, top, zNear, zFar);
    Driver("glOrthof","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glOrthox)(left, right, bottom, top, zNear, zFar);
    Driver("glOrthox","(", left, ", ", right, ", ", bottom, ", ", top, ", ", zNear, ", ", zFar, ")");
}

static void REGAL_CALL log_glPointSizex(GLfixed size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointSizex)(size);
    Driver("glPointSizex","(", size, ")");
}

static void REGAL_CALL log_glPolygonOffsetx(GLfixed factor, GLfixed units)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffsetx)(factor, units);
    Driver("glPolygonOffsetx","(", factor, ", ", units, ")");
}

static void REGAL_CALL log_glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glRotatex)(angle, x, y, z);
    Driver("glRotatex","(", angle, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glSampleCoveragex(GLclampx value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleCoveragex)(value, invert);
    Driver("glSampleCoveragex","(", value, ", ", toString(invert), ")");
}

static void REGAL_CALL log_glScalex(GLfixed x, GLfixed y, GLfixed z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glScalex)(x, y, z);
    Driver("glScalex","(", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnvx)(target, pname, param);
    Driver("glTexEnvx","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexEnvxv)(target, pname, params);
    Driver("glTexEnvxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterx)(target, pname, param);
    Driver("glTexParameterx","(", toString(target), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTranslatex)(x, y, z);
    Driver("glTranslatex","(", x, ", ", y, ", ", z, ")");
}

// GL_REGAL_ES1_1_compatibility

static void REGAL_CALL log_glClipPlanef(GLenum plane, const GLfloat *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClipPlanef)(plane, equation);
    Driver("glClipPlanef","(", toString(plane), ", ", boost::print::optional(equation,Logging::pointers), ")");
}

static void REGAL_CALL log_glClipPlanex(GLenum plane, const GLfixed *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glClipPlanex)(plane, equation);
    Driver("glClipPlanex","(", toString(plane), ", ", equation, ")");
}

static void REGAL_CALL log_glGetClipPlanef(GLenum pname, GLfloat *eqn)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanef)(pname, eqn);
    Driver("glGetClipPlanef","(", toString(pname), ", ", boost::print::optional(eqn,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetClipPlanex(GLenum pname, GLfixed *eqn)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanex)(pname, eqn);
    Driver("glGetClipPlanex","(", toString(pname), ", ", eqn, ")");
}

static void REGAL_CALL log_glGetFixedv(GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFixedv)(pname, params);
    Driver("glGetFixedv","(", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetLightxv)(light, pname, params);
    Driver("glGetLightxv","(", toString(light), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialxv)(face, pname, params);
    Driver("glGetMaterialxv","(", toString(face), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glGetTexEnvxv(GLenum env, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnvxv)(env, pname, params);
    Driver("glGetTexEnvxv","(", toString(env), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterxv)(target, pname, params);
    Driver("glGetTexParameterxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glPointParameterx(GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterx)(pname, param);
    Driver("glPointParameterx","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterxv(GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterxv)(pname, params);
    Driver("glPointParameterxv","(", toString(pname), ", ", params, ")");
}

static void REGAL_CALL log_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointSizePointerOES)(type, stride, pointer);
    Driver("glPointSizePointerOES","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexParameterxv)(target, pname, params);
    Driver("glTexParameterxv","(", toString(target), ", ", toString(pname), ", ", params, ")");
}

// GL_REGAL_log

static void REGAL_CALL log_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLogMessageCallbackREGAL)(callback);
    Driver("glLogMessageCallbackREGAL","()");
}

// GL_SGIS_detail_texture

static void REGAL_CALL log_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDetailTexFuncSGIS)(target, n, points);
    Driver("glDetailTexFuncSGIS","(", toString(target), ", ", n, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetDetailTexFuncSGIS)(target, points);
    Driver("glGetDetailTexFuncSGIS","(", toString(target), ", ", boost::print::optional(points,Logging::pointers), ")");
}

// GL_SGIS_fog_function

static void REGAL_CALL log_glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFogFuncSGIS)(n, points);
    Driver("glFogFuncSGIS","(", n, ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFogFuncSGIS(GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFogFuncSGIS)(points);
    Driver("glGetFogFuncSGIS","(", boost::print::optional(points,Logging::pointers), ")");
}

// GL_SGIS_multisample

static void REGAL_CALL log_glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskSGIS)(value, invert);
    Driver("glSampleMaskSGIS","(", value, ", ", toString(invert), ")");
}

static void REGAL_CALL log_glSamplePatternSGIS(GLenum pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternSGIS)(pattern);
    Driver("glSamplePatternSGIS","(", toString(pattern), ")");
}

// GL_SGIS_pixel_texture

static void REGAL_CALL log_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterfvSGIS)(pname, params);
    Driver("glGetPixelTexGenParameterfvSGIS","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterivSGIS)(pname, params);
    Driver("glGetPixelTexGenParameterivSGIS","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfSGIS)(pname, param);
    Driver("glPixelTexGenParameterfSGIS","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfvSGIS)(pname, params);
    Driver("glPixelTexGenParameterfvSGIS","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameteriSGIS)(pname, param);
    Driver("glPixelTexGenParameteriSGIS","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterivSGIS)(pname, params);
    Driver("glPixelTexGenParameterivSGIS","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_SGIS_point_parameters

static void REGAL_CALL log_glPointParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfSGIS)(pname, param);
    Driver("glPointParameterfSGIS","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvSGIS)(pname, params);
    Driver("glPointParameterfvSGIS","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_SGIS_sharpen_texture

static void REGAL_CALL log_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetSharpenTexFuncSGIS)(target, points);
    Driver("glGetSharpenTexFuncSGIS","(", toString(target), ", ", boost::print::optional(points,Logging::pointers), ")");
}

static void REGAL_CALL log_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSharpenTexFuncSGIS)(target, n, points);
    Driver("glSharpenTexFuncSGIS","(", toString(target), ", ", n, ", ", boost::print::optional(points,Logging::pointers), ")");
}

// GL_SGIS_texture4D

static void REGAL_CALL log_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
    Driver("glTexImage4DSGIS","(", toString(target), ", ", level, ", ", internalFormatToString(internalformat), ", ", width, ", ", height, ", ", depth, ", ", size4d, ", ", border, ", ", toString(format), ")");
}

static void REGAL_CALL log_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
    Driver("glTexSubImage4DSGIS","(", toString(target), ", ", level, ", ", xoffset, ", ", yoffset, ", ", zoffset, ", ", woffset, ", ", width, ", ", height, ", ", depth, ")");
}

// GL_SGIS_texture_color_mask

static void REGAL_CALL log_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureColorMaskSGIS)(red, green, blue, alpha);
    Driver("glTextureColorMaskSGIS","(", toString(red), ", ", toString(green), ", ", toString(blue), ", ", toString(alpha), ")");
}

// GL_SGIS_texture_filter4

static void REGAL_CALL log_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetTexFilterFuncSGIS)(target, filter, weights);
    Driver("glGetTexFilterFuncSGIS","(", toString(target), ", ", toString(filter), ", ", boost::print::optional(weights,Logging::pointers), ")");
}

static void REGAL_CALL log_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexFilterFuncSGIS)(target, filter, n, weights);
    Driver("glTexFilterFuncSGIS","(", toString(target), ", ", toString(filter), ", ", n, ", ", boost::print::optional(weights,Logging::pointers), ")");
}

// GL_SGIX_async

static void REGAL_CALL log_glAsyncMarkerSGIX(GLuint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAsyncMarkerSGIX)(marker);
    Driver("glAsyncMarkerSGIX","(", marker, ")");
}

static void REGAL_CALL log_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeleteAsyncMarkersSGIX)(marker, range);
    Driver("glDeleteAsyncMarkersSGIX","(", marker, ", ", range, ")");
}

static GLint REGAL_CALL log_glFinishAsyncSGIX(GLuint *markerp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glFinishAsyncSGIX)(markerp);
    Driver("glFinishAsyncSGIX","(", boost::print::array(markerp,1), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_glGenAsyncMarkersSGIX(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->glGenAsyncMarkersSGIX)(range);
    Driver("glGenAsyncMarkersSGIX","(", range, ")", " returned ", ret);
    return ret;
}

static GLboolean REGAL_CALL log_glIsAsyncMarkerSGIX(GLuint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glIsAsyncMarkerSGIX)(marker);
    Driver("glIsAsyncMarkerSGIX","(", marker, ")", " returned ", toString(ret));
    return ret;
}

static GLint REGAL_CALL log_glPollAsyncSGIX(GLuint *markerp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glPollAsyncSGIX)(markerp);
    Driver("glPollAsyncSGIX","(", boost::print::array(markerp,1), ")", " returned ", ret);
    return ret;
}

// GL_SGIX_flush_raster

static void REGAL_CALL log_glFlushRasterSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFlushRasterSGIX)();
    Driver("glFlushRasterSGIX","()");
}

// GL_SGIX_fog_texture

static void REGAL_CALL log_glTextureFogSGIX(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTextureFogSGIX)(pname);
    Driver("glTextureFogSGIX","(", toString(pname), ")");
}

// GL_SGIX_fragment_lighting

static void REGAL_CALL log_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialSGIX)(face, mode);
    Driver("glFragmentColorMaterialSGIX","(", toString(face), ", ", toString(mode), ")");
}

static void REGAL_CALL log_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfSGIX)(pname, param);
    Driver("glFragmentLightModelfSGIX","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvSGIX)(pname, params);
    Driver("glFragmentLightModelfvSGIX","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliSGIX)(pname, param);
    Driver("glFragmentLightModeliSGIX","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivSGIX)(pname, params);
    Driver("glFragmentLightModelivSGIX","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfSGIX)(light, pname, param);
    Driver("glFragmentLightfSGIX","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvSGIX)(light, pname, params);
    Driver("glFragmentLightfvSGIX","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiSGIX)(light, pname, param);
    Driver("glFragmentLightiSGIX","(", toString(light), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivSGIX)(light, pname, params);
    Driver("glFragmentLightivSGIX","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfSGIX)(face, pname, param);
    Driver("glFragmentMaterialfSGIX","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvSGIX)(face, pname, params);
    Driver("glFragmentMaterialfvSGIX","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiSGIX)(face, pname, param);
    Driver("glFragmentMaterialiSGIX","(", toString(face), ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivSGIX)(face, pname, params);
    Driver("glFragmentMaterialivSGIX","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvSGIX)(light, pname, params);
    Driver("glGetFragmentLightfvSGIX","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivSGIX)(light, pname, params);
    Driver("glGetFragmentLightivSGIX","(", toString(light), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvSGIX)(face, pname, params);
    Driver("glGetFragmentMaterialfvSGIX","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivSGIX)(face, pname, params);
    Driver("glGetFragmentMaterialivSGIX","(", toString(face), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glLightEnviSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLightEnviSGIX)(pname, param);
    Driver("glLightEnviSGIX","(", toString(pname), ", ", param, ")");
}

// GL_SGIX_framezoom

static void REGAL_CALL log_glFrameZoomSGIX(GLint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFrameZoomSGIX)(factor);
    Driver("glFrameZoomSGIX","(", factor, ")");
}

// GL_SGIX_igloo_interface

static void REGAL_CALL log_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glIglooInterfaceSGIX)(pname, params);
    Driver("glIglooInterfaceSGIX","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_SGIX_instruments

static GLint REGAL_CALL log_glGetInstrumentsSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glGetInstrumentsSGIX)();
    Driver("glGetInstrumentsSGIX","()", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glInstrumentsBufferSGIX)(size, buffer);
    Driver("glInstrumentsBufferSGIX","(", size, ", ", boost::print::optional(buffer,Logging::pointers), ")");
}

static GLint REGAL_CALL log_glPollInstrumentsSGIX(GLint *marker_p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    GLint  ret = _next->call(&_next->glPollInstrumentsSGIX)(marker_p);
    Driver("glPollInstrumentsSGIX","(", boost::print::array(marker_p,1), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glReadInstrumentsSGIX(GLint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadInstrumentsSGIX)(marker);
    Driver("glReadInstrumentsSGIX","(", marker, ")");
}

static void REGAL_CALL log_glStartInstrumentsSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStartInstrumentsSGIX)();
    Driver("glStartInstrumentsSGIX","()");
}

static void REGAL_CALL log_glStopInstrumentsSGIX(GLint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glStopInstrumentsSGIX)(marker);
    Driver("glStopInstrumentsSGIX","(", marker, ")");
}

// GL_SGIX_list_priority

static void REGAL_CALL log_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterfvSGIX)(list, pname, params);
    Driver("glGetListParameterfvSGIX","(", list, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterivSGIX)(list, pname, params);
    Driver("glGetListParameterivSGIX","(", list, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glListParameterfSGIX)(list, pname, param);
    Driver("glListParameterfSGIX","(", list, ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glListParameterfvSGIX)(list, pname, params);
    Driver("glListParameterfvSGIX","(", list, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glListParameteriSGIX)(list, pname, param);
    Driver("glListParameteriSGIX","(", list, ", ", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glListParameterivSGIX)(list, pname, params);
    Driver("glListParameterivSGIX","(", list, ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_SGIX_pixel_texture

static void REGAL_CALL log_glPixelTexGenSGIX(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenSGIX)(mode);
    Driver("glPixelTexGenSGIX","(", toString(mode), ")");
}

// GL_SGIX_polynomial_ffd

static void REGAL_CALL log_glDeformSGIX(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeformSGIX)(mask);
    Driver("glDeformSGIX","(", mask, ")");
}

static void REGAL_CALL log_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    Driver("glDeformationMap3dSGIX","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
}

static void REGAL_CALL log_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    Driver("glDeformationMap3fSGIX","(", toString(target), ", ", u1, ", ", u2, ", ", ustride, ", ", uorder, ", ", v1, ", ", v2, ", ", vstride, ", ", vorder, ")");
}

static void REGAL_CALL log_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentityDeformationMapSGIX)(mask);
    Driver("glLoadIdentityDeformationMapSGIX","(", mask, ")");
}

// GL_SGIX_reference_plane

static void REGAL_CALL log_glReferencePlaneSGIX(const GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReferencePlaneSGIX)(equation);
    Driver("glReferencePlaneSGIX","(", boost::print::array(equation,4), ")");
}

// GL_SGIX_sprite

static void REGAL_CALL log_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfSGIX)(pname, param);
    Driver("glSpriteParameterfSGIX","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfvSGIX)(pname, params);
    Driver("glSpriteParameterfvSGIX","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameteriSGIX)(pname, param);
    Driver("glSpriteParameteriSGIX","(", toString(pname), ", ", param, ")");
}

static void REGAL_CALL log_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterivSGIX)(pname, params);
    Driver("glSpriteParameterivSGIX","(", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

// GL_SGIX_tag_sample_buffer

static void REGAL_CALL log_glTagSampleBufferSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTagSampleBufferSGIX)();
    Driver("glTagSampleBufferSGIX","()");
}

// GL_SGI_color_table

static void REGAL_CALL log_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfvSGI)(target, pname, params);
    Driver("glColorTableParameterfvSGI","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterivSGI)(target, pname, params);
    Driver("glColorTableParameterivSGI","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColorTableSGI)(target, internalformat, width, format, type, table);
    Driver("glColorTableSGI","(", toString(target), ", ", toString(internalformat), ", ", width, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

static void REGAL_CALL log_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTableSGI)(target, internalformat, x, y, width);
    Driver("glCopyColorTableSGI","(", toString(target), ", ", toString(internalformat), ", ", x, ", ", y, ", ", width, ")");
}

static void REGAL_CALL log_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvSGI)(target, pname, params);
    Driver("glGetColorTableParameterfvSGI","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivSGI)(target, pname, params);
    Driver("glGetColorTableParameterivSGI","(", toString(target), ", ", toString(pname), ", ", boost::print::optional(params,Logging::pointers), ")");
}

static void REGAL_CALL log_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableSGI)(target, format, type, table);
    Driver("glGetColorTableSGI","(", toString(target), ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(table,Logging::pointers), ")");
}

// GL_SUNX_constant_data

static void REGAL_CALL log_glFinishTextureSUNX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glFinishTextureSUNX)();
    Driver("glFinishTextureSUNX","()");
}

// GL_SUN_global_alpha

static void REGAL_CALL log_glGlobalAlphaFactorbSUN(GLbyte factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorbSUN)(factor);
    Driver("glGlobalAlphaFactorbSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactordSUN(GLdouble factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactordSUN)(factor);
    Driver("glGlobalAlphaFactordSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactorfSUN(GLfloat factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorfSUN)(factor);
    Driver("glGlobalAlphaFactorfSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactoriSUN(GLint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoriSUN)(factor);
    Driver("glGlobalAlphaFactoriSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactorsSUN(GLshort factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorsSUN)(factor);
    Driver("glGlobalAlphaFactorsSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactorubSUN(GLubyte factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorubSUN)(factor);
    Driver("glGlobalAlphaFactorubSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactoruiSUN(GLuint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoruiSUN)(factor);
    Driver("glGlobalAlphaFactoruiSUN","(", factor, ")");
}

static void REGAL_CALL log_glGlobalAlphaFactorusSUN(GLushort factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorusSUN)(factor);
    Driver("glGlobalAlphaFactorusSUN","(", factor, ")");
}

// GL_SUN_mesh_array

static void REGAL_CALL log_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glDrawMeshArraysSUN)(mode, first, count, width);
    Driver("glDrawMeshArraysSUN","(", toString(mode), ", ", first, ", ", count, ", ", width, ")");
}

// GL_SUN_read_video_pixels

static void REGAL_CALL log_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReadVideoPixelsSUN)(x, y, width, height, format, type, pixels);
    Driver("glReadVideoPixelsSUN","(", x, ", ", y, ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", boost::print::optional(pixels,Logging::pointers), ")");
}

// GL_SUN_triangle_list

static void REGAL_CALL log_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodePointerSUN)(type, stride, pointer);
    Driver("glReplacementCodePointerSUN","(", toString(type), ", ", stride, ", ", boost::print::optional(pointer,Logging::pointers), ")");
}

static void REGAL_CALL log_glReplacementCodeubSUN(GLubyte code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubSUN)(code);
    Driver("glReplacementCodeubSUN","(", code, ")");
}

static void REGAL_CALL log_glReplacementCodeubvSUN(const GLubyte *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubvSUN)(code);
    Driver("glReplacementCodeubvSUN","(", boost::print::optional(code,Logging::pointers), ")");
}

static void REGAL_CALL log_glReplacementCodeuiSUN(GLuint code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiSUN)(code);
    Driver("glReplacementCodeuiSUN","(", code, ")");
}

static void REGAL_CALL log_glReplacementCodeuivSUN(const GLuint *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuivSUN)(code);
    Driver("glReplacementCodeuivSUN","(", boost::print::optional(code,Logging::pointers), ")");
}

static void REGAL_CALL log_glReplacementCodeusSUN(GLushort code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusSUN)(code);
    Driver("glReplacementCodeusSUN","(", code, ")");
}

static void REGAL_CALL log_glReplacementCodeusvSUN(const GLushort *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusvSUN)(code);
    Driver("glReplacementCodeusvSUN","(", boost::print::optional(code,Logging::pointers), ")");
}

// GL_SUN_vertex

static void REGAL_CALL log_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fSUN)(r, g, b, x, y, z);
    Driver("glColor3fVertex3fSUN","(", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fvSUN)(c, v);
    Driver("glColor3fVertex3fvSUN","(", boost::print::array(c,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);
    Driver("glColor4fNormal3fVertex3fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fvSUN)(c, n, v);
    Driver("glColor4fNormal3fVertex3fvSUN","(", boost::print::array(c,4), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fSUN)(r, g, b, a, x, y);
    Driver("glColor4ubVertex2fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ")");
}

static void REGAL_CALL log_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fvSUN)(c, v);
    Driver("glColor4ubVertex2fvSUN","(", boost::print::array(c,4), ", ", boost::print::array(v,2), ")");
}

static void REGAL_CALL log_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);
    Driver("glColor4ubVertex3fSUN","(", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fvSUN)(c, v);
    Driver("glColor4ubVertex3fvSUN","(", boost::print::array(c,4), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);
    Driver("glNormal3fVertex3fSUN","(", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fvSUN)(n, v);
    Driver("glNormal3fVertex3fvSUN","(", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);
    Driver("glReplacementCodeuiColor3fVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);
    Driver("glReplacementCodeuiColor3fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(c,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);
    Driver("glReplacementCodeuiColor4fNormal3fVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ", ", x, ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);
    Driver("glReplacementCodeuiColor4fNormal3fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(c,4), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);
    Driver("glReplacementCodeuiColor4ubVertex3fSUN","(", rc, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);
    Driver("glReplacementCodeuiColor4ubVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(c,4), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);
    Driver("glReplacementCodeuiNormal3fVertex3fSUN","(", rc, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);
    Driver("glReplacementCodeuiNormal3fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
    Driver("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);
    Driver("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(tc,2), ", ", boost::print::array(c,4), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);
    Driver("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);
    Driver("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(tc,2), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);
    Driver("glReplacementCodeuiTexCoord2fVertex3fSUN","(", rc, ", ", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);
    Driver("glReplacementCodeuiTexCoord2fVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(tc,2), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fSUN)(rc, x, y, z);
    Driver("glReplacementCodeuiVertex3fSUN","(", rc, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fvSUN)(rc, v);
    Driver("glReplacementCodeuiVertex3fvSUN","(", boost::print::array(rc,1), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);
    Driver("glTexCoord2fColor3fVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);
    Driver("glTexCoord2fColor3fVertex3fvSUN","(", boost::print::array(tc,2), ", ", boost::print::array(c,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
    Driver("glTexCoord2fColor4fNormal3fVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ", ", ny, ", ", nz, ")");
}

static void REGAL_CALL log_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);
    Driver("glTexCoord2fColor4fNormal3fVertex3fvSUN","(", boost::print::array(tc,2), ", ", boost::print::array(c,4), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);
    Driver("glTexCoord2fColor4ubVertex3fSUN","(", s, ", ", t, ", ", r, ", ", g, ", ", b, ", ", a, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);
    Driver("glTexCoord2fColor4ubVertex3fvSUN","(", boost::print::array(tc,2), ", ", boost::print::array(c,4), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);
    Driver("glTexCoord2fNormal3fVertex3fSUN","(", s, ", ", t, ", ", nx, ", ", ny, ", ", nz, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);
    Driver("glTexCoord2fNormal3fVertex3fvSUN","(", boost::print::array(tc,2), ", ", boost::print::array(n,3), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fSUN)(s, t, x, y, z);
    Driver("glTexCoord2fVertex3fSUN","(", s, ", ", t, ", ", x, ", ", y, ", ", z, ")");
}

static void REGAL_CALL log_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fvSUN)(tc, v);
    Driver("glTexCoord2fVertex3fvSUN","(", boost::print::array(tc,2), ", ", boost::print::array(v,3), ")");
}

static void REGAL_CALL log_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
    Driver("glTexCoord4fColor4fNormal3fVertex4fSUN","(", s, ", ", t, ", ", p, ", ", q, ", ", r, ", ", g, ", ", b, ", ", a, ", ", nx, ")");
}

static void REGAL_CALL log_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);
    Driver("glTexCoord4fColor4fNormal3fVertex4fvSUN","(", boost::print::array(tc,4), ", ", boost::print::array(c,4), ", ", boost::print::array(n,3), ", ", boost::print::array(v,4), ")");
}

static void REGAL_CALL log_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);
    Driver("glTexCoord4fVertex4fSUN","(", s, ", ", t, ", ", p, ", ", q, ", ", x, ", ", y, ", ", z, ", ", w, ")");
}

static void REGAL_CALL log_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fvSUN)(tc, v);
    Driver("glTexCoord4fVertex4fvSUN","(", boost::print::array(tc,4), ", ", boost::print::array(v,4), ")");
}

// GL_WIN_swap_hint

static void REGAL_CALL log_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTableGL *_next = _context->dispatcher.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glAddSwapHintRectWIN)(x, y, width, height);
    Driver("glAddSwapHintRectWIN","(", x, ", ", y, ", ", width, ", ", height, ")");
}

#if REGAL_SYS_WGL

// WGL_3DL_stereo_control

static BOOL REGAL_CALL log_wglSetStereoEmitterState3DL(HDC hDC, UINT uState)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetStereoEmitterState3DL)(hDC, uState);
    Driver("wglSetStereoEmitterState3DL","(", boost::print::optional(hDC,Logging::pointers), ", ", uState, ")", " returned ", ret);
    return ret;
}

// WGL_AMD_gpu_association

static VOID REGAL_CALL log_wglBlitContextFramebufferAMD(HGLRC dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->wglBlitContextFramebufferAMD)(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("wglBlitContextFramebufferAMD","(", boost::print::optional(dstCtx,Logging::pointers), ", ", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ")");
}

static HGLRC REGAL_CALL log_wglCreateAssociatedContextAMD(UINT id)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglCreateAssociatedContextAMD)(id);
    Driver("wglCreateAssociatedContextAMD","(", id, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static HGLRC REGAL_CALL log_wglCreateAssociatedContextAttribsAMD(UINT id, HGLRC hShareContext, const int *attribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglCreateAssociatedContextAttribsAMD)(id, hShareContext, attribList);
    Driver("wglCreateAssociatedContextAttribsAMD","(", id, ", ", boost::print::optional(hShareContext,Logging::pointers), ", ", boost::print::optional(attribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDeleteAssociatedContextAMD(HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDeleteAssociatedContextAMD)(hglrc);
    Driver("wglDeleteAssociatedContextAMD","(", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static UINT REGAL_CALL log_wglGetContextGPUIDAMD(HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    UINT  ret = _next->call(&_next->wglGetContextGPUIDAMD)(hglrc);
    Driver("wglGetContextGPUIDAMD","(", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static HGLRC REGAL_CALL log_wglGetCurrentAssociatedContextAMD(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglGetCurrentAssociatedContextAMD)();
    Driver("wglGetCurrentAssociatedContextAMD","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static UINT REGAL_CALL log_wglGetGPUIDsAMD(UINT maxCount, UINT *ids)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    UINT  ret = _next->call(&_next->wglGetGPUIDsAMD)(maxCount, ids);
    Driver("wglGetGPUIDsAMD","(", maxCount, ", ", boost::print::array(ids,maxCount), ")", " returned ", ret);
    return ret;
}

static INT REGAL_CALL log_wglGetGPUInfoAMD(UINT id, int property, GLenum dataType, UINT size, void *data)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    INT  ret = _next->call(&_next->wglGetGPUInfoAMD)(id, property, dataType, size, data);
    Driver("wglGetGPUInfoAMD","(", id, ", ", property, ", ", toString(dataType), ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglMakeAssociatedContextCurrentAMD(HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglMakeAssociatedContextCurrentAMD)(hglrc);
    Driver("wglMakeAssociatedContextCurrentAMD","(", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_ARB_buffer_region

static HANDLE REGAL_CALL log_wglCreateBufferRegionARB(HDC hDC, int iLayerPlane, UINT uType)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HANDLE  ret = _next->call(&_next->wglCreateBufferRegionARB)(hDC, iLayerPlane, uType);
    Driver("wglCreateBufferRegionARB","(", boost::print::optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", uType, ")", " returned ", ret);
    return ret;
}

static VOID REGAL_CALL log_wglDeleteBufferRegionARB(HANDLE hRegion)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->wglDeleteBufferRegionARB)(hRegion);
    Driver("wglDeleteBufferRegionARB","(", hRegion, ")");
}

static BOOL REGAL_CALL log_wglRestoreBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglRestoreBufferRegionARB)(hRegion, x, y, width, height, xSrc, ySrc);
    Driver("wglRestoreBufferRegionARB","(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ", ", xSrc, ", ", ySrc, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSaveBufferRegionARB(HANDLE hRegion, int x, int y, int width, int height)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSaveBufferRegionARB)(hRegion, x, y, width, height);
    Driver("wglSaveBufferRegionARB","(", hRegion, ", ", x, ", ", y, ", ", width, ", ", height, ")", " returned ", ret);
    return ret;
}

// WGL_ARB_create_context

static HGLRC REGAL_CALL log_wglCreateContextAttribsARB(HDC hDC, HGLRC hShareContext, const int *piAttribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglCreateContextAttribsARB)(hDC, hShareContext, piAttribList);
    Driver("wglCreateContextAttribsARB","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(hShareContext,Logging::pointers), ", ", boost::print::optional(piAttribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// WGL_ARB_extensions_string

static const char *REGAL_CALL log_wglGetExtensionsStringARB(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->wglGetExtensionsStringARB)(hDC);
    Driver("wglGetExtensionsStringARB","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

// WGL_ARB_make_current_read

static HDC REGAL_CALL log_wglGetCurrentReadDCARB(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglGetCurrentReadDCARB)();
    Driver("wglGetCurrentReadDCARB","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglMakeContextCurrentARB(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglMakeContextCurrentARB)(hDrawDC, hReadDC, hglrc);
    Driver("wglMakeContextCurrentARB","(", boost::print::optional(hDrawDC,Logging::pointers), ", ", boost::print::optional(hReadDC,Logging::pointers), ", ", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_ARB_pbuffer

static HPBUFFERARB REGAL_CALL log_wglCreatePbufferARB(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HPBUFFERARB  ret = _next->call(&_next->wglCreatePbufferARB)(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    Driver("wglCreatePbufferARB","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", boost::print::optional(piAttribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDestroyPbufferARB(HPBUFFERARB hPbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDestroyPbufferARB)(hPbuffer);
    Driver("wglDestroyPbufferARB","(", boost::print::optional(hPbuffer,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static HDC REGAL_CALL log_wglGetPbufferDCARB(HPBUFFERARB hPbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglGetPbufferDCARB)(hPbuffer);
    Driver("wglGetPbufferDCARB","(", boost::print::optional(hPbuffer,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglQueryPbufferARB(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryPbufferARB)(hPbuffer, iAttribute, piValue);
    Driver("wglQueryPbufferARB","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iAttribute, ", ", boost::print::array(piValue,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglReleasePbufferDCARB(HPBUFFERARB hPbuffer, HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglReleasePbufferDCARB)(hPbuffer, hDC);
    Driver("wglReleasePbufferDCARB","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_ARB_pixel_format

static BOOL REGAL_CALL log_wglChoosePixelFormatARB(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglChoosePixelFormatARB)(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    Driver("wglChoosePixelFormatARB","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(piAttribIList,Logging::pointers), ", ", pfAttribFList, ", ", nMaxFormats, ", ", boost::print::optional(piFormats,Logging::pointers), ", ", boost::print::array(nNumFormats,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetPixelFormatAttribfvARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetPixelFormatAttribfvARB)(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    Driver("wglGetPixelFormatAttribfvARB","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", boost::print::array(piAttributes,nAttributes), ", ", boost::print::array(pfValues,nAttributes), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetPixelFormatAttribivARB(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetPixelFormatAttribivARB)(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    Driver("wglGetPixelFormatAttribivARB","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", boost::print::array(piAttributes,nAttributes), ", ", boost::print::array(piValues,nAttributes), ")", " returned ", ret);
    return ret;
}

// WGL_ARB_render_texture

static BOOL REGAL_CALL log_wglBindTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBindTexImageARB)(hPbuffer, iBuffer);
    Driver("wglBindTexImageARB","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iBuffer, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglReleaseTexImageARB(HPBUFFERARB hPbuffer, int iBuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglReleaseTexImageARB)(hPbuffer, iBuffer);
    Driver("wglReleaseTexImageARB","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iBuffer, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSetPbufferAttribARB(HPBUFFERARB hPbuffer, const int *piAttribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetPbufferAttribARB)(hPbuffer, piAttribList);
    Driver("wglSetPbufferAttribARB","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", boost::print::optional(piAttribList,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_EXT_display_color_table

static GLboolean REGAL_CALL log_wglBindDisplayColorTableEXT(GLushort id)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->wglBindDisplayColorTableEXT)(id);
    Driver("wglBindDisplayColorTableEXT","(", id, ")", " returned ", toString(ret));
    return ret;
}

static GLboolean REGAL_CALL log_wglCreateDisplayColorTableEXT(GLushort id)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->wglCreateDisplayColorTableEXT)(id);
    Driver("wglCreateDisplayColorTableEXT","(", id, ")", " returned ", toString(ret));
    return ret;
}

static VOID REGAL_CALL log_wglDestroyDisplayColorTableEXT(GLushort id)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->wglDestroyDisplayColorTableEXT)(id);
    Driver("wglDestroyDisplayColorTableEXT","(", id, ")");
}

static GLboolean REGAL_CALL log_wglLoadDisplayColorTableEXT(const GLushort *table, GLuint length)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->wglLoadDisplayColorTableEXT)(table, length);
    Driver("wglLoadDisplayColorTableEXT","(", boost::print::array(table,length), ", ", length, ")", " returned ", toString(ret));
    return ret;
}

// WGL_EXT_extensions_string

static const char *REGAL_CALL log_wglGetExtensionsStringEXT(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->wglGetExtensionsStringEXT)();
    Driver("wglGetExtensionsStringEXT","()", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

// WGL_EXT_make_current_read

static HDC REGAL_CALL log_wglGetCurrentReadDCEXT(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglGetCurrentReadDCEXT)();
    Driver("wglGetCurrentReadDCEXT","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglMakeContextCurrentEXT(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglMakeContextCurrentEXT)(hDrawDC, hReadDC, hglrc);
    Driver("wglMakeContextCurrentEXT","(", boost::print::optional(hDrawDC,Logging::pointers), ", ", boost::print::optional(hReadDC,Logging::pointers), ", ", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_EXT_pbuffer

static HPBUFFEREXT REGAL_CALL log_wglCreatePbufferEXT(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HPBUFFEREXT  ret = _next->call(&_next->wglCreatePbufferEXT)(hDC, iPixelFormat, iWidth, iHeight, piAttribList);
    Driver("wglCreatePbufferEXT","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iWidth, ", ", iHeight, ", ", boost::print::optional(piAttribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDestroyPbufferEXT(HPBUFFEREXT hPbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDestroyPbufferEXT)(hPbuffer);
    Driver("wglDestroyPbufferEXT","(", boost::print::optional(hPbuffer,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static HDC REGAL_CALL log_wglGetPbufferDCEXT(HPBUFFEREXT hPbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglGetPbufferDCEXT)(hPbuffer);
    Driver("wglGetPbufferDCEXT","(", boost::print::optional(hPbuffer,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglQueryPbufferEXT(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryPbufferEXT)(hPbuffer, iAttribute, piValue);
    Driver("wglQueryPbufferEXT","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iAttribute, ", ", boost::print::array(piValue,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglReleasePbufferDCEXT(HPBUFFEREXT hPbuffer, HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglReleasePbufferDCEXT)(hPbuffer, hDC);
    Driver("wglReleasePbufferDCEXT","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_EXT_pixel_format

static BOOL REGAL_CALL log_wglChoosePixelFormatEXT(HDC hDC, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglChoosePixelFormatEXT)(hDC, piAttribIList, pfAttribFList, nMaxFormats, piFormats, nNumFormats);
    Driver("wglChoosePixelFormatEXT","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(piAttribIList,Logging::pointers), ", ", pfAttribFList, ", ", nMaxFormats, ", ", boost::print::optional(piFormats,Logging::pointers), ", ", boost::print::array(nNumFormats,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetPixelFormatAttribfvEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetPixelFormatAttribfvEXT)(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, pfValues);
    Driver("wglGetPixelFormatAttribfvEXT","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", boost::print::array(piAttributes,nAttributes), ", ", boost::print::array(pfValues,nAttributes), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetPixelFormatAttribivEXT(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetPixelFormatAttribivEXT)(hDC, iPixelFormat, iLayerPlane, nAttributes, piAttributes, piValues);
    Driver("wglGetPixelFormatAttribivEXT","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nAttributes, ", ", boost::print::array(piAttributes,nAttributes), ", ", boost::print::array(piValues,nAttributes), ")", " returned ", ret);
    return ret;
}

// WGL_EXT_swap_control

static int REGAL_CALL log_wglGetSwapIntervalEXT(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglGetSwapIntervalEXT)();
    Driver("wglGetSwapIntervalEXT","()", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSwapIntervalEXT(int interval)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSwapIntervalEXT)(interval);
    Driver("wglSwapIntervalEXT","(", interval, ")", " returned ", ret);
    return ret;
}

// WGL_GDI

static int REGAL_CALL log_wglChoosePixelFormat(HDC hDC, const PIXELFORMATDESCRIPTOR *ppfd)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglChoosePixelFormat)(hDC, ppfd);
    Driver("wglChoosePixelFormat","(", boost::print::optional(hDC,Logging::pointers), ", ", ppfd, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglDescribePixelFormat(HDC hDC, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglDescribePixelFormat)(hDC, iPixelFormat, nBytes, ppfd);
    Driver("wglDescribePixelFormat","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", nBytes, ", ", ppfd, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglGetPixelFormat(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglGetPixelFormat)(hDC);
    Driver("wglGetPixelFormat","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSetPixelFormat(HDC hDC, int iPixelFormat, const PIXELFORMATDESCRIPTOR *ppfd)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetPixelFormat)(hDC, iPixelFormat, ppfd);
    Driver("wglSetPixelFormat","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", ppfd, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSwapBuffers(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSwapBuffers)(hDC);
    Driver("wglSwapBuffers","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_I3D_digital_video_control

static BOOL REGAL_CALL log_wglGetDigitalVideoParametersI3D(HDC hDC, int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetDigitalVideoParametersI3D)(hDC, iAttribute, piValue);
    Driver("wglGetDigitalVideoParametersI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iAttribute, ", ", boost::print::optional(piValue,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSetDigitalVideoParametersI3D(HDC hDC, int iAttribute, const int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetDigitalVideoParametersI3D)(hDC, iAttribute, piValue);
    Driver("wglSetDigitalVideoParametersI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iAttribute, ", ", boost::print::optional(piValue,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_I3D_gamma

static BOOL REGAL_CALL log_wglGetGammaTableI3D(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGammaTableI3D)(hDC, iEntries, puRed, puGreen, puBlue);
    Driver("wglGetGammaTableI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iEntries, ", ", boost::print::array(puRed,iEntries), ", ", boost::print::array(puGreen,iEntries), ", ", boost::print::array(puBlue,iEntries), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetGammaTableParametersI3D(HDC hDC, int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGammaTableParametersI3D)(hDC, iAttribute, piValue);
    Driver("wglGetGammaTableParametersI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iAttribute, ", ", boost::print::optional(piValue,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSetGammaTableI3D(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetGammaTableI3D)(hDC, iEntries, puRed, puGreen, puBlue);
    Driver("wglSetGammaTableI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iEntries, ", ", boost::print::array(puRed,iEntries), ", ", boost::print::array(puGreen,iEntries), ", ", boost::print::array(puBlue,iEntries), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSetGammaTableParametersI3D(HDC hDC, int iAttribute, const int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSetGammaTableParametersI3D)(hDC, iAttribute, piValue);
    Driver("wglSetGammaTableParametersI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", iAttribute, ", ", boost::print::optional(piValue,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_I3D_genlock

static BOOL REGAL_CALL log_wglDisableGenlockI3D(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDisableGenlockI3D)(hDC);
    Driver("wglDisableGenlockI3D","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEnableGenlockI3D(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEnableGenlockI3D)(hDC);
    Driver("wglEnableGenlockI3D","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGenlockSampleRateI3D(HDC hDC, UINT uRate)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGenlockSampleRateI3D)(hDC, uRate);
    Driver("wglGenlockSampleRateI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", uRate, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGenlockSourceDelayI3D(HDC hDC, UINT uDelay)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGenlockSourceDelayI3D)(hDC, uDelay);
    Driver("wglGenlockSourceDelayI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", uDelay, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGenlockSourceEdgeI3D(HDC hDC, UINT uEdge)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGenlockSourceEdgeI3D)(hDC, uEdge);
    Driver("wglGenlockSourceEdgeI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", uEdge, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGenlockSourceI3D(HDC hDC, UINT uSource)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGenlockSourceI3D)(hDC, uSource);
    Driver("wglGenlockSourceI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", uSource, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetGenlockSampleRateI3D(HDC hDC, UINT *uRate)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGenlockSampleRateI3D)(hDC, uRate);
    Driver("wglGetGenlockSampleRateI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(uRate,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetGenlockSourceDelayI3D(HDC hDC, UINT *uDelay)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGenlockSourceDelayI3D)(hDC, uDelay);
    Driver("wglGetGenlockSourceDelayI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(uDelay,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetGenlockSourceEdgeI3D(HDC hDC, UINT *uEdge)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGenlockSourceEdgeI3D)(hDC, uEdge);
    Driver("wglGetGenlockSourceEdgeI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(uEdge,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetGenlockSourceI3D(HDC hDC, UINT *uSource)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetGenlockSourceI3D)(hDC, uSource);
    Driver("wglGetGenlockSourceI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(uSource,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglIsEnabledGenlockI3D(HDC hDC, BOOL *pFlag)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglIsEnabledGenlockI3D)(hDC, pFlag);
    Driver("wglIsEnabledGenlockI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(pFlag,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryGenlockMaxSourceDelayI3D(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryGenlockMaxSourceDelayI3D)(hDC, uMaxLineDelay, uMaxPixelDelay);
    Driver("wglQueryGenlockMaxSourceDelayI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(uMaxLineDelay,1), ", ", boost::print::array(uMaxPixelDelay,1), ")", " returned ", ret);
    return ret;
}

// WGL_I3D_image_buffer

static BOOL REGAL_CALL log_wglAssociateImageBufferEventsI3D(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglAssociateImageBufferEventsI3D)(hDC, pEvent, pAddress, pSize, count);
    Driver("wglAssociateImageBufferEventsI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(pEvent,count), ", ", boost::print::array(pAddress,count), ", ", boost::print::array(pSize,count), ", ", count, ")", " returned ", ret);
    return ret;
}

static LPVOID REGAL_CALL log_wglCreateImageBufferI3D(HDC hDC, DWORD dwSize, UINT uFlags)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    LPVOID  ret = _next->call(&_next->wglCreateImageBufferI3D)(hDC, dwSize, uFlags);
    Driver("wglCreateImageBufferI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", dwSize, ", ", uFlags, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDestroyImageBufferI3D(HDC hDC, LPVOID pAddress)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDestroyImageBufferI3D)(hDC, pAddress);
    Driver("wglDestroyImageBufferI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(pAddress,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglReleaseImageBufferEventsI3D(HDC hDC, const LPVOID *pAddress, UINT count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglReleaseImageBufferEventsI3D)(hDC, pAddress, count);
    Driver("wglReleaseImageBufferEventsI3D","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(pAddress,count), ", ", count, ")", " returned ", ret);
    return ret;
}

// WGL_I3D_swap_frame_lock

static BOOL REGAL_CALL log_wglDisableFrameLockI3D(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDisableFrameLockI3D)();
    Driver("wglDisableFrameLockI3D","()", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEnableFrameLockI3D(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEnableFrameLockI3D)();
    Driver("wglEnableFrameLockI3D","()", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglIsEnabledFrameLockI3D(BOOL *pFlag)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglIsEnabledFrameLockI3D)(pFlag);
    Driver("wglIsEnabledFrameLockI3D","(", boost::print::array(pFlag,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryFrameLockMasterI3D(BOOL *pFlag)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryFrameLockMasterI3D)(pFlag);
    Driver("wglQueryFrameLockMasterI3D","(", boost::print::array(pFlag,1), ")", " returned ", ret);
    return ret;
}

// WGL_I3D_swap_frame_usage

static BOOL REGAL_CALL log_wglBeginFrameTrackingI3D(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBeginFrameTrackingI3D)();
    Driver("wglBeginFrameTrackingI3D","()", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEndFrameTrackingI3D(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEndFrameTrackingI3D)();
    Driver("wglEndFrameTrackingI3D","()", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetFrameUsageI3D(float *pUsage)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetFrameUsageI3D)(pUsage);
    Driver("wglGetFrameUsageI3D","(", boost::print::array(pUsage,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryFrameTrackingI3D(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryFrameTrackingI3D)(pFrameCount, pMissedFrames, pLastMissedUsage);
    Driver("wglQueryFrameTrackingI3D","(", boost::print::array(pFrameCount,1), ", ", boost::print::array(pMissedFrames,1), ", ", boost::print::array(pLastMissedUsage,1), ")", " returned ", ret);
    return ret;
}

// WGL_NV_DX_interop

static BOOL REGAL_CALL log_wglDXCloseDeviceNV(HANDLE hDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXCloseDeviceNV)(hDevice);
    Driver("wglDXCloseDeviceNV","(", hDevice, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDXLockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXLockObjectsNV)(hDevice, count, hObjects);
    Driver("wglDXLockObjectsNV","(", hDevice, ", ", count, ", ", hObjects, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDXObjectAccessNV(HANDLE hObject, GLenum access)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXObjectAccessNV)(hObject, access);
    Driver("wglDXObjectAccessNV","(", hObject, ", ", toString(access), ")", " returned ", ret);
    return ret;
}

static HANDLE REGAL_CALL log_wglDXOpenDeviceNV(GLvoid *dxDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HANDLE  ret = _next->call(&_next->wglDXOpenDeviceNV)(dxDevice);
    Driver("wglDXOpenDeviceNV","(", boost::print::optional(dxDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static HANDLE REGAL_CALL log_wglDXRegisterObjectNV(HANDLE hDevice, GLvoid *dxObject, GLuint name, GLenum type, GLenum access)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HANDLE  ret = _next->call(&_next->wglDXRegisterObjectNV)(hDevice, dxObject, name, type, access);
    Driver("wglDXRegisterObjectNV","(", hDevice, ", ", boost::print::optional(dxObject,Logging::pointers), ", ", name, ", ", toString(type), ", ", toString(access), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDXSetResourceShareHandleNV(GLvoid *dxObject, HANDLE shareHandle)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXSetResourceShareHandleNV)(dxObject, shareHandle);
    Driver("wglDXSetResourceShareHandleNV","(", boost::print::optional(dxObject,Logging::pointers), ", ", shareHandle, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDXUnlockObjectsNV(HANDLE hDevice, GLint count, HANDLE *hObjects)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXUnlockObjectsNV)(hDevice, count, hObjects);
    Driver("wglDXUnlockObjectsNV","(", hDevice, ", ", count, ", ", hObjects, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDXUnregisterObjectNV(HANDLE hDevice, HANDLE hObject)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDXUnregisterObjectNV)(hDevice, hObject);
    Driver("wglDXUnregisterObjectNV","(", hDevice, ", ", hObject, ")", " returned ", ret);
    return ret;
}

// WGL_NV_copy_image

static BOOL REGAL_CALL log_wglCopyImageSubDataNV(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglCopyImageSubDataNV)(hSrcRC, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, hDstRC, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    Driver("wglCopyImageSubDataNV","(", boost::print::optional(hSrcRC,Logging::pointers), ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", boost::print::optional(hDstRC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_NV_gpu_affinity

static HDC REGAL_CALL log_wglCreateAffinityDCNV(const HGPUNV *phGpuList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglCreateAffinityDCNV)(phGpuList);
    Driver("wglCreateAffinityDCNV","(", phGpuList, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDeleteDCNV(HDC hAffinityDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDeleteDCNV)(hAffinityDC);
    Driver("wglDeleteDCNV","(", boost::print::optional(hAffinityDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEnumGpuDevicesNV(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEnumGpuDevicesNV)(hGpu, iDeviceIndex, lpGpuDevice);
    Driver("wglEnumGpuDevicesNV","(", boost::print::optional(hGpu,Logging::pointers), ", ", iDeviceIndex, ", ", boost::print::optional(lpGpuDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEnumGpusFromAffinityDCNV(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEnumGpusFromAffinityDCNV)(hAffinityDC, iGpuIndex, hGpu);
    Driver("wglEnumGpusFromAffinityDCNV","(", boost::print::optional(hAffinityDC,Logging::pointers), ", ", iGpuIndex, ", ", boost::print::array(hGpu,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglEnumGpusNV(UINT iGpuIndex, HGPUNV *phGpu)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglEnumGpusNV)(iGpuIndex, phGpu);
    Driver("wglEnumGpusNV","(", iGpuIndex, ", ", boost::print::array(phGpu,1), ")", " returned ", ret);
    return ret;
}

// WGL_NV_present_video

static BOOL REGAL_CALL log_wglBindVideoDeviceNV(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBindVideoDeviceNV)(hDC, uVideoSlot, hVideoDevice, piAttribList);
    Driver("wglBindVideoDeviceNV","(", boost::print::optional(hDC,Logging::pointers), ", ", uVideoSlot, ", ", boost::print::optional(hVideoDevice,Logging::pointers), ", ", boost::print::optional(piAttribList,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglEnumerateVideoDevicesNV(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglEnumerateVideoDevicesNV)(hDC, phDeviceList);
    Driver("wglEnumerateVideoDevicesNV","(", boost::print::optional(hDC,Logging::pointers), ", ", phDeviceList, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryCurrentContextNV(int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryCurrentContextNV)(iAttribute, piValue);
    Driver("wglQueryCurrentContextNV","(", iAttribute, ", ", boost::print::optional(piValue,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_NV_swap_group

static BOOL REGAL_CALL log_wglBindSwapBarrierNV(GLuint group, GLuint barrier)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBindSwapBarrierNV)(group, barrier);
    Driver("wglBindSwapBarrierNV","(", group, ", ", barrier, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglJoinSwapGroupNV(HDC hDC, GLuint group)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglJoinSwapGroupNV)(hDC, group);
    Driver("wglJoinSwapGroupNV","(", boost::print::optional(hDC,Logging::pointers), ", ", group, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryFrameCountNV(HDC hDC, GLuint *count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryFrameCountNV)(hDC, count);
    Driver("wglQueryFrameCountNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(count,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryMaxSwapGroupsNV(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryMaxSwapGroupsNV)(hDC, maxGroups, maxBarriers);
    Driver("wglQueryMaxSwapGroupsNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(maxGroups,1), ", ", boost::print::array(maxBarriers,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQuerySwapGroupNV(HDC hDC, GLuint *group, GLuint *barrier)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQuerySwapGroupNV)(hDC, group, barrier);
    Driver("wglQuerySwapGroupNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(group,1), ", ", boost::print::array(barrier,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglResetFrameCountNV(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglResetFrameCountNV)(hDC);
    Driver("wglResetFrameCountNV","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_NV_vertex_array_range

static void *REGAL_CALL log_wglAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    void * ret = _next->call(&_next->wglAllocateMemoryNV)(size, readfreq, writefreq, priority);
    Driver("wglAllocateMemoryNV","(", size, ", ", readfreq, ", ", writefreq, ", ", priority, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_wglFreeMemoryNV(void *pointer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->wglFreeMemoryNV)(pointer);
    Driver("wglFreeMemoryNV","(", boost::print::optional(pointer,Logging::pointers), ")");
}

// WGL_NV_video_capture

static BOOL REGAL_CALL log_wglBindVideoCaptureDeviceNV(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBindVideoCaptureDeviceNV)(uVideoSlot, hDevice);
    Driver("wglBindVideoCaptureDeviceNV","(", uVideoSlot, ", ", boost::print::optional(hDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static UINT REGAL_CALL log_wglEnumerateVideoCaptureDevicesNV(HDC hDC, HVIDEOINPUTDEVICENV *phDeviceList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    UINT  ret = _next->call(&_next->wglEnumerateVideoCaptureDevicesNV)(hDC, phDeviceList);
    Driver("wglEnumerateVideoCaptureDevicesNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(phDeviceList,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglLockVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglLockVideoCaptureDeviceNV)(hDC, hDevice);
    Driver("wglLockVideoCaptureDeviceNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(hDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglQueryVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglQueryVideoCaptureDeviceNV)(hDC, hDevice, iAttribute, piValue);
    Driver("wglQueryVideoCaptureDeviceNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(hDevice,Logging::pointers), ", ", iAttribute, ", ", boost::print::array(piValue,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglReleaseVideoCaptureDeviceNV(HDC hDC, HVIDEOINPUTDEVICENV hDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglReleaseVideoCaptureDeviceNV)(hDC, hDevice);
    Driver("wglReleaseVideoCaptureDeviceNV","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(hDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// WGL_NV_video_output

static BOOL REGAL_CALL log_wglBindVideoImageNV(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglBindVideoImageNV)(hVideoDevice, hPbuffer, iVideoBuffer);
    Driver("wglBindVideoImageNV","(", boost::print::optional(hVideoDevice,Logging::pointers), ", ", boost::print::optional(hPbuffer,Logging::pointers), ", ", iVideoBuffer, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetVideoDeviceNV(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetVideoDeviceNV)(hDC, numDevices, hVideoDevice);
    Driver("wglGetVideoDeviceNV","(", boost::print::optional(hDC,Logging::pointers), ", ", numDevices, ", ", boost::print::array(hVideoDevice,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetVideoInfoNV(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetVideoInfoNV)(hpVideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    Driver("wglGetVideoInfoNV","(", boost::print::optional(hpVideoDevice,Logging::pointers), ", ", boost::print::array(pulCounterOutputPbuffer,1), ", ", boost::print::array(pulCounterOutputVideo,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglReleaseVideoDeviceNV(HPVIDEODEV hVideoDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglReleaseVideoDeviceNV)(hVideoDevice);
    Driver("wglReleaseVideoDeviceNV","(", boost::print::optional(hVideoDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglReleaseVideoImageNV(HPBUFFERARB hPbuffer, int iVideoBuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglReleaseVideoImageNV)(hPbuffer, iVideoBuffer);
    Driver("wglReleaseVideoImageNV","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iVideoBuffer, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSendPbufferToVideoNV(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSendPbufferToVideoNV)(hPbuffer, iBufferType, pulCounterPbuffer, bBlock);
    Driver("wglSendPbufferToVideoNV","(", boost::print::optional(hPbuffer,Logging::pointers), ", ", iBufferType, ", ", boost::print::array(pulCounterPbuffer,1), ", ", bBlock, ")", " returned ", ret);
    return ret;
}

// WGL_OML_sync_control

static BOOL REGAL_CALL log_wglGetMscRateOML(HDC hDC, INT32 *numerator, INT32 *denominator)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetMscRateOML)(hDC, numerator, denominator);
    Driver("wglGetMscRateOML","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(numerator,1), ", ", boost::print::array(denominator,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglGetSyncValuesOML(HDC hDC, INT64 *ust, INT64 *msc, INT64 *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglGetSyncValuesOML)(hDC, ust, msc, sbc);
    Driver("wglGetSyncValuesOML","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

static INT64 REGAL_CALL log_wglSwapBuffersMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    INT64  ret = _next->call(&_next->wglSwapBuffersMscOML)(hDC, target_msc, divisor, remainder);
    Driver("wglSwapBuffersMscOML","(", boost::print::optional(hDC,Logging::pointers), ", ", target_msc, ", ", divisor, ", ", remainder, ")", " returned ", ret);
    return ret;
}

static INT64 REGAL_CALL log_wglSwapLayerBuffersMscOML(HDC hDC, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    INT64  ret = _next->call(&_next->wglSwapLayerBuffersMscOML)(hDC, fuPlanes, target_msc, divisor, remainder);
    Driver("wglSwapLayerBuffersMscOML","(", boost::print::optional(hDC,Logging::pointers), ", ", fuPlanes, ", ", target_msc, ", ", divisor, ", ", remainder, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglWaitForMscOML(HDC hDC, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglWaitForMscOML)(hDC, target_msc, divisor, remainder, ust, msc, sbc);
    Driver("wglWaitForMscOML","(", boost::print::optional(hDC,Logging::pointers), ", ", target_msc, ", ", divisor, ", ", remainder, ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglWaitForSbcOML(HDC hDC, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglWaitForSbcOML)(hDC, target_sbc, ust, msc, sbc);
    Driver("wglWaitForSbcOML","(", boost::print::optional(hDC,Logging::pointers), ", ", target_sbc, ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

// WGL_core

static BOOL REGAL_CALL log_wglCopyContext(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglCopyContext)(hglrcSrc, hglrcDst, mask);
    Driver("wglCopyContext","(", boost::print::optional(hglrcSrc,Logging::pointers), ", ", boost::print::optional(hglrcDst,Logging::pointers), ", ", mask, ")", " returned ", ret);
    return ret;
}

static HGLRC REGAL_CALL log_wglCreateContext(HDC hDC)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglCreateContext)(hDC);
    Driver("wglCreateContext","(", boost::print::optional(hDC,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static HGLRC REGAL_CALL log_wglCreateLayerContext(HDC hDC, int iLayerPlane)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglCreateLayerContext)(hDC, iLayerPlane);
    Driver("wglCreateLayerContext","(", boost::print::optional(hDC,Logging::pointers), ", ", iLayerPlane, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static BOOL REGAL_CALL log_wglDeleteContext(HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDeleteContext)(hglrc);
    Driver("wglDeleteContext","(", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglDescribeLayerPlane(HDC hDC, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglDescribeLayerPlane)(hDC, iPixelFormat, iLayerPlane, nBytes, plpd);
    Driver("wglDescribeLayerPlane","(", boost::print::optional(hDC,Logging::pointers), ", ", iPixelFormat, ", ", iLayerPlane, ", ", nBytes, ", ", boost::print::optional(plpd,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static HGLRC REGAL_CALL log_wglGetCurrentContext(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HGLRC  ret = _next->call(&_next->wglGetCurrentContext)();
    Driver("wglGetCurrentContext","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static HDC REGAL_CALL log_wglGetCurrentDC(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    HDC  ret = _next->call(&_next->wglGetCurrentDC)();
    Driver("wglGetCurrentDC","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static PROC REGAL_CALL log_wglGetDefaultProcAddress(LPCSTR lpszProc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    PROC  ret = _next->call(&_next->wglGetDefaultProcAddress)(lpszProc);
    Driver("wglGetDefaultProcAddress","(", boost::print::quote(lpszProc,'"'), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglGetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, COLORREF *pcr)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglGetLayerPaletteEntries)(hDC, iLayerPlane, iStart, nEntries, pcr);
    Driver("wglGetLayerPaletteEntries","(", boost::print::optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ", ", boost::print::array(pcr,ret), ")", " returned ", ret);
    return ret;
}

static PROC REGAL_CALL log_wglGetProcAddress(LPCSTR lpszProc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    PROC  ret = _next->call(&_next->wglGetProcAddress)(lpszProc);
    Driver("wglGetProcAddress","(", boost::print::quote(lpszProc,'"'), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglMakeCurrent(HDC hDC, HGLRC hglrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglMakeCurrent)(hDC, hglrc);
    Driver("wglMakeCurrent","(", boost::print::optional(hDC,Logging::pointers), ", ", boost::print::optional(hglrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglRealizeLayerPalette(HDC hDC, int iLayerPlane, BOOL bRealize)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglRealizeLayerPalette)(hDC, iLayerPlane, bRealize);
    Driver("wglRealizeLayerPalette","(", boost::print::optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", bRealize, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_wglSetLayerPaletteEntries(HDC hDC, int iLayerPlane, int iStart, int nEntries, const COLORREF *pcr)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->wglSetLayerPaletteEntries)(hDC, iLayerPlane, iStart, nEntries, pcr);
    Driver("wglSetLayerPaletteEntries","(", boost::print::optional(hDC,Logging::pointers), ", ", iLayerPlane, ", ", iStart, ", ", nEntries, ", ", boost::print::array(pcr,nEntries), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglShareLists(HGLRC hglrcShare, HGLRC hglrcSrc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglShareLists)(hglrcShare, hglrcSrc);
    Driver("wglShareLists","(", boost::print::optional(hglrcShare,Logging::pointers), ", ", boost::print::optional(hglrcSrc,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglSwapLayerBuffers(HDC hDC, UINT fuPlanes)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglSwapLayerBuffers)(hDC, fuPlanes);
    Driver("wglSwapLayerBuffers","(", boost::print::optional(hDC,Logging::pointers), ", ", fuPlanes, ")", " returned ", ret);
    return ret;
}

static DWORD REGAL_CALL log_wglSwapMultipleBuffers(UINT n, const WGLSWAP *ps)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    DWORD  ret = _next->call(&_next->wglSwapMultipleBuffers)(n, ps);
    Driver("wglSwapMultipleBuffers","(", n, ", ", ps, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglUseFontBitmapsA(HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglUseFontBitmapsA)(hDC, first, count, listBase);
    Driver("wglUseFontBitmapsA","(", boost::print::optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglUseFontBitmapsW(HDC hDC, DWORD first, DWORD count, DWORD listBase)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglUseFontBitmapsW)(hDC, first, count, listBase);
    Driver("wglUseFontBitmapsW","(", boost::print::optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglUseFontOutlinesA(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglUseFontOutlinesA)(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    Driver("wglUseFontOutlinesA","(", boost::print::optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ", ", boost::print::optional(lpgmf,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static BOOL REGAL_CALL log_wglUseFontOutlinesW(HDC hDC, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    BOOL  ret = _next->call(&_next->wglUseFontOutlinesW)(hDC, first, count, listBase, deviation, extrusion, format, lpgmf);
    Driver("wglUseFontOutlinesW","(", boost::print::optional(hDC,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ", ", deviation, ", ", extrusion, ", ", format, ", ", boost::print::optional(lpgmf,Logging::pointers), ")", " returned ", ret);
    return ret;
}

#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

// GLX_VERSION_1_0

static XVisualInfo *REGAL_CALL log_glXChooseVisual(Display *dpy, int screen, int *attribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    XVisualInfo * ret = _next->call(&_next->glXChooseVisual)(dpy, screen, attribList);
    Driver("glXChooseVisual","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(attribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXCopyContext(Display *dpy, GLXContext src, GLXContext dst, unsigned long mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXCopyContext)(dpy, src, dst, mask);
    Driver("glXCopyContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(src,Logging::pointers), ", ", boost::print::optional(dst,Logging::pointers), ", ", mask, ")");
}

static GLXContext REGAL_CALL log_glXCreateContext(Display *dpy, XVisualInfo *vis, GLXContext shareList, Bool direct)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateContext)(dpy, vis, shareList, direct);
    Driver("glXCreateContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(vis,Logging::pointers), ", ", boost::print::optional(shareList,Logging::pointers), ", ", direct, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXPixmap REGAL_CALL log_glXCreateGLXPixmap(Display *dpy, XVisualInfo *vis, Pixmap pixmap)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPixmap  ret = _next->call(&_next->glXCreateGLXPixmap)(dpy, vis, pixmap);
    Driver("glXCreateGLXPixmap","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(vis,Logging::pointers), ", ", boost::print::optional(pixmap,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXDestroyContext(Display *dpy, GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyContext)(dpy, ctx);
    Driver("glXDestroyContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ")");
}

static void REGAL_CALL log_glXDestroyGLXPixmap(Display *dpy, GLXPixmap pix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyGLXPixmap)(dpy, pix);
    Driver("glXDestroyGLXPixmap","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pix,Logging::pointers), ")");
}

static int REGAL_CALL log_glXGetConfig(Display *dpy, XVisualInfo *vis, int attrib, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetConfig)(dpy, vis, attrib, value);
    Driver("glXGetConfig","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(vis,Logging::pointers), ", ", attrib, ", ", boost::print::optional(value,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static GLXContext REGAL_CALL log_glXGetCurrentContext(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXGetCurrentContext)();
    Driver("glXGetCurrentContext","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXDrawable REGAL_CALL log_glXGetCurrentDrawable(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXDrawable  ret = _next->call(&_next->glXGetCurrentDrawable)();
    Driver("glXGetCurrentDrawable","()", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXIsDirect(Display *dpy, GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXIsDirect)(dpy, ctx);
    Driver("glXIsDirect","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXMakeCurrent(Display *dpy, GLXDrawable drawable, GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXMakeCurrent)(dpy, drawable, ctx);
    Driver("glXMakeCurrent","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXQueryExtension(Display *dpy, int *errorBase, int *eventBase)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQueryExtension)(dpy, errorBase, eventBase);
    Driver("glXQueryExtension","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(errorBase,Logging::pointers), ", ", boost::print::optional(eventBase,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXQueryVersion(Display *dpy, int *major, int *minor)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQueryVersion)(dpy, major, minor);
    Driver("glXQueryVersion","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(major,Logging::pointers), ", ", boost::print::optional(minor,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glXSwapBuffers(Display *dpy, GLXDrawable drawable)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXSwapBuffers)(dpy, drawable);
    Driver("glXSwapBuffers","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ")");
}

static void REGAL_CALL log_glXUseXFont(Font font, int first, int count, int listBase)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXUseXFont)(font, first, count, listBase);
    Driver("glXUseXFont","(", boost::print::optional(font,Logging::pointers), ", ", first, ", ", count, ", ", listBase, ")");
}

static void REGAL_CALL log_glXWaitGL(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXWaitGL)();
    Driver("glXWaitGL","()");
}

static void REGAL_CALL log_glXWaitX(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXWaitX)();
    Driver("glXWaitX","()");
}

// GLX_VERSION_1_1

static const char *REGAL_CALL log_glXGetClientString(Display *dpy, int name)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->glXGetClientString)(dpy, name);
    Driver("glXGetClientString","(", boost::print::optional(dpy,Logging::pointers), ", ", name, ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

static const char *REGAL_CALL log_glXQueryExtensionsString(Display *dpy, int screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->glXQueryExtensionsString)(dpy, screen);
    Driver("glXQueryExtensionsString","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

static const char *REGAL_CALL log_glXQueryServerString(Display *dpy, int screen, int name)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->glXQueryServerString)(dpy, screen, name);
    Driver("glXQueryServerString","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", name, ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

// GLX_VERSION_1_2

static Display *REGAL_CALL log_glXGetCurrentDisplay(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Display * ret = _next->call(&_next->glXGetCurrentDisplay)();
    Driver("glXGetCurrentDisplay","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_VERSION_1_3

static GLXFBConfig *REGAL_CALL log_glXChooseFBConfig(Display *dpy, int screen, const int *attrib_list, int *nelements)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXFBConfig * ret = _next->call(&_next->glXChooseFBConfig)(dpy, screen, attrib_list, nelements);
    Driver("glXChooseFBConfig","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(attrib_list,Logging::pointers), ", ", boost::print::array(nelements,1), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXContext REGAL_CALL log_glXCreateNewContext(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateNewContext)(dpy, config, render_type, share_list, direct);
    Driver("glXCreateNewContext","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", render_type, ", ", boost::print::optional(share_list,Logging::pointers), ", ", direct, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXPbuffer REGAL_CALL log_glXCreatePbuffer(Display *dpy, GLXFBConfig config, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPbuffer  ret = _next->call(&_next->glXCreatePbuffer)(dpy, config, attrib_list);
    Driver("glXCreatePbuffer","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXPixmap REGAL_CALL log_glXCreatePixmap(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPixmap  ret = _next->call(&_next->glXCreatePixmap)(dpy, config, pixmap, attrib_list);
    Driver("glXCreatePixmap","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", boost::print::optional(pixmap,Logging::pointers), ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXWindow REGAL_CALL log_glXCreateWindow(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXWindow  ret = _next->call(&_next->glXCreateWindow)(dpy, config, win, attrib_list);
    Driver("glXCreateWindow","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", win, ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXDestroyPbuffer(Display *dpy, GLXPbuffer pbuf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyPbuffer)(dpy, pbuf);
    Driver("glXDestroyPbuffer","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ")");
}

static void REGAL_CALL log_glXDestroyPixmap(Display *dpy, GLXPixmap pixmap)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyPixmap)(dpy, pixmap);
    Driver("glXDestroyPixmap","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pixmap,Logging::pointers), ")");
}

static void REGAL_CALL log_glXDestroyWindow(Display *dpy, GLXWindow win)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyWindow)(dpy, win);
    Driver("glXDestroyWindow","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(win,Logging::pointers), ")");
}

static GLXDrawable REGAL_CALL log_glXGetCurrentReadDrawable(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXDrawable  ret = _next->call(&_next->glXGetCurrentReadDrawable)();
    Driver("glXGetCurrentReadDrawable","()", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXGetFBConfigAttrib(Display *dpy, GLXFBConfig config, int attribute, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetFBConfigAttrib)(dpy, config, attribute, value);
    Driver("glXGetFBConfigAttrib","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", attribute, ", ", boost::print::array(value,1), ")", " returned ", ret);
    return ret;
}

static GLXFBConfig *REGAL_CALL log_glXGetFBConfigs(Display *dpy, int screen, int *nelements)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXFBConfig * ret = _next->call(&_next->glXGetFBConfigs)(dpy, screen, nelements);
    Driver("glXGetFBConfigs","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::array(nelements,1), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXGetSelectedEvent(Display *dpy, GLXDrawable draw, unsigned long *event_mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXGetSelectedEvent)(dpy, draw, event_mask);
    Driver("glXGetSelectedEvent","(", boost::print::optional(dpy,Logging::pointers), ", ", draw, ", ", boost::print::array(event_mask,1), ")");
}

static XVisualInfo *REGAL_CALL log_glXGetVisualFromFBConfig(Display *dpy, GLXFBConfig config)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    XVisualInfo * ret = _next->call(&_next->glXGetVisualFromFBConfig)(dpy, config);
    Driver("glXGetVisualFromFBConfig","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static Bool REGAL_CALL log_glXMakeContextCurrent(Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXMakeContextCurrent)(display, draw, read, ctx);
    Driver("glXMakeContextCurrent","(", boost::print::optional(display,Logging::pointers), ", ", draw, ", ", read, ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXQueryContext(Display *dpy, GLXContext ctx, int attribute, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXQueryContext)(dpy, ctx, attribute, value);
    Driver("glXQueryContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ", ", GLXenumToString(attribute), ", ", boost::print::array(value,1), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glXQueryDrawable(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXQueryDrawable)(dpy, draw, attribute, value);
    Driver("glXQueryDrawable","(", boost::print::optional(dpy,Logging::pointers), ", ", draw, ", ", attribute, ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glXSelectEvent(Display *dpy, GLXDrawable draw, unsigned long event_mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXSelectEvent)(dpy, draw, event_mask);
    Driver("glXSelectEvent","(", boost::print::optional(dpy,Logging::pointers), ", ", draw, ", ", event_mask, ")");
}

// GLX_VERSION_1_4

static __GLXextFuncPtr REGAL_CALL log_glXGetProcAddress(const GLubyte *procName)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    __GLXextFuncPtr  ret = _next->call(&_next->glXGetProcAddress)(procName);
    Driver("glXGetProcAddress","(", boost::print::quote(reinterpret_cast<const char *>(procName),'"'), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_AMD_gpu_association

static void REGAL_CALL log_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXBlitContextFramebufferAMD)(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    Driver("glXBlitContextFramebufferAMD","(", boost::print::optional(dstCtx,Logging::pointers), ", ", srcX0, ", ", srcY0, ", ", srcX1, ", ", srcY1, ", ", dstX0, ", ", dstY0, ", ", dstX1, ", ", dstY1, ")");
}

static GLXContext REGAL_CALL log_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateAssociatedContextAMD)(id, share_list);
    Driver("glXCreateAssociatedContextAMD","(", id, ", ", boost::print::optional(share_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXContext REGAL_CALL log_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int *attribList)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateAssociatedContextAttribsAMD)(id, share_context, attribList);
    Driver("glXCreateAssociatedContextAttribsAMD","(", id, ", ", boost::print::optional(share_context,Logging::pointers), ", ", boost::print::optional(attribList,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static Bool REGAL_CALL log_glXDeleteAssociatedContextAMD(GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXDeleteAssociatedContextAMD)(ctx);
    Driver("glXDeleteAssociatedContextAMD","(", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static unsigned int REGAL_CALL log_glXGetContextGPUIDAMD(GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    unsigned int  ret = _next->call(&_next->glXGetContextGPUIDAMD)(ctx);
    Driver("glXGetContextGPUIDAMD","(", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static GLXContext REGAL_CALL log_glXGetCurrentAssociatedContextAMD(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXGetCurrentAssociatedContextAMD)();
    Driver("glXGetCurrentAssociatedContextAMD","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static unsigned int REGAL_CALL log_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int *ids)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    unsigned int  ret = _next->call(&_next->glXGetGPUIDsAMD)(maxCount, ids);
    Driver("glXGetGPUIDsAMD","(", maxCount, ", ", ids, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, GLvoid *data)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetGPUInfoAMD)(id, property, dataType, size, data);
    Driver("glXGetGPUInfoAMD","(", id, ", ", property, ", ", toString(dataType), ", ", size, ", ", boost::print::optional(data,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXMakeAssociatedContextCurrentAMD(GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXMakeAssociatedContextCurrentAMD)(ctx);
    Driver("glXMakeAssociatedContextCurrentAMD","(", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// GLX_ARB_create_context

static GLXContext REGAL_CALL log_glXCreateContextAttribsARB(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateContextAttribsARB)(dpy, config, share_context, direct, attrib_list);
    Driver("glXCreateContextAttribsARB","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", boost::print::optional(share_context,Logging::pointers), ", ", direct, ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_ARB_get_proc_address

static __GLXextFuncPtr REGAL_CALL log_glXGetProcAddressARB(const GLubyte *procName)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    __GLXextFuncPtr  ret = _next->call(&_next->glXGetProcAddressARB)(procName);
    Driver("glXGetProcAddressARB","(", boost::print::quote(reinterpret_cast<const char *>(procName),'"'), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_ATI_render_texture

static void REGAL_CALL log_glXBindTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXBindTexImageATI)(dpy, pbuf, buffer);
    Driver("glXBindTexImageATI","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ", ", buffer, ")");
}

static void REGAL_CALL log_glXDrawableAttribATI(Display *dpy, GLXDrawable draw, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDrawableAttribATI)(dpy, draw, attrib_list);
    Driver("glXDrawableAttribATI","(", boost::print::optional(dpy,Logging::pointers), ", ", draw, ", ", boost::print::optional(attrib_list,Logging::pointers), ")");
}

static void REGAL_CALL log_glXReleaseTexImageATI(Display *dpy, GLXPbuffer pbuf, int buffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXReleaseTexImageATI)(dpy, pbuf, buffer);
    Driver("glXReleaseTexImageATI","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ", ", buffer, ")");
}

// GLX_EXT_import_context

static void REGAL_CALL log_glXFreeContextEXT(Display *dpy, GLXContext context)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXFreeContextEXT)(dpy, context);
    Driver("glXFreeContextEXT","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(context,Logging::pointers), ")");
}

static GLXContextID REGAL_CALL log_glXGetContextIDEXT(const GLXContext context)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContextID  ret = _next->call(&_next->glXGetContextIDEXT)(context);
    Driver("glXGetContextIDEXT","(", context, ")", " returned ", ret);
    return ret;
}

static GLXContext REGAL_CALL log_glXImportContextEXT(Display *dpy, GLXContextID contextID)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXImportContextEXT)(dpy, contextID);
    Driver("glXImportContextEXT","(", boost::print::optional(dpy,Logging::pointers), ", ", contextID, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static int REGAL_CALL log_glXQueryContextInfoEXT(Display *dpy, GLXContext context, int attribute, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXQueryContextInfoEXT)(dpy, context, attribute, value);
    Driver("glXQueryContextInfoEXT","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(context,Logging::pointers), ", ", attribute, ", ", boost::print::array(value,1), ")", " returned ", ret);
    return ret;
}

// GLX_EXT_swap_control

static void REGAL_CALL log_glXSwapIntervalEXT(Display *dpy, GLXDrawable drawable, int interval)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXSwapIntervalEXT)(dpy, drawable, interval);
    Driver("glXSwapIntervalEXT","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", interval, ")");
}

// GLX_EXT_texture_from_pixmap

static void REGAL_CALL log_glXBindTexImageEXT(Display *display, GLXDrawable drawable, int buffer, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXBindTexImageEXT)(display, drawable, buffer, attrib_list);
    Driver("glXBindTexImageEXT","(", boost::print::optional(display,Logging::pointers), ", ", drawable, ", ", buffer, ", ", boost::print::optional(attrib_list,Logging::pointers), ")");
}

static void REGAL_CALL log_glXReleaseTexImageEXT(Display *display, GLXDrawable drawable, int buffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXReleaseTexImageEXT)(display, drawable, buffer);
    Driver("glXReleaseTexImageEXT","(", boost::print::optional(display,Logging::pointers), ", ", drawable, ", ", buffer, ")");
}

// GLX_MESA_agp_offset

static unsigned int REGAL_CALL log_glXGetAGPOffsetMESA(const void *pointer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    unsigned int  ret = _next->call(&_next->glXGetAGPOffsetMESA)(pointer);
    Driver("glXGetAGPOffsetMESA","(", boost::print::optional(pointer,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// GLX_MESA_copy_sub_buffer

static void REGAL_CALL log_glXCopySubBufferMESA(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXCopySubBufferMESA)(dpy, drawable, x, y, width, height);
    Driver("glXCopySubBufferMESA","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", x, ", ", y, ", ", width, ", ", height, ")");
}

// GLX_MESA_pixmap_colormap

static GLXPixmap REGAL_CALL log_glXCreateGLXPixmapMESA(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPixmap  ret = _next->call(&_next->glXCreateGLXPixmapMESA)(dpy, visual, pixmap, cmap);
    Driver("glXCreateGLXPixmapMESA","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(visual,Logging::pointers), ", ", boost::print::optional(pixmap,Logging::pointers), ", ", cmap, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_MESA_release_buffers

static Bool REGAL_CALL log_glXReleaseBuffersMESA(Display *dpy, GLXDrawable d)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXReleaseBuffersMESA)(dpy, d);
    Driver("glXReleaseBuffersMESA","(", boost::print::optional(dpy,Logging::pointers), ", ", d, ")", " returned ", ret);
    return ret;
}

// GLX_MESA_set_3dfx_mode

static GLboolean REGAL_CALL log_glXSet3DfxModeMESA(GLint mode)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLboolean  ret = _next->call(&_next->glXSet3DfxModeMESA)(mode);
    Driver("glXSet3DfxModeMESA","(", mode, ")", " returned ", toString(ret));
    return ret;
}

// GLX_MESA_swap_control

static int REGAL_CALL log_glXGetSwapIntervalMESA(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetSwapIntervalMESA)();
    Driver("glXGetSwapIntervalMESA","()", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXSwapIntervalMESA(unsigned int interval)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXSwapIntervalMESA)(interval);
    Driver("glXSwapIntervalMESA","(", interval, ")", " returned ", ret);
    return ret;
}

// GLX_NV_copy_image

static void REGAL_CALL log_glXCopyImageSubDataNV(Display *dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXCopyImageSubDataNV)(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    Driver("glXCopyImageSubDataNV","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(srcCtx,Logging::pointers), ", ", srcName, ", ", toString(srcTarget), ", ", srcLevel, ", ", srcX, ", ", srcY, ", ", srcZ, ", ", boost::print::optional(dstCtx,Logging::pointers), ")");
}

// GLX_NV_present_video

static int REGAL_CALL log_glXBindVideoDeviceNV(Display *dpy, unsigned int video_slot, unsigned int video_device, const int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXBindVideoDeviceNV)(dpy, video_slot, video_device, attrib_list);
    Driver("glXBindVideoDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", video_slot, ", ", video_device, ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static unsigned int *REGAL_CALL log_glXEnumerateVideoDevicesNV(Display *dpy, int screen, int *nelements)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    unsigned int * ret = _next->call(&_next->glXEnumerateVideoDevicesNV)(dpy, screen, nelements);
    Driver("glXEnumerateVideoDevicesNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::array(nelements,1), ")", " returned ", ret);
    return ret;
}

// GLX_NV_swap_group

static Bool REGAL_CALL log_glXBindSwapBarrierNV(Display *dpy, GLuint group, GLuint barrier)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXBindSwapBarrierNV)(dpy, group, barrier);
    Driver("glXBindSwapBarrierNV","(", boost::print::optional(dpy,Logging::pointers), ", ", group, ", ", barrier, ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXJoinSwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint group)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXJoinSwapGroupNV)(dpy, drawable, group);
    Driver("glXJoinSwapGroupNV","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", group, ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXQueryFrameCountNV(Display *dpy, int screen, GLuint *count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQueryFrameCountNV)(dpy, screen, count);
    Driver("glXQueryFrameCountNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::array(count,1), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXQueryMaxSwapGroupsNV(Display *dpy, int screen, GLuint *maxGroups, GLuint *maxBarriers)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQueryMaxSwapGroupsNV)(dpy, screen, maxGroups, maxBarriers);
    Driver("glXQueryMaxSwapGroupsNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::array(maxGroups,1), ", ", boost::print::array(maxBarriers,1), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXQuerySwapGroupNV(Display *dpy, GLXDrawable drawable, GLuint *group, GLuint *barrier)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQuerySwapGroupNV)(dpy, drawable, group, barrier);
    Driver("glXQuerySwapGroupNV","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", boost::print::array(group,1), ", ", boost::print::array(barrier,1), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXResetFrameCountNV(Display *dpy, int screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXResetFrameCountNV)(dpy, screen);
    Driver("glXResetFrameCountNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ")", " returned ", ret);
    return ret;
}

// GLX_NV_vertex_array_range

static void *REGAL_CALL log_glXAllocateMemoryNV(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    void * ret = _next->call(&_next->glXAllocateMemoryNV)(size, readFrequency, writeFrequency, priority);
    Driver("glXAllocateMemoryNV","(", size, ", ", readFrequency, ", ", writeFrequency, ", ", priority, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXFreeMemoryNV(void *pointer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXFreeMemoryNV)(pointer);
    Driver("glXFreeMemoryNV","(", boost::print::optional(pointer,Logging::pointers), ")");
}

// GLX_NV_video_capture

static int REGAL_CALL log_glXBindVideoCaptureDeviceNV(Display *dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXBindVideoCaptureDeviceNV)(dpy, video_capture_slot, device);
    Driver("glXBindVideoCaptureDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", video_capture_slot, ", ", device, ")", " returned ", ret);
    return ret;
}

static GLXVideoCaptureDeviceNV *REGAL_CALL log_glXEnumerateVideoCaptureDevicesNV(Display *dpy, int screen, int *nelements)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXVideoCaptureDeviceNV * ret = _next->call(&_next->glXEnumerateVideoCaptureDevicesNV)(dpy, screen, nelements);
    Driver("glXEnumerateVideoCaptureDevicesNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(nelements,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glXLockVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXLockVideoCaptureDeviceNV)(dpy, device);
    Driver("glXLockVideoCaptureDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", device, ")");
}

static int REGAL_CALL log_glXQueryVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device, int attribute, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXQueryVideoCaptureDeviceNV)(dpy, device, attribute, value);
    Driver("glXQueryVideoCaptureDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", device, ", ", attribute, ", ", boost::print::optional(value,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_glXReleaseVideoCaptureDeviceNV(Display *dpy, GLXVideoCaptureDeviceNV device)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXReleaseVideoCaptureDeviceNV)(dpy, device);
    Driver("glXReleaseVideoCaptureDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", device, ")");
}

// GLX_NV_video_output

static int REGAL_CALL log_glXBindVideoImageNV(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXBindVideoImageNV)(dpy, VideoDevice, pbuf, iVideoBuffer);
    Driver("glXBindVideoImageNV","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(VideoDevice,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ", ", iVideoBuffer, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXGetVideoDeviceNV(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetVideoDeviceNV)(dpy, screen, numVideoDevices, pVideoDevice);
    Driver("glXGetVideoDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", numVideoDevices, ", ", boost::print::array(pVideoDevice,numVideoDevices), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXGetVideoInfoNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetVideoInfoNV)(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    Driver("glXGetVideoInfoNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(VideoDevice,Logging::pointers), ", ", boost::print::array(pulCounterOutputPbuffer,1), ", ", boost::print::array(pulCounterOutputVideo,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXReleaseVideoDeviceNV(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXReleaseVideoDeviceNV)(dpy, screen, VideoDevice);
    Driver("glXReleaseVideoDeviceNV","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(VideoDevice,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXReleaseVideoImageNV(Display *dpy, GLXPbuffer pbuf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXReleaseVideoImageNV)(dpy, pbuf);
    Driver("glXReleaseVideoImageNV","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXSendPbufferToVideoNV(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXSendPbufferToVideoNV)(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
    Driver("glXSendPbufferToVideoNV","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ", ", iBufferType, ", ", boost::print::array(pulCounterPbuffer,1), ", ", toString(bBlock), ")", " returned ", ret);
    return ret;
}

// GLX_OML_sync_control

static Bool REGAL_CALL log_glXGetMscRateOML(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXGetMscRateOML)(dpy, drawable, numerator, denominator);
    Driver("glXGetMscRateOML","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", boost::print::array(numerator,1), ", ", boost::print::array(denominator,1), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXGetSyncValuesOML(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXGetSyncValuesOML)(dpy, drawable, ust, msc, sbc);
    Driver("glXGetSyncValuesOML","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

static int64_t REGAL_CALL log_glXSwapBuffersMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int64_t  ret = _next->call(&_next->glXSwapBuffersMscOML)(dpy, drawable, target_msc, divisor, remainder);
    Driver("glXSwapBuffersMscOML","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXWaitForMscOML(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXWaitForMscOML)(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
    Driver("glXWaitForMscOML","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", target_msc, ", ", divisor, ", ", remainder, ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXWaitForSbcOML(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXWaitForSbcOML)(dpy, drawable, target_sbc, ust, msc, sbc);
    Driver("glXWaitForSbcOML","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", target_sbc, ", ", boost::print::array(ust,1), ", ", boost::print::array(msc,1), ", ", boost::print::array(sbc,1), ")", " returned ", ret);
    return ret;
}

// GLX_SGIX_fbconfig

static GLXFBConfigSGIX *REGAL_CALL log_glXChooseFBConfigSGIX(Display *dpy, int screen, const int *attrib_list, int *nelements)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXFBConfigSGIX * ret = _next->call(&_next->glXChooseFBConfigSGIX)(dpy, screen, attrib_list, nelements);
    Driver("glXChooseFBConfigSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::optional(attrib_list,Logging::pointers), ", ", boost::print::optional(nelements,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static GLXContext REGAL_CALL log_glXCreateContextWithConfigSGIX(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXContext  ret = _next->call(&_next->glXCreateContextWithConfigSGIX)(dpy, config, render_type, share_list, direct);
    Driver("glXCreateContextWithConfigSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", render_type, ", ", boost::print::optional(share_list,Logging::pointers), ", ", direct, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static GLXPixmap REGAL_CALL log_glXCreateGLXPixmapWithConfigSGIX(Display *dpy, GLXFBConfig config, Pixmap pixmap)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPixmap  ret = _next->call(&_next->glXCreateGLXPixmapWithConfigSGIX)(dpy, config, pixmap);
    Driver("glXCreateGLXPixmapWithConfigSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", boost::print::optional(pixmap,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static int REGAL_CALL log_glXGetFBConfigAttribSGIX(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetFBConfigAttribSGIX)(dpy, config, attribute, value);
    Driver("glXGetFBConfigAttribSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", attribute, ", ", boost::print::array(value,1), ")", " returned ", ret);
    return ret;
}

static GLXFBConfigSGIX REGAL_CALL log_glXGetFBConfigFromVisualSGIX(Display *dpy, XVisualInfo *vis)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXFBConfigSGIX  ret = _next->call(&_next->glXGetFBConfigFromVisualSGIX)(dpy, vis);
    Driver("glXGetFBConfigFromVisualSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(vis,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static XVisualInfo *REGAL_CALL log_glXGetVisualFromFBConfigSGIX(Display *dpy, GLXFBConfig config)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    XVisualInfo * ret = _next->call(&_next->glXGetVisualFromFBConfigSGIX)(dpy, config);
    Driver("glXGetVisualFromFBConfigSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// GLX_SGIX_pbuffer

static GLXPbuffer REGAL_CALL log_glXCreateGLXPbufferSGIX(Display *dpy, GLXFBConfig config, unsigned int width, unsigned int height, int *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXPbuffer  ret = _next->call(&_next->glXCreateGLXPbufferSGIX)(dpy, config, width, height, attrib_list);
    Driver("glXCreateGLXPbufferSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", config, ", ", width, ", ", height, ", ", boost::print::optional(attrib_list,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static void REGAL_CALL log_glXDestroyGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXDestroyGLXPbufferSGIX)(dpy, pbuf);
    Driver("glXDestroyGLXPbufferSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ")");
}

static void REGAL_CALL log_glXGetSelectedEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long *mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXGetSelectedEventSGIX)(dpy, drawable, mask);
    Driver("glXGetSelectedEventSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", boost::print::array(mask,1), ")");
}

static void REGAL_CALL log_glXQueryGLXPbufferSGIX(Display *dpy, GLXPbuffer pbuf, int attribute, unsigned int *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXQueryGLXPbufferSGIX)(dpy, pbuf, attribute, value);
    Driver("glXQueryGLXPbufferSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(pbuf,Logging::pointers), ", ", attribute, ", ", boost::print::array(value,1), ")");
}

static void REGAL_CALL log_glXSelectEventSGIX(Display *dpy, GLXDrawable drawable, unsigned long mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXSelectEventSGIX)(dpy, drawable, mask);
    Driver("glXSelectEventSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", mask, ")");
}

// GLX_SGIX_swap_barrier

static void REGAL_CALL log_glXBindSwapBarrierSGIX(Display *dpy, GLXDrawable drawable, int barrier)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXBindSwapBarrierSGIX)(dpy, drawable, barrier);
    Driver("glXBindSwapBarrierSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", barrier, ")");
}

static Bool REGAL_CALL log_glXQueryMaxSwapBarriersSGIX(Display *dpy, int screen, int *max)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXQueryMaxSwapBarriersSGIX)(dpy, screen, max);
    Driver("glXQueryMaxSwapBarriersSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", screen, ", ", boost::print::array(max,1), ")", " returned ", ret);
    return ret;
}

// GLX_SGIX_swap_group

static void REGAL_CALL log_glXJoinSwapGroupSGIX(Display *dpy, GLXDrawable drawable, GLXDrawable member)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXJoinSwapGroupSGIX)(dpy, drawable, member);
    Driver("glXJoinSwapGroupSGIX","(", boost::print::optional(dpy,Logging::pointers), ", ", drawable, ", ", member, ")");
}

// GLX_SGIX_video_resize

static int REGAL_CALL log_glXBindChannelToWindowSGIX(Display *display, int screen, int channel, Window window)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXBindChannelToWindowSGIX)(display, screen, channel, window);
    Driver("glXBindChannelToWindowSGIX","(", boost::print::optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", window, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXChannelRectSGIX(Display *display, int screen, int channel, int x, int y, int w, int h)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXChannelRectSGIX)(display, screen, channel, x, y, w, h);
    Driver("glXChannelRectSGIX","(", boost::print::optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", x, ", ", y, ", ", w, ", ", h, ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXChannelRectSyncSGIX(Display *display, int screen, int channel, GLenum synctype)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXChannelRectSyncSGIX)(display, screen, channel, synctype);
    Driver("glXChannelRectSyncSGIX","(", boost::print::optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", toString(synctype), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXQueryChannelDeltasSGIX(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXQueryChannelDeltasSGIX)(display, screen, channel, x, y, w, h);
    Driver("glXQueryChannelDeltasSGIX","(", boost::print::optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", boost::print::array(x,1), ", ", boost::print::array(y,1), ", ", boost::print::array(w,1), ", ", boost::print::array(h,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXQueryChannelRectSGIX(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXQueryChannelRectSGIX)(display, screen, channel, dx, dy, dw, dh);
    Driver("glXQueryChannelRectSGIX","(", boost::print::optional(display,Logging::pointers), ", ", screen, ", ", channel, ", ", boost::print::array(dx,1), ", ", boost::print::array(dy,1), ", ", boost::print::array(dw,1), ", ", boost::print::array(dh,1), ")", " returned ", ret);
    return ret;
}

// GLX_SGI_cushion

static void REGAL_CALL log_glXCushionSGI(Display *dpy, Window window, float cushion)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->glXCushionSGI)(dpy, window, cushion);
    Driver("glXCushionSGI","(", boost::print::optional(dpy,Logging::pointers), ", ", window, ", ", cushion, ")");
}

// GLX_SGI_make_current_read

static GLXDrawable REGAL_CALL log_glXGetCurrentReadDrawableSGI(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLXDrawable  ret = _next->call(&_next->glXGetCurrentReadDrawableSGI)();
    Driver("glXGetCurrentReadDrawableSGI","()", " returned ", ret);
    return ret;
}

static Bool REGAL_CALL log_glXMakeCurrentReadSGI(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Bool  ret = _next->call(&_next->glXMakeCurrentReadSGI)(dpy, draw, read, ctx);
    Driver("glXMakeCurrentReadSGI","(", boost::print::optional(dpy,Logging::pointers), ", ", draw, ", ", read, ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// GLX_SGI_swap_control

static int REGAL_CALL log_glXSwapIntervalSGI(int interval)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXSwapIntervalSGI)(interval);
    Driver("glXSwapIntervalSGI","(", interval, ")", " returned ", ret);
    return ret;
}

// GLX_SGI_video_sync

static int REGAL_CALL log_glXGetVideoSyncSGI(unsigned int *count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetVideoSyncSGI)(count);
    Driver("glXGetVideoSyncSGI","(", boost::print::array(count,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *count)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXWaitVideoSyncSGI)(divisor, remainder, count);
    Driver("glXWaitVideoSyncSGI","(", divisor, ", ", remainder, ", ", boost::print::array(count,1), ")", " returned ", ret);
    return ret;
}

// GLX_SUN_get_transparent_index

static Status REGAL_CALL log_glXGetTransparentIndexSUN(Display *dpy, Window overlay, Window underlay, unsigned long *pTransparentIndex)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    Status  ret = _next->call(&_next->glXGetTransparentIndexSUN)(dpy, overlay, underlay, pTransparentIndex);
    Driver("glXGetTransparentIndexSUN","(", boost::print::optional(dpy,Logging::pointers), ", ", overlay, ", ", underlay, ", ", boost::print::array(pTransparentIndex,1), ")", " returned ", ret);
    return ret;
}

// GLX_SUN_video_resize

static int REGAL_CALL log_glXGetVideoResizeSUN(Display *display, GLXDrawable window, float *factor)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXGetVideoResizeSUN)(display, window, factor);
    Driver("glXGetVideoResizeSUN","(", boost::print::optional(display,Logging::pointers), ", ", window, ", ", boost::print::array(factor,1), ")", " returned ", ret);
    return ret;
}

static int REGAL_CALL log_glXVideoResizeSUN(Display *display, GLXDrawable window, float factor)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    int  ret = _next->call(&_next->glXVideoResizeSUN)(display, window, factor);
    Driver("glXVideoResizeSUN","(", boost::print::optional(display,Logging::pointers), ", ", window, ", ", factor, ")", " returned ", ret);
    return ret;
}

#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

// CGL_VERSION_1_0

static CGLError REGAL_CALL log_CGLChoosePixelFormat(const CGLPixelFormatAttribute *attribs, CGLPixelFormatObj *pix, GLint *npix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLChoosePixelFormat)(attribs, pix, npix);
    Driver("CGLChoosePixelFormat","(", attribs, ", ", pix, ", ", boost::print::optional(npix,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLClearDrawable(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLClearDrawable)(ctx);
    Driver("CGLClearDrawable","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLCopyContext(CGLContextObj src, CGLContextObj dst, GLbitfield mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLCopyContext)(src, dst, mask);
    Driver("CGLCopyContext","(", src, ", ", dst, ", ", mask, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLCreateContext(CGLPixelFormatObj pix, CGLContextObj share, CGLContextObj *ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLCreateContext)(pix, share, ctx);
    Driver("CGLCreateContext","(", pix, ", ", share, ", ", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDescribePixelFormat(CGLPixelFormatObj pix, GLint pix_num, CGLPixelFormatAttribute attrib, GLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDescribePixelFormat)(pix, pix_num, attrib, value);
    Driver("CGLDescribePixelFormat","(", pix, ", ", pix_num, ", ", attrib, ", ", boost::print::optional(value,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDescribeRenderer(CGLRendererInfoObj rend, GLint rend_num, CGLRendererProperty prop, GLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDescribeRenderer)(rend, rend_num, prop, value);
    Driver("CGLDescribeRenderer","(", rend, ", ", rend_num, ", ", prop, ", ", boost::print::optional(value,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDestroyContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDestroyContext)(ctx);
    Driver("CGLDestroyContext","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDestroyPixelFormat(CGLPixelFormatObj pix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDestroyPixelFormat)(pix);
    Driver("CGLDestroyPixelFormat","(", pix, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDestroyRendererInfo(CGLRendererInfoObj rend)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDestroyRendererInfo)(rend);
    Driver("CGLDestroyRendererInfo","(", rend, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDisable(CGLContextObj ctx, CGLContextEnable pname)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDisable)(ctx, pname);
    Driver("CGLDisable","(", ctx, ", ", pname, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLEnable(CGLContextObj ctx, CGLContextEnable pname)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLEnable)(ctx, pname);
    Driver("CGLEnable","(", ctx, ", ", pname, ")", " returned ", ret);
    return ret;
}

static const char *REGAL_CALL log_CGLErrorString(CGLError error)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->CGLErrorString)(error);
    Driver("CGLErrorString","(", error, ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

static CGLError REGAL_CALL log_CGLFlushDrawable(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLFlushDrawable)(ctx);
    Driver("CGLFlushDrawable","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetOffScreen(CGLContextObj ctx, GLsizei *width, GLsizei *height, GLsizei *rowbytes, void **baseaddr)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetOffScreen)(ctx, width, height, rowbytes, baseaddr);
    Driver("CGLGetOffScreen","(", ctx, ", ", boost::print::optional(width,Logging::pointers), ", ", boost::print::optional(height,Logging::pointers), ", ", boost::print::optional(rowbytes,Logging::pointers), ", ", boost::print::optional(baseaddr,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetOption(CGLGlobalOption pname, GLint *param)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetOption)(pname, param);
    Driver("CGLGetOption","(", pname, ", ", boost::print::optional(param,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetParameter(CGLContextObj ctx, CGLContextParameter pname, GLint *params)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetParameter)(ctx, pname, params);
    Driver("CGLGetParameter","(", ctx, ", ", pname, ", ", boost::print::optional(params,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_CGLGetVersion(GLint *majorvers, GLint *minorvers)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->CGLGetVersion)(majorvers, minorvers);
    Driver("CGLGetVersion","(", boost::print::optional(majorvers,Logging::pointers), ", ", boost::print::optional(minorvers,Logging::pointers), ")");
}

static CGLError REGAL_CALL log_CGLGetVirtualScreen(CGLContextObj ctx, GLint *screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetVirtualScreen)(ctx, screen);
    Driver("CGLGetVirtualScreen","(", ctx, ", ", boost::print::optional(screen,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLIsEnabled(CGLContextObj ctx, CGLContextEnable pname, GLint *enable)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLIsEnabled)(ctx, pname, enable);
    Driver("CGLIsEnabled","(", ctx, ", ", pname, ", ", boost::print::optional(enable,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLQueryRendererInfo(GLuint display_mask, CGLRendererInfoObj *rend, GLint *nrend)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLQueryRendererInfo)(display_mask, rend, nrend);
    Driver("CGLQueryRendererInfo","(", display_mask, ", ", rend, ", ", boost::print::optional(nrend,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetFullScreen(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetFullScreen)(ctx);
    Driver("CGLSetFullScreen","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetOffScreen(CGLContextObj ctx, GLsizei width, GLsizei height, GLsizei rowbytes, void *baseaddr)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetOffScreen)(ctx, width, height, rowbytes, baseaddr);
    Driver("CGLSetOffScreen","(", ctx, ", ", width, ", ", height, ", ", rowbytes, ", ", boost::print::optional(baseaddr,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetOption(CGLGlobalOption pname, GLint param)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetOption)(pname, param);
    Driver("CGLSetOption","(", pname, ", ", param, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetParameter(CGLContextObj ctx, CGLContextParameter pname, const GLint *params)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetParameter)(ctx, pname, params);
    Driver("CGLSetParameter","(", ctx, ", ", pname, ", ", boost::print::optional(params,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetVirtualScreen(CGLContextObj ctx, GLint screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetVirtualScreen)(ctx, screen);
    Driver("CGLSetVirtualScreen","(", ctx, ", ", screen, ")", " returned ", ret);
    return ret;
}

// CGL_VERSION_1_1

static CGLError REGAL_CALL log_CGLCreatePBuffer(GLsizei width, GLsizei height, GLenum target, GLenum internalFormat, GLint max_level, CGLPBufferObj *pbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLCreatePBuffer)(width, height, target, internalFormat, max_level, pbuffer);
    Driver("CGLCreatePBuffer","(", width, ", ", height, ", ", toString(target), ", ", toString(internalFormat), ", ", max_level, ", ", pbuffer, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDescribePBuffer(CGLPBufferObj pbuffer, GLsizei *width, GLsizei *height, GLenum *target, GLenum *internalFormat, GLint *mipmap)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDescribePBuffer)(pbuffer, width, height, target, internalFormat, mipmap);
    Driver("CGLDescribePBuffer","(", pbuffer, ", ", boost::print::optional(width,Logging::pointers), ", ", boost::print::optional(height,Logging::pointers), ", ", boost::print::optional(target,Logging::pointers), ", ", boost::print::optional(internalFormat,Logging::pointers), ", ", boost::print::optional(mipmap,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLDestroyPBuffer(CGLPBufferObj pbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLDestroyPBuffer)(pbuffer);
    Driver("CGLDestroyPBuffer","(", pbuffer, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetPBuffer(CGLContextObj ctx, CGLPBufferObj *pbuffer, GLenum *face, GLint *level, GLint *screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetPBuffer)(ctx, pbuffer, face, level, screen);
    Driver("CGLGetPBuffer","(", ctx, ", ", pbuffer, ", ", boost::print::optional(face,Logging::pointers), ", ", boost::print::optional(level,Logging::pointers), ", ", boost::print::optional(screen,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetPBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum face, GLint level, GLint screen)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetPBuffer)(ctx, pbuffer, face, level, screen);
    Driver("CGLSetPBuffer","(", ctx, ", ", pbuffer, ", ", toString(face), ", ", level, ", ", screen, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLTexImagePBuffer(CGLContextObj ctx, CGLPBufferObj pbuffer, GLenum source)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLTexImagePBuffer)(ctx, pbuffer, source);
    Driver("CGLTexImagePBuffer","(", ctx, ", ", pbuffer, ", ", toString(source), ")", " returned ", ret);
    return ret;
}

// CGL_VERSION_1_2

static GLuint REGAL_CALL log_CGLGetContextRetainCount(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->CGLGetContextRetainCount)(ctx);
    Driver("CGLGetContextRetainCount","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetGlobalOption(CGLGlobalOption pname, GLint *params)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetGlobalOption)(pname, params);
    Driver("CGLGetGlobalOption","(", pname, ", ", boost::print::optional(params,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_CGLGetPBufferRetainCount(CGLPBufferObj pbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->CGLGetPBufferRetainCount)(pbuffer);
    Driver("CGLGetPBufferRetainCount","(", pbuffer, ")", " returned ", ret);
    return ret;
}

static CGLPixelFormatObj REGAL_CALL log_CGLGetPixelFormat(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLPixelFormatObj  ret = _next->call(&_next->CGLGetPixelFormat)(ctx);
    Driver("CGLGetPixelFormat","(", ctx, ")", " returned ", ret);
    return ret;
}

static GLuint REGAL_CALL log_CGLGetPixelFormatRetainCount(CGLPixelFormatObj pix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    GLuint  ret = _next->call(&_next->CGLGetPixelFormatRetainCount)(pix);
    Driver("CGLGetPixelFormatRetainCount","(", pix, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLLockContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLLockContext)(ctx);
    Driver("CGLLockContext","(", ctx, ")", " returned ", ret);
    return ret;
}

static void REGAL_CALL log_CGLReleaseContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->CGLReleaseContext)(ctx);
    Driver("CGLReleaseContext","(", ctx, ")");
}

static void REGAL_CALL log_CGLReleasePBuffer(CGLPBufferObj pbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->CGLReleasePBuffer)(pbuffer);
    Driver("CGLReleasePBuffer","(", pbuffer, ")");
}

static void REGAL_CALL log_CGLReleasePixelFormat(CGLPixelFormatObj pix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->CGLReleasePixelFormat)(pix);
    Driver("CGLReleasePixelFormat","(", pix, ")");
}

static CGLContextObj REGAL_CALL log_CGLRetainContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLContextObj  ret = _next->call(&_next->CGLRetainContext)(ctx);
    Driver("CGLRetainContext","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLPBufferObj REGAL_CALL log_CGLRetainPBuffer(CGLPBufferObj pbuffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLPBufferObj  ret = _next->call(&_next->CGLRetainPBuffer)(pbuffer);
    Driver("CGLRetainPBuffer","(", pbuffer, ")", " returned ", ret);
    return ret;
}

static CGLPixelFormatObj REGAL_CALL log_CGLRetainPixelFormat(CGLPixelFormatObj pix)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLPixelFormatObj  ret = _next->call(&_next->CGLRetainPixelFormat)(pix);
    Driver("CGLRetainPixelFormat","(", pix, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetGlobalOption(CGLGlobalOption pname, const GLint *params)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetGlobalOption)(pname, params);
    Driver("CGLSetGlobalOption","(", pname, ", ", boost::print::optional(params,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLUnlockContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLUnlockContext)(ctx);
    Driver("CGLUnlockContext","(", ctx, ")", " returned ", ret);
    return ret;
}

// CGL_VERSION_1_3

static CGLContextObj REGAL_CALL log_CGLGetCurrentContext(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLContextObj  ret = _next->call(&_next->CGLGetCurrentContext)();
    Driver("CGLGetCurrentContext","()", " returned ", ret);
    return ret;
}

static CGLShareGroupObj REGAL_CALL log_CGLGetShareGroup(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLShareGroupObj  ret = _next->call(&_next->CGLGetShareGroup)(ctx);
    Driver("CGLGetShareGroup","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLGetSurface(CGLContextObj ctx, CGSConnectionID *conn, CGSWindowID *win, CGSSurfaceID *srf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLGetSurface)(ctx, conn, win, srf);
    Driver("CGLGetSurface","(", ctx, ", ", conn, ", ", win, ", ", srf, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetCurrentContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetCurrentContext)(ctx);
    Driver("CGLSetCurrentContext","(", ctx, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLSetSurface(CGLContextObj ctx, CGSConnectionID conn, CGSWindowID win, CGSSurfaceID srf)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLSetSurface)(ctx, conn, win, srf);
    Driver("CGLSetSurface","(", ctx, ", ", conn, ", ", win, ", ", srf, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLTexImageIOSurface2D(CGLContextObj ctx, GLenum target, GLenum internal_format, GLsizei width, GLsizei height, GLenum format, GLenum type, IOSurfaceRef ioSurface, GLuint plane)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLTexImageIOSurface2D)(ctx, target, internal_format, width, height, format, type, ioSurface, plane);
    Driver("CGLTexImageIOSurface2D","(", ctx, ", ", toString(target), ", ", toString(internal_format), ", ", width, ", ", height, ", ", toString(format), ", ", toString(type), ", ", ioSurface, ")", " returned ", ret);
    return ret;
}

static CGLError REGAL_CALL log_CGLUpdateContext(CGLContextObj ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    CGLError  ret = _next->call(&_next->CGLUpdateContext)(ctx);
    Driver("CGLUpdateContext","(", ctx, ")", " returned ", ret);
    return ret;
}

#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

// EGL_ANGLE_query_surface_pointer

static EGLBoolean REGAL_CALL log_eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, GLvoid **value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglQuerySurfacePointerANGLE)(dpy, surface, attribute, value);
    Driver("eglQuerySurfacePointerANGLE","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", attribute, ", ", boost::print::optional(value,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// EGL_KHR_fence_sync

static EGLint REGAL_CALL log_eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags, EGLTimeKHR timeout)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLint  ret = _next->call(&_next->eglClientWaitSyncKHR)(dpy, GLsync, flags, timeout);
    Driver("eglClientWaitSyncKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(GLsync,Logging::pointers), ", ", flags, ", ", timeout, ")", " returned ", ret);
    return ret;
}

static EGLSyncKHR REGAL_CALL log_eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSyncKHR  ret = _next->call(&_next->eglCreateSyncKHR)(dpy, type, attrib_list);
    Driver("eglCreateSyncKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", EGLenumToString(type), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglDestroySyncKHR)(dpy, GLsync);
    Driver("eglDestroySyncKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(GLsync,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint attribute, EGLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglGetSyncAttribKHR)(dpy, GLsync, attribute, value);
    Driver("eglGetSyncAttribKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(GLsync,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

// EGL_KHR_image_base

static EGLImageKHR REGAL_CALL log_eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLImageKHR  ret = _next->call(&_next->eglCreateImageKHR)(dpy, ctx, target, buffer, attrib_list);
    Driver("eglCreateImageKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ", ", EGLenumToString(target), ", ", boost::print::optional(buffer,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglDestroyImageKHR)(dpy, image);
    Driver("eglDestroyImageKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(image,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// EGL_KHR_lock_surface

static EGLBoolean REGAL_CALL log_eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglLockSurfaceKHR)(display, surface, attrib_list);
    Driver("eglLockSurfaceKHR","(", boost::print::optional(display,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", attrib_list, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglUnlockSurfaceKHR)(display, surface);
    Driver("eglUnlockSurfaceKHR","(", boost::print::optional(display,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// EGL_KHR_stream_consumer_gltexture

static EGLBoolean REGAL_CALL log_eglStreamConsumerAcquireKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglStreamConsumerAcquireKHR)(dpy, stream);
    Driver("eglStreamConsumerAcquireKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(stream,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglStreamConsumerGLTextureExternalKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglStreamConsumerGLTextureExternalKHR)(dpy, stream);
    Driver("eglStreamConsumerGLTextureExternalKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(stream,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglStreamConsumerReleaseKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglStreamConsumerReleaseKHR)(dpy, stream);
    Driver("eglStreamConsumerReleaseKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(stream,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// EGL_KHR_stream_cross_process_fd

static EGLStreamKHR REGAL_CALL log_eglCreateStreamFromFileDescriptorKHR(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLStreamKHR  ret = _next->call(&_next->eglCreateStreamFromFileDescriptorKHR)(dpy, file_descriptor);
    Driver("eglCreateStreamFromFileDescriptorKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", file_descriptor, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLNativeFileDescriptorKHR REGAL_CALL log_eglGetStreamFileDescriptorKHR(EGLDisplay dpy, EGLStreamKHR stream)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLNativeFileDescriptorKHR  ret = _next->call(&_next->eglGetStreamFileDescriptorKHR)(dpy, stream);
    Driver("eglGetStreamFileDescriptorKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(stream,Logging::pointers), ")", " returned ", ret);
    return ret;
}

// EGL_KHR_stream_producer_eglsurface

static EGLSurface REGAL_CALL log_eglCreateStreamProducerSurfaceKHR(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglCreateStreamProducerSurfaceKHR)(dpy, config, stream, attrib_list);
    Driver("eglCreateStreamProducerSurfaceKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", boost::print::optional(stream,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

// EGL_KHR_wait_sync

static EGLint REGAL_CALL log_eglWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR GLsync, EGLint flags)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLint  ret = _next->call(&_next->eglWaitSyncKHR)(dpy, GLsync, flags);
    Driver("eglWaitSyncKHR","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(GLsync,Logging::pointers), ", ", flags, ")", " returned ", ret);
    return ret;
}

// EGL_MESA_drm_image

static EGLImageKHR REGAL_CALL log_eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLImageKHR  ret = _next->call(&_next->eglCreateDRMImageMESA)(dpy, attrib_list);
    Driver("eglCreateDRMImageMESA","(", boost::print::optional(dpy,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *name, EGLint *handle, EGLint *stride)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglExportDRMImageMESA)(dpy, image, name, handle, stride);
    Driver("eglExportDRMImageMESA","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(image,Logging::pointers), ", ", name, ", ", handle, ", ", stride, ")", " returned ", ret);
    return ret;
}

// EGL_NV_coverage_sample

static void REGAL_CALL log_eglCoverageMaskNV(GLboolean mask)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->eglCoverageMaskNV)(mask);
    Driver("eglCoverageMaskNV","(", toString(mask), ")");
}

static void REGAL_CALL log_eglCoverageOperationNV(GLenum operation)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    _next->call(&_next->eglCoverageOperationNV)(operation);
    Driver("eglCoverageOperationNV","(", toString(operation), ")");
}

// EGL_NV_post_sub_buffer

static EGLBoolean REGAL_CALL log_eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglPostSubBufferNV)(dpy, surface, x, y, width, height);
    Driver("eglPostSubBufferNV","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", x, ", ", y, ", ", width, ", ", height, ")", " returned ", ret);
    return ret;
}

// EGL_NV_sync

static EGLint REGAL_CALL log_eglClientWaitSyncNV(EGLSyncNV GLsync, EGLint flags, EGLTimeNV timeout)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLint  ret = _next->call(&_next->eglClientWaitSyncNV)(GLsync, flags, timeout);
    Driver("eglClientWaitSyncNV","(", boost::print::optional(GLsync,Logging::pointers), ", ", flags, ", ", timeout, ")", " returned ", ret);
    return ret;
}

static EGLSyncNV REGAL_CALL log_eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSyncNV  ret = _next->call(&_next->eglCreateFenceSyncNV)(dpy, condition, attrib_list);
    Driver("eglCreateFenceSyncNV","(", boost::print::optional(dpy,Logging::pointers), ", ", EGLenumToString(condition), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglDestroySyncNV(EGLSyncNV GLsync)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglDestroySyncNV)(GLsync);
    Driver("eglDestroySyncNV","(", boost::print::optional(GLsync,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglFenceNV(EGLSyncNV GLsync)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglFenceNV)(GLsync);
    Driver("eglFenceNV","(", boost::print::optional(GLsync,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglGetSyncAttribNV(EGLSyncNV GLsync, EGLint attribute, EGLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglGetSyncAttribNV)(GLsync, attribute, value);
    Driver("eglGetSyncAttribNV","(", boost::print::optional(GLsync,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglSignalSyncNV(EGLSyncNV GLsync, EGLenum mode)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglSignalSyncNV)(GLsync, mode);
    Driver("eglSignalSyncNV","(", boost::print::optional(GLsync,Logging::pointers), ", ", EGLenumToString(mode), ")", " returned ", ret);
    return ret;
}

// EGL_NV_system_time

static EGLuint64NV REGAL_CALL log_eglGetSystemTimeFrequencyNV(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLuint64NV  ret = _next->call(&_next->eglGetSystemTimeFrequencyNV)();
    Driver("eglGetSystemTimeFrequencyNV","()", " returned ", ret);
    return ret;
}

static EGLuint64NV REGAL_CALL log_eglGetSystemTimeNV(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLuint64NV  ret = _next->call(&_next->eglGetSystemTimeNV)();
    Driver("eglGetSystemTimeNV","()", " returned ", ret);
    return ret;
}

// EGL_VERSION_1_0

static EGLBoolean REGAL_CALL log_eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglChooseConfig)(dpy, attrib_list, configs, config_size, num_config);
    Driver("eglChooseConfig","(", boost::print::optional(dpy,Logging::pointers), ", ", attrib_list, ", ", configs, ", ", config_size, ", ", num_config, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglCopyBuffers)(dpy, surface, target);
    Driver("eglCopyBuffers","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", boost::print::optional(target,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLContext REGAL_CALL log_eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLContext  ret = _next->call(&_next->eglCreateContext)(dpy, config, share_context, attrib_list);
    Driver("eglCreateContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", boost::print::optional(share_context,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLSurface REGAL_CALL log_eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglCreatePbufferSurface)(dpy, config, attrib_list);
    Driver("eglCreatePbufferSurface","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLSurface REGAL_CALL log_eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglCreatePixmapSurface)(dpy, config, pixmap, attrib_list);
    Driver("eglCreatePixmapSurface","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", boost::print::optional(pixmap,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLSurface REGAL_CALL log_eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglCreateWindowSurface)(dpy, config, win, attrib_list);
    Driver("eglCreateWindowSurface","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", boost::print::optional(win,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglDestroyContext(EGLDisplay dpy, EGLContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglDestroyContext)(dpy, ctx);
    Driver("eglDestroyContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglDestroySurface(EGLDisplay dpy, EGLSurface surface)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglDestroySurface)(dpy, surface);
    Driver("eglDestroySurface","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglGetConfigAttrib)(dpy, config, attribute, value);
    Driver("eglGetConfigAttrib","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglGetConfigs)(dpy, configs, config_size, num_config);
    Driver("eglGetConfigs","(", boost::print::optional(dpy,Logging::pointers), ", ", configs, ", ", config_size, ", ", num_config, ")", " returned ", ret);
    return ret;
}

static EGLContext REGAL_CALL log_eglGetCurrentContext(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLContext  ret = _next->call(&_next->eglGetCurrentContext)();
    Driver("eglGetCurrentContext","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLDisplay REGAL_CALL log_eglGetCurrentDisplay(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLDisplay  ret = _next->call(&_next->eglGetCurrentDisplay)();
    Driver("eglGetCurrentDisplay","()", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLSurface REGAL_CALL log_eglGetCurrentSurface(EGLint readdraw)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglGetCurrentSurface)(readdraw);
    Driver("eglGetCurrentSurface","(", readdraw, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLDisplay REGAL_CALL log_eglGetDisplay(EGLNativeDisplayType display_id)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLDisplay  ret = _next->call(&_next->eglGetDisplay)(display_id);
    Driver("eglGetDisplay","(", boost::print::optional(display_id,Logging::pointers), ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLint REGAL_CALL log_eglGetError(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLint  ret = _next->call(&_next->eglGetError)();
    Driver("eglGetError","()", " returned ", ret);
    return ret;
}

static __eglMustCastToProperFunctionPointerType REGAL_CALL log_eglGetProcAddress(const char *procname)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    __eglMustCastToProperFunctionPointerType  ret = _next->call(&_next->eglGetProcAddress)(procname);
    Driver("eglGetProcAddress","(", boost::print::quote(procname,'"'), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglInitialize)(dpy, major, minor);
    Driver("eglInitialize","(", boost::print::optional(dpy,Logging::pointers), ", ", major, ", ", minor, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglMakeCurrent)(dpy, draw, read, ctx);
    Driver("eglMakeCurrent","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(draw,Logging::pointers), ", ", boost::print::optional(read,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglQueryContext)(dpy, ctx, attribute, value);
    Driver("eglQueryContext","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(ctx,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

static const char *REGAL_CALL log_eglQueryString(EGLDisplay dpy, EGLint name)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    const char * ret = _next->call(&_next->eglQueryString)(dpy, name);
    Driver("eglQueryString","(", boost::print::optional(dpy,Logging::pointers), ", ", EGLenumToString(name), ")", " returned ", boost::print::quote(ret,'"'));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglQuerySurface)(dpy, surface, attribute, value);
    Driver("eglQuerySurface","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglSwapBuffers)(dpy, surface);
    Driver("eglSwapBuffers","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglTerminate(EGLDisplay dpy)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglTerminate)(dpy);
    Driver("eglTerminate","(", boost::print::optional(dpy,Logging::pointers), ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglWaitGL(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglWaitGL)();
    Driver("eglWaitGL","()", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglWaitNative(EGLint engine)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglWaitNative)(engine);
    Driver("eglWaitNative","(", engine, ")", " returned ", ret);
    return ret;
}

// EGL_VERSION_1_1

static EGLBoolean REGAL_CALL log_eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglBindTexImage)(dpy, surface, buffer);
    Driver("eglBindTexImage","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", buffer, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglReleaseTexImage)(dpy, surface, buffer);
    Driver("eglReleaseTexImage","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", buffer, ")", " returned ", ret);
    return ret;
}

// EGL_VERSION_1_2

static EGLBoolean REGAL_CALL log_eglBindAPI(EGLenum api)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglBindAPI)(api);
    Driver("eglBindAPI","(", EGLenumToString(api), ")", " returned ", ret);
    return ret;
}

static EGLSurface REGAL_CALL log_eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLSurface  ret = _next->call(&_next->eglCreatePbufferFromClientBuffer)(dpy, buftype, buffer, config, attrib_list);
    Driver("eglCreatePbufferFromClientBuffer","(", dpy, ", ", EGLenumToString(buftype), ", ", boost::print::optional(buffer,Logging::pointers), ", ", boost::print::optional(config,Logging::pointers), ", ", attrib_list, ")", " returned ", boost::print::optional(ret,Logging::pointers));
    return ret;
}

static EGLenum REGAL_CALL log_eglQueryAPI(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLenum  ret = _next->call(&_next->eglQueryAPI)();
    Driver("eglQueryAPI","()", " returned ", EGLenumToString(ret));
    return ret;
}

static EGLBoolean REGAL_CALL log_eglReleaseThread(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglReleaseThread)();
    Driver("eglReleaseThread","()", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglSurfaceAttrib)(dpy, surface, attribute, value);
    Driver("eglSurfaceAttrib","(", boost::print::optional(dpy,Logging::pointers), ", ", boost::print::optional(surface,Logging::pointers), ", ", attribute, ", ", value, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglSwapInterval(EGLDisplay dpy, EGLint interval)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglSwapInterval)(dpy, interval);
    Driver("eglSwapInterval","(", boost::print::optional(dpy,Logging::pointers), ", ", interval, ")", " returned ", ret);
    return ret;
}

static EGLBoolean REGAL_CALL log_eglWaitClient(void)
{
    DispatchTableGlobal *_next = dispatcherGlobal.logging.next();
    RegalAssert(_next);
    EGLBoolean  ret = _next->call(&_next->eglWaitClient)();
    Driver("eglWaitClient","()", " returned ", ret);
    return ret;
}

#endif // REGAL_SYS_EGL

void InitDispatchTableLog(DispatchTableGL &tbl)
{

  // GL_VERSION_1_0

  tbl.glAccum = log_glAccum;
  tbl.glAlphaFunc = log_glAlphaFunc;
  tbl.glBegin = log_glBegin;
  tbl.glBitmap = log_glBitmap;
  tbl.glBlendFunc = log_glBlendFunc;
  tbl.glCallList = log_glCallList;
  tbl.glCallLists = log_glCallLists;
  tbl.glClear = log_glClear;
  tbl.glClearAccum = log_glClearAccum;
  tbl.glClearColor = log_glClearColor;
  tbl.glClearDepth = log_glClearDepth;
  tbl.glClearIndex = log_glClearIndex;
  tbl.glClearStencil = log_glClearStencil;
  tbl.glClipPlane = log_glClipPlane;
  tbl.glColor3b = log_glColor3b;
  tbl.glColor3bv = log_glColor3bv;
  tbl.glColor3d = log_glColor3d;
  tbl.glColor3dv = log_glColor3dv;
  tbl.glColor3f = log_glColor3f;
  tbl.glColor3fv = log_glColor3fv;
  tbl.glColor3i = log_glColor3i;
  tbl.glColor3iv = log_glColor3iv;
  tbl.glColor3s = log_glColor3s;
  tbl.glColor3sv = log_glColor3sv;
  tbl.glColor3ub = log_glColor3ub;
  tbl.glColor3ubv = log_glColor3ubv;
  tbl.glColor3ui = log_glColor3ui;
  tbl.glColor3uiv = log_glColor3uiv;
  tbl.glColor3us = log_glColor3us;
  tbl.glColor3usv = log_glColor3usv;
  tbl.glColor4b = log_glColor4b;
  tbl.glColor4bv = log_glColor4bv;
  tbl.glColor4d = log_glColor4d;
  tbl.glColor4dv = log_glColor4dv;
  tbl.glColor4f = log_glColor4f;
  tbl.glColor4fv = log_glColor4fv;
  tbl.glColor4i = log_glColor4i;
  tbl.glColor4iv = log_glColor4iv;
  tbl.glColor4s = log_glColor4s;
  tbl.glColor4sv = log_glColor4sv;
  tbl.glColor4ub = log_glColor4ub;
  tbl.glColor4ubv = log_glColor4ubv;
  tbl.glColor4ui = log_glColor4ui;
  tbl.glColor4uiv = log_glColor4uiv;
  tbl.glColor4us = log_glColor4us;
  tbl.glColor4usv = log_glColor4usv;
  tbl.glColorMask = log_glColorMask;
  tbl.glColorMaterial = log_glColorMaterial;
  tbl.glCopyPixels = log_glCopyPixels;
  tbl.glCullFace = log_glCullFace;
  tbl.glDeleteLists = log_glDeleteLists;
  tbl.glDepthFunc = log_glDepthFunc;
  tbl.glDepthMask = log_glDepthMask;
  tbl.glDepthRange = log_glDepthRange;
  tbl.glDisable = log_glDisable;
  tbl.glDrawBuffer = log_glDrawBuffer;
  tbl.glDrawPixels = log_glDrawPixels;
  tbl.glEdgeFlag = log_glEdgeFlag;
  tbl.glEdgeFlagv = log_glEdgeFlagv;
  tbl.glEnable = log_glEnable;
  tbl.glEnd = log_glEnd;
  tbl.glEndList = log_glEndList;
  tbl.glEvalCoord1d = log_glEvalCoord1d;
  tbl.glEvalCoord1dv = log_glEvalCoord1dv;
  tbl.glEvalCoord1f = log_glEvalCoord1f;
  tbl.glEvalCoord1fv = log_glEvalCoord1fv;
  tbl.glEvalCoord2d = log_glEvalCoord2d;
  tbl.glEvalCoord2dv = log_glEvalCoord2dv;
  tbl.glEvalCoord2f = log_glEvalCoord2f;
  tbl.glEvalCoord2fv = log_glEvalCoord2fv;
  tbl.glEvalMesh1 = log_glEvalMesh1;
  tbl.glEvalMesh2 = log_glEvalMesh2;
  tbl.glEvalPoint1 = log_glEvalPoint1;
  tbl.glEvalPoint2 = log_glEvalPoint2;
  tbl.glFeedbackBuffer = log_glFeedbackBuffer;
  tbl.glFinish = log_glFinish;
  tbl.glFlush = log_glFlush;
  tbl.glFogf = log_glFogf;
  tbl.glFogfv = log_glFogfv;
  tbl.glFogi = log_glFogi;
  tbl.glFogiv = log_glFogiv;
  tbl.glFrontFace = log_glFrontFace;
  tbl.glFrustum = log_glFrustum;
  tbl.glGenLists = log_glGenLists;
  tbl.glGetBooleanv = log_glGetBooleanv;
  tbl.glGetClipPlane = log_glGetClipPlane;
  tbl.glGetDoublev = log_glGetDoublev;
  tbl.glGetError = log_glGetError;
  tbl.glGetFloatv = log_glGetFloatv;
  tbl.glGetIntegerv = log_glGetIntegerv;
  tbl.glGetLightfv = log_glGetLightfv;
  tbl.glGetLightiv = log_glGetLightiv;
  tbl.glGetMapdv = log_glGetMapdv;
  tbl.glGetMapfv = log_glGetMapfv;
  tbl.glGetMapiv = log_glGetMapiv;
  tbl.glGetMaterialfv = log_glGetMaterialfv;
  tbl.glGetMaterialiv = log_glGetMaterialiv;
  tbl.glGetPixelMapfv = log_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = log_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = log_glGetPixelMapusv;
  tbl.glGetPolygonStipple = log_glGetPolygonStipple;
  tbl.glGetString = log_glGetString;
  tbl.glGetTexEnvfv = log_glGetTexEnvfv;
  tbl.glGetTexEnviv = log_glGetTexEnviv;
  tbl.glGetTexGendv = log_glGetTexGendv;
  tbl.glGetTexGenfv = log_glGetTexGenfv;
  tbl.glGetTexGeniv = log_glGetTexGeniv;
  tbl.glGetTexImage = log_glGetTexImage;
  tbl.glGetTexLevelParameterfv = log_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = log_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = log_glGetTexParameterfv;
  tbl.glGetTexParameteriv = log_glGetTexParameteriv;
  tbl.glHint = log_glHint;
  tbl.glIndexMask = log_glIndexMask;
  tbl.glIndexd = log_glIndexd;
  tbl.glIndexdv = log_glIndexdv;
  tbl.glIndexf = log_glIndexf;
  tbl.glIndexfv = log_glIndexfv;
  tbl.glIndexi = log_glIndexi;
  tbl.glIndexiv = log_glIndexiv;
  tbl.glIndexs = log_glIndexs;
  tbl.glIndexsv = log_glIndexsv;
  tbl.glInitNames = log_glInitNames;
  tbl.glIsEnabled = log_glIsEnabled;
  tbl.glIsList = log_glIsList;
  tbl.glLightModelf = log_glLightModelf;
  tbl.glLightModelfv = log_glLightModelfv;
  tbl.glLightModeli = log_glLightModeli;
  tbl.glLightModeliv = log_glLightModeliv;
  tbl.glLightf = log_glLightf;
  tbl.glLightfv = log_glLightfv;
  tbl.glLighti = log_glLighti;
  tbl.glLightiv = log_glLightiv;
  tbl.glLineStipple = log_glLineStipple;
  tbl.glLineWidth = log_glLineWidth;
  tbl.glListBase = log_glListBase;
  tbl.glLoadIdentity = log_glLoadIdentity;
  tbl.glLoadMatrixd = log_glLoadMatrixd;
  tbl.glLoadMatrixf = log_glLoadMatrixf;
  tbl.glLoadName = log_glLoadName;
  tbl.glLogicOp = log_glLogicOp;
  tbl.glMap1d = log_glMap1d;
  tbl.glMap1f = log_glMap1f;
  tbl.glMap2d = log_glMap2d;
  tbl.glMap2f = log_glMap2f;
  tbl.glMapGrid1d = log_glMapGrid1d;
  tbl.glMapGrid1f = log_glMapGrid1f;
  tbl.glMapGrid2d = log_glMapGrid2d;
  tbl.glMapGrid2f = log_glMapGrid2f;
  tbl.glMaterialf = log_glMaterialf;
  tbl.glMaterialfv = log_glMaterialfv;
  tbl.glMateriali = log_glMateriali;
  tbl.glMaterialiv = log_glMaterialiv;
  tbl.glMatrixMode = log_glMatrixMode;
  tbl.glMultMatrixd = log_glMultMatrixd;
  tbl.glMultMatrixf = log_glMultMatrixf;
  tbl.glNewList = log_glNewList;
  tbl.glNormal3b = log_glNormal3b;
  tbl.glNormal3bv = log_glNormal3bv;
  tbl.glNormal3d = log_glNormal3d;
  tbl.glNormal3dv = log_glNormal3dv;
  tbl.glNormal3f = log_glNormal3f;
  tbl.glNormal3fv = log_glNormal3fv;
  tbl.glNormal3i = log_glNormal3i;
  tbl.glNormal3iv = log_glNormal3iv;
  tbl.glNormal3s = log_glNormal3s;
  tbl.glNormal3sv = log_glNormal3sv;
  tbl.glOrtho = log_glOrtho;
  tbl.glPassThrough = log_glPassThrough;
  tbl.glPixelMapfv = log_glPixelMapfv;
  tbl.glPixelMapuiv = log_glPixelMapuiv;
  tbl.glPixelMapusv = log_glPixelMapusv;
  tbl.glPixelStoref = log_glPixelStoref;
  tbl.glPixelStorei = log_glPixelStorei;
  tbl.glPixelTransferf = log_glPixelTransferf;
  tbl.glPixelTransferi = log_glPixelTransferi;
  tbl.glPixelZoom = log_glPixelZoom;
  tbl.glPointSize = log_glPointSize;
  tbl.glPolygonMode = log_glPolygonMode;
  tbl.glPolygonStipple = log_glPolygonStipple;
  tbl.glPopAttrib = log_glPopAttrib;
  tbl.glPopMatrix = log_glPopMatrix;
  tbl.glPopName = log_glPopName;
  tbl.glPushAttrib = log_glPushAttrib;
  tbl.glPushMatrix = log_glPushMatrix;
  tbl.glPushName = log_glPushName;
  tbl.glRasterPos2d = log_glRasterPos2d;
  tbl.glRasterPos2dv = log_glRasterPos2dv;
  tbl.glRasterPos2f = log_glRasterPos2f;
  tbl.glRasterPos2fv = log_glRasterPos2fv;
  tbl.glRasterPos2i = log_glRasterPos2i;
  tbl.glRasterPos2iv = log_glRasterPos2iv;
  tbl.glRasterPos2s = log_glRasterPos2s;
  tbl.glRasterPos2sv = log_glRasterPos2sv;
  tbl.glRasterPos3d = log_glRasterPos3d;
  tbl.glRasterPos3dv = log_glRasterPos3dv;
  tbl.glRasterPos3f = log_glRasterPos3f;
  tbl.glRasterPos3fv = log_glRasterPos3fv;
  tbl.glRasterPos3i = log_glRasterPos3i;
  tbl.glRasterPos3iv = log_glRasterPos3iv;
  tbl.glRasterPos3s = log_glRasterPos3s;
  tbl.glRasterPos3sv = log_glRasterPos3sv;
  tbl.glRasterPos4d = log_glRasterPos4d;
  tbl.glRasterPos4dv = log_glRasterPos4dv;
  tbl.glRasterPos4f = log_glRasterPos4f;
  tbl.glRasterPos4fv = log_glRasterPos4fv;
  tbl.glRasterPos4i = log_glRasterPos4i;
  tbl.glRasterPos4iv = log_glRasterPos4iv;
  tbl.glRasterPos4s = log_glRasterPos4s;
  tbl.glRasterPos4sv = log_glRasterPos4sv;
  tbl.glReadBuffer = log_glReadBuffer;
  tbl.glReadPixels = log_glReadPixels;
  tbl.glRectd = log_glRectd;
  tbl.glRectdv = log_glRectdv;
  tbl.glRectf = log_glRectf;
  tbl.glRectfv = log_glRectfv;
  tbl.glRecti = log_glRecti;
  tbl.glRectiv = log_glRectiv;
  tbl.glRects = log_glRects;
  tbl.glRectsv = log_glRectsv;
  tbl.glRenderMode = log_glRenderMode;
  tbl.glRotated = log_glRotated;
  tbl.glRotatef = log_glRotatef;
  tbl.glScaled = log_glScaled;
  tbl.glScalef = log_glScalef;
  tbl.glScissor = log_glScissor;
  tbl.glSelectBuffer = log_glSelectBuffer;
  tbl.glShadeModel = log_glShadeModel;
  tbl.glStencilFunc = log_glStencilFunc;
  tbl.glStencilMask = log_glStencilMask;
  tbl.glStencilOp = log_glStencilOp;
  tbl.glTexCoord1d = log_glTexCoord1d;
  tbl.glTexCoord1dv = log_glTexCoord1dv;
  tbl.glTexCoord1f = log_glTexCoord1f;
  tbl.glTexCoord1fv = log_glTexCoord1fv;
  tbl.glTexCoord1i = log_glTexCoord1i;
  tbl.glTexCoord1iv = log_glTexCoord1iv;
  tbl.glTexCoord1s = log_glTexCoord1s;
  tbl.glTexCoord1sv = log_glTexCoord1sv;
  tbl.glTexCoord2d = log_glTexCoord2d;
  tbl.glTexCoord2dv = log_glTexCoord2dv;
  tbl.glTexCoord2f = log_glTexCoord2f;
  tbl.glTexCoord2fv = log_glTexCoord2fv;
  tbl.glTexCoord2i = log_glTexCoord2i;
  tbl.glTexCoord2iv = log_glTexCoord2iv;
  tbl.glTexCoord2s = log_glTexCoord2s;
  tbl.glTexCoord2sv = log_glTexCoord2sv;
  tbl.glTexCoord3d = log_glTexCoord3d;
  tbl.glTexCoord3dv = log_glTexCoord3dv;
  tbl.glTexCoord3f = log_glTexCoord3f;
  tbl.glTexCoord3fv = log_glTexCoord3fv;
  tbl.glTexCoord3i = log_glTexCoord3i;
  tbl.glTexCoord3iv = log_glTexCoord3iv;
  tbl.glTexCoord3s = log_glTexCoord3s;
  tbl.glTexCoord3sv = log_glTexCoord3sv;
  tbl.glTexCoord4d = log_glTexCoord4d;
  tbl.glTexCoord4dv = log_glTexCoord4dv;
  tbl.glTexCoord4f = log_glTexCoord4f;
  tbl.glTexCoord4fv = log_glTexCoord4fv;
  tbl.glTexCoord4i = log_glTexCoord4i;
  tbl.glTexCoord4iv = log_glTexCoord4iv;
  tbl.glTexCoord4s = log_glTexCoord4s;
  tbl.glTexCoord4sv = log_glTexCoord4sv;
  tbl.glTexEnvf = log_glTexEnvf;
  tbl.glTexEnvfv = log_glTexEnvfv;
  tbl.glTexEnvi = log_glTexEnvi;
  tbl.glTexEnviv = log_glTexEnviv;
  tbl.glTexGend = log_glTexGend;
  tbl.glTexGendv = log_glTexGendv;
  tbl.glTexGenf = log_glTexGenf;
  tbl.glTexGenfv = log_glTexGenfv;
  tbl.glTexGeni = log_glTexGeni;
  tbl.glTexGeniv = log_glTexGeniv;
  tbl.glTexImage1D = log_glTexImage1D;
  tbl.glTexImage2D = log_glTexImage2D;
  tbl.glTexParameterf = log_glTexParameterf;
  tbl.glTexParameterfv = log_glTexParameterfv;
  tbl.glTexParameteri = log_glTexParameteri;
  tbl.glTexParameteriv = log_glTexParameteriv;
  tbl.glTranslated = log_glTranslated;
  tbl.glTranslatef = log_glTranslatef;
  tbl.glVertex2d = log_glVertex2d;
  tbl.glVertex2dv = log_glVertex2dv;
  tbl.glVertex2f = log_glVertex2f;
  tbl.glVertex2fv = log_glVertex2fv;
  tbl.glVertex2i = log_glVertex2i;
  tbl.glVertex2iv = log_glVertex2iv;
  tbl.glVertex2s = log_glVertex2s;
  tbl.glVertex2sv = log_glVertex2sv;
  tbl.glVertex3d = log_glVertex3d;
  tbl.glVertex3dv = log_glVertex3dv;
  tbl.glVertex3f = log_glVertex3f;
  tbl.glVertex3fv = log_glVertex3fv;
  tbl.glVertex3i = log_glVertex3i;
  tbl.glVertex3iv = log_glVertex3iv;
  tbl.glVertex3s = log_glVertex3s;
  tbl.glVertex3sv = log_glVertex3sv;
  tbl.glVertex4d = log_glVertex4d;
  tbl.glVertex4dv = log_glVertex4dv;
  tbl.glVertex4f = log_glVertex4f;
  tbl.glVertex4fv = log_glVertex4fv;
  tbl.glVertex4i = log_glVertex4i;
  tbl.glVertex4iv = log_glVertex4iv;
  tbl.glVertex4s = log_glVertex4s;
  tbl.glVertex4sv = log_glVertex4sv;
  tbl.glViewport = log_glViewport;

  // GL_VERSION_1_1

  tbl.glAreTexturesResident = log_glAreTexturesResident;
  tbl.glArrayElement = log_glArrayElement;
  tbl.glBindTexture = log_glBindTexture;
  tbl.glColorPointer = log_glColorPointer;
  tbl.glCopyTexImage1D = log_glCopyTexImage1D;
  tbl.glCopyTexImage2D = log_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = log_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = log_glCopyTexSubImage2D;
  tbl.glDeleteTextures = log_glDeleteTextures;
  tbl.glDisableClientState = log_glDisableClientState;
  tbl.glDrawArrays = log_glDrawArrays;
  tbl.glDrawElements = log_glDrawElements;
  tbl.glEdgeFlagPointer = log_glEdgeFlagPointer;
  tbl.glEnableClientState = log_glEnableClientState;
  tbl.glGenTextures = log_glGenTextures;
  tbl.glGetPointerv = log_glGetPointerv;
  tbl.glIndexPointer = log_glIndexPointer;
  tbl.glIndexub = log_glIndexub;
  tbl.glIndexubv = log_glIndexubv;
  tbl.glInterleavedArrays = log_glInterleavedArrays;
  tbl.glIsTexture = log_glIsTexture;
  tbl.glNormalPointer = log_glNormalPointer;
  tbl.glPolygonOffset = log_glPolygonOffset;
  tbl.glPopClientAttrib = log_glPopClientAttrib;
  tbl.glPrioritizeTextures = log_glPrioritizeTextures;
  tbl.glPushClientAttrib = log_glPushClientAttrib;
  tbl.glTexCoordPointer = log_glTexCoordPointer;
  tbl.glTexSubImage1D = log_glTexSubImage1D;
  tbl.glTexSubImage2D = log_glTexSubImage2D;
  tbl.glVertexPointer = log_glVertexPointer;

  // GL_VERSION_1_2

  tbl.glBlendColor = log_glBlendColor;
  tbl.glBlendEquation = log_glBlendEquation;
  tbl.glCopyTexSubImage3D = log_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = log_glDrawRangeElements;
  tbl.glTexImage3D = log_glTexImage3D;
  tbl.glTexSubImage3D = log_glTexSubImage3D;

  // GL_VERSION_1_3

  tbl.glActiveTexture = log_glActiveTexture;
  tbl.glClientActiveTexture = log_glClientActiveTexture;
  tbl.glCompressedTexImage1D = log_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = log_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = log_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = log_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = log_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = log_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = log_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = log_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = log_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = log_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = log_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = log_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = log_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = log_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = log_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = log_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = log_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = log_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = log_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = log_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = log_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = log_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = log_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = log_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = log_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = log_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = log_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = log_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = log_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = log_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = log_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = log_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = log_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = log_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = log_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = log_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = log_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = log_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = log_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = log_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = log_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = log_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = log_glMultiTexCoord4sv;
  tbl.glSampleCoverage = log_glSampleCoverage;

  // GL_VERSION_1_4

  tbl.glBlendFuncSeparate = log_glBlendFuncSeparate;
  tbl.glFogCoordPointer = log_glFogCoordPointer;
  tbl.glFogCoordd = log_glFogCoordd;
  tbl.glFogCoorddv = log_glFogCoorddv;
  tbl.glFogCoordf = log_glFogCoordf;
  tbl.glFogCoordfv = log_glFogCoordfv;
  tbl.glMultiDrawArrays = log_glMultiDrawArrays;
  tbl.glMultiDrawElements = log_glMultiDrawElements;
  tbl.glPointParameterf = log_glPointParameterf;
  tbl.glPointParameterfv = log_glPointParameterfv;
  tbl.glPointParameteri = log_glPointParameteri;
  tbl.glPointParameteriv = log_glPointParameteriv;
  tbl.glSecondaryColor3b = log_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = log_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = log_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = log_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = log_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = log_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = log_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = log_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = log_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = log_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = log_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = log_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = log_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = log_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = log_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = log_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = log_glSecondaryColorPointer;
  tbl.glWindowPos2d = log_glWindowPos2d;
  tbl.glWindowPos2dv = log_glWindowPos2dv;
  tbl.glWindowPos2f = log_glWindowPos2f;
  tbl.glWindowPos2fv = log_glWindowPos2fv;
  tbl.glWindowPos2i = log_glWindowPos2i;
  tbl.glWindowPos2iv = log_glWindowPos2iv;
  tbl.glWindowPos2s = log_glWindowPos2s;
  tbl.glWindowPos2sv = log_glWindowPos2sv;
  tbl.glWindowPos3d = log_glWindowPos3d;
  tbl.glWindowPos3dv = log_glWindowPos3dv;
  tbl.glWindowPos3f = log_glWindowPos3f;
  tbl.glWindowPos3fv = log_glWindowPos3fv;
  tbl.glWindowPos3i = log_glWindowPos3i;
  tbl.glWindowPos3iv = log_glWindowPos3iv;
  tbl.glWindowPos3s = log_glWindowPos3s;
  tbl.glWindowPos3sv = log_glWindowPos3sv;

  // GL_VERSION_1_5

  tbl.glBeginQuery = log_glBeginQuery;
  tbl.glBindBuffer = log_glBindBuffer;
  tbl.glBufferData = log_glBufferData;
  tbl.glBufferSubData = log_glBufferSubData;
  tbl.glDeleteBuffers = log_glDeleteBuffers;
  tbl.glDeleteQueries = log_glDeleteQueries;
  tbl.glEndQuery = log_glEndQuery;
  tbl.glGenBuffers = log_glGenBuffers;
  tbl.glGenQueries = log_glGenQueries;
  tbl.glGetBufferParameteriv = log_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = log_glGetBufferPointerv;
  tbl.glGetBufferSubData = log_glGetBufferSubData;
  tbl.glGetQueryObjectiv = log_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = log_glGetQueryObjectuiv;
  tbl.glGetQueryiv = log_glGetQueryiv;
  tbl.glIsBuffer = log_glIsBuffer;
  tbl.glIsQuery = log_glIsQuery;
  tbl.glMapBuffer = log_glMapBuffer;
  tbl.glUnmapBuffer = log_glUnmapBuffer;

  // GL_VERSION_2_0

  tbl.glAttachShader = log_glAttachShader;
  tbl.glBindAttribLocation = log_glBindAttribLocation;
  tbl.glBlendEquationSeparate = log_glBlendEquationSeparate;
  tbl.glCompileShader = log_glCompileShader;
  tbl.glCreateProgram = log_glCreateProgram;
  tbl.glCreateShader = log_glCreateShader;
  tbl.glDeleteProgram = log_glDeleteProgram;
  tbl.glDeleteShader = log_glDeleteShader;
  tbl.glDetachShader = log_glDetachShader;
  tbl.glDisableVertexAttribArray = log_glDisableVertexAttribArray;
  tbl.glDrawBuffers = log_glDrawBuffers;
  tbl.glEnableVertexAttribArray = log_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = log_glGetActiveAttrib;
  tbl.glGetActiveUniform = log_glGetActiveUniform;
  tbl.glGetAttachedShaders = log_glGetAttachedShaders;
  tbl.glGetAttribLocation = log_glGetAttribLocation;
  tbl.glGetProgramInfoLog = log_glGetProgramInfoLog;
  tbl.glGetProgramiv = log_glGetProgramiv;
  tbl.glGetShaderInfoLog = log_glGetShaderInfoLog;
  tbl.glGetShaderSource = log_glGetShaderSource;
  tbl.glGetShaderiv = log_glGetShaderiv;
  tbl.glGetUniformLocation = log_glGetUniformLocation;
  tbl.glGetUniformfv = log_glGetUniformfv;
  tbl.glGetUniformiv = log_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = log_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = log_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = log_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = log_glGetVertexAttribiv;
  tbl.glIsProgram = log_glIsProgram;
  tbl.glIsShader = log_glIsShader;
  tbl.glLinkProgram = log_glLinkProgram;
  tbl.glShaderSource = log_glShaderSource;
  tbl.glStencilFuncSeparate = log_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = log_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = log_glStencilOpSeparate;
  tbl.glUniform1f = log_glUniform1f;
  tbl.glUniform1fv = log_glUniform1fv;
  tbl.glUniform1i = log_glUniform1i;
  tbl.glUniform1iv = log_glUniform1iv;
  tbl.glUniform2f = log_glUniform2f;
  tbl.glUniform2fv = log_glUniform2fv;
  tbl.glUniform2i = log_glUniform2i;
  tbl.glUniform2iv = log_glUniform2iv;
  tbl.glUniform3f = log_glUniform3f;
  tbl.glUniform3fv = log_glUniform3fv;
  tbl.glUniform3i = log_glUniform3i;
  tbl.glUniform3iv = log_glUniform3iv;
  tbl.glUniform4f = log_glUniform4f;
  tbl.glUniform4fv = log_glUniform4fv;
  tbl.glUniform4i = log_glUniform4i;
  tbl.glUniform4iv = log_glUniform4iv;
  tbl.glUniformMatrix2fv = log_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = log_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = log_glUniformMatrix4fv;
  tbl.glUseProgram = log_glUseProgram;
  tbl.glValidateProgram = log_glValidateProgram;
  tbl.glVertexAttrib1d = log_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = log_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = log_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = log_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = log_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = log_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = log_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = log_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = log_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = log_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = log_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = log_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = log_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = log_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = log_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = log_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = log_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = log_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = log_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = log_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = log_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = log_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = log_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = log_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = log_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = log_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = log_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = log_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = log_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = log_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = log_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = log_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = log_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = log_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = log_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = log_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = log_glVertexAttribPointer;

  // GL_VERSION_2_1

  tbl.glUniformMatrix2x3fv = log_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = log_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = log_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = log_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = log_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = log_glUniformMatrix4x3fv;

  // GL_VERSION_3_0

  tbl.glBeginConditionalRender = log_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = log_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = log_glBindFragDataLocation;
  tbl.glClampColor = log_glClampColor;
  tbl.glClearBufferfi = log_glClearBufferfi;
  tbl.glClearBufferfv = log_glClearBufferfv;
  tbl.glClearBufferiv = log_glClearBufferiv;
  tbl.glClearBufferuiv = log_glClearBufferuiv;
  tbl.glColorMaski = log_glColorMaski;
  tbl.glDisablei = log_glDisablei;
  tbl.glEnablei = log_glEnablei;
  tbl.glEndConditionalRender = log_glEndConditionalRender;
  tbl.glEndTransformFeedback = log_glEndTransformFeedback;
  tbl.glGetBooleani_v = log_glGetBooleani_v;
  tbl.glGetFragDataLocation = log_glGetFragDataLocation;
  tbl.glGetStringi = log_glGetStringi;
  tbl.glGetTexParameterIiv = log_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = log_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = log_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = log_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = log_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = log_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = log_glIsEnabledi;
  tbl.glTexParameterIiv = log_glTexParameterIiv;
  tbl.glTexParameterIuiv = log_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = log_glTransformFeedbackVaryings;
  tbl.glUniform1ui = log_glUniform1ui;
  tbl.glUniform1uiv = log_glUniform1uiv;
  tbl.glUniform2ui = log_glUniform2ui;
  tbl.glUniform2uiv = log_glUniform2uiv;
  tbl.glUniform3ui = log_glUniform3ui;
  tbl.glUniform3uiv = log_glUniform3uiv;
  tbl.glUniform4ui = log_glUniform4ui;
  tbl.glUniform4uiv = log_glUniform4uiv;
  tbl.glVertexAttribI1i = log_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = log_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = log_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = log_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = log_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = log_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = log_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = log_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = log_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = log_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = log_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = log_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = log_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = log_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = log_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = log_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = log_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = log_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = log_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = log_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = log_glVertexAttribIPointer;

  // GL_VERSION_3_1

  tbl.glDrawArraysInstanced = log_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = log_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = log_glPrimitiveRestartIndex;
  tbl.glTexBuffer = log_glTexBuffer;

  // GL_VERSION_3_2

  tbl.glFramebufferTexture = log_glFramebufferTexture;
  tbl.glFramebufferTextureFace = log_glFramebufferTextureFace;
  tbl.glGetBufferParameteri64v = log_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = log_glGetInteger64i_v;

  // GL_VERSION_3_3

  tbl.glVertexAttribDivisor = log_glVertexAttribDivisor;

  // GL_VERSION_4_0

  tbl.glBlendEquationSeparatei = log_glBlendEquationSeparatei;
  tbl.glBlendEquationi = log_glBlendEquationi;
  tbl.glBlendFuncSeparatei = log_glBlendFuncSeparatei;
  tbl.glBlendFunci = log_glBlendFunci;

  // GL_3DFX_tbuffer

  tbl.glTbufferMask3DFX = log_glTbufferMask3DFX;

  // GL_AMD_debug_output

  tbl.glDebugMessageCallbackAMD = log_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = log_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = log_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = log_glGetDebugMessageLogAMD;

  // GL_AMD_draw_buffers_blend

  tbl.glBlendEquationIndexedAMD = log_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = log_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = log_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = log_glBlendFuncSeparateIndexedAMD;

  // GL_AMD_interleaved_elements

  tbl.glVertexAttribParameteriAMD = log_glVertexAttribParameteriAMD;

  // GL_AMD_multi_draw_indirect

  tbl.glMultiDrawArraysIndirectAMD = log_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = log_glMultiDrawElementsIndirectAMD;

  // GL_AMD_name_gen_delete

  tbl.glDeleteNamesAMD = log_glDeleteNamesAMD;
  tbl.glGenNamesAMD = log_glGenNamesAMD;
  tbl.glIsNameAMD = log_glIsNameAMD;

  // GL_AMD_performance_monitor

  tbl.glBeginPerfMonitorAMD = log_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = log_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = log_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = log_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = log_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = log_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = log_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = log_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = log_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = log_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = log_glSelectPerfMonitorCountersAMD;

  // GL_AMD_sample_positions

  tbl.glSetMultisamplefvAMD = log_glSetMultisamplefvAMD;

  // GL_AMD_sparse_texture

  tbl.glTexStorageSparseAMD = log_glTexStorageSparseAMD;
  tbl.glTextureStorageSparseAMD = log_glTextureStorageSparseAMD;

  // GL_AMD_stencil_operation_extended

  tbl.glStencilOpValueAMD = log_glStencilOpValueAMD;

  // GL_AMD_vertex_shader_tessellator

  tbl.glTessellationFactorAMD = log_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = log_glTessellationModeAMD;

  // GL_ANGLE_framebuffer_blit

  tbl.glBlitFramebufferANGLE = log_glBlitFramebufferANGLE;

  // GL_ANGLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleANGLE = log_glRenderbufferStorageMultisampleANGLE;

  // GL_ANGLE_instanced_arrays

  tbl.glDrawArraysInstancedANGLE = log_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = log_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = log_glVertexAttribDivisorANGLE;

  // GL_ANGLE_translated_shader_source

  tbl.glGetTranslatedShaderSourceANGLE = log_glGetTranslatedShaderSourceANGLE;

  // GL_APPLE_copy_texture_levels

  tbl.glCopyTextureLevelsAPPLE = log_glCopyTextureLevelsAPPLE;

  // GL_APPLE_element_array

  tbl.glDrawElementArrayAPPLE = log_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = log_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = log_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = log_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = log_glMultiDrawRangeElementArrayAPPLE;

  // GL_APPLE_fence

  tbl.glDeleteFencesAPPLE = log_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = log_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = log_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = log_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = log_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = log_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = log_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = log_glTestObjectAPPLE;

  // GL_APPLE_flush_buffer_range

  tbl.glBufferParameteriAPPLE = log_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = log_glFlushMappedBufferRangeAPPLE;

  // GL_APPLE_flush_render

  tbl.glFinishRenderAPPLE = log_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = log_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = log_glSwapAPPLE;

  // GL_APPLE_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleAPPLE = log_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = log_glResolveMultisampleFramebufferAPPLE;

  // GL_APPLE_object_purgeable

  tbl.glGetObjectParameterivAPPLE = log_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = log_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = log_glObjectUnpurgeableAPPLE;

  // GL_APPLE_sync

  tbl.glClientWaitSyncAPPLE = log_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = log_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = log_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = log_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = log_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = log_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = log_glWaitSyncAPPLE;

  // GL_APPLE_texture_range

  tbl.glGetTexParameterPointervAPPLE = log_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = log_glTextureRangeAPPLE;

  // GL_APPLE_vertex_array_object

  tbl.glBindVertexArrayAPPLE = log_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = log_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = log_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = log_glIsVertexArrayAPPLE;

  // GL_APPLE_vertex_array_range

  tbl.glFlushVertexArrayRangeAPPLE = log_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = log_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = log_glVertexArrayRangeAPPLE;

  // GL_APPLE_vertex_program_evaluators

  tbl.glDisableVertexAttribAPPLE = log_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = log_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = log_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = log_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = log_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = log_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = log_glMapVertexAttrib2fAPPLE;

  // GL_ARB_ES2_compatibility

  tbl.glClearDepthf = log_glClearDepthf;
  tbl.glDepthRangef = log_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = log_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = log_glReleaseShaderCompiler;
  tbl.glShaderBinary = log_glShaderBinary;

  // GL_ARB_base_instance

  tbl.glDrawArraysInstancedBaseInstance = log_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = log_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = log_glDrawElementsInstancedBaseVertexBaseInstance;

  // GL_ARB_bindless_texture

  tbl.glGetImageHandleARB = log_glGetImageHandleARB;
  tbl.glGetTextureHandleARB = log_glGetTextureHandleARB;
  tbl.glGetTextureSamplerHandleARB = log_glGetTextureSamplerHandleARB;
  tbl.glGetVertexAttribLui64vARB = log_glGetVertexAttribLui64vARB;
  tbl.glIsImageHandleResidentARB = log_glIsImageHandleResidentARB;
  tbl.glIsTextureHandleResidentARB = log_glIsTextureHandleResidentARB;
  tbl.glMakeImageHandleNonResidentARB = log_glMakeImageHandleNonResidentARB;
  tbl.glMakeImageHandleResidentARB = log_glMakeImageHandleResidentARB;
  tbl.glMakeTextureHandleNonResidentARB = log_glMakeTextureHandleNonResidentARB;
  tbl.glMakeTextureHandleResidentARB = log_glMakeTextureHandleResidentARB;
  tbl.glProgramUniformHandleui64ARB = log_glProgramUniformHandleui64ARB;
  tbl.glProgramUniformHandleui64vARB = log_glProgramUniformHandleui64vARB;
  tbl.glUniformHandleui64ARB = log_glUniformHandleui64ARB;
  tbl.glUniformHandleui64vARB = log_glUniformHandleui64vARB;
  tbl.glVertexAttribL1ui64ARB = log_glVertexAttribL1ui64ARB;
  tbl.glVertexAttribL1ui64vARB = log_glVertexAttribL1ui64vARB;

  // GL_ARB_blend_func_extended

  tbl.glBindFragDataLocationIndexed = log_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = log_glGetFragDataIndex;

  // GL_ARB_buffer_storage

  tbl.glBufferStorage = log_glBufferStorage;

  // GL_ARB_cl_event

  tbl.glCreateSyncFromCLeventARB = log_glCreateSyncFromCLeventARB;

  // GL_ARB_clear_buffer_object

  tbl.glClearBufferData = log_glClearBufferData;
  tbl.glClearBufferSubData = log_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = log_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = log_glClearNamedBufferSubDataEXT;

  // GL_ARB_clear_texture

  tbl.glClearTexImage = log_glClearTexImage;
  tbl.glClearTexSubImage = log_glClearTexSubImage;

  // GL_ARB_color_buffer_float

  tbl.glClampColorARB = log_glClampColorARB;

  // GL_ARB_compute_shader

  tbl.glDispatchCompute = log_glDispatchCompute;
  tbl.glDispatchComputeIndirect = log_glDispatchComputeIndirect;

  // GL_ARB_compute_variable_group_size

  tbl.glDispatchComputeGroupSizeARB = log_glDispatchComputeGroupSizeARB;

  // GL_ARB_copy_buffer

  tbl.glCopyBufferSubData = log_glCopyBufferSubData;

  // GL_ARB_copy_image

  tbl.glCopyImageSubData = log_glCopyImageSubData;

  // GL_ARB_debug_output

  tbl.glDebugMessageCallbackARB = log_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = log_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = log_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = log_glGetDebugMessageLogARB;

  // GL_ARB_draw_buffers

  tbl.glDrawBuffersARB = log_glDrawBuffersARB;

  // GL_ARB_draw_buffers_blend

  tbl.glBlendEquationSeparateiARB = log_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = log_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = log_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = log_glBlendFunciARB;

  // GL_ARB_draw_elements_base_vertex

  tbl.glDrawElementsBaseVertex = log_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = log_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = log_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = log_glMultiDrawElementsBaseVertex;

  // GL_ARB_draw_indirect

  tbl.glDrawArraysIndirect = log_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = log_glDrawElementsIndirect;

  // GL_ARB_draw_instanced

  tbl.glDrawArraysInstancedARB = log_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = log_glDrawElementsInstancedARB;

  // GL_ARB_framebuffer_no_attachments

  tbl.glFramebufferParameteri = log_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = log_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = log_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = log_glNamedFramebufferParameteriEXT;

  // GL_ARB_framebuffer_object

  tbl.glBindFramebuffer = log_glBindFramebuffer;
  tbl.glBindRenderbuffer = log_glBindRenderbuffer;
  tbl.glBlitFramebuffer = log_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = log_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = log_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = log_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = log_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = log_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = log_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = log_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = log_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = log_glGenFramebuffers;
  tbl.glGenRenderbuffers = log_glGenRenderbuffers;
  tbl.glGenerateMipmap = log_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = log_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = log_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = log_glIsFramebuffer;
  tbl.glIsRenderbuffer = log_glIsRenderbuffer;
  tbl.glRenderbufferStorage = log_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = log_glRenderbufferStorageMultisample;

  // GL_ARB_geometry_shader4

  tbl.glFramebufferTextureARB = log_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = log_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = log_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = log_glProgramParameteriARB;

  // GL_ARB_get_program_binary

  tbl.glGetProgramBinary = log_glGetProgramBinary;
  tbl.glProgramBinary = log_glProgramBinary;
  tbl.glProgramParameteri = log_glProgramParameteri;

  // GL_ARB_gpu_shader_fp64

  tbl.glGetUniformdv = log_glGetUniformdv;
  tbl.glUniform1d = log_glUniform1d;
  tbl.glUniform1dv = log_glUniform1dv;
  tbl.glUniform2d = log_glUniform2d;
  tbl.glUniform2dv = log_glUniform2dv;
  tbl.glUniform3d = log_glUniform3d;
  tbl.glUniform3dv = log_glUniform3dv;
  tbl.glUniform4d = log_glUniform4d;
  tbl.glUniform4dv = log_glUniform4dv;
  tbl.glUniformMatrix2dv = log_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = log_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = log_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = log_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = log_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = log_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = log_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = log_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = log_glUniformMatrix4x3dv;

  // GL_ARB_imaging

  tbl.glColorSubTable = log_glColorSubTable;
  tbl.glColorTable = log_glColorTable;
  tbl.glColorTableParameterfv = log_glColorTableParameterfv;
  tbl.glColorTableParameteriv = log_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = log_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = log_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = log_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = log_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = log_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = log_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = log_glCopyColorSubTable;
  tbl.glCopyColorTable = log_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = log_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = log_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = log_glGetColorTable;
  tbl.glGetColorTableParameterfv = log_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = log_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = log_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = log_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = log_glGetConvolutionParameteriv;
  tbl.glGetHistogram = log_glGetHistogram;
  tbl.glGetHistogramParameterfv = log_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = log_glGetHistogramParameteriv;
  tbl.glGetMinmax = log_glGetMinmax;
  tbl.glGetMinmaxParameterfv = log_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = log_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = log_glGetSeparableFilter;
  tbl.glHistogram = log_glHistogram;
  tbl.glMinmax = log_glMinmax;
  tbl.glResetHistogram = log_glResetHistogram;
  tbl.glResetMinmax = log_glResetMinmax;
  tbl.glSeparableFilter2D = log_glSeparableFilter2D;

  // GL_ARB_indirect_parameters

  tbl.glMultiDrawArraysIndirectCountARB = log_glMultiDrawArraysIndirectCountARB;
  tbl.glMultiDrawElementsIndirectCountARB = log_glMultiDrawElementsIndirectCountARB;

  // GL_ARB_instanced_arrays

  tbl.glVertexAttribDivisorARB = log_glVertexAttribDivisorARB;

  // GL_ARB_internalformat_query

  tbl.glGetInternalformativ = log_glGetInternalformativ;

  // GL_ARB_internalformat_query2

  tbl.glGetInternalformati64v = log_glGetInternalformati64v;

  // GL_ARB_invalidate_subdata

  tbl.glInvalidateBufferData = log_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = log_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = log_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = log_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = log_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = log_glInvalidateTexSubImage;

  // GL_ARB_map_buffer_range

  tbl.glFlushMappedBufferRange = log_glFlushMappedBufferRange;
  tbl.glMapBufferRange = log_glMapBufferRange;

  // GL_ARB_matrix_palette

  tbl.glCurrentPaletteMatrixARB = log_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = log_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = log_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = log_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = log_glMatrixIndexusvARB;

  // GL_ARB_multi_bind

  tbl.glBindBuffersBase = log_glBindBuffersBase;
  tbl.glBindBuffersRange = log_glBindBuffersRange;
  tbl.glBindImageTextures = log_glBindImageTextures;
  tbl.glBindSamplers = log_glBindSamplers;
  tbl.glBindTextures = log_glBindTextures;
  tbl.glBindVertexBuffers = log_glBindVertexBuffers;

  // GL_ARB_multi_draw_indirect

  tbl.glMultiDrawArraysIndirect = log_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = log_glMultiDrawElementsIndirect;

  // GL_ARB_multisample

  tbl.glSampleCoverageARB = log_glSampleCoverageARB;

  // GL_ARB_multitexture

  tbl.glActiveTextureARB = log_glActiveTextureARB;
  tbl.glClientActiveTextureARB = log_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = log_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = log_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = log_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = log_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = log_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = log_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = log_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = log_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = log_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = log_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = log_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = log_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = log_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = log_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = log_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = log_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = log_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = log_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = log_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = log_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = log_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = log_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = log_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = log_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = log_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = log_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = log_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = log_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = log_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = log_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = log_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = log_glMultiTexCoord4svARB;

  // GL_ARB_occlusion_query

  tbl.glBeginQueryARB = log_glBeginQueryARB;
  tbl.glDeleteQueriesARB = log_glDeleteQueriesARB;
  tbl.glEndQueryARB = log_glEndQueryARB;
  tbl.glGenQueriesARB = log_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = log_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = log_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = log_glGetQueryivARB;
  tbl.glIsQueryARB = log_glIsQueryARB;

  // GL_ARB_point_parameters

  tbl.glPointParameterfARB = log_glPointParameterfARB;
  tbl.glPointParameterfvARB = log_glPointParameterfvARB;

  // GL_ARB_program_interface_query

  tbl.glGetProgramInterfaceiv = log_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = log_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = log_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = log_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = log_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = log_glGetProgramResourceiv;

  // GL_ARB_provoking_vertex

  tbl.glProvokingVertex = log_glProvokingVertex;

  // GL_ARB_robustness

  tbl.glGetGraphicsResetStatusARB = log_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = log_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = log_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = log_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = log_glGetnHistogramARB;
  tbl.glGetnMapdvARB = log_glGetnMapdvARB;
  tbl.glGetnMapfvARB = log_glGetnMapfvARB;
  tbl.glGetnMapivARB = log_glGetnMapivARB;
  tbl.glGetnMinmaxARB = log_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = log_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = log_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = log_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = log_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = log_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = log_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = log_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = log_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = log_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = log_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = log_glReadnPixelsARB;

  // GL_ARB_sample_shading

  tbl.glMinSampleShading = log_glMinSampleShading;
  tbl.glMinSampleShadingARB = log_glMinSampleShadingARB;

  // GL_ARB_sampler_objects

  tbl.glBindSampler = log_glBindSampler;
  tbl.glDeleteSamplers = log_glDeleteSamplers;
  tbl.glGenSamplers = log_glGenSamplers;
  tbl.glGetSamplerParameterIiv = log_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = log_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = log_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = log_glGetSamplerParameteriv;
  tbl.glIsSampler = log_glIsSampler;
  tbl.glSamplerParameterIiv = log_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = log_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = log_glSamplerParameterf;
  tbl.glSamplerParameterfv = log_glSamplerParameterfv;
  tbl.glSamplerParameteri = log_glSamplerParameteri;
  tbl.glSamplerParameteriv = log_glSamplerParameteriv;

  // GL_ARB_separate_shader_objects

  tbl.glActiveShaderProgram = log_glActiveShaderProgram;
  tbl.glBindProgramPipeline = log_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = log_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = log_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = log_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = log_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = log_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = log_glIsProgramPipeline;
  tbl.glProgramUniform1d = log_glProgramUniform1d;
  tbl.glProgramUniform1dv = log_glProgramUniform1dv;
  tbl.glProgramUniform1f = log_glProgramUniform1f;
  tbl.glProgramUniform1fv = log_glProgramUniform1fv;
  tbl.glProgramUniform1i = log_glProgramUniform1i;
  tbl.glProgramUniform1iv = log_glProgramUniform1iv;
  tbl.glProgramUniform1ui = log_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = log_glProgramUniform1uiv;
  tbl.glProgramUniform2d = log_glProgramUniform2d;
  tbl.glProgramUniform2dv = log_glProgramUniform2dv;
  tbl.glProgramUniform2f = log_glProgramUniform2f;
  tbl.glProgramUniform2fv = log_glProgramUniform2fv;
  tbl.glProgramUniform2i = log_glProgramUniform2i;
  tbl.glProgramUniform2iv = log_glProgramUniform2iv;
  tbl.glProgramUniform2ui = log_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = log_glProgramUniform2uiv;
  tbl.glProgramUniform3d = log_glProgramUniform3d;
  tbl.glProgramUniform3dv = log_glProgramUniform3dv;
  tbl.glProgramUniform3f = log_glProgramUniform3f;
  tbl.glProgramUniform3fv = log_glProgramUniform3fv;
  tbl.glProgramUniform3i = log_glProgramUniform3i;
  tbl.glProgramUniform3iv = log_glProgramUniform3iv;
  tbl.glProgramUniform3ui = log_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = log_glProgramUniform3uiv;
  tbl.glProgramUniform4d = log_glProgramUniform4d;
  tbl.glProgramUniform4dv = log_glProgramUniform4dv;
  tbl.glProgramUniform4f = log_glProgramUniform4f;
  tbl.glProgramUniform4fv = log_glProgramUniform4fv;
  tbl.glProgramUniform4i = log_glProgramUniform4i;
  tbl.glProgramUniform4iv = log_glProgramUniform4iv;
  tbl.glProgramUniform4ui = log_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = log_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = log_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = log_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = log_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = log_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = log_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = log_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = log_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = log_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = log_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = log_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = log_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = log_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = log_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = log_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = log_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = log_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = log_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = log_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = log_glUseProgramStages;
  tbl.glValidateProgramPipeline = log_glValidateProgramPipeline;

  // GL_ARB_shader_atomic_counters

  tbl.glGetActiveAtomicCounterBufferiv = log_glGetActiveAtomicCounterBufferiv;

  // GL_ARB_shader_image_load_store

  tbl.glBindImageTexture = log_glBindImageTexture;
  tbl.glMemoryBarrier = log_glMemoryBarrier;

  // GL_ARB_shader_objects

  tbl.glAttachObjectARB = log_glAttachObjectARB;
  tbl.glCompileShaderARB = log_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = log_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = log_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = log_glDeleteObjectARB;
  tbl.glDetachObjectARB = log_glDetachObjectARB;
  tbl.glGetActiveUniformARB = log_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = log_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = log_glGetHandleARB;
  tbl.glGetInfoLogARB = log_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = log_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = log_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = log_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = log_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = log_glGetUniformfvARB;
  tbl.glGetUniformivARB = log_glGetUniformivARB;
  tbl.glLinkProgramARB = log_glLinkProgramARB;
  tbl.glShaderSourceARB = log_glShaderSourceARB;
  tbl.glUniform1fARB = log_glUniform1fARB;
  tbl.glUniform1fvARB = log_glUniform1fvARB;
  tbl.glUniform1iARB = log_glUniform1iARB;
  tbl.glUniform1ivARB = log_glUniform1ivARB;
  tbl.glUniform2fARB = log_glUniform2fARB;
  tbl.glUniform2fvARB = log_glUniform2fvARB;
  tbl.glUniform2iARB = log_glUniform2iARB;
  tbl.glUniform2ivARB = log_glUniform2ivARB;
  tbl.glUniform3fARB = log_glUniform3fARB;
  tbl.glUniform3fvARB = log_glUniform3fvARB;
  tbl.glUniform3iARB = log_glUniform3iARB;
  tbl.glUniform3ivARB = log_glUniform3ivARB;
  tbl.glUniform4fARB = log_glUniform4fARB;
  tbl.glUniform4fvARB = log_glUniform4fvARB;
  tbl.glUniform4iARB = log_glUniform4iARB;
  tbl.glUniform4ivARB = log_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = log_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = log_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = log_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = log_glUseProgramObjectARB;
  tbl.glValidateProgramARB = log_glValidateProgramARB;

  // GL_ARB_shader_storage_buffer_object

  tbl.glShaderStorageBlockBinding = log_glShaderStorageBlockBinding;

  // GL_ARB_shader_subroutine

  tbl.glGetActiveSubroutineName = log_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = log_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = log_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = log_glGetProgramStageiv;
  tbl.glGetProgramSubroutineParameteruivNV = log_glGetProgramSubroutineParameteruivNV;
  tbl.glGetSubroutineIndex = log_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = log_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = log_glGetUniformSubroutineuiv;
  tbl.glProgramSubroutineParametersuivNV = log_glProgramSubroutineParametersuivNV;
  tbl.glUniformSubroutinesuiv = log_glUniformSubroutinesuiv;

  // GL_ARB_shading_language_include

  tbl.glCompileShaderIncludeARB = log_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = log_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = log_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = log_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = log_glIsNamedStringARB;
  tbl.glNamedStringARB = log_glNamedStringARB;

  // GL_ARB_sparse_texture

  tbl.glTexPageCommitmentARB = log_glTexPageCommitmentARB;
  tbl.glTexturePageCommitmentEXT = log_glTexturePageCommitmentEXT;

  // GL_ARB_sync

  tbl.glClientWaitSync = log_glClientWaitSync;
  tbl.glDeleteSync = log_glDeleteSync;
  tbl.glFenceSync = log_glFenceSync;
  tbl.glGetInteger64v = log_glGetInteger64v;
  tbl.glGetSynciv = log_glGetSynciv;
  tbl.glIsSync = log_glIsSync;
  tbl.glWaitSync = log_glWaitSync;

  // GL_ARB_tessellation_shader

  tbl.glPatchParameterfv = log_glPatchParameterfv;
  tbl.glPatchParameteri = log_glPatchParameteri;

  // GL_ARB_texture_buffer_object

  tbl.glTexBufferARB = log_glTexBufferARB;

  // GL_ARB_texture_buffer_range

  tbl.glTexBufferRange = log_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = log_glTextureBufferRangeEXT;

  // GL_ARB_texture_compression

  tbl.glCompressedTexImage1DARB = log_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = log_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = log_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = log_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = log_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = log_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = log_glGetCompressedTexImageARB;

  // GL_ARB_texture_multisample

  tbl.glGetMultisamplefv = log_glGetMultisamplefv;
  tbl.glSampleMaski = log_glSampleMaski;
  tbl.glTexImage2DMultisample = log_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = log_glTexImage3DMultisample;

  // GL_ARB_texture_storage

  tbl.glTexStorage1D = log_glTexStorage1D;
  tbl.glTexStorage2D = log_glTexStorage2D;
  tbl.glTexStorage3D = log_glTexStorage3D;
  tbl.glTextureStorage1DEXT = log_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = log_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = log_glTextureStorage3DEXT;

  // GL_ARB_texture_storage_multisample

  tbl.glTexStorage2DMultisample = log_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = log_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = log_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = log_glTextureStorage3DMultisampleEXT;

  // GL_ARB_texture_view

  tbl.glTextureView = log_glTextureView;

  // GL_ARB_timer_query

  tbl.glGetQueryObjecti64v = log_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = log_glGetQueryObjectui64v;
  tbl.glQueryCounter = log_glQueryCounter;

  // GL_ARB_transform_feedback2

  tbl.glBindTransformFeedback = log_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = log_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = log_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = log_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = log_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = log_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = log_glResumeTransformFeedback;

  // GL_ARB_transform_feedback3

  tbl.glBeginQueryIndexed = log_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = log_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = log_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = log_glGetQueryIndexediv;

  // GL_ARB_transform_feedback_instanced

  tbl.glDrawTransformFeedbackInstanced = log_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = log_glDrawTransformFeedbackStreamInstanced;

  // GL_ARB_transpose_matrix

  tbl.glLoadTransposeMatrixdARB = log_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = log_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = log_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = log_glMultTransposeMatrixfARB;

  // GL_ARB_uniform_buffer_object

  tbl.glBindBufferBase = log_glBindBufferBase;
  tbl.glBindBufferRange = log_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = log_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = log_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = log_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = log_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = log_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = log_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = log_glGetUniformIndices;
  tbl.glUniformBlockBinding = log_glUniformBlockBinding;

  // GL_ARB_vertex_array_object

  tbl.glBindVertexArray = log_glBindVertexArray;
  tbl.glDeleteVertexArrays = log_glDeleteVertexArrays;
  tbl.glGenVertexArrays = log_glGenVertexArrays;
  tbl.glIsVertexArray = log_glIsVertexArray;

  // GL_ARB_vertex_attrib_64bit

  tbl.glGetVertexAttribLdv = log_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = log_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = log_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = log_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = log_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = log_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = log_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = log_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = log_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = log_glVertexAttribLPointer;

  // GL_ARB_vertex_attrib_binding

  tbl.glBindVertexBuffer = log_glBindVertexBuffer;
  tbl.glVertexAttribBinding = log_glVertexAttribBinding;
  tbl.glVertexAttribFormat = log_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = log_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = log_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = log_glVertexBindingDivisor;

  // GL_ARB_vertex_blend

  tbl.glVertexBlendARB = log_glVertexBlendARB;
  tbl.glWeightPointerARB = log_glWeightPointerARB;
  tbl.glWeightbvARB = log_glWeightbvARB;
  tbl.glWeightdvARB = log_glWeightdvARB;
  tbl.glWeightfvARB = log_glWeightfvARB;
  tbl.glWeightivARB = log_glWeightivARB;
  tbl.glWeightsvARB = log_glWeightsvARB;
  tbl.glWeightubvARB = log_glWeightubvARB;
  tbl.glWeightuivARB = log_glWeightuivARB;
  tbl.glWeightusvARB = log_glWeightusvARB;

  // GL_ARB_vertex_buffer_object

  tbl.glBindBufferARB = log_glBindBufferARB;
  tbl.glBufferDataARB = log_glBufferDataARB;
  tbl.glBufferSubDataARB = log_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = log_glDeleteBuffersARB;
  tbl.glGenBuffersARB = log_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = log_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = log_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = log_glGetBufferSubDataARB;
  tbl.glIsBufferARB = log_glIsBufferARB;
  tbl.glMapBufferARB = log_glMapBufferARB;
  tbl.glUnmapBufferARB = log_glUnmapBufferARB;

  // GL_ARB_vertex_program

  tbl.glBindProgramARB = log_glBindProgramARB;
  tbl.glDeleteProgramsARB = log_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = log_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = log_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = log_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = log_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = log_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = log_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = log_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = log_glGetProgramStringARB;
  tbl.glGetProgramivARB = log_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = log_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = log_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = log_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = log_glGetVertexAttribivARB;
  tbl.glIsProgramARB = log_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = log_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = log_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = log_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = log_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = log_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = log_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = log_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = log_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = log_glProgramStringARB;
  tbl.glVertexAttrib1dARB = log_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = log_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = log_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = log_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = log_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = log_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = log_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = log_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = log_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = log_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = log_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = log_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = log_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = log_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = log_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = log_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = log_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = log_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = log_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = log_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = log_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = log_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = log_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = log_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = log_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = log_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = log_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = log_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = log_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = log_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = log_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = log_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = log_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = log_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = log_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = log_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = log_glVertexAttribPointerARB;

  // GL_ARB_vertex_shader

  tbl.glBindAttribLocationARB = log_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = log_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = log_glGetAttribLocationARB;

  // GL_ARB_vertex_type_2_10_10_10_rev

  tbl.glColorP3ui = log_glColorP3ui;
  tbl.glColorP3uiv = log_glColorP3uiv;
  tbl.glColorP4ui = log_glColorP4ui;
  tbl.glColorP4uiv = log_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = log_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = log_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = log_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = log_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = log_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = log_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = log_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = log_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = log_glNormalP3ui;
  tbl.glNormalP3uiv = log_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = log_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = log_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = log_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = log_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = log_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = log_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = log_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = log_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = log_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = log_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = log_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = log_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = log_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = log_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = log_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = log_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = log_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = log_glVertexAttribP4uiv;
  tbl.glVertexP2ui = log_glVertexP2ui;
  tbl.glVertexP2uiv = log_glVertexP2uiv;
  tbl.glVertexP3ui = log_glVertexP3ui;
  tbl.glVertexP3uiv = log_glVertexP3uiv;
  tbl.glVertexP4ui = log_glVertexP4ui;
  tbl.glVertexP4uiv = log_glVertexP4uiv;

  // GL_ARB_viewport_array

  tbl.glDepthRangeArrayv = log_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = log_glDepthRangeIndexed;
  tbl.glGetDoublei_v = log_glGetDoublei_v;
  tbl.glGetFloati_v = log_glGetFloati_v;
  tbl.glScissorArrayv = log_glScissorArrayv;
  tbl.glScissorIndexed = log_glScissorIndexed;
  tbl.glScissorIndexedv = log_glScissorIndexedv;
  tbl.glViewportArrayv = log_glViewportArrayv;
  tbl.glViewportIndexedf = log_glViewportIndexedf;
  tbl.glViewportIndexedfv = log_glViewportIndexedfv;

  // GL_ARB_window_pos

  tbl.glWindowPos2dARB = log_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = log_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = log_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = log_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = log_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = log_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = log_glWindowPos2sARB;
  tbl.glWindowPos2svARB = log_glWindowPos2svARB;
  tbl.glWindowPos3dARB = log_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = log_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = log_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = log_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = log_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = log_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = log_glWindowPos3sARB;
  tbl.glWindowPos3svARB = log_glWindowPos3svARB;

  // GL_ATI_draw_buffers

  tbl.glDrawBuffersATI = log_glDrawBuffersATI;

  // GL_ATI_element_array

  tbl.glDrawElementArrayATI = log_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = log_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = log_glElementPointerATI;

  // GL_ATI_envmap_bumpmap

  tbl.glGetTexBumpParameterfvATI = log_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = log_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = log_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = log_glTexBumpParameterivATI;

  // GL_ATI_fragment_shader

  tbl.glAlphaFragmentOp1ATI = log_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = log_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = log_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = log_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = log_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = log_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = log_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = log_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = log_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = log_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = log_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = log_glPassTexCoordATI;
  tbl.glSampleMapATI = log_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = log_glSetFragmentShaderConstantATI;

  // GL_ATI_map_object_buffer

  tbl.glMapObjectBufferATI = log_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = log_glUnmapObjectBufferATI;

  // GL_ATI_pn_triangles

  tbl.glPNTrianglesfATI = log_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = log_glPNTrianglesiATI;

  // GL_ATI_separate_stencil

  tbl.glStencilFuncSeparateATI = log_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = log_glStencilOpSeparateATI;

  // GL_ATI_vertex_array_object

  tbl.glArrayObjectATI = log_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = log_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = log_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = log_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = log_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = log_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = log_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = log_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = log_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = log_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = log_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = log_glVariantArrayObjectATI;

  // GL_ATI_vertex_attrib_array_object

  tbl.glGetVertexAttribArrayObjectfvATI = log_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = log_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = log_glVertexAttribArrayObjectATI;

  // GL_ATI_vertex_streams

  tbl.glClientActiveVertexStreamATI = log_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = log_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = log_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = log_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = log_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = log_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = log_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = log_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = log_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = log_glNormalStream3sATI;
  tbl.glNormalStream3svATI = log_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = log_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = log_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = log_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = log_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = log_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = log_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = log_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = log_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = log_glVertexStream1sATI;
  tbl.glVertexStream1svATI = log_glVertexStream1svATI;
  tbl.glVertexStream2dATI = log_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = log_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = log_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = log_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = log_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = log_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = log_glVertexStream2sATI;
  tbl.glVertexStream2svATI = log_glVertexStream2svATI;
  tbl.glVertexStream3dATI = log_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = log_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = log_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = log_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = log_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = log_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = log_glVertexStream3sATI;
  tbl.glVertexStream3svATI = log_glVertexStream3svATI;
  tbl.glVertexStream4dATI = log_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = log_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = log_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = log_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = log_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = log_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = log_glVertexStream4sATI;
  tbl.glVertexStream4svATI = log_glVertexStream4svATI;

  // GL_EXT_bindable_uniform

  tbl.glGetUniformBufferSizeEXT = log_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = log_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = log_glUniformBufferEXT;

  // GL_EXT_blend_color

  tbl.glBlendColorEXT = log_glBlendColorEXT;

  // GL_EXT_blend_equation_separate

  tbl.glBlendEquationSeparateEXT = log_glBlendEquationSeparateEXT;

  // GL_EXT_blend_func_separate

  tbl.glBlendFuncSeparateEXT = log_glBlendFuncSeparateEXT;

  // GL_EXT_blend_minmax

  tbl.glBlendEquationEXT = log_glBlendEquationEXT;

  // GL_EXT_color_subtable

  tbl.glColorSubTableEXT = log_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = log_glCopyColorSubTableEXT;

  // GL_EXT_compiled_vertex_array

  tbl.glLockArraysEXT = log_glLockArraysEXT;
  tbl.glUnlockArraysEXT = log_glUnlockArraysEXT;

  // GL_EXT_convolution

  tbl.glConvolutionFilter1DEXT = log_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = log_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = log_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = log_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = log_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = log_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = log_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = log_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = log_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = log_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = log_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = log_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = log_glSeparableFilter2DEXT;

  // GL_EXT_coordinate_frame

  tbl.glBinormal3bEXT = log_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = log_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = log_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = log_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = log_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = log_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = log_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = log_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = log_glBinormal3sEXT;
  tbl.glBinormal3svEXT = log_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = log_glBinormalPointerEXT;
  tbl.glTangent3bEXT = log_glTangent3bEXT;
  tbl.glTangent3bvEXT = log_glTangent3bvEXT;
  tbl.glTangent3dEXT = log_glTangent3dEXT;
  tbl.glTangent3dvEXT = log_glTangent3dvEXT;
  tbl.glTangent3fEXT = log_glTangent3fEXT;
  tbl.glTangent3fvEXT = log_glTangent3fvEXT;
  tbl.glTangent3iEXT = log_glTangent3iEXT;
  tbl.glTangent3ivEXT = log_glTangent3ivEXT;
  tbl.glTangent3sEXT = log_glTangent3sEXT;
  tbl.glTangent3svEXT = log_glTangent3svEXT;
  tbl.glTangentPointerEXT = log_glTangentPointerEXT;

  // GL_EXT_copy_texture

  tbl.glCopyTexImage1DEXT = log_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = log_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = log_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = log_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = log_glCopyTexSubImage3DEXT;

  // GL_EXT_cull_vertex

  tbl.glCullParameterdvEXT = log_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = log_glCullParameterfvEXT;

  // GL_EXT_debug_label

  tbl.glGetObjectLabelEXT = log_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = log_glLabelObjectEXT;

  // GL_EXT_debug_marker

  tbl.glInsertEventMarkerEXT = log_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = log_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = log_glPushGroupMarkerEXT;

  // GL_EXT_depth_bounds_test

  tbl.glDepthBoundsEXT = log_glDepthBoundsEXT;

  // GL_EXT_direct_state_access

  tbl.glBindMultiTextureEXT = log_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = log_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = log_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = log_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = log_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = log_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = log_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = log_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = log_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = log_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = log_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = log_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = log_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = log_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = log_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = log_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = log_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = log_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = log_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = log_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = log_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = log_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = log_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = log_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = log_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = log_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = log_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = log_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = log_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = log_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = log_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = log_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = log_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = log_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = log_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = log_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = log_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = log_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = log_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = log_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = log_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = log_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = log_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = log_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = log_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = log_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = log_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = log_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = log_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = log_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = log_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = log_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = log_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = log_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = log_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = log_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = log_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = log_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = log_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = log_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = log_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = log_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = log_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = log_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = log_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = log_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = log_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = log_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = log_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = log_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = log_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = log_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = log_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = log_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = log_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = log_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = log_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = log_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = log_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = log_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = log_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = log_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = log_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = log_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = log_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = log_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = log_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = log_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = log_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = log_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = log_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = log_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = log_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = log_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = log_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = log_glMatrixPopEXT;
  tbl.glMatrixPushEXT = log_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = log_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = log_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = log_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = log_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = log_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = log_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = log_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = log_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = log_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = log_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = log_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = log_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = log_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = log_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = log_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = log_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = log_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = log_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = log_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = log_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = log_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = log_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = log_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = log_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = log_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = log_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = log_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = log_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = log_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = log_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = log_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = log_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = log_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = log_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = log_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = log_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = log_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = log_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = log_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = log_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = log_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = log_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = log_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = log_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = log_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = log_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = log_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = log_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = log_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = log_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = log_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = log_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = log_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = log_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = log_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = log_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = log_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = log_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = log_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = log_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = log_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = log_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = log_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = log_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = log_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = log_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = log_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = log_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = log_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = log_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = log_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = log_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = log_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = log_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = log_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = log_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = log_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = log_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = log_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = log_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = log_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = log_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = log_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = log_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = log_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = log_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = log_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = log_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = log_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = log_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = log_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = log_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = log_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = log_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = log_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = log_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = log_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = log_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = log_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = log_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = log_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = log_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = log_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = log_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = log_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = log_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = log_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = log_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = log_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = log_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = log_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = log_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = log_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = log_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = log_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = log_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = log_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = log_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = log_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = log_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = log_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = log_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = log_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = log_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = log_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = log_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = log_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = log_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = log_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = log_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = log_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = log_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = log_glVertexArrayVertexOffsetEXT;

  // GL_EXT_discard_framebuffer

  tbl.glDiscardFramebufferEXT = log_glDiscardFramebufferEXT;

  // GL_EXT_disjoint_timer_query

  tbl.glGetQueryObjectivEXT = log_glGetQueryObjectivEXT;
  tbl.glQueryCounterEXT = log_glQueryCounterEXT;

  // GL_EXT_draw_buffers2

  tbl.glColorMaskIndexedEXT = log_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = log_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = log_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = log_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = log_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = log_glIsEnabledIndexedEXT;

  // GL_EXT_draw_instanced

  tbl.glDrawArraysInstancedEXT = log_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = log_glDrawElementsInstancedEXT;

  // GL_EXT_draw_range_elements

  tbl.glDrawRangeElementsEXT = log_glDrawRangeElementsEXT;

  // GL_EXT_fog_coord

  tbl.glFogCoordPointerEXT = log_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = log_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = log_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = log_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = log_glFogCoordfvEXT;

  // GL_EXT_fragment_lighting

  tbl.glFragmentColorMaterialEXT = log_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = log_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = log_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = log_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = log_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = log_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = log_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = log_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = log_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = log_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = log_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = log_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = log_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = log_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = log_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = log_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = log_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = log_glLightEnviEXT;

  // GL_EXT_framebuffer_blit

  tbl.glBlitFramebufferEXT = log_glBlitFramebufferEXT;

  // GL_EXT_framebuffer_multisample

  tbl.glRenderbufferStorageMultisampleEXT = log_glRenderbufferStorageMultisampleEXT;

  // GL_EXT_framebuffer_object

  tbl.glBindFramebufferEXT = log_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = log_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = log_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = log_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = log_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = log_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = log_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = log_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = log_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = log_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = log_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = log_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = log_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = log_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = log_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = log_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = log_glRenderbufferStorageEXT;

  // GL_EXT_geometry_shader4

  tbl.glFramebufferTextureEXT = log_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = log_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = log_glProgramParameteriEXT;

  // GL_EXT_gpu_program_parameters

  tbl.glProgramEnvParameters4fvEXT = log_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = log_glProgramLocalParameters4fvEXT;

  // GL_EXT_gpu_shader4

  tbl.glBindFragDataLocationEXT = log_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = log_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = log_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = log_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = log_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = log_glUniform1uiEXT;
  tbl.glUniform1uivEXT = log_glUniform1uivEXT;
  tbl.glUniform2uiEXT = log_glUniform2uiEXT;
  tbl.glUniform2uivEXT = log_glUniform2uivEXT;
  tbl.glUniform3uiEXT = log_glUniform3uiEXT;
  tbl.glUniform3uivEXT = log_glUniform3uivEXT;
  tbl.glUniform4uiEXT = log_glUniform4uiEXT;
  tbl.glUniform4uivEXT = log_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = log_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = log_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = log_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = log_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = log_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = log_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = log_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = log_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = log_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = log_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = log_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = log_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = log_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = log_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = log_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = log_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = log_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = log_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = log_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = log_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = log_glVertexAttribIPointerEXT;

  // GL_EXT_histogram

  tbl.glGetHistogramEXT = log_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = log_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = log_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = log_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = log_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = log_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = log_glHistogramEXT;
  tbl.glMinmaxEXT = log_glMinmaxEXT;
  tbl.glResetHistogramEXT = log_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = log_glResetMinmaxEXT;

  // GL_EXT_index_func

  tbl.glIndexFuncEXT = log_glIndexFuncEXT;

  // GL_EXT_index_material

  tbl.glIndexMaterialEXT = log_glIndexMaterialEXT;

  // GL_EXT_light_texture

  tbl.glApplyTextureEXT = log_glApplyTextureEXT;
  tbl.glTextureLightEXT = log_glTextureLightEXT;
  tbl.glTextureMaterialEXT = log_glTextureMaterialEXT;

  // GL_EXT_map_buffer_range

  tbl.glFlushMappedBufferRangeEXT = log_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = log_glMapBufferRangeEXT;

  // GL_EXT_multi_draw_arrays

  tbl.glMultiDrawArraysEXT = log_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = log_glMultiDrawElementsEXT;

  // GL_EXT_multisample

  tbl.glSampleMaskEXT = log_glSampleMaskEXT;
  tbl.glSamplePatternEXT = log_glSamplePatternEXT;

  // GL_EXT_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleEXT = log_glFramebufferTexture2DMultisampleEXT;

  // GL_EXT_multiview_draw_buffers

  tbl.glDrawBuffersIndexedEXT = log_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = log_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = log_glReadBufferIndexedEXT;

  // GL_EXT_occlusion_query_boolean

  tbl.glBeginQueryEXT = log_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = log_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = log_glEndQueryEXT;
  tbl.glGenQueriesEXT = log_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = log_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = log_glGetQueryivEXT;
  tbl.glIsQueryEXT = log_glIsQueryEXT;

  // GL_EXT_paletted_texture

  tbl.glColorTableEXT = log_glColorTableEXT;
  tbl.glGetColorTableEXT = log_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = log_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = log_glGetColorTableParameterivEXT;

  // GL_EXT_pixel_transform

  tbl.glGetPixelTransformParameterfvEXT = log_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = log_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = log_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = log_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = log_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = log_glPixelTransformParameterivEXT;

  // GL_EXT_point_parameters

  tbl.glPointParameterfEXT = log_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = log_glPointParameterfvEXT;

  // GL_EXT_polygon_offset

  tbl.glPolygonOffsetEXT = log_glPolygonOffsetEXT;

  // GL_EXT_provoking_vertex

  tbl.glProvokingVertexEXT = log_glProvokingVertexEXT;

  // GL_EXT_robustness

  tbl.glGetnUniformfvEXT = log_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = log_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = log_glReadnPixelsEXT;

  // GL_EXT_scene_marker

  tbl.glBeginSceneEXT = log_glBeginSceneEXT;
  tbl.glEndSceneEXT = log_glEndSceneEXT;

  // GL_EXT_secondary_color

  tbl.glSecondaryColor3bEXT = log_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = log_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = log_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = log_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = log_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = log_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = log_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = log_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = log_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = log_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = log_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = log_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = log_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = log_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = log_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = log_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = log_glSecondaryColorPointerEXT;

  // GL_EXT_separate_shader_objects

  tbl.glActiveProgramEXT = log_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = log_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = log_glUseShaderProgramEXT;

  // GL_EXT_shader_image_load_store

  tbl.glBindImageTextureEXT = log_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = log_glMemoryBarrierEXT;

  // GL_EXT_stencil_clear_tag

  tbl.glStencilClearTagEXT = log_glStencilClearTagEXT;

  // GL_EXT_stencil_two_side

  tbl.glActiveStencilFaceEXT = log_glActiveStencilFaceEXT;

  // GL_EXT_subtexture

  tbl.glTexSubImage1DEXT = log_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = log_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = log_glTexSubImage3DEXT;

  // GL_EXT_texture3D

  tbl.glTexImage3DEXT = log_glTexImage3DEXT;

  // GL_EXT_texture_array

  tbl.glFramebufferTextureLayerEXT = log_glFramebufferTextureLayerEXT;

  // GL_EXT_texture_buffer_object

  tbl.glTexBufferEXT = log_glTexBufferEXT;

  // GL_EXT_texture_integer

  tbl.glClearColorIiEXT = log_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = log_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = log_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = log_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = log_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = log_glTexParameterIuivEXT;

  // GL_EXT_texture_object

  tbl.glAreTexturesResidentEXT = log_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = log_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = log_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = log_glGenTexturesEXT;
  tbl.glIsTextureEXT = log_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = log_glPrioritizeTexturesEXT;

  // GL_EXT_texture_perturb_normal

  tbl.glTextureNormalEXT = log_glTextureNormalEXT;

  // GL_EXT_texture_storage

  tbl.glTexStorage1DEXT = log_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = log_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = log_glTexStorage3DEXT;

  // GL_EXT_timer_query

  tbl.glGetQueryObjecti64vEXT = log_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = log_glGetQueryObjectui64vEXT;

  // GL_EXT_transform_feedback

  tbl.glBeginTransformFeedbackEXT = log_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = log_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = log_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = log_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = log_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = log_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = log_glTransformFeedbackVaryingsEXT;

  // GL_EXT_vertex_array

  tbl.glArrayElementEXT = log_glArrayElementEXT;
  tbl.glColorPointerEXT = log_glColorPointerEXT;
  tbl.glDrawArraysEXT = log_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = log_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = log_glGetPointervEXT;
  tbl.glIndexPointerEXT = log_glIndexPointerEXT;
  tbl.glNormalPointerEXT = log_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = log_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = log_glVertexPointerEXT;

  // GL_EXT_vertex_attrib_64bit

  tbl.glGetVertexAttribLdvEXT = log_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = log_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = log_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = log_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = log_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = log_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = log_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = log_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = log_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = log_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = log_glVertexAttribLPointerEXT;

  // GL_EXT_vertex_shader

  tbl.glBeginVertexShaderEXT = log_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = log_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = log_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = log_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = log_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = log_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = log_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = log_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = log_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = log_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = log_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = log_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = log_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = log_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = log_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = log_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = log_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = log_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = log_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = log_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = log_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = log_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = log_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = log_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = log_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = log_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = log_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = log_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = log_glShaderOp1EXT;
  tbl.glShaderOp2EXT = log_glShaderOp2EXT;
  tbl.glShaderOp3EXT = log_glShaderOp3EXT;
  tbl.glSwizzleEXT = log_glSwizzleEXT;
  tbl.glVariantPointerEXT = log_glVariantPointerEXT;
  tbl.glVariantbvEXT = log_glVariantbvEXT;
  tbl.glVariantdvEXT = log_glVariantdvEXT;
  tbl.glVariantfvEXT = log_glVariantfvEXT;
  tbl.glVariantivEXT = log_glVariantivEXT;
  tbl.glVariantsvEXT = log_glVariantsvEXT;
  tbl.glVariantubvEXT = log_glVariantubvEXT;
  tbl.glVariantuivEXT = log_glVariantuivEXT;
  tbl.glVariantusvEXT = log_glVariantusvEXT;
  tbl.glWriteMaskEXT = log_glWriteMaskEXT;

  // GL_EXT_vertex_weighting

  tbl.glVertexWeightPointerEXT = log_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = log_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = log_glVertexWeightfvEXT;

  // GL_EXT_x11_sync_object

  tbl.glImportSyncEXT = log_glImportSyncEXT;

  // GL_GREMEDY_frame_terminator

  tbl.glFrameTerminatorGREMEDY = log_glFrameTerminatorGREMEDY;

  // GL_GREMEDY_string_marker

  tbl.glStringMarkerGREMEDY = log_glStringMarkerGREMEDY;

  // GL_HP_image_transform

  tbl.glGetImageTransformParameterfvHP = log_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = log_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = log_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = log_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = log_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = log_glImageTransformParameterivHP;

  // GL_IBM_multimode_draw_arrays

  tbl.glMultiModeDrawArraysIBM = log_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = log_glMultiModeDrawElementsIBM;

  // GL_IBM_vertex_array_lists

  tbl.glColorPointerListIBM = log_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = log_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = log_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = log_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = log_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = log_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = log_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = log_glVertexPointerListIBM;

  // GL_IMG_multisampled_render_to_texture

  tbl.glFramebufferTexture2DMultisampleIMG = log_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = log_glRenderbufferStorageMultisampleIMG;

  // GL_INGR_blend_func_separate

  tbl.glBlendFuncSeparateINGR = log_glBlendFuncSeparateINGR;

  // GL_INTEL_map_texture

  tbl.glMapTexture2DINTEL = log_glMapTexture2DINTEL;
  tbl.glSyncTextureINTEL = log_glSyncTextureINTEL;
  tbl.glUnmapTexture2DINTEL = log_glUnmapTexture2DINTEL;

  // GL_INTEL_parallel_arrays

  tbl.glColorPointervINTEL = log_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = log_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = log_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = log_glVertexPointervINTEL;

  // GL_INTEL_texture_scissor

  tbl.glTexScissorFuncINTEL = log_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = log_glTexScissorINTEL;

  // GL_KHR_debug

  tbl.glDebugMessageCallback = log_glDebugMessageCallback;
  tbl.glDebugMessageControl = log_glDebugMessageControl;
  tbl.glDebugMessageInsert = log_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = log_glGetDebugMessageLog;
  tbl.glGetObjectLabel = log_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = log_glGetObjectPtrLabel;
  tbl.glObjectLabel = log_glObjectLabel;
  tbl.glObjectPtrLabel = log_glObjectPtrLabel;
  tbl.glPopDebugGroup = log_glPopDebugGroup;
  tbl.glPushDebugGroup = log_glPushDebugGroup;

  // GL_KTX_buffer_region

  tbl.glBufferRegionEnabled = log_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = log_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = log_glDrawBufferRegion;
  tbl.glNewBufferRegion = log_glNewBufferRegion;
  tbl.glReadBufferRegion = log_glReadBufferRegion;

  // GL_MESA_resize_buffers

  tbl.glResizeBuffersMESA = log_glResizeBuffersMESA;

  // GL_MESA_window_pos

  tbl.glWindowPos2dMESA = log_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = log_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = log_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = log_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = log_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = log_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = log_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = log_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = log_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = log_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = log_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = log_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = log_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = log_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = log_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = log_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = log_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = log_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = log_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = log_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = log_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = log_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = log_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = log_glWindowPos4svMESA;

  // GL_NVX_conditional_render

  tbl.glBeginConditionalRenderNVX = log_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = log_glEndConditionalRenderNVX;

  // GL_NV_bindless_texture

  tbl.glGetImageHandleNV = log_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = log_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = log_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = log_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = log_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = log_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = log_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = log_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = log_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = log_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = log_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = log_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = log_glUniformHandleui64vNV;

  // GL_NV_conditional_render

  tbl.glBeginConditionalRenderNV = log_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = log_glEndConditionalRenderNV;

  // GL_NV_copy_image

  tbl.glCopyImageSubDataNV = log_glCopyImageSubDataNV;

  // GL_NV_coverage_sample

  tbl.glCoverageMaskNV = log_glCoverageMaskNV;
  tbl.glCoverageOperationNV = log_glCoverageOperationNV;

  // GL_NV_depth_buffer_float

  tbl.glClearDepthdNV = log_glClearDepthdNV;
  tbl.glDepthBoundsdNV = log_glDepthBoundsdNV;
  tbl.glDepthRangedNV = log_glDepthRangedNV;

  // GL_NV_draw_buffers

  tbl.glDrawBuffersNV = log_glDrawBuffersNV;

  // GL_NV_draw_texture

  tbl.glDrawTextureNV = log_glDrawTextureNV;

  // GL_NV_evaluators

  tbl.glEvalMapsNV = log_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = log_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = log_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = log_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = log_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = log_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = log_glMapControlPointsNV;
  tbl.glMapParameterfvNV = log_glMapParameterfvNV;
  tbl.glMapParameterivNV = log_glMapParameterivNV;

  // GL_NV_explicit_multisample

  tbl.glGetMultisamplefvNV = log_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = log_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = log_glTexRenderbufferNV;

  // GL_NV_fence

  tbl.glDeleteFencesNV = log_glDeleteFencesNV;
  tbl.glFinishFenceNV = log_glFinishFenceNV;
  tbl.glGenFencesNV = log_glGenFencesNV;
  tbl.glGetFenceivNV = log_glGetFenceivNV;
  tbl.glIsFenceNV = log_glIsFenceNV;
  tbl.glSetFenceNV = log_glSetFenceNV;
  tbl.glTestFenceNV = log_glTestFenceNV;

  // GL_NV_fragment_program

  tbl.glGetProgramNamedParameterdvNV = log_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = log_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = log_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = log_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = log_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = log_glProgramNamedParameter4fvNV;

  // GL_NV_framebuffer_blit

  tbl.glBlitFramebufferNV = log_glBlitFramebufferNV;

  // GL_NV_framebuffer_multisample_coverage

  tbl.glRenderbufferStorageMultisampleCoverageNV = log_glRenderbufferStorageMultisampleCoverageNV;

  // GL_NV_geometry_program4

  tbl.glProgramVertexLimitNV = log_glProgramVertexLimitNV;

  // GL_NV_gpu_program4

  tbl.glGetProgramEnvParameterIivNV = log_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = log_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = log_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = log_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = log_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = log_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = log_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = log_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = log_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = log_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = log_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = log_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = log_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = log_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = log_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = log_glProgramLocalParametersI4uivNV;

  // GL_NV_gpu_shader5

  tbl.glGetUniformi64vNV = log_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = log_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = log_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = log_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = log_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = log_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = log_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = log_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = log_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = log_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = log_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = log_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = log_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = log_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = log_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = log_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = log_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = log_glUniform1i64NV;
  tbl.glUniform1i64vNV = log_glUniform1i64vNV;
  tbl.glUniform1ui64NV = log_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = log_glUniform1ui64vNV;
  tbl.glUniform2i64NV = log_glUniform2i64NV;
  tbl.glUniform2i64vNV = log_glUniform2i64vNV;
  tbl.glUniform2ui64NV = log_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = log_glUniform2ui64vNV;
  tbl.glUniform3i64NV = log_glUniform3i64NV;
  tbl.glUniform3i64vNV = log_glUniform3i64vNV;
  tbl.glUniform3ui64NV = log_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = log_glUniform3ui64vNV;
  tbl.glUniform4i64NV = log_glUniform4i64NV;
  tbl.glUniform4i64vNV = log_glUniform4i64vNV;
  tbl.glUniform4ui64NV = log_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = log_glUniform4ui64vNV;

  // GL_NV_half_float

  tbl.glColor3hNV = log_glColor3hNV;
  tbl.glColor3hvNV = log_glColor3hvNV;
  tbl.glColor4hNV = log_glColor4hNV;
  tbl.glColor4hvNV = log_glColor4hvNV;
  tbl.glFogCoordhNV = log_glFogCoordhNV;
  tbl.glFogCoordhvNV = log_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = log_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = log_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = log_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = log_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = log_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = log_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = log_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = log_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = log_glNormal3hNV;
  tbl.glNormal3hvNV = log_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = log_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = log_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = log_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = log_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = log_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = log_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = log_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = log_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = log_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = log_glTexCoord4hvNV;
  tbl.glVertex2hNV = log_glVertex2hNV;
  tbl.glVertex2hvNV = log_glVertex2hvNV;
  tbl.glVertex3hNV = log_glVertex3hNV;
  tbl.glVertex3hvNV = log_glVertex3hvNV;
  tbl.glVertex4hNV = log_glVertex4hNV;
  tbl.glVertex4hvNV = log_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = log_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = log_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = log_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = log_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = log_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = log_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = log_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = log_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = log_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = log_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = log_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = log_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = log_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = log_glVertexWeighthvNV;

  // GL_NV_occlusion_query

  tbl.glBeginOcclusionQueryNV = log_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = log_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = log_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = log_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = log_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = log_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = log_glIsOcclusionQueryNV;

  // GL_NV_parameter_buffer_object

  tbl.glProgramBufferParametersIivNV = log_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = log_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = log_glProgramBufferParametersfvNV;

  // GL_NV_path_rendering

  tbl.glCopyPathNV = log_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = log_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = log_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = log_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = log_glCoverStrokePathNV;
  tbl.glDeletePathsNV = log_glDeletePathsNV;
  tbl.glGenPathsNV = log_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = log_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = log_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = log_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = log_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = log_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = log_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = log_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = log_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = log_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = log_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = log_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = log_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = log_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = log_glInterpolatePathsNV;
  tbl.glIsPathNV = log_glIsPathNV;
  tbl.glIsPointInFillPathNV = log_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = log_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = log_glPathColorGenNV;
  tbl.glPathCommandsNV = log_glPathCommandsNV;
  tbl.glPathCoordsNV = log_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = log_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = log_glPathDashArrayNV;
  tbl.glPathFogGenNV = log_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = log_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = log_glPathGlyphsNV;
  tbl.glPathParameterfNV = log_glPathParameterfNV;
  tbl.glPathParameterfvNV = log_glPathParameterfvNV;
  tbl.glPathParameteriNV = log_glPathParameteriNV;
  tbl.glPathParameterivNV = log_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = log_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = log_glPathStencilFuncNV;
  tbl.glPathStringNV = log_glPathStringNV;
  tbl.glPathSubCommandsNV = log_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = log_glPathSubCoordsNV;
  tbl.glPathTexGenNV = log_glPathTexGenNV;
  tbl.glPointAlongPathNV = log_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = log_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = log_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = log_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = log_glStencilStrokePathNV;
  tbl.glTransformPathNV = log_glTransformPathNV;
  tbl.glWeightPathsNV = log_glWeightPathsNV;

  // GL_NV_pixel_data_range

  tbl.glFlushPixelDataRangeNV = log_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = log_glPixelDataRangeNV;

  // GL_NV_point_sprite

  tbl.glPointParameteriNV = log_glPointParameteriNV;
  tbl.glPointParameterivNV = log_glPointParameterivNV;

  // GL_NV_present_video

  tbl.glGetVideoi64vNV = log_glGetVideoi64vNV;
  tbl.glGetVideoivNV = log_glGetVideoivNV;
  tbl.glGetVideoui64vNV = log_glGetVideoui64vNV;
  tbl.glGetVideouivNV = log_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = log_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = log_glPresentFrameKeyedNV;

  // GL_NV_primitive_restart

  tbl.glPrimitiveRestartIndexNV = log_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = log_glPrimitiveRestartNV;

  // GL_NV_read_buffer

  tbl.glReadBufferNV = log_glReadBufferNV;

  // GL_NV_register_combiners

  tbl.glCombinerInputNV = log_glCombinerInputNV;
  tbl.glCombinerOutputNV = log_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = log_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = log_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = log_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = log_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = log_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = log_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = log_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = log_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = log_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = log_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = log_glGetFinalCombinerInputParameterivNV;

  // GL_NV_register_combiners2

  tbl.glCombinerStageParameterfvNV = log_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = log_glGetCombinerStageParameterfvNV;

  // GL_NV_shader_buffer_load

  tbl.glGetBufferParameterui64vNV = log_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = log_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = log_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = log_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = log_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = log_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = log_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = log_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = log_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = log_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = log_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = log_glProgramUniformui64vNV;
  tbl.glUniformui64NV = log_glUniformui64NV;
  tbl.glUniformui64vNV = log_glUniformui64vNV;

  // GL_NV_texture_barrier

  tbl.glTextureBarrierNV = log_glTextureBarrierNV;

  // GL_NV_texture_multisample

  tbl.glTexImage2DMultisampleCoverageNV = log_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = log_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = log_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = log_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = log_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = log_glTextureImage3DMultisampleNV;

  // GL_NV_transform_feedback

  tbl.glActiveVaryingNV = log_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = log_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = log_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = log_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = log_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = log_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = log_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = log_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = log_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = log_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = log_glTransformFeedbackVaryingsNV;

  // GL_NV_transform_feedback2

  tbl.glBindTransformFeedbackNV = log_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = log_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = log_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = log_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = log_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = log_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = log_glResumeTransformFeedbackNV;

  // GL_NV_vdpau_interop

  tbl.glVDPAUFiniNV = log_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = log_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = log_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = log_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = log_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = log_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = log_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = log_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = log_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = log_glVDPAUUnregisterSurfaceNV;

  // GL_NV_vertex_array_range

  tbl.glFlushVertexArrayRangeNV = log_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = log_glVertexArrayRangeNV;

  // GL_NV_vertex_attrib_integer_64bit

  tbl.glGetVertexAttribLi64vNV = log_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = log_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = log_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = log_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = log_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = log_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = log_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = log_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = log_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = log_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = log_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = log_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = log_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = log_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = log_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = log_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = log_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = log_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = log_glVertexAttribLFormatNV;

  // GL_NV_vertex_buffer_unified_memory

  tbl.glBufferAddressRangeNV = log_glBufferAddressRangeNV;
  tbl.glColorFormatNV = log_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = log_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = log_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = log_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = log_glIndexFormatNV;
  tbl.glNormalFormatNV = log_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = log_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = log_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = log_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = log_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = log_glVertexFormatNV;

  // GL_NV_vertex_program

  tbl.glAreProgramsResidentNV = log_glAreProgramsResidentNV;
  tbl.glBindProgramNV = log_glBindProgramNV;
  tbl.glDeleteProgramsNV = log_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = log_glExecuteProgramNV;
  tbl.glGenProgramsNV = log_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = log_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = log_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = log_glGetProgramStringNV;
  tbl.glGetProgramivNV = log_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = log_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = log_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = log_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = log_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = log_glGetVertexAttribivNV;
  tbl.glIsProgramNV = log_glIsProgramNV;
  tbl.glLoadProgramNV = log_glLoadProgramNV;
  tbl.glProgramParameter4dNV = log_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = log_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = log_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = log_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = log_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = log_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = log_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = log_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = log_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = log_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = log_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = log_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = log_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = log_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = log_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = log_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = log_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = log_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = log_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = log_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = log_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = log_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = log_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = log_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = log_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = log_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = log_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = log_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = log_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = log_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = log_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = log_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = log_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = log_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = log_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = log_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = log_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = log_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = log_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = log_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = log_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = log_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = log_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = log_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = log_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = log_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = log_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = log_glVertexAttribs4ubvNV;

  // GL_NV_video_capture

  tbl.glBeginVideoCaptureNV = log_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = log_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = log_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = log_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = log_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = log_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = log_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = log_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = log_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = log_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = log_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = log_glVideoCaptureStreamParameterivNV;

  // GL_OES_blend_equation_separate

  tbl.glBlendEquationSeparateOES = log_glBlendEquationSeparateOES;

  // GL_OES_blend_func_separate

  tbl.glBlendFuncSeparateOES = log_glBlendFuncSeparateOES;

  // GL_OES_blend_subtract

  tbl.glBlendEquationOES = log_glBlendEquationOES;

  // GL_OES_framebuffer_object

  tbl.glBindFramebufferOES = log_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = log_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = log_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = log_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = log_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = log_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = log_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = log_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = log_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = log_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = log_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = log_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = log_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = log_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = log_glRenderbufferStorageOES;

  // GL_OES_get_program_binary

  tbl.glGetProgramBinaryOES = log_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = log_glProgramBinaryOES;

  // GL_OES_mapbuffer

  tbl.glGetBufferPointervOES = log_glGetBufferPointervOES;
  tbl.glMapBufferOES = log_glMapBufferOES;
  tbl.glUnmapBufferOES = log_glUnmapBufferOES;

  // GL_OES_matrix_palette

  tbl.glCurrentPaletteMatrixOES = log_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = log_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = log_glWeightPointerOES;

  // GL_OES_single_precision

  tbl.glClearDepthfOES = log_glClearDepthfOES;
  tbl.glClipPlanefOES = log_glClipPlanefOES;
  tbl.glDepthRangefOES = log_glDepthRangefOES;
  tbl.glFrustumfOES = log_glFrustumfOES;
  tbl.glGetClipPlanefOES = log_glGetClipPlanefOES;
  tbl.glOrthofOES = log_glOrthofOES;

  // GL_OES_texture_3D

  tbl.glCompressedTexImage3DOES = log_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = log_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = log_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = log_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = log_glTexImage3DOES;
  tbl.glTexSubImage3DOES = log_glTexSubImage3DOES;

  // GL_OES_texture_cube_map

  tbl.glGetTexGenfvOES = log_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = log_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = log_glGetTexGenxvOES;
  tbl.glTexGenfOES = log_glTexGenfOES;
  tbl.glTexGenfvOES = log_glTexGenfvOES;
  tbl.glTexGeniOES = log_glTexGeniOES;
  tbl.glTexGenivOES = log_glTexGenivOES;
  tbl.glTexGenxOES = log_glTexGenxOES;
  tbl.glTexGenxvOES = log_glTexGenxvOES;

  // GL_OES_vertex_array_object

  tbl.glBindVertexArrayOES = log_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = log_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = log_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = log_glIsVertexArrayOES;

  // GL_PGI_misc_hints

  tbl.glHintPGI = log_glHintPGI;

  // GL_QCOM_alpha_test

  tbl.glAlphaFuncQCOM = log_glAlphaFuncQCOM;

  // GL_QCOM_driver_control

  tbl.glDisableDriverControlQCOM = log_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = log_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = log_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = log_glGetDriverControlsQCOM;

  // GL_QCOM_extended_get

  tbl.glExtGetBufferPointervQCOM = log_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = log_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = log_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = log_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = log_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = log_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = log_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = log_glExtTexObjectStateOverrideiQCOM;

  // GL_QCOM_extended_get2

  tbl.glExtGetProgramBinarySourceQCOM = log_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = log_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = log_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = log_glExtIsProgramBinaryQCOM;

  // GL_QCOM_tiled_rendering

  tbl.glEndTilingQCOM = log_glEndTilingQCOM;
  tbl.glStartTilingQCOM = log_glStartTilingQCOM;

  // GL_REGAL_ES1_0_compatibility

  tbl.glAlphaFuncx = log_glAlphaFuncx;
  tbl.glClearColorx = log_glClearColorx;
  tbl.glClearDepthx = log_glClearDepthx;
  tbl.glColor4x = log_glColor4x;
  tbl.glDepthRangex = log_glDepthRangex;
  tbl.glFogx = log_glFogx;
  tbl.glFogxv = log_glFogxv;
  tbl.glFrustumf = log_glFrustumf;
  tbl.glFrustumx = log_glFrustumx;
  tbl.glLightModelx = log_glLightModelx;
  tbl.glLightModelxv = log_glLightModelxv;
  tbl.glLightx = log_glLightx;
  tbl.glLightxv = log_glLightxv;
  tbl.glLineWidthx = log_glLineWidthx;
  tbl.glLoadMatrixx = log_glLoadMatrixx;
  tbl.glMaterialx = log_glMaterialx;
  tbl.glMaterialxv = log_glMaterialxv;
  tbl.glMultMatrixx = log_glMultMatrixx;
  tbl.glMultiTexCoord4x = log_glMultiTexCoord4x;
  tbl.glNormal3x = log_glNormal3x;
  tbl.glOrthof = log_glOrthof;
  tbl.glOrthox = log_glOrthox;
  tbl.glPointSizex = log_glPointSizex;
  tbl.glPolygonOffsetx = log_glPolygonOffsetx;
  tbl.glRotatex = log_glRotatex;
  tbl.glSampleCoveragex = log_glSampleCoveragex;
  tbl.glScalex = log_glScalex;
  tbl.glTexEnvx = log_glTexEnvx;
  tbl.glTexEnvxv = log_glTexEnvxv;
  tbl.glTexParameterx = log_glTexParameterx;
  tbl.glTranslatex = log_glTranslatex;

  // GL_REGAL_ES1_1_compatibility

  tbl.glClipPlanef = log_glClipPlanef;
  tbl.glClipPlanex = log_glClipPlanex;
  tbl.glGetClipPlanef = log_glGetClipPlanef;
  tbl.glGetClipPlanex = log_glGetClipPlanex;
  tbl.glGetFixedv = log_glGetFixedv;
  tbl.glGetLightxv = log_glGetLightxv;
  tbl.glGetMaterialxv = log_glGetMaterialxv;
  tbl.glGetTexEnvxv = log_glGetTexEnvxv;
  tbl.glGetTexParameterxv = log_glGetTexParameterxv;
  tbl.glPointParameterx = log_glPointParameterx;
  tbl.glPointParameterxv = log_glPointParameterxv;
  tbl.glPointSizePointerOES = log_glPointSizePointerOES;
  tbl.glTexParameterxv = log_glTexParameterxv;

  // GL_REGAL_log

  tbl.glLogMessageCallbackREGAL = log_glLogMessageCallbackREGAL;

  // GL_SGIS_detail_texture

  tbl.glDetailTexFuncSGIS = log_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = log_glGetDetailTexFuncSGIS;

  // GL_SGIS_fog_function

  tbl.glFogFuncSGIS = log_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = log_glGetFogFuncSGIS;

  // GL_SGIS_multisample

  tbl.glSampleMaskSGIS = log_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = log_glSamplePatternSGIS;

  // GL_SGIS_pixel_texture

  tbl.glGetPixelTexGenParameterfvSGIS = log_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = log_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = log_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = log_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = log_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = log_glPixelTexGenParameterivSGIS;

  // GL_SGIS_point_parameters

  tbl.glPointParameterfSGIS = log_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = log_glPointParameterfvSGIS;

  // GL_SGIS_sharpen_texture

  tbl.glGetSharpenTexFuncSGIS = log_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = log_glSharpenTexFuncSGIS;

  // GL_SGIS_texture4D

  tbl.glTexImage4DSGIS = log_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = log_glTexSubImage4DSGIS;

  // GL_SGIS_texture_color_mask

  tbl.glTextureColorMaskSGIS = log_glTextureColorMaskSGIS;

  // GL_SGIS_texture_filter4

  tbl.glGetTexFilterFuncSGIS = log_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = log_glTexFilterFuncSGIS;

  // GL_SGIX_async

  tbl.glAsyncMarkerSGIX = log_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = log_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = log_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = log_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = log_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = log_glPollAsyncSGIX;

  // GL_SGIX_flush_raster

  tbl.glFlushRasterSGIX = log_glFlushRasterSGIX;

  // GL_SGIX_fog_texture

  tbl.glTextureFogSGIX = log_glTextureFogSGIX;

  // GL_SGIX_fragment_lighting

  tbl.glFragmentColorMaterialSGIX = log_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = log_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = log_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = log_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = log_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = log_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = log_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = log_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = log_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = log_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = log_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = log_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = log_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = log_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = log_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = log_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = log_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = log_glLightEnviSGIX;

  // GL_SGIX_framezoom

  tbl.glFrameZoomSGIX = log_glFrameZoomSGIX;

  // GL_SGIX_igloo_interface

  tbl.glIglooInterfaceSGIX = log_glIglooInterfaceSGIX;

  // GL_SGIX_instruments

  tbl.glGetInstrumentsSGIX = log_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = log_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = log_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = log_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = log_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = log_glStopInstrumentsSGIX;

  // GL_SGIX_list_priority

  tbl.glGetListParameterfvSGIX = log_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = log_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = log_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = log_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = log_glListParameteriSGIX;
  tbl.glListParameterivSGIX = log_glListParameterivSGIX;

  // GL_SGIX_pixel_texture

  tbl.glPixelTexGenSGIX = log_glPixelTexGenSGIX;

  // GL_SGIX_polynomial_ffd

  tbl.glDeformSGIX = log_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = log_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = log_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = log_glLoadIdentityDeformationMapSGIX;

  // GL_SGIX_reference_plane

  tbl.glReferencePlaneSGIX = log_glReferencePlaneSGIX;

  // GL_SGIX_sprite

  tbl.glSpriteParameterfSGIX = log_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = log_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = log_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = log_glSpriteParameterivSGIX;

  // GL_SGIX_tag_sample_buffer

  tbl.glTagSampleBufferSGIX = log_glTagSampleBufferSGIX;

  // GL_SGI_color_table

  tbl.glColorTableParameterfvSGI = log_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = log_glColorTableParameterivSGI;
  tbl.glColorTableSGI = log_glColorTableSGI;
  tbl.glCopyColorTableSGI = log_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = log_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = log_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = log_glGetColorTableSGI;

  // GL_SUNX_constant_data

  tbl.glFinishTextureSUNX = log_glFinishTextureSUNX;

  // GL_SUN_global_alpha

  tbl.glGlobalAlphaFactorbSUN = log_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = log_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = log_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = log_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = log_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = log_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = log_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = log_glGlobalAlphaFactorusSUN;

  // GL_SUN_mesh_array

  tbl.glDrawMeshArraysSUN = log_glDrawMeshArraysSUN;

  // GL_SUN_read_video_pixels

  tbl.glReadVideoPixelsSUN = log_glReadVideoPixelsSUN;

  // GL_SUN_triangle_list

  tbl.glReplacementCodePointerSUN = log_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = log_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = log_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = log_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = log_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = log_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = log_glReplacementCodeusvSUN;

  // GL_SUN_vertex

  tbl.glColor3fVertex3fSUN = log_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = log_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = log_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = log_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = log_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = log_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = log_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = log_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = log_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = log_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = log_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = log_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = log_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = log_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = log_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = log_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = log_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = log_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = log_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = log_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = log_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = log_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = log_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = log_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = log_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = log_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = log_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = log_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = log_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = log_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = log_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = log_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = log_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = log_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = log_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = log_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = log_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = log_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = log_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = log_glTexCoord4fVertex4fvSUN;

  // GL_WIN_swap_hint

  tbl.glAddSwapHintRectWIN = log_glAddSwapHintRectWIN;

}

void InitDispatchTableGlobalLog(DispatchTableGlobal &tbl)
{

#if REGAL_SYS_WGL
  // WGL_3DL_stereo_control

  tbl.wglSetStereoEmitterState3DL = log_wglSetStereoEmitterState3DL;

  // WGL_AMD_gpu_association

  tbl.wglBlitContextFramebufferAMD = log_wglBlitContextFramebufferAMD;
  tbl.wglCreateAssociatedContextAMD = log_wglCreateAssociatedContextAMD;
  tbl.wglCreateAssociatedContextAttribsAMD = log_wglCreateAssociatedContextAttribsAMD;
  tbl.wglDeleteAssociatedContextAMD = log_wglDeleteAssociatedContextAMD;
  tbl.wglGetContextGPUIDAMD = log_wglGetContextGPUIDAMD;
  tbl.wglGetCurrentAssociatedContextAMD = log_wglGetCurrentAssociatedContextAMD;
  tbl.wglGetGPUIDsAMD = log_wglGetGPUIDsAMD;
  tbl.wglGetGPUInfoAMD = log_wglGetGPUInfoAMD;
  tbl.wglMakeAssociatedContextCurrentAMD = log_wglMakeAssociatedContextCurrentAMD;

  // WGL_ARB_buffer_region

  tbl.wglCreateBufferRegionARB = log_wglCreateBufferRegionARB;
  tbl.wglDeleteBufferRegionARB = log_wglDeleteBufferRegionARB;
  tbl.wglRestoreBufferRegionARB = log_wglRestoreBufferRegionARB;
  tbl.wglSaveBufferRegionARB = log_wglSaveBufferRegionARB;

  // WGL_ARB_create_context

  tbl.wglCreateContextAttribsARB = log_wglCreateContextAttribsARB;

  // WGL_ARB_extensions_string

  tbl.wglGetExtensionsStringARB = log_wglGetExtensionsStringARB;

  // WGL_ARB_make_current_read

  tbl.wglGetCurrentReadDCARB = log_wglGetCurrentReadDCARB;
  tbl.wglMakeContextCurrentARB = log_wglMakeContextCurrentARB;

  // WGL_ARB_pbuffer

  tbl.wglCreatePbufferARB = log_wglCreatePbufferARB;
  tbl.wglDestroyPbufferARB = log_wglDestroyPbufferARB;
  tbl.wglGetPbufferDCARB = log_wglGetPbufferDCARB;
  tbl.wglQueryPbufferARB = log_wglQueryPbufferARB;
  tbl.wglReleasePbufferDCARB = log_wglReleasePbufferDCARB;

  // WGL_ARB_pixel_format

  tbl.wglChoosePixelFormatARB = log_wglChoosePixelFormatARB;
  tbl.wglGetPixelFormatAttribfvARB = log_wglGetPixelFormatAttribfvARB;
  tbl.wglGetPixelFormatAttribivARB = log_wglGetPixelFormatAttribivARB;

  // WGL_ARB_render_texture

  tbl.wglBindTexImageARB = log_wglBindTexImageARB;
  tbl.wglReleaseTexImageARB = log_wglReleaseTexImageARB;
  tbl.wglSetPbufferAttribARB = log_wglSetPbufferAttribARB;

  // WGL_EXT_display_color_table

  tbl.wglBindDisplayColorTableEXT = log_wglBindDisplayColorTableEXT;
  tbl.wglCreateDisplayColorTableEXT = log_wglCreateDisplayColorTableEXT;
  tbl.wglDestroyDisplayColorTableEXT = log_wglDestroyDisplayColorTableEXT;
  tbl.wglLoadDisplayColorTableEXT = log_wglLoadDisplayColorTableEXT;

  // WGL_EXT_extensions_string

  tbl.wglGetExtensionsStringEXT = log_wglGetExtensionsStringEXT;

  // WGL_EXT_make_current_read

  tbl.wglGetCurrentReadDCEXT = log_wglGetCurrentReadDCEXT;
  tbl.wglMakeContextCurrentEXT = log_wglMakeContextCurrentEXT;

  // WGL_EXT_pbuffer

  tbl.wglCreatePbufferEXT = log_wglCreatePbufferEXT;
  tbl.wglDestroyPbufferEXT = log_wglDestroyPbufferEXT;
  tbl.wglGetPbufferDCEXT = log_wglGetPbufferDCEXT;
  tbl.wglQueryPbufferEXT = log_wglQueryPbufferEXT;
  tbl.wglReleasePbufferDCEXT = log_wglReleasePbufferDCEXT;

  // WGL_EXT_pixel_format

  tbl.wglChoosePixelFormatEXT = log_wglChoosePixelFormatEXT;
  tbl.wglGetPixelFormatAttribfvEXT = log_wglGetPixelFormatAttribfvEXT;
  tbl.wglGetPixelFormatAttribivEXT = log_wglGetPixelFormatAttribivEXT;

  // WGL_EXT_swap_control

  tbl.wglGetSwapIntervalEXT = log_wglGetSwapIntervalEXT;
  tbl.wglSwapIntervalEXT = log_wglSwapIntervalEXT;

  // WGL_GDI

  tbl.wglChoosePixelFormat = log_wglChoosePixelFormat;
  tbl.wglDescribePixelFormat = log_wglDescribePixelFormat;
  tbl.wglGetPixelFormat = log_wglGetPixelFormat;
  tbl.wglSetPixelFormat = log_wglSetPixelFormat;
  tbl.wglSwapBuffers = log_wglSwapBuffers;

  // WGL_I3D_digital_video_control

  tbl.wglGetDigitalVideoParametersI3D = log_wglGetDigitalVideoParametersI3D;
  tbl.wglSetDigitalVideoParametersI3D = log_wglSetDigitalVideoParametersI3D;

  // WGL_I3D_gamma

  tbl.wglGetGammaTableI3D = log_wglGetGammaTableI3D;
  tbl.wglGetGammaTableParametersI3D = log_wglGetGammaTableParametersI3D;
  tbl.wglSetGammaTableI3D = log_wglSetGammaTableI3D;
  tbl.wglSetGammaTableParametersI3D = log_wglSetGammaTableParametersI3D;

  // WGL_I3D_genlock

  tbl.wglDisableGenlockI3D = log_wglDisableGenlockI3D;
  tbl.wglEnableGenlockI3D = log_wglEnableGenlockI3D;
  tbl.wglGenlockSampleRateI3D = log_wglGenlockSampleRateI3D;
  tbl.wglGenlockSourceDelayI3D = log_wglGenlockSourceDelayI3D;
  tbl.wglGenlockSourceEdgeI3D = log_wglGenlockSourceEdgeI3D;
  tbl.wglGenlockSourceI3D = log_wglGenlockSourceI3D;
  tbl.wglGetGenlockSampleRateI3D = log_wglGetGenlockSampleRateI3D;
  tbl.wglGetGenlockSourceDelayI3D = log_wglGetGenlockSourceDelayI3D;
  tbl.wglGetGenlockSourceEdgeI3D = log_wglGetGenlockSourceEdgeI3D;
  tbl.wglGetGenlockSourceI3D = log_wglGetGenlockSourceI3D;
  tbl.wglIsEnabledGenlockI3D = log_wglIsEnabledGenlockI3D;
  tbl.wglQueryGenlockMaxSourceDelayI3D = log_wglQueryGenlockMaxSourceDelayI3D;

  // WGL_I3D_image_buffer

  tbl.wglAssociateImageBufferEventsI3D = log_wglAssociateImageBufferEventsI3D;
  tbl.wglCreateImageBufferI3D = log_wglCreateImageBufferI3D;
  tbl.wglDestroyImageBufferI3D = log_wglDestroyImageBufferI3D;
  tbl.wglReleaseImageBufferEventsI3D = log_wglReleaseImageBufferEventsI3D;

  // WGL_I3D_swap_frame_lock

  tbl.wglDisableFrameLockI3D = log_wglDisableFrameLockI3D;
  tbl.wglEnableFrameLockI3D = log_wglEnableFrameLockI3D;
  tbl.wglIsEnabledFrameLockI3D = log_wglIsEnabledFrameLockI3D;
  tbl.wglQueryFrameLockMasterI3D = log_wglQueryFrameLockMasterI3D;

  // WGL_I3D_swap_frame_usage

  tbl.wglBeginFrameTrackingI3D = log_wglBeginFrameTrackingI3D;
  tbl.wglEndFrameTrackingI3D = log_wglEndFrameTrackingI3D;
  tbl.wglGetFrameUsageI3D = log_wglGetFrameUsageI3D;
  tbl.wglQueryFrameTrackingI3D = log_wglQueryFrameTrackingI3D;

  // WGL_NV_DX_interop

  tbl.wglDXCloseDeviceNV = log_wglDXCloseDeviceNV;
  tbl.wglDXLockObjectsNV = log_wglDXLockObjectsNV;
  tbl.wglDXObjectAccessNV = log_wglDXObjectAccessNV;
  tbl.wglDXOpenDeviceNV = log_wglDXOpenDeviceNV;
  tbl.wglDXRegisterObjectNV = log_wglDXRegisterObjectNV;
  tbl.wglDXSetResourceShareHandleNV = log_wglDXSetResourceShareHandleNV;
  tbl.wglDXUnlockObjectsNV = log_wglDXUnlockObjectsNV;
  tbl.wglDXUnregisterObjectNV = log_wglDXUnregisterObjectNV;

  // WGL_NV_copy_image

  tbl.wglCopyImageSubDataNV = log_wglCopyImageSubDataNV;

  // WGL_NV_gpu_affinity

  tbl.wglCreateAffinityDCNV = log_wglCreateAffinityDCNV;
  tbl.wglDeleteDCNV = log_wglDeleteDCNV;
  tbl.wglEnumGpuDevicesNV = log_wglEnumGpuDevicesNV;
  tbl.wglEnumGpusFromAffinityDCNV = log_wglEnumGpusFromAffinityDCNV;
  tbl.wglEnumGpusNV = log_wglEnumGpusNV;

  // WGL_NV_present_video

  tbl.wglBindVideoDeviceNV = log_wglBindVideoDeviceNV;
  tbl.wglEnumerateVideoDevicesNV = log_wglEnumerateVideoDevicesNV;
  tbl.wglQueryCurrentContextNV = log_wglQueryCurrentContextNV;

  // WGL_NV_swap_group

  tbl.wglBindSwapBarrierNV = log_wglBindSwapBarrierNV;
  tbl.wglJoinSwapGroupNV = log_wglJoinSwapGroupNV;
  tbl.wglQueryFrameCountNV = log_wglQueryFrameCountNV;
  tbl.wglQueryMaxSwapGroupsNV = log_wglQueryMaxSwapGroupsNV;
  tbl.wglQuerySwapGroupNV = log_wglQuerySwapGroupNV;
  tbl.wglResetFrameCountNV = log_wglResetFrameCountNV;

  // WGL_NV_vertex_array_range

  tbl.wglAllocateMemoryNV = log_wglAllocateMemoryNV;
  tbl.wglFreeMemoryNV = log_wglFreeMemoryNV;

  // WGL_NV_video_capture

  tbl.wglBindVideoCaptureDeviceNV = log_wglBindVideoCaptureDeviceNV;
  tbl.wglEnumerateVideoCaptureDevicesNV = log_wglEnumerateVideoCaptureDevicesNV;
  tbl.wglLockVideoCaptureDeviceNV = log_wglLockVideoCaptureDeviceNV;
  tbl.wglQueryVideoCaptureDeviceNV = log_wglQueryVideoCaptureDeviceNV;
  tbl.wglReleaseVideoCaptureDeviceNV = log_wglReleaseVideoCaptureDeviceNV;

  // WGL_NV_video_output

  tbl.wglBindVideoImageNV = log_wglBindVideoImageNV;
  tbl.wglGetVideoDeviceNV = log_wglGetVideoDeviceNV;
  tbl.wglGetVideoInfoNV = log_wglGetVideoInfoNV;
  tbl.wglReleaseVideoDeviceNV = log_wglReleaseVideoDeviceNV;
  tbl.wglReleaseVideoImageNV = log_wglReleaseVideoImageNV;
  tbl.wglSendPbufferToVideoNV = log_wglSendPbufferToVideoNV;

  // WGL_OML_sync_control

  tbl.wglGetMscRateOML = log_wglGetMscRateOML;
  tbl.wglGetSyncValuesOML = log_wglGetSyncValuesOML;
  tbl.wglSwapBuffersMscOML = log_wglSwapBuffersMscOML;
  tbl.wglSwapLayerBuffersMscOML = log_wglSwapLayerBuffersMscOML;
  tbl.wglWaitForMscOML = log_wglWaitForMscOML;
  tbl.wglWaitForSbcOML = log_wglWaitForSbcOML;

  // WGL_core

  tbl.wglCopyContext = log_wglCopyContext;
  tbl.wglCreateContext = log_wglCreateContext;
  tbl.wglCreateLayerContext = log_wglCreateLayerContext;
  tbl.wglDeleteContext = log_wglDeleteContext;
  tbl.wglDescribeLayerPlane = log_wglDescribeLayerPlane;
  tbl.wglGetCurrentContext = log_wglGetCurrentContext;
  tbl.wglGetCurrentDC = log_wglGetCurrentDC;
  tbl.wglGetDefaultProcAddress = log_wglGetDefaultProcAddress;
  tbl.wglGetLayerPaletteEntries = log_wglGetLayerPaletteEntries;
  tbl.wglGetProcAddress = log_wglGetProcAddress;
  tbl.wglMakeCurrent = log_wglMakeCurrent;
  tbl.wglRealizeLayerPalette = log_wglRealizeLayerPalette;
  tbl.wglSetLayerPaletteEntries = log_wglSetLayerPaletteEntries;
  tbl.wglShareLists = log_wglShareLists;
  tbl.wglSwapLayerBuffers = log_wglSwapLayerBuffers;
  tbl.wglSwapMultipleBuffers = log_wglSwapMultipleBuffers;
  tbl.wglUseFontBitmapsA = log_wglUseFontBitmapsA;
  tbl.wglUseFontBitmapsW = log_wglUseFontBitmapsW;
  tbl.wglUseFontOutlinesA = log_wglUseFontOutlinesA;
  tbl.wglUseFontOutlinesW = log_wglUseFontOutlinesW;
#endif // REGAL_SYS_WGL

#if REGAL_SYS_GLX

  // GLX_VERSION_1_0

  tbl.glXChooseVisual = log_glXChooseVisual;
  tbl.glXCopyContext = log_glXCopyContext;
  tbl.glXCreateContext = log_glXCreateContext;
  tbl.glXCreateGLXPixmap = log_glXCreateGLXPixmap;
  tbl.glXDestroyContext = log_glXDestroyContext;
  tbl.glXDestroyGLXPixmap = log_glXDestroyGLXPixmap;
  tbl.glXGetConfig = log_glXGetConfig;
  tbl.glXGetCurrentContext = log_glXGetCurrentContext;
  tbl.glXGetCurrentDrawable = log_glXGetCurrentDrawable;
  tbl.glXIsDirect = log_glXIsDirect;
  tbl.glXMakeCurrent = log_glXMakeCurrent;
  tbl.glXQueryExtension = log_glXQueryExtension;
  tbl.glXQueryVersion = log_glXQueryVersion;
  tbl.glXSwapBuffers = log_glXSwapBuffers;
  tbl.glXUseXFont = log_glXUseXFont;
  tbl.glXWaitGL = log_glXWaitGL;
  tbl.glXWaitX = log_glXWaitX;

  // GLX_VERSION_1_1

  tbl.glXGetClientString = log_glXGetClientString;
  tbl.glXQueryExtensionsString = log_glXQueryExtensionsString;
  tbl.glXQueryServerString = log_glXQueryServerString;

  // GLX_VERSION_1_2

  tbl.glXGetCurrentDisplay = log_glXGetCurrentDisplay;

  // GLX_VERSION_1_3

  tbl.glXChooseFBConfig = log_glXChooseFBConfig;
  tbl.glXCreateNewContext = log_glXCreateNewContext;
  tbl.glXCreatePbuffer = log_glXCreatePbuffer;
  tbl.glXCreatePixmap = log_glXCreatePixmap;
  tbl.glXCreateWindow = log_glXCreateWindow;
  tbl.glXDestroyPbuffer = log_glXDestroyPbuffer;
  tbl.glXDestroyPixmap = log_glXDestroyPixmap;
  tbl.glXDestroyWindow = log_glXDestroyWindow;
  tbl.glXGetCurrentReadDrawable = log_glXGetCurrentReadDrawable;
  tbl.glXGetFBConfigAttrib = log_glXGetFBConfigAttrib;
  tbl.glXGetFBConfigs = log_glXGetFBConfigs;
  tbl.glXGetSelectedEvent = log_glXGetSelectedEvent;
  tbl.glXGetVisualFromFBConfig = log_glXGetVisualFromFBConfig;
  tbl.glXMakeContextCurrent = log_glXMakeContextCurrent;
  tbl.glXQueryContext = log_glXQueryContext;
  tbl.glXQueryDrawable = log_glXQueryDrawable;
  tbl.glXSelectEvent = log_glXSelectEvent;

  // GLX_VERSION_1_4

  tbl.glXGetProcAddress = log_glXGetProcAddress;

  // GLX_AMD_gpu_association

  tbl.glXBlitContextFramebufferAMD = log_glXBlitContextFramebufferAMD;
  tbl.glXCreateAssociatedContextAMD = log_glXCreateAssociatedContextAMD;
  tbl.glXCreateAssociatedContextAttribsAMD = log_glXCreateAssociatedContextAttribsAMD;
  tbl.glXDeleteAssociatedContextAMD = log_glXDeleteAssociatedContextAMD;
  tbl.glXGetContextGPUIDAMD = log_glXGetContextGPUIDAMD;
  tbl.glXGetCurrentAssociatedContextAMD = log_glXGetCurrentAssociatedContextAMD;
  tbl.glXGetGPUIDsAMD = log_glXGetGPUIDsAMD;
  tbl.glXGetGPUInfoAMD = log_glXGetGPUInfoAMD;
  tbl.glXMakeAssociatedContextCurrentAMD = log_glXMakeAssociatedContextCurrentAMD;

  // GLX_ARB_create_context

  tbl.glXCreateContextAttribsARB = log_glXCreateContextAttribsARB;

  // GLX_ARB_get_proc_address

  tbl.glXGetProcAddressARB = log_glXGetProcAddressARB;

  // GLX_ATI_render_texture

  tbl.glXBindTexImageATI = log_glXBindTexImageATI;
  tbl.glXDrawableAttribATI = log_glXDrawableAttribATI;
  tbl.glXReleaseTexImageATI = log_glXReleaseTexImageATI;

  // GLX_EXT_import_context

  tbl.glXFreeContextEXT = log_glXFreeContextEXT;
  tbl.glXGetContextIDEXT = log_glXGetContextIDEXT;
  tbl.glXImportContextEXT = log_glXImportContextEXT;
  tbl.glXQueryContextInfoEXT = log_glXQueryContextInfoEXT;

  // GLX_EXT_swap_control

  tbl.glXSwapIntervalEXT = log_glXSwapIntervalEXT;

  // GLX_EXT_texture_from_pixmap

  tbl.glXBindTexImageEXT = log_glXBindTexImageEXT;
  tbl.glXReleaseTexImageEXT = log_glXReleaseTexImageEXT;

  // GLX_MESA_agp_offset

  tbl.glXGetAGPOffsetMESA = log_glXGetAGPOffsetMESA;

  // GLX_MESA_copy_sub_buffer

  tbl.glXCopySubBufferMESA = log_glXCopySubBufferMESA;

  // GLX_MESA_pixmap_colormap

  tbl.glXCreateGLXPixmapMESA = log_glXCreateGLXPixmapMESA;

  // GLX_MESA_release_buffers

  tbl.glXReleaseBuffersMESA = log_glXReleaseBuffersMESA;

  // GLX_MESA_set_3dfx_mode

  tbl.glXSet3DfxModeMESA = log_glXSet3DfxModeMESA;

  // GLX_MESA_swap_control

  tbl.glXGetSwapIntervalMESA = log_glXGetSwapIntervalMESA;
  tbl.glXSwapIntervalMESA = log_glXSwapIntervalMESA;

  // GLX_NV_copy_image

  tbl.glXCopyImageSubDataNV = log_glXCopyImageSubDataNV;

  // GLX_NV_present_video

  tbl.glXBindVideoDeviceNV = log_glXBindVideoDeviceNV;
  tbl.glXEnumerateVideoDevicesNV = log_glXEnumerateVideoDevicesNV;

  // GLX_NV_swap_group

  tbl.glXBindSwapBarrierNV = log_glXBindSwapBarrierNV;
  tbl.glXJoinSwapGroupNV = log_glXJoinSwapGroupNV;
  tbl.glXQueryFrameCountNV = log_glXQueryFrameCountNV;
  tbl.glXQueryMaxSwapGroupsNV = log_glXQueryMaxSwapGroupsNV;
  tbl.glXQuerySwapGroupNV = log_glXQuerySwapGroupNV;
  tbl.glXResetFrameCountNV = log_glXResetFrameCountNV;

  // GLX_NV_vertex_array_range

  tbl.glXAllocateMemoryNV = log_glXAllocateMemoryNV;
  tbl.glXFreeMemoryNV = log_glXFreeMemoryNV;

  // GLX_NV_video_capture

  tbl.glXBindVideoCaptureDeviceNV = log_glXBindVideoCaptureDeviceNV;
  tbl.glXEnumerateVideoCaptureDevicesNV = log_glXEnumerateVideoCaptureDevicesNV;
  tbl.glXLockVideoCaptureDeviceNV = log_glXLockVideoCaptureDeviceNV;
  tbl.glXQueryVideoCaptureDeviceNV = log_glXQueryVideoCaptureDeviceNV;
  tbl.glXReleaseVideoCaptureDeviceNV = log_glXReleaseVideoCaptureDeviceNV;

  // GLX_NV_video_output

  tbl.glXBindVideoImageNV = log_glXBindVideoImageNV;
  tbl.glXGetVideoDeviceNV = log_glXGetVideoDeviceNV;
  tbl.glXGetVideoInfoNV = log_glXGetVideoInfoNV;
  tbl.glXReleaseVideoDeviceNV = log_glXReleaseVideoDeviceNV;
  tbl.glXReleaseVideoImageNV = log_glXReleaseVideoImageNV;
  tbl.glXSendPbufferToVideoNV = log_glXSendPbufferToVideoNV;

  // GLX_OML_sync_control

  tbl.glXGetMscRateOML = log_glXGetMscRateOML;
  tbl.glXGetSyncValuesOML = log_glXGetSyncValuesOML;
  tbl.glXSwapBuffersMscOML = log_glXSwapBuffersMscOML;
  tbl.glXWaitForMscOML = log_glXWaitForMscOML;
  tbl.glXWaitForSbcOML = log_glXWaitForSbcOML;

  // GLX_SGIX_fbconfig

  tbl.glXChooseFBConfigSGIX = log_glXChooseFBConfigSGIX;
  tbl.glXCreateContextWithConfigSGIX = log_glXCreateContextWithConfigSGIX;
  tbl.glXCreateGLXPixmapWithConfigSGIX = log_glXCreateGLXPixmapWithConfigSGIX;
  tbl.glXGetFBConfigAttribSGIX = log_glXGetFBConfigAttribSGIX;
  tbl.glXGetFBConfigFromVisualSGIX = log_glXGetFBConfigFromVisualSGIX;
  tbl.glXGetVisualFromFBConfigSGIX = log_glXGetVisualFromFBConfigSGIX;

  // GLX_SGIX_pbuffer

  tbl.glXCreateGLXPbufferSGIX = log_glXCreateGLXPbufferSGIX;
  tbl.glXDestroyGLXPbufferSGIX = log_glXDestroyGLXPbufferSGIX;
  tbl.glXGetSelectedEventSGIX = log_glXGetSelectedEventSGIX;
  tbl.glXQueryGLXPbufferSGIX = log_glXQueryGLXPbufferSGIX;
  tbl.glXSelectEventSGIX = log_glXSelectEventSGIX;

  // GLX_SGIX_swap_barrier

  tbl.glXBindSwapBarrierSGIX = log_glXBindSwapBarrierSGIX;
  tbl.glXQueryMaxSwapBarriersSGIX = log_glXQueryMaxSwapBarriersSGIX;

  // GLX_SGIX_swap_group

  tbl.glXJoinSwapGroupSGIX = log_glXJoinSwapGroupSGIX;

  // GLX_SGIX_video_resize

  tbl.glXBindChannelToWindowSGIX = log_glXBindChannelToWindowSGIX;
  tbl.glXChannelRectSGIX = log_glXChannelRectSGIX;
  tbl.glXChannelRectSyncSGIX = log_glXChannelRectSyncSGIX;
  tbl.glXQueryChannelDeltasSGIX = log_glXQueryChannelDeltasSGIX;
  tbl.glXQueryChannelRectSGIX = log_glXQueryChannelRectSGIX;

  // GLX_SGI_cushion

  tbl.glXCushionSGI = log_glXCushionSGI;

  // GLX_SGI_make_current_read

  tbl.glXGetCurrentReadDrawableSGI = log_glXGetCurrentReadDrawableSGI;
  tbl.glXMakeCurrentReadSGI = log_glXMakeCurrentReadSGI;

  // GLX_SGI_swap_control

  tbl.glXSwapIntervalSGI = log_glXSwapIntervalSGI;

  // GLX_SGI_video_sync

  tbl.glXGetVideoSyncSGI = log_glXGetVideoSyncSGI;
  tbl.glXWaitVideoSyncSGI = log_glXWaitVideoSyncSGI;

  // GLX_SUN_get_transparent_index

  tbl.glXGetTransparentIndexSUN = log_glXGetTransparentIndexSUN;

  // GLX_SUN_video_resize

  tbl.glXGetVideoResizeSUN = log_glXGetVideoResizeSUN;
  tbl.glXVideoResizeSUN = log_glXVideoResizeSUN;
#endif // REGAL_SYS_GLX

#if REGAL_SYS_OSX

  // CGL_VERSION_1_0

  tbl.CGLChoosePixelFormat = log_CGLChoosePixelFormat;
  tbl.CGLClearDrawable = log_CGLClearDrawable;
  tbl.CGLCopyContext = log_CGLCopyContext;
  tbl.CGLCreateContext = log_CGLCreateContext;
  tbl.CGLDescribePixelFormat = log_CGLDescribePixelFormat;
  tbl.CGLDescribeRenderer = log_CGLDescribeRenderer;
  tbl.CGLDestroyContext = log_CGLDestroyContext;
  tbl.CGLDestroyPixelFormat = log_CGLDestroyPixelFormat;
  tbl.CGLDestroyRendererInfo = log_CGLDestroyRendererInfo;
  tbl.CGLDisable = log_CGLDisable;
  tbl.CGLEnable = log_CGLEnable;
  tbl.CGLErrorString = log_CGLErrorString;
  tbl.CGLFlushDrawable = log_CGLFlushDrawable;
  tbl.CGLGetOffScreen = log_CGLGetOffScreen;
  tbl.CGLGetOption = log_CGLGetOption;
  tbl.CGLGetParameter = log_CGLGetParameter;
  tbl.CGLGetVersion = log_CGLGetVersion;
  tbl.CGLGetVirtualScreen = log_CGLGetVirtualScreen;
  tbl.CGLIsEnabled = log_CGLIsEnabled;
  tbl.CGLQueryRendererInfo = log_CGLQueryRendererInfo;
  tbl.CGLSetFullScreen = log_CGLSetFullScreen;
  tbl.CGLSetOffScreen = log_CGLSetOffScreen;
  tbl.CGLSetOption = log_CGLSetOption;
  tbl.CGLSetParameter = log_CGLSetParameter;
  tbl.CGLSetVirtualScreen = log_CGLSetVirtualScreen;

  // CGL_VERSION_1_1

  tbl.CGLCreatePBuffer = log_CGLCreatePBuffer;
  tbl.CGLDescribePBuffer = log_CGLDescribePBuffer;
  tbl.CGLDestroyPBuffer = log_CGLDestroyPBuffer;
  tbl.CGLGetPBuffer = log_CGLGetPBuffer;
  tbl.CGLSetPBuffer = log_CGLSetPBuffer;
  tbl.CGLTexImagePBuffer = log_CGLTexImagePBuffer;

  // CGL_VERSION_1_2

  tbl.CGLGetContextRetainCount = log_CGLGetContextRetainCount;
  tbl.CGLGetGlobalOption = log_CGLGetGlobalOption;
  tbl.CGLGetPBufferRetainCount = log_CGLGetPBufferRetainCount;
  tbl.CGLGetPixelFormat = log_CGLGetPixelFormat;
  tbl.CGLGetPixelFormatRetainCount = log_CGLGetPixelFormatRetainCount;
  tbl.CGLLockContext = log_CGLLockContext;
  tbl.CGLReleaseContext = log_CGLReleaseContext;
  tbl.CGLReleasePBuffer = log_CGLReleasePBuffer;
  tbl.CGLReleasePixelFormat = log_CGLReleasePixelFormat;
  tbl.CGLRetainContext = log_CGLRetainContext;
  tbl.CGLRetainPBuffer = log_CGLRetainPBuffer;
  tbl.CGLRetainPixelFormat = log_CGLRetainPixelFormat;
  tbl.CGLSetGlobalOption = log_CGLSetGlobalOption;
  tbl.CGLUnlockContext = log_CGLUnlockContext;

  // CGL_VERSION_1_3

  tbl.CGLGetCurrentContext = log_CGLGetCurrentContext;
  tbl.CGLGetShareGroup = log_CGLGetShareGroup;
  tbl.CGLGetSurface = log_CGLGetSurface;
  tbl.CGLSetCurrentContext = log_CGLSetCurrentContext;
  tbl.CGLSetSurface = log_CGLSetSurface;
  tbl.CGLTexImageIOSurface2D = log_CGLTexImageIOSurface2D;
  tbl.CGLUpdateContext = log_CGLUpdateContext;
#endif // REGAL_SYS_OSX

#if REGAL_SYS_EGL

  // EGL_ANGLE_query_surface_pointer

  tbl.eglQuerySurfacePointerANGLE = log_eglQuerySurfacePointerANGLE;

  // EGL_KHR_fence_sync

  tbl.eglClientWaitSyncKHR = log_eglClientWaitSyncKHR;
  tbl.eglCreateSyncKHR = log_eglCreateSyncKHR;
  tbl.eglDestroySyncKHR = log_eglDestroySyncKHR;
  tbl.eglGetSyncAttribKHR = log_eglGetSyncAttribKHR;

  // EGL_KHR_image_base

  tbl.eglCreateImageKHR = log_eglCreateImageKHR;
  tbl.eglDestroyImageKHR = log_eglDestroyImageKHR;

  // EGL_KHR_lock_surface

  tbl.eglLockSurfaceKHR = log_eglLockSurfaceKHR;
  tbl.eglUnlockSurfaceKHR = log_eglUnlockSurfaceKHR;

  // EGL_KHR_stream_consumer_gltexture

  tbl.eglStreamConsumerAcquireKHR = log_eglStreamConsumerAcquireKHR;
  tbl.eglStreamConsumerGLTextureExternalKHR = log_eglStreamConsumerGLTextureExternalKHR;
  tbl.eglStreamConsumerReleaseKHR = log_eglStreamConsumerReleaseKHR;

  // EGL_KHR_stream_cross_process_fd

  tbl.eglCreateStreamFromFileDescriptorKHR = log_eglCreateStreamFromFileDescriptorKHR;
  tbl.eglGetStreamFileDescriptorKHR = log_eglGetStreamFileDescriptorKHR;

  // EGL_KHR_stream_producer_eglsurface

  tbl.eglCreateStreamProducerSurfaceKHR = log_eglCreateStreamProducerSurfaceKHR;

  // EGL_KHR_wait_sync

  tbl.eglWaitSyncKHR = log_eglWaitSyncKHR;

  // EGL_MESA_drm_image

  tbl.eglCreateDRMImageMESA = log_eglCreateDRMImageMESA;
  tbl.eglExportDRMImageMESA = log_eglExportDRMImageMESA;

  // EGL_NV_coverage_sample

  tbl.eglCoverageMaskNV = log_eglCoverageMaskNV;
  tbl.eglCoverageOperationNV = log_eglCoverageOperationNV;

  // EGL_NV_post_sub_buffer

  tbl.eglPostSubBufferNV = log_eglPostSubBufferNV;

  // EGL_NV_sync

  tbl.eglClientWaitSyncNV = log_eglClientWaitSyncNV;
  tbl.eglCreateFenceSyncNV = log_eglCreateFenceSyncNV;
  tbl.eglDestroySyncNV = log_eglDestroySyncNV;
  tbl.eglFenceNV = log_eglFenceNV;
  tbl.eglGetSyncAttribNV = log_eglGetSyncAttribNV;
  tbl.eglSignalSyncNV = log_eglSignalSyncNV;

  // EGL_NV_system_time

  tbl.eglGetSystemTimeFrequencyNV = log_eglGetSystemTimeFrequencyNV;
  tbl.eglGetSystemTimeNV = log_eglGetSystemTimeNV;

  // EGL_VERSION_1_0

  tbl.eglChooseConfig = log_eglChooseConfig;
  tbl.eglCopyBuffers = log_eglCopyBuffers;
  tbl.eglCreateContext = log_eglCreateContext;
  tbl.eglCreatePbufferSurface = log_eglCreatePbufferSurface;
  tbl.eglCreatePixmapSurface = log_eglCreatePixmapSurface;
  tbl.eglCreateWindowSurface = log_eglCreateWindowSurface;
  tbl.eglDestroyContext = log_eglDestroyContext;
  tbl.eglDestroySurface = log_eglDestroySurface;
  tbl.eglGetConfigAttrib = log_eglGetConfigAttrib;
  tbl.eglGetConfigs = log_eglGetConfigs;
  tbl.eglGetCurrentContext = log_eglGetCurrentContext;
  tbl.eglGetCurrentDisplay = log_eglGetCurrentDisplay;
  tbl.eglGetCurrentSurface = log_eglGetCurrentSurface;
  tbl.eglGetDisplay = log_eglGetDisplay;
  tbl.eglGetError = log_eglGetError;
  tbl.eglGetProcAddress = log_eglGetProcAddress;
  tbl.eglInitialize = log_eglInitialize;
  tbl.eglMakeCurrent = log_eglMakeCurrent;
  tbl.eglQueryContext = log_eglQueryContext;
  tbl.eglQueryString = log_eglQueryString;
  tbl.eglQuerySurface = log_eglQuerySurface;
  tbl.eglSwapBuffers = log_eglSwapBuffers;
  tbl.eglTerminate = log_eglTerminate;
  tbl.eglWaitGL = log_eglWaitGL;
  tbl.eglWaitNative = log_eglWaitNative;

  // EGL_VERSION_1_1

  tbl.eglBindTexImage = log_eglBindTexImage;
  tbl.eglReleaseTexImage = log_eglReleaseTexImage;

  // EGL_VERSION_1_2

  tbl.eglBindAPI = log_eglBindAPI;
  tbl.eglCreatePbufferFromClientBuffer = log_eglCreatePbufferFromClientBuffer;
  tbl.eglQueryAPI = log_eglQueryAPI;
  tbl.eglReleaseThread = log_eglReleaseThread;
  tbl.eglSurfaceAttrib = log_eglSurfaceAttrib;
  tbl.eglSwapInterval = log_eglSwapInterval;
  tbl.eglWaitClient = log_eglWaitClient;
#endif // REGAL_SYS_EGL

}

REGAL_NAMESPACE_END

#endif
