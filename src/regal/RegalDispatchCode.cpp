/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.2 --api wgl 4.0 --api glx 4.0 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011 NVIDIA Corporation
  Copyright (c) 2011-2012 Cass Everitt
  Copyright (c) 2012 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012 Nigel Stewart
  Copyright (c) 2012 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_CODE

REGAL_GLOBAL_BEGIN

#include <string>

#include <boost/print/string_list.hpp>

#include "RegalLog.h"
#include "RegalPush.h"
#include "RegalToken.h"
#include "RegalHelper.h"
#include "RegalContext.h"

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::boost::print;

static void REGAL_CALL code_glAccum(GLenum op, GLfloat value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAccum)(op, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAccum(";
                   _code << toString(op);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAlphaFunc(GLenum func, GLclampf ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFunc)(func, ref);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAlphaFunc(";
                   _code << toString(func);
    _code << ", "; _code << ref;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBegin(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBegin)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBegin(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBitmap)(width, height, xorig, yorig, xmove, ymove, bitmap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bitmapIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _bitmapIndex << "[" << helper::size::pixelImage(width, height, 0, GL_COLOR_INDEX, GL_BITMAP, 0, GL_BITMAP) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(bitmap),helper::size::pixelImage(width, height, 0, GL_COLOR_INDEX, GL_BITMAP, 0, GL_BITMAP),"","{ "," }",",") << ";\n";
    _code << indent << "glBitmap(";
                   _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << xorig;
    _code << ", "; _code << yorig;
    _code << ", "; _code << xmove;
    _code << ", "; _code << ymove;
    _code << ", "; _code << "i" << _bitmapIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFunc(GLenum sfactor, GLenum dfactor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunc)(sfactor, dfactor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFunc(";
                   _code << toString(sfactor);
    _code << ", "; _code << toString(dfactor);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCallList(GLuint list)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCallList)(list);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCallList(";
                   _code << list;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCallLists)(n, type, lists);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCallLists(";
                   _code << n;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "/* lists = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClear(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClear)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClear(";
                   _code << GLclearToString(mask);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearAccum)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearAccum(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearColor)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearColor(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearDepth(GLclampd depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearDepth)(depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearDepth(";
                   _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearIndex(GLfloat c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearIndex)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearIndex(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearStencil(GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearStencil)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearStencil(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClipPlane(GLenum plane, const GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClipPlane)(plane, equation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _equationIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _equationIndex << "[4] = " << array<GLdouble,const char * const>(equation,4,"","{ "," };\n",", ");
    _code << indent << "glClipPlane(";
                   _code << toString(plane);
    _code << ", "; _code << "i" << _equationIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3b)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3b(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3bv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3bv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3d)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3d(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3f)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3f(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3i)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3i(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3s)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3s(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3ub)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3ub(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3ubv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[3] = " << array<GLubyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3ubv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3ui)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3ui(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3uiv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[3] = " << array<GLuint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3uiv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3us)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3us(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3usv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[3] = " << array<GLushort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3usv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4b)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4b(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4bv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4bv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4d)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4d(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4f)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4f(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4i)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4i(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4s)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4s(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ub)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4ub(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4ubv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ui)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4ui(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4uiv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4uiv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4us)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4us(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4usv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4usv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorMask)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorMask(";
                   _code << toString(red);
    _code << ", "; _code << toString(green);
    _code << ", "; _code << toString(blue);
    _code << ", "; _code << toString(alpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorMaterial(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorMaterial)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorMaterial(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyPixels)(x, y, width, height, type);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyPixels(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(type);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCullFace(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCullFace)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCullFace(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteLists(GLuint list, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteLists)(list, range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteLists(";
                   _code << list;
    _code << ", "; _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthFunc(GLenum func)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthFunc)(func);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthFunc(";
                   _code << toString(func);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthMask(GLboolean flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthMask)(flag);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthMask(";
                   _code << toString(flag);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRange(GLclampd zNear, GLclampd zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRange)(zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthRange(";
                   _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisable(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisable)(cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisable(";
                   _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBuffer(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffer)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawBuffer(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawPixels)(width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, 0, format, type, 0, 0) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, 0, format, type, 0, 0),"","{ "," }",",") << ";\n";
    _code << indent << "glDrawPixels(";
                   _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlag(GLboolean flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlag)(flag);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEdgeFlag(";
                   _code << toString(flag);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlagv(const GLboolean *flag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagv)(flag);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _flagIndex = _context->codeInputNext++;
    _code << indent << "const GLboolean i" << _flagIndex << "[1] = " << array<GLboolean,const char * const>(flag,1,"","{ "," };\n",", ");
    _code << indent << "glEdgeFlagv(";
                   _code << "i" << _flagIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnable(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnable)(cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnable(";
                   _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnd(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnd)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnd();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndList(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndList)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndList();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord1d(GLdouble u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1d)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalCoord1d(";
                   _code << u;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord1dv(const GLdouble *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1dv)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _uIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _uIndex << "[1] = " << array<GLdouble,const char * const>(u,1,"","{ "," };\n",", ");
    _code << indent << "glEvalCoord1dv(";
                   _code << "i" << _uIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord1f(GLfloat u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1f)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalCoord1f(";
                   _code << u;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord1fv(const GLfloat *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord1fv)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _uIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _uIndex << "[1] = " << array<GLfloat,const char * const>(u,1,"","{ "," };\n",", ");
    _code << indent << "glEvalCoord1fv(";
                   _code << "i" << _uIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord2d(GLdouble u, GLdouble v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2d)(u, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalCoord2d(";
                   _code << u;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord2dv(const GLdouble *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2dv)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _uIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _uIndex << "[2] = " << array<GLdouble,const char * const>(u,2,"","{ "," };\n",", ");
    _code << indent << "glEvalCoord2dv(";
                   _code << "i" << _uIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord2f(GLfloat u, GLfloat v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2f)(u, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalCoord2f(";
                   _code << u;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalCoord2fv(const GLfloat *u)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalCoord2fv)(u);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _uIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _uIndex << "[2] = " << array<GLfloat,const char * const>(u,2,"","{ "," };\n",", ");
    _code << indent << "glEvalCoord2fv(";
                   _code << "i" << _uIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh1)(mode, i1, i2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalMesh1(";
                   _code << toString(mode);
    _code << ", "; _code << i1;
    _code << ", "; _code << i2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalMesh2)(mode, i1, i2, j1, j2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalMesh2(";
                   _code << toString(mode);
    _code << ", "; _code << i1;
    _code << ", "; _code << i2;
    _code << ", "; _code << j1;
    _code << ", "; _code << j2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalPoint1(GLint i)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint1)(i);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalPoint1(";
                   _code << i;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalPoint2(GLint i, GLint j)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalPoint2)(i, j);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalPoint2(";
                   _code << i;
    _code << ", "; _code << j;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFeedbackBuffer)(size, type, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFeedbackBuffer(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinish(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinish)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinish();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlush(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlush)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlush();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogf)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogf(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogfv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogfv(";
                   _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogi(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogi)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogi(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogiv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogiv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogiv(";
                   _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFrontFace(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFrontFace)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFrontFace(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFrustum)(left, right, bottom, top, zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFrustum(";
                   _code << left;
    _code << ", "; _code << right;
    _code << ", "; _code << bottom;
    _code << ", "; _code << top;
    _code << ", "; _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGenLists(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenLists)(range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenLists(";
                   _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetBooleanv(GLenum pname, GLboolean *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBooleanv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetClipPlane(GLenum plane, GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlane)(plane, equation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _equationIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _equationIndex << "[" << (4) << "];\n";
    _code << indent << "glGetClipPlane(";
                   _code << toString(plane);
    _code << ", "; _code << "o" << _equationIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDoublev(GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublev)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDoublev(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glGetError(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glGetError)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetError();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetFloatv(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFloatv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFloatv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegerv(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegerv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetLightfv)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetLightfv(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetLightiv(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetLightiv)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetLightiv(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapdv)(target, query, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapdv(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapfv)(target, query, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapiv(GLenum target, GLenum query, GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapiv)(target, query, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialfv)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMaterialfv(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMaterialiv)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMaterialiv(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelMapfv(GLenum map, GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapfv)(map, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelMapfv(";
                   _code << toString(map);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelMapuiv(GLenum map, GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapuiv)(map, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelMapuiv(";
                   _code << toString(map);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelMapusv(GLenum map, GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelMapusv)(map, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelMapusv(";
                   _code << toString(map);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPolygonStipple(GLubyte *mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPolygonStipple)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPolygonStipple(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static const GLubyte *REGAL_CALL code_glGetString(GLenum name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    const GLubyte * _ret = _next->call(&_next->glGetString)(name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetString(";
                   _code << toString(name);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnvfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexEnvfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexEnviv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexEnviv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGendv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGendv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGenfv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGeniv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGeniv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexImage)(target, level, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexImage(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameterfv)(target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexLevelParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexLevelParameteriv)(target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexLevelParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glHint(GLenum target, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glHint)(target, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glHint(";
                   _code << toString(target);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexMask(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexMask)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexMask(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexd(GLdouble c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexd)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexd(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexdv(const GLdouble *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexdv)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _cIndex << "[1] = " << array<GLdouble,const char * const>(c,1,"","{ "," };\n",", ");
    _code << indent << "glIndexdv(";
                   _code << "i" << _cIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexf(GLfloat c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexf)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexf(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexfv(const GLfloat *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexfv)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[1] = " << array<GLfloat,const char * const>(c,1,"","{ "," };\n",", ");
    _code << indent << "glIndexfv(";
                   _code << "i" << _cIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexi(GLint c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexi)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexi(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexiv(const GLint *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexiv)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _cIndex << "[1] = " << array<GLint,const char * const>(c,1,"","{ "," };\n",", ");
    _code << indent << "glIndexiv(";
                   _code << "i" << _cIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexs(GLshort c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexs)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexs(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexsv(const GLshort *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexsv)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _cIndex << "[1] = " << array<GLshort,const char * const>(c,1,"","{ "," };\n",", ");
    _code << indent << "glIndexsv(";
                   _code << "i" << _cIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInitNames(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInitNames)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInitNames();\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsEnabled(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsEnabled)(cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsEnabled(";
                   _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsList(GLuint list)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsList)(list);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsList(";
                   _code << list;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glLightModelf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightModelf)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightModelf(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightModelfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightModelfv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightModelfv(";
                   _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightModeli(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightModeli)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightModeli(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightModeliv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightModeliv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightModeliv(";
                   _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightf(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightf)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightf(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightfv)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightfv(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLighti(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLighti)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLighti(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightiv(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightiv)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightiv(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLineStipple(GLint factor, GLushort pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLineStipple)(factor, pattern);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLineStipple(";
                   _code << factor;
    _code << ", "; _code << pattern;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLineWidth(GLfloat width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLineWidth)(width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLineWidth(";
                   _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glListBase(GLuint base)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glListBase)(base);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glListBase(";
                   _code << base;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadIdentity(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentity)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLoadIdentity();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixd)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadMatrixd(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadMatrixf)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadMatrixf(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadName(GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadName)(name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLoadName(";
                   _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLogicOp(GLenum opcode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLogicOp)(opcode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLogicOp(";
                   _code << toString(opcode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMap1d)(target, u1, u2, stride, order, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMap1d(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << stride;
    _code << ", "; _code << order;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMap1f)(target, u1, u2, stride, order, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMap1f(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << stride;
    _code << ", "; _code << order;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMap2d)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMap2d(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMap2f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMap2f(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1d)(un, u1, u2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapGrid1d(";
                   _code << un;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid1f)(un, u1, u2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapGrid1f(";
                   _code << un;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2d)(un, u1, u2, vn, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapGrid2d(";
                   _code << un;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << vn;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapGrid2f)(un, u1, u2, vn, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapGrid2f(";
                   _code << un;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << vn;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMaterialf)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMaterialf(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMaterialfv)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMaterialfv(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMateriali(GLenum face, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMateriali)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMateriali(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMaterialiv)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMaterialiv(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixMode(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMode)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixMode(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixd)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultMatrixd(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultMatrixf)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultMatrixf(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNewList(GLuint list, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNewList)(list, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNewList(";
                   _code << list;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3b)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3b(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3bv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3bv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3d)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3d(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3f)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3f(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3i(GLint nx, GLint ny, GLint nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3i)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3i(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3s)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3s(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glOrtho)(left, right, bottom, top, zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glOrtho(";
                   _code << left;
    _code << ", "; _code << right;
    _code << ", "; _code << bottom;
    _code << ", "; _code << top;
    _code << ", "; _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPassThrough(GLfloat token)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPassThrough)(token);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPassThrough(";
                   _code << token;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapfv)(map, mapsize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valuesIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valuesIndex << "[mapsize] = " << array<GLfloat,const char * const>(values,mapsize,"","{ "," };\n",", ");
    _code << indent << "glPixelMapfv(";
                   _code << toString(map);
    _code << ", "; _code << mapsize;
    _code << ", "; _code << "i" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapuiv)(map, mapsize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valuesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valuesIndex << "[mapsize] = " << array<GLuint,const char * const>(values,mapsize,"","{ "," };\n",", ");
    _code << indent << "glPixelMapuiv(";
                   _code << toString(map);
    _code << ", "; _code << mapsize;
    _code << ", "; _code << "i" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelMapusv)(map, mapsize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valuesIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _valuesIndex << "[mapsize] = " << array<GLushort,const char * const>(values,mapsize,"","{ "," };\n",", ");
    _code << indent << "glPixelMapusv(";
                   _code << toString(map);
    _code << ", "; _code << mapsize;
    _code << ", "; _code << "i" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelStoref(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelStoref)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelStoref(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelStorei(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelStorei)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelStorei(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransferf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferf)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTransferf(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransferi(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransferi)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTransferi(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelZoom)(xfactor, yfactor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelZoom(";
                   _code << xfactor;
    _code << ", "; _code << yfactor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointSize(GLfloat size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointSize)(size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointSize(";
                   _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPolygonMode(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPolygonMode)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPolygonMode(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPolygonStipple(const GLubyte *mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPolygonStipple)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _maskIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _maskIndex << "[" << helper::size::pixelImage(32, 32, 0, GL_COLOR_INDEX, GL_BITMAP, 0, GL_BITMAP) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(mask),helper::size::pixelImage(32, 32, 0, GL_COLOR_INDEX, GL_BITMAP, 0, GL_BITMAP),"","{ "," }",",") << ";\n";
    _code << indent << "glPolygonStipple(";
                   _code << "i" << _maskIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopAttrib(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopAttrib)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopAttrib();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopMatrix(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopMatrix)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopMatrix();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopName(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopName)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopName();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushAttrib(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushAttrib)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushAttrib(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushMatrix(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushMatrix)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushMatrix();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushName(GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushName)(name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushName(";
                   _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2d)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos2d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glRasterPos2dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2f)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos2f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glRasterPos2fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2i)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos2i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glRasterPos2iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2s)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos2s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos2sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glRasterPos2sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3d)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos3d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glRasterPos3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3f)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos3f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glRasterPos3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3i)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos3i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glRasterPos3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3s)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos3s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glRasterPos3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4d)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos4d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glRasterPos4dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4f)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos4f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glRasterPos4fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4i)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos4i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glRasterPos4iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4s)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRasterPos4s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRasterPos4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRasterPos4sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glRasterPos4sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadBuffer(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadBuffer)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadBuffer(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadPixels)(x, y, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, 0, format, type, 1, 0) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, 0, format, type, 1, 0),"","{ "," }",",") << ";\n";
    _code << indent << "glReadPixels(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectd)(x1, y1, x2, y2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRectd(";
                   _code << x1;
    _code << ", "; _code << y1;
    _code << ", "; _code << x2;
    _code << ", "; _code << y2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectdv(const GLdouble *v1, const GLdouble *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectdv)(v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _v1Index = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _v1Index << "[2] = " << array<GLdouble,const char * const>(v1,2,"","{ "," };\n",", ");
    size_t _v2Index = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _v2Index << "[2] = " << array<GLdouble,const char * const>(v2,2,"","{ "," };\n",", ");
    _code << indent << "glRectdv(";
                   _code << "i" << _v1Index;
    _code << ", "; _code << "i" << _v2Index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectf)(x1, y1, x2, y2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRectf(";
                   _code << x1;
    _code << ", "; _code << y1;
    _code << ", "; _code << x2;
    _code << ", "; _code << y2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectfv(const GLfloat *v1, const GLfloat *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectfv)(v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _v1Index = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _v1Index << "[2] = " << array<GLfloat,const char * const>(v1,2,"","{ "," };\n",", ");
    size_t _v2Index = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _v2Index << "[2] = " << array<GLfloat,const char * const>(v2,2,"","{ "," };\n",", ");
    _code << indent << "glRectfv(";
                   _code << "i" << _v1Index;
    _code << ", "; _code << "i" << _v2Index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRecti)(x1, y1, x2, y2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRecti(";
                   _code << x1;
    _code << ", "; _code << y1;
    _code << ", "; _code << x2;
    _code << ", "; _code << y2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectiv(const GLint *v1, const GLint *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectiv)(v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _v1Index = _context->codeInputNext++;
    _code << indent << "const GLint i" << _v1Index << "[2] = " << array<GLint,const char * const>(v1,2,"","{ "," };\n",", ");
    size_t _v2Index = _context->codeInputNext++;
    _code << indent << "const GLint i" << _v2Index << "[2] = " << array<GLint,const char * const>(v2,2,"","{ "," };\n",", ");
    _code << indent << "glRectiv(";
                   _code << "i" << _v1Index;
    _code << ", "; _code << "i" << _v2Index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRects)(x1, y1, x2, y2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRects(";
                   _code << x1;
    _code << ", "; _code << y1;
    _code << ", "; _code << x2;
    _code << ", "; _code << y2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRectsv(const GLshort *v1, const GLshort *v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRectsv)(v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _v1Index = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _v1Index << "[2] = " << array<GLshort,const char * const>(v1,2,"","{ "," };\n",", ");
    size_t _v2Index = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _v2Index << "[2] = " << array<GLshort,const char * const>(v2,2,"","{ "," };\n",", ");
    _code << indent << "glRectsv(";
                   _code << "i" << _v1Index;
    _code << ", "; _code << "i" << _v2Index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glRenderMode(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glRenderMode)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderMode(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRotated)(angle, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRotated(";
                   _code << angle;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRotatef)(angle, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRotatef(";
                   _code << angle;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScaled(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScaled)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glScaled(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScalef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScalef)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glScalef(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScissor)(x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glScissor(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSelectBuffer(GLsizei size, GLuint *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSelectBuffer)(size, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bufferIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _bufferIndex << "[" << (size) << "];\n";
    _code << indent << "glSelectBuffer(";
                   _code << size;
    _code << ", "; _code << "o" << _bufferIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShadeModel(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShadeModel)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glShadeModel(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilFunc)(func, ref, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilFunc(";
                   _code << toString(func);
    _code << ", "; _code << ref;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilMask(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilMask)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilMask(";
                   _code << boost::print::hex(mask);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilOp)(fail, zfail, zpass);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilOp(";
                   _code << toString(fail);
    _code << ", "; _code << toString(zfail);
    _code << ", "; _code << toString(zpass);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1d(GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1d)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord1d(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoord1dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1f(GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1f)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord1f(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoord1fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1i(GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1i)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord1i(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[1] = " << array<GLint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoord1iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1s(GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1s)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord1s(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoord1sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2d(GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2d)(s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2d(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2f(GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2f)(s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2f(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2i(GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2i)(s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2i(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2s(GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2s)(s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2s(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3d)(s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord3d(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3f)(s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord3f(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3i(GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3i)(s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord3i(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3s(GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3s)(s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord3s(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4d)(s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4d(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4f)(s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4f(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4i)(s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4i(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4s)(s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4s(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvf)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexEnvf(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexEnvfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexEnvi(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexEnvi)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexEnvi(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexEnviv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexEnviv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGend(GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGend)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGend(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGendv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGendv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenf)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenf(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenfv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGeni(GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGeni)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGeni(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLenumToString(static_cast<GLenum>(param));
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGeniv)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGeniv(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage1D)(target, level, internalformat, width, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, 0, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, 0, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2D)(target, level, internalformat, width, height, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterf)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterf(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,param);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameteri(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameteri)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameteri(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,param);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTranslated(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTranslated)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTranslated(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTranslatef)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTranslatef(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2d)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex2d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertex2dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2f)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex2f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertex2fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2i)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex2i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertex2iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2s)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex2s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertex2sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3d)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex3d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertex3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3f)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex3f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertex3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3i)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex3i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertex3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3s)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex3s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertex3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4d)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex4d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertex4dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4f)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex4f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertex4fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4i(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4i)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex4i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertex4iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4s)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex4s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertex4sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glViewport)(x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glViewport(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glAreTexturesResident)(n, textures, residences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    size_t _residencesIndex = _context->codeOutputNext++;
    _code << indent << "GLboolean o" << _residencesIndex << "[" << (n) << "];\n";
    _code << indent << "glAreTexturesResident(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ", "; _code << "o" << _residencesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glArrayElement(GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glArrayElement)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glArrayElement(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindTexture(GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindTexture)(target, texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTexture(";
                   _code << toString(target);
    _code << ", "; _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorPointer)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorPointer(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1D)(target, level, internalformat, x, y, width, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2D)(target, level, internalformat, x, y, width, height, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1D)(target, level, xoffset, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2D)(target, level, xoffset, yoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteTextures(GLsizei n, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTextures)(n, textures);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteTextures(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableClientState(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientState)(cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableClientState(";
                   _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArrays)(mode, first, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArrays(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElements)(mode, count, type, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElements(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << reinterpret_cast<const GLubyte *>(indices);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointer)(stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEdgeFlagPointer(";
                   _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableClientState(GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientState)(cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableClientState(";
                   _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenTextures(GLsizei n, GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenTextures)(n, textures);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _texturesIndex << "[" << (n) << "];\n";
    _code << indent << "glGenTextures(";
                   _code << n;
    _code << ", "; _code << "o" << _texturesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPointerv(GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPointerv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPointerv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointer)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexPointer(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexub(GLubyte c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexub)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexub(";
                   _code << c;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexubv(const GLubyte *c)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexubv)(c);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _cIndex << "[1] = " << array<GLubyte,const char * const>(c,1,"","{ "," };\n",", ");
    _code << indent << "glIndexubv(";
                   _code << "i" << _cIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInterleavedArrays)(format, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInterleavedArrays(";
                   _code << toString(format);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsTexture(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsTexture)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsTexture(";
                   _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointer)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalPointer(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPolygonOffset(GLfloat factor, GLfloat units)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffset)(factor, units);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPolygonOffset(";
                   _code << factor;
    _code << ", "; _code << units;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopClientAttrib(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopClientAttrib)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopClientAttrib();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTextures)(n, textures, priorities);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    size_t _prioritiesIndex = _context->codeInputNext++;
    _code << indent << "const GLclampf i" << _prioritiesIndex << "[n] = " << array<GLclampf,const char * const>(priorities,n,"","{ "," };\n",", ");
    _code << indent << "glPrioritizeTextures(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ", "; _code << "i" << _prioritiesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushClientAttrib(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttrib)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushClientAttrib(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointer)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordPointer(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1D)(target, level, xoffset, width, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, 0, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, 0, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointer)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexPointer(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendColor)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendColor(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquation(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquation)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquation(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3D)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage3D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElements)(mode, start, end, count, type, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawRangeElements(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3D)(target, level, internalformat, width, height, depth, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, depth, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, depth, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexImage3D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, depth, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, depth, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage3D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveTexture(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveTexture)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveTexture(";
                   _code << toString(texture);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClientActiveTexture(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTexture)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientActiveTexture(";
                   _code << toString(texture);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1D)(target, level, internalformat, width, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2D)(target, level, internalformat, width, height, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3D)(target, level, internalformat, width, height, depth, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage3D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1D)(target, level, xoffset, width, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage1D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2D)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage2D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3D)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage3D(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImage)(target, lod, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCompressedTexImage(";
                   _code << toString(target);
    _code << ", "; _code << lod;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadTransposeMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixd)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadTransposeMatrixd(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadTransposeMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixf)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadTransposeMatrixf(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultTransposeMatrixd(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixd)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultTransposeMatrixd(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultTransposeMatrixf(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixf)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultTransposeMatrixf(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1d(GLenum target, GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1d)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1d(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1dv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1f(GLenum target, GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1f)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1f(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1fv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1i(GLenum target, GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1i)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1i(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[1] = " << array<GLint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1iv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1s(GLenum target, GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1s)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1s(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1sv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2d)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2d(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2dv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2f)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2f(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2fv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2i)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2i(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2iv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2s)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2s(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2sv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3d)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3d(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3dv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3f)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3f(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3fv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3i)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3i(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3iv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3s)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3s(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3sv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4d)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4d(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4dv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4f)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4f(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4fv(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4fv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4i)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4i(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4iv(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4iv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4s)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4s(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4sv(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sv)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4sv(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleCoverage(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverage)(value, invert);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleCoverage(";
                   _code << value;
    _code << ", "; _code << toString(invert);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparate)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparate(";
                   _code << toString(sfactorRGB);
    _code << ", "; _code << toString(dfactorRGB);
    _code << ", "; _code << toString(sfactorAlpha);
    _code << ", "; _code << toString(dfactorAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointer)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordPointer(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordd(GLdouble coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordd)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordd(";
                   _code << coord;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoorddv(const GLdouble *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddv)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordIndex << "[1] = " << array<GLdouble,const char * const>(coord,1,"","{ "," };\n",", ");
    _code << indent << "glFogCoorddv(";
                   _code << "i" << _coordIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordf(GLfloat coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordf)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordf(";
                   _code << coord;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordfv(const GLfloat *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfv)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordIndex << "[1] = " << array<GLfloat,const char * const>(coord,1,"","{ "," };\n",", ");
    _code << indent << "glFogCoordfv(";
                   _code << "i" << _coordIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArrays)(mode, first, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _firstIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _firstIndex << "[primcount] = " << array<GLint,const char * const>(first,primcount,"","{ "," };\n",", ");
    size_t _countIndex = _context->codeInputNext++;
    _code << indent << "const GLsizei i" << _countIndex << "[primcount] = " << array<GLsizei,const char * const>(count,primcount,"","{ "," };\n",", ");
    _code << indent << "glMultiDrawArrays(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _firstIndex;
    _code << ", "; _code << "i" << _countIndex;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElements)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _countIndex = _context->codeInputNext++;
    _code << indent << "const GLsizei i" << _countIndex << "[primcount] = " << array<GLsizei,const char * const>(count,primcount,"","{ "," };\n",", ");
    _code << indent << "glMultiDrawElements(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _countIndex;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterf(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterf)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterf(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfv(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameteri(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteri)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameteri(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameteriv(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriv)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameteriv(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3b)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3b(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3bv(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3bv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3d)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3d(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3dv(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3dv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3f)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3f(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3fv(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3fv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3i(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3i)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3i(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3iv(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3iv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3s)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3s(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3sv(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3sv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ub)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3ub(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ubv(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[3] = " << array<GLubyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3ubv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ui)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3ui(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3uiv(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[3] = " << array<GLuint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3uiv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3us)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3us(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3usv(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usv)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[3] = " << array<GLushort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3usv(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointer)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColorPointer(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2d(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2d)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2dv(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _pIndex << "[2] = " << array<GLdouble,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2dv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2f(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2f)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2fv(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _pIndex << "[2] = " << array<GLfloat,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2fv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2i(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2i)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2iv(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _pIndex << "[2] = " << array<GLint,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2iv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2s(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2s)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2sv(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _pIndex << "[2] = " << array<GLshort,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2sv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3d)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3d(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3dv(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _pIndex << "[3] = " << array<GLdouble,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3dv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3f)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3f(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3fv(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _pIndex << "[3] = " << array<GLfloat,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3fv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3i(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3i)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3i(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3iv(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _pIndex << "[3] = " << array<GLint,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3iv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3s(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3s)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3s(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3sv(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sv)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _pIndex << "[3] = " << array<GLshort,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3sv(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginQuery(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginQuery)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginQuery(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBuffer(GLenum target, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBuffer)(target, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBuffer(";
                   _code << toString(target);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferData)(target, size, data, usage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferData(";
                   _code << toString(target);
    _code << ", "; _code << size;
    _code << ", "; _code << boost::print::raw(data,Logging::rawLimit(data ? size : 0));
    _code << ", "; _code << toString(usage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferSubData)(target, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferSubData(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << boost::print::raw(data,Logging::rawLimit(data ? size : 0));
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffers)(n, buffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _buffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _buffersIndex << "[n] = " << array<GLuint,const char * const>(buffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteBuffers(";
                   _code << n;
    _code << ", "; _code << "i" << _buffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteQueries(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueries)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[n] = " << array<GLuint,const char * const>(ids,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteQueries(";
                   _code << n;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndQuery(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndQuery)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndQuery(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenBuffers(GLsizei n, GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenBuffers)(n, buffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _buffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _buffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenBuffers(";
                   _code << n;
    _code << ", "; _code << "o" << _buffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenQueries(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenQueries)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenQueries(";
                   _code << n;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointerv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferPointerv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubData)(target, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferSubData(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectiv)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectiv(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuiv)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectuiv(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryiv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsBuffer(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsBuffer)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsBuffer(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsQuery(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsQuery)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsQuery(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLvoid *REGAL_CALL code_glMapBuffer(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapBuffer)(target, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapBuffer(";
                   _code << toString(target);
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glUnmapBuffer(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glUnmapBuffer)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnmapBuffer(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glAttachShader(GLuint program, GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAttachShader)(program, shader);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAttachShader(";
                   _code << program;
    _code << ", "; _code << shader;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocation)(program, index, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindAttribLocation(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparate)(modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparate(";
                   _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompileShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompileShader)(shader);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompileShader(";
                   _code << shader;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glCreateProgram(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glCreateProgram)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateProgram();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glCreateShader(GLenum type)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glCreateShader)(type);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateShader(";
                   _code << toString(type);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgram)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteProgram(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteShader)(shader);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteShader(";
                   _code << shader;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDetachShader(GLuint program, GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDetachShader)(program, shader);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDetachShader(";
                   _code << program;
    _code << ", "; _code << shader;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVertexAttribArray(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArray)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVertexAttribArray(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBuffers(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffers)(n, bufs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bufsIndex = _context->codeInputNext++;
    _code << indent << "const GLenum i" << _bufsIndex << "[n] = " << array<GLenum,const char * const>(bufs,n,"","{ "," };\n",", ");
    _code << indent << "glDrawBuffers(";
                   _code << n;
    _code << ", "; _code << "i" << _bufsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVertexAttribArray(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArray)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVertexAttribArray(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttrib)(program, index, bufSize, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveAttrib(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniform)(program, index, bufSize, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveUniform(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedShaders)(program, maxCount, count, shaders);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _countIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _countIndex << "[" << (1) << "];\n";
    size_t _shadersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _shadersIndex << "[" << (count ? *count : 0) << "];\n";
    _code << indent << "glGetAttachedShaders(";
                   _code << program;
    _code << ", "; _code << maxCount;
    _code << ", "; _code << "o" << _countIndex;
    _code << ", "; _code << "o" << _shadersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetAttribLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetAttribLocation)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetAttribLocation(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInfoLog)(program, bufSize, length, infoLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (length ? 1 : 0) << "];\n";
    _code << indent << "glGetProgramInfoLog(";
                   _code << program;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(infoLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramiv)(program, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetProgramiv(";
                   _code << program;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderInfoLog)(shader, bufSize, length, infoLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (length ? 1 : 0) << "];\n";
    _code << indent << "glGetShaderInfoLog(";
                   _code << shader;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(infoLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSource)(shader, bufSize, length, source);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (length ? 1 : 0) << "];\n";
    _code << indent << "glGetShaderSource(";
                   _code << shader;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(source,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderiv)(shader, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetShaderiv(";
                   _code << shader;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetUniformLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetUniformLocation)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformLocation(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(reinterpret_cast<const char *>(name),'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfv)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformfv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformiv(GLuint program, GLint location, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformiv)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointerv)(index, pname, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexAttribPointerv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribdv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribfv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribiv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribiv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsProgram)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsProgram(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsShader(GLuint shader)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsShader)(shader);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsShader(";
                   _code << shader;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glLinkProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLinkProgram)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLinkProgram(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderSource(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderSource)(shader, count, string, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _lengthIndex << "[length ? count : 0] = " << array<GLint,const char * const>(length,length ? count : 0,"","{ "," };\n",", ");
    _code << indent << "glShaderSource(";
                   _code << shader;
    _code << ", "; _code << count;
    _code << ", "; _code << "/* string = ?? */";
    _code << ", "; _code << "i" << _lengthIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparate)(face, func, ref, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilFuncSeparate(";
                   _code << toString(face);
    _code << ", "; _code << toString(func);
    _code << ", "; _code << ref;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilMaskSeparate(GLenum face, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilMaskSeparate)(face, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilMaskSeparate(";
                   _code << toString(face);
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparate)(face, fail, zfail, zpass);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilOpSeparate(";
                   _code << toString(face);
    _code << ", "; _code << toString(fail);
    _code << ", "; _code << toString(zfail);
    _code << ", "; _code << toString(zpass);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1f(GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1f)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1f(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[1 * count] = " << array<GLfloat,const char * const>(value,1 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform1fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1i(GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1i(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1iv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count] = " << array<GLint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1iv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2f)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2f(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count] = " << array<GLfloat,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform2fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2i(GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2i(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2iv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[2 * count] = " << array<GLint,const char * const>(value,2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform2iv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3f)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3f(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[3 * count] = " << array<GLfloat,const char * const>(value,3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform3fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3i(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3iv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[3 * count] = " << array<GLint,const char * const>(value,3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform3iv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4f)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4f(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4 * count] = " << array<GLfloat,const char * const>(value,4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform4fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4i(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4iv(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4iv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[4 * count] = " << array<GLint,const char * const>(value,4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniform4iv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[2 * 2 * count] = " << array<GLfloat,const char * const>(value,2 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[3 * 3 * count] = " << array<GLfloat,const char * const>(value,3 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4 * 4 * count] = " << array<GLfloat,const char * const>(value,4 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUseProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUseProgram)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUseProgram(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glValidateProgram(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgram)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glValidateProgram(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1d(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1d)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1f(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1f)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1f(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1fv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1s(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1s)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1s(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1sv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2d)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2f)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2f(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2fv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2s)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2s(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2sv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3d)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3f)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3f(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3fv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3s)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3s(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3sv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nbv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Nbv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Niv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Niv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Niv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nsv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Nsv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nub)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4Nub(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nubv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Nubv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nuiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Nuiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4Nusv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4Nusv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4bv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4bv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4d)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4f)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4f(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4fv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4fv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4iv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4iv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4s)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4s(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4sv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4ubv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4uiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4usv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4usv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointer)(index, size, type, normalized, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribPointer(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[2 * 3 * count] = " << array<GLfloat,const char * const>(value,2 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2x3fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[2 * 4 * count] = " << array<GLfloat,const char * const>(value,2 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2x4fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[3 * 2 * count] = " << array<GLfloat,const char * const>(value,3 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3x2fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[3 * 4 * count] = " << array<GLfloat,const char * const>(value,3 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3x4fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4 * 2 * count] = " << array<GLfloat,const char * const>(value,4 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4x2fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3fv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4 * 3 * count] = " << array<GLfloat,const char * const>(value,4 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4x3fv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginConditionalRender(GLuint id, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRender)(id, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginConditionalRender(";
                   _code << id;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginTransformFeedback(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedback)(primitiveMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginTransformFeedback(";
                   _code << toString(primitiveMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocation)(program, color, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFragDataLocation(";
                   _code << program;
    _code << ", "; _code << color;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClampColor(GLenum target, GLenum clamp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClampColor)(target, clamp);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClampColor(";
                   _code << toString(target);
    _code << ", "; _code << toString(clamp);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfi)(buffer, drawbuffer, depth, stencil);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferfi(";
                   _code << toString(buffer);
    _code << ", "; _code << drawbuffer;
    _code << ", "; _code << depth;
    _code << ", "; _code << stencil;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferfv)(buffer, drawbuffer, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferfv(";
                   _code << toString(buffer);
    _code << ", "; _code << drawbuffer;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferiv)(buffer, drawbuffer, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferiv(";
                   _code << toString(buffer);
    _code << ", "; _code << drawbuffer;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferuiv)(buffer, drawbuffer, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferuiv(";
                   _code << toString(buffer);
    _code << ", "; _code << drawbuffer;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorMaski)(index, r, g, b, a);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorMaski(";
                   _code << index;
    _code << ", "; _code << toString(r);
    _code << ", "; _code << toString(g);
    _code << ", "; _code << toString(b);
    _code << ", "; _code << toString(a);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisablei(GLenum cap, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisablei)(cap, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisablei(";
                   _code << toString(cap);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnablei(GLenum cap, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnablei)(cap, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnablei(";
                   _code << toString(cap);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndConditionalRender(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRender)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndConditionalRender();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedback)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndTransformFeedback();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleani_v)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBooleani_v(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetFragDataLocation(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetFragDataLocation)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragDataLocation(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static const GLubyte *REGAL_CALL code_glGetStringi(GLenum name, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    const GLubyte * _ret = _next->call(&_next->glGetStringi)(name, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetStringi(";
                   _code << toString(name);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIiv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterIiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuiv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterIuiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVarying)(program, index, bufSize, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetTransformFeedbackVarying(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuiv)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformuiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIiv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribIiv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuiv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribIuiv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsEnabledi(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsEnabledi)(target, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsEnabledi(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIiv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterIiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuiv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterIuiv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryings)(program, count, varyings, bufferMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTransformFeedbackVaryings(";
                   _code << program;
    _code << ", "; _code << count;
    _code << ", "; _code << "/* varyings = ?? */";
    _code << ", "; _code << toString(bufferMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1ui(GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1ui(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count] = " << array<GLuint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1uiv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2ui(GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2ui(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 2] = " << array<GLuint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glUniform2uiv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3ui(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 3] = " << array<GLuint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glUniform3uiv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4ui(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 4] = " << array<GLuint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glUniform4uiv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1i(GLuint index, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1i)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI1i(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[1] = " << array<GLint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI1iv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1ui(GLuint index, GLuint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ui)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI1ui(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[1] = " << array<GLuint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI1uiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2i(GLuint index, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2i)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI2i(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI2iv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ui)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI2ui(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[2] = " << array<GLuint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI2uiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3i)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI3i(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI3iv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ui)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI3ui(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[3] = " << array<GLuint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI3uiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4bv(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4bv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4i)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI4i(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4iv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4iv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4sv(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4sv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4sv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4ubv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ui)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI4ui(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4uiv(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4uiv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4usv(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4usv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointer)(index, size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribIPointer(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysInstanced(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstanced)(mode, start, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysInstanced(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstanced)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstanced(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPrimitiveRestartIndex(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndex)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPrimitiveRestartIndex(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBuffer)(target, internalformat, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBuffer(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture)(target, attachment, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureFace(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFace)(target, attachment, texture, level, face);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureFace(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(face);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameteri64v)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferParameteri64v(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64i_v)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInteger64i_v(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribDivisor(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisor)(index, divisor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribDivisor(";
                   _code << index;
    _code << ", "; _code << divisor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparatei)(buf, modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparatei(";
                   _code << buf;
    _code << ", "; _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationi(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationi)(buf, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationi(";
                   _code << buf;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparatei)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparatei(";
                   _code << buf;
    _code << ", "; _code << toString(srcRGB);
    _code << ", "; _code << toString(dstRGB);
    _code << ", "; _code << toString(srcAlpha);
    _code << ", "; _code << toString(dstAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFunci(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunci)(buf, src, dst);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFunci(";
                   _code << buf;
    _code << ", "; _code << toString(src);
    _code << ", "; _code << toString(dst);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTbufferMask3DFX(GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTbufferMask3DFX)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTbufferMask3DFX(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackAMD)(callback, userParam);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageCallbackAMD(";
                   _code << "/* callback = ?? */";
    _code << ", "; _code << userParam;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageEnableAMD)(category, severity, count, ids, enabled);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageEnableAMD(";
                   _code << toString(category);
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << count;
    _code << ", "; _code << ids;
    _code << ", "; _code << toString(enabled);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertAMD)(category, severity, id, length, buf);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageInsertAMD(";
                   _code << toString(category);
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << id;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(buf,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetDebugMessageLogAMD)(count, bufsize, categories, severities, ids, lengths, message);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDebugMessageLogAMD(";
                   _code << count;
    _code << ", "; _code << bufsize;
    _code << ", "; _code << categories;
    _code << ", "; _code << severities;
    _code << ", "; _code << ids;
    _code << ", "; _code << lengths;
    _code << ", "; _code << boost::print::quote(message,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBlendEquationIndexedAMD(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationIndexedAMD)(buf, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationIndexedAMD(";
                   _code << buf;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateIndexedAMD)(buf, modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparateIndexedAMD(";
                   _code << buf;
    _code << ", "; _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncIndexedAMD)(buf, src, dst);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncIndexedAMD(";
                   _code << buf;
    _code << ", "; _code << toString(src);
    _code << ", "; _code << toString(dst);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateIndexedAMD)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparateIndexedAMD(";
                   _code << buf;
    _code << ", "; _code << toString(srcRGB);
    _code << ", "; _code << toString(dstRGB);
    _code << ", "; _code << toString(srcAlpha);
    _code << ", "; _code << toString(dstAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawArraysIndirectAMD(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirectAMD)(mode, indirect, primcount, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawArraysIndirectAMD(";
                   _code << toString(mode);
    _code << ", "; _code << indirect;
    _code << ", "; _code << primcount;
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirectAMD)(mode, type, indirect, primcount, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawElementsIndirectAMD(";
                   _code << toString(mode);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indirect;
    _code << ", "; _code << primcount;
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamesAMD)(identifier, num, names);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteNamesAMD(";
                   _code << toString(identifier);
    _code << ", "; _code << num;
    _code << ", "; _code << names;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenNamesAMD)(identifier, num, names);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenNamesAMD(";
                   _code << toString(identifier);
    _code << ", "; _code << num;
    _code << ", "; _code << names;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsNameAMD(GLenum identifier, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsNameAMD)(identifier, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsNameAMD(";
                   _code << toString(identifier);
    _code << ", "; _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBeginPerfMonitorAMD(GLuint monitor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginPerfMonitorAMD)(monitor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginPerfMonitorAMD(";
                   _code << monitor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeletePerfMonitorsAMD)(n, monitors);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeletePerfMonitorsAMD(";
                   _code << n;
    _code << ", "; _code << monitors;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndPerfMonitorAMD(GLuint monitor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndPerfMonitorAMD)(monitor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndPerfMonitorAMD(";
                   _code << monitor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenPerfMonitorsAMD)(n, monitors);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenPerfMonitorsAMD(";
                   _code << n;
    _code << ", "; _code << monitors;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterDataAMD)(monitor, pname, dataSize, data, bytesWritten);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bytesWrittenIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _bytesWrittenIndex << "[" << (1) << "];\n";
    _code << indent << "glGetPerfMonitorCounterDataAMD(";
                   _code << monitor;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << dataSize;
    _code << ", "; _code << data;
    _code << ", "; _code << "o" << _bytesWrittenIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterInfoAMD)(group, counter, pname, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPerfMonitorCounterInfoAMD(";
                   _code << group;
    _code << ", "; _code << counter;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCounterStringAMD)(group, counter, bufSize, length, counterString);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetPerfMonitorCounterStringAMD(";
                   _code << group;
    _code << ", "; _code << counter;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(counterString,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorCountersAMD)(group, numCounters, maxActiveCounters, countersSize, counters);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _numCountersIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _numCountersIndex << "[" << (1) << "];\n";
    size_t _maxActiveCountersIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _maxActiveCountersIndex << "[" << (1) << "];\n";
    _code << indent << "glGetPerfMonitorCountersAMD(";
                   _code << group;
    _code << ", "; _code << "o" << _numCountersIndex;
    _code << ", "; _code << "o" << _maxActiveCountersIndex;
    _code << ", "; _code << countersSize;
    _code << ", "; _code << counters;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupStringAMD)(group, bufSize, length, groupString);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetPerfMonitorGroupStringAMD(";
                   _code << group;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(groupString,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPerfMonitorGroupsAMD)(numGroups, groupsSize, groups);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _numGroupsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _numGroupsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetPerfMonitorGroupsAMD(";
                   _code << "o" << _numGroupsIndex;
    _code << ", "; _code << groupsSize;
    _code << ", "; _code << groups;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSelectPerfMonitorCountersAMD)(monitor, enable, group, numCounters, counterList);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSelectPerfMonitorCountersAMD(";
                   _code << monitor;
    _code << ", "; _code << toString(enable);
    _code << ", "; _code << group;
    _code << ", "; _code << numCounters;
    _code << ", "; _code << counterList;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetMultisamplefvAMD)(pname, index, val);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSetMultisamplefvAMD(";
                   _code << toString(pname);
    _code << ", "; _code << index;
    _code << ", "; _code << val;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilOpValueAMD(GLenum face, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpValueAMD)(face, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilOpValueAMD(";
                   _code << toString(face);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTessellationFactorAMD(GLfloat factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTessellationFactorAMD)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTessellationFactorAMD(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTessellationModeAMD(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTessellationModeAMD)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTessellationModeAMD(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferANGLE)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlitFramebufferANGLE(";
                   _code << srcX0;
    _code << ", "; _code << srcY0;
    _code << ", "; _code << srcX1;
    _code << ", "; _code << srcY1;
    _code << ", "; _code << dstX0;
    _code << ", "; _code << dstY0;
    _code << ", "; _code << dstX1;
    _code << ", "; _code << dstY1;
    _code << ", "; _code << mask;
    _code << ", "; _code << toString(filter);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleANGLE)(target, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisampleANGLE(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedANGLE)(mode, first, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysInstancedANGLE(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedANGLE)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedANGLE(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribDivisorANGLE(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorANGLE)(index, divisor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribDivisorANGLE(";
                   _code << index;
    _code << ", "; _code << divisor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTranslatedShaderSourceANGLE)(shader, bufsize, length, source);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTranslatedShaderSourceANGLE(";
                   _code << shader;
    _code << ", "; _code << bufsize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(source,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureLevelsAPPLE)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureLevelsAPPLE(";
                   _code << destinationTexture;
    _code << ", "; _code << sourceTexture;
    _code << ", "; _code << sourceBaseLevel;
    _code << ", "; _code << sourceLevelCount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayAPPLE)(mode, first, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementArrayAPPLE(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayAPPLE)(mode, start, end, first, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawRangeElementArrayAPPLE(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glElementPointerAPPLE(GLenum type, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glElementPointerAPPLE)(type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glElementPointerAPPLE(";
                   _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementArrayAPPLE)(mode, first, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawElementArrayAPPLE(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawRangeElementArrayAPPLE)(mode, start, end, first, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawRangeElementArrayAPPLE(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesAPPLE)(n, fences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteFencesAPPLE(";
                   _code << n;
    _code << ", "; _code << fences;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinishFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceAPPLE)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinishFenceAPPLE(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinishObjectAPPLE(GLenum object, GLint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinishObjectAPPLE)(object, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinishObjectAPPLE(";
                   _code << toString(object);
    _code << ", "; _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenFencesAPPLE(GLsizei n, GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenFencesAPPLE)(n, fences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenFencesAPPLE(";
                   _code << n;
    _code << ", "; _code << fences;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsFenceAPPLE)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsFenceAPPLE(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glSetFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetFenceAPPLE)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSetFenceAPPLE(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glTestFenceAPPLE(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glTestFenceAPPLE)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTestFenceAPPLE(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glTestObjectAPPLE(GLenum object, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glTestObjectAPPLE)(object, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTestObjectAPPLE(";
                   _code << toString(object);
    _code << ", "; _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferParameteriAPPLE)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferParameteriAPPLE(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeAPPLE)(target, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushMappedBufferRangeAPPLE(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinishRenderAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinishRenderAPPLE)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinishRenderAPPLE();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushRenderAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushRenderAPPLE)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushRenderAPPLE();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSwapAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSwapAPPLE)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSwapAPPLE();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleAPPLE)(target, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisampleAPPLE(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResolveMultisampleFramebufferAPPLE(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResolveMultisampleFramebufferAPPLE)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResolveMultisampleFramebufferAPPLE();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivAPPLE)(objectType, name, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectParameterivAPPLE(";
                   _code << toString(objectType);
    _code << ", "; _code << name;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glObjectPurgeableAPPLE)(objectType, name, option);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glObjectPurgeableAPPLE(";
                   _code << toString(objectType);
    _code << ", "; _code << name;
    _code << ", "; _code << toString(option);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLenum REGAL_CALL code_glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glObjectUnpurgeableAPPLE)(objectType, name, option);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glObjectUnpurgeableAPPLE(";
                   _code << toString(objectType);
    _code << ", "; _code << name;
    _code << ", "; _code << toString(option);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLenum REGAL_CALL code_glClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glClientWaitSyncAPPLE)(sync, flags, timeout);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientWaitSyncAPPLE(";
                   _code << sync;
    _code << ", "; _code << flags;
    _code << ", "; _code << timeout;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteSyncAPPLE(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSyncAPPLE)(sync);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteSyncAPPLE(";
                   _code << sync;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLsync REGAL_CALL code_glFenceSyncAPPLE(GLenum condition, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLsync  _ret = _next->call(&_next->glFenceSyncAPPLE)(condition, flags);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFenceSyncAPPLE(";
                   _code << toString(condition);
    _code << ", "; _code << flags;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetInteger64vAPPLE(GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64vAPPLE)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInteger64vAPPLE(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSyncivAPPLE)(sync, pname, bufSize, length, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSyncivAPPLE(";
                   _code << sync;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsSyncAPPLE(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsSyncAPPLE)(sync);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsSyncAPPLE(";
                   _code << sync;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWaitSyncAPPLE)(sync, flags, timeout);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWaitSyncAPPLE(";
                   _code << sync;
    _code << ", "; _code << flags;
    _code << ", "; _code << timeout;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterPointervAPPLE)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterPointervAPPLE(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureRangeAPPLE(GLenum target, GLsizei length, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureRangeAPPLE)(target, length, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureRangeAPPLE(";
                   _code << toString(target);
    _code << ", "; _code << length;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVertexArrayAPPLE(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayAPPLE)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVertexArrayAPPLE(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysAPPLE)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteVertexArraysAPPLE(";
                   _code << n;
    _code << ", "; _code << arrays;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenVertexArraysAPPLE(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysAPPLE)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenVertexArraysAPPLE(";
                   _code << n;
    _code << ", "; _code << arrays;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsVertexArrayAPPLE(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsVertexArrayAPPLE)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsVertexArrayAPPLE(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glFlushVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeAPPLE)(length, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushVertexArrayRangeAPPLE(";
                   _code << length;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayParameteriAPPLE)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayParameteriAPPLE(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayRangeAPPLE(GLsizei length, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeAPPLE)(length, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayRangeAPPLE(";
                   _code << length;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribAPPLE)(index, pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVertexAttribAPPLE(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVertexAttribAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribAPPLE)(index, pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVertexAttribAPPLE(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsVertexAttribEnabledAPPLE)(index, pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsVertexAttribEnabledAPPLE(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1dAPPLE)(index, size, u1, u2, stride, order, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapVertexAttrib1dAPPLE(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << stride;
    _code << ", "; _code << order;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib1fAPPLE)(index, size, u1, u2, stride, order, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapVertexAttrib1fAPPLE(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << stride;
    _code << ", "; _code << order;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2dAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapVertexAttrib2dAPPLE(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapVertexAttrib2fAPPLE)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapVertexAttrib2fAPPLE(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearDepthf(GLclampf d)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthf)(d);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearDepthf(";
                   _code << d;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRangef(GLclampf n, GLclampf f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangef)(n, f);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthRangef(";
                   _code << n;
    _code << ", "; _code << f;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderPrecisionFormat)(shadertype, precisiontype, range, precision);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rangeIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _rangeIndex << "[" << (2) << "];\n";
    size_t _precisionIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _precisionIndex << "[" << (1) << "];\n";
    _code << indent << "glGetShaderPrecisionFormat(";
                   _code << toString(shadertype);
    _code << ", "; _code << toString(precisiontype);
    _code << ", "; _code << "o" << _rangeIndex;
    _code << ", "; _code << "o" << _precisionIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReleaseShaderCompiler(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReleaseShaderCompiler)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReleaseShaderCompiler();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderBinary)(count, shaders, binaryformat, binary, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _shadersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _shadersIndex << "[count] = " << array<GLuint,const char * const>(shaders,count,"","{ "," };\n",", ");
    _code << indent << "glShaderBinary(";
                   _code << count;
    _code << ", "; _code << "i" << _shadersIndex;
    _code << ", "; _code << toString(binaryformat);
    _code << ", "; _code << binary;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedBaseInstance)(mode, first, count, primcount, baseinstance);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysInstancedBaseInstance(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ", "; _code << baseinstance;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseInstance)(mode, count, type, indices, primcount, baseinstance);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedBaseInstance(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ", "; _code << baseinstance;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex, GLuint baseinstance)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertexBaseInstance)(mode, count, type, indices, primcount, basevertex, baseinstance);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedBaseVertexBaseInstance(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ", "; _code << basevertex;
    _code << ", "; _code << baseinstance;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationIndexed)(program, colorNumber, index, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFragDataLocationIndexed(";
                   _code << program;
    _code << ", "; _code << colorNumber;
    _code << ", "; _code << index;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetFragDataIndex(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetFragDataIndex)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragDataIndex(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLsync REGAL_CALL code_glCreateSyncFromCLeventARB(cl_context context, cl_event event, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLsync  _ret = _next->call(&_next->glCreateSyncFromCLeventARB)(context, event, flags);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateSyncFromCLeventARB(";
                   _code << context;
    _code << ", "; _code << event;
    _code << ", "; _code << flags;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferData)(target, internalformat, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferData(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearBufferSubData)(target, internalformat, offset, size, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearBufferSubData(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferDataEXT)(buffer, internalformat, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearNamedBufferDataEXT(";
                   _code << buffer;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearNamedBufferSubDataEXT)(buffer, internalformat, offset, size, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearNamedBufferSubDataEXT(";
                   _code << buffer;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClampColorARB(GLenum target, GLenum clamp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClampColorARB)(target, clamp);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClampColorARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(clamp);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDispatchCompute)(num_groups_x, num_groups_y, num_groups_z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDispatchCompute(";
                   _code << num_groups_x;
    _code << ", "; _code << num_groups_y;
    _code << ", "; _code << num_groups_z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDispatchComputeIndirect(GLintptr indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDispatchComputeIndirect)(indirect);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDispatchComputeIndirect(";
                   _code << indirect;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyBufferSubData(GLenum readtarget, GLenum writetarget, GLintptr readoffset, GLintptr writeoffset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyBufferSubData)(readtarget, writetarget, readoffset, writeoffset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyBufferSubData(";
                   _code << toString(readtarget);
    _code << ", "; _code << toString(writetarget);
    _code << ", "; _code << readoffset;
    _code << ", "; _code << writeoffset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubData)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyImageSubData(";
                   _code << srcName;
    _code << ", "; _code << toString(srcTarget);
    _code << ", "; _code << srcLevel;
    _code << ", "; _code << srcX;
    _code << ", "; _code << srcY;
    _code << ", "; _code << srcZ;
    _code << ", "; _code << dstName;
    _code << ", "; _code << toString(dstTarget);
    _code << ", "; _code << dstLevel;
    _code << ", "; _code << dstX;
    _code << ", "; _code << dstY;
    _code << ", "; _code << dstZ;
    _code << ", "; _code << srcWidth;
    _code << ", "; _code << srcHeight;
    _code << ", "; _code << srcDepth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageCallbackARB(GLDEBUGPROCARB callback, GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallbackARB)(callback, userParam);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageCallbackARB(";
                   _code << "/* callback = ?? */";
    _code << ", "; _code << userParam;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControlARB)(source, type, severity, count, ids, enabled);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[count>0 && ids ? count : 0] = " << array<GLuint,const char * const>(ids,count>0 && ids ? count : 0,"","{ "," };\n",", ");
    _code << indent << "glDebugMessageControlARB(";
                   _code << toString(source);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ", "; _code << toString(enabled);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsertARB)(source, type, id, severity, length, buf);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageInsertARB(";
                   _code << toString(source);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << id;
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(buf,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetDebugMessageLogARB(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetDebugMessageLogARB)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _sourcesIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _sourcesIndex << "[" << (count) << "];\n";
    size_t _typesIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typesIndex << "[" << (count) << "];\n";
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (count) << "];\n";
    size_t _severitiesIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _severitiesIndex << "[" << (count) << "];\n";
    size_t _lengthsIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthsIndex << "[" << (count) << "];\n";
    _code << indent << "glGetDebugMessageLogARB(";
                   _code << count;
    _code << ", "; _code << bufsize;
    _code << ", "; _code << "o" << _sourcesIndex;
    _code << ", "; _code << "o" << _typesIndex;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ", "; _code << "o" << _severitiesIndex;
    _code << ", "; _code << "o" << _lengthsIndex;
    _code << ", "; _code << boost::print::quote(messageLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDrawBuffersARB(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersARB)(n, bufs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bufsIndex = _context->codeInputNext++;
    _code << indent << "const GLenum i" << _bufsIndex << "[n] = " << array<GLenum,const char * const>(bufs,n,"","{ "," };\n",", ");
    _code << indent << "glDrawBuffersARB(";
                   _code << n;
    _code << ", "; _code << "i" << _bufsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateiARB)(buf, modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparateiARB(";
                   _code << buf;
    _code << ", "; _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationiARB(GLuint buf, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationiARB)(buf, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationiARB(";
                   _code << buf;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateiARB)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparateiARB(";
                   _code << buf;
    _code << ", "; _code << toString(srcRGB);
    _code << ", "; _code << toString(dstRGB);
    _code << ", "; _code << toString(srcAlpha);
    _code << ", "; _code << toString(dstAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFunciARB)(buf, src, dst);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFunciARB(";
                   _code << buf;
    _code << ", "; _code << toString(src);
    _code << ", "; _code << toString(dst);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsBaseVertex)(mode, count, type, indices, basevertex);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsBaseVertex(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << basevertex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedBaseVertex)(mode, count, type, indices, primcount, basevertex);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedBaseVertex(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ", "; _code << basevertex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsBaseVertex)(mode, start, end, count, type, indices, basevertex);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawRangeElementsBaseVertex(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << basevertex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid **indices, GLsizei primcount, GLint *basevertex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsBaseVertex)(mode, count, type, indices, primcount, basevertex);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _countIndex = _context->codeInputNext++;
    _code << indent << "const GLsizei i" << _countIndex << "[primcount] = " << array<GLsizei,const char * const>(count,primcount,"","{ "," };\n",", ");
    size_t _basevertexIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _basevertexIndex << "[primcount] = " << array<GLint,const char * const>(basevertex,primcount,"","{ "," };\n",", ");
    _code << indent << "glMultiDrawElementsBaseVertex(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _countIndex;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ", "; _code << "i" << _basevertexIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysIndirect)(mode, indirect);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysIndirect(";
                   _code << toString(mode);
    _code << ", "; _code << indirect;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsIndirect)(mode, type, indirect);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsIndirect(";
                   _code << toString(mode);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indirect;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysInstancedARB(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedARB)(mode, start, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysInstancedARB(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedARB)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedARB(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferParameteri)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferParameteri(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFramebufferParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferParameterivEXT)(framebuffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedFramebufferParameterivEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferParameteriEXT)(framebuffer, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferParameteriEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFramebuffer(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebuffer)(target, framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFramebuffer(";
                   _code << toString(target);
    _code << ", "; _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbuffer)(target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindRenderbuffer(";
                   _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebuffer)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlitFramebuffer(";
                   _code << srcX0;
    _code << ", "; _code << srcY0;
    _code << ", "; _code << srcX1;
    _code << ", "; _code << srcY1;
    _code << ", "; _code << dstX0;
    _code << ", "; _code << dstY0;
    _code << ", "; _code << dstX1;
    _code << ", "; _code << dstY1;
    _code << ", "; _code << mask;
    _code << ", "; _code << toString(filter);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glCheckFramebufferStatus(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glCheckFramebufferStatus)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCheckFramebufferStatus(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffers)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _framebuffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _framebuffersIndex << "[n] = " << array<GLuint,const char * const>(framebuffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteFramebuffers(";
                   _code << n;
    _code << ", "; _code << "i" << _framebuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffers)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _renderbuffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _renderbuffersIndex << "[n] = " << array<GLuint,const char * const>(renderbuffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteRenderbuffers(";
                   _code << n;
    _code << ", "; _code << "i" << _renderbuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbuffer)(target, attachment, renderbuffertarget, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferRenderbuffer(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(renderbuffertarget);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1D)(target, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture1D(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2D)(target, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture2D(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3D)(target, attachment, textarget, texture, level, layer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture3D(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << layer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayer)(target, attachment, texture, level, layer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureLayer(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << layer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffers)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _framebuffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _framebuffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenFramebuffers(";
                   _code << n;
    _code << ", "; _code << "o" << _framebuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffers)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _renderbuffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _renderbuffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenRenderbuffers(";
                   _code << n;
    _code << ", "; _code << "o" << _renderbuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenerateMipmap(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmap)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenerateMipmap(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameteriv)(target, attachment, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFramebufferAttachmentParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetRenderbufferParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsFramebuffer(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsFramebuffer)(framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsFramebuffer(";
                   _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsRenderbuffer(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsRenderbuffer)(renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsRenderbuffer(";
                   _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorage)(target, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorage(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisample)(target, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisample(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureARB)(target, attachment, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceARB)(target, attachment, texture, level, face);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureFaceARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(face);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerARB)(target, attachment, texture, level, layer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureLayerARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << layer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameteriARB(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriARB)(program, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramParameteriARB(";
                   _code << program;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinary)(program, bufSize, length, binaryFormat, binary);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _binaryFormatIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _binaryFormatIndex << "[" << (1) << "];\n";
    _code << indent << "glGetProgramBinary(";
                   _code << program;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _binaryFormatIndex;
    _code << ", "; _code << binary;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramBinary)(program, binaryFormat, binary, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramBinary(";
                   _code << program;
    _code << ", "; _code << toString(binaryFormat);
    _code << ", "; _code << binary;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameteri(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteri)(program, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramParameteri(";
                   _code << program;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformdv)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformdv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1d(GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1d)(location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1d(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1dv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count] = " << array<GLdouble,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2d(GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2d)(location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2d(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2dv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 2] = " << array<GLdouble,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glUniform2dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3d)(location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3d(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3dv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 3] = " << array<GLdouble,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glUniform3dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4d)(location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4d(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4dv)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 4] = " << array<GLdouble,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glUniform4dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[2 * 2 * count] = " << array<GLdouble,const char * const>(value,2 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x3dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[2 * 3 * count] = " << array<GLdouble,const char * const>(value,2 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2x3dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2x4dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[2 * 4 * count] = " << array<GLdouble,const char * const>(value,2 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2x4dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[3 * 3 * count] = " << array<GLdouble,const char * const>(value,3 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x2dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[3 * 2 * count] = " << array<GLdouble,const char * const>(value,3 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3x2dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3x4dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[3 * 4 * count] = " << array<GLdouble,const char * const>(value,3 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3x4dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[4 * 4 * count] = " << array<GLdouble,const char * const>(value,4 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x2dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[4 * 2 * count] = " << array<GLdouble,const char * const>(value,4 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4x2dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4x3dv)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[4 * 3 * count] = " << array<GLdouble,const char * const>(value,4 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4x3dv(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorSubTable)(target, start, count, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorSubTable(";
                   _code << toString(target);
    _code << ", "; _code << start;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTable)(target, internalformat, width, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTable(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1D)(target, internalformat, width, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionFilter1D(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2D)(target, internalformat, width, height, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionFilter2D(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterf)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameterf(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteri)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameteri(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTable)(target, start, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyColorSubTable(";
                   _code << toString(target);
    _code << ", "; _code << start;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTable)(target, internalformat, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyColorTable(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1D)(target, internalformat, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyConvolutionFilter1D(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2D)(target, internalformat, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyConvolutionFilter2D(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTable)(target, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTable(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilter)(target, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionFilter(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogram)(target, reset, format, type, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogram(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogramParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogramParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmax)(target, reset, format, types, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmax(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(types);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmaxParameterfv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameteriv)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmaxParameteriv(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilter)(target, format, type, row, column, span);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSeparableFilter(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << row;
    _code << ", "; _code << column;
    _code << ", "; _code << span;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glHistogram)(target, width, internalformat, sink);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glHistogram(";
                   _code << toString(target);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(sink);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMinmax)(target, internalformat, sink);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMinmax(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(sink);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResetHistogram(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResetHistogram)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResetHistogram(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResetMinmax(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResetMinmax)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResetMinmax(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2D)(target, internalformat, width, height, format, type, row, column);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSeparableFilter2D(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << row;
    _code << ", "; _code << column;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribDivisorARB(GLuint index, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribDivisorARB)(index, divisor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribDivisorARB(";
                   _code << index;
    _code << ", "; _code << divisor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformativ)(target, internalformat, pname, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInternalformativ(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInternalformati64v)(target, internalformat, pname, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInternalformati64v(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateBufferData(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferData)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateBufferData(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateBufferSubData)(buffer, offset, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateBufferSubData(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateFramebuffer)(target, numAttachments, attachments);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateFramebuffer(";
                   _code << toString(target);
    _code << ", "; _code << numAttachments;
    _code << ", "; _code << attachments;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateSubFramebuffer)(target, numAttachments, attachments, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateSubFramebuffer(";
                   _code << toString(target);
    _code << ", "; _code << numAttachments;
    _code << ", "; _code << attachments;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateTexImage(GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexImage)(texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateTexImage(";
                   _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInvalidateTexSubImage)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInvalidateTexSubImage(";
                   _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRange)(target, offset, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushMappedBufferRange(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvoid *REGAL_CALL code_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapBufferRange)(target, offset, length, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapBufferRange(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ", "; _code << access;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glCurrentPaletteMatrixARB(GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixARB)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCurrentPaletteMatrixARB(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerARB)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixIndexPointerARB(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixIndexubvARB(GLint size, GLubyte *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexubvARB)(size, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixIndexubvARB(";
                   _code << size;
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixIndexuivARB(GLint size, GLuint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexuivARB)(size, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixIndexuivARB(";
                   _code << size;
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixIndexusvARB(GLint size, GLushort *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexusvARB)(size, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixIndexusvARB(";
                   _code << size;
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysIndirect)(mode, indirect, primcount, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawArraysIndirect(";
                   _code << toString(mode);
    _code << ", "; _code << indirect;
    _code << ", "; _code << primcount;
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsIndirect)(mode, type, indirect, primcount, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiDrawElementsIndirect(";
                   _code << toString(mode);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indirect;
    _code << ", "; _code << primcount;
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleCoverageARB(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleCoverageARB)(value, invert);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleCoverageARB(";
                   _code << value;
    _code << ", "; _code << toString(invert);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveTextureARB(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveTextureARB)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveTextureARB(";
                   _code << toString(texture);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClientActiveTextureARB(GLenum texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveTextureARB)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientActiveTextureARB(";
                   _code << toString(texture);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1dARB(GLenum target, GLdouble s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dARB)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1dARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1dvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1dvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1fARB(GLenum target, GLfloat s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fARB)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1fARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1fvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1fvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1iARB(GLenum target, GLint s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1iARB)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1iARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1ivARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[1] = " << array<GLint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1ivARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1sARB(GLenum target, GLshort s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1sARB)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1sARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1svARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1svARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dARB)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2dARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2dvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2dvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fARB)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2fARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2fvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2fvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2iARB)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2iARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2ivARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2ivARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2sARB)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2sARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2svARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2svARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dARB)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3dARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3dvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3dvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fARB)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3fARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3fvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3fvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3iARB)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3iARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3ivARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3ivARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3sARB)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3sARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3svARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3svARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dARB)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4dARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4dvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4dvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fARB)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4fARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4fvARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4fvARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4iARB)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4iARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4ivARB(GLenum target, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4ivARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4ivARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4sARB)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4sARB(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4svARB(GLenum target, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4svARB)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4svARB(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginQueryARB(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryARB)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginQueryARB(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteQueriesARB(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesARB)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[n] = " << array<GLuint,const char * const>(ids,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteQueriesARB(";
                   _code << n;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndQueryARB(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryARB)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndQueryARB(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenQueriesARB(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesARB)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenQueriesARB(";
                   _code << n;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectivARB)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectivARB(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivARB)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectuivARB(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivARB)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryivARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsQueryARB(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsQueryARB)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsQueryARB(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPointParameterfARB(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfARB)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfARB(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfvARB(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvARB)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfvARB(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramInterfaceiv)(program, programInterface, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramInterfaceiv(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetProgramResourceIndex)(program, programInterface, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramResourceIndex(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLint REGAL_CALL code_glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetProgramResourceLocation)(program, programInterface, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramResourceLocation(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLint REGAL_CALL code_glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetProgramResourceLocationIndex)(program, programInterface, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramResourceLocationIndex(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceName)(program, programInterface, index, bufSize, length, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramResourceName(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramResourceiv)(program, programInterface, index, propCount, props, bufSize, length, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramResourceiv(";
                   _code << program;
    _code << ", "; _code << toString(programInterface);
    _code << ", "; _code << index;
    _code << ", "; _code << propCount;
    _code << ", "; _code << props;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProvokingVertex(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertex)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProvokingVertex(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glGetGraphicsResetStatusARB(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glGetGraphicsResetStatusARB)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetGraphicsResetStatusARB();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnColorTableARB)(target, format, type, bufSize, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnColorTableARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnCompressedTexImageARB)(target, lod, bufSize, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnCompressedTexImageARB(";
                   _code << toString(target);
    _code << ", "; _code << lod;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnConvolutionFilterARB)(target, format, type, bufSize, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnConvolutionFilterARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnHistogramARB)(target, reset, format, type, bufSize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnHistogramARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapdvARB)(target, query, bufSize, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnMapdvARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapfvARB)(target, query, bufSize, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnMapfvARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnMapivARB)(target, query, bufSize, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnMapivARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(query);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnMinmaxARB)(target, reset, format, type, bufSize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnMinmaxARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapfvARB)(map, bufSize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnPixelMapfvARB(";
                   _code << toString(map);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapuivARB)(map, bufSize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnPixelMapuivARB(";
                   _code << toString(map);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnPixelMapusvARB)(map, bufSize, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnPixelMapusvARB(";
                   _code << toString(map);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnPolygonStippleARB)(bufSize, pattern);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnPolygonStippleARB(";
                   _code << bufSize;
    _code << ", "; _code << pattern;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnSeparableFilterARB)(target, format, type, rowBufSize, row, columnBufSize, column, span);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnSeparableFilterARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << rowBufSize;
    _code << ", "; _code << row;
    _code << ", "; _code << columnBufSize;
    _code << ", "; _code << column;
    _code << ", "; _code << span;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnTexImageARB)(target, level, format, type, bufSize, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnTexImageARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformdvARB)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformdvARB(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvARB)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformfvARB(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivARB)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformivARB(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformuivARB)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformuivARB(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsARB)(x, y, width, height, format, type, bufSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadnPixelsARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMinSampleShading(GLclampf value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShading)(value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMinSampleShading(";
                   _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMinSampleShadingARB(GLclampf value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMinSampleShadingARB)(value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMinSampleShadingARB(";
                   _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindSampler(GLuint unit, GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindSampler)(unit, sampler);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindSampler(";
                   _code << unit;
    _code << ", "; _code << sampler;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteSamplers(GLsizei count, const GLuint *samplers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSamplers)(count, samplers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _samplersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _samplersIndex << "[count] = " << array<GLuint,const char * const>(samplers,count,"","{ "," };\n",", ");
    _code << indent << "glDeleteSamplers(";
                   _code << count;
    _code << ", "; _code << "i" << _samplersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenSamplers(GLsizei count, GLuint *samplers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenSamplers)(count, samplers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _samplersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _samplersIndex << "[" << (count) << "];\n";
    _code << indent << "glGenSamplers(";
                   _code << count;
    _code << ", "; _code << "o" << _samplersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIiv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSamplerParameterIiv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterIuiv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSamplerParameterIuiv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameterfv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSamplerParameterfv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSamplerParameteriv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSamplerParameteriv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsSampler(GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsSampler)(sampler);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsSampler(";
                   _code << sampler;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIiv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameterIiv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterIuiv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameterIuiv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterf)(sampler, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameterf(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameterfv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameterfv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteri)(sampler, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameteri(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplerParameteriv)(sampler, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplerParameteriv(";
                   _code << sampler;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveShaderProgram(GLuint pipeline, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveShaderProgram)(pipeline, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveShaderProgram(";
                   _code << pipeline;
    _code << ", "; _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramPipeline)(pipeline);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindProgramPipeline(";
                   _code << pipeline;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar **strings)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glCreateShaderProgramv)(type, count, strings);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateShaderProgramv(";
                   _code << toString(type);
    _code << ", "; _code << count;
    _code << ", "; _code << "/* strings = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramPipelines)(n, pipelines);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pipelinesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _pipelinesIndex << "[n] = " << array<GLuint,const char * const>(pipelines,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteProgramPipelines(";
                   _code << n;
    _code << ", "; _code << "i" << _pipelinesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramPipelines)(n, pipelines);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pipelinesIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _pipelinesIndex << "[" << (n) << "];\n";
    _code << indent << "glGenProgramPipelines(";
                   _code << n;
    _code << ", "; _code << "o" << _pipelinesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineInfoLog)(pipeline, bufSize, length, infoLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetProgramPipelineInfoLog(";
                   _code << pipeline;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(infoLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramPipelineiv)(pipeline, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramPipelineiv(";
                   _code << pipeline;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsProgramPipeline)(pipeline);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsProgramPipeline(";
                   _code << pipeline;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1d)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1d(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count] = " << array<GLdouble,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1f)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1f(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count] = " << array<GLfloat,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1i(GLuint program, GLint location, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1i(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count] = " << array<GLint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1iv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1ui(GLuint program, GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui)(program, location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1ui(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count] = " << array<GLuint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1uiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2d)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2d(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 2] = " << array<GLdouble,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2f)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2f(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 2] = " << array<GLfloat,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2i(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 2] = " << array<GLint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2iv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2ui(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 2] = " << array<GLuint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2uiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3d)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3d(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 3] = " << array<GLdouble,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3f)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3f(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 3] = " << array<GLfloat,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3i(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 3] = " << array<GLint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3iv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3ui(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 3] = " << array<GLuint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3uiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4d)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4d(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 4] = " << array<GLdouble,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4f)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4f(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 4] = " << array<GLfloat,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4i(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 4] = " << array<GLint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4iv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4ui(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiv)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 4] = " << array<GLuint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4uiv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 4] = " << array<GLdouble,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 4] = " << array<GLfloat,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 6] = " << array<GLdouble,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x3dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 6] = " << array<GLfloat,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x3fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 8] = " << array<GLdouble,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x4dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 8] = " << array<GLfloat,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x4fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 9] = " << array<GLdouble,const char * const>(value,count * 9,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 9] = " << array<GLfloat,const char * const>(value,count * 9,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 6] = " << array<GLdouble,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x2dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 6] = " << array<GLfloat,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x2fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 12] = " << array<GLdouble,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x4dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 12] = " << array<GLfloat,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x4fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 16] = " << array<GLdouble,const char * const>(value,count * 16,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 16] = " << array<GLfloat,const char * const>(value,count * 16,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 8] = " << array<GLdouble,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x2dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 8] = " << array<GLfloat,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x2fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 12] = " << array<GLdouble,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x3dv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fv)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 12] = " << array<GLfloat,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x3fv(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUseProgramStages)(pipeline, stages, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUseProgramStages(";
                   _code << pipeline;
    _code << ", "; _code << stages;
    _code << ", "; _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glValidateProgramPipeline(GLuint pipeline)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramPipeline)(pipeline);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glValidateProgramPipeline(";
                   _code << pipeline;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAtomicCounterBufferiv)(program, bufferIndex, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetActiveAtomicCounterBufferiv(";
                   _code << program;
    _code << ", "; _code << bufferIndex;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindImageTexture)(unit, texture, level, layered, layer, access, format);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindImageTexture(";
                   _code << unit;
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(layered);
    _code << ", "; _code << layer;
    _code << ", "; _code << toString(access);
    _code << ", "; _code << toString(format);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMemoryBarrier(GLbitfield barriers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrier)(barriers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMemoryBarrier(";
                   _code << barriers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAttachObjectARB)(containerObj, obj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAttachObjectARB(";
                   _code << containerObj;
    _code << ", "; _code << obj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompileShaderARB(GLhandleARB shaderObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderARB)(shaderObj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompileShaderARB(";
                   _code << shaderObj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLhandleARB REGAL_CALL code_glCreateProgramObjectARB(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLhandleARB  _ret = _next->call(&_next->glCreateProgramObjectARB)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateProgramObjectARB();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLhandleARB REGAL_CALL code_glCreateShaderObjectARB(GLenum shaderType)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLhandleARB  _ret = _next->call(&_next->glCreateShaderObjectARB)(shaderType);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateShaderObjectARB(";
                   _code << toString(shaderType);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteObjectARB(GLhandleARB obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteObjectARB)(obj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteObjectARB(";
                   _code << obj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDetachObjectARB)(containerObj, attachedObj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDetachObjectARB(";
                   _code << containerObj;
    _code << ", "; _code << attachedObj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformARB)(programObj, index, maxLength, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveUniformARB(";
                   _code << programObj;
    _code << ", "; _code << index;
    _code << ", "; _code << maxLength;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetAttachedObjectsARB)(containerObj, maxCount, count, obj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _countIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _countIndex << "[" << (1) << "];\n";
    _code << indent << "glGetAttachedObjectsARB(";
                   _code << containerObj;
    _code << ", "; _code << maxCount;
    _code << ", "; _code << "o" << _countIndex;
    _code << ", "; _code << obj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLhandleARB REGAL_CALL code_glGetHandleARB(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLhandleARB  _ret = _next->call(&_next->glGetHandleARB)(pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHandleARB(";
                   _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInfoLogARB)(obj, maxLength, length, infoLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (length ? 1 : 0) << "];\n";
    _code << indent << "glGetInfoLogARB(";
                   _code << obj;
    _code << ", "; _code << maxLength;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(infoLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterfvARB)(obj, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectParameterfvARB(";
                   _code << obj;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectParameterivARB)(obj, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectParameterivARB(";
                   _code << obj;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetShaderSourceARB)(obj, maxLength, length, source);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetShaderSourceARB(";
                   _code << obj;
    _code << ", "; _code << maxLength;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(source,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetUniformLocationARB)(programObj, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformLocationARB(";
                   _code << programObj;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformfvARB)(programObj, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformfvARB(";
                   _code << programObj;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformivARB)(programObj, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformivARB(";
                   _code << programObj;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLinkProgramARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLinkProgramARB)(programObj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLinkProgramARB(";
                   _code << programObj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderSourceARB)(shaderObj, count, string, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _lengthIndex << "[length ? count : 0] = " << array<GLint,const char * const>(length,length ? count : 0,"","{ "," };\n",", ");
    _code << indent << "glShaderSourceARB(";
                   _code << shaderObj;
    _code << ", "; _code << count;
    _code << ", "; _code << "/* string = ?? */";
    _code << ", "; _code << "i" << _lengthIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1fARB(GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fARB)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1fARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1fvARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1iARB(GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1iARB)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1iARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ivARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1ivARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fARB)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2fARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2fvARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2iARB(GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2iARB)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2iARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ivARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2ivARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fARB)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3fARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3fvARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3iARB)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3iARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ivARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3ivARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fARB)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4fARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4fvARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4iARB)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4iARB(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4ivARB(GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ivARB)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4ivARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix2fvARB)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[2 * 2 * count] = " << array<GLfloat,const char * const>(value,2 * 2 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix2fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix3fvARB)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[3 * 3 * count] = " << array<GLfloat,const char * const>(value,3 * 3 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix3fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformMatrix4fvARB)(location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4 * 4 * count] = " << array<GLfloat,const char * const>(value,4 * 4 * count,"","{ "," };\n",", ");
    _code << indent << "glUniformMatrix4fvARB(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUseProgramObjectARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUseProgramObjectARB)(programObj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUseProgramObjectARB(";
                   _code << programObj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glValidateProgramARB(GLhandleARB programObj)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glValidateProgramARB)(programObj);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glValidateProgramARB(";
                   _code << programObj;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderStorageBlockBinding)(program, storageBlockIndex, storageBlockBinding);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glShaderStorageBlockBinding(";
                   _code << program;
    _code << ", "; _code << storageBlockIndex;
    _code << ", "; _code << storageBlockBinding;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveSubroutineName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineName)(program, shaderType, index, bufSize, length, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveSubroutineName(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveSubroutineUniformName(GLuint program, GLenum shaderType, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformName)(program, shaderType, index, bufSize, length, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveSubroutineUniformName(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveSubroutineUniformiv(GLuint program, GLenum shaderType, GLuint index, GLenum pname, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveSubroutineUniformiv)(program, shaderType, index, pname, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetActiveSubroutineUniformiv(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramStageiv(GLuint program, GLenum shaderType, GLenum pname, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStageiv)(program, shaderType, pname, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valuesIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _valuesIndex << "[" << (1) << "];\n";
    _code << indent << "glGetProgramStageiv(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetSubroutineIndex(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetSubroutineIndex)(program, shaderType, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSubroutineIndex(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLint REGAL_CALL code_glGetSubroutineUniformLocation(GLuint program, GLenum shaderType, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetSubroutineUniformLocation)(program, shaderType, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSubroutineUniformLocation(";
                   _code << program;
    _code << ", "; _code << toString(shaderType);
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetUniformSubroutineuiv(GLenum shaderType, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformSubroutineuiv)(shaderType, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetUniformSubroutineuiv(";
                   _code << toString(shaderType);
    _code << ", "; _code << location;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformSubroutinesuiv(GLenum shaderType, GLsizei count, const GLuint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformSubroutinesuiv)(shaderType, count, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _indicesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _indicesIndex << "[count] = " << array<GLuint,const char * const>(indices,count,"","{ "," };\n",", ");
    _code << indent << "glUniformSubroutinesuiv(";
                   _code << toString(shaderType);
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _indicesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar **path, const GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompileShaderIncludeARB)(shader, count, path, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _lengthIndex << "[count] = " << array<GLint,const char * const>(length,count,"","{ "," };\n",", ");
    _code << indent << "glCompileShaderIncludeARB(";
                   _code << shader;
    _code << ", "; _code << count;
    _code << ", "; _code << "/* path = ?? */";
    _code << ", "; _code << "i" << _lengthIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteNamedStringARB)(namelen, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteNamedStringARB(";
                   _code << namelen;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringARB)(namelen, name, bufSize, stringlen, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _stringlenIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _stringlenIndex << "[" << (1) << "];\n";
    _code << indent << "glGetNamedStringARB(";
                   _code << namelen;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _stringlenIndex;
    _code << ", "; _code << boost::print::quote(string,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedStringivARB)(namelen, name, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedStringivARB(";
                   _code << namelen;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* params = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsNamedStringARB(GLint namelen, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsNamedStringARB)(namelen, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsNamedStringARB(";
                   _code << namelen;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedStringARB)(type, namelen, name, stringlen, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedStringARB(";
                   _code << toString(type);
    _code << ", "; _code << namelen;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ", "; _code << stringlen;
    _code << ", "; _code << boost::print::quote(string,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glClientWaitSync)(sync, flags, timeout);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientWaitSync(";
                   _code << reinterpret_cast<void *>(sync);
    _code << ", "; _code << flags;
    _code << ", "; _code << timeout;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteSync(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteSync)(sync);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteSync(";
                   _code << reinterpret_cast<void *>(sync);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLsync REGAL_CALL code_glFenceSync(GLenum condition, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLsync  _ret = _next->call(&_next->glFenceSync)(condition, flags);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFenceSync(";
                   _code << toString(condition);
    _code << ", "; _code << flags;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetInteger64v(GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInteger64v)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInteger64v(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSynciv)(sync, pname, bufSize, length, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _valuesIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _valuesIndex << "[" << (bufSize) << "];\n";
    _code << indent << "glGetSynciv(";
                   _code << reinterpret_cast<void *>(sync);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsSync(GLsync sync)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsSync)(sync);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsSync(";
                   _code << reinterpret_cast<void *>(sync);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWaitSync)(sync, flags, timeout);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWaitSync(";
                   _code << reinterpret_cast<void *>(sync);
    _code << ", "; _code << flags;
    _code << ", "; _code << timeout;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPatchParameterfv(GLenum pname, const GLfloat *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPatchParameterfv)(pname, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valuesIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valuesIndex << "[1] = " << array<GLfloat,const char * const>(values,1,"","{ "," };\n",", ");
    _code << indent << "glPatchParameterfv(";
                   _code << toString(pname);
    _code << ", "; _code << "i" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPatchParameteri(GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPatchParameteri)(pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPatchParameteri(";
                   _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferARB)(target, internalformat, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBufferARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferRange)(target, internalformat, buffer, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBufferRange(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferRangeEXT)(texture, target, internalformat, buffer, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureBufferRangeEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage1DARB)(target, level, internalformat, width, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage1DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage2DARB)(target, level, internalformat, width, height, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage2DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DARB)(target, level, internalformat, width, height, depth, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage3DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage1DARB)(target, level, xoffset, width, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage1DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage2DARB)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage2DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DARB)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage3DARB(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCompressedTexImageARB(GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTexImageARB)(target, lod, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCompressedTexImageARB(";
                   _code << toString(target);
    _code << ", "; _code << lod;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefv)(pname, index, val);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultisamplefv(";
                   _code << toString(pname);
    _code << ", "; _code << index;
    _code << ", "; _code << val;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleMaski(GLuint index, GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaski)(index, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleMaski(";
                   _code << index;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage2DMultisample(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << internalformat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage3DMultisample(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << internalformat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1D)(target, levels, internalformat, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage1D(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2D)(target, levels, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage2D(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3D)(target, levels, internalformat, width, height, depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage3D(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage1DEXT)(texture, target, levels, internalformat, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureStorage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DEXT)(texture, target, levels, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureStorage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DEXT)(texture, target, levels, internalformat, width, height, depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureStorage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DMultisample)(target, samples, internalformat, width, height, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage2DMultisample(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DMultisample)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage3DMultisample(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage2DMultisampleEXT)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureStorage2DMultisampleEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureStorage3DMultisampleEXT)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureStorage3DMultisampleEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedsamplelocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureView)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureView(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << origtexture;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << minlevel;
    _code << ", "; _code << numlevels;
    _code << ", "; _code << minlayer;
    _code << ", "; _code << numlayers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64v)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjecti64v(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64v)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectui64v(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glQueryCounter(GLuint id, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glQueryCounter)(id, target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glQueryCounter(";
                   _code << id;
    _code << ", "; _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindTransformFeedback(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedback)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTransformFeedback(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacks)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[n] = " << array<GLuint,const char * const>(ids,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteTransformFeedbacks(";
                   _code << n;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawTransformFeedback(GLenum mode, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedback)(mode, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawTransformFeedback(";
                   _code << toString(mode);
    _code << ", "; _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacks)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenTransformFeedbacks(";
                   _code << n;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsTransformFeedback(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsTransformFeedback)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsTransformFeedback(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPauseTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedback)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPauseTransformFeedback();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResumeTransformFeedback(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedback)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResumeTransformFeedback();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryIndexed)(target, index, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginQueryIndexed(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStream)(mode, id, stream);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawTransformFeedbackStream(";
                   _code << toString(mode);
    _code << ", "; _code << id;
    _code << ", "; _code << stream;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndQueryIndexed(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryIndexed)(target, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndQueryIndexed(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryIndexediv)(target, index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryIndexediv(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackInstanced)(mode, id, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawTransformFeedbackInstanced(";
                   _code << toString(mode);
    _code << ", "; _code << id;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackStreamInstanced)(mode, id, stream, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawTransformFeedbackStreamInstanced(";
                   _code << toString(mode);
    _code << ", "; _code << id;
    _code << ", "; _code << stream;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixdARB)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadTransposeMatrixdARB(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadTransposeMatrixfARB)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glLoadTransposeMatrixfARB(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultTransposeMatrixdARB(const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixdARB)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultTransposeMatrixdARB(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultTransposeMatrixfARB(const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultTransposeMatrixfARB)(m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMultTransposeMatrixfARB(";
                   _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBase)(target, index, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferBase(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRange)(target, index, buffer, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferRange(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockName)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveUniformBlockName(";
                   _code << program;
    _code << ", "; _code << uniformBlockIndex;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(uniformBlockName,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformBlockiv)(program, uniformBlockIndex, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetActiveUniformBlockiv(";
                   _code << program;
    _code << ", "; _code << uniformBlockIndex;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformName)(program, uniformIndex, bufSize, length, uniformName);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveUniformName(";
                   _code << program;
    _code << ", "; _code << uniformIndex;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << boost::print::quote(uniformName,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveUniformsiv)(program, uniformCount, uniformIndices, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetActiveUniformsiv(";
                   _code << program;
    _code << ", "; _code << uniformCount;
    _code << ", "; _code << uniformIndices;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_v)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegeri_v(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetUniformBlockIndex)(program, uniformBlockName);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformBlockIndex(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(uniformBlockName,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar **uniformNames, GLuint *uniformIndices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformIndices)(program, uniformCount, uniformNames, uniformIndices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformIndices(";
                   _code << program;
    _code << ", "; _code << uniformCount;
    _code << ", "; _code << uniformNames;
    _code << ", "; _code << uniformIndices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformBlockBinding)(program, uniformBlockIndex, uniformBlockBinding);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniformBlockBinding(";
                   _code << program;
    _code << ", "; _code << uniformBlockIndex;
    _code << ", "; _code << uniformBlockBinding;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVertexArray(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArray)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVertexArray(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArrays)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _arraysIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _arraysIndex << "[n] = " << array<GLuint,const char * const>(arrays,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteVertexArrays(";
                   _code << n;
    _code << ", "; _code << "i" << _arraysIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenVertexArrays(GLsizei n, GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArrays)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _arraysIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _arraysIndex << "[" << (n) << "];\n";
    _code << indent << "glGenVertexArrays(";
                   _code << n;
    _code << ", "; _code << "o" << _arraysIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsVertexArray(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsVertexArray)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsVertexArray(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdv)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribLdv(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1d(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1d)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL1d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL1dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2d)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL2d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL2dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3d)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL3d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL3dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4d)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL4d(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4dv(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL4dv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointer)(index, size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribLPointer(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexBuffer)(bindingindex, buffer, offset, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVertexBuffer(";
                   _code << bindingindex;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribBinding)(attribindex, bindingindex);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribBinding(";
                   _code << attribindex;
    _code << ", "; _code << bindingindex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormat)(attribindex, size, type, normalized, relativeoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribFormat(";
                   _code << attribindex;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << relativeoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormat)(attribindex, size, type, relativeoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribIFormat(";
                   _code << attribindex;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << relativeoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormat)(attribindex, size, type, relativeoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribLFormat(";
                   _code << attribindex;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << relativeoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexBindingDivisor)(bindingindex, divisor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexBindingDivisor(";
                   _code << bindingindex;
    _code << ", "; _code << divisor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexBlendARB(GLint count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendARB)(count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexBlendARB(";
                   _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightPointerARB(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerARB)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightPointerARB(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightbvARB(GLint size, GLbyte *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightbvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightbvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightdvARB(GLint size, GLdouble *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightdvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightdvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightfvARB(GLint size, GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightfvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightfvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightivARB(GLint size, GLint *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightivARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightivARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightsvARB(GLint size, GLshort *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightsvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightsvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightubvARB(GLint size, GLubyte *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightubvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightubvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightuivARB(GLint size, GLuint *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightuivARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightuivARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightusvARB(GLint size, GLushort *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightusvARB)(size, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightusvARB(";
                   _code << size;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferARB(GLenum target, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferARB)(target, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferARB(";
                   _code << toString(target);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferDataARB)(target, size, data, usage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferDataARB(";
                   _code << toString(target);
    _code << ", "; _code << size;
    _code << ", "; _code << boost::print::raw(data,Logging::rawLimit(data ? size : 0));
    _code << ", "; _code << toString(usage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferSubDataARB)(target, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferSubDataARB(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << boost::print::raw(data,Logging::rawLimit(data ? size : 0));
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteBuffersARB(GLsizei n, const GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBuffersARB)(n, buffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _buffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _buffersIndex << "[n] = " << array<GLuint,const char * const>(buffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteBuffersARB(";
                   _code << n;
    _code << ", "; _code << "i" << _buffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenBuffersARB(GLsizei n, GLuint *buffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenBuffersARB)(n, buffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _buffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _buffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenBuffersARB(";
                   _code << n;
    _code << ", "; _code << "o" << _buffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterivARB)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferParameterivARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervARB)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferPointervARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferSubDataARB)(target, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferSubDataARB(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsBufferARB(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsBufferARB)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsBufferARB(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLvoid *REGAL_CALL code_glMapBufferARB(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapBufferARB)(target, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapBufferARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glUnmapBufferARB(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glUnmapBufferARB)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnmapBufferARB(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBindProgramARB(GLenum target, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramARB)(target, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindProgramARB(";
                   _code << toString(target);
    _code << ", "; _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsARB)(n, programs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _programsIndex << "[n] = " << array<GLuint,const char * const>(programs,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteProgramsARB(";
                   _code << n;
    _code << ", "; _code << "i" << _programsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVertexAttribArrayARB(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexAttribArrayARB)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVertexAttribArrayARB(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVertexAttribArrayARB(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexAttribArrayARB)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVertexAttribArrayARB(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenProgramsARB(GLsizei n, GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsARB)(n, programs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _programsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenProgramsARB(";
                   _code << n;
    _code << ", "; _code << "o" << _programsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterdvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramEnvParameterdvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterfvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramEnvParameterfvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterdvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramLocalParameterdvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterfvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramLocalParameterfvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringARB)(target, pname, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramStringARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << string;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivARB)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetProgramivARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervARB)(index, pname, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexAttribPointervARB(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvARB)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribdvARB(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvARB)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribfvARB(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivARB)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetVertexAttribivARB(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsProgramARB(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsProgramARB)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsProgramARB(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dARB)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramEnvParameter4dARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4dvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _paramsIndex << "[4] = " << array<GLdouble,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParameter4dvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fARB)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramEnvParameter4fARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameter4fvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[4] = " << array<GLfloat,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParameter4fvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dARB)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramLocalParameter4dARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4dvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _paramsIndex << "[4] = " << array<GLdouble,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParameter4dvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fARB)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramLocalParameter4fARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameter4fvARB)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[4] = " << array<GLfloat,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParameter4fvARB(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramStringARB)(target, format, len, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramStringARB(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << len;
    _code << ", "; _code << boost::print::quote(reinterpret_cast<const char *>(string),'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1dARB(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dARB)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1dARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1dvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1fARB(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fARB)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1fARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1fvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1sARB(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sARB)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1sARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1svARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dARB)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2dARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2dvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fARB)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2fARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2fvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sARB)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2sARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2svARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dARB)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3dARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3dvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fARB)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3fARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3fvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sARB)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3sARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3svARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NbvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NbvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NivARB(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NivARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NivARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NsvARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NsvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NsvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubARB)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4NubARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NubvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NubvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NuivARB(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NuivARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NuivARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4NusvARB(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4NusvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4NusvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4bvARB(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4bvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4bvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dARB)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4dARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4dvARB(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4dvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fARB)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4fARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4fvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4ivARB(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ivARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4ivARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sARB)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4sARB(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4svARB(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4svARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4ubvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4uivARB(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4uivARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4uivARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4usvARB(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4usvARB)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4usvARB(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerARB)(index, size, type, normalized, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribPointerARB(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindAttribLocationARB)(programObj, index, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindAttribLocationARB(";
                   _code << programObj;
    _code << ", "; _code << index;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveAttribARB)(programObj, index, maxLength, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveAttribARB(";
                   _code << programObj;
    _code << ", "; _code << index;
    _code << ", "; _code << maxLength;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetAttribLocationARB)(programObj, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetAttribLocationARB(";
                   _code << programObj;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glColorP3ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorP3ui)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorP3ui(";
                   _code << toString(type);
    _code << ", "; _code << color;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorP3uiv)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _colorIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _colorIndex << "[1] = " << array<GLuint,const char * const>(color,1,"","{ "," };\n",", ");
    _code << indent << "glColorP3uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _colorIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorP4ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorP4ui)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorP4ui(";
                   _code << toString(type);
    _code << ", "; _code << color;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorP4uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorP4uiv)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _colorIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _colorIndex << "[1] = " << array<GLuint,const char * const>(color,1,"","{ "," };\n",", ");
    _code << indent << "glColorP4uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _colorIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1ui)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoordP1ui(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP1uiv)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoordP1uiv(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2ui)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoordP2ui(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP2uiv)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoordP2uiv(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3ui)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoordP3ui(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP3uiv)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoordP3uiv(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4ui)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoordP4ui(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordP4uiv)(texture, type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoordP4uiv(";
                   _code << toString(texture);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalP3ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalP3ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalP3uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glNormalP3uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorP3ui(GLenum type, GLuint color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3ui)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColorP3ui(";
                   _code << toString(type);
    _code << ", "; _code << color;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorP3uiv)(type, color);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _colorIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _colorIndex << "[1] = " << array<GLuint,const char * const>(color,1,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColorP3uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _colorIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP1ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordP1ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP1uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP1uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoordP1uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP2ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordP2ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP2uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoordP2uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordP3ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP3uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoordP3uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP4ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordP4ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordP4uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoordP4uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1ui)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribP1ui(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP1uiv)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[1] = " << array<GLuint,const char * const>(value,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribP1uiv(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2ui)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribP2ui(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP2uiv)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[1] = " << array<GLuint,const char * const>(value,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribP2uiv(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3ui)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribP3ui(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP3uiv)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[1] = " << array<GLuint,const char * const>(value,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribP3uiv(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4ui)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribP4ui(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribP4uiv)(index, type, normalized, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[1] = " << array<GLuint,const char * const>(value,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribP4uiv(";
                   _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP2ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP2ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexP2ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP2uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP2uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexP2uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP3ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP3ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexP3ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP3uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP3uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexP3uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP4ui(GLenum type, GLuint coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP4ui)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexP4ui(";
                   _code << toString(type);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexP4uiv(GLenum type, const GLuint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexP4uiv)(type, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _coordsIndex << "[1] = " << array<GLuint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexP4uiv(";
                   _code << toString(type);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeArrayv)(first, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLclampd i" << _vIndex << "[count * 2] = " << array<GLclampd,const char * const>(v,count * 2,"","{ "," };\n",", ");
    _code << indent << "glDepthRangeArrayv(";
                   _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangeIndexed)(index, n, f);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthRangeIndexed(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << f;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDoublei_v(GLenum target, GLuint index, GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_v)(target, index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDoublei_v(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFloati_v(GLenum target, GLuint index, GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_v)(target, index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFloati_v(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << v;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScissorArrayv(GLuint first, GLsizei count, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScissorArrayv)(first, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[count * 4] = " << array<GLint,const char * const>(v,count * 4,"","{ "," };\n",", ");
    _code << indent << "glScissorArrayv(";
                   _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScissorIndexed(GLuint index, GLint left, GLint bottom, GLint width, GLint height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexed)(index, left, bottom, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glScissorIndexed(";
                   _code << index;
    _code << ", "; _code << left;
    _code << ", "; _code << bottom;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glScissorIndexedv(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glScissorIndexedv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glScissorIndexedv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glViewportArrayv)(first, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[count * 4] = " << array<GLfloat,const char * const>(v,count * 4,"","{ "," };\n",", ");
    _code << indent << "glViewportArrayv(";
                   _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedf)(index, x, y, w, h);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glViewportIndexedf(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << w;
    _code << ", "; _code << h;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glViewportIndexedfv(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glViewportIndexedfv)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glViewportIndexedfv(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2dARB(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dARB)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2dARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2dvARB(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _pIndex << "[2] = " << array<GLdouble,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2dvARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2fARB(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fARB)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2fARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2fvARB(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _pIndex << "[2] = " << array<GLfloat,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2fvARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2iARB(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iARB)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2iARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2ivARB(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _pIndex << "[2] = " << array<GLint,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2ivARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2sARB(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sARB)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2sARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2svARB(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _pIndex << "[2] = " << array<GLshort,const char * const>(p,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2svARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dARB)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3dARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3dvARB(const GLdouble *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _pIndex << "[3] = " << array<GLdouble,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3dvARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fARB)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3fARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3fvARB(const GLfloat *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _pIndex << "[3] = " << array<GLfloat,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3fvARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3iARB(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iARB)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3iARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3ivARB(const GLint *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _pIndex << "[3] = " << array<GLint,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3ivARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sARB)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3sARB(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3svARB(const GLshort *p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svARB)(p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _pIndex << "[3] = " << array<GLshort,const char * const>(p,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3svARB(";
                   _code << "i" << _pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBuffersATI(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersATI)(n, bufs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bufsIndex = _context->codeInputNext++;
    _code << indent << "const GLenum i" << _bufsIndex << "[n] = " << array<GLenum,const char * const>(bufs,n,"","{ "," };\n",", ");
    _code << indent << "glDrawBuffersATI(";
                   _code << n;
    _code << ", "; _code << "i" << _bufsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementArrayATI(GLenum mode, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementArrayATI)(mode, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementArrayATI(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementArrayATI)(mode, start, end, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawRangeElementArrayATI(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glElementPointerATI(GLenum type, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glElementPointerATI)(type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glElementPointerATI(";
                   _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterfvATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexBumpParameterfvATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexBumpParameterivATI(GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexBumpParameterivATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexBumpParameterivATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBumpParameterfvATI(GLenum pname, GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterfvATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBumpParameterfvATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBumpParameterivATI(GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBumpParameterivATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBumpParameterivATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp1ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAlphaFragmentOp1ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp2ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAlphaFragmentOp2ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ", "; _code << arg2;
    _code << ", "; _code << arg2Rep;
    _code << ", "; _code << arg2Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFragmentOp3ATI)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAlphaFragmentOp3ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ", "; _code << arg2;
    _code << ", "; _code << arg2Rep;
    _code << ", "; _code << arg2Mod;
    _code << ", "; _code << arg3;
    _code << ", "; _code << arg3Rep;
    _code << ", "; _code << arg3Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginFragmentShaderATI(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginFragmentShaderATI)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginFragmentShaderATI();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFragmentShaderATI(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFragmentShaderATI)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFragmentShaderATI(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp1ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorFragmentOp1ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMask;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp2ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorFragmentOp2ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMask;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ", "; _code << arg2;
    _code << ", "; _code << arg2Rep;
    _code << ", "; _code << arg2Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorFragmentOp3ATI)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorFragmentOp3ATI(";
                   _code << toString(op);
    _code << ", "; _code << dst;
    _code << ", "; _code << dstMask;
    _code << ", "; _code << dstMod;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg1Rep;
    _code << ", "; _code << arg1Mod;
    _code << ", "; _code << arg2;
    _code << ", "; _code << arg2Rep;
    _code << ", "; _code << arg2Mod;
    _code << ", "; _code << arg3;
    _code << ", "; _code << arg3Rep;
    _code << ", "; _code << arg3Mod;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteFragmentShaderATI(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFragmentShaderATI)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteFragmentShaderATI(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndFragmentShaderATI(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndFragmentShaderATI)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndFragmentShaderATI();\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGenFragmentShadersATI(GLuint range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenFragmentShadersATI)(range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenFragmentShadersATI(";
                   _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPassTexCoordATI)(dst, coord, swizzle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPassTexCoordATI(";
                   _code << dst;
    _code << ", "; _code << coord;
    _code << ", "; _code << toString(swizzle);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleMapATI)(dst, interp, swizzle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleMapATI(";
                   _code << dst;
    _code << ", "; _code << interp;
    _code << ", "; _code << toString(swizzle);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetFragmentShaderConstantATI)(dst, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[4] = " << array<GLfloat,const char * const>(value,4,"","{ "," };\n",", ");
    _code << indent << "glSetFragmentShaderConstantATI(";
                   _code << dst;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvoid *REGAL_CALL code_glMapObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapObjectBufferATI)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapObjectBufferATI(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glUnmapObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUnmapObjectBufferATI)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnmapObjectBufferATI(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPNTrianglesfATI(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesfATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPNTrianglesfATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPNTrianglesiATI(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPNTrianglesiATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPNTrianglesiATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilFuncSeparateATI)(frontfunc, backfunc, ref, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilFuncSeparateATI(";
                   _code << toString(frontfunc);
    _code << ", "; _code << toString(backfunc);
    _code << ", "; _code << ref;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilOpSeparateATI)(face, sfail, dpfail, dppass);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilOpSeparateATI(";
                   _code << toString(face);
    _code << ", "; _code << toString(sfail);
    _code << ", "; _code << toString(dpfail);
    _code << ", "; _code << toString(dppass);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glArrayObjectATI)(array, size, type, stride, buffer, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glArrayObjectATI(";
                   _code << toString(array);
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFreeObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFreeObjectBufferATI)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFreeObjectBufferATI(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectfvATI)(array, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetArrayObjectfvATI(";
                   _code << toString(array);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetArrayObjectivATI)(array, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetArrayObjectivATI(";
                   _code << toString(array);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferfvATI)(buffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetObjectBufferfvATI(";
                   _code << buffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectBufferivATI)(buffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetObjectBufferivATI(";
                   _code << buffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectfvATI)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVariantArrayObjectfvATI(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantArrayObjectivATI)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVariantArrayObjectivATI(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsObjectBufferATI(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsObjectBufferATI)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsObjectBufferATI(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glNewObjectBufferATI(GLsizei size, const GLvoid *pointer, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glNewObjectBufferATI)(size, pointer, usage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNewObjectBufferATI(";
                   _code << size;
    _code << ", "; _code << pointer;
    _code << ", "; _code << toString(usage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUpdateObjectBufferATI)(buffer, offset, size, pointer, preserve);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUpdateObjectBufferATI(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << pointer;
    _code << ", "; _code << toString(preserve);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantArrayObjectATI)(id, type, stride, buffer, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantArrayObjectATI(";
                   _code << id;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectfvATI)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexAttribArrayObjectfvATI(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribArrayObjectivATI)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexAttribArrayObjectivATI(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribArrayObjectATI)(index, size, type, normalized, stride, buffer, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribArrayObjectATI(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << stride;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClientActiveVertexStreamATI(GLenum stream)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClientActiveVertexStreamATI)(stream);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientActiveVertexStreamATI(";
                   _code << toString(stream);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3bATI(GLenum stream, GLbyte x, GLbyte y, GLbyte z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalStream3bATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3bvATI(GLenum stream, const GLbyte *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3bvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _coordsIndex << "[3] = " << array<GLbyte,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glNormalStream3bvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalStream3dATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3dvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordsIndex << "[3] = " << array<GLdouble,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glNormalStream3dvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalStream3fATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3fvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordsIndex << "[3] = " << array<GLfloat,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glNormalStream3fvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3iATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalStream3iATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3ivATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _coordsIndex << "[3] = " << array<GLint,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glNormalStream3ivATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3sATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalStream3sATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalStream3svATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _coordsIndex << "[3] = " << array<GLshort,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glNormalStream3svATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexBlendEnvfATI(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnvfATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexBlendEnvfATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexBlendEnviATI(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexBlendEnviATI)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexBlendEnviATI(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1dATI(GLenum stream, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dATI)(stream, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream1dATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1dvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordsIndex << "[1] = " << array<GLdouble,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexStream1dvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1fATI(GLenum stream, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fATI)(stream, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream1fATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1fvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordsIndex << "[1] = " << array<GLfloat,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexStream1fvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1iATI(GLenum stream, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1iATI)(stream, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream1iATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1ivATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _coordsIndex << "[1] = " << array<GLint,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexStream1ivATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1sATI(GLenum stream, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1sATI)(stream, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream1sATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream1svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream1svATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _coordsIndex << "[1] = " << array<GLshort,const char * const>(coords,1,"","{ "," };\n",", ");
    _code << indent << "glVertexStream1svATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dATI)(stream, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream2dATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2dvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordsIndex << "[2] = " << array<GLdouble,const char * const>(coords,2,"","{ "," };\n",", ");
    _code << indent << "glVertexStream2dvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fATI)(stream, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream2fATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2fvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordsIndex << "[2] = " << array<GLfloat,const char * const>(coords,2,"","{ "," };\n",", ");
    _code << indent << "glVertexStream2fvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2iATI(GLenum stream, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2iATI)(stream, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream2iATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2ivATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _coordsIndex << "[2] = " << array<GLint,const char * const>(coords,2,"","{ "," };\n",", ");
    _code << indent << "glVertexStream2ivATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2sATI)(stream, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream2sATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream2svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream2svATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _coordsIndex << "[2] = " << array<GLshort,const char * const>(coords,2,"","{ "," };\n",", ");
    _code << indent << "glVertexStream2svATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream3dATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3dvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordsIndex << "[3] = " << array<GLdouble,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glVertexStream3dvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream3fATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3fvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordsIndex << "[3] = " << array<GLfloat,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glVertexStream3fvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3iATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream3iATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3ivATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _coordsIndex << "[3] = " << array<GLint,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glVertexStream3ivATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3sATI)(stream, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream3sATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream3svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream3svATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _coordsIndex << "[3] = " << array<GLshort,const char * const>(coords,3,"","{ "," };\n",", ");
    _code << indent << "glVertexStream3svATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dATI)(stream, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream4dATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4dvATI(GLenum stream, const GLdouble *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4dvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordsIndex << "[4] = " << array<GLdouble,const char * const>(coords,4,"","{ "," };\n",", ");
    _code << indent << "glVertexStream4dvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fATI)(stream, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream4fATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4fvATI(GLenum stream, const GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4fvATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordsIndex << "[4] = " << array<GLfloat,const char * const>(coords,4,"","{ "," };\n",", ");
    _code << indent << "glVertexStream4fvATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4iATI)(stream, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream4iATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4ivATI(GLenum stream, const GLint *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4ivATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _coordsIndex << "[4] = " << array<GLint,const char * const>(coords,4,"","{ "," };\n",", ");
    _code << indent << "glVertexStream4ivATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4sATI)(stream, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexStream4sATI(";
                   _code << toString(stream);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexStream4svATI(GLenum stream, const GLshort *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexStream4svATI)(stream, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordsIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _coordsIndex << "[4] = " << array<GLshort,const char * const>(coords,4,"","{ "," };\n",", ");
    _code << indent << "glVertexStream4svATI(";
                   _code << toString(stream);
    _code << ", "; _code << "i" << _coordsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetUniformBufferSizeEXT(GLuint program, GLint location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetUniformBufferSizeEXT)(program, location);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformBufferSizeEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLintptr REGAL_CALL code_glGetUniformOffsetEXT(GLuint program, GLint location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLintptr  _ret = _next->call(&_next->glGetUniformOffsetEXT)(program, location);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformOffsetEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformBufferEXT)(program, location, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniformBufferEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendColorEXT)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendColorEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateEXT)(modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparateEXT(";
                   _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateEXT)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparateEXT(";
                   _code << toString(sfactorRGB);
    _code << ", "; _code << toString(dfactorRGB);
    _code << ", "; _code << toString(sfactorAlpha);
    _code << ", "; _code << toString(dfactorAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorSubTableEXT)(target, start, count, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorSubTableEXT(";
                   _code << toString(target);
    _code << ", "; _code << start;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorSubTableEXT)(target, start, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyColorSubTableEXT(";
                   _code << toString(target);
    _code << ", "; _code << start;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLockArraysEXT(GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLockArraysEXT)(first, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLockArraysEXT(";
                   _code << first;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUnlockArraysEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUnlockArraysEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnlockArraysEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter1DEXT)(target, internalformat, width, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionFilter1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionFilter2DEXT)(target, internalformat, width, height, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionFilter2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfEXT)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameterfEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameteriEXT)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameteriEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glConvolutionParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glConvolutionParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter1DEXT)(target, internalformat, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyConvolutionFilter1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyConvolutionFilter2DEXT)(target, internalformat, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyConvolutionFilter2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionFilterEXT)(target, format, type, image);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionFilterEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << image;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetConvolutionParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetConvolutionParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSeparableFilterEXT)(target, format, type, row, column, span);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSeparableFilterEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << row;
    _code << ", "; _code << column;
    _code << ", "; _code << span;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSeparableFilter2DEXT)(target, internalformat, width, height, format, type, row, column);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSeparableFilter2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << row;
    _code << ", "; _code << column;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bEXT)(bx, by, bz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormal3bEXT(";
                   _code << bx;
    _code << ", "; _code << by;
    _code << ", "; _code << bz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3bvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glBinormal3bvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dEXT)(bx, by, bz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormal3dEXT(";
                   _code << bx;
    _code << ", "; _code << by;
    _code << ", "; _code << bz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3dvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glBinormal3dvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fEXT)(bx, by, bz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormal3fEXT(";
                   _code << bx;
    _code << ", "; _code << by;
    _code << ", "; _code << bz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3fvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glBinormal3fvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3iEXT(GLint bx, GLint by, GLint bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3iEXT)(bx, by, bz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormal3iEXT(";
                   _code << bx;
    _code << ", "; _code << by;
    _code << ", "; _code << bz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3ivEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glBinormal3ivEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3sEXT)(bx, by, bz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormal3sEXT(";
                   _code << bx;
    _code << ", "; _code << by;
    _code << ", "; _code << bz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormal3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormal3svEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glBinormal3svEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBinormalPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBinormalPointerEXT)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBinormalPointerEXT(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3bEXT)(tx, ty, tz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangent3bEXT(";
                   _code << tx;
    _code << ", "; _code << ty;
    _code << ", "; _code << tz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3bvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTangent3bvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3dEXT)(tx, ty, tz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangent3dEXT(";
                   _code << tx;
    _code << ", "; _code << ty;
    _code << ", "; _code << tz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3dvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTangent3dvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3fEXT)(tx, ty, tz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangent3fEXT(";
                   _code << tx;
    _code << ", "; _code << ty;
    _code << ", "; _code << tz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3fvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTangent3fvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3iEXT(GLint tx, GLint ty, GLint tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3iEXT)(tx, ty, tz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangent3iEXT(";
                   _code << tx;
    _code << ", "; _code << ty;
    _code << ", "; _code << tz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3ivEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTangent3ivEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3sEXT)(tx, ty, tz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangent3sEXT(";
                   _code << tx;
    _code << ", "; _code << ty;
    _code << ", "; _code << tz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangent3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangent3svEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTangent3svEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTangentPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTangentPointerEXT)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTangentPointerEXT(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage1DEXT)(target, level, internalformat, x, y, width, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexImage1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexImage2DEXT)(target, level, internalformat, x, y, width, height, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexImage2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage1DEXT)(target, level, xoffset, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage2DEXT)(target, level, xoffset, yoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage3DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCullParameterdvEXT(GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCullParameterdvEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glCullParameterdvEXT(";
                   _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCullParameterfvEXT(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCullParameterfvEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glCullParameterfvEXT(";
                   _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabelEXT)(type, object, bufSize, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectLabelEXT(";
                   _code << toString(type);
    _code << ", "; _code << object;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLabelObjectEXT)(type, object, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLabelObjectEXT(";
                   _code << toString(type);
    _code << ", "; _code << object;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInsertEventMarkerEXT)(length, marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInsertEventMarkerEXT(";
                   _code << length;
    _code << ", "; _code << boost::print::quote(marker,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopGroupMarkerEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopGroupMarkerEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopGroupMarkerEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushGroupMarkerEXT)(length, marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushGroupMarkerEXT(";
                   _code << length;
    _code << ", "; _code << boost::print::quote(marker,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsEXT)(zmin, zmax);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthBoundsEXT(";
                   _code << zmin;
    _code << ", "; _code << zmax;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindMultiTextureEXT)(texunit, target, texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindMultiTextureEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glCheckNamedFramebufferStatusEXT)(framebuffer, target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCheckNamedFramebufferStatusEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClientAttribDefaultEXT)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClientAttribDefaultEXT(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexImage3DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexSubImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexSubImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedMultiTexSubImage3DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage1DEXT)(texture, target, level, internalformat, width, border, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureImage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureSubImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureSubImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTextureSubImage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << bits;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage1DEXT)(texunit, target, level, internalformat, x, y, width, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyMultiTexImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexImage2DEXT)(texunit, target, level, internalformat, x, y, width, height, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyMultiTexImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage1DEXT)(texunit, target, level, xoffset, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyMultiTexSubImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyMultiTexSubImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyMultiTexSubImage3DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage1DEXT)(texture, target, level, internalformat, x, y, width, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureImage2DEXT)(texture, target, level, internalformat, x, y, width, height, border);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage1DEXT)(texture, target, level, xoffset, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureSubImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureSubImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTextureSubImage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateIndexedEXT)(array, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableClientStateIndexedEXT(";
                   _code << toString(array);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableClientStateiEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableClientStateiEXT)(array, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableClientStateiEXT(";
                   _code << toString(array);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayAttribEXT)(vaobj, array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVertexArrayAttribEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(array);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVertexArrayEXT)(vaobj, array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVertexArrayEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(array);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableClientStateIndexedEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateIndexedEXT)(array, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableClientStateIndexedEXT(";
                   _code << toString(array);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableClientStateiEXT(GLenum array, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableClientStateiEXT)(array, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableClientStateiEXT(";
                   _code << toString(array);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVertexArrayAttribEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayAttribEXT)(vaobj, array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVertexArrayAttribEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(array);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVertexArrayEXT)(vaobj, array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVertexArrayEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(array);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedNamedBufferRangeEXT)(buffer, offset, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushMappedNamedBufferRangeEXT(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBufferEXT)(framebuffer, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferDrawBufferEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferDrawBuffersEXT)(framebuffer, n, bufs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _bufsIndex = _context->codeInputNext++;
    _code << indent << "const GLenum i" << _bufsIndex << "[n] = " << array<GLenum,const char * const>(bufs,n,"","{ "," };\n",", ");
    _code << indent << "glFramebufferDrawBuffersEXT(";
                   _code << framebuffer;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _bufsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferReadBufferEXT)(framebuffer, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferReadBufferEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMultiTexMipmapEXT)(texunit, target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenerateMultiTexMipmapEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenerateTextureMipmapEXT)(texture, target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenerateTextureMipmapEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedMultiTexImageEXT)(texunit, target, lod, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCompressedMultiTexImageEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << lod;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, GLvoid *img)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCompressedTextureImageEXT)(texture, target, lod, img);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCompressedTextureImageEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << lod;
    _code << ", "; _code << img;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDoubleIndexedvEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDoubleIndexedvEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDoublei_vEXT(GLenum target, GLuint index, GLdouble *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDoublei_vEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDoublei_vEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFloatIndexedvEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFloatIndexedvEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFloati_vEXT(GLenum target, GLuint index, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFloati_vEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFloati_vEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferParameterivEXT)(framebuffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFramebufferParameterivEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvfvEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexEnvfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexEnvivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexEnvivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGendvEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexGendvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenfvEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexGenfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexGenivEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexGenivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexImageEXT)(texunit, target, level, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexImageEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterfvEXT)(texunit, target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexLevelParameterfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexLevelParameterivEXT)(texunit, target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexLevelParameterivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexParameterIivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterIuivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexParameterIuivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterfvEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexParameterfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultiTexParameterivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMultiTexParameterivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterivEXT)(buffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedBufferParameterivEXT(";
                   _code << buffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferPointervEXT)(buffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedBufferPointervEXT(";
                   _code << buffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferSubDataEXT)(buffer, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedBufferSubDataEXT(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedFramebufferAttachmentParameterivEXT)(framebuffer, attachment, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedFramebufferAttachmentParameterivEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIivEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetNamedProgramLocalParameterIivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterIuivEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetNamedProgramLocalParameterIuivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterdvEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetNamedProgramLocalParameterdvEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramLocalParameterfvEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetNamedProgramLocalParameterfvEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramStringEXT)(program, target, pname, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedProgramStringEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << string;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedProgramivEXT)(program, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetNamedProgramivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedRenderbufferParameterivEXT)(renderbuffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedRenderbufferParameterivEXT(";
                   _code << renderbuffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid **data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPointerIndexedvEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPointerIndexedvEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPointeri_vEXT(GLenum pname, GLuint index, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPointeri_vEXT)(pname, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPointeri_vEXT(";
                   _code << toString(pname);
    _code << ", "; _code << index;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureImageEXT)(texture, target, level, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureImageEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterfvEXT)(texture, target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureLevelParameterfvEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureLevelParameterivEXT)(texture, target, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureLevelParameterivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIivEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureParameterIivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterIuivEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureParameterIuivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterfvEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureParameterfvEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTextureParameterivEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureParameterivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegeri_vEXT)(vaobj, index, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexArrayIntegeri_vEXT(";
                   _code << vaobj;
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayIntegervEXT)(vaobj, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexArrayIntegervEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid **param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointeri_vEXT)(vaobj, index, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexArrayPointeri_vEXT(";
                   _code << vaobj;
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid **param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexArrayPointervEXT)(vaobj, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexArrayPointervEXT(";
                   _code << vaobj;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvoid *REGAL_CALL code_glMapNamedBufferEXT(GLuint buffer, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapNamedBufferEXT)(buffer, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapNamedBufferEXT(";
                   _code << buffer;
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLvoid *REGAL_CALL code_glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapNamedBufferRangeEXT)(buffer, offset, length, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapNamedBufferRangeEXT(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ", "; _code << access;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixFrustumEXT)(mode, left, right, bottom, top, zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixFrustumEXT(";
                   _code << toString(mode);
    _code << ", "; _code << left;
    _code << ", "; _code << right;
    _code << ", "; _code << bottom;
    _code << ", "; _code << top;
    _code << ", "; _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixLoadIdentityEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadIdentityEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixLoadIdentityEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposedEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixLoadTransposedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadTransposefEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixLoadTransposefEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixLoaddEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoaddEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixLoaddEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixLoadfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixLoadfEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixLoadfEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposedEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixMultTransposedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultTransposefEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixMultTransposefEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixMultdEXT(GLenum mode, const GLdouble *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultdEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _mIndex << "[16] = " << array<GLdouble,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixMultdEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixMultfEXT(GLenum mode, const GLfloat *m)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixMultfEXT)(mode, m);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _mIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _mIndex << "[16] = " << array<GLfloat,const char * const>(m,16,"","{ "," };\n",", ");
    _code << indent << "glMatrixMultfEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _mIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixOrthoEXT)(mode, left, right, bottom, top, zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixOrthoEXT(";
                   _code << toString(mode);
    _code << ", "; _code << left;
    _code << ", "; _code << right;
    _code << ", "; _code << bottom;
    _code << ", "; _code << top;
    _code << ", "; _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixPopEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixPopEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixPopEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixPushEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixPushEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixPushEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatedEXT)(mode, angle, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixRotatedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << angle;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixRotatefEXT)(mode, angle, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixRotatefEXT(";
                   _code << toString(mode);
    _code << ", "; _code << angle;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixScaledEXT)(mode, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixScaledEXT(";
                   _code << toString(mode);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixScalefEXT)(mode, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixScalefEXT(";
                   _code << toString(mode);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatedEXT)(mode, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixTranslatedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixTranslatefEXT)(mode, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixTranslatefEXT(";
                   _code << toString(mode);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexBufferEXT)(texunit, target, internalformat, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexBufferEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoordPointerEXT)(texunit, size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoordPointerEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexEnvfEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvfvEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexEnvfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnviEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexEnviEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexEnvivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexEnvivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendEXT)(texunit, coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGendEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGendvEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGendvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfEXT)(texunit, coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGenfEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenfvEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGenfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGeniEXT)(texunit, coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGeniEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexGenivEXT)(texunit, coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexGenivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage1DEXT)(texunit, target, level, internalformat, width, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalformat;
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage2DEXT)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalformat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexImage3DEXT)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexImage3DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalformat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameterIivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterIuivEXT)(texunit, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameterIuivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameterfEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterfvEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameterfvEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* param = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameteriEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameteriEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexParameterivEXT)(texunit, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexParameterivEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* param = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexRenderbufferEXT)(texunit, target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexRenderbufferEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage1DEXT)(texunit, target, level, xoffset, width, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexSubImage1DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage2DEXT)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexSubImage2DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexSubImage3DEXT)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexSubImage3DEXT(";
                   _code << toString(texunit);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferDataEXT)(buffer, size, data, usage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedBufferDataEXT(";
                   _code << buffer;
    _code << ", "; _code << size;
    _code << ", "; _code << data;
    _code << ", "; _code << toString(usage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedBufferSubDataEXT)(buffer, offset, size, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedBufferSubDataEXT(";
                   _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedCopyBufferSubDataEXT)(readBuffer, writeBuffer, readOffset, writeOffset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedCopyBufferSubDataEXT(";
                   _code << readBuffer;
    _code << ", "; _code << writeBuffer;
    _code << ", "; _code << readOffset;
    _code << ", "; _code << writeOffset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferRenderbufferEXT)(framebuffer, attachment, renderbuffertarget, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferRenderbufferEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(renderbuffertarget);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture1DEXT)(framebuffer, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTexture1DEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture2DEXT)(framebuffer, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTexture2DEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTexture3DEXT)(framebuffer, attachment, textarget, texture, level, zoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTexture3DEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << zoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureEXT)(framebuffer, attachment, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTextureEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureFaceEXT)(framebuffer, attachment, texture, level, face);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTextureFaceEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(face);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedFramebufferTextureLayerEXT)(framebuffer, attachment, texture, level, layer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedFramebufferTextureLayerEXT(";
                   _code << framebuffer;
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << layer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dEXT)(program, target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedProgramLocalParameter4dEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4dvEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _paramsIndex << "[4] = " << array<GLdouble,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParameter4dvEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fEXT)(program, target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedProgramLocalParameter4fEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameter4fvEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[4] = " << array<GLfloat,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParameter4fvEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4iEXT)(program, target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedProgramLocalParameterI4iEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4ivEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[4] = " << array<GLint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParameterI4ivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uiEXT)(program, target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedProgramLocalParameterI4uiEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameterI4uivEXT)(program, target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[4] = " << array<GLuint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParameterI4uivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParameters4fvEXT)(program, target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[count * 4] = " << array<GLfloat,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParameters4fvEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4ivEXT)(program, target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[count * 4] = " << array<GLint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParametersI4ivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramLocalParametersI4uivEXT)(program, target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[count * 4] = " << array<GLuint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glNamedProgramLocalParametersI4uivEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedProgramStringEXT)(program, target, format, len, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedProgramStringEXT(";
                   _code << program;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << len;
    _code << ", "; _code << string;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageEXT)(renderbuffer, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedRenderbufferStorageEXT(";
                   _code << renderbuffer;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleCoverageEXT)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedRenderbufferStorageMultisampleCoverageEXT(";
                   _code << renderbuffer;
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNamedRenderbufferStorageMultisampleEXT)(renderbuffer, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNamedRenderbufferStorageMultisampleEXT(";
                   _code << renderbuffer;
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dEXT)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1dEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1dvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count] = " << array<GLdouble,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fEXT)(program, location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1fEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1fvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count] = " << array<GLfloat,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1iEXT)(program, location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1iEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count] = " << array<GLint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1ivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uiEXT)(program, location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1uiEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1uivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count] = " << array<GLuint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1uivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dEXT)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2dEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2dvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 2] = " << array<GLdouble,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fEXT)(program, location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2fEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2fvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 2] = " << array<GLfloat,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2iEXT)(program, location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2iEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 2] = " << array<GLint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2ivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uiEXT)(program, location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2uiEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2uivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 2] = " << array<GLuint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2uivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dEXT)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3dEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3dvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 3] = " << array<GLdouble,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fEXT)(program, location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3fEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3fvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 3] = " << array<GLfloat,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3iEXT)(program, location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3iEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 3] = " << array<GLint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3ivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uiEXT)(program, location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3uiEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3uivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 3] = " << array<GLuint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3uivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dEXT)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4dEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4dvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 4] = " << array<GLdouble,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fEXT)(program, location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4fEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4fvEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 4] = " << array<GLfloat,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4iEXT)(program, location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4iEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _valueIndex << "[count * 4] = " << array<GLint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4ivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uiEXT)(program, location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4uiEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4uivEXT)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 4] = " << array<GLuint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4uivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 4] = " << array<GLdouble,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 4] = " << array<GLfloat,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 6] = " << array<GLdouble,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x3dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x3fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 6] = " << array<GLfloat,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x3fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 8] = " << array<GLdouble,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x4dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix2x4fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 8] = " << array<GLfloat,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix2x4fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 9] = " << array<GLdouble,const char * const>(value,count * 9,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 9] = " << array<GLfloat,const char * const>(value,count * 9,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 6] = " << array<GLdouble,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x2dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x2fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 6] = " << array<GLfloat,const char * const>(value,count * 6,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x2fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 12] = " << array<GLdouble,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x4dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix3x4fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 12] = " << array<GLfloat,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix3x4fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 16] = " << array<GLdouble,const char * const>(value,count * 16,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 16] = " << array<GLfloat,const char * const>(value,count * 16,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 8] = " << array<GLdouble,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x2dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x2fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 8] = " << array<GLfloat,const char * const>(value,count * 8,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x2fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3dvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _valueIndex << "[count * 12] = " << array<GLdouble,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x3dvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformMatrix4x3fvEXT)(program, location, count, transpose, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _valueIndex << "[count * 12] = " << array<GLfloat,const char * const>(value,count * 12,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformMatrix4x3fvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(transpose);
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushClientAttribDefaultEXT(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushClientAttribDefaultEXT)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushClientAttribDefaultEXT(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureBufferEXT)(texture, target, internalformat, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureBufferEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage1DEXT)(texture, target, level, internalformat, width, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DEXT)(texture, target, level, internalformat, width, height, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DEXT)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIivEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameterIivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterIuivEXT)(texture, target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameterIuivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfEXT)(texture, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameterfEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterfvEXT)(texture, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameterfvEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* param = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameteriEXT)(texture, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameteriEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureParameterivEXT)(texture, target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureParameterivEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "/* param = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureRenderbufferEXT)(texture, target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureRenderbufferEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage1DEXT)(texture, target, level, xoffset, width, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureSubImage1DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage2DEXT)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureSubImage2DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureSubImage3DEXT)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureSubImage3DEXT(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glUnmapNamedBufferEXT(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glUnmapNamedBufferEXT)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnmapNamedBufferEXT(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayColorOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayEdgeFlagOffsetEXT)(vaobj, buffer, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayEdgeFlagOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayFogCoordOffsetEXT)(vaobj, buffer, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayFogCoordOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayIndexOffsetEXT)(vaobj, buffer, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayIndexOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayMultiTexCoordOffsetEXT)(vaobj, buffer, texunit, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayMultiTexCoordOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << toString(texunit);
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayNormalOffsetEXT)(vaobj, buffer, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayNormalOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArraySecondaryColorOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArraySecondaryColorOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayTexCoordOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayTexCoordOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribIOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayVertexAttribIOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribOffsetEXT)(vaobj, buffer, index, size, type, normalized, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayVertexAttribOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, const GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexOffsetEXT)(vaobj, buffer, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayVertexOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDiscardFramebufferEXT)(target, numAttachments, attachments);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDiscardFramebufferEXT(";
                   _code << toString(target);
    _code << ", "; _code << numAttachments;
    _code << ", "; _code << attachments;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorMaskIndexedEXT(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorMaskIndexedEXT)(buf, r, g, b, a);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorMaskIndexedEXT(";
                   _code << buf;
    _code << ", "; _code << toString(r);
    _code << ", "; _code << toString(g);
    _code << ", "; _code << toString(b);
    _code << ", "; _code << toString(a);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableIndexedEXT)(target, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableIndexedEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableIndexedEXT)(target, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableIndexedEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBooleanIndexedvEXT(GLenum value, GLuint index, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBooleanIndexedvEXT)(value, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBooleanIndexedvEXT(";
                   _code << toString(value);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegerIndexedvEXT(GLenum value, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerIndexedvEXT)(value, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegerIndexedvEXT(";
                   _code << toString(value);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsEnabledIndexedEXT(GLenum target, GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsEnabledIndexedEXT)(target, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsEnabledIndexedEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysInstancedEXT)(mode, start, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysInstancedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawElementsInstancedEXT)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawElementsInstancedEXT(";
                   _code << toString(mode);
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawRangeElementsEXT)(mode, start, end, count, type, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawRangeElementsEXT(";
                   _code << toString(mode);
    _code << ", "; _code << start;
    _code << ", "; _code << end;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerEXT)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordPointerEXT(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoorddEXT(GLdouble coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddEXT)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoorddEXT(";
                   _code << coord;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoorddvEXT(const GLdouble *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoorddvEXT)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _coordIndex << "[1] = " << array<GLdouble,const char * const>(coord,1,"","{ "," };\n",", ");
    _code << indent << "glFogCoorddvEXT(";
                   _code << "i" << _coordIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordfEXT(GLfloat coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfEXT)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordfEXT(";
                   _code << coord;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordfvEXT(const GLfloat *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordfvEXT)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _coordIndex << "[1] = " << array<GLfloat,const char * const>(coord,1,"","{ "," };\n",", ");
    _code << indent << "glFogCoordfvEXT(";
                   _code << "i" << _coordIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentColorMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialEXT)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentColorMaterialEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelfEXT(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfEXT)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelfEXT(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelfvEXT(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelfvEXT(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModeliEXT(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliEXT)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModeliEXT(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelivEXT(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelivEXT(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightfEXT(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfEXT)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightfEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvEXT)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightfvEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightiEXT(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiEXT)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightiEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivEXT)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightivEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialfEXT(GLenum face, GLenum pname, const GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfEXT)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialfEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvEXT)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialfvEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialiEXT(GLenum face, GLenum pname, const GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiEXT)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialiEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivEXT)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialivEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentLightfvEXT(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvEXT)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentLightfvEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentLightivEXT(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivEXT)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentLightivEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentMaterialfvEXT(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvEXT)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentMaterialfvEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentMaterialivEXT(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivEXT)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentMaterialivEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightEnviEXT(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightEnviEXT)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightEnviEXT(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlitFramebufferEXT)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlitFramebufferEXT(";
                   _code << srcX0;
    _code << ", "; _code << srcY0;
    _code << ", "; _code << srcX1;
    _code << ", "; _code << srcY1;
    _code << ", "; _code << dstX0;
    _code << ", "; _code << dstY0;
    _code << ", "; _code << dstX1;
    _code << ", "; _code << dstY1;
    _code << ", "; _code << mask;
    _code << ", "; _code << toString(filter);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleEXT)(target, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisampleEXT(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferEXT)(target, framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFramebufferEXT(";
                   _code << toString(target);
    _code << ", "; _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferEXT)(target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindRenderbufferEXT(";
                   _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glCheckFramebufferStatusEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glCheckFramebufferStatusEXT)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCheckFramebufferStatusEXT(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersEXT)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _framebuffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _framebuffersIndex << "[n] = " << array<GLuint,const char * const>(framebuffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteFramebuffersEXT(";
                   _code << n;
    _code << ", "; _code << "i" << _framebuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersEXT)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _renderbuffersIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _renderbuffersIndex << "[n] = " << array<GLuint,const char * const>(renderbuffers,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteRenderbuffersEXT(";
                   _code << n;
    _code << ", "; _code << "i" << _renderbuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferEXT)(target, attachment, renderbuffertarget, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferRenderbufferEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(renderbuffertarget);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture1DEXT)(target, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DEXT)(target, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DEXT)(target, attachment, textarget, texture, level, zoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture3DEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << zoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersEXT)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _framebuffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _framebuffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenFramebuffersEXT(";
                   _code << n;
    _code << ", "; _code << "o" << _framebuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersEXT)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _renderbuffersIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _renderbuffersIndex << "[" << (n) << "];\n";
    _code << indent << "glGenRenderbuffersEXT(";
                   _code << n;
    _code << ", "; _code << "o" << _renderbuffersIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenerateMipmapEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapEXT)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenerateMipmapEXT(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivEXT)(target, attachment, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFramebufferAttachmentParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetRenderbufferParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsFramebufferEXT(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsFramebufferEXT)(framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsFramebufferEXT(";
                   _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsRenderbufferEXT(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsRenderbufferEXT)(renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsRenderbufferEXT(";
                   _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageEXT)(target, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureEXT)(target, attachment, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureFaceEXT)(target, attachment, texture, level, face);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureFaceEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(face);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameteriEXT)(program, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramParameteriEXT(";
                   _code << program;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameters4fvEXT)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[count * 4] = " << array<GLfloat,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParameters4fvEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameters4fvEXT)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[count * 4] = " << array<GLfloat,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParameters4fvEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFragDataLocationEXT)(program, color, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFragDataLocationEXT(";
                   _code << program;
    _code << ", "; _code << color;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetFragDataLocationEXT(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetFragDataLocationEXT)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragDataLocationEXT(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformuivEXT)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformuivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIivEXT)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribIivEXT(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribIuivEXT)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribIuivEXT(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1uiEXT(GLint location, GLuint v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uiEXT)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1uiEXT(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1uivEXT)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count] = " << array<GLuint,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1uivEXT(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uiEXT)(location, v0, v1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2uiEXT(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2uivEXT)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 2] = " << array<GLuint,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glUniform2uivEXT(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uiEXT)(location, v0, v1, v2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3uiEXT(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3uivEXT)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 3] = " << array<GLuint,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glUniform3uivEXT(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uiEXT)(location, v0, v1, v2, v3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4uiEXT(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << v3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4uivEXT)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _valueIndex << "[count * 4] = " << array<GLuint,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glUniform4uivEXT(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1iEXT(GLuint index, GLint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1iEXT)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI1iEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1ivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[1] = " << array<GLint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI1ivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1uiEXT(GLuint index, GLuint x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uiEXT)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI1uiEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI1uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI1uivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[1] = " << array<GLuint,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI1uivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2iEXT)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI2iEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2ivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI2ivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uiEXT)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI2uiEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI2uivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[2] = " << array<GLuint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI2uivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3iEXT)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI3iEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3ivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI3ivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uiEXT)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI3uiEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI3uivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[3] = " << array<GLuint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI3uivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4bvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[4] = " << array<GLbyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4bvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4iEXT)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI4iEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4ivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4svEXT(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4svEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4svEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4ubvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4ubvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uiEXT)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribI4uiEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4uivEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[4] = " << array<GLuint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4uivEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribI4usvEXT(GLuint index, const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribI4usvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[4] = " << array<GLushort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribI4usvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIPointerEXT)(index, size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribIPointerEXT(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramEXT)(target, reset, format, type, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogramEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogramParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetHistogramParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetHistogramParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxEXT)(target, reset, format, type, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmaxEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(reset);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmaxParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMinmaxParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMinmaxParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glHistogramEXT)(target, width, internalformat, sink);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glHistogramEXT(";
                   _code << toString(target);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(sink);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMinmaxEXT)(target, internalformat, sink);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMinmaxEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << toString(sink);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResetHistogramEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResetHistogramEXT)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResetHistogramEXT(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResetMinmaxEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResetMinmaxEXT)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResetMinmaxEXT(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexFuncEXT(GLenum func, GLfloat ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexFuncEXT)(func, ref);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexFuncEXT(";
                   _code << toString(func);
    _code << ", "; _code << ref;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexMaterialEXT)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexMaterialEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glApplyTextureEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glApplyTextureEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glApplyTextureEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureLightEXT(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureLightEXT)(pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureLightEXT(";
                   _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureMaterialEXT(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureMaterialEXT)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureMaterialEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushMappedBufferRangeEXT)(target, offset, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushMappedBufferRangeEXT(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvoid *REGAL_CALL code_glMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapBufferRangeEXT)(target, offset, length, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapBufferRangeEXT(";
                   _code << toString(target);
    _code << ", "; _code << offset;
    _code << ", "; _code << length;
    _code << ", "; _code << access;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawArraysEXT)(mode, first, count, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _firstIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _firstIndex << "[primcount] = " << array<GLint,const char * const>(first,primcount,"","{ "," };\n",", ");
    size_t _countIndex = _context->codeInputNext++;
    _code << indent << "const GLsizei i" << _countIndex << "[primcount] = " << array<GLsizei,const char * const>(count,primcount,"","{ "," };\n",", ");
    _code << indent << "glMultiDrawArraysEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _firstIndex;
    _code << ", "; _code << "i" << _countIndex;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiDrawElementsEXT(GLenum mode, GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiDrawElementsEXT)(mode, count, type, indices, primcount);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _countIndex = _context->codeInputNext++;
    _code << indent << "const GLsizei i" << _countIndex << "[primcount] = " << array<GLsizei,const char * const>(count,primcount,"","{ "," };\n",", ");
    _code << indent << "glMultiDrawElementsEXT(";
                   _code << toString(mode);
    _code << ", "; _code << "i" << _countIndex;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleMaskEXT(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskEXT)(value, invert);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleMaskEXT(";
                   _code << value;
    _code << ", "; _code << toString(invert);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplePatternEXT(GLenum pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternEXT)(pattern);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplePatternEXT(";
                   _code << toString(pattern);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleEXT)(target, attachment, textarget, texture, level, samples);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture2DMultisampleEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << samples;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBuffersIndexedEXT(GLint n, const GLenum *location, const GLint *indices)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersIndexedEXT)(n, location, indices);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawBuffersIndexedEXT(";
                   _code << n;
    _code << ", "; _code << location;
    _code << ", "; _code << indices;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegeri_vEXT(GLenum target, GLuint index, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegeri_vEXT)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegeri_vEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadBufferIndexedEXT(GLenum src, GLint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferIndexedEXT)(src, index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadBufferIndexedEXT(";
                   _code << toString(src);
    _code << ", "; _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginQueryEXT(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginQueryEXT)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginQueryEXT(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteQueriesEXT(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteQueriesEXT)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteQueriesEXT(";
                   _code << n;
    _code << ", "; _code << ids;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndQueryEXT(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndQueryEXT)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndQueryEXT(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenQueriesEXT(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenQueriesEXT)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenQueriesEXT(";
                   _code << n;
    _code << ", "; _code << ids;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectuivEXT)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectuivEXT(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsQueryEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsQueryEXT)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsQueryEXT(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableEXT)(target, internalFormat, width, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalFormat);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableEXT(GLenum target, GLenum format, GLenum type, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableEXT)(target, format, type, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelTransformParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTransformParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelTransformParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransformParameterfEXT(GLenum target, GLenum pname, const GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfEXT)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTransformParameterfEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterfvEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[1] = " << array<GLfloat,const char * const>(params,1,"","{ "," };\n",", ");
    _code << indent << "glPixelTransformParameterfvEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransformParameteriEXT(GLenum target, GLenum pname, const GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameteriEXT)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTransformParameteriEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTransformParameterivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[1] = " << array<GLint,const char * const>(params,1,"","{ "," };\n",", ");
    _code << indent << "glPixelTransformParameterivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfEXT(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfEXT)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfEXT(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfvEXT(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfvEXT(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPolygonOffsetEXT)(factor, bias);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPolygonOffsetEXT(";
                   _code << factor;
    _code << ", "; _code << bias;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProvokingVertexEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProvokingVertexEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProvokingVertexEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformfvEXT)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformfvEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetnUniformivEXT)(program, location, bufSize, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetnUniformivEXT(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadnPixelsEXT)(x, y, width, height, format, type, bufSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadnPixelsEXT(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginSceneEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginSceneEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginSceneEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndSceneEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndSceneEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndSceneEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3bEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3bvEXT(const GLbyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3bvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLbyte i" << _vIndex << "[3] = " << array<GLbyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3bvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3dEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3dvEXT(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3dvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3dvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3fEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3fvEXT(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3fvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3fvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3iEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3iEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ivEXT(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ivEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3ivEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3sEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3sEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3svEXT(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3svEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3svEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3ubEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3ubvEXT(const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3ubvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[3] = " << array<GLubyte,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3ubvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uiEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3uiEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3uivEXT(const GLuint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3uivEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _vIndex << "[3] = " << array<GLuint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3uivEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usEXT)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3usEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3usvEXT(const GLushort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3usvEXT)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLushort i" << _vIndex << "[3] = " << array<GLushort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3usvEXT(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerEXT)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColorPointerEXT(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveProgramEXT(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveProgramEXT)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveProgramEXT(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glCreateShaderProgramEXT(GLenum type, const GLchar *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glCreateShaderProgramEXT)(type, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCreateShaderProgramEXT(";
                   _code << toString(type);
    _code << ", "; _code << boost::print::quote(string,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glUseShaderProgramEXT(GLenum type, GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUseShaderProgramEXT)(type, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUseShaderProgramEXT(";
                   _code << toString(type);
    _code << ", "; _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindImageTextureEXT)(index, texture, level, layered, layer, access, format);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindImageTextureEXT(";
                   _code << index;
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(layered);
    _code << ", "; _code << layer;
    _code << ", "; _code << toString(access);
    _code << ", "; _code << format;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMemoryBarrierEXT(GLbitfield barriers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMemoryBarrierEXT)(barriers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMemoryBarrierEXT(";
                   _code << barriers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilClearTagEXT)(stencilTagBits, stencilClearTag);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilClearTagEXT(";
                   _code << stencilTagBits;
    _code << ", "; _code << stencilClearTag;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveStencilFaceEXT(GLenum face)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveStencilFaceEXT)(face);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveStencilFaceEXT(";
                   _code << toString(face);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage1DEXT)(target, level, xoffset, width, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, 0, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, 0, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage2DEXT)(target, level, xoffset, yoffset, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, 0, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, 0, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DEXT)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, depth, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, depth, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexSubImage3DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DEXT)(target, level, internalformat, width, height, depth, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _pixelsIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _pixelsIndex << "[" << helper::size::pixelImage(width, height, depth, format, type, 0, target) << "] = " << array<GLubyte,const char * const>(static_cast<const GLubyte *>(pixels),helper::size::pixelImage(width, height, depth, format, type, 0, target),"","{ "," }",",") << ";\n";
    _code << indent << "glTexImage3DEXT(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << "i" << _pixelsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTextureLayerEXT)(target, attachment, texture, level, layer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTextureLayerEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << layer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexBufferEXT)(target, internalformat, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexBufferEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearColorIiEXT)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearColorIiEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearColorIuiEXT)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearColorIuiEXT(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterIivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexParameterIuivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexParameterIuivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterIivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexParameterIuivEXT)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexParameterIuivEXT(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << GLTexParameterToString(pname,params);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glAreTexturesResidentEXT)(n, textures, residences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    size_t _residencesIndex = _context->codeOutputNext++;
    _code << indent << "GLboolean o" << _residencesIndex << "[" << (n) << "];\n";
    _code << indent << "glAreTexturesResidentEXT(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ", "; _code << "o" << _residencesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBindTextureEXT(GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindTextureEXT)(target, texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTextureEXT(";
                   _code << toString(target);
    _code << ", "; _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteTexturesEXT(GLsizei n, const GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTexturesEXT)(n, textures);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteTexturesEXT(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenTexturesEXT(GLsizei n, GLuint *textures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenTexturesEXT)(n, textures);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _texturesIndex << "[" << (n) << "];\n";
    _code << indent << "glGenTexturesEXT(";
                   _code << n;
    _code << ", "; _code << "o" << _texturesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsTextureEXT(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsTextureEXT)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsTextureEXT(";
                   _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPrioritizeTexturesEXT)(n, textures, priorities);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _texturesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _texturesIndex << "[n] = " << array<GLuint,const char * const>(textures,n,"","{ "," };\n",", ");
    size_t _prioritiesIndex = _context->codeInputNext++;
    _code << indent << "const GLclampf i" << _prioritiesIndex << "[n] = " << array<GLclampf,const char * const>(priorities,n,"","{ "," };\n",", ");
    _code << indent << "glPrioritizeTexturesEXT(";
                   _code << n;
    _code << ", "; _code << "i" << _texturesIndex;
    _code << ", "; _code << "i" << _prioritiesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureNormalEXT(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureNormalEXT)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureNormalEXT(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage1DEXT)(target, levels, internalformat, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage1DEXT(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage2DEXT)(target, levels, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage2DEXT(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexStorage3DEXT)(target, levels, internalformat, width, height, depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexStorage3DEXT(";
                   _code << toString(target);
    _code << ", "; _code << levels;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjecti64vEXT)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjecti64vEXT(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetQueryObjectui64vEXT)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetQueryObjectui64vEXT(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginTransformFeedbackEXT(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackEXT)(primitiveMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginTransformFeedbackEXT(";
                   _code << toString(primitiveMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseEXT)(target, index, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferBaseEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetEXT)(target, index, buffer, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferOffsetEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeEXT)(target, index, buffer, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferRangeEXT(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndTransformFeedbackEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndTransformFeedbackEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingEXT)(program, index, bufSize, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetTransformFeedbackVaryingEXT(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar **varyings, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsEXT)(program, count, varyings, bufferMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTransformFeedbackVaryingsEXT(";
                   _code << program;
    _code << ", "; _code << count;
    _code << ", "; _code << "/* varyings = ?? */";
    _code << ", "; _code << toString(bufferMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glArrayElementEXT(GLint i)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glArrayElementEXT)(i);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glArrayElementEXT(";
                   _code << i;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorPointerEXT)(size, type, stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorPointerEXT(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawArraysEXT)(mode, first, count);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawArraysEXT(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerEXT)(stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEdgeFlagPointerEXT(";
                   _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPointervEXT(GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPointervEXT)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPointervEXT(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerEXT)(type, stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexPointerEXT(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerEXT)(type, stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalPointerEXT(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerEXT)(size, type, stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordPointerEXT(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerEXT)(size, type, stride, count, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexPointerEXT(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << count;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLdvEXT)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribLdvEXT(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayVertexAttribLOffsetEXT)(vaobj, buffer, index, size, type, stride, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayVertexAttribLOffsetEXT(";
                   _code << vaobj;
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1dEXT(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dEXT)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL1dEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1dvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL1dvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dEXT)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL2dEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2dvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL2dvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dEXT)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL3dEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3dvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL3dvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dEXT)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL4dEXT(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4dvEXT)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL4dvEXT(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLPointerEXT)(index, size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribLPointerEXT(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginVertexShaderEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginVertexShaderEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginVertexShaderEXT();\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glBindLightParameterEXT(GLenum light, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBindLightParameterEXT)(light, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindLightParameterEXT(";
                   _code << toString(light);
    _code << ", "; _code << toString(value);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glBindMaterialParameterEXT(GLenum face, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBindMaterialParameterEXT)(face, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindMaterialParameterEXT(";
                   _code << toString(face);
    _code << ", "; _code << toString(value);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glBindParameterEXT(GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBindParameterEXT)(value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindParameterEXT(";
                   _code << toString(value);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBindTexGenParameterEXT)(unit, coord, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTexGenParameterEXT(";
                   _code << toString(unit);
    _code << ", "; _code << toString(coord);
    _code << ", "; _code << toString(value);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBindTextureUnitParameterEXT)(unit, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTextureUnitParameterEXT(";
                   _code << toString(unit);
    _code << ", "; _code << toString(value);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBindVertexShaderEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexShaderEXT)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVertexShaderEXT(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteVertexShaderEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexShaderEXT)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteVertexShaderEXT(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableVariantClientStateEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableVariantClientStateEXT)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableVariantClientStateEXT(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableVariantClientStateEXT(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableVariantClientStateEXT)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableVariantClientStateEXT(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndVertexShaderEXT(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndVertexShaderEXT)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndVertexShaderEXT();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtractComponentEXT)(res, src, num);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtractComponentEXT(";
                   _code << res;
    _code << ", "; _code << src;
    _code << ", "; _code << num;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenSymbolsEXT)(datatype, storagetype, range, components);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenSymbolsEXT(";
                   _code << toString(datatype);
    _code << ", "; _code << toString(storagetype);
    _code << ", "; _code << toString(range);
    _code << ", "; _code << components;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glGenVertexShadersEXT(GLuint range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenVertexShadersEXT)(range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenVertexShadersEXT(";
                   _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantBooleanvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInvariantBooleanvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantFloatvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInvariantFloatvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetInvariantIntegervEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInvariantIntegervEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantBooleanvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetLocalConstantBooleanvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantFloatvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetLocalConstantFloatvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetLocalConstantIntegervEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetLocalConstantIntegervEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantBooleanvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVariantBooleanvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantFloatvEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVariantFloatvEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantIntegervEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVariantIntegervEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVariantPointervEXT(GLuint id, GLenum value, GLvoid **data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVariantPointervEXT)(id, value, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVariantPointervEXT(";
                   _code << id;
    _code << ", "; _code << toString(value);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInsertComponentEXT)(res, src, num);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInsertComponentEXT(";
                   _code << res;
    _code << ", "; _code << src;
    _code << ", "; _code << num;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsVariantEnabledEXT(GLuint id, GLenum cap)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsVariantEnabledEXT)(id, cap);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsVariantEnabledEXT(";
                   _code << id;
    _code << ", "; _code << toString(cap);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glSetInvariantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetInvariantEXT)(id, type, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSetInvariantEXT(";
                   _code << id;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSetLocalConstantEXT(GLuint id, GLenum type, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetLocalConstantEXT)(id, type, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSetLocalConstantEXT(";
                   _code << id;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp1EXT)(op, res, arg1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glShaderOp1EXT(";
                   _code << toString(op);
    _code << ", "; _code << res;
    _code << ", "; _code << arg1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp2EXT)(op, res, arg1, arg2);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glShaderOp2EXT(";
                   _code << toString(op);
    _code << ", "; _code << res;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg2;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glShaderOp3EXT)(op, res, arg1, arg2, arg3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glShaderOp3EXT(";
                   _code << toString(op);
    _code << ", "; _code << res;
    _code << ", "; _code << arg1;
    _code << ", "; _code << arg2;
    _code << ", "; _code << arg3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSwizzleEXT)(res, in, outX, outY, outZ, outW);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSwizzleEXT(";
                   _code << res;
    _code << ", "; _code << in;
    _code << ", "; _code << toString(outX);
    _code << ", "; _code << toString(outY);
    _code << ", "; _code << toString(outZ);
    _code << ", "; _code << toString(outW);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantPointerEXT)(id, type, stride, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantPointerEXT(";
                   _code << id;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantbvEXT(GLuint id, const GLbyte *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantbvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantbvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantdvEXT(GLuint id, const GLdouble *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantdvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantdvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantfvEXT(GLuint id, const GLfloat *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantfvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantfvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantivEXT(GLuint id, const GLint *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantivEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantivEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantsvEXT(GLuint id, const GLshort *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantsvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantsvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantubvEXT(GLuint id, const GLubyte *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantubvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantubvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantuivEXT(GLuint id, const GLuint *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantuivEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantuivEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVariantusvEXT(GLuint id, const GLushort *addr)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVariantusvEXT)(id, addr);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVariantusvEXT(";
                   _code << id;
    _code << ", "; _code << addr;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWriteMaskEXT)(res, in, outX, outY, outZ, outW);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWriteMaskEXT(";
                   _code << res;
    _code << ", "; _code << in;
    _code << ", "; _code << toString(outX);
    _code << ", "; _code << toString(outY);
    _code << ", "; _code << toString(outZ);
    _code << ", "; _code << toString(outW);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightPointerEXT)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexWeightPointerEXT(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexWeightfEXT(GLfloat weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfEXT)(weight);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexWeightfEXT(";
                   _code << weight;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexWeightfvEXT(const GLfloat *weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeightfvEXT)(weight);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _weightIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _weightIndex << "[1] = " << array<GLfloat,const char * const>(weight,1,"","{ "," };\n",", ");
    _code << indent << "glVertexWeightfvEXT(";
                   _code << "i" << _weightIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLsync REGAL_CALL code_glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLsync  _ret = _next->call(&_next->glImportSyncEXT)(external_sync_type, external_sync, flags);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glImportSyncEXT(";
                   _code << toString(external_sync_type);
    _code << ", "; _code << external_sync;
    _code << ", "; _code << flags;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glFrameTerminatorGREMEDY(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFrameTerminatorGREMEDY)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFrameTerminatorGREMEDY();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStringMarkerGREMEDY)(len, string);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStringMarkerGREMEDY(";
                   _code << len;
    _code << ", "; _code << string;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterfvHP)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetImageTransformParameterfvHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetImageTransformParameterivHP)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetImageTransformParameterivHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfHP)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glImageTransformParameterfHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterfvHP)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glImageTransformParameterfvHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameteriHP)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glImageTransformParameteriHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glImageTransformParameterivHP)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glImageTransformParameterivHP(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawArraysIBM)(mode, first, count, primcount, modestride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiModeDrawArraysIBM(";
                   _code << mode;
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << primcount;
    _code << ", "; _code << modestride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiModeDrawElementsIBM)(mode, count, type, indices, primcount, modestride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiModeDrawElementsIBM(";
                   _code << mode;
    _code << ", "; _code << count;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << indices;
    _code << ", "; _code << primcount;
    _code << ", "; _code << modestride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorPointerListIBM)(size, type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorPointerListIBM(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagPointerListIBM)(stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEdgeFlagPointerListIBM(";
                   _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordPointerListIBM)(type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordPointerListIBM(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexPointerListIBM)(type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexPointerListIBM(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalPointerListIBM(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointerListIBM)(type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalPointerListIBM(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorPointerListIBM)(size, type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColorPointerListIBM(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointerListIBM)(size, type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordPointerListIBM(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointerListIBM)(size, type, stride, pointer, ptrstride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexPointerListIBM(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ", "; _code << ptrstride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DMultisampleIMG)(target, attachment, textarget, texture, level, samples);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture2DMultisampleIMG(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << samples;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleIMG)(target, samples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisampleIMG(";
                   _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateINGR)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparateINGR(";
                   _code << toString(sfactorRGB);
    _code << ", "; _code << toString(dfactorRGB);
    _code << ", "; _code << toString(sfactorAlpha);
    _code << ", "; _code << toString(dfactorAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorPointervINTEL)(size, type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorPointervINTEL(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalPointervINTEL(GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalPointervINTEL)(type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalPointervINTEL(";
                   _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordPointervINTEL)(size, type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordPointervINTEL(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexPointervINTEL(GLint size, GLenum type, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexPointervINTEL)(size, type, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexPointervINTEL(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexScissorFuncINTEL(GLenum target, GLenum lfunc, GLenum hfunc)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexScissorFuncINTEL)(target, lfunc, hfunc);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexScissorFuncINTEL(";
                   _code << toString(target);
    _code << ", "; _code << toString(lfunc);
    _code << ", "; _code << toString(hfunc);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexScissorINTEL(GLenum target, GLclampf tlow, GLclampf thigh)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexScissorINTEL)(target, tlow, thigh);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexScissorINTEL(";
                   _code << toString(target);
    _code << ", "; _code << tlow;
    _code << ", "; _code << thigh;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageCallback(GLDEBUGPROC callback, GLvoid *userParam)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageCallback)(callback, userParam);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageCallback(";
                   _code << "/* callback = ?? */";
    _code << ", "; _code << userParam;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageControl)(source, type, severity, count, ids, enabled);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageControl(";
                   _code << toString(source);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << count;
    _code << ", "; _code << ids;
    _code << ", "; _code << toString(enabled);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDebugMessageInsert)(source, type, id, severity, length, buf);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDebugMessageInsert(";
                   _code << toString(source);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << id;
    _code << ", "; _code << toString(severity);
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(buf,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGetDebugMessageLog)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDebugMessageLog(";
                   _code << count;
    _code << ", "; _code << bufsize;
    _code << ", "; _code << sources;
    _code << ", "; _code << types;
    _code << ", "; _code << ids;
    _code << ", "; _code << severities;
    _code << ", "; _code << lengths;
    _code << ", "; _code << boost::print::quote(messageLog,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectLabel)(identifier, name, bufSize, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectLabel(";
                   _code << toString(identifier);
    _code << ", "; _code << name;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetObjectPtrLabel(GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetObjectPtrLabel)(ptr, bufSize, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetObjectPtrLabel(";
                   _code << ptr;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glObjectLabel)(identifier, name, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glObjectLabel(";
                   _code << toString(identifier);
    _code << ", "; _code << name;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glObjectPtrLabel(GLvoid *ptr, GLsizei length, const GLchar *label)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glObjectPtrLabel)(ptr, length, label);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glObjectPtrLabel(";
                   _code << ptr;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(label,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPopDebugGroup(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPopDebugGroup)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPopDebugGroup();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPushDebugGroup)(source, id, length, message);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPushDebugGroup(";
                   _code << toString(source);
    _code << ", "; _code << id;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(message,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glBufferRegionEnabled(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glBufferRegionEnabled)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferRegionEnabled();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteBufferRegion(GLenum region)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteBufferRegion)(region);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteBufferRegion(";
                   _code << toString(region);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBufferRegion)(region, x, y, width, height, xDest, yDest);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawBufferRegion(";
                   _code << region;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << xDest;
    _code << ", "; _code << yDest;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glNewBufferRegion(GLenum region)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glNewBufferRegion)(region);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNewBufferRegion(";
                   _code << toString(region);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferRegion)(region, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadBufferRegion(";
                   _code << region;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResizeBuffersMESA(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResizeBuffersMESA)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResizeBuffersMESA();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2dMESA(GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dMESA)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2dMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2dvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2dvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2fMESA(GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fMESA)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2fMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2fvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2fvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2iMESA(GLint x, GLint y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2iMESA)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2iMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2ivMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[2] = " << array<GLint,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2ivMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2sMESA(GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2sMESA)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos2sMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos2svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos2svMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glWindowPos2svMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dMESA)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3dMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3dvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3dvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fMESA)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3fMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3fvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3fvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3iMESA(GLint x, GLint y, GLint z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3iMESA)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3iMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3ivMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[3] = " << array<GLint,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3ivMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3sMESA)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos3sMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos3svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos3svMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glWindowPos3svMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dMESA)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos4dMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4dvMESA(const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4dvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glWindowPos4dvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fMESA)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos4fMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4fvMESA(const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4fvMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glWindowPos4fvMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4iMESA)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos4iMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4ivMESA(const GLint *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4ivMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _vIndex << "[4] = " << array<GLint,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glWindowPos4ivMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4sMESA)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWindowPos4sMESA(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWindowPos4svMESA(const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWindowPos4svMESA)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glWindowPos4svMESA(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginConditionalRenderNVX(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNVX)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginConditionalRenderNVX(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndConditionalRenderNVX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNVX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndConditionalRenderNVX();\n";
    printf("%s",_code.str().c_str());
}

static GLuint64 REGAL_CALL code_glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint64  _ret = _next->call(&_next->glGetImageHandleNV)(texture, level, layered, layer, format);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetImageHandleNV(";
                   _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << toString(layered);
    _code << ", "; _code << layer;
    _code << ", "; _code << toString(format);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint64 REGAL_CALL code_glGetTextureHandleNV(GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint64  _ret = _next->call(&_next->glGetTextureHandleNV)(texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureHandleNV(";
                   _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint64 REGAL_CALL code_glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint64  _ret = _next->call(&_next->glGetTextureSamplerHandleNV)(texture, sampler);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTextureSamplerHandleNV(";
                   _code << texture;
    _code << ", "; _code << sampler;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsImageHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsImageHandleResidentNV)(handle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsImageHandleResidentNV(";
                   _code << handle;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsTextureHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsTextureHandleResidentNV)(handle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsTextureHandleResidentNV(";
                   _code << handle;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glMakeImageHandleNonResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleNonResidentNV)(handle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeImageHandleNonResidentNV(";
                   _code << handle;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeImageHandleResidentNV)(handle, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeImageHandleResidentNV(";
                   _code << handle;
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeTextureHandleNonResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleNonResidentNV)(handle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeTextureHandleNonResidentNV(";
                   _code << handle;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeTextureHandleResidentNV(GLuint64 handle)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeTextureHandleResidentNV)(handle);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeTextureHandleResidentNV(";
                   _code << handle;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64NV)(program, location, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniformHandleui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformHandleui64vNV)(program, location, count, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniformHandleui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << values;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformHandleui64NV(GLint location, GLuint64 value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64NV)(location, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniformHandleui64NV(";
                   _code << location;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformHandleui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniformHandleui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginConditionalRenderNV(GLuint id, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginConditionalRenderNV)(id, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginConditionalRenderNV(";
                   _code << id;
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndConditionalRenderNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndConditionalRenderNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndConditionalRenderNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyImageSubDataNV)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyImageSubDataNV(";
                   _code << srcName;
    _code << ", "; _code << toString(srcTarget);
    _code << ", "; _code << srcLevel;
    _code << ", "; _code << srcX;
    _code << ", "; _code << srcY;
    _code << ", "; _code << srcZ;
    _code << ", "; _code << dstName;
    _code << ", "; _code << toString(dstTarget);
    _code << ", "; _code << dstLevel;
    _code << ", "; _code << dstX;
    _code << ", "; _code << dstY;
    _code << ", "; _code << dstZ;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverageMaskNV(GLboolean mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverageMaskNV)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverageMaskNV(";
                   _code << toString(mask);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverageOperationNV(GLenum operation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverageOperationNV)(operation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverageOperationNV(";
                   _code << toString(operation);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearDepthdNV(GLdouble depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthdNV)(depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearDepthdNV(";
                   _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthBoundsdNV)(zmin, zmax);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthBoundsdNV(";
                   _code << zmin;
    _code << ", "; _code << zmax;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRangedNV(GLdouble zNear, GLdouble zFar)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangedNV)(zNear, zFar);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthRangedNV(";
                   _code << zNear;
    _code << ", "; _code << zFar;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawBuffersNV(GLsizei n, const GLenum *bufs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawBuffersNV)(n, bufs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawBuffersNV(";
                   _code << n;
    _code << ", "; _code << bufs;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEvalMapsNV(GLenum target, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEvalMapsNV)(target, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEvalMapsNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterfvNV)(target, index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapAttribParameterfvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapAttribParameterivNV)(target, index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapAttribParameterivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapControlPointsNV)(target, index, type, ustride, vstride, packed, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapControlPointsNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << ustride;
    _code << ", "; _code << vstride;
    _code << ", "; _code << toString(packed);
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterfvNV)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapParameterfvNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMapParameterivNV)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetMapParameterivNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapControlPointsNV)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapControlPointsNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << ustride;
    _code << ", "; _code << vstride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << vorder;
    _code << ", "; _code << toString(packed);
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapParameterfvNV)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapParameterfvNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMapParameterivNV)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapParameterivNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetMultisamplefvNV)(pname, index, val);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _valIndex << "[" << (2) << "];\n";
    _code << indent << "glGetMultisamplefvNV(";
                   _code << toString(pname);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _valIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleMaskIndexedNV(GLuint index, GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskIndexedNV)(index, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleMaskIndexedNV(";
                   _code << index;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexRenderbufferNV(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexRenderbufferNV)(target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexRenderbufferNV(";
                   _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteFencesNV(GLsizei n, const GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFencesNV)(n, fences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _fencesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _fencesIndex << "[n] = " << array<GLuint,const char * const>(fences,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteFencesNV(";
                   _code << n;
    _code << ", "; _code << "i" << _fencesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinishFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinishFenceNV)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinishFenceNV(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenFencesNV(GLsizei n, GLuint *fences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenFencesNV)(n, fences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _fencesIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _fencesIndex << "[" << (n) << "];\n";
    _code << indent << "glGenFencesNV(";
                   _code << n;
    _code << ", "; _code << "o" << _fencesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFenceivNV)(fence, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFenceivNV(";
                   _code << fence;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsFenceNV)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsFenceNV(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glSetFenceNV(GLuint fence, GLenum condition)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSetFenceNV)(fence, condition);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSetFenceNV(";
                   _code << fence;
    _code << ", "; _code << toString(condition);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glTestFenceNV(GLuint fence)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glTestFenceNV)(fence);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTestFenceNV(";
                   _code << fence;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterdvNV)(id, len, name, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramNamedParameterdvNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramNamedParameterfvNV)(id, len, name, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramNamedParameterfvNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dNV)(id, len, name, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    _code << indent << "glProgramNamedParameter4dNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4dvNV)(id, len, name, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glProgramNamedParameter4dvNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fNV)(id, len, name, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    _code << indent << "glProgramNamedParameter4fNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramNamedParameter4fvNV)(id, len, name, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nameIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _nameIndex << "[1] = " << array<GLubyte,const char * const>(name,1,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glProgramNamedParameter4fvNV(";
                   _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _nameIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageMultisampleCoverageNV(";
                   _code << toString(target);
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramVertexLimitNV(GLenum target, GLint limit)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramVertexLimitNV)(target, limit);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramVertexLimitNV(";
                   _code << toString(target);
    _code << ", "; _code << limit;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramEnvParameterIivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramEnvParameterIuivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramEnvParameterIuivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramLocalParameterIivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramLocalParameterIuivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramLocalParameterIuivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4iNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramEnvParameterI4iNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4ivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[4] = " << array<GLint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParameterI4ivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uiNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramEnvParameterI4uiNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParameterI4uivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[4] = " << array<GLuint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParameterI4uivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4ivNV)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[count * 4] = " << array<GLint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParametersI4ivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramEnvParametersI4uivNV)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[count * 4] = " << array<GLuint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramEnvParametersI4uivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4iNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramLocalParameterI4iNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4ivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[4] = " << array<GLint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParameterI4ivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uiNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramLocalParameterI4uiNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParameterI4uivNV)(target, index, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[4] = " << array<GLuint,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParameterI4uivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4ivNV)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[count * 4] = " << array<GLint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParametersI4ivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramLocalParametersI4uivNV)(target, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[count * 4] = " << array<GLuint,const char * const>(params,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramLocalParametersI4uivNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformi64vNV)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformi64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64NV)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1i64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1i64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count] = " << array<GLint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1i64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64NV)(program, location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform1ui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform1ui64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count] = " << array<GLuint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform1ui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64NV)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2i64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2i64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 2] = " << array<GLint64EXT,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2i64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64NV)(program, location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform2ui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform2ui64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 2] = " << array<GLuint64EXT,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform2ui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64NV)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3i64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3i64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 3] = " << array<GLint64EXT,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3i64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64NV)(program, location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform3ui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform3ui64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 3] = " << array<GLuint64EXT,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform3ui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64NV)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4i64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4i64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 4] = " << array<GLint64EXT,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4i64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64NV)(program, location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniform4ui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniform4ui64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 4] = " << array<GLuint64EXT,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramUniform4ui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1i64NV(GLint location, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64NV)(location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1i64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1i64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count] = " << array<GLint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1i64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1ui64NV(GLint location, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64NV)(location, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform1ui64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform1ui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count] = " << array<GLuint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniform1ui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64NV)(location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2i64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2i64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 2] = " << array<GLint64EXT,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glUniform2i64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64NV)(location, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform2ui64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform2ui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 2] = " << array<GLuint64EXT,const char * const>(value,count * 2,"","{ "," };\n",", ");
    _code << indent << "glUniform2ui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64NV)(location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3i64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3i64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 3] = " << array<GLint64EXT,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glUniform3i64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64NV)(location, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform3ui64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform3ui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 3] = " << array<GLuint64EXT,const char * const>(value,count * 3,"","{ "," };\n",", ");
    _code << indent << "glUniform3ui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64NV)(location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4i64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4i64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _valueIndex << "[count * 4] = " << array<GLint64EXT,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glUniform4i64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64NV)(location, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniform4ui64NV(";
                   _code << location;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniform4ui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count * 4] = " << array<GLuint64EXT,const char * const>(value,count * 4,"","{ "," };\n",", ");
    _code << indent << "glUniform4ui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3hNV)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3hNV(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4hNV)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4hNV(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ", "; _code << alpha;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[4] = " << array<GLhalfNV,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glColor4hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordhNV(GLhalfNV coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhNV)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordhNV(";
                   _code << coord;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordhvNV(const GLhalfNV *coord)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordhvNV)(coord);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _coordIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _coordIndex << "[1] = " << array<GLhalfNV,const char * const>(coord,1,"","{ "," };\n",", ");
    _code << indent << "glFogCoordhvNV(";
                   _code << "i" << _coordIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hNV)(target, s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord1hNV(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord1hvNV)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[1] = " << array<GLhalfNV,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord1hvNV(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hNV)(target, s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord2hNV(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord2hvNV)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[2] = " << array<GLhalfNV,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord2hvNV(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hNV)(target, s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord3hNV(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord3hvNV)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord3hvNV(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hNV)(target, s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMultiTexCoord4hNV(";
                   _code << toString(target);
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMultiTexCoord4hvNV)(target, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[4] = " << array<GLhalfNV,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glMultiTexCoord4hvNV(";
                   _code << toString(target);
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3hNV)(nx, ny, nz);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3hNV(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hNV)(red, green, blue);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColor3hNV(";
                   _code << red;
    _code << ", "; _code << green;
    _code << ", "; _code << blue;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColor3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColor3hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glSecondaryColor3hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1hNV(GLhalfNV s)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hNV)(s);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord1hNV(";
                   _code << s;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord1hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord1hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[1] = " << array<GLhalfNV,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glTexCoord1hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hNV)(s, t);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2hNV(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[2] = " << array<GLhalfNV,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hNV)(s, t, r);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord3hNV(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord3hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord3hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hNV)(s, t, r, q);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4hNV(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << q;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[4] = " << array<GLhalfNV,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2hNV(GLhalfNV x, GLhalfNV y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2hNV)(x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex2hNV(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex2hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex2hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[2] = " << array<GLhalfNV,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertex2hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3hNV)(x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex3hNV(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex3hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex3hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertex3hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4hNV)(x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertex4hNV(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertex4hvNV(const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertex4hvNV)(v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[4] = " << array<GLhalfNV,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertex4hvNV(";
                   _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hNV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1hNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1hvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[1] = " << array<GLhalfNV,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1hvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hNV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2hNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2hvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[2] = " << array<GLhalfNV,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2hvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hNV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3hNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3hvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[3] = " << array<GLhalfNV,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3hvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hNV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4hNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4hvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[4] = " << array<GLhalfNV,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4hvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs1hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1hvNV)(index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[count] = " << array<GLhalfNV,const char * const>(v,count,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs1hvNV(";
                   _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs2hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2hvNV)(index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[count * 2] = " << array<GLhalfNV,const char * const>(v,count * 2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs2hvNV(";
                   _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs3hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3hvNV)(index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[count * 3] = " << array<GLhalfNV,const char * const>(v,count * 3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs3hvNV(";
                   _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs4hvNV(GLuint index, GLsizei count, const GLhalfNV *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4hvNV)(index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _vIndex << "[count * 4] = " << array<GLhalfNV,const char * const>(v,count * 4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs4hvNV(";
                   _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexWeighthNV(GLhalfNV weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthNV)(weight);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexWeighthNV(";
                   _code << weight;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexWeighthvNV(const GLhalfNV *weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexWeighthvNV)(weight);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _weightIndex = _context->codeInputNext++;
    _code << indent << "const GLhalfNV i" << _weightIndex << "[1] = " << array<GLhalfNV,const char * const>(weight,1,"","{ "," };\n",", ");
    _code << indent << "glVertexWeighthvNV(";
                   _code << "i" << _weightIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginOcclusionQueryNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginOcclusionQueryNV)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginOcclusionQueryNV(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteOcclusionQueriesNV)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[n] = " << array<GLuint,const char * const>(ids,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteOcclusionQueriesNV(";
                   _code << n;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndOcclusionQueryNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndOcclusionQueryNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndOcclusionQueryNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenOcclusionQueriesNV)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenOcclusionQueriesNV(";
                   _code << n;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryivNV)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetOcclusionQueryivNV(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetOcclusionQueryuivNV)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetOcclusionQueryuivNV(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsOcclusionQueryNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsOcclusionQueryNV)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsOcclusionQueryNV(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIivNV)(target, buffer, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _paramsIndex << "[count] = " << array<GLint,const char * const>(params,count,"","{ "," };\n",", ");
    _code << indent << "glProgramBufferParametersIivNV(";
                   _code << toString(target);
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersIuivNV)(target, buffer, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _paramsIndex << "[count] = " << array<GLuint,const char * const>(params,count,"","{ "," };\n",", ");
    _code << indent << "glProgramBufferParametersIuivNV(";
                   _code << toString(target);
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramBufferParametersfvNV)(target, buffer, index, count, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[count] = " << array<GLfloat,const char * const>(params,count,"","{ "," };\n",", ");
    _code << indent << "glProgramBufferParametersfvNV(";
                   _code << toString(target);
    _code << ", "; _code << buffer;
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyPathNV(GLuint resultPath, GLuint srcPath)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyPathNV)(resultPath, srcPath);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyPathNV(";
                   _code << resultPath;
    _code << ", "; _code << srcPath;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverFillPathInstancedNV(";
                   _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << toString(coverMode);
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << transformValues;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverFillPathNV(GLuint path, GLenum coverMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverFillPathNV)(path, coverMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverFillPathNV(";
                   _code << path;
    _code << ", "; _code << toString(coverMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverStrokePathInstancedNV(";
                   _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << toString(coverMode);
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << transformValues;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCoverStrokePathNV(GLuint name, GLenum coverMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCoverStrokePathNV)(name, coverMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCoverStrokePathNV(";
                   _code << name;
    _code << ", "; _code << toString(coverMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeletePathsNV(GLuint path, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeletePathsNV)(path, range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeletePathsNV(";
                   _code << path;
    _code << ", "; _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLuint REGAL_CALL code_glGenPathsNV(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenPathsNV)(range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenPathsNV(";
                   _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenfvNV)(color, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathColorGenfvNV(";
                   _code << toString(color);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathColorGenivNV)(color, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathColorGenivNV(";
                   _code << toString(color);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathCommandsNV(GLuint name, GLubyte *commands)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathCommandsNV)(name, commands);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathCommandsNV(";
                   _code << name;
    _code << ", "; _code << commands;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathCoordsNV(GLuint name, GLfloat *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathCoordsNV)(name, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathCoordsNV(";
                   _code << name;
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathDashArrayNV(GLuint name, GLfloat *dashArray)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathDashArrayNV)(name, dashArray);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathDashArrayNV(";
                   _code << name;
    _code << ", "; _code << dashArray;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLfloat REGAL_CALL code_glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLfloat  _ret = _next->call(&_next->glGetPathLengthNV)(path, startSegment, numSegments);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathLengthNV(";
                   _code << path;
    _code << ", "; _code << startSegment;
    _code << ", "; _code << numSegments;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint fistPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricRangeNV)(metricQueryMask, fistPathName, numPaths, stride, metrics);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathMetricRangeNV(";
                   _code << metricQueryMask;
    _code << ", "; _code << fistPathName;
    _code << ", "; _code << numPaths;
    _code << ", "; _code << stride;
    _code << ", "; _code << metrics;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathMetricsNV)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathMetricsNV(";
                   _code << metricQueryMask;
    _code << ", "; _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << stride;
    _code << ", "; _code << metrics;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathParameterfvNV(GLuint name, GLenum param, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterfvNV)(name, param, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathParameterfvNV(";
                   _code << name;
    _code << ", "; _code << toString(param);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathParameterivNV(GLuint name, GLenum param, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathParameterivNV)(name, param, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathParameterivNV(";
                   _code << name;
    _code << ", "; _code << toString(param);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathSpacingNV)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathSpacingNV(";
                   _code << toString(pathListMode);
    _code << ", "; _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << advanceScale;
    _code << ", "; _code << kerningScale;
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << returnedSpacing;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenfvNV)(texCoordSet, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathTexGenfvNV(";
                   _code << toString(texCoordSet);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPathTexGenivNV)(texCoordSet, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPathTexGenivNV(";
                   _code << toString(texCoordSet);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInterpolatePathsNV)(resultPath, pathA, pathB, weight);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInterpolatePathsNV(";
                   _code << resultPath;
    _code << ", "; _code << pathA;
    _code << ", "; _code << pathB;
    _code << ", "; _code << weight;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsPathNV(GLuint path)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsPathNV)(path);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsPathNV(";
                   _code << path;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsPointInFillPathNV)(path, mask, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsPointInFillPathNV(";
                   _code << path;
    _code << ", "; _code << mask;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsPointInStrokePathNV)(path, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsPointInStrokePathNV(";
                   _code << path;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathColorGenNV)(color, genMode, colorFormat, coeffs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathColorGenNV(";
                   _code << toString(color);
    _code << ", "; _code << toString(genMode);
    _code << ", "; _code << toString(colorFormat);
    _code << ", "; _code << coeffs;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathCommandsNV)(path, numCommands, commands, numCoords, coordType, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathCommandsNV(";
                   _code << path;
    _code << ", "; _code << numCommands;
    _code << ", "; _code << commands;
    _code << ", "; _code << numCoords;
    _code << ", "; _code << toString(coordType);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathCoordsNV)(path, numCoords, coordType, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathCoordsNV(";
                   _code << path;
    _code << ", "; _code << numCoords;
    _code << ", "; _code << toString(coordType);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathCoverDepthFuncNV(GLenum zfunc)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathCoverDepthFuncNV)(zfunc);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathCoverDepthFuncNV(";
                   _code << toString(zfunc);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathDashArrayNV)(path, dashCount, dashArray);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathDashArrayNV(";
                   _code << path;
    _code << ", "; _code << dashCount;
    _code << ", "; _code << dashArray;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathFogGenNV(GLenum genMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathFogGenNV)(genMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathFogGenNV(";
                   _code << toString(genMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphRangeNV)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathGlyphRangeNV(";
                   _code << firstPathName;
    _code << ", "; _code << toString(fontTarget);
    _code << ", "; _code << fontName;
    _code << ", "; _code << fontStyle;
    _code << ", "; _code << firstGlyph;
    _code << ", "; _code << numGlyphs;
    _code << ", "; _code << toString(handleMissingGlyphs);
    _code << ", "; _code << pathParameterTemplate;
    _code << ", "; _code << emScale;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const GLvoid *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathGlyphsNV)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathGlyphsNV(";
                   _code << firstPathName;
    _code << ", "; _code << toString(fontTarget);
    _code << ", "; _code << fontName;
    _code << ", "; _code << fontStyle;
    _code << ", "; _code << numGlyphs;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << charcodes;
    _code << ", "; _code << toString(handleMissingGlyphs);
    _code << ", "; _code << pathParameterTemplate;
    _code << ", "; _code << emScale;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfNV)(path, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathParameterfNV(";
                   _code << path;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterfvNV)(path, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathParameterfvNV(";
                   _code << path;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathParameteriNV(GLuint path, GLenum pname, GLint value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathParameteriNV)(path, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathParameteriNV(";
                   _code << path;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathParameterivNV)(path, pname, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathParameterivNV(";
                   _code << path;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << value;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathStencilDepthOffsetNV)(factor, units);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathStencilDepthOffsetNV(";
                   _code << factor;
    _code << ", "; _code << units;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathStencilFuncNV)(func, ref, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathStencilFuncNV(";
                   _code << toString(func);
    _code << ", "; _code << ref;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathStringNV(GLuint path, GLenum format, GLsizei length, const GLvoid *pathString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathStringNV)(path, format, length, pathString);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathStringNV(";
                   _code << path;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << length;
    _code << ", "; _code << pathString;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathSubCommandsNV)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathSubCommandsNV(";
                   _code << path;
    _code << ", "; _code << commandStart;
    _code << ", "; _code << commandsToDelete;
    _code << ", "; _code << numCommands;
    _code << ", "; _code << commands;
    _code << ", "; _code << numCoords;
    _code << ", "; _code << toString(coordType);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid *coords)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathSubCoordsNV)(path, coordStart, numCoords, coordType, coords);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathSubCoordsNV(";
                   _code << path;
    _code << ", "; _code << coordStart;
    _code << ", "; _code << numCoords;
    _code << ", "; _code << toString(coordType);
    _code << ", "; _code << coords;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPathTexGenNV)(texCoordSet, genMode, components, coeffs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPathTexGenNV(";
                   _code << toString(texCoordSet);
    _code << ", "; _code << toString(genMode);
    _code << ", "; _code << components;
    _code << ", "; _code << coeffs;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glPointAlongPathNV)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointAlongPathNV(";
                   _code << path;
    _code << ", "; _code << startSegment;
    _code << ", "; _code << numSegments;
    _code << ", "; _code << distance;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << tangentX;
    _code << ", "; _code << tangentY;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathInstancedNV)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilFillPathInstancedNV(";
                   _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << toString(fillMode);
    _code << ", "; _code << mask;
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << transformValues;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilFillPathNV)(path, fillMode, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilFillPathNV(";
                   _code << path;
    _code << ", "; _code << toString(fillMode);
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const GLvoid *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathInstancedNV)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilStrokePathInstancedNV(";
                   _code << numPaths;
    _code << ", "; _code << toString(pathNameType);
    _code << ", "; _code << paths;
    _code << ", "; _code << pathBase;
    _code << ", "; _code << reference;
    _code << ", "; _code << mask;
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << transformValues;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStencilStrokePathNV)(path, reference, mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStencilStrokePathNV(";
                   _code << path;
    _code << ", "; _code << reference;
    _code << ", "; _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTransformPathNV)(resultPath, srcPath, transformType, transformValues);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTransformPathNV(";
                   _code << resultPath;
    _code << ", "; _code << srcPath;
    _code << ", "; _code << toString(transformType);
    _code << ", "; _code << transformValues;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightPathsNV)(resultPath, numPaths, paths, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightPathsNV(";
                   _code << resultPath;
    _code << ", "; _code << numPaths;
    _code << ", "; _code << paths;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushPixelDataRangeNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushPixelDataRangeNV)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushPixelDataRangeNV(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelDataRangeNV(GLenum target, GLsizei size, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelDataRangeNV)(target, size, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelDataRangeNV(";
                   _code << toString(target);
    _code << ", "; _code << size;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameteriNV(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameteriNV)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameteriNV(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterivNV)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterivNV(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoi64vNV)(video_slot, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoi64vNV(";
                   _code << video_slot;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoivNV)(video_slot, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoivNV(";
                   _code << video_slot;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoui64vNV)(video_slot, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoui64vNV(";
                   _code << video_slot;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideouivNV)(video_slot, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideouivNV(";
                   _code << video_slot;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameDualFillNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPresentFrameDualFillNV(";
                   _code << video_slot;
    _code << ", "; _code << minPresentTime;
    _code << ", "; _code << beginPresentTimeId;
    _code << ", "; _code << presentDurationId;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(target0);
    _code << ", "; _code << fill0;
    _code << ", "; _code << toString(target1);
    _code << ", "; _code << fill1;
    _code << ", "; _code << toString(target2);
    _code << ", "; _code << fill2;
    _code << ", "; _code << toString(target3);
    _code << ", "; _code << fill3;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPresentFrameKeyedNV)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPresentFrameKeyedNV(";
                   _code << video_slot;
    _code << ", "; _code << minPresentTime;
    _code << ", "; _code << beginPresentTimeId;
    _code << ", "; _code << presentDurationId;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(target0);
    _code << ", "; _code << fill0;
    _code << ", "; _code << key0;
    _code << ", "; _code << toString(target1);
    _code << ", "; _code << fill1;
    _code << ", "; _code << key1;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPrimitiveRestartIndexNV(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartIndexNV)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPrimitiveRestartIndexNV(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPrimitiveRestartNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPrimitiveRestartNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPrimitiveRestartNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadBufferNV(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadBufferNV)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadBufferNV(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerInputNV)(stage, portion, variable, input, mapping, componentUsage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerInputNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(variable);
    _code << ", "; _code << toString(input);
    _code << ", "; _code << toString(mapping);
    _code << ", "; _code << toString(componentUsage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerOutputNV)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerOutputNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(abOutput);
    _code << ", "; _code << toString(cdOutput);
    _code << ", "; _code << toString(sumOutput);
    _code << ", "; _code << toString(scale);
    _code << ", "; _code << toString(bias);
    _code << ", "; _code << toString(abDotProduct);
    _code << ", "; _code << toString(cdDotProduct);
    _code << ", "; _code << toString(muxSum);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerParameterfNV(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfNV)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerParameterfNV(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerParameterfvNV(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterfvNV)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerParameterfvNV(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerParameteriNV(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameteriNV)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerParameteriNV(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerParameterivNV(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerParameterivNV)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerParameterivNV(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinalCombinerInputNV)(variable, input, mapping, componentUsage);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinalCombinerInputNV(";
                   _code << toString(variable);
    _code << ", "; _code << toString(input);
    _code << ", "; _code << toString(mapping);
    _code << ", "; _code << toString(componentUsage);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterfvNV)(stage, portion, variable, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCombinerInputParameterfvNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(variable);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerInputParameterivNV)(stage, portion, variable, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCombinerInputParameterivNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(variable);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterfvNV)(stage, portion, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCombinerOutputParameterfvNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerOutputParameterivNV)(stage, portion, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCombinerOutputParameterivNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(portion);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterfvNV)(variable, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFinalCombinerInputParameterfvNV(";
                   _code << toString(variable);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFinalCombinerInputParameterivNV)(variable, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFinalCombinerInputParameterivNV(";
                   _code << toString(variable);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCombinerStageParameterfvNV)(stage, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCombinerStageParameterfvNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetCombinerStageParameterfvNV)(stage, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetCombinerStageParameterfvNV(";
                   _code << toString(stage);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferParameterui64vNV)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferParameterui64vNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegerui64vNV(GLenum target, GLuint64EXT *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64vNV)(target, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegerui64vNV(";
                   _code << toString(target);
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetNamedBufferParameterui64vNV)(buffer, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetNamedBufferParameterui64vNV(";
                   _code << buffer;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetUniformui64vNV)(program, location, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetUniformui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsBufferResidentNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsBufferResidentNV)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsBufferResidentNV(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsNamedBufferResidentNV(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsNamedBufferResidentNV)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsNamedBufferResidentNV(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glMakeBufferNonResidentNV(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferNonResidentNV)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeBufferNonResidentNV(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeBufferResidentNV(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeBufferResidentNV)(target, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeBufferResidentNV(";
                   _code << toString(target);
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeNamedBufferNonResidentNV(GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferNonResidentNV)(buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeNamedBufferNonResidentNV(";
                   _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMakeNamedBufferResidentNV)(buffer, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMakeNamedBufferResidentNV(";
                   _code << buffer;
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64NV)(program, location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramUniformui64NV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramUniformui64vNV)(program, location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count] = " << array<GLuint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glProgramUniformui64vNV(";
                   _code << program;
    _code << ", "; _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformui64NV(GLint location, GLuint64EXT v0)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformui64NV)(location, v0);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUniformui64NV(";
                   _code << location;
    _code << ", "; _code << v0;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glUniformui64vNV)(location, count, value);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _valueIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _valueIndex << "[count] = " << array<GLuint64EXT,const char * const>(value,count,"","{ "," };\n",", ");
    _code << indent << "glUniformui64vNV(";
                   _code << location;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _valueIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureBarrierNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureBarrierNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureBarrierNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage2DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage2DMultisampleCoverageNV(";
                   _code << toString(target);
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DMultisampleCoverageNV)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage3DMultisampleCoverageNV(";
                   _code << toString(target);
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage2DMultisampleCoverageNV(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage2DMultisampleNV)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage2DMultisampleNV(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleCoverageNV)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage3DMultisampleCoverageNV(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << coverageSamples;
    _code << ", "; _code << colorSamples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureImage3DMultisampleNV)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureImage3DMultisampleNV(";
                   _code << texture;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << samples;
    _code << ", "; _code << internalFormat;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(fixedSampleLocations);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glActiveVaryingNV(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glActiveVaryingNV)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glActiveVaryingNV(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginTransformFeedbackNV(GLenum primitiveMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginTransformFeedbackNV)(primitiveMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginTransformFeedbackNV(";
                   _code << toString(primitiveMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferBaseNV)(target, index, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferBaseNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferOffsetNV)(target, index, buffer, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferOffsetNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindBufferRangeNV)(target, index, buffer, offset, size);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindBufferRangeNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << buffer;
    _code << ", "; _code << offset;
    _code << ", "; _code << size;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndTransformFeedbackNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndTransformFeedbackNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetActiveVaryingNV)(program, index, bufSize, length, size, type, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _sizeIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _sizeIndex << "[" << (1) << "];\n";
    size_t _typeIndex = _context->codeOutputNext++;
    _code << indent << "GLenum o" << _typeIndex << "[" << (1) << "];\n";
    _code << indent << "glGetActiveVaryingNV(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _sizeIndex;
    _code << ", "; _code << "o" << _typeIndex;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTransformFeedbackVaryingNV)(program, index, location);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _locationIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _locationIndex << "[" << (1) << "];\n";
    _code << indent << "glGetTransformFeedbackVaryingNV(";
                   _code << program;
    _code << ", "; _code << index;
    _code << ", "; _code << "o" << _locationIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetVaryingLocationNV(GLuint program, const GLchar *name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetVaryingLocationNV)(program, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVaryingLocationNV(";
                   _code << program;
    _code << ", "; _code << boost::print::quote(name,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glTransformFeedbackAttribsNV(GLuint count, const GLint *attribs, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackAttribsNV)(count, attribs, bufferMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTransformFeedbackAttribsNV(";
                   _code << count;
    _code << ", "; _code << attribs;
    _code << ", "; _code << toString(bufferMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTransformFeedbackVaryingsNV)(program, count, locations, bufferMode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _locationsIndex = _context->codeInputNext++;
    _code << indent << "const GLint i" << _locationsIndex << "[count] = " << array<GLint,const char * const>(locations,count,"","{ "," };\n",", ");
    _code << indent << "glTransformFeedbackVaryingsNV(";
                   _code << program;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _locationsIndex;
    _code << ", "; _code << toString(bufferMode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindTransformFeedbackNV(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindTransformFeedbackNV)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindTransformFeedbackNV(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteTransformFeedbacksNV)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _idsIndex << "[n] = " << array<GLuint,const char * const>(ids,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteTransformFeedbacksNV(";
                   _code << n;
    _code << ", "; _code << "i" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawTransformFeedbackNV(GLenum mode, GLuint name)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawTransformFeedbackNV)(mode, name);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawTransformFeedbackNV(";
                   _code << toString(mode);
    _code << ", "; _code << name;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenTransformFeedbacksNV)(n, ids);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _idsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _idsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenTransformFeedbacksNV(";
                   _code << n;
    _code << ", "; _code << "o" << _idsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsTransformFeedbackNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsTransformFeedbackNV)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsTransformFeedbackNV(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glPauseTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPauseTransformFeedbackNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPauseTransformFeedbackNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glResumeTransformFeedbackNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glResumeTransformFeedbackNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glResumeTransformFeedbackNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVDPAUFiniNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUFiniNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVDPAUFiniNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUGetSurfaceivNV)(surface, pname, bufSize, length, values);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _lengthIndex = _context->codeOutputNext++;
    _code << indent << "GLsizei o" << _lengthIndex << "[" << (1) << "];\n";
    size_t _valuesIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _valuesIndex << "[" << (bufSize) << "];\n";
    _code << indent << "glVDPAUGetSurfaceivNV(";
                   _code << surface;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << bufSize;
    _code << ", "; _code << "o" << _lengthIndex;
    _code << ", "; _code << "o" << _valuesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUInitNV)(vdpDevice, getProcAddress);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVDPAUInitNV(";
                   _code << vdpDevice;
    _code << ", "; _code << getProcAddress;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glVDPAUIsSurfaceNV)(surface);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVDPAUIsSurfaceNV(";
                   _code << surface;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUMapSurfacesNV)(numSurfaces, surfaces);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _surfacesIndex = _context->codeInputNext++;
    _code << indent << "const GLvdpauSurfaceNV i" << _surfacesIndex << "[numSurfaces] = " << array<GLvdpauSurfaceNV,const char * const>(surfaces,numSurfaces,"","{ "," };\n",", ");
    _code << indent << "glVDPAUMapSurfacesNV(";
                   _code << numSurfaces;
    _code << ", "; _code << "i" << _surfacesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvdpauSurfaceNV REGAL_CALL code_glVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvdpauSurfaceNV  _ret = _next->call(&_next->glVDPAURegisterOutputSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _textureNamesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _textureNamesIndex << "[numTextureNames] = " << array<GLuint,const char * const>(textureNames,numTextureNames,"","{ "," };\n",", ");
    _code << indent << "glVDPAURegisterOutputSurfaceNV(";
                   _code << vdpSurface;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << numTextureNames;
    _code << ", "; _code << "i" << _textureNamesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLvdpauSurfaceNV REGAL_CALL code_glVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvdpauSurfaceNV  _ret = _next->call(&_next->glVDPAURegisterVideoSurfaceNV)(vdpSurface, target, numTextureNames, textureNames);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _textureNamesIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _textureNamesIndex << "[numTextureNames] = " << array<GLuint,const char * const>(textureNames,numTextureNames,"","{ "," };\n",", ");
    _code << indent << "glVDPAURegisterVideoSurfaceNV(";
                   _code << vdpSurface;
    _code << ", "; _code << toString(target);
    _code << ", "; _code << numTextureNames;
    _code << ", "; _code << "i" << _textureNamesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUSurfaceAccessNV)(surface, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVDPAUSurfaceAccessNV(";
                   _code << surface;
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnmapSurfacesNV)(numSurfaces, surfaces);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _surfacesIndex = _context->codeInputNext++;
    _code << indent << "const GLvdpauSurfaceNV i" << _surfacesIndex << "[numSurfaces] = " << array<GLvdpauSurfaceNV,const char * const>(surfaces,numSurfaces,"","{ "," };\n",", ");
    _code << indent << "glVDPAUUnmapSurfacesNV(";
                   _code << numSurfaces;
    _code << ", "; _code << "i" << _surfacesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVDPAUUnregisterSurfaceNV)(surface);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVDPAUUnregisterSurfaceNV(";
                   _code << surface;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFlushVertexArrayRangeNV(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushVertexArrayRangeNV)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushVertexArrayRangeNV();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexArrayRangeNV(GLsizei size, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexArrayRangeNV)(size, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexArrayRangeNV(";
                   _code << size;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLi64vNV)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint64EXT o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribLi64vNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribLui64vNV)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint64EXT o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribLui64vNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1i64NV(GLuint index, GLint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64NV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL1i64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1i64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _vIndex << "[1] = " << array<GLint64EXT,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL1i64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64NV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL1ui64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL1ui64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _vIndex << "[1] = " << array<GLuint64EXT,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL1ui64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64NV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL2i64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2i64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _vIndex << "[2] = " << array<GLint64EXT,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL2i64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64NV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL2ui64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL2ui64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _vIndex << "[2] = " << array<GLuint64EXT,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL2ui64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64NV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL3i64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3i64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _vIndex << "[3] = " << array<GLint64EXT,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL3i64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64NV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL3ui64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL3ui64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _vIndex << "[3] = " << array<GLuint64EXT,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL3ui64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64NV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL4i64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4i64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLint64EXT i" << _vIndex << "[4] = " << array<GLint64EXT,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL4i64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64NV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribL4ui64NV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribL4ui64vNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLuint64EXT i" << _vIndex << "[4] = " << array<GLuint64EXT,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribL4ui64vNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribLFormatNV)(index, size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribLFormatNV(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBufferAddressRangeNV)(pname, index, address, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBufferAddressRangeNV(";
                   _code << toString(pname);
    _code << ", "; _code << index;
    _code << ", "; _code << address;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorFormatNV)(size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorFormatNV(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEdgeFlagFormatNV(GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEdgeFlagFormatNV)(stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEdgeFlagFormatNV(";
                   _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogCoordFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogCoordFormatNV)(type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogCoordFormatNV(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetIntegerui64i_vNV(GLenum target, GLuint index, GLuint64EXT *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetIntegerui64i_vNV)(target, index, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetIntegerui64i_vNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIndexFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIndexFormatNV)(type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIndexFormatNV(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormalFormatNV(GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormalFormatNV)(type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormalFormatNV(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSecondaryColorFormatNV)(size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSecondaryColorFormatNV(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoordFormatNV)(size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoordFormatNV(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribFormatNV)(index, size, type, normalized, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribFormatNV(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << toString(normalized);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribIFormatNV)(index, size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribIFormatNV(";
                   _code << index;
    _code << ", "; _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexFormatNV(GLint size, GLenum type, GLsizei stride)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexFormatNV)(size, type, stride);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexFormatNV(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glAreProgramsResidentNV)(n, programs, residences);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _programsIndex << "[n] = " << array<GLuint,const char * const>(programs,n,"","{ "," };\n",", ");
    size_t _residencesIndex = _context->codeOutputNext++;
    _code << indent << "GLboolean o" << _residencesIndex << "[" << (n) << "];\n";
    _code << indent << "glAreProgramsResidentNV(";
                   _code << n;
    _code << ", "; _code << "i" << _programsIndex;
    _code << ", "; _code << "o" << _residencesIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glBindProgramNV(GLenum target, GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindProgramNV)(target, id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindProgramNV(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteProgramsNV)(n, programs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _programsIndex << "[n] = " << array<GLuint,const char * const>(programs,n,"","{ "," };\n",", ");
    _code << indent << "glDeleteProgramsNV(";
                   _code << n;
    _code << ", "; _code << "i" << _programsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExecuteProgramNV)(target, id, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _paramsIndex << "[4] = " << array<GLfloat,const char * const>(params,4,"","{ "," };\n",", ");
    _code << indent << "glExecuteProgramNV(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ", "; _code << "i" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenProgramsNV(GLsizei n, GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenProgramsNV)(n, programs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _programsIndex << "[" << (n) << "];\n";
    _code << indent << "glGenProgramsNV(";
                   _code << n;
    _code << ", "; _code << "o" << _programsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterdvNV)(target, index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramParameterdvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramParameterfvNV)(target, index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramParameterfvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramStringNV)(id, pname, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramStringNV(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramivNV(GLuint id, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramivNV)(id, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (4) << "];\n";
    _code << indent << "glGetProgramivNV(";
                   _code << id;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTrackMatrixivNV)(target, address, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetTrackMatrixivNV(";
                   _code << toString(target);
    _code << ", "; _code << address;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribPointervNV(GLuint index, GLenum pname, GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribPointervNV)(index, pname, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVertexAttribPointervNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribdvNV)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLdouble o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribdvNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribfvNV)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLfloat o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribfvNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVertexAttribivNV)(index, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _paramsIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _paramsIndex << "[" << (1) << "];\n";
    _code << indent << "glGetVertexAttribivNV(";
                   _code << index;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << "o" << _paramsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsProgramNV(GLuint id)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsProgramNV)(id);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsProgramNV(";
                   _code << id;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadProgramNV)(target, id, len, program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _programIndex << "[len] = " << array<GLubyte,const char * const>(program,len,"","{ "," };\n",", ");
    _code << indent << "glLoadProgramNV(";
                   _code << toString(target);
    _code << ", "; _code << id;
    _code << ", "; _code << len;
    _code << ", "; _code << "i" << _programIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramParameter4dNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4dvNV)(target, index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glProgramParameter4dvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fNV)(target, index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramParameter4fNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameter4fvNV)(target, index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glProgramParameter4fvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4dvNV)(target, index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[count * 4] = " << array<GLdouble,const char * const>(v,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramParameters4dvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramParameters4fvNV)(target, index, count, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[count * 4] = " << array<GLfloat,const char * const>(v,count * 4,"","{ "," };\n",", ");
    _code << indent << "glProgramParameters4fvNV(";
                   _code << toString(target);
    _code << ", "; _code << index;
    _code << ", "; _code << count;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRequestResidentProgramsNV)(n, programs);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _programsIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _programsIndex << "[n] = " << array<GLuint,const char * const>(programs,n,"","{ "," };\n",", ");
    _code << indent << "glRequestResidentProgramsNV(";
                   _code << n;
    _code << ", "; _code << "i" << _programsIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTrackMatrixNV)(target, address, matrix, transform);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTrackMatrixNV(";
                   _code << toString(target);
    _code << ", "; _code << address;
    _code << ", "; _code << toString(matrix);
    _code << ", "; _code << toString(transform);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1dNV(GLuint index, GLdouble x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dNV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1dNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1dvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[1] = " << array<GLdouble,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1dvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1fNV(GLuint index, GLfloat x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fNV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1fNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1fvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[1] = " << array<GLfloat,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1fvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1sNV(GLuint index, GLshort x)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1sNV)(index, x);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib1sNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib1svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib1svNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[1] = " << array<GLshort,const char * const>(v,1,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib1svNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dNV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2dNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2dvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[2] = " << array<GLdouble,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2dvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fNV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2fNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2fvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2fvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2sNV)(index, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib2sNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib2svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib2svNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[2] = " << array<GLshort,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib2svNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dNV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3dNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3dvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[3] = " << array<GLdouble,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3dvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fNV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3fNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3fvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3fvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3sNV)(index, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib3sNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib3svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib3svNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[3] = " << array<GLshort,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib3svNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dNV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4dNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4dvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[4] = " << array<GLdouble,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4dvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fNV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4fNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4fvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4fvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4sNV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4sNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4svNV(GLuint index, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4svNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[4] = " << array<GLshort,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4svNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubNV)(index, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttrib4ubNV(";
                   _code << index;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttrib4ubvNV)(index, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[4] = " << array<GLubyte,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttrib4ubvNV(";
                   _code << index;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribPointerNV)(index, fsize, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVertexAttribPointerNV(";
                   _code << index;
    _code << ", "; _code << fsize;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1dvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[n] = " << array<GLdouble,const char * const>(v,n,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs1dvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1fvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[n] = " << array<GLfloat,const char * const>(v,n,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs1fvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs1svNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[n] = " << array<GLshort,const char * const>(v,n,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs1svNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2dvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[n * 2] = " << array<GLdouble,const char * const>(v,n * 2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs2dvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2fvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[n * 2] = " << array<GLfloat,const char * const>(v,n * 2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs2fvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs2svNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[n * 2] = " << array<GLshort,const char * const>(v,n * 2,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs2svNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3dvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[n * 3] = " << array<GLdouble,const char * const>(v,n * 3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs3dvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3fvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[n * 3] = " << array<GLfloat,const char * const>(v,n * 3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs3fvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs3svNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[n * 3] = " << array<GLshort,const char * const>(v,n * 3,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs3svNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4dvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _vIndex << "[n * 4] = " << array<GLdouble,const char * const>(v,n * 4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs4dvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4fvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[n * 4] = " << array<GLfloat,const char * const>(v,n * 4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs4fvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4svNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLshort i" << _vIndex << "[n * 4] = " << array<GLshort,const char * const>(v,n * 4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs4svNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVertexAttribs4ubvNV)(index, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _vIndex << "[n * 4] = " << array<GLubyte,const char * const>(v,n * 4,"","{ "," };\n",", ");
    _code << indent << "glVertexAttribs4ubvNV(";
                   _code << index;
    _code << ", "; _code << n;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBeginVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBeginVideoCaptureNV)(video_capture_slot);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBeginVideoCaptureNV(";
                   _code << video_capture_slot;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptr offset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamBufferNV)(video_capture_slot, stream, frame_region, offset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVideoCaptureStreamBufferNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(frame_region);
    _code << ", "; _code << offset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVideoCaptureStreamTextureNV)(video_capture_slot, stream, frame_region, target, texture);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVideoCaptureStreamTextureNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(frame_region);
    _code << ", "; _code << toString(target);
    _code << ", "; _code << texture;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEndVideoCaptureNV(GLuint video_capture_slot)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndVideoCaptureNV)(video_capture_slot);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndVideoCaptureNV(";
                   _code << video_capture_slot;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamdvNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoCaptureStreamdvNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamfvNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoCaptureStreamfvNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureStreamivNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoCaptureStreamivNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetVideoCaptureivNV)(video_capture_slot, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetVideoCaptureivNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glVideoCaptureNV)(video_capture_slot, sequence_num, capture_time);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _sequence_numIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _sequence_numIndex << "[" << (1) << "];\n";
    size_t _capture_timeIndex = _context->codeOutputNext++;
    _code << indent << "GLuint64EXT o" << _capture_timeIndex << "[" << (1) << "];\n";
    _code << indent << "glVideoCaptureNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << "o" << _sequence_numIndex;
    _code << ", "; _code << "o" << _capture_timeIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterdvNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVideoCaptureStreamParameterdvNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterfvNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVideoCaptureStreamParameterfvNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glVideoCaptureStreamParameterivNV)(video_capture_slot, stream, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glVideoCaptureStreamParameterivNV(";
                   _code << video_capture_slot;
    _code << ", "; _code << stream;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationSeparateOES)(modeRGB, modeAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationSeparateOES(";
                   _code << toString(modeRGB);
    _code << ", "; _code << toString(modeAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendFuncSeparateOES)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendFuncSeparateOES(";
                   _code << toString(sfactorRGB);
    _code << ", "; _code << toString(dfactorRGB);
    _code << ", "; _code << toString(sfactorAlpha);
    _code << ", "; _code << toString(dfactorAlpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBlendEquationOES(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBlendEquationOES)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBlendEquationOES(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindFramebufferOES)(target, framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindFramebufferOES(";
                   _code << toString(target);
    _code << ", "; _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindRenderbufferOES)(target, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindRenderbufferOES(";
                   _code << toString(target);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLenum REGAL_CALL code_glCheckFramebufferStatusOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLenum  _ret = _next->call(&_next->glCheckFramebufferStatusOES)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCheckFramebufferStatusOES(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteFramebuffersOES)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteFramebuffersOES(";
                   _code << n;
    _code << ", "; _code << framebuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteRenderbuffersOES)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteRenderbuffersOES(";
                   _code << n;
    _code << ", "; _code << renderbuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferRenderbufferOES)(target, attachment, renderbuffertarget, renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferRenderbufferOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(renderbuffertarget);
    _code << ", "; _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture2DOES)(target, attachment, textarget, texture, level);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture2DOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenFramebuffersOES)(n, framebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenFramebuffersOES(";
                   _code << n;
    _code << ", "; _code << framebuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenRenderbuffersOES)(n, renderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenRenderbuffersOES(";
                   _code << n;
    _code << ", "; _code << renderbuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenerateMipmapOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenerateMipmapOES)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenerateMipmapOES(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFramebufferAttachmentParameterivOES)(target, attachment, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFramebufferAttachmentParameterivOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetRenderbufferParameterivOES)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetRenderbufferParameterivOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsFramebufferOES(GLuint framebuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsFramebufferOES)(framebuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsFramebufferOES(";
                   _code << framebuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsRenderbufferOES(GLuint renderbuffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsRenderbufferOES)(renderbuffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsRenderbufferOES(";
                   _code << renderbuffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glRenderbufferStorageOES)(target, internalformat, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glRenderbufferStorageOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetProgramBinaryOES)(program, bufSize, length, binaryFormat, binary);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetProgramBinaryOES(";
                   _code << program;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << binaryFormat;
    _code << ", "; _code << binary;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glProgramBinaryOES(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLint length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glProgramBinaryOES)(program, binaryFormat, binary, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glProgramBinaryOES(";
                   _code << program;
    _code << ", "; _code << toString(binaryFormat);
    _code << ", "; _code << binary;
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetBufferPointervOES)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetBufferPointervOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLvoid *REGAL_CALL code_glMapBufferOES(GLenum target, GLenum access)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLvoid * _ret = _next->call(&_next->glMapBufferOES)(target, access);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMapBufferOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(access);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glUnmapBufferOES(GLenum target)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glUnmapBufferOES)(target);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glUnmapBufferOES(";
                   _code << toString(target);
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glCurrentPaletteMatrixOES(GLuint index)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCurrentPaletteMatrixOES)(index);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCurrentPaletteMatrixOES(";
                   _code << index;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glMatrixIndexPointerOES)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glMatrixIndexPointerOES(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glWeightPointerOES(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glWeightPointerOES)(size, type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glWeightPointerOES(";
                   _code << size;
    _code << ", "; _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClearDepthfOES(GLclampd depth)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClearDepthfOES)(depth);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClearDepthfOES(";
                   _code << depth;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glClipPlanefOES(GLenum plane, const GLfloat *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glClipPlanefOES)(plane, equation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glClipPlanefOES(";
                   _code << toString(plane);
    _code << ", "; _code << equation;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDepthRangefOES(GLclampf n, GLclampf f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDepthRangefOES)(n, f);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDepthRangefOES(";
                   _code << n;
    _code << ", "; _code << f;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFrustumfOES)(l, r, b, t, n, f);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFrustumfOES(";
                   _code << l;
    _code << ", "; _code << r;
    _code << ", "; _code << b;
    _code << ", "; _code << t;
    _code << ", "; _code << n;
    _code << ", "; _code << f;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetClipPlanefOES(GLenum plane, GLfloat *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetClipPlanefOES)(plane, equation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetClipPlanefOES(";
                   _code << toString(plane);
    _code << ", "; _code << equation;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glOrthofOES)(l, r, b, t, n, f);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glOrthofOES(";
                   _code << l;
    _code << ", "; _code << r;
    _code << ", "; _code << b;
    _code << ", "; _code << t;
    _code << ", "; _code << n;
    _code << ", "; _code << f;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexImage3DOES)(target, level, internalformat, width, height, depth, border, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexImage3DOES(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCompressedTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCompressedTexSubImage3DOES(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << imageSize;
    _code << ", "; _code << data;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyTexSubImage3DOES(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFramebufferTexture3DOES)(target, attachment, textarget, texture, level, zoffset);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFramebufferTexture3DOES(";
                   _code << toString(target);
    _code << ", "; _code << toString(attachment);
    _code << ", "; _code << toString(textarget);
    _code << ", "; _code << texture;
    _code << ", "; _code << level;
    _code << ", "; _code << zoffset;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage3DOES(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage3DOES)(target, level, internalFormat, width, height, depth, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage3DOES(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(internalFormat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage3DOES)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexSubImage3DOES(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenfvOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGenfvOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenivOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGenivOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexGenxvOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexGenxvOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfOES)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenfOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenfvOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenfvOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGeniOES)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGeniOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenivOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenivOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenxOES)(coord, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenxOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexGenxvOES)(coord, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexGenxvOES(";
                   _code << toString(coord);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glBindVertexArrayOES(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glBindVertexArrayOES)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glBindVertexArrayOES(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteVertexArraysOES(GLsizei n, const GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteVertexArraysOES)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteVertexArraysOES(";
                   _code << n;
    _code << ", "; _code << arrays;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGenVertexArraysOES(GLsizei n, GLuint *arrays)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGenVertexArraysOES)(n, arrays);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenVertexArraysOES(";
                   _code << n;
    _code << ", "; _code << arrays;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glIsVertexArrayOES(GLuint array)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsVertexArrayOES)(array);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsVertexArrayOES(";
                   _code << array;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glHintPGI(GLenum target, GLint mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glHintPGI)(target, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glHintPGI(";
                   _code << toString(target);
    _code << ", "; _code << mode;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAlphaFuncQCOM(GLenum func, GLclampf ref)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAlphaFuncQCOM)(func, ref);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAlphaFuncQCOM(";
                   _code << toString(func);
    _code << ", "; _code << ref;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDisableDriverControlQCOM(GLuint driverControl)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDisableDriverControlQCOM)(driverControl);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDisableDriverControlQCOM(";
                   _code << driverControl;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glEnableDriverControlQCOM(GLuint driverControl)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEnableDriverControlQCOM)(driverControl);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEnableDriverControlQCOM(";
                   _code << driverControl;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlStringQCOM)(driverControl, bufSize, length, driverControlString);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDriverControlStringQCOM(";
                   _code << driverControl;
    _code << ", "; _code << bufSize;
    _code << ", "; _code << length;
    _code << ", "; _code << boost::print::quote(driverControlString,'"');
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDriverControlsQCOM(GLint *num, GLsizei size, GLuint *driverControls)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDriverControlsQCOM)(num, size, driverControls);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDriverControlsQCOM(";
                   _code << num;
    _code << ", "; _code << size;
    _code << ", "; _code << driverControls;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetBufferPointervQCOM(GLenum target, GLvoid **params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetBufferPointervQCOM)(target, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetBufferPointervQCOM(";
                   _code << toString(target);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetBuffersQCOM(GLuint *buffers, GLint maxBuffers, GLint *numBuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetBuffersQCOM)(buffers, maxBuffers, numBuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetBuffersQCOM(";
                   _code << buffers;
    _code << ", "; _code << maxBuffers;
    _code << ", "; _code << numBuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetFramebuffersQCOM(GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetFramebuffersQCOM)(framebuffers, maxFramebuffers, numFramebuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetFramebuffersQCOM(";
                   _code << framebuffers;
    _code << ", "; _code << maxFramebuffers;
    _code << ", "; _code << numFramebuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetRenderbuffersQCOM(GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetRenderbuffersQCOM)(renderbuffers, maxRenderbuffers, numRenderbuffers);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetRenderbuffersQCOM(";
                   _code << renderbuffers;
    _code << ", "; _code << maxRenderbuffers;
    _code << ", "; _code << numRenderbuffers;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexLevelParameterivQCOM)(texture, face, level, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetTexLevelParameterivQCOM(";
                   _code << texture;
    _code << ", "; _code << toString(face);
    _code << ", "; _code << level;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *texels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexSubImageQCOM)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetTexSubImageQCOM(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << texels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetTexturesQCOM(GLuint *textures, GLint maxTextures, GLint *numTextures)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetTexturesQCOM)(textures, maxTextures, numTextures);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetTexturesQCOM(";
                   _code << textures;
    _code << ", "; _code << maxTextures;
    _code << ", "; _code << numTextures;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtTexObjectStateOverrideiQCOM)(target, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtTexObjectStateOverrideiQCOM(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar *source, GLint *length)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramBinarySourceQCOM)(program, shadertype, source, length);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetProgramBinarySourceQCOM(";
                   _code << program;
    _code << ", "; _code << toString(shadertype);
    _code << ", "; _code << boost::print::quote(source,'"');
    _code << ", "; _code << length;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetProgramsQCOM(GLuint *programs, GLint maxPrograms, GLint *numPrograms)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetProgramsQCOM)(programs, maxPrograms, numPrograms);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetProgramsQCOM(";
                   _code << programs;
    _code << ", "; _code << maxPrograms;
    _code << ", "; _code << numPrograms;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glExtGetShadersQCOM(GLuint *shaders, GLint maxShaders, GLint *numShaders)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glExtGetShadersQCOM)(shaders, maxShaders, numShaders);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtGetShadersQCOM(";
                   _code << shaders;
    _code << ", "; _code << maxShaders;
    _code << ", "; _code << numShaders;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLboolean REGAL_CALL code_glExtIsProgramBinaryQCOM(GLuint program)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glExtIsProgramBinaryQCOM)(program);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glExtIsProgramBinaryQCOM(";
                   _code << program;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glEndTilingQCOM(GLbitfield preserveMask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glEndTilingQCOM)(preserveMask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glEndTilingQCOM(";
                   _code << preserveMask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStartTilingQCOM)(x, y, width, height, preserveMask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStartTilingQCOM(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << preserveMask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointSizePointerOES)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointSizePointerOES(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLogMessageCallbackREGAL(GLLOGPROCREGAL callback)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLogMessageCallbackREGAL)(callback);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLogMessageCallbackREGAL(";
                   _code << "/* callback = ?? */";
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDetailTexFuncSGIS)(target, n, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDetailTexFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << n;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetDetailTexFuncSGIS)(target, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetDetailTexFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFogFuncSGIS(GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFogFuncSGIS)(n, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFogFuncSGIS(";
                   _code << n;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFogFuncSGIS(GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFogFuncSGIS)(points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFogFuncSGIS(";
                   _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSampleMaskSGIS(GLclampf value, GLboolean invert)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSampleMaskSGIS)(value, invert);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSampleMaskSGIS(";
                   _code << value;
    _code << ", "; _code << toString(invert);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSamplePatternSGIS(GLenum pattern)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSamplePatternSGIS)(pattern);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSamplePatternSGIS(";
                   _code << toString(pattern);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterfvSGIS)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelTexGenParameterfvSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetPixelTexGenParameterivSGIS)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetPixelTexGenParameterivSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfSGIS)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTexGenParameterfSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterfvSGIS)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTexGenParameterfvSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameteriSGIS)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTexGenParameteriSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenParameterivSGIS)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTexGenParameterivSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfSGIS(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfSGIS)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPointParameterfvSGIS(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPointParameterfvSGIS)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPointParameterfvSGIS(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetSharpenTexFuncSGIS)(target, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetSharpenTexFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSharpenTexFuncSGIS)(target, n, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSharpenTexFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << n;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexImage4DSGIS)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexImage4DSGIS(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << internalFormatToString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << size4d;
    _code << ", "; _code << border;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexSubImage4DSGIS)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexSubImage4DSGIS(";
                   _code << toString(target);
    _code << ", "; _code << level;
    _code << ", "; _code << xoffset;
    _code << ", "; _code << yoffset;
    _code << ", "; _code << zoffset;
    _code << ", "; _code << woffset;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << depth;
    _code << ", "; _code << size4d;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureColorMaskSGIS)(red, green, blue, alpha);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureColorMaskSGIS(";
                   _code << toString(red);
    _code << ", "; _code << toString(green);
    _code << ", "; _code << toString(blue);
    _code << ", "; _code << toString(alpha);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetTexFilterFuncSGIS)(target, filter, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetTexFilterFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << toString(filter);
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexFilterFuncSGIS)(target, filter, n, weights);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexFilterFuncSGIS(";
                   _code << toString(target);
    _code << ", "; _code << toString(filter);
    _code << ", "; _code << n;
    _code << ", "; _code << weights;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAsyncMarkerSGIX(GLuint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAsyncMarkerSGIX)(marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAsyncMarkerSGIX(";
                   _code << marker;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeleteAsyncMarkersSGIX)(marker, range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeleteAsyncMarkersSGIX(";
                   _code << marker;
    _code << ", "; _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glFinishAsyncSGIX(GLuint *markerp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glFinishAsyncSGIX)(markerp);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _markerpIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _markerpIndex << "[" << (1) << "];\n";
    _code << indent << "glFinishAsyncSGIX(";
                   _code << "o" << _markerpIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLuint REGAL_CALL code_glGenAsyncMarkersSGIX(GLsizei range)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLuint  _ret = _next->call(&_next->glGenAsyncMarkersSGIX)(range);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGenAsyncMarkersSGIX(";
                   _code << range;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLboolean REGAL_CALL code_glIsAsyncMarkerSGIX(GLuint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLboolean  _ret = _next->call(&_next->glIsAsyncMarkerSGIX)(marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIsAsyncMarkerSGIX(";
                   _code << marker;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static GLint REGAL_CALL code_glPollAsyncSGIX(GLuint *markerp)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glPollAsyncSGIX)(markerp);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _markerpIndex = _context->codeOutputNext++;
    _code << indent << "GLuint o" << _markerpIndex << "[" << (1) << "];\n";
    _code << indent << "glPollAsyncSGIX(";
                   _code << "o" << _markerpIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glFlushRasterSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFlushRasterSGIX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFlushRasterSGIX();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTextureFogSGIX(GLenum pname)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTextureFogSGIX)(pname);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTextureFogSGIX(";
                   _code << toString(pname);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentColorMaterialSGIX)(face, mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentColorMaterialSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfSGIX)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelfSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelfvSGIX)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelfvSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModeliSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModeliSGIX)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModeliSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightModelivSGIX(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightModelivSGIX)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightModelivSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfSGIX)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightfSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightfvSGIX)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightfvSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightiSGIX)(light, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightiSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentLightivSGIX)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentLightivSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfSGIX)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialfSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialfvSGIX)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialfvSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialiSGIX)(face, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialiSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFragmentMaterialivSGIX)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFragmentMaterialivSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightfvSGIX)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentLightfvSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentLightivSGIX)(light, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentLightivSGIX(";
                   _code << toString(light);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialfvSGIX)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentMaterialfvSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetFragmentMaterialivSGIX)(face, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetFragmentMaterialivSGIX(";
                   _code << toString(face);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLightEnviSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLightEnviSGIX)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLightEnviSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFrameZoomSGIX(GLint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFrameZoomSGIX)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFrameZoomSGIX(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glIglooInterfaceSGIX(GLenum pname, const GLvoid *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glIglooInterfaceSGIX)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glIglooInterfaceSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glGetInstrumentsSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glGetInstrumentsSGIX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetInstrumentsSGIX();\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glInstrumentsBufferSGIX)(size, buffer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glInstrumentsBufferSGIX(";
                   _code << size;
    _code << ", "; _code << buffer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static GLint REGAL_CALL code_glPollInstrumentsSGIX(GLint *marker_p)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    GLint  _ret = _next->call(&_next->glPollInstrumentsSGIX)(marker_p);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _marker_pIndex = _context->codeOutputNext++;
    _code << indent << "GLint o" << _marker_pIndex << "[" << (1) << "];\n";
    _code << indent << "glPollInstrumentsSGIX(";
                   _code << "o" << _marker_pIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
    return _ret;
}

static void REGAL_CALL code_glReadInstrumentsSGIX(GLint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadInstrumentsSGIX)(marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadInstrumentsSGIX(";
                   _code << marker;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStartInstrumentsSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStartInstrumentsSGIX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStartInstrumentsSGIX();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glStopInstrumentsSGIX(GLint marker)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glStopInstrumentsSGIX)(marker);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glStopInstrumentsSGIX(";
                   _code << marker;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterfvSGIX)(list, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetListParameterfvSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetListParameterivSGIX)(list, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetListParameterivSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glListParameterfSGIX)(list, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glListParameterfSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glListParameterfvSGIX)(list, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glListParameterfvSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glListParameteriSGIX)(list, pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glListParameteriSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glListParameterivSGIX)(list, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glListParameterivSGIX(";
                   _code << list;
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glPixelTexGenSGIX(GLenum mode)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glPixelTexGenSGIX)(mode);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glPixelTexGenSGIX(";
                   _code << toString(mode);
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeformSGIX(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeformSGIX)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeformSGIX(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3dSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeformationMap3dSGIX(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << w1;
    _code << ", "; _code << w2;
    _code << ", "; _code << wstride;
    _code << ", "; _code << worder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDeformationMap3fSGIX)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDeformationMap3fSGIX(";
                   _code << toString(target);
    _code << ", "; _code << u1;
    _code << ", "; _code << u2;
    _code << ", "; _code << ustride;
    _code << ", "; _code << uorder;
    _code << ", "; _code << v1;
    _code << ", "; _code << v2;
    _code << ", "; _code << vstride;
    _code << ", "; _code << vorder;
    _code << ", "; _code << w1;
    _code << ", "; _code << w2;
    _code << ", "; _code << wstride;
    _code << ", "; _code << worder;
    _code << ", "; _code << points;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glLoadIdentityDeformationMapSGIX(GLbitfield mask)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glLoadIdentityDeformationMapSGIX)(mask);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glLoadIdentityDeformationMapSGIX(";
                   _code << mask;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReferencePlaneSGIX(const GLdouble *equation)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReferencePlaneSGIX)(equation);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _equationIndex = _context->codeInputNext++;
    _code << indent << "const GLdouble i" << _equationIndex << "[4] = " << array<GLdouble,const char * const>(equation,4,"","{ "," };\n",", ");
    _code << indent << "glReferencePlaneSGIX(";
                   _code << "i" << _equationIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSpriteParameterfSGIX(GLenum pname, GLfloat param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfSGIX)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSpriteParameterfSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterfvSGIX)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSpriteParameterfvSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSpriteParameteriSGIX(GLenum pname, GLint param)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameteriSGIX)(pname, param);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSpriteParameteriSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << param;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glSpriteParameterivSGIX(GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glSpriteParameterivSGIX)(pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glSpriteParameterivSGIX(";
                   _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTagSampleBufferSGIX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTagSampleBufferSGIX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTagSampleBufferSGIX();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterfvSGI)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableParameterfvSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableParameterivSGI)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableParameterivSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColorTableSGI)(target, internalformat, width, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColorTableSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << width;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glCopyColorTableSGI)(target, internalformat, x, y, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glCopyColorTableSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(internalformat);
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterfvSGI)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameterfvSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableParameterivSGI)(target, pname, params);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableParameterivSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(pname);
    _code << ", "; _code << params;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGetColorTableSGI(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGetColorTableSGI)(target, format, type, table);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGetColorTableSGI(";
                   _code << toString(target);
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << table;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glFinishTextureSUNX(void)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glFinishTextureSUNX)();
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glFinishTextureSUNX();\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactorbSUN(GLbyte factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorbSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactorbSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactordSUN(GLdouble factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactordSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactordSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactorfSUN(GLfloat factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorfSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactorfSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactoriSUN(GLint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoriSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactoriSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactorsSUN(GLshort factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorsSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactorsSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactorubSUN(GLubyte factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorubSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactorubSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactoruiSUN(GLuint factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactoruiSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactoruiSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glGlobalAlphaFactorusSUN(GLushort factor)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glGlobalAlphaFactorusSUN)(factor);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glGlobalAlphaFactorusSUN(";
                   _code << factor;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glDrawMeshArraysSUN)(mode, first, count, width);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glDrawMeshArraysSUN(";
                   _code << toString(mode);
    _code << ", "; _code << first;
    _code << ", "; _code << count;
    _code << ", "; _code << width;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReadVideoPixelsSUN(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReadVideoPixelsSUN)(x, y, width, height, format, type, pixels);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReadVideoPixelsSUN(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ", "; _code << toString(format);
    _code << ", "; _code << toString(type);
    _code << ", "; _code << pixels;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodePointerSUN(GLenum type, GLsizei stride, const GLvoid **pointer)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodePointerSUN)(type, stride, pointer);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodePointerSUN(";
                   _code << toString(type);
    _code << ", "; _code << stride;
    _code << ", "; _code << pointer;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeubSUN(GLubyte code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeubSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeubvSUN(const GLubyte *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeubvSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeubvSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiSUN(GLuint code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuivSUN(const GLuint *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuivSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuivSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeusSUN(GLushort code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeusSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeusvSUN(const GLushort *code)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeusvSUN)(code);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeusvSUN(";
                   _code << code;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fSUN)(r, g, b, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor3fVertex3fSUN(";
                   _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor3fVertex3fvSUN)(c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[3] = " << array<GLfloat,const char * const>(c,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor3fVertex3fvSUN(";
                   _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fSUN)(r, g, b, a, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4fNormal3fVertex3fSUN(";
                   _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4fNormal3fVertex3fvSUN)(c, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[4] = " << array<GLfloat,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor4fNormal3fVertex3fvSUN(";
                   _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fSUN)(r, g, b, a, x, y);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4ubVertex2fSUN(";
                   _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex2fvSUN)(c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _cIndex << "[4] = " << array<GLubyte,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[2] = " << array<GLfloat,const char * const>(v,2,"","{ "," };\n",", ");
    _code << indent << "glColor4ubVertex2fvSUN(";
                   _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fSUN)(r, g, b, a, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glColor4ubVertex3fSUN(";
                   _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glColor4ubVertex3fvSUN)(c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _cIndex << "[4] = " << array<GLubyte,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glColor4ubVertex3fvSUN(";
                   _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fSUN)(nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glNormal3fVertex3fSUN(";
                   _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glNormal3fVertex3fvSUN)(n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glNormal3fVertex3fvSUN(";
                   _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fSUN)(rc, r, g, b, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiColor3fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor3fVertex3fvSUN)(rc, c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[3] = " << array<GLfloat,const char * const>(c,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiColor3fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fSUN)(rc, r, g, b, a, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiColor4fNormal3fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4fNormal3fVertex3fvSUN)(rc, c, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[4] = " << array<GLfloat,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiColor4fNormal3fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fSUN)(rc, r, g, b, a, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiColor4ubVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiColor4ubVertex3fvSUN)(rc, c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _cIndex << "[4] = " << array<GLubyte,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiColor4ubVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fSUN)(rc, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiNormal3fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiNormal3fVertex3fvSUN)(rc, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiNormal3fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(rc, tc, c, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[4] = " << array<GLfloat,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(rc, s, t, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(rc, tc, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fSUN)(rc, s, t, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiTexCoord2fVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiTexCoord2fVertex3fvSUN)(rc, tc, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiTexCoord2fVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fSUN)(rc, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glReplacementCodeuiVertex3fSUN(";
                   _code << rc;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glReplacementCodeuiVertex3fvSUN)(rc, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _rcIndex = _context->codeInputNext++;
    _code << indent << "const GLuint i" << _rcIndex << "[1] = " << array<GLuint,const char * const>(rc,1,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glReplacementCodeuiVertex3fvSUN(";
                   _code << "i" << _rcIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fSUN)(s, t, r, g, b, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2fColor3fVertex3fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor3fVertex3fvSUN)(tc, c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[3] = " << array<GLfloat,const char * const>(c,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fColor3fVertex3fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fSUN)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2fColor4fNormal3fVertex3fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4fNormal3fVertex3fvSUN)(tc, c, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[4] = " << array<GLfloat,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fColor4fNormal3fVertex3fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fSUN)(s, t, r, g, b, a, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2fColor4ubVertex3fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fColor4ubVertex3fvSUN)(tc, c, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLubyte i" << _cIndex << "[4] = " << array<GLubyte,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fColor4ubVertex3fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fSUN)(s, t, nx, ny, nz, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2fNormal3fVertex3fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fNormal3fVertex3fvSUN)(tc, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fNormal3fVertex3fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fSUN)(s, t, x, y, z);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord2fVertex3fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord2fVertex3fvSUN)(tc, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[2] = " << array<GLfloat,const char * const>(tc,2,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[3] = " << array<GLfloat,const char * const>(v,3,"","{ "," };\n",", ");
    _code << indent << "glTexCoord2fVertex3fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fSUN)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4fColor4fNormal3fVertex4fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << p;
    _code << ", "; _code << q;
    _code << ", "; _code << r;
    _code << ", "; _code << g;
    _code << ", "; _code << b;
    _code << ", "; _code << a;
    _code << ", "; _code << nx;
    _code << ", "; _code << ny;
    _code << ", "; _code << nz;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fColor4fNormal3fVertex4fvSUN)(tc, c, n, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[4] = " << array<GLfloat,const char * const>(tc,4,"","{ "," };\n",", ");
    size_t _cIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _cIndex << "[4] = " << array<GLfloat,const char * const>(c,4,"","{ "," };\n",", ");
    size_t _nIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _nIndex << "[3] = " << array<GLfloat,const char * const>(n,3,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4fColor4fNormal3fVertex4fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _cIndex;
    _code << ", "; _code << "i" << _nIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fSUN)(s, t, p, q, x, y, z, w);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glTexCoord4fVertex4fSUN(";
                   _code << s;
    _code << ", "; _code << t;
    _code << ", "; _code << p;
    _code << ", "; _code << q;
    _code << ", "; _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << z;
    _code << ", "; _code << w;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glTexCoord4fVertex4fvSUN)(tc, v);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    size_t _tcIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _tcIndex << "[4] = " << array<GLfloat,const char * const>(tc,4,"","{ "," };\n",", ");
    size_t _vIndex = _context->codeInputNext++;
    _code << indent << "const GLfloat i" << _vIndex << "[4] = " << array<GLfloat,const char * const>(v,4,"","{ "," };\n",", ");
    _code << indent << "glTexCoord4fVertex4fvSUN(";
                   _code << "i" << _tcIndex;
    _code << ", "; _code << "i" << _vIndex;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

static void REGAL_CALL code_glAddSwapHintRectWIN(GLint x, GLint y, GLsizei width, GLsizei height)
{
    RegalContext *_context = REGAL_GET_CONTEXT();
    RegalAssert(_context);
    DispatchTable *_next = _context->dispatcher.code._next;
    RegalAssert(_next);
    _next->call(&_next->glAddSwapHintRectWIN)(x, y, width, height);
    std::string indent((_context->depthBeginEnd + _context->depthPushAttrib)*2,' ');
    string_list< ::std::string > _code;
    _code << indent << "glAddSwapHintRectWIN(";
                   _code << x;
    _code << ", "; _code << y;
    _code << ", "; _code << width;
    _code << ", "; _code << height;
    _code << ");\n";
    printf("%s",_code.str().c_str());
}

void InitDispatchTableCode(DispatchTable &tbl)
{
  tbl.glAccum = code_glAccum;
  tbl.glAlphaFunc = code_glAlphaFunc;
  tbl.glBegin = code_glBegin;
  tbl.glBitmap = code_glBitmap;
  tbl.glBlendFunc = code_glBlendFunc;
  tbl.glCallList = code_glCallList;
  tbl.glCallLists = code_glCallLists;
  tbl.glClear = code_glClear;
  tbl.glClearAccum = code_glClearAccum;
  tbl.glClearColor = code_glClearColor;
  tbl.glClearDepth = code_glClearDepth;
  tbl.glClearIndex = code_glClearIndex;
  tbl.glClearStencil = code_glClearStencil;
  tbl.glClipPlane = code_glClipPlane;
  tbl.glColor3b = code_glColor3b;
  tbl.glColor3bv = code_glColor3bv;
  tbl.glColor3d = code_glColor3d;
  tbl.glColor3dv = code_glColor3dv;
  tbl.glColor3f = code_glColor3f;
  tbl.glColor3fv = code_glColor3fv;
  tbl.glColor3i = code_glColor3i;
  tbl.glColor3iv = code_glColor3iv;
  tbl.glColor3s = code_glColor3s;
  tbl.glColor3sv = code_glColor3sv;
  tbl.glColor3ub = code_glColor3ub;
  tbl.glColor3ubv = code_glColor3ubv;
  tbl.glColor3ui = code_glColor3ui;
  tbl.glColor3uiv = code_glColor3uiv;
  tbl.glColor3us = code_glColor3us;
  tbl.glColor3usv = code_glColor3usv;
  tbl.glColor4b = code_glColor4b;
  tbl.glColor4bv = code_glColor4bv;
  tbl.glColor4d = code_glColor4d;
  tbl.glColor4dv = code_glColor4dv;
  tbl.glColor4f = code_glColor4f;
  tbl.glColor4fv = code_glColor4fv;
  tbl.glColor4i = code_glColor4i;
  tbl.glColor4iv = code_glColor4iv;
  tbl.glColor4s = code_glColor4s;
  tbl.glColor4sv = code_glColor4sv;
  tbl.glColor4ub = code_glColor4ub;
  tbl.glColor4ubv = code_glColor4ubv;
  tbl.glColor4ui = code_glColor4ui;
  tbl.glColor4uiv = code_glColor4uiv;
  tbl.glColor4us = code_glColor4us;
  tbl.glColor4usv = code_glColor4usv;
  tbl.glColorMask = code_glColorMask;
  tbl.glColorMaterial = code_glColorMaterial;
  tbl.glCopyPixels = code_glCopyPixels;
  tbl.glCullFace = code_glCullFace;
  tbl.glDeleteLists = code_glDeleteLists;
  tbl.glDepthFunc = code_glDepthFunc;
  tbl.glDepthMask = code_glDepthMask;
  tbl.glDepthRange = code_glDepthRange;
  tbl.glDisable = code_glDisable;
  tbl.glDrawBuffer = code_glDrawBuffer;
  tbl.glDrawPixels = code_glDrawPixels;
  tbl.glEdgeFlag = code_glEdgeFlag;
  tbl.glEdgeFlagv = code_glEdgeFlagv;
  tbl.glEnable = code_glEnable;
  tbl.glEnd = code_glEnd;
  tbl.glEndList = code_glEndList;
  tbl.glEvalCoord1d = code_glEvalCoord1d;
  tbl.glEvalCoord1dv = code_glEvalCoord1dv;
  tbl.glEvalCoord1f = code_glEvalCoord1f;
  tbl.glEvalCoord1fv = code_glEvalCoord1fv;
  tbl.glEvalCoord2d = code_glEvalCoord2d;
  tbl.glEvalCoord2dv = code_glEvalCoord2dv;
  tbl.glEvalCoord2f = code_glEvalCoord2f;
  tbl.glEvalCoord2fv = code_glEvalCoord2fv;
  tbl.glEvalMesh1 = code_glEvalMesh1;
  tbl.glEvalMesh2 = code_glEvalMesh2;
  tbl.glEvalPoint1 = code_glEvalPoint1;
  tbl.glEvalPoint2 = code_glEvalPoint2;
  tbl.glFeedbackBuffer = code_glFeedbackBuffer;
  tbl.glFinish = code_glFinish;
  tbl.glFlush = code_glFlush;
  tbl.glFogf = code_glFogf;
  tbl.glFogfv = code_glFogfv;
  tbl.glFogi = code_glFogi;
  tbl.glFogiv = code_glFogiv;
  tbl.glFrontFace = code_glFrontFace;
  tbl.glFrustum = code_glFrustum;
  tbl.glGenLists = code_glGenLists;
  tbl.glGetBooleanv = code_glGetBooleanv;
  tbl.glGetClipPlane = code_glGetClipPlane;
  tbl.glGetDoublev = code_glGetDoublev;
  tbl.glGetError = code_glGetError;
  tbl.glGetFloatv = code_glGetFloatv;
  tbl.glGetIntegerv = code_glGetIntegerv;
  tbl.glGetLightfv = code_glGetLightfv;
  tbl.glGetLightiv = code_glGetLightiv;
  tbl.glGetMapdv = code_glGetMapdv;
  tbl.glGetMapfv = code_glGetMapfv;
  tbl.glGetMapiv = code_glGetMapiv;
  tbl.glGetMaterialfv = code_glGetMaterialfv;
  tbl.glGetMaterialiv = code_glGetMaterialiv;
  tbl.glGetPixelMapfv = code_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = code_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = code_glGetPixelMapusv;
  tbl.glGetPolygonStipple = code_glGetPolygonStipple;
  tbl.glGetString = code_glGetString;
  tbl.glGetTexEnvfv = code_glGetTexEnvfv;
  tbl.glGetTexEnviv = code_glGetTexEnviv;
  tbl.glGetTexGendv = code_glGetTexGendv;
  tbl.glGetTexGenfv = code_glGetTexGenfv;
  tbl.glGetTexGeniv = code_glGetTexGeniv;
  tbl.glGetTexImage = code_glGetTexImage;
  tbl.glGetTexLevelParameterfv = code_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = code_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = code_glGetTexParameterfv;
  tbl.glGetTexParameteriv = code_glGetTexParameteriv;
  tbl.glHint = code_glHint;
  tbl.glIndexMask = code_glIndexMask;
  tbl.glIndexd = code_glIndexd;
  tbl.glIndexdv = code_glIndexdv;
  tbl.glIndexf = code_glIndexf;
  tbl.glIndexfv = code_glIndexfv;
  tbl.glIndexi = code_glIndexi;
  tbl.glIndexiv = code_glIndexiv;
  tbl.glIndexs = code_glIndexs;
  tbl.glIndexsv = code_glIndexsv;
  tbl.glInitNames = code_glInitNames;
  tbl.glIsEnabled = code_glIsEnabled;
  tbl.glIsList = code_glIsList;
  tbl.glLightModelf = code_glLightModelf;
  tbl.glLightModelfv = code_glLightModelfv;
  tbl.glLightModeli = code_glLightModeli;
  tbl.glLightModeliv = code_glLightModeliv;
  tbl.glLightf = code_glLightf;
  tbl.glLightfv = code_glLightfv;
  tbl.glLighti = code_glLighti;
  tbl.glLightiv = code_glLightiv;
  tbl.glLineStipple = code_glLineStipple;
  tbl.glLineWidth = code_glLineWidth;
  tbl.glListBase = code_glListBase;
  tbl.glLoadIdentity = code_glLoadIdentity;
  tbl.glLoadMatrixd = code_glLoadMatrixd;
  tbl.glLoadMatrixf = code_glLoadMatrixf;
  tbl.glLoadName = code_glLoadName;
  tbl.glLogicOp = code_glLogicOp;
  tbl.glMap1d = code_glMap1d;
  tbl.glMap1f = code_glMap1f;
  tbl.glMap2d = code_glMap2d;
  tbl.glMap2f = code_glMap2f;
  tbl.glMapGrid1d = code_glMapGrid1d;
  tbl.glMapGrid1f = code_glMapGrid1f;
  tbl.glMapGrid2d = code_glMapGrid2d;
  tbl.glMapGrid2f = code_glMapGrid2f;
  tbl.glMaterialf = code_glMaterialf;
  tbl.glMaterialfv = code_glMaterialfv;
  tbl.glMateriali = code_glMateriali;
  tbl.glMaterialiv = code_glMaterialiv;
  tbl.glMatrixMode = code_glMatrixMode;
  tbl.glMultMatrixd = code_glMultMatrixd;
  tbl.glMultMatrixf = code_glMultMatrixf;
  tbl.glNewList = code_glNewList;
  tbl.glNormal3b = code_glNormal3b;
  tbl.glNormal3bv = code_glNormal3bv;
  tbl.glNormal3d = code_glNormal3d;
  tbl.glNormal3dv = code_glNormal3dv;
  tbl.glNormal3f = code_glNormal3f;
  tbl.glNormal3fv = code_glNormal3fv;
  tbl.glNormal3i = code_glNormal3i;
  tbl.glNormal3iv = code_glNormal3iv;
  tbl.glNormal3s = code_glNormal3s;
  tbl.glNormal3sv = code_glNormal3sv;
  tbl.glOrtho = code_glOrtho;
  tbl.glPassThrough = code_glPassThrough;
  tbl.glPixelMapfv = code_glPixelMapfv;
  tbl.glPixelMapuiv = code_glPixelMapuiv;
  tbl.glPixelMapusv = code_glPixelMapusv;
  tbl.glPixelStoref = code_glPixelStoref;
  tbl.glPixelStorei = code_glPixelStorei;
  tbl.glPixelTransferf = code_glPixelTransferf;
  tbl.glPixelTransferi = code_glPixelTransferi;
  tbl.glPixelZoom = code_glPixelZoom;
  tbl.glPointSize = code_glPointSize;
  tbl.glPolygonMode = code_glPolygonMode;
  tbl.glPolygonStipple = code_glPolygonStipple;
  tbl.glPopAttrib = code_glPopAttrib;
  tbl.glPopMatrix = code_glPopMatrix;
  tbl.glPopName = code_glPopName;
  tbl.glPushAttrib = code_glPushAttrib;
  tbl.glPushMatrix = code_glPushMatrix;
  tbl.glPushName = code_glPushName;
  tbl.glRasterPos2d = code_glRasterPos2d;
  tbl.glRasterPos2dv = code_glRasterPos2dv;
  tbl.glRasterPos2f = code_glRasterPos2f;
  tbl.glRasterPos2fv = code_glRasterPos2fv;
  tbl.glRasterPos2i = code_glRasterPos2i;
  tbl.glRasterPos2iv = code_glRasterPos2iv;
  tbl.glRasterPos2s = code_glRasterPos2s;
  tbl.glRasterPos2sv = code_glRasterPos2sv;
  tbl.glRasterPos3d = code_glRasterPos3d;
  tbl.glRasterPos3dv = code_glRasterPos3dv;
  tbl.glRasterPos3f = code_glRasterPos3f;
  tbl.glRasterPos3fv = code_glRasterPos3fv;
  tbl.glRasterPos3i = code_glRasterPos3i;
  tbl.glRasterPos3iv = code_glRasterPos3iv;
  tbl.glRasterPos3s = code_glRasterPos3s;
  tbl.glRasterPos3sv = code_glRasterPos3sv;
  tbl.glRasterPos4d = code_glRasterPos4d;
  tbl.glRasterPos4dv = code_glRasterPos4dv;
  tbl.glRasterPos4f = code_glRasterPos4f;
  tbl.glRasterPos4fv = code_glRasterPos4fv;
  tbl.glRasterPos4i = code_glRasterPos4i;
  tbl.glRasterPos4iv = code_glRasterPos4iv;
  tbl.glRasterPos4s = code_glRasterPos4s;
  tbl.glRasterPos4sv = code_glRasterPos4sv;
  tbl.glReadBuffer = code_glReadBuffer;
  tbl.glReadPixels = code_glReadPixels;
  tbl.glRectd = code_glRectd;
  tbl.glRectdv = code_glRectdv;
  tbl.glRectf = code_glRectf;
  tbl.glRectfv = code_glRectfv;
  tbl.glRecti = code_glRecti;
  tbl.glRectiv = code_glRectiv;
  tbl.glRects = code_glRects;
  tbl.glRectsv = code_glRectsv;
  tbl.glRenderMode = code_glRenderMode;
  tbl.glRotated = code_glRotated;
  tbl.glRotatef = code_glRotatef;
  tbl.glScaled = code_glScaled;
  tbl.glScalef = code_glScalef;
  tbl.glScissor = code_glScissor;
  tbl.glSelectBuffer = code_glSelectBuffer;
  tbl.glShadeModel = code_glShadeModel;
  tbl.glStencilFunc = code_glStencilFunc;
  tbl.glStencilMask = code_glStencilMask;
  tbl.glStencilOp = code_glStencilOp;
  tbl.glTexCoord1d = code_glTexCoord1d;
  tbl.glTexCoord1dv = code_glTexCoord1dv;
  tbl.glTexCoord1f = code_glTexCoord1f;
  tbl.glTexCoord1fv = code_glTexCoord1fv;
  tbl.glTexCoord1i = code_glTexCoord1i;
  tbl.glTexCoord1iv = code_glTexCoord1iv;
  tbl.glTexCoord1s = code_glTexCoord1s;
  tbl.glTexCoord1sv = code_glTexCoord1sv;
  tbl.glTexCoord2d = code_glTexCoord2d;
  tbl.glTexCoord2dv = code_glTexCoord2dv;
  tbl.glTexCoord2f = code_glTexCoord2f;
  tbl.glTexCoord2fv = code_glTexCoord2fv;
  tbl.glTexCoord2i = code_glTexCoord2i;
  tbl.glTexCoord2iv = code_glTexCoord2iv;
  tbl.glTexCoord2s = code_glTexCoord2s;
  tbl.glTexCoord2sv = code_glTexCoord2sv;
  tbl.glTexCoord3d = code_glTexCoord3d;
  tbl.glTexCoord3dv = code_glTexCoord3dv;
  tbl.glTexCoord3f = code_glTexCoord3f;
  tbl.glTexCoord3fv = code_glTexCoord3fv;
  tbl.glTexCoord3i = code_glTexCoord3i;
  tbl.glTexCoord3iv = code_glTexCoord3iv;
  tbl.glTexCoord3s = code_glTexCoord3s;
  tbl.glTexCoord3sv = code_glTexCoord3sv;
  tbl.glTexCoord4d = code_glTexCoord4d;
  tbl.glTexCoord4dv = code_glTexCoord4dv;
  tbl.glTexCoord4f = code_glTexCoord4f;
  tbl.glTexCoord4fv = code_glTexCoord4fv;
  tbl.glTexCoord4i = code_glTexCoord4i;
  tbl.glTexCoord4iv = code_glTexCoord4iv;
  tbl.glTexCoord4s = code_glTexCoord4s;
  tbl.glTexCoord4sv = code_glTexCoord4sv;
  tbl.glTexEnvf = code_glTexEnvf;
  tbl.glTexEnvfv = code_glTexEnvfv;
  tbl.glTexEnvi = code_glTexEnvi;
  tbl.glTexEnviv = code_glTexEnviv;
  tbl.glTexGend = code_glTexGend;
  tbl.glTexGendv = code_glTexGendv;
  tbl.glTexGenf = code_glTexGenf;
  tbl.glTexGenfv = code_glTexGenfv;
  tbl.glTexGeni = code_glTexGeni;
  tbl.glTexGeniv = code_glTexGeniv;
  tbl.glTexImage1D = code_glTexImage1D;
  tbl.glTexImage2D = code_glTexImage2D;
  tbl.glTexParameterf = code_glTexParameterf;
  tbl.glTexParameterfv = code_glTexParameterfv;
  tbl.glTexParameteri = code_glTexParameteri;
  tbl.glTexParameteriv = code_glTexParameteriv;
  tbl.glTranslated = code_glTranslated;
  tbl.glTranslatef = code_glTranslatef;
  tbl.glVertex2d = code_glVertex2d;
  tbl.glVertex2dv = code_glVertex2dv;
  tbl.glVertex2f = code_glVertex2f;
  tbl.glVertex2fv = code_glVertex2fv;
  tbl.glVertex2i = code_glVertex2i;
  tbl.glVertex2iv = code_glVertex2iv;
  tbl.glVertex2s = code_glVertex2s;
  tbl.glVertex2sv = code_glVertex2sv;
  tbl.glVertex3d = code_glVertex3d;
  tbl.glVertex3dv = code_glVertex3dv;
  tbl.glVertex3f = code_glVertex3f;
  tbl.glVertex3fv = code_glVertex3fv;
  tbl.glVertex3i = code_glVertex3i;
  tbl.glVertex3iv = code_glVertex3iv;
  tbl.glVertex3s = code_glVertex3s;
  tbl.glVertex3sv = code_glVertex3sv;
  tbl.glVertex4d = code_glVertex4d;
  tbl.glVertex4dv = code_glVertex4dv;
  tbl.glVertex4f = code_glVertex4f;
  tbl.glVertex4fv = code_glVertex4fv;
  tbl.glVertex4i = code_glVertex4i;
  tbl.glVertex4iv = code_glVertex4iv;
  tbl.glVertex4s = code_glVertex4s;
  tbl.glVertex4sv = code_glVertex4sv;
  tbl.glViewport = code_glViewport;
  tbl.glAreTexturesResident = code_glAreTexturesResident;
  tbl.glArrayElement = code_glArrayElement;
  tbl.glBindTexture = code_glBindTexture;
  tbl.glColorPointer = code_glColorPointer;
  tbl.glCopyTexImage1D = code_glCopyTexImage1D;
  tbl.glCopyTexImage2D = code_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = code_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = code_glCopyTexSubImage2D;
  tbl.glDeleteTextures = code_glDeleteTextures;
  tbl.glDisableClientState = code_glDisableClientState;
  tbl.glDrawArrays = code_glDrawArrays;
  tbl.glDrawElements = code_glDrawElements;
  tbl.glEdgeFlagPointer = code_glEdgeFlagPointer;
  tbl.glEnableClientState = code_glEnableClientState;
  tbl.glGenTextures = code_glGenTextures;
  tbl.glGetPointerv = code_glGetPointerv;
  tbl.glIndexPointer = code_glIndexPointer;
  tbl.glIndexub = code_glIndexub;
  tbl.glIndexubv = code_glIndexubv;
  tbl.glInterleavedArrays = code_glInterleavedArrays;
  tbl.glIsTexture = code_glIsTexture;
  tbl.glNormalPointer = code_glNormalPointer;
  tbl.glPolygonOffset = code_glPolygonOffset;
  tbl.glPopClientAttrib = code_glPopClientAttrib;
  tbl.glPrioritizeTextures = code_glPrioritizeTextures;
  tbl.glPushClientAttrib = code_glPushClientAttrib;
  tbl.glTexCoordPointer = code_glTexCoordPointer;
  tbl.glTexSubImage1D = code_glTexSubImage1D;
  tbl.glTexSubImage2D = code_glTexSubImage2D;
  tbl.glVertexPointer = code_glVertexPointer;
  tbl.glBlendColor = code_glBlendColor;
  tbl.glBlendEquation = code_glBlendEquation;
  tbl.glCopyTexSubImage3D = code_glCopyTexSubImage3D;
  tbl.glDrawRangeElements = code_glDrawRangeElements;
  tbl.glTexImage3D = code_glTexImage3D;
  tbl.glTexSubImage3D = code_glTexSubImage3D;
  tbl.glActiveTexture = code_glActiveTexture;
  tbl.glClientActiveTexture = code_glClientActiveTexture;
  tbl.glCompressedTexImage1D = code_glCompressedTexImage1D;
  tbl.glCompressedTexImage2D = code_glCompressedTexImage2D;
  tbl.glCompressedTexImage3D = code_glCompressedTexImage3D;
  tbl.glCompressedTexSubImage1D = code_glCompressedTexSubImage1D;
  tbl.glCompressedTexSubImage2D = code_glCompressedTexSubImage2D;
  tbl.glCompressedTexSubImage3D = code_glCompressedTexSubImage3D;
  tbl.glGetCompressedTexImage = code_glGetCompressedTexImage;
  tbl.glLoadTransposeMatrixd = code_glLoadTransposeMatrixd;
  tbl.glLoadTransposeMatrixf = code_glLoadTransposeMatrixf;
  tbl.glMultTransposeMatrixd = code_glMultTransposeMatrixd;
  tbl.glMultTransposeMatrixf = code_glMultTransposeMatrixf;
  tbl.glMultiTexCoord1d = code_glMultiTexCoord1d;
  tbl.glMultiTexCoord1dv = code_glMultiTexCoord1dv;
  tbl.glMultiTexCoord1f = code_glMultiTexCoord1f;
  tbl.glMultiTexCoord1fv = code_glMultiTexCoord1fv;
  tbl.glMultiTexCoord1i = code_glMultiTexCoord1i;
  tbl.glMultiTexCoord1iv = code_glMultiTexCoord1iv;
  tbl.glMultiTexCoord1s = code_glMultiTexCoord1s;
  tbl.glMultiTexCoord1sv = code_glMultiTexCoord1sv;
  tbl.glMultiTexCoord2d = code_glMultiTexCoord2d;
  tbl.glMultiTexCoord2dv = code_glMultiTexCoord2dv;
  tbl.glMultiTexCoord2f = code_glMultiTexCoord2f;
  tbl.glMultiTexCoord2fv = code_glMultiTexCoord2fv;
  tbl.glMultiTexCoord2i = code_glMultiTexCoord2i;
  tbl.glMultiTexCoord2iv = code_glMultiTexCoord2iv;
  tbl.glMultiTexCoord2s = code_glMultiTexCoord2s;
  tbl.glMultiTexCoord2sv = code_glMultiTexCoord2sv;
  tbl.glMultiTexCoord3d = code_glMultiTexCoord3d;
  tbl.glMultiTexCoord3dv = code_glMultiTexCoord3dv;
  tbl.glMultiTexCoord3f = code_glMultiTexCoord3f;
  tbl.glMultiTexCoord3fv = code_glMultiTexCoord3fv;
  tbl.glMultiTexCoord3i = code_glMultiTexCoord3i;
  tbl.glMultiTexCoord3iv = code_glMultiTexCoord3iv;
  tbl.glMultiTexCoord3s = code_glMultiTexCoord3s;
  tbl.glMultiTexCoord3sv = code_glMultiTexCoord3sv;
  tbl.glMultiTexCoord4d = code_glMultiTexCoord4d;
  tbl.glMultiTexCoord4dv = code_glMultiTexCoord4dv;
  tbl.glMultiTexCoord4f = code_glMultiTexCoord4f;
  tbl.glMultiTexCoord4fv = code_glMultiTexCoord4fv;
  tbl.glMultiTexCoord4i = code_glMultiTexCoord4i;
  tbl.glMultiTexCoord4iv = code_glMultiTexCoord4iv;
  tbl.glMultiTexCoord4s = code_glMultiTexCoord4s;
  tbl.glMultiTexCoord4sv = code_glMultiTexCoord4sv;
  tbl.glSampleCoverage = code_glSampleCoverage;
  tbl.glBlendFuncSeparate = code_glBlendFuncSeparate;
  tbl.glFogCoordPointer = code_glFogCoordPointer;
  tbl.glFogCoordd = code_glFogCoordd;
  tbl.glFogCoorddv = code_glFogCoorddv;
  tbl.glFogCoordf = code_glFogCoordf;
  tbl.glFogCoordfv = code_glFogCoordfv;
  tbl.glMultiDrawArrays = code_glMultiDrawArrays;
  tbl.glMultiDrawElements = code_glMultiDrawElements;
  tbl.glPointParameterf = code_glPointParameterf;
  tbl.glPointParameterfv = code_glPointParameterfv;
  tbl.glPointParameteri = code_glPointParameteri;
  tbl.glPointParameteriv = code_glPointParameteriv;
  tbl.glSecondaryColor3b = code_glSecondaryColor3b;
  tbl.glSecondaryColor3bv = code_glSecondaryColor3bv;
  tbl.glSecondaryColor3d = code_glSecondaryColor3d;
  tbl.glSecondaryColor3dv = code_glSecondaryColor3dv;
  tbl.glSecondaryColor3f = code_glSecondaryColor3f;
  tbl.glSecondaryColor3fv = code_glSecondaryColor3fv;
  tbl.glSecondaryColor3i = code_glSecondaryColor3i;
  tbl.glSecondaryColor3iv = code_glSecondaryColor3iv;
  tbl.glSecondaryColor3s = code_glSecondaryColor3s;
  tbl.glSecondaryColor3sv = code_glSecondaryColor3sv;
  tbl.glSecondaryColor3ub = code_glSecondaryColor3ub;
  tbl.glSecondaryColor3ubv = code_glSecondaryColor3ubv;
  tbl.glSecondaryColor3ui = code_glSecondaryColor3ui;
  tbl.glSecondaryColor3uiv = code_glSecondaryColor3uiv;
  tbl.glSecondaryColor3us = code_glSecondaryColor3us;
  tbl.glSecondaryColor3usv = code_glSecondaryColor3usv;
  tbl.glSecondaryColorPointer = code_glSecondaryColorPointer;
  tbl.glWindowPos2d = code_glWindowPos2d;
  tbl.glWindowPos2dv = code_glWindowPos2dv;
  tbl.glWindowPos2f = code_glWindowPos2f;
  tbl.glWindowPos2fv = code_glWindowPos2fv;
  tbl.glWindowPos2i = code_glWindowPos2i;
  tbl.glWindowPos2iv = code_glWindowPos2iv;
  tbl.glWindowPos2s = code_glWindowPos2s;
  tbl.glWindowPos2sv = code_glWindowPos2sv;
  tbl.glWindowPos3d = code_glWindowPos3d;
  tbl.glWindowPos3dv = code_glWindowPos3dv;
  tbl.glWindowPos3f = code_glWindowPos3f;
  tbl.glWindowPos3fv = code_glWindowPos3fv;
  tbl.glWindowPos3i = code_glWindowPos3i;
  tbl.glWindowPos3iv = code_glWindowPos3iv;
  tbl.glWindowPos3s = code_glWindowPos3s;
  tbl.glWindowPos3sv = code_glWindowPos3sv;
  tbl.glBeginQuery = code_glBeginQuery;
  tbl.glBindBuffer = code_glBindBuffer;
  tbl.glBufferData = code_glBufferData;
  tbl.glBufferSubData = code_glBufferSubData;
  tbl.glDeleteBuffers = code_glDeleteBuffers;
  tbl.glDeleteQueries = code_glDeleteQueries;
  tbl.glEndQuery = code_glEndQuery;
  tbl.glGenBuffers = code_glGenBuffers;
  tbl.glGenQueries = code_glGenQueries;
  tbl.glGetBufferParameteriv = code_glGetBufferParameteriv;
  tbl.glGetBufferPointerv = code_glGetBufferPointerv;
  tbl.glGetBufferSubData = code_glGetBufferSubData;
  tbl.glGetQueryObjectiv = code_glGetQueryObjectiv;
  tbl.glGetQueryObjectuiv = code_glGetQueryObjectuiv;
  tbl.glGetQueryiv = code_glGetQueryiv;
  tbl.glIsBuffer = code_glIsBuffer;
  tbl.glIsQuery = code_glIsQuery;
  tbl.glMapBuffer = code_glMapBuffer;
  tbl.glUnmapBuffer = code_glUnmapBuffer;
  tbl.glAttachShader = code_glAttachShader;
  tbl.glBindAttribLocation = code_glBindAttribLocation;
  tbl.glBlendEquationSeparate = code_glBlendEquationSeparate;
  tbl.glCompileShader = code_glCompileShader;
  tbl.glCreateProgram = code_glCreateProgram;
  tbl.glCreateShader = code_glCreateShader;
  tbl.glDeleteProgram = code_glDeleteProgram;
  tbl.glDeleteShader = code_glDeleteShader;
  tbl.glDetachShader = code_glDetachShader;
  tbl.glDisableVertexAttribArray = code_glDisableVertexAttribArray;
  tbl.glDrawBuffers = code_glDrawBuffers;
  tbl.glEnableVertexAttribArray = code_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = code_glGetActiveAttrib;
  tbl.glGetActiveUniform = code_glGetActiveUniform;
  tbl.glGetAttachedShaders = code_glGetAttachedShaders;
  tbl.glGetAttribLocation = code_glGetAttribLocation;
  tbl.glGetProgramInfoLog = code_glGetProgramInfoLog;
  tbl.glGetProgramiv = code_glGetProgramiv;
  tbl.glGetShaderInfoLog = code_glGetShaderInfoLog;
  tbl.glGetShaderSource = code_glGetShaderSource;
  tbl.glGetShaderiv = code_glGetShaderiv;
  tbl.glGetUniformLocation = code_glGetUniformLocation;
  tbl.glGetUniformfv = code_glGetUniformfv;
  tbl.glGetUniformiv = code_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = code_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = code_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = code_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = code_glGetVertexAttribiv;
  tbl.glIsProgram = code_glIsProgram;
  tbl.glIsShader = code_glIsShader;
  tbl.glLinkProgram = code_glLinkProgram;
  tbl.glShaderSource = code_glShaderSource;
  tbl.glStencilFuncSeparate = code_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = code_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = code_glStencilOpSeparate;
  tbl.glUniform1f = code_glUniform1f;
  tbl.glUniform1fv = code_glUniform1fv;
  tbl.glUniform1i = code_glUniform1i;
  tbl.glUniform1iv = code_glUniform1iv;
  tbl.glUniform2f = code_glUniform2f;
  tbl.glUniform2fv = code_glUniform2fv;
  tbl.glUniform2i = code_glUniform2i;
  tbl.glUniform2iv = code_glUniform2iv;
  tbl.glUniform3f = code_glUniform3f;
  tbl.glUniform3fv = code_glUniform3fv;
  tbl.glUniform3i = code_glUniform3i;
  tbl.glUniform3iv = code_glUniform3iv;
  tbl.glUniform4f = code_glUniform4f;
  tbl.glUniform4fv = code_glUniform4fv;
  tbl.glUniform4i = code_glUniform4i;
  tbl.glUniform4iv = code_glUniform4iv;
  tbl.glUniformMatrix2fv = code_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = code_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = code_glUniformMatrix4fv;
  tbl.glUseProgram = code_glUseProgram;
  tbl.glValidateProgram = code_glValidateProgram;
  tbl.glVertexAttrib1d = code_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = code_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = code_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = code_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = code_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = code_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = code_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = code_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = code_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = code_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = code_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = code_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = code_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = code_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = code_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = code_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = code_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = code_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = code_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = code_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = code_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = code_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = code_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = code_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = code_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = code_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = code_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = code_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = code_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = code_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = code_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = code_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = code_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = code_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = code_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = code_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = code_glVertexAttribPointer;
  tbl.glUniformMatrix2x3fv = code_glUniformMatrix2x3fv;
  tbl.glUniformMatrix2x4fv = code_glUniformMatrix2x4fv;
  tbl.glUniformMatrix3x2fv = code_glUniformMatrix3x2fv;
  tbl.glUniformMatrix3x4fv = code_glUniformMatrix3x4fv;
  tbl.glUniformMatrix4x2fv = code_glUniformMatrix4x2fv;
  tbl.glUniformMatrix4x3fv = code_glUniformMatrix4x3fv;
  tbl.glBeginConditionalRender = code_glBeginConditionalRender;
  tbl.glBeginTransformFeedback = code_glBeginTransformFeedback;
  tbl.glBindFragDataLocation = code_glBindFragDataLocation;
  tbl.glClampColor = code_glClampColor;
  tbl.glClearBufferfi = code_glClearBufferfi;
  tbl.glClearBufferfv = code_glClearBufferfv;
  tbl.glClearBufferiv = code_glClearBufferiv;
  tbl.glClearBufferuiv = code_glClearBufferuiv;
  tbl.glColorMaski = code_glColorMaski;
  tbl.glDisablei = code_glDisablei;
  tbl.glEnablei = code_glEnablei;
  tbl.glEndConditionalRender = code_glEndConditionalRender;
  tbl.glEndTransformFeedback = code_glEndTransformFeedback;
  tbl.glGetBooleani_v = code_glGetBooleani_v;
  tbl.glGetFragDataLocation = code_glGetFragDataLocation;
  tbl.glGetStringi = code_glGetStringi;
  tbl.glGetTexParameterIiv = code_glGetTexParameterIiv;
  tbl.glGetTexParameterIuiv = code_glGetTexParameterIuiv;
  tbl.glGetTransformFeedbackVarying = code_glGetTransformFeedbackVarying;
  tbl.glGetUniformuiv = code_glGetUniformuiv;
  tbl.glGetVertexAttribIiv = code_glGetVertexAttribIiv;
  tbl.glGetVertexAttribIuiv = code_glGetVertexAttribIuiv;
  tbl.glIsEnabledi = code_glIsEnabledi;
  tbl.glTexParameterIiv = code_glTexParameterIiv;
  tbl.glTexParameterIuiv = code_glTexParameterIuiv;
  tbl.glTransformFeedbackVaryings = code_glTransformFeedbackVaryings;
  tbl.glUniform1ui = code_glUniform1ui;
  tbl.glUniform1uiv = code_glUniform1uiv;
  tbl.glUniform2ui = code_glUniform2ui;
  tbl.glUniform2uiv = code_glUniform2uiv;
  tbl.glUniform3ui = code_glUniform3ui;
  tbl.glUniform3uiv = code_glUniform3uiv;
  tbl.glUniform4ui = code_glUniform4ui;
  tbl.glUniform4uiv = code_glUniform4uiv;
  tbl.glVertexAttribI1i = code_glVertexAttribI1i;
  tbl.glVertexAttribI1iv = code_glVertexAttribI1iv;
  tbl.glVertexAttribI1ui = code_glVertexAttribI1ui;
  tbl.glVertexAttribI1uiv = code_glVertexAttribI1uiv;
  tbl.glVertexAttribI2i = code_glVertexAttribI2i;
  tbl.glVertexAttribI2iv = code_glVertexAttribI2iv;
  tbl.glVertexAttribI2ui = code_glVertexAttribI2ui;
  tbl.glVertexAttribI2uiv = code_glVertexAttribI2uiv;
  tbl.glVertexAttribI3i = code_glVertexAttribI3i;
  tbl.glVertexAttribI3iv = code_glVertexAttribI3iv;
  tbl.glVertexAttribI3ui = code_glVertexAttribI3ui;
  tbl.glVertexAttribI3uiv = code_glVertexAttribI3uiv;
  tbl.glVertexAttribI4bv = code_glVertexAttribI4bv;
  tbl.glVertexAttribI4i = code_glVertexAttribI4i;
  tbl.glVertexAttribI4iv = code_glVertexAttribI4iv;
  tbl.glVertexAttribI4sv = code_glVertexAttribI4sv;
  tbl.glVertexAttribI4ubv = code_glVertexAttribI4ubv;
  tbl.glVertexAttribI4ui = code_glVertexAttribI4ui;
  tbl.glVertexAttribI4uiv = code_glVertexAttribI4uiv;
  tbl.glVertexAttribI4usv = code_glVertexAttribI4usv;
  tbl.glVertexAttribIPointer = code_glVertexAttribIPointer;
  tbl.glDrawArraysInstanced = code_glDrawArraysInstanced;
  tbl.glDrawElementsInstanced = code_glDrawElementsInstanced;
  tbl.glPrimitiveRestartIndex = code_glPrimitiveRestartIndex;
  tbl.glTexBuffer = code_glTexBuffer;
  tbl.glFramebufferTexture = code_glFramebufferTexture;
  tbl.glFramebufferTextureFace = code_glFramebufferTextureFace;
  tbl.glGetBufferParameteri64v = code_glGetBufferParameteri64v;
  tbl.glGetInteger64i_v = code_glGetInteger64i_v;
  tbl.glVertexAttribDivisor = code_glVertexAttribDivisor;
  tbl.glBlendEquationSeparatei = code_glBlendEquationSeparatei;
  tbl.glBlendEquationi = code_glBlendEquationi;
  tbl.glBlendFuncSeparatei = code_glBlendFuncSeparatei;
  tbl.glBlendFunci = code_glBlendFunci;
  tbl.glTbufferMask3DFX = code_glTbufferMask3DFX;
  tbl.glDebugMessageCallbackAMD = code_glDebugMessageCallbackAMD;
  tbl.glDebugMessageEnableAMD = code_glDebugMessageEnableAMD;
  tbl.glDebugMessageInsertAMD = code_glDebugMessageInsertAMD;
  tbl.glGetDebugMessageLogAMD = code_glGetDebugMessageLogAMD;
  tbl.glBlendEquationIndexedAMD = code_glBlendEquationIndexedAMD;
  tbl.glBlendEquationSeparateIndexedAMD = code_glBlendEquationSeparateIndexedAMD;
  tbl.glBlendFuncIndexedAMD = code_glBlendFuncIndexedAMD;
  tbl.glBlendFuncSeparateIndexedAMD = code_glBlendFuncSeparateIndexedAMD;
  tbl.glMultiDrawArraysIndirectAMD = code_glMultiDrawArraysIndirectAMD;
  tbl.glMultiDrawElementsIndirectAMD = code_glMultiDrawElementsIndirectAMD;
  tbl.glDeleteNamesAMD = code_glDeleteNamesAMD;
  tbl.glGenNamesAMD = code_glGenNamesAMD;
  tbl.glIsNameAMD = code_glIsNameAMD;
  tbl.glBeginPerfMonitorAMD = code_glBeginPerfMonitorAMD;
  tbl.glDeletePerfMonitorsAMD = code_glDeletePerfMonitorsAMD;
  tbl.glEndPerfMonitorAMD = code_glEndPerfMonitorAMD;
  tbl.glGenPerfMonitorsAMD = code_glGenPerfMonitorsAMD;
  tbl.glGetPerfMonitorCounterDataAMD = code_glGetPerfMonitorCounterDataAMD;
  tbl.glGetPerfMonitorCounterInfoAMD = code_glGetPerfMonitorCounterInfoAMD;
  tbl.glGetPerfMonitorCounterStringAMD = code_glGetPerfMonitorCounterStringAMD;
  tbl.glGetPerfMonitorCountersAMD = code_glGetPerfMonitorCountersAMD;
  tbl.glGetPerfMonitorGroupStringAMD = code_glGetPerfMonitorGroupStringAMD;
  tbl.glGetPerfMonitorGroupsAMD = code_glGetPerfMonitorGroupsAMD;
  tbl.glSelectPerfMonitorCountersAMD = code_glSelectPerfMonitorCountersAMD;
  tbl.glSetMultisamplefvAMD = code_glSetMultisamplefvAMD;
  tbl.glStencilOpValueAMD = code_glStencilOpValueAMD;
  tbl.glTessellationFactorAMD = code_glTessellationFactorAMD;
  tbl.glTessellationModeAMD = code_glTessellationModeAMD;
  tbl.glBlitFramebufferANGLE = code_glBlitFramebufferANGLE;
  tbl.glRenderbufferStorageMultisampleANGLE = code_glRenderbufferStorageMultisampleANGLE;
  tbl.glDrawArraysInstancedANGLE = code_glDrawArraysInstancedANGLE;
  tbl.glDrawElementsInstancedANGLE = code_glDrawElementsInstancedANGLE;
  tbl.glVertexAttribDivisorANGLE = code_glVertexAttribDivisorANGLE;
  tbl.glGetTranslatedShaderSourceANGLE = code_glGetTranslatedShaderSourceANGLE;
  tbl.glCopyTextureLevelsAPPLE = code_glCopyTextureLevelsAPPLE;
  tbl.glDrawElementArrayAPPLE = code_glDrawElementArrayAPPLE;
  tbl.glDrawRangeElementArrayAPPLE = code_glDrawRangeElementArrayAPPLE;
  tbl.glElementPointerAPPLE = code_glElementPointerAPPLE;
  tbl.glMultiDrawElementArrayAPPLE = code_glMultiDrawElementArrayAPPLE;
  tbl.glMultiDrawRangeElementArrayAPPLE = code_glMultiDrawRangeElementArrayAPPLE;
  tbl.glDeleteFencesAPPLE = code_glDeleteFencesAPPLE;
  tbl.glFinishFenceAPPLE = code_glFinishFenceAPPLE;
  tbl.glFinishObjectAPPLE = code_glFinishObjectAPPLE;
  tbl.glGenFencesAPPLE = code_glGenFencesAPPLE;
  tbl.glIsFenceAPPLE = code_glIsFenceAPPLE;
  tbl.glSetFenceAPPLE = code_glSetFenceAPPLE;
  tbl.glTestFenceAPPLE = code_glTestFenceAPPLE;
  tbl.glTestObjectAPPLE = code_glTestObjectAPPLE;
  tbl.glBufferParameteriAPPLE = code_glBufferParameteriAPPLE;
  tbl.glFlushMappedBufferRangeAPPLE = code_glFlushMappedBufferRangeAPPLE;
  tbl.glFinishRenderAPPLE = code_glFinishRenderAPPLE;
  tbl.glFlushRenderAPPLE = code_glFlushRenderAPPLE;
  tbl.glSwapAPPLE = code_glSwapAPPLE;
  tbl.glRenderbufferStorageMultisampleAPPLE = code_glRenderbufferStorageMultisampleAPPLE;
  tbl.glResolveMultisampleFramebufferAPPLE = code_glResolveMultisampleFramebufferAPPLE;
  tbl.glGetObjectParameterivAPPLE = code_glGetObjectParameterivAPPLE;
  tbl.glObjectPurgeableAPPLE = code_glObjectPurgeableAPPLE;
  tbl.glObjectUnpurgeableAPPLE = code_glObjectUnpurgeableAPPLE;
  tbl.glClientWaitSyncAPPLE = code_glClientWaitSyncAPPLE;
  tbl.glDeleteSyncAPPLE = code_glDeleteSyncAPPLE;
  tbl.glFenceSyncAPPLE = code_glFenceSyncAPPLE;
  tbl.glGetInteger64vAPPLE = code_glGetInteger64vAPPLE;
  tbl.glGetSyncivAPPLE = code_glGetSyncivAPPLE;
  tbl.glIsSyncAPPLE = code_glIsSyncAPPLE;
  tbl.glWaitSyncAPPLE = code_glWaitSyncAPPLE;
  tbl.glGetTexParameterPointervAPPLE = code_glGetTexParameterPointervAPPLE;
  tbl.glTextureRangeAPPLE = code_glTextureRangeAPPLE;
  tbl.glBindVertexArrayAPPLE = code_glBindVertexArrayAPPLE;
  tbl.glDeleteVertexArraysAPPLE = code_glDeleteVertexArraysAPPLE;
  tbl.glGenVertexArraysAPPLE = code_glGenVertexArraysAPPLE;
  tbl.glIsVertexArrayAPPLE = code_glIsVertexArrayAPPLE;
  tbl.glFlushVertexArrayRangeAPPLE = code_glFlushVertexArrayRangeAPPLE;
  tbl.glVertexArrayParameteriAPPLE = code_glVertexArrayParameteriAPPLE;
  tbl.glVertexArrayRangeAPPLE = code_glVertexArrayRangeAPPLE;
  tbl.glDisableVertexAttribAPPLE = code_glDisableVertexAttribAPPLE;
  tbl.glEnableVertexAttribAPPLE = code_glEnableVertexAttribAPPLE;
  tbl.glIsVertexAttribEnabledAPPLE = code_glIsVertexAttribEnabledAPPLE;
  tbl.glMapVertexAttrib1dAPPLE = code_glMapVertexAttrib1dAPPLE;
  tbl.glMapVertexAttrib1fAPPLE = code_glMapVertexAttrib1fAPPLE;
  tbl.glMapVertexAttrib2dAPPLE = code_glMapVertexAttrib2dAPPLE;
  tbl.glMapVertexAttrib2fAPPLE = code_glMapVertexAttrib2fAPPLE;
  tbl.glClearDepthf = code_glClearDepthf;
  tbl.glDepthRangef = code_glDepthRangef;
  tbl.glGetShaderPrecisionFormat = code_glGetShaderPrecisionFormat;
  tbl.glReleaseShaderCompiler = code_glReleaseShaderCompiler;
  tbl.glShaderBinary = code_glShaderBinary;
  tbl.glDrawArraysInstancedBaseInstance = code_glDrawArraysInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseInstance = code_glDrawElementsInstancedBaseInstance;
  tbl.glDrawElementsInstancedBaseVertexBaseInstance = code_glDrawElementsInstancedBaseVertexBaseInstance;
  tbl.glBindFragDataLocationIndexed = code_glBindFragDataLocationIndexed;
  tbl.glGetFragDataIndex = code_glGetFragDataIndex;
  tbl.glCreateSyncFromCLeventARB = code_glCreateSyncFromCLeventARB;
  tbl.glClearBufferData = code_glClearBufferData;
  tbl.glClearBufferSubData = code_glClearBufferSubData;
  tbl.glClearNamedBufferDataEXT = code_glClearNamedBufferDataEXT;
  tbl.glClearNamedBufferSubDataEXT = code_glClearNamedBufferSubDataEXT;
  tbl.glClampColorARB = code_glClampColorARB;
  tbl.glDispatchCompute = code_glDispatchCompute;
  tbl.glDispatchComputeIndirect = code_glDispatchComputeIndirect;
  tbl.glCopyBufferSubData = code_glCopyBufferSubData;
  tbl.glCopyImageSubData = code_glCopyImageSubData;
  tbl.glDebugMessageCallbackARB = code_glDebugMessageCallbackARB;
  tbl.glDebugMessageControlARB = code_glDebugMessageControlARB;
  tbl.glDebugMessageInsertARB = code_glDebugMessageInsertARB;
  tbl.glGetDebugMessageLogARB = code_glGetDebugMessageLogARB;
  tbl.glDrawBuffersARB = code_glDrawBuffersARB;
  tbl.glBlendEquationSeparateiARB = code_glBlendEquationSeparateiARB;
  tbl.glBlendEquationiARB = code_glBlendEquationiARB;
  tbl.glBlendFuncSeparateiARB = code_glBlendFuncSeparateiARB;
  tbl.glBlendFunciARB = code_glBlendFunciARB;
  tbl.glDrawElementsBaseVertex = code_glDrawElementsBaseVertex;
  tbl.glDrawElementsInstancedBaseVertex = code_glDrawElementsInstancedBaseVertex;
  tbl.glDrawRangeElementsBaseVertex = code_glDrawRangeElementsBaseVertex;
  tbl.glMultiDrawElementsBaseVertex = code_glMultiDrawElementsBaseVertex;
  tbl.glDrawArraysIndirect = code_glDrawArraysIndirect;
  tbl.glDrawElementsIndirect = code_glDrawElementsIndirect;
  tbl.glDrawArraysInstancedARB = code_glDrawArraysInstancedARB;
  tbl.glDrawElementsInstancedARB = code_glDrawElementsInstancedARB;
  tbl.glFramebufferParameteri = code_glFramebufferParameteri;
  tbl.glGetFramebufferParameteriv = code_glGetFramebufferParameteriv;
  tbl.glGetNamedFramebufferParameterivEXT = code_glGetNamedFramebufferParameterivEXT;
  tbl.glNamedFramebufferParameteriEXT = code_glNamedFramebufferParameteriEXT;
  tbl.glBindFramebuffer = code_glBindFramebuffer;
  tbl.glBindRenderbuffer = code_glBindRenderbuffer;
  tbl.glBlitFramebuffer = code_glBlitFramebuffer;
  tbl.glCheckFramebufferStatus = code_glCheckFramebufferStatus;
  tbl.glDeleteFramebuffers = code_glDeleteFramebuffers;
  tbl.glDeleteRenderbuffers = code_glDeleteRenderbuffers;
  tbl.glFramebufferRenderbuffer = code_glFramebufferRenderbuffer;
  tbl.glFramebufferTexture1D = code_glFramebufferTexture1D;
  tbl.glFramebufferTexture2D = code_glFramebufferTexture2D;
  tbl.glFramebufferTexture3D = code_glFramebufferTexture3D;
  tbl.glFramebufferTextureLayer = code_glFramebufferTextureLayer;
  tbl.glGenFramebuffers = code_glGenFramebuffers;
  tbl.glGenRenderbuffers = code_glGenRenderbuffers;
  tbl.glGenerateMipmap = code_glGenerateMipmap;
  tbl.glGetFramebufferAttachmentParameteriv = code_glGetFramebufferAttachmentParameteriv;
  tbl.glGetRenderbufferParameteriv = code_glGetRenderbufferParameteriv;
  tbl.glIsFramebuffer = code_glIsFramebuffer;
  tbl.glIsRenderbuffer = code_glIsRenderbuffer;
  tbl.glRenderbufferStorage = code_glRenderbufferStorage;
  tbl.glRenderbufferStorageMultisample = code_glRenderbufferStorageMultisample;
  tbl.glFramebufferTextureARB = code_glFramebufferTextureARB;
  tbl.glFramebufferTextureFaceARB = code_glFramebufferTextureFaceARB;
  tbl.glFramebufferTextureLayerARB = code_glFramebufferTextureLayerARB;
  tbl.glProgramParameteriARB = code_glProgramParameteriARB;
  tbl.glGetProgramBinary = code_glGetProgramBinary;
  tbl.glProgramBinary = code_glProgramBinary;
  tbl.glProgramParameteri = code_glProgramParameteri;
  tbl.glGetUniformdv = code_glGetUniformdv;
  tbl.glUniform1d = code_glUniform1d;
  tbl.glUniform1dv = code_glUniform1dv;
  tbl.glUniform2d = code_glUniform2d;
  tbl.glUniform2dv = code_glUniform2dv;
  tbl.glUniform3d = code_glUniform3d;
  tbl.glUniform3dv = code_glUniform3dv;
  tbl.glUniform4d = code_glUniform4d;
  tbl.glUniform4dv = code_glUniform4dv;
  tbl.glUniformMatrix2dv = code_glUniformMatrix2dv;
  tbl.glUniformMatrix2x3dv = code_glUniformMatrix2x3dv;
  tbl.glUniformMatrix2x4dv = code_glUniformMatrix2x4dv;
  tbl.glUniformMatrix3dv = code_glUniformMatrix3dv;
  tbl.glUniformMatrix3x2dv = code_glUniformMatrix3x2dv;
  tbl.glUniformMatrix3x4dv = code_glUniformMatrix3x4dv;
  tbl.glUniformMatrix4dv = code_glUniformMatrix4dv;
  tbl.glUniformMatrix4x2dv = code_glUniformMatrix4x2dv;
  tbl.glUniformMatrix4x3dv = code_glUniformMatrix4x3dv;
  tbl.glColorSubTable = code_glColorSubTable;
  tbl.glColorTable = code_glColorTable;
  tbl.glColorTableParameterfv = code_glColorTableParameterfv;
  tbl.glColorTableParameteriv = code_glColorTableParameteriv;
  tbl.glConvolutionFilter1D = code_glConvolutionFilter1D;
  tbl.glConvolutionFilter2D = code_glConvolutionFilter2D;
  tbl.glConvolutionParameterf = code_glConvolutionParameterf;
  tbl.glConvolutionParameterfv = code_glConvolutionParameterfv;
  tbl.glConvolutionParameteri = code_glConvolutionParameteri;
  tbl.glConvolutionParameteriv = code_glConvolutionParameteriv;
  tbl.glCopyColorSubTable = code_glCopyColorSubTable;
  tbl.glCopyColorTable = code_glCopyColorTable;
  tbl.glCopyConvolutionFilter1D = code_glCopyConvolutionFilter1D;
  tbl.glCopyConvolutionFilter2D = code_glCopyConvolutionFilter2D;
  tbl.glGetColorTable = code_glGetColorTable;
  tbl.glGetColorTableParameterfv = code_glGetColorTableParameterfv;
  tbl.glGetColorTableParameteriv = code_glGetColorTableParameteriv;
  tbl.glGetConvolutionFilter = code_glGetConvolutionFilter;
  tbl.glGetConvolutionParameterfv = code_glGetConvolutionParameterfv;
  tbl.glGetConvolutionParameteriv = code_glGetConvolutionParameteriv;
  tbl.glGetHistogram = code_glGetHistogram;
  tbl.glGetHistogramParameterfv = code_glGetHistogramParameterfv;
  tbl.glGetHistogramParameteriv = code_glGetHistogramParameteriv;
  tbl.glGetMinmax = code_glGetMinmax;
  tbl.glGetMinmaxParameterfv = code_glGetMinmaxParameterfv;
  tbl.glGetMinmaxParameteriv = code_glGetMinmaxParameteriv;
  tbl.glGetSeparableFilter = code_glGetSeparableFilter;
  tbl.glHistogram = code_glHistogram;
  tbl.glMinmax = code_glMinmax;
  tbl.glResetHistogram = code_glResetHistogram;
  tbl.glResetMinmax = code_glResetMinmax;
  tbl.glSeparableFilter2D = code_glSeparableFilter2D;
  tbl.glVertexAttribDivisorARB = code_glVertexAttribDivisorARB;
  tbl.glGetInternalformativ = code_glGetInternalformativ;
  tbl.glGetInternalformati64v = code_glGetInternalformati64v;
  tbl.glInvalidateBufferData = code_glInvalidateBufferData;
  tbl.glInvalidateBufferSubData = code_glInvalidateBufferSubData;
  tbl.glInvalidateFramebuffer = code_glInvalidateFramebuffer;
  tbl.glInvalidateSubFramebuffer = code_glInvalidateSubFramebuffer;
  tbl.glInvalidateTexImage = code_glInvalidateTexImage;
  tbl.glInvalidateTexSubImage = code_glInvalidateTexSubImage;
  tbl.glFlushMappedBufferRange = code_glFlushMappedBufferRange;
  tbl.glMapBufferRange = code_glMapBufferRange;
  tbl.glCurrentPaletteMatrixARB = code_glCurrentPaletteMatrixARB;
  tbl.glMatrixIndexPointerARB = code_glMatrixIndexPointerARB;
  tbl.glMatrixIndexubvARB = code_glMatrixIndexubvARB;
  tbl.glMatrixIndexuivARB = code_glMatrixIndexuivARB;
  tbl.glMatrixIndexusvARB = code_glMatrixIndexusvARB;
  tbl.glMultiDrawArraysIndirect = code_glMultiDrawArraysIndirect;
  tbl.glMultiDrawElementsIndirect = code_glMultiDrawElementsIndirect;
  tbl.glSampleCoverageARB = code_glSampleCoverageARB;
  tbl.glActiveTextureARB = code_glActiveTextureARB;
  tbl.glClientActiveTextureARB = code_glClientActiveTextureARB;
  tbl.glMultiTexCoord1dARB = code_glMultiTexCoord1dARB;
  tbl.glMultiTexCoord1dvARB = code_glMultiTexCoord1dvARB;
  tbl.glMultiTexCoord1fARB = code_glMultiTexCoord1fARB;
  tbl.glMultiTexCoord1fvARB = code_glMultiTexCoord1fvARB;
  tbl.glMultiTexCoord1iARB = code_glMultiTexCoord1iARB;
  tbl.glMultiTexCoord1ivARB = code_glMultiTexCoord1ivARB;
  tbl.glMultiTexCoord1sARB = code_glMultiTexCoord1sARB;
  tbl.glMultiTexCoord1svARB = code_glMultiTexCoord1svARB;
  tbl.glMultiTexCoord2dARB = code_glMultiTexCoord2dARB;
  tbl.glMultiTexCoord2dvARB = code_glMultiTexCoord2dvARB;
  tbl.glMultiTexCoord2fARB = code_glMultiTexCoord2fARB;
  tbl.glMultiTexCoord2fvARB = code_glMultiTexCoord2fvARB;
  tbl.glMultiTexCoord2iARB = code_glMultiTexCoord2iARB;
  tbl.glMultiTexCoord2ivARB = code_glMultiTexCoord2ivARB;
  tbl.glMultiTexCoord2sARB = code_glMultiTexCoord2sARB;
  tbl.glMultiTexCoord2svARB = code_glMultiTexCoord2svARB;
  tbl.glMultiTexCoord3dARB = code_glMultiTexCoord3dARB;
  tbl.glMultiTexCoord3dvARB = code_glMultiTexCoord3dvARB;
  tbl.glMultiTexCoord3fARB = code_glMultiTexCoord3fARB;
  tbl.glMultiTexCoord3fvARB = code_glMultiTexCoord3fvARB;
  tbl.glMultiTexCoord3iARB = code_glMultiTexCoord3iARB;
  tbl.glMultiTexCoord3ivARB = code_glMultiTexCoord3ivARB;
  tbl.glMultiTexCoord3sARB = code_glMultiTexCoord3sARB;
  tbl.glMultiTexCoord3svARB = code_glMultiTexCoord3svARB;
  tbl.glMultiTexCoord4dARB = code_glMultiTexCoord4dARB;
  tbl.glMultiTexCoord4dvARB = code_glMultiTexCoord4dvARB;
  tbl.glMultiTexCoord4fARB = code_glMultiTexCoord4fARB;
  tbl.glMultiTexCoord4fvARB = code_glMultiTexCoord4fvARB;
  tbl.glMultiTexCoord4iARB = code_glMultiTexCoord4iARB;
  tbl.glMultiTexCoord4ivARB = code_glMultiTexCoord4ivARB;
  tbl.glMultiTexCoord4sARB = code_glMultiTexCoord4sARB;
  tbl.glMultiTexCoord4svARB = code_glMultiTexCoord4svARB;
  tbl.glBeginQueryARB = code_glBeginQueryARB;
  tbl.glDeleteQueriesARB = code_glDeleteQueriesARB;
  tbl.glEndQueryARB = code_glEndQueryARB;
  tbl.glGenQueriesARB = code_glGenQueriesARB;
  tbl.glGetQueryObjectivARB = code_glGetQueryObjectivARB;
  tbl.glGetQueryObjectuivARB = code_glGetQueryObjectuivARB;
  tbl.glGetQueryivARB = code_glGetQueryivARB;
  tbl.glIsQueryARB = code_glIsQueryARB;
  tbl.glPointParameterfARB = code_glPointParameterfARB;
  tbl.glPointParameterfvARB = code_glPointParameterfvARB;
  tbl.glGetProgramInterfaceiv = code_glGetProgramInterfaceiv;
  tbl.glGetProgramResourceIndex = code_glGetProgramResourceIndex;
  tbl.glGetProgramResourceLocation = code_glGetProgramResourceLocation;
  tbl.glGetProgramResourceLocationIndex = code_glGetProgramResourceLocationIndex;
  tbl.glGetProgramResourceName = code_glGetProgramResourceName;
  tbl.glGetProgramResourceiv = code_glGetProgramResourceiv;
  tbl.glProvokingVertex = code_glProvokingVertex;
  tbl.glGetGraphicsResetStatusARB = code_glGetGraphicsResetStatusARB;
  tbl.glGetnColorTableARB = code_glGetnColorTableARB;
  tbl.glGetnCompressedTexImageARB = code_glGetnCompressedTexImageARB;
  tbl.glGetnConvolutionFilterARB = code_glGetnConvolutionFilterARB;
  tbl.glGetnHistogramARB = code_glGetnHistogramARB;
  tbl.glGetnMapdvARB = code_glGetnMapdvARB;
  tbl.glGetnMapfvARB = code_glGetnMapfvARB;
  tbl.glGetnMapivARB = code_glGetnMapivARB;
  tbl.glGetnMinmaxARB = code_glGetnMinmaxARB;
  tbl.glGetnPixelMapfvARB = code_glGetnPixelMapfvARB;
  tbl.glGetnPixelMapuivARB = code_glGetnPixelMapuivARB;
  tbl.glGetnPixelMapusvARB = code_glGetnPixelMapusvARB;
  tbl.glGetnPolygonStippleARB = code_glGetnPolygonStippleARB;
  tbl.glGetnSeparableFilterARB = code_glGetnSeparableFilterARB;
  tbl.glGetnTexImageARB = code_glGetnTexImageARB;
  tbl.glGetnUniformdvARB = code_glGetnUniformdvARB;
  tbl.glGetnUniformfvARB = code_glGetnUniformfvARB;
  tbl.glGetnUniformivARB = code_glGetnUniformivARB;
  tbl.glGetnUniformuivARB = code_glGetnUniformuivARB;
  tbl.glReadnPixelsARB = code_glReadnPixelsARB;
  tbl.glMinSampleShading = code_glMinSampleShading;
  tbl.glMinSampleShadingARB = code_glMinSampleShadingARB;
  tbl.glBindSampler = code_glBindSampler;
  tbl.glDeleteSamplers = code_glDeleteSamplers;
  tbl.glGenSamplers = code_glGenSamplers;
  tbl.glGetSamplerParameterIiv = code_glGetSamplerParameterIiv;
  tbl.glGetSamplerParameterIuiv = code_glGetSamplerParameterIuiv;
  tbl.glGetSamplerParameterfv = code_glGetSamplerParameterfv;
  tbl.glGetSamplerParameteriv = code_glGetSamplerParameteriv;
  tbl.glIsSampler = code_glIsSampler;
  tbl.glSamplerParameterIiv = code_glSamplerParameterIiv;
  tbl.glSamplerParameterIuiv = code_glSamplerParameterIuiv;
  tbl.glSamplerParameterf = code_glSamplerParameterf;
  tbl.glSamplerParameterfv = code_glSamplerParameterfv;
  tbl.glSamplerParameteri = code_glSamplerParameteri;
  tbl.glSamplerParameteriv = code_glSamplerParameteriv;
  tbl.glActiveShaderProgram = code_glActiveShaderProgram;
  tbl.glBindProgramPipeline = code_glBindProgramPipeline;
  tbl.glCreateShaderProgramv = code_glCreateShaderProgramv;
  tbl.glDeleteProgramPipelines = code_glDeleteProgramPipelines;
  tbl.glGenProgramPipelines = code_glGenProgramPipelines;
  tbl.glGetProgramPipelineInfoLog = code_glGetProgramPipelineInfoLog;
  tbl.glGetProgramPipelineiv = code_glGetProgramPipelineiv;
  tbl.glIsProgramPipeline = code_glIsProgramPipeline;
  tbl.glProgramUniform1d = code_glProgramUniform1d;
  tbl.glProgramUniform1dv = code_glProgramUniform1dv;
  tbl.glProgramUniform1f = code_glProgramUniform1f;
  tbl.glProgramUniform1fv = code_glProgramUniform1fv;
  tbl.glProgramUniform1i = code_glProgramUniform1i;
  tbl.glProgramUniform1iv = code_glProgramUniform1iv;
  tbl.glProgramUniform1ui = code_glProgramUniform1ui;
  tbl.glProgramUniform1uiv = code_glProgramUniform1uiv;
  tbl.glProgramUniform2d = code_glProgramUniform2d;
  tbl.glProgramUniform2dv = code_glProgramUniform2dv;
  tbl.glProgramUniform2f = code_glProgramUniform2f;
  tbl.glProgramUniform2fv = code_glProgramUniform2fv;
  tbl.glProgramUniform2i = code_glProgramUniform2i;
  tbl.glProgramUniform2iv = code_glProgramUniform2iv;
  tbl.glProgramUniform2ui = code_glProgramUniform2ui;
  tbl.glProgramUniform2uiv = code_glProgramUniform2uiv;
  tbl.glProgramUniform3d = code_glProgramUniform3d;
  tbl.glProgramUniform3dv = code_glProgramUniform3dv;
  tbl.glProgramUniform3f = code_glProgramUniform3f;
  tbl.glProgramUniform3fv = code_glProgramUniform3fv;
  tbl.glProgramUniform3i = code_glProgramUniform3i;
  tbl.glProgramUniform3iv = code_glProgramUniform3iv;
  tbl.glProgramUniform3ui = code_glProgramUniform3ui;
  tbl.glProgramUniform3uiv = code_glProgramUniform3uiv;
  tbl.glProgramUniform4d = code_glProgramUniform4d;
  tbl.glProgramUniform4dv = code_glProgramUniform4dv;
  tbl.glProgramUniform4f = code_glProgramUniform4f;
  tbl.glProgramUniform4fv = code_glProgramUniform4fv;
  tbl.glProgramUniform4i = code_glProgramUniform4i;
  tbl.glProgramUniform4iv = code_glProgramUniform4iv;
  tbl.glProgramUniform4ui = code_glProgramUniform4ui;
  tbl.glProgramUniform4uiv = code_glProgramUniform4uiv;
  tbl.glProgramUniformMatrix2dv = code_glProgramUniformMatrix2dv;
  tbl.glProgramUniformMatrix2fv = code_glProgramUniformMatrix2fv;
  tbl.glProgramUniformMatrix2x3dv = code_glProgramUniformMatrix2x3dv;
  tbl.glProgramUniformMatrix2x3fv = code_glProgramUniformMatrix2x3fv;
  tbl.glProgramUniformMatrix2x4dv = code_glProgramUniformMatrix2x4dv;
  tbl.glProgramUniformMatrix2x4fv = code_glProgramUniformMatrix2x4fv;
  tbl.glProgramUniformMatrix3dv = code_glProgramUniformMatrix3dv;
  tbl.glProgramUniformMatrix3fv = code_glProgramUniformMatrix3fv;
  tbl.glProgramUniformMatrix3x2dv = code_glProgramUniformMatrix3x2dv;
  tbl.glProgramUniformMatrix3x2fv = code_glProgramUniformMatrix3x2fv;
  tbl.glProgramUniformMatrix3x4dv = code_glProgramUniformMatrix3x4dv;
  tbl.glProgramUniformMatrix3x4fv = code_glProgramUniformMatrix3x4fv;
  tbl.glProgramUniformMatrix4dv = code_glProgramUniformMatrix4dv;
  tbl.glProgramUniformMatrix4fv = code_glProgramUniformMatrix4fv;
  tbl.glProgramUniformMatrix4x2dv = code_glProgramUniformMatrix4x2dv;
  tbl.glProgramUniformMatrix4x2fv = code_glProgramUniformMatrix4x2fv;
  tbl.glProgramUniformMatrix4x3dv = code_glProgramUniformMatrix4x3dv;
  tbl.glProgramUniformMatrix4x3fv = code_glProgramUniformMatrix4x3fv;
  tbl.glUseProgramStages = code_glUseProgramStages;
  tbl.glValidateProgramPipeline = code_glValidateProgramPipeline;
  tbl.glGetActiveAtomicCounterBufferiv = code_glGetActiveAtomicCounterBufferiv;
  tbl.glBindImageTexture = code_glBindImageTexture;
  tbl.glMemoryBarrier = code_glMemoryBarrier;
  tbl.glAttachObjectARB = code_glAttachObjectARB;
  tbl.glCompileShaderARB = code_glCompileShaderARB;
  tbl.glCreateProgramObjectARB = code_glCreateProgramObjectARB;
  tbl.glCreateShaderObjectARB = code_glCreateShaderObjectARB;
  tbl.glDeleteObjectARB = code_glDeleteObjectARB;
  tbl.glDetachObjectARB = code_glDetachObjectARB;
  tbl.glGetActiveUniformARB = code_glGetActiveUniformARB;
  tbl.glGetAttachedObjectsARB = code_glGetAttachedObjectsARB;
  tbl.glGetHandleARB = code_glGetHandleARB;
  tbl.glGetInfoLogARB = code_glGetInfoLogARB;
  tbl.glGetObjectParameterfvARB = code_glGetObjectParameterfvARB;
  tbl.glGetObjectParameterivARB = code_glGetObjectParameterivARB;
  tbl.glGetShaderSourceARB = code_glGetShaderSourceARB;
  tbl.glGetUniformLocationARB = code_glGetUniformLocationARB;
  tbl.glGetUniformfvARB = code_glGetUniformfvARB;
  tbl.glGetUniformivARB = code_glGetUniformivARB;
  tbl.glLinkProgramARB = code_glLinkProgramARB;
  tbl.glShaderSourceARB = code_glShaderSourceARB;
  tbl.glUniform1fARB = code_glUniform1fARB;
  tbl.glUniform1fvARB = code_glUniform1fvARB;
  tbl.glUniform1iARB = code_glUniform1iARB;
  tbl.glUniform1ivARB = code_glUniform1ivARB;
  tbl.glUniform2fARB = code_glUniform2fARB;
  tbl.glUniform2fvARB = code_glUniform2fvARB;
  tbl.glUniform2iARB = code_glUniform2iARB;
  tbl.glUniform2ivARB = code_glUniform2ivARB;
  tbl.glUniform3fARB = code_glUniform3fARB;
  tbl.glUniform3fvARB = code_glUniform3fvARB;
  tbl.glUniform3iARB = code_glUniform3iARB;
  tbl.glUniform3ivARB = code_glUniform3ivARB;
  tbl.glUniform4fARB = code_glUniform4fARB;
  tbl.glUniform4fvARB = code_glUniform4fvARB;
  tbl.glUniform4iARB = code_glUniform4iARB;
  tbl.glUniform4ivARB = code_glUniform4ivARB;
  tbl.glUniformMatrix2fvARB = code_glUniformMatrix2fvARB;
  tbl.glUniformMatrix3fvARB = code_glUniformMatrix3fvARB;
  tbl.glUniformMatrix4fvARB = code_glUniformMatrix4fvARB;
  tbl.glUseProgramObjectARB = code_glUseProgramObjectARB;
  tbl.glValidateProgramARB = code_glValidateProgramARB;
  tbl.glShaderStorageBlockBinding = code_glShaderStorageBlockBinding;
  tbl.glGetActiveSubroutineName = code_glGetActiveSubroutineName;
  tbl.glGetActiveSubroutineUniformName = code_glGetActiveSubroutineUniformName;
  tbl.glGetActiveSubroutineUniformiv = code_glGetActiveSubroutineUniformiv;
  tbl.glGetProgramStageiv = code_glGetProgramStageiv;
  tbl.glGetSubroutineIndex = code_glGetSubroutineIndex;
  tbl.glGetSubroutineUniformLocation = code_glGetSubroutineUniformLocation;
  tbl.glGetUniformSubroutineuiv = code_glGetUniformSubroutineuiv;
  tbl.glUniformSubroutinesuiv = code_glUniformSubroutinesuiv;
  tbl.glCompileShaderIncludeARB = code_glCompileShaderIncludeARB;
  tbl.glDeleteNamedStringARB = code_glDeleteNamedStringARB;
  tbl.glGetNamedStringARB = code_glGetNamedStringARB;
  tbl.glGetNamedStringivARB = code_glGetNamedStringivARB;
  tbl.glIsNamedStringARB = code_glIsNamedStringARB;
  tbl.glNamedStringARB = code_glNamedStringARB;
  tbl.glClientWaitSync = code_glClientWaitSync;
  tbl.glDeleteSync = code_glDeleteSync;
  tbl.glFenceSync = code_glFenceSync;
  tbl.glGetInteger64v = code_glGetInteger64v;
  tbl.glGetSynciv = code_glGetSynciv;
  tbl.glIsSync = code_glIsSync;
  tbl.glWaitSync = code_glWaitSync;
  tbl.glPatchParameterfv = code_glPatchParameterfv;
  tbl.glPatchParameteri = code_glPatchParameteri;
  tbl.glTexBufferARB = code_glTexBufferARB;
  tbl.glTexBufferRange = code_glTexBufferRange;
  tbl.glTextureBufferRangeEXT = code_glTextureBufferRangeEXT;
  tbl.glCompressedTexImage1DARB = code_glCompressedTexImage1DARB;
  tbl.glCompressedTexImage2DARB = code_glCompressedTexImage2DARB;
  tbl.glCompressedTexImage3DARB = code_glCompressedTexImage3DARB;
  tbl.glCompressedTexSubImage1DARB = code_glCompressedTexSubImage1DARB;
  tbl.glCompressedTexSubImage2DARB = code_glCompressedTexSubImage2DARB;
  tbl.glCompressedTexSubImage3DARB = code_glCompressedTexSubImage3DARB;
  tbl.glGetCompressedTexImageARB = code_glGetCompressedTexImageARB;
  tbl.glGetMultisamplefv = code_glGetMultisamplefv;
  tbl.glSampleMaski = code_glSampleMaski;
  tbl.glTexImage2DMultisample = code_glTexImage2DMultisample;
  tbl.glTexImage3DMultisample = code_glTexImage3DMultisample;
  tbl.glTexStorage1D = code_glTexStorage1D;
  tbl.glTexStorage2D = code_glTexStorage2D;
  tbl.glTexStorage3D = code_glTexStorage3D;
  tbl.glTextureStorage1DEXT = code_glTextureStorage1DEXT;
  tbl.glTextureStorage2DEXT = code_glTextureStorage2DEXT;
  tbl.glTextureStorage3DEXT = code_glTextureStorage3DEXT;
  tbl.glTexStorage2DMultisample = code_glTexStorage2DMultisample;
  tbl.glTexStorage3DMultisample = code_glTexStorage3DMultisample;
  tbl.glTextureStorage2DMultisampleEXT = code_glTextureStorage2DMultisampleEXT;
  tbl.glTextureStorage3DMultisampleEXT = code_glTextureStorage3DMultisampleEXT;
  tbl.glTextureView = code_glTextureView;
  tbl.glGetQueryObjecti64v = code_glGetQueryObjecti64v;
  tbl.glGetQueryObjectui64v = code_glGetQueryObjectui64v;
  tbl.glQueryCounter = code_glQueryCounter;
  tbl.glBindTransformFeedback = code_glBindTransformFeedback;
  tbl.glDeleteTransformFeedbacks = code_glDeleteTransformFeedbacks;
  tbl.glDrawTransformFeedback = code_glDrawTransformFeedback;
  tbl.glGenTransformFeedbacks = code_glGenTransformFeedbacks;
  tbl.glIsTransformFeedback = code_glIsTransformFeedback;
  tbl.glPauseTransformFeedback = code_glPauseTransformFeedback;
  tbl.glResumeTransformFeedback = code_glResumeTransformFeedback;
  tbl.glBeginQueryIndexed = code_glBeginQueryIndexed;
  tbl.glDrawTransformFeedbackStream = code_glDrawTransformFeedbackStream;
  tbl.glEndQueryIndexed = code_glEndQueryIndexed;
  tbl.glGetQueryIndexediv = code_glGetQueryIndexediv;
  tbl.glDrawTransformFeedbackInstanced = code_glDrawTransformFeedbackInstanced;
  tbl.glDrawTransformFeedbackStreamInstanced = code_glDrawTransformFeedbackStreamInstanced;
  tbl.glLoadTransposeMatrixdARB = code_glLoadTransposeMatrixdARB;
  tbl.glLoadTransposeMatrixfARB = code_glLoadTransposeMatrixfARB;
  tbl.glMultTransposeMatrixdARB = code_glMultTransposeMatrixdARB;
  tbl.glMultTransposeMatrixfARB = code_glMultTransposeMatrixfARB;
  tbl.glBindBufferBase = code_glBindBufferBase;
  tbl.glBindBufferRange = code_glBindBufferRange;
  tbl.glGetActiveUniformBlockName = code_glGetActiveUniformBlockName;
  tbl.glGetActiveUniformBlockiv = code_glGetActiveUniformBlockiv;
  tbl.glGetActiveUniformName = code_glGetActiveUniformName;
  tbl.glGetActiveUniformsiv = code_glGetActiveUniformsiv;
  tbl.glGetIntegeri_v = code_glGetIntegeri_v;
  tbl.glGetUniformBlockIndex = code_glGetUniformBlockIndex;
  tbl.glGetUniformIndices = code_glGetUniformIndices;
  tbl.glUniformBlockBinding = code_glUniformBlockBinding;
  tbl.glBindVertexArray = code_glBindVertexArray;
  tbl.glDeleteVertexArrays = code_glDeleteVertexArrays;
  tbl.glGenVertexArrays = code_glGenVertexArrays;
  tbl.glIsVertexArray = code_glIsVertexArray;
  tbl.glGetVertexAttribLdv = code_glGetVertexAttribLdv;
  tbl.glVertexAttribL1d = code_glVertexAttribL1d;
  tbl.glVertexAttribL1dv = code_glVertexAttribL1dv;
  tbl.glVertexAttribL2d = code_glVertexAttribL2d;
  tbl.glVertexAttribL2dv = code_glVertexAttribL2dv;
  tbl.glVertexAttribL3d = code_glVertexAttribL3d;
  tbl.glVertexAttribL3dv = code_glVertexAttribL3dv;
  tbl.glVertexAttribL4d = code_glVertexAttribL4d;
  tbl.glVertexAttribL4dv = code_glVertexAttribL4dv;
  tbl.glVertexAttribLPointer = code_glVertexAttribLPointer;
  tbl.glBindVertexBuffer = code_glBindVertexBuffer;
  tbl.glVertexAttribBinding = code_glVertexAttribBinding;
  tbl.glVertexAttribFormat = code_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = code_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = code_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = code_glVertexBindingDivisor;
  tbl.glVertexBlendARB = code_glVertexBlendARB;
  tbl.glWeightPointerARB = code_glWeightPointerARB;
  tbl.glWeightbvARB = code_glWeightbvARB;
  tbl.glWeightdvARB = code_glWeightdvARB;
  tbl.glWeightfvARB = code_glWeightfvARB;
  tbl.glWeightivARB = code_glWeightivARB;
  tbl.glWeightsvARB = code_glWeightsvARB;
  tbl.glWeightubvARB = code_glWeightubvARB;
  tbl.glWeightuivARB = code_glWeightuivARB;
  tbl.glWeightusvARB = code_glWeightusvARB;
  tbl.glBindBufferARB = code_glBindBufferARB;
  tbl.glBufferDataARB = code_glBufferDataARB;
  tbl.glBufferSubDataARB = code_glBufferSubDataARB;
  tbl.glDeleteBuffersARB = code_glDeleteBuffersARB;
  tbl.glGenBuffersARB = code_glGenBuffersARB;
  tbl.glGetBufferParameterivARB = code_glGetBufferParameterivARB;
  tbl.glGetBufferPointervARB = code_glGetBufferPointervARB;
  tbl.glGetBufferSubDataARB = code_glGetBufferSubDataARB;
  tbl.glIsBufferARB = code_glIsBufferARB;
  tbl.glMapBufferARB = code_glMapBufferARB;
  tbl.glUnmapBufferARB = code_glUnmapBufferARB;
  tbl.glBindProgramARB = code_glBindProgramARB;
  tbl.glDeleteProgramsARB = code_glDeleteProgramsARB;
  tbl.glDisableVertexAttribArrayARB = code_glDisableVertexAttribArrayARB;
  tbl.glEnableVertexAttribArrayARB = code_glEnableVertexAttribArrayARB;
  tbl.glGenProgramsARB = code_glGenProgramsARB;
  tbl.glGetProgramEnvParameterdvARB = code_glGetProgramEnvParameterdvARB;
  tbl.glGetProgramEnvParameterfvARB = code_glGetProgramEnvParameterfvARB;
  tbl.glGetProgramLocalParameterdvARB = code_glGetProgramLocalParameterdvARB;
  tbl.glGetProgramLocalParameterfvARB = code_glGetProgramLocalParameterfvARB;
  tbl.glGetProgramStringARB = code_glGetProgramStringARB;
  tbl.glGetProgramivARB = code_glGetProgramivARB;
  tbl.glGetVertexAttribPointervARB = code_glGetVertexAttribPointervARB;
  tbl.glGetVertexAttribdvARB = code_glGetVertexAttribdvARB;
  tbl.glGetVertexAttribfvARB = code_glGetVertexAttribfvARB;
  tbl.glGetVertexAttribivARB = code_glGetVertexAttribivARB;
  tbl.glIsProgramARB = code_glIsProgramARB;
  tbl.glProgramEnvParameter4dARB = code_glProgramEnvParameter4dARB;
  tbl.glProgramEnvParameter4dvARB = code_glProgramEnvParameter4dvARB;
  tbl.glProgramEnvParameter4fARB = code_glProgramEnvParameter4fARB;
  tbl.glProgramEnvParameter4fvARB = code_glProgramEnvParameter4fvARB;
  tbl.glProgramLocalParameter4dARB = code_glProgramLocalParameter4dARB;
  tbl.glProgramLocalParameter4dvARB = code_glProgramLocalParameter4dvARB;
  tbl.glProgramLocalParameter4fARB = code_glProgramLocalParameter4fARB;
  tbl.glProgramLocalParameter4fvARB = code_glProgramLocalParameter4fvARB;
  tbl.glProgramStringARB = code_glProgramStringARB;
  tbl.glVertexAttrib1dARB = code_glVertexAttrib1dARB;
  tbl.glVertexAttrib1dvARB = code_glVertexAttrib1dvARB;
  tbl.glVertexAttrib1fARB = code_glVertexAttrib1fARB;
  tbl.glVertexAttrib1fvARB = code_glVertexAttrib1fvARB;
  tbl.glVertexAttrib1sARB = code_glVertexAttrib1sARB;
  tbl.glVertexAttrib1svARB = code_glVertexAttrib1svARB;
  tbl.glVertexAttrib2dARB = code_glVertexAttrib2dARB;
  tbl.glVertexAttrib2dvARB = code_glVertexAttrib2dvARB;
  tbl.glVertexAttrib2fARB = code_glVertexAttrib2fARB;
  tbl.glVertexAttrib2fvARB = code_glVertexAttrib2fvARB;
  tbl.glVertexAttrib2sARB = code_glVertexAttrib2sARB;
  tbl.glVertexAttrib2svARB = code_glVertexAttrib2svARB;
  tbl.glVertexAttrib3dARB = code_glVertexAttrib3dARB;
  tbl.glVertexAttrib3dvARB = code_glVertexAttrib3dvARB;
  tbl.glVertexAttrib3fARB = code_glVertexAttrib3fARB;
  tbl.glVertexAttrib3fvARB = code_glVertexAttrib3fvARB;
  tbl.glVertexAttrib3sARB = code_glVertexAttrib3sARB;
  tbl.glVertexAttrib3svARB = code_glVertexAttrib3svARB;
  tbl.glVertexAttrib4NbvARB = code_glVertexAttrib4NbvARB;
  tbl.glVertexAttrib4NivARB = code_glVertexAttrib4NivARB;
  tbl.glVertexAttrib4NsvARB = code_glVertexAttrib4NsvARB;
  tbl.glVertexAttrib4NubARB = code_glVertexAttrib4NubARB;
  tbl.glVertexAttrib4NubvARB = code_glVertexAttrib4NubvARB;
  tbl.glVertexAttrib4NuivARB = code_glVertexAttrib4NuivARB;
  tbl.glVertexAttrib4NusvARB = code_glVertexAttrib4NusvARB;
  tbl.glVertexAttrib4bvARB = code_glVertexAttrib4bvARB;
  tbl.glVertexAttrib4dARB = code_glVertexAttrib4dARB;
  tbl.glVertexAttrib4dvARB = code_glVertexAttrib4dvARB;
  tbl.glVertexAttrib4fARB = code_glVertexAttrib4fARB;
  tbl.glVertexAttrib4fvARB = code_glVertexAttrib4fvARB;
  tbl.glVertexAttrib4ivARB = code_glVertexAttrib4ivARB;
  tbl.glVertexAttrib4sARB = code_glVertexAttrib4sARB;
  tbl.glVertexAttrib4svARB = code_glVertexAttrib4svARB;
  tbl.glVertexAttrib4ubvARB = code_glVertexAttrib4ubvARB;
  tbl.glVertexAttrib4uivARB = code_glVertexAttrib4uivARB;
  tbl.glVertexAttrib4usvARB = code_glVertexAttrib4usvARB;
  tbl.glVertexAttribPointerARB = code_glVertexAttribPointerARB;
  tbl.glBindAttribLocationARB = code_glBindAttribLocationARB;
  tbl.glGetActiveAttribARB = code_glGetActiveAttribARB;
  tbl.glGetAttribLocationARB = code_glGetAttribLocationARB;
  tbl.glColorP3ui = code_glColorP3ui;
  tbl.glColorP3uiv = code_glColorP3uiv;
  tbl.glColorP4ui = code_glColorP4ui;
  tbl.glColorP4uiv = code_glColorP4uiv;
  tbl.glMultiTexCoordP1ui = code_glMultiTexCoordP1ui;
  tbl.glMultiTexCoordP1uiv = code_glMultiTexCoordP1uiv;
  tbl.glMultiTexCoordP2ui = code_glMultiTexCoordP2ui;
  tbl.glMultiTexCoordP2uiv = code_glMultiTexCoordP2uiv;
  tbl.glMultiTexCoordP3ui = code_glMultiTexCoordP3ui;
  tbl.glMultiTexCoordP3uiv = code_glMultiTexCoordP3uiv;
  tbl.glMultiTexCoordP4ui = code_glMultiTexCoordP4ui;
  tbl.glMultiTexCoordP4uiv = code_glMultiTexCoordP4uiv;
  tbl.glNormalP3ui = code_glNormalP3ui;
  tbl.glNormalP3uiv = code_glNormalP3uiv;
  tbl.glSecondaryColorP3ui = code_glSecondaryColorP3ui;
  tbl.glSecondaryColorP3uiv = code_glSecondaryColorP3uiv;
  tbl.glTexCoordP1ui = code_glTexCoordP1ui;
  tbl.glTexCoordP1uiv = code_glTexCoordP1uiv;
  tbl.glTexCoordP2ui = code_glTexCoordP2ui;
  tbl.glTexCoordP2uiv = code_glTexCoordP2uiv;
  tbl.glTexCoordP3ui = code_glTexCoordP3ui;
  tbl.glTexCoordP3uiv = code_glTexCoordP3uiv;
  tbl.glTexCoordP4ui = code_glTexCoordP4ui;
  tbl.glTexCoordP4uiv = code_glTexCoordP4uiv;
  tbl.glVertexAttribP1ui = code_glVertexAttribP1ui;
  tbl.glVertexAttribP1uiv = code_glVertexAttribP1uiv;
  tbl.glVertexAttribP2ui = code_glVertexAttribP2ui;
  tbl.glVertexAttribP2uiv = code_glVertexAttribP2uiv;
  tbl.glVertexAttribP3ui = code_glVertexAttribP3ui;
  tbl.glVertexAttribP3uiv = code_glVertexAttribP3uiv;
  tbl.glVertexAttribP4ui = code_glVertexAttribP4ui;
  tbl.glVertexAttribP4uiv = code_glVertexAttribP4uiv;
  tbl.glVertexP2ui = code_glVertexP2ui;
  tbl.glVertexP2uiv = code_glVertexP2uiv;
  tbl.glVertexP3ui = code_glVertexP3ui;
  tbl.glVertexP3uiv = code_glVertexP3uiv;
  tbl.glVertexP4ui = code_glVertexP4ui;
  tbl.glVertexP4uiv = code_glVertexP4uiv;
  tbl.glDepthRangeArrayv = code_glDepthRangeArrayv;
  tbl.glDepthRangeIndexed = code_glDepthRangeIndexed;
  tbl.glGetDoublei_v = code_glGetDoublei_v;
  tbl.glGetFloati_v = code_glGetFloati_v;
  tbl.glScissorArrayv = code_glScissorArrayv;
  tbl.glScissorIndexed = code_glScissorIndexed;
  tbl.glScissorIndexedv = code_glScissorIndexedv;
  tbl.glViewportArrayv = code_glViewportArrayv;
  tbl.glViewportIndexedf = code_glViewportIndexedf;
  tbl.glViewportIndexedfv = code_glViewportIndexedfv;
  tbl.glWindowPos2dARB = code_glWindowPos2dARB;
  tbl.glWindowPos2dvARB = code_glWindowPos2dvARB;
  tbl.glWindowPos2fARB = code_glWindowPos2fARB;
  tbl.glWindowPos2fvARB = code_glWindowPos2fvARB;
  tbl.glWindowPos2iARB = code_glWindowPos2iARB;
  tbl.glWindowPos2ivARB = code_glWindowPos2ivARB;
  tbl.glWindowPos2sARB = code_glWindowPos2sARB;
  tbl.glWindowPos2svARB = code_glWindowPos2svARB;
  tbl.glWindowPos3dARB = code_glWindowPos3dARB;
  tbl.glWindowPos3dvARB = code_glWindowPos3dvARB;
  tbl.glWindowPos3fARB = code_glWindowPos3fARB;
  tbl.glWindowPos3fvARB = code_glWindowPos3fvARB;
  tbl.glWindowPos3iARB = code_glWindowPos3iARB;
  tbl.glWindowPos3ivARB = code_glWindowPos3ivARB;
  tbl.glWindowPos3sARB = code_glWindowPos3sARB;
  tbl.glWindowPos3svARB = code_glWindowPos3svARB;
  tbl.glDrawBuffersATI = code_glDrawBuffersATI;
  tbl.glDrawElementArrayATI = code_glDrawElementArrayATI;
  tbl.glDrawRangeElementArrayATI = code_glDrawRangeElementArrayATI;
  tbl.glElementPointerATI = code_glElementPointerATI;
  tbl.glGetTexBumpParameterfvATI = code_glGetTexBumpParameterfvATI;
  tbl.glGetTexBumpParameterivATI = code_glGetTexBumpParameterivATI;
  tbl.glTexBumpParameterfvATI = code_glTexBumpParameterfvATI;
  tbl.glTexBumpParameterivATI = code_glTexBumpParameterivATI;
  tbl.glAlphaFragmentOp1ATI = code_glAlphaFragmentOp1ATI;
  tbl.glAlphaFragmentOp2ATI = code_glAlphaFragmentOp2ATI;
  tbl.glAlphaFragmentOp3ATI = code_glAlphaFragmentOp3ATI;
  tbl.glBeginFragmentShaderATI = code_glBeginFragmentShaderATI;
  tbl.glBindFragmentShaderATI = code_glBindFragmentShaderATI;
  tbl.glColorFragmentOp1ATI = code_glColorFragmentOp1ATI;
  tbl.glColorFragmentOp2ATI = code_glColorFragmentOp2ATI;
  tbl.glColorFragmentOp3ATI = code_glColorFragmentOp3ATI;
  tbl.glDeleteFragmentShaderATI = code_glDeleteFragmentShaderATI;
  tbl.glEndFragmentShaderATI = code_glEndFragmentShaderATI;
  tbl.glGenFragmentShadersATI = code_glGenFragmentShadersATI;
  tbl.glPassTexCoordATI = code_glPassTexCoordATI;
  tbl.glSampleMapATI = code_glSampleMapATI;
  tbl.glSetFragmentShaderConstantATI = code_glSetFragmentShaderConstantATI;
  tbl.glMapObjectBufferATI = code_glMapObjectBufferATI;
  tbl.glUnmapObjectBufferATI = code_glUnmapObjectBufferATI;
  tbl.glPNTrianglesfATI = code_glPNTrianglesfATI;
  tbl.glPNTrianglesiATI = code_glPNTrianglesiATI;
  tbl.glStencilFuncSeparateATI = code_glStencilFuncSeparateATI;
  tbl.glStencilOpSeparateATI = code_glStencilOpSeparateATI;
  tbl.glArrayObjectATI = code_glArrayObjectATI;
  tbl.glFreeObjectBufferATI = code_glFreeObjectBufferATI;
  tbl.glGetArrayObjectfvATI = code_glGetArrayObjectfvATI;
  tbl.glGetArrayObjectivATI = code_glGetArrayObjectivATI;
  tbl.glGetObjectBufferfvATI = code_glGetObjectBufferfvATI;
  tbl.glGetObjectBufferivATI = code_glGetObjectBufferivATI;
  tbl.glGetVariantArrayObjectfvATI = code_glGetVariantArrayObjectfvATI;
  tbl.glGetVariantArrayObjectivATI = code_glGetVariantArrayObjectivATI;
  tbl.glIsObjectBufferATI = code_glIsObjectBufferATI;
  tbl.glNewObjectBufferATI = code_glNewObjectBufferATI;
  tbl.glUpdateObjectBufferATI = code_glUpdateObjectBufferATI;
  tbl.glVariantArrayObjectATI = code_glVariantArrayObjectATI;
  tbl.glGetVertexAttribArrayObjectfvATI = code_glGetVertexAttribArrayObjectfvATI;
  tbl.glGetVertexAttribArrayObjectivATI = code_glGetVertexAttribArrayObjectivATI;
  tbl.glVertexAttribArrayObjectATI = code_glVertexAttribArrayObjectATI;
  tbl.glClientActiveVertexStreamATI = code_glClientActiveVertexStreamATI;
  tbl.glNormalStream3bATI = code_glNormalStream3bATI;
  tbl.glNormalStream3bvATI = code_glNormalStream3bvATI;
  tbl.glNormalStream3dATI = code_glNormalStream3dATI;
  tbl.glNormalStream3dvATI = code_glNormalStream3dvATI;
  tbl.glNormalStream3fATI = code_glNormalStream3fATI;
  tbl.glNormalStream3fvATI = code_glNormalStream3fvATI;
  tbl.glNormalStream3iATI = code_glNormalStream3iATI;
  tbl.glNormalStream3ivATI = code_glNormalStream3ivATI;
  tbl.glNormalStream3sATI = code_glNormalStream3sATI;
  tbl.glNormalStream3svATI = code_glNormalStream3svATI;
  tbl.glVertexBlendEnvfATI = code_glVertexBlendEnvfATI;
  tbl.glVertexBlendEnviATI = code_glVertexBlendEnviATI;
  tbl.glVertexStream1dATI = code_glVertexStream1dATI;
  tbl.glVertexStream1dvATI = code_glVertexStream1dvATI;
  tbl.glVertexStream1fATI = code_glVertexStream1fATI;
  tbl.glVertexStream1fvATI = code_glVertexStream1fvATI;
  tbl.glVertexStream1iATI = code_glVertexStream1iATI;
  tbl.glVertexStream1ivATI = code_glVertexStream1ivATI;
  tbl.glVertexStream1sATI = code_glVertexStream1sATI;
  tbl.glVertexStream1svATI = code_glVertexStream1svATI;
  tbl.glVertexStream2dATI = code_glVertexStream2dATI;
  tbl.glVertexStream2dvATI = code_glVertexStream2dvATI;
  tbl.glVertexStream2fATI = code_glVertexStream2fATI;
  tbl.glVertexStream2fvATI = code_glVertexStream2fvATI;
  tbl.glVertexStream2iATI = code_glVertexStream2iATI;
  tbl.glVertexStream2ivATI = code_glVertexStream2ivATI;
  tbl.glVertexStream2sATI = code_glVertexStream2sATI;
  tbl.glVertexStream2svATI = code_glVertexStream2svATI;
  tbl.glVertexStream3dATI = code_glVertexStream3dATI;
  tbl.glVertexStream3dvATI = code_glVertexStream3dvATI;
  tbl.glVertexStream3fATI = code_glVertexStream3fATI;
  tbl.glVertexStream3fvATI = code_glVertexStream3fvATI;
  tbl.glVertexStream3iATI = code_glVertexStream3iATI;
  tbl.glVertexStream3ivATI = code_glVertexStream3ivATI;
  tbl.glVertexStream3sATI = code_glVertexStream3sATI;
  tbl.glVertexStream3svATI = code_glVertexStream3svATI;
  tbl.glVertexStream4dATI = code_glVertexStream4dATI;
  tbl.glVertexStream4dvATI = code_glVertexStream4dvATI;
  tbl.glVertexStream4fATI = code_glVertexStream4fATI;
  tbl.glVertexStream4fvATI = code_glVertexStream4fvATI;
  tbl.glVertexStream4iATI = code_glVertexStream4iATI;
  tbl.glVertexStream4ivATI = code_glVertexStream4ivATI;
  tbl.glVertexStream4sATI = code_glVertexStream4sATI;
  tbl.glVertexStream4svATI = code_glVertexStream4svATI;
  tbl.glGetUniformBufferSizeEXT = code_glGetUniformBufferSizeEXT;
  tbl.glGetUniformOffsetEXT = code_glGetUniformOffsetEXT;
  tbl.glUniformBufferEXT = code_glUniformBufferEXT;
  tbl.glBlendColorEXT = code_glBlendColorEXT;
  tbl.glBlendEquationSeparateEXT = code_glBlendEquationSeparateEXT;
  tbl.glBlendFuncSeparateEXT = code_glBlendFuncSeparateEXT;
  tbl.glBlendEquationEXT = code_glBlendEquationEXT;
  tbl.glColorSubTableEXT = code_glColorSubTableEXT;
  tbl.glCopyColorSubTableEXT = code_glCopyColorSubTableEXT;
  tbl.glLockArraysEXT = code_glLockArraysEXT;
  tbl.glUnlockArraysEXT = code_glUnlockArraysEXT;
  tbl.glConvolutionFilter1DEXT = code_glConvolutionFilter1DEXT;
  tbl.glConvolutionFilter2DEXT = code_glConvolutionFilter2DEXT;
  tbl.glConvolutionParameterfEXT = code_glConvolutionParameterfEXT;
  tbl.glConvolutionParameterfvEXT = code_glConvolutionParameterfvEXT;
  tbl.glConvolutionParameteriEXT = code_glConvolutionParameteriEXT;
  tbl.glConvolutionParameterivEXT = code_glConvolutionParameterivEXT;
  tbl.glCopyConvolutionFilter1DEXT = code_glCopyConvolutionFilter1DEXT;
  tbl.glCopyConvolutionFilter2DEXT = code_glCopyConvolutionFilter2DEXT;
  tbl.glGetConvolutionFilterEXT = code_glGetConvolutionFilterEXT;
  tbl.glGetConvolutionParameterfvEXT = code_glGetConvolutionParameterfvEXT;
  tbl.glGetConvolutionParameterivEXT = code_glGetConvolutionParameterivEXT;
  tbl.glGetSeparableFilterEXT = code_glGetSeparableFilterEXT;
  tbl.glSeparableFilter2DEXT = code_glSeparableFilter2DEXT;
  tbl.glBinormal3bEXT = code_glBinormal3bEXT;
  tbl.glBinormal3bvEXT = code_glBinormal3bvEXT;
  tbl.glBinormal3dEXT = code_glBinormal3dEXT;
  tbl.glBinormal3dvEXT = code_glBinormal3dvEXT;
  tbl.glBinormal3fEXT = code_glBinormal3fEXT;
  tbl.glBinormal3fvEXT = code_glBinormal3fvEXT;
  tbl.glBinormal3iEXT = code_glBinormal3iEXT;
  tbl.glBinormal3ivEXT = code_glBinormal3ivEXT;
  tbl.glBinormal3sEXT = code_glBinormal3sEXT;
  tbl.glBinormal3svEXT = code_glBinormal3svEXT;
  tbl.glBinormalPointerEXT = code_glBinormalPointerEXT;
  tbl.glTangent3bEXT = code_glTangent3bEXT;
  tbl.glTangent3bvEXT = code_glTangent3bvEXT;
  tbl.glTangent3dEXT = code_glTangent3dEXT;
  tbl.glTangent3dvEXT = code_glTangent3dvEXT;
  tbl.glTangent3fEXT = code_glTangent3fEXT;
  tbl.glTangent3fvEXT = code_glTangent3fvEXT;
  tbl.glTangent3iEXT = code_glTangent3iEXT;
  tbl.glTangent3ivEXT = code_glTangent3ivEXT;
  tbl.glTangent3sEXT = code_glTangent3sEXT;
  tbl.glTangent3svEXT = code_glTangent3svEXT;
  tbl.glTangentPointerEXT = code_glTangentPointerEXT;
  tbl.glCopyTexImage1DEXT = code_glCopyTexImage1DEXT;
  tbl.glCopyTexImage2DEXT = code_glCopyTexImage2DEXT;
  tbl.glCopyTexSubImage1DEXT = code_glCopyTexSubImage1DEXT;
  tbl.glCopyTexSubImage2DEXT = code_glCopyTexSubImage2DEXT;
  tbl.glCopyTexSubImage3DEXT = code_glCopyTexSubImage3DEXT;
  tbl.glCullParameterdvEXT = code_glCullParameterdvEXT;
  tbl.glCullParameterfvEXT = code_glCullParameterfvEXT;
  tbl.glGetObjectLabelEXT = code_glGetObjectLabelEXT;
  tbl.glLabelObjectEXT = code_glLabelObjectEXT;
  tbl.glInsertEventMarkerEXT = code_glInsertEventMarkerEXT;
  tbl.glPopGroupMarkerEXT = code_glPopGroupMarkerEXT;
  tbl.glPushGroupMarkerEXT = code_glPushGroupMarkerEXT;
  tbl.glDepthBoundsEXT = code_glDepthBoundsEXT;
  tbl.glBindMultiTextureEXT = code_glBindMultiTextureEXT;
  tbl.glCheckNamedFramebufferStatusEXT = code_glCheckNamedFramebufferStatusEXT;
  tbl.glClientAttribDefaultEXT = code_glClientAttribDefaultEXT;
  tbl.glCompressedMultiTexImage1DEXT = code_glCompressedMultiTexImage1DEXT;
  tbl.glCompressedMultiTexImage2DEXT = code_glCompressedMultiTexImage2DEXT;
  tbl.glCompressedMultiTexImage3DEXT = code_glCompressedMultiTexImage3DEXT;
  tbl.glCompressedMultiTexSubImage1DEXT = code_glCompressedMultiTexSubImage1DEXT;
  tbl.glCompressedMultiTexSubImage2DEXT = code_glCompressedMultiTexSubImage2DEXT;
  tbl.glCompressedMultiTexSubImage3DEXT = code_glCompressedMultiTexSubImage3DEXT;
  tbl.glCompressedTextureImage1DEXT = code_glCompressedTextureImage1DEXT;
  tbl.glCompressedTextureImage2DEXT = code_glCompressedTextureImage2DEXT;
  tbl.glCompressedTextureImage3DEXT = code_glCompressedTextureImage3DEXT;
  tbl.glCompressedTextureSubImage1DEXT = code_glCompressedTextureSubImage1DEXT;
  tbl.glCompressedTextureSubImage2DEXT = code_glCompressedTextureSubImage2DEXT;
  tbl.glCompressedTextureSubImage3DEXT = code_glCompressedTextureSubImage3DEXT;
  tbl.glCopyMultiTexImage1DEXT = code_glCopyMultiTexImage1DEXT;
  tbl.glCopyMultiTexImage2DEXT = code_glCopyMultiTexImage2DEXT;
  tbl.glCopyMultiTexSubImage1DEXT = code_glCopyMultiTexSubImage1DEXT;
  tbl.glCopyMultiTexSubImage2DEXT = code_glCopyMultiTexSubImage2DEXT;
  tbl.glCopyMultiTexSubImage3DEXT = code_glCopyMultiTexSubImage3DEXT;
  tbl.glCopyTextureImage1DEXT = code_glCopyTextureImage1DEXT;
  tbl.glCopyTextureImage2DEXT = code_glCopyTextureImage2DEXT;
  tbl.glCopyTextureSubImage1DEXT = code_glCopyTextureSubImage1DEXT;
  tbl.glCopyTextureSubImage2DEXT = code_glCopyTextureSubImage2DEXT;
  tbl.glCopyTextureSubImage3DEXT = code_glCopyTextureSubImage3DEXT;
  tbl.glDisableClientStateIndexedEXT = code_glDisableClientStateIndexedEXT;
  tbl.glDisableClientStateiEXT = code_glDisableClientStateiEXT;
  tbl.glDisableVertexArrayAttribEXT = code_glDisableVertexArrayAttribEXT;
  tbl.glDisableVertexArrayEXT = code_glDisableVertexArrayEXT;
  tbl.glEnableClientStateIndexedEXT = code_glEnableClientStateIndexedEXT;
  tbl.glEnableClientStateiEXT = code_glEnableClientStateiEXT;
  tbl.glEnableVertexArrayAttribEXT = code_glEnableVertexArrayAttribEXT;
  tbl.glEnableVertexArrayEXT = code_glEnableVertexArrayEXT;
  tbl.glFlushMappedNamedBufferRangeEXT = code_glFlushMappedNamedBufferRangeEXT;
  tbl.glFramebufferDrawBufferEXT = code_glFramebufferDrawBufferEXT;
  tbl.glFramebufferDrawBuffersEXT = code_glFramebufferDrawBuffersEXT;
  tbl.glFramebufferReadBufferEXT = code_glFramebufferReadBufferEXT;
  tbl.glGenerateMultiTexMipmapEXT = code_glGenerateMultiTexMipmapEXT;
  tbl.glGenerateTextureMipmapEXT = code_glGenerateTextureMipmapEXT;
  tbl.glGetCompressedMultiTexImageEXT = code_glGetCompressedMultiTexImageEXT;
  tbl.glGetCompressedTextureImageEXT = code_glGetCompressedTextureImageEXT;
  tbl.glGetDoubleIndexedvEXT = code_glGetDoubleIndexedvEXT;
  tbl.glGetDoublei_vEXT = code_glGetDoublei_vEXT;
  tbl.glGetFloatIndexedvEXT = code_glGetFloatIndexedvEXT;
  tbl.glGetFloati_vEXT = code_glGetFloati_vEXT;
  tbl.glGetFramebufferParameterivEXT = code_glGetFramebufferParameterivEXT;
  tbl.glGetMultiTexEnvfvEXT = code_glGetMultiTexEnvfvEXT;
  tbl.glGetMultiTexEnvivEXT = code_glGetMultiTexEnvivEXT;
  tbl.glGetMultiTexGendvEXT = code_glGetMultiTexGendvEXT;
  tbl.glGetMultiTexGenfvEXT = code_glGetMultiTexGenfvEXT;
  tbl.glGetMultiTexGenivEXT = code_glGetMultiTexGenivEXT;
  tbl.glGetMultiTexImageEXT = code_glGetMultiTexImageEXT;
  tbl.glGetMultiTexLevelParameterfvEXT = code_glGetMultiTexLevelParameterfvEXT;
  tbl.glGetMultiTexLevelParameterivEXT = code_glGetMultiTexLevelParameterivEXT;
  tbl.glGetMultiTexParameterIivEXT = code_glGetMultiTexParameterIivEXT;
  tbl.glGetMultiTexParameterIuivEXT = code_glGetMultiTexParameterIuivEXT;
  tbl.glGetMultiTexParameterfvEXT = code_glGetMultiTexParameterfvEXT;
  tbl.glGetMultiTexParameterivEXT = code_glGetMultiTexParameterivEXT;
  tbl.glGetNamedBufferParameterivEXT = code_glGetNamedBufferParameterivEXT;
  tbl.glGetNamedBufferPointervEXT = code_glGetNamedBufferPointervEXT;
  tbl.glGetNamedBufferSubDataEXT = code_glGetNamedBufferSubDataEXT;
  tbl.glGetNamedFramebufferAttachmentParameterivEXT = code_glGetNamedFramebufferAttachmentParameterivEXT;
  tbl.glGetNamedProgramLocalParameterIivEXT = code_glGetNamedProgramLocalParameterIivEXT;
  tbl.glGetNamedProgramLocalParameterIuivEXT = code_glGetNamedProgramLocalParameterIuivEXT;
  tbl.glGetNamedProgramLocalParameterdvEXT = code_glGetNamedProgramLocalParameterdvEXT;
  tbl.glGetNamedProgramLocalParameterfvEXT = code_glGetNamedProgramLocalParameterfvEXT;
  tbl.glGetNamedProgramStringEXT = code_glGetNamedProgramStringEXT;
  tbl.glGetNamedProgramivEXT = code_glGetNamedProgramivEXT;
  tbl.glGetNamedRenderbufferParameterivEXT = code_glGetNamedRenderbufferParameterivEXT;
  tbl.glGetPointerIndexedvEXT = code_glGetPointerIndexedvEXT;
  tbl.glGetPointeri_vEXT = code_glGetPointeri_vEXT;
  tbl.glGetTextureImageEXT = code_glGetTextureImageEXT;
  tbl.glGetTextureLevelParameterfvEXT = code_glGetTextureLevelParameterfvEXT;
  tbl.glGetTextureLevelParameterivEXT = code_glGetTextureLevelParameterivEXT;
  tbl.glGetTextureParameterIivEXT = code_glGetTextureParameterIivEXT;
  tbl.glGetTextureParameterIuivEXT = code_glGetTextureParameterIuivEXT;
  tbl.glGetTextureParameterfvEXT = code_glGetTextureParameterfvEXT;
  tbl.glGetTextureParameterivEXT = code_glGetTextureParameterivEXT;
  tbl.glGetVertexArrayIntegeri_vEXT = code_glGetVertexArrayIntegeri_vEXT;
  tbl.glGetVertexArrayIntegervEXT = code_glGetVertexArrayIntegervEXT;
  tbl.glGetVertexArrayPointeri_vEXT = code_glGetVertexArrayPointeri_vEXT;
  tbl.glGetVertexArrayPointervEXT = code_glGetVertexArrayPointervEXT;
  tbl.glMapNamedBufferEXT = code_glMapNamedBufferEXT;
  tbl.glMapNamedBufferRangeEXT = code_glMapNamedBufferRangeEXT;
  tbl.glMatrixFrustumEXT = code_glMatrixFrustumEXT;
  tbl.glMatrixLoadIdentityEXT = code_glMatrixLoadIdentityEXT;
  tbl.glMatrixLoadTransposedEXT = code_glMatrixLoadTransposedEXT;
  tbl.glMatrixLoadTransposefEXT = code_glMatrixLoadTransposefEXT;
  tbl.glMatrixLoaddEXT = code_glMatrixLoaddEXT;
  tbl.glMatrixLoadfEXT = code_glMatrixLoadfEXT;
  tbl.glMatrixMultTransposedEXT = code_glMatrixMultTransposedEXT;
  tbl.glMatrixMultTransposefEXT = code_glMatrixMultTransposefEXT;
  tbl.glMatrixMultdEXT = code_glMatrixMultdEXT;
  tbl.glMatrixMultfEXT = code_glMatrixMultfEXT;
  tbl.glMatrixOrthoEXT = code_glMatrixOrthoEXT;
  tbl.glMatrixPopEXT = code_glMatrixPopEXT;
  tbl.glMatrixPushEXT = code_glMatrixPushEXT;
  tbl.glMatrixRotatedEXT = code_glMatrixRotatedEXT;
  tbl.glMatrixRotatefEXT = code_glMatrixRotatefEXT;
  tbl.glMatrixScaledEXT = code_glMatrixScaledEXT;
  tbl.glMatrixScalefEXT = code_glMatrixScalefEXT;
  tbl.glMatrixTranslatedEXT = code_glMatrixTranslatedEXT;
  tbl.glMatrixTranslatefEXT = code_glMatrixTranslatefEXT;
  tbl.glMultiTexBufferEXT = code_glMultiTexBufferEXT;
  tbl.glMultiTexCoordPointerEXT = code_glMultiTexCoordPointerEXT;
  tbl.glMultiTexEnvfEXT = code_glMultiTexEnvfEXT;
  tbl.glMultiTexEnvfvEXT = code_glMultiTexEnvfvEXT;
  tbl.glMultiTexEnviEXT = code_glMultiTexEnviEXT;
  tbl.glMultiTexEnvivEXT = code_glMultiTexEnvivEXT;
  tbl.glMultiTexGendEXT = code_glMultiTexGendEXT;
  tbl.glMultiTexGendvEXT = code_glMultiTexGendvEXT;
  tbl.glMultiTexGenfEXT = code_glMultiTexGenfEXT;
  tbl.glMultiTexGenfvEXT = code_glMultiTexGenfvEXT;
  tbl.glMultiTexGeniEXT = code_glMultiTexGeniEXT;
  tbl.glMultiTexGenivEXT = code_glMultiTexGenivEXT;
  tbl.glMultiTexImage1DEXT = code_glMultiTexImage1DEXT;
  tbl.glMultiTexImage2DEXT = code_glMultiTexImage2DEXT;
  tbl.glMultiTexImage3DEXT = code_glMultiTexImage3DEXT;
  tbl.glMultiTexParameterIivEXT = code_glMultiTexParameterIivEXT;
  tbl.glMultiTexParameterIuivEXT = code_glMultiTexParameterIuivEXT;
  tbl.glMultiTexParameterfEXT = code_glMultiTexParameterfEXT;
  tbl.glMultiTexParameterfvEXT = code_glMultiTexParameterfvEXT;
  tbl.glMultiTexParameteriEXT = code_glMultiTexParameteriEXT;
  tbl.glMultiTexParameterivEXT = code_glMultiTexParameterivEXT;
  tbl.glMultiTexRenderbufferEXT = code_glMultiTexRenderbufferEXT;
  tbl.glMultiTexSubImage1DEXT = code_glMultiTexSubImage1DEXT;
  tbl.glMultiTexSubImage2DEXT = code_glMultiTexSubImage2DEXT;
  tbl.glMultiTexSubImage3DEXT = code_glMultiTexSubImage3DEXT;
  tbl.glNamedBufferDataEXT = code_glNamedBufferDataEXT;
  tbl.glNamedBufferSubDataEXT = code_glNamedBufferSubDataEXT;
  tbl.glNamedCopyBufferSubDataEXT = code_glNamedCopyBufferSubDataEXT;
  tbl.glNamedFramebufferRenderbufferEXT = code_glNamedFramebufferRenderbufferEXT;
  tbl.glNamedFramebufferTexture1DEXT = code_glNamedFramebufferTexture1DEXT;
  tbl.glNamedFramebufferTexture2DEXT = code_glNamedFramebufferTexture2DEXT;
  tbl.glNamedFramebufferTexture3DEXT = code_glNamedFramebufferTexture3DEXT;
  tbl.glNamedFramebufferTextureEXT = code_glNamedFramebufferTextureEXT;
  tbl.glNamedFramebufferTextureFaceEXT = code_glNamedFramebufferTextureFaceEXT;
  tbl.glNamedFramebufferTextureLayerEXT = code_glNamedFramebufferTextureLayerEXT;
  tbl.glNamedProgramLocalParameter4dEXT = code_glNamedProgramLocalParameter4dEXT;
  tbl.glNamedProgramLocalParameter4dvEXT = code_glNamedProgramLocalParameter4dvEXT;
  tbl.glNamedProgramLocalParameter4fEXT = code_glNamedProgramLocalParameter4fEXT;
  tbl.glNamedProgramLocalParameter4fvEXT = code_glNamedProgramLocalParameter4fvEXT;
  tbl.glNamedProgramLocalParameterI4iEXT = code_glNamedProgramLocalParameterI4iEXT;
  tbl.glNamedProgramLocalParameterI4ivEXT = code_glNamedProgramLocalParameterI4ivEXT;
  tbl.glNamedProgramLocalParameterI4uiEXT = code_glNamedProgramLocalParameterI4uiEXT;
  tbl.glNamedProgramLocalParameterI4uivEXT = code_glNamedProgramLocalParameterI4uivEXT;
  tbl.glNamedProgramLocalParameters4fvEXT = code_glNamedProgramLocalParameters4fvEXT;
  tbl.glNamedProgramLocalParametersI4ivEXT = code_glNamedProgramLocalParametersI4ivEXT;
  tbl.glNamedProgramLocalParametersI4uivEXT = code_glNamedProgramLocalParametersI4uivEXT;
  tbl.glNamedProgramStringEXT = code_glNamedProgramStringEXT;
  tbl.glNamedRenderbufferStorageEXT = code_glNamedRenderbufferStorageEXT;
  tbl.glNamedRenderbufferStorageMultisampleCoverageEXT = code_glNamedRenderbufferStorageMultisampleCoverageEXT;
  tbl.glNamedRenderbufferStorageMultisampleEXT = code_glNamedRenderbufferStorageMultisampleEXT;
  tbl.glProgramUniform1dEXT = code_glProgramUniform1dEXT;
  tbl.glProgramUniform1dvEXT = code_glProgramUniform1dvEXT;
  tbl.glProgramUniform1fEXT = code_glProgramUniform1fEXT;
  tbl.glProgramUniform1fvEXT = code_glProgramUniform1fvEXT;
  tbl.glProgramUniform1iEXT = code_glProgramUniform1iEXT;
  tbl.glProgramUniform1ivEXT = code_glProgramUniform1ivEXT;
  tbl.glProgramUniform1uiEXT = code_glProgramUniform1uiEXT;
  tbl.glProgramUniform1uivEXT = code_glProgramUniform1uivEXT;
  tbl.glProgramUniform2dEXT = code_glProgramUniform2dEXT;
  tbl.glProgramUniform2dvEXT = code_glProgramUniform2dvEXT;
  tbl.glProgramUniform2fEXT = code_glProgramUniform2fEXT;
  tbl.glProgramUniform2fvEXT = code_glProgramUniform2fvEXT;
  tbl.glProgramUniform2iEXT = code_glProgramUniform2iEXT;
  tbl.glProgramUniform2ivEXT = code_glProgramUniform2ivEXT;
  tbl.glProgramUniform2uiEXT = code_glProgramUniform2uiEXT;
  tbl.glProgramUniform2uivEXT = code_glProgramUniform2uivEXT;
  tbl.glProgramUniform3dEXT = code_glProgramUniform3dEXT;
  tbl.glProgramUniform3dvEXT = code_glProgramUniform3dvEXT;
  tbl.glProgramUniform3fEXT = code_glProgramUniform3fEXT;
  tbl.glProgramUniform3fvEXT = code_glProgramUniform3fvEXT;
  tbl.glProgramUniform3iEXT = code_glProgramUniform3iEXT;
  tbl.glProgramUniform3ivEXT = code_glProgramUniform3ivEXT;
  tbl.glProgramUniform3uiEXT = code_glProgramUniform3uiEXT;
  tbl.glProgramUniform3uivEXT = code_glProgramUniform3uivEXT;
  tbl.glProgramUniform4dEXT = code_glProgramUniform4dEXT;
  tbl.glProgramUniform4dvEXT = code_glProgramUniform4dvEXT;
  tbl.glProgramUniform4fEXT = code_glProgramUniform4fEXT;
  tbl.glProgramUniform4fvEXT = code_glProgramUniform4fvEXT;
  tbl.glProgramUniform4iEXT = code_glProgramUniform4iEXT;
  tbl.glProgramUniform4ivEXT = code_glProgramUniform4ivEXT;
  tbl.glProgramUniform4uiEXT = code_glProgramUniform4uiEXT;
  tbl.glProgramUniform4uivEXT = code_glProgramUniform4uivEXT;
  tbl.glProgramUniformMatrix2dvEXT = code_glProgramUniformMatrix2dvEXT;
  tbl.glProgramUniformMatrix2fvEXT = code_glProgramUniformMatrix2fvEXT;
  tbl.glProgramUniformMatrix2x3dvEXT = code_glProgramUniformMatrix2x3dvEXT;
  tbl.glProgramUniformMatrix2x3fvEXT = code_glProgramUniformMatrix2x3fvEXT;
  tbl.glProgramUniformMatrix2x4dvEXT = code_glProgramUniformMatrix2x4dvEXT;
  tbl.glProgramUniformMatrix2x4fvEXT = code_glProgramUniformMatrix2x4fvEXT;
  tbl.glProgramUniformMatrix3dvEXT = code_glProgramUniformMatrix3dvEXT;
  tbl.glProgramUniformMatrix3fvEXT = code_glProgramUniformMatrix3fvEXT;
  tbl.glProgramUniformMatrix3x2dvEXT = code_glProgramUniformMatrix3x2dvEXT;
  tbl.glProgramUniformMatrix3x2fvEXT = code_glProgramUniformMatrix3x2fvEXT;
  tbl.glProgramUniformMatrix3x4dvEXT = code_glProgramUniformMatrix3x4dvEXT;
  tbl.glProgramUniformMatrix3x4fvEXT = code_glProgramUniformMatrix3x4fvEXT;
  tbl.glProgramUniformMatrix4dvEXT = code_glProgramUniformMatrix4dvEXT;
  tbl.glProgramUniformMatrix4fvEXT = code_glProgramUniformMatrix4fvEXT;
  tbl.glProgramUniformMatrix4x2dvEXT = code_glProgramUniformMatrix4x2dvEXT;
  tbl.glProgramUniformMatrix4x2fvEXT = code_glProgramUniformMatrix4x2fvEXT;
  tbl.glProgramUniformMatrix4x3dvEXT = code_glProgramUniformMatrix4x3dvEXT;
  tbl.glProgramUniformMatrix4x3fvEXT = code_glProgramUniformMatrix4x3fvEXT;
  tbl.glPushClientAttribDefaultEXT = code_glPushClientAttribDefaultEXT;
  tbl.glTextureBufferEXT = code_glTextureBufferEXT;
  tbl.glTextureImage1DEXT = code_glTextureImage1DEXT;
  tbl.glTextureImage2DEXT = code_glTextureImage2DEXT;
  tbl.glTextureImage3DEXT = code_glTextureImage3DEXT;
  tbl.glTextureParameterIivEXT = code_glTextureParameterIivEXT;
  tbl.glTextureParameterIuivEXT = code_glTextureParameterIuivEXT;
  tbl.glTextureParameterfEXT = code_glTextureParameterfEXT;
  tbl.glTextureParameterfvEXT = code_glTextureParameterfvEXT;
  tbl.glTextureParameteriEXT = code_glTextureParameteriEXT;
  tbl.glTextureParameterivEXT = code_glTextureParameterivEXT;
  tbl.glTextureRenderbufferEXT = code_glTextureRenderbufferEXT;
  tbl.glTextureSubImage1DEXT = code_glTextureSubImage1DEXT;
  tbl.glTextureSubImage2DEXT = code_glTextureSubImage2DEXT;
  tbl.glTextureSubImage3DEXT = code_glTextureSubImage3DEXT;
  tbl.glUnmapNamedBufferEXT = code_glUnmapNamedBufferEXT;
  tbl.glVertexArrayColorOffsetEXT = code_glVertexArrayColorOffsetEXT;
  tbl.glVertexArrayEdgeFlagOffsetEXT = code_glVertexArrayEdgeFlagOffsetEXT;
  tbl.glVertexArrayFogCoordOffsetEXT = code_glVertexArrayFogCoordOffsetEXT;
  tbl.glVertexArrayIndexOffsetEXT = code_glVertexArrayIndexOffsetEXT;
  tbl.glVertexArrayMultiTexCoordOffsetEXT = code_glVertexArrayMultiTexCoordOffsetEXT;
  tbl.glVertexArrayNormalOffsetEXT = code_glVertexArrayNormalOffsetEXT;
  tbl.glVertexArraySecondaryColorOffsetEXT = code_glVertexArraySecondaryColorOffsetEXT;
  tbl.glVertexArrayTexCoordOffsetEXT = code_glVertexArrayTexCoordOffsetEXT;
  tbl.glVertexArrayVertexAttribIOffsetEXT = code_glVertexArrayVertexAttribIOffsetEXT;
  tbl.glVertexArrayVertexAttribOffsetEXT = code_glVertexArrayVertexAttribOffsetEXT;
  tbl.glVertexArrayVertexOffsetEXT = code_glVertexArrayVertexOffsetEXT;
  tbl.glDiscardFramebufferEXT = code_glDiscardFramebufferEXT;
  tbl.glColorMaskIndexedEXT = code_glColorMaskIndexedEXT;
  tbl.glDisableIndexedEXT = code_glDisableIndexedEXT;
  tbl.glEnableIndexedEXT = code_glEnableIndexedEXT;
  tbl.glGetBooleanIndexedvEXT = code_glGetBooleanIndexedvEXT;
  tbl.glGetIntegerIndexedvEXT = code_glGetIntegerIndexedvEXT;
  tbl.glIsEnabledIndexedEXT = code_glIsEnabledIndexedEXT;
  tbl.glDrawArraysInstancedEXT = code_glDrawArraysInstancedEXT;
  tbl.glDrawElementsInstancedEXT = code_glDrawElementsInstancedEXT;
  tbl.glDrawRangeElementsEXT = code_glDrawRangeElementsEXT;
  tbl.glFogCoordPointerEXT = code_glFogCoordPointerEXT;
  tbl.glFogCoorddEXT = code_glFogCoorddEXT;
  tbl.glFogCoorddvEXT = code_glFogCoorddvEXT;
  tbl.glFogCoordfEXT = code_glFogCoordfEXT;
  tbl.glFogCoordfvEXT = code_glFogCoordfvEXT;
  tbl.glFragmentColorMaterialEXT = code_glFragmentColorMaterialEXT;
  tbl.glFragmentLightModelfEXT = code_glFragmentLightModelfEXT;
  tbl.glFragmentLightModelfvEXT = code_glFragmentLightModelfvEXT;
  tbl.glFragmentLightModeliEXT = code_glFragmentLightModeliEXT;
  tbl.glFragmentLightModelivEXT = code_glFragmentLightModelivEXT;
  tbl.glFragmentLightfEXT = code_glFragmentLightfEXT;
  tbl.glFragmentLightfvEXT = code_glFragmentLightfvEXT;
  tbl.glFragmentLightiEXT = code_glFragmentLightiEXT;
  tbl.glFragmentLightivEXT = code_glFragmentLightivEXT;
  tbl.glFragmentMaterialfEXT = code_glFragmentMaterialfEXT;
  tbl.glFragmentMaterialfvEXT = code_glFragmentMaterialfvEXT;
  tbl.glFragmentMaterialiEXT = code_glFragmentMaterialiEXT;
  tbl.glFragmentMaterialivEXT = code_glFragmentMaterialivEXT;
  tbl.glGetFragmentLightfvEXT = code_glGetFragmentLightfvEXT;
  tbl.glGetFragmentLightivEXT = code_glGetFragmentLightivEXT;
  tbl.glGetFragmentMaterialfvEXT = code_glGetFragmentMaterialfvEXT;
  tbl.glGetFragmentMaterialivEXT = code_glGetFragmentMaterialivEXT;
  tbl.glLightEnviEXT = code_glLightEnviEXT;
  tbl.glBlitFramebufferEXT = code_glBlitFramebufferEXT;
  tbl.glRenderbufferStorageMultisampleEXT = code_glRenderbufferStorageMultisampleEXT;
  tbl.glBindFramebufferEXT = code_glBindFramebufferEXT;
  tbl.glBindRenderbufferEXT = code_glBindRenderbufferEXT;
  tbl.glCheckFramebufferStatusEXT = code_glCheckFramebufferStatusEXT;
  tbl.glDeleteFramebuffersEXT = code_glDeleteFramebuffersEXT;
  tbl.glDeleteRenderbuffersEXT = code_glDeleteRenderbuffersEXT;
  tbl.glFramebufferRenderbufferEXT = code_glFramebufferRenderbufferEXT;
  tbl.glFramebufferTexture1DEXT = code_glFramebufferTexture1DEXT;
  tbl.glFramebufferTexture2DEXT = code_glFramebufferTexture2DEXT;
  tbl.glFramebufferTexture3DEXT = code_glFramebufferTexture3DEXT;
  tbl.glGenFramebuffersEXT = code_glGenFramebuffersEXT;
  tbl.glGenRenderbuffersEXT = code_glGenRenderbuffersEXT;
  tbl.glGenerateMipmapEXT = code_glGenerateMipmapEXT;
  tbl.glGetFramebufferAttachmentParameterivEXT = code_glGetFramebufferAttachmentParameterivEXT;
  tbl.glGetRenderbufferParameterivEXT = code_glGetRenderbufferParameterivEXT;
  tbl.glIsFramebufferEXT = code_glIsFramebufferEXT;
  tbl.glIsRenderbufferEXT = code_glIsRenderbufferEXT;
  tbl.glRenderbufferStorageEXT = code_glRenderbufferStorageEXT;
  tbl.glFramebufferTextureEXT = code_glFramebufferTextureEXT;
  tbl.glFramebufferTextureFaceEXT = code_glFramebufferTextureFaceEXT;
  tbl.glProgramParameteriEXT = code_glProgramParameteriEXT;
  tbl.glProgramEnvParameters4fvEXT = code_glProgramEnvParameters4fvEXT;
  tbl.glProgramLocalParameters4fvEXT = code_glProgramLocalParameters4fvEXT;
  tbl.glBindFragDataLocationEXT = code_glBindFragDataLocationEXT;
  tbl.glGetFragDataLocationEXT = code_glGetFragDataLocationEXT;
  tbl.glGetUniformuivEXT = code_glGetUniformuivEXT;
  tbl.glGetVertexAttribIivEXT = code_glGetVertexAttribIivEXT;
  tbl.glGetVertexAttribIuivEXT = code_glGetVertexAttribIuivEXT;
  tbl.glUniform1uiEXT = code_glUniform1uiEXT;
  tbl.glUniform1uivEXT = code_glUniform1uivEXT;
  tbl.glUniform2uiEXT = code_glUniform2uiEXT;
  tbl.glUniform2uivEXT = code_glUniform2uivEXT;
  tbl.glUniform3uiEXT = code_glUniform3uiEXT;
  tbl.glUniform3uivEXT = code_glUniform3uivEXT;
  tbl.glUniform4uiEXT = code_glUniform4uiEXT;
  tbl.glUniform4uivEXT = code_glUniform4uivEXT;
  tbl.glVertexAttribI1iEXT = code_glVertexAttribI1iEXT;
  tbl.glVertexAttribI1ivEXT = code_glVertexAttribI1ivEXT;
  tbl.glVertexAttribI1uiEXT = code_glVertexAttribI1uiEXT;
  tbl.glVertexAttribI1uivEXT = code_glVertexAttribI1uivEXT;
  tbl.glVertexAttribI2iEXT = code_glVertexAttribI2iEXT;
  tbl.glVertexAttribI2ivEXT = code_glVertexAttribI2ivEXT;
  tbl.glVertexAttribI2uiEXT = code_glVertexAttribI2uiEXT;
  tbl.glVertexAttribI2uivEXT = code_glVertexAttribI2uivEXT;
  tbl.glVertexAttribI3iEXT = code_glVertexAttribI3iEXT;
  tbl.glVertexAttribI3ivEXT = code_glVertexAttribI3ivEXT;
  tbl.glVertexAttribI3uiEXT = code_glVertexAttribI3uiEXT;
  tbl.glVertexAttribI3uivEXT = code_glVertexAttribI3uivEXT;
  tbl.glVertexAttribI4bvEXT = code_glVertexAttribI4bvEXT;
  tbl.glVertexAttribI4iEXT = code_glVertexAttribI4iEXT;
  tbl.glVertexAttribI4ivEXT = code_glVertexAttribI4ivEXT;
  tbl.glVertexAttribI4svEXT = code_glVertexAttribI4svEXT;
  tbl.glVertexAttribI4ubvEXT = code_glVertexAttribI4ubvEXT;
  tbl.glVertexAttribI4uiEXT = code_glVertexAttribI4uiEXT;
  tbl.glVertexAttribI4uivEXT = code_glVertexAttribI4uivEXT;
  tbl.glVertexAttribI4usvEXT = code_glVertexAttribI4usvEXT;
  tbl.glVertexAttribIPointerEXT = code_glVertexAttribIPointerEXT;
  tbl.glGetHistogramEXT = code_glGetHistogramEXT;
  tbl.glGetHistogramParameterfvEXT = code_glGetHistogramParameterfvEXT;
  tbl.glGetHistogramParameterivEXT = code_glGetHistogramParameterivEXT;
  tbl.glGetMinmaxEXT = code_glGetMinmaxEXT;
  tbl.glGetMinmaxParameterfvEXT = code_glGetMinmaxParameterfvEXT;
  tbl.glGetMinmaxParameterivEXT = code_glGetMinmaxParameterivEXT;
  tbl.glHistogramEXT = code_glHistogramEXT;
  tbl.glMinmaxEXT = code_glMinmaxEXT;
  tbl.glResetHistogramEXT = code_glResetHistogramEXT;
  tbl.glResetMinmaxEXT = code_glResetMinmaxEXT;
  tbl.glIndexFuncEXT = code_glIndexFuncEXT;
  tbl.glIndexMaterialEXT = code_glIndexMaterialEXT;
  tbl.glApplyTextureEXT = code_glApplyTextureEXT;
  tbl.glTextureLightEXT = code_glTextureLightEXT;
  tbl.glTextureMaterialEXT = code_glTextureMaterialEXT;
  tbl.glFlushMappedBufferRangeEXT = code_glFlushMappedBufferRangeEXT;
  tbl.glMapBufferRangeEXT = code_glMapBufferRangeEXT;
  tbl.glMultiDrawArraysEXT = code_glMultiDrawArraysEXT;
  tbl.glMultiDrawElementsEXT = code_glMultiDrawElementsEXT;
  tbl.glSampleMaskEXT = code_glSampleMaskEXT;
  tbl.glSamplePatternEXT = code_glSamplePatternEXT;
  tbl.glFramebufferTexture2DMultisampleEXT = code_glFramebufferTexture2DMultisampleEXT;
  tbl.glDrawBuffersIndexedEXT = code_glDrawBuffersIndexedEXT;
  tbl.glGetIntegeri_vEXT = code_glGetIntegeri_vEXT;
  tbl.glReadBufferIndexedEXT = code_glReadBufferIndexedEXT;
  tbl.glBeginQueryEXT = code_glBeginQueryEXT;
  tbl.glDeleteQueriesEXT = code_glDeleteQueriesEXT;
  tbl.glEndQueryEXT = code_glEndQueryEXT;
  tbl.glGenQueriesEXT = code_glGenQueriesEXT;
  tbl.glGetQueryObjectuivEXT = code_glGetQueryObjectuivEXT;
  tbl.glGetQueryivEXT = code_glGetQueryivEXT;
  tbl.glIsQueryEXT = code_glIsQueryEXT;
  tbl.glColorTableEXT = code_glColorTableEXT;
  tbl.glGetColorTableEXT = code_glGetColorTableEXT;
  tbl.glGetColorTableParameterfvEXT = code_glGetColorTableParameterfvEXT;
  tbl.glGetColorTableParameterivEXT = code_glGetColorTableParameterivEXT;
  tbl.glGetPixelTransformParameterfvEXT = code_glGetPixelTransformParameterfvEXT;
  tbl.glGetPixelTransformParameterivEXT = code_glGetPixelTransformParameterivEXT;
  tbl.glPixelTransformParameterfEXT = code_glPixelTransformParameterfEXT;
  tbl.glPixelTransformParameterfvEXT = code_glPixelTransformParameterfvEXT;
  tbl.glPixelTransformParameteriEXT = code_glPixelTransformParameteriEXT;
  tbl.glPixelTransformParameterivEXT = code_glPixelTransformParameterivEXT;
  tbl.glPointParameterfEXT = code_glPointParameterfEXT;
  tbl.glPointParameterfvEXT = code_glPointParameterfvEXT;
  tbl.glPolygonOffsetEXT = code_glPolygonOffsetEXT;
  tbl.glProvokingVertexEXT = code_glProvokingVertexEXT;
  tbl.glGetnUniformfvEXT = code_glGetnUniformfvEXT;
  tbl.glGetnUniformivEXT = code_glGetnUniformivEXT;
  tbl.glReadnPixelsEXT = code_glReadnPixelsEXT;
  tbl.glBeginSceneEXT = code_glBeginSceneEXT;
  tbl.glEndSceneEXT = code_glEndSceneEXT;
  tbl.glSecondaryColor3bEXT = code_glSecondaryColor3bEXT;
  tbl.glSecondaryColor3bvEXT = code_glSecondaryColor3bvEXT;
  tbl.glSecondaryColor3dEXT = code_glSecondaryColor3dEXT;
  tbl.glSecondaryColor3dvEXT = code_glSecondaryColor3dvEXT;
  tbl.glSecondaryColor3fEXT = code_glSecondaryColor3fEXT;
  tbl.glSecondaryColor3fvEXT = code_glSecondaryColor3fvEXT;
  tbl.glSecondaryColor3iEXT = code_glSecondaryColor3iEXT;
  tbl.glSecondaryColor3ivEXT = code_glSecondaryColor3ivEXT;
  tbl.glSecondaryColor3sEXT = code_glSecondaryColor3sEXT;
  tbl.glSecondaryColor3svEXT = code_glSecondaryColor3svEXT;
  tbl.glSecondaryColor3ubEXT = code_glSecondaryColor3ubEXT;
  tbl.glSecondaryColor3ubvEXT = code_glSecondaryColor3ubvEXT;
  tbl.glSecondaryColor3uiEXT = code_glSecondaryColor3uiEXT;
  tbl.glSecondaryColor3uivEXT = code_glSecondaryColor3uivEXT;
  tbl.glSecondaryColor3usEXT = code_glSecondaryColor3usEXT;
  tbl.glSecondaryColor3usvEXT = code_glSecondaryColor3usvEXT;
  tbl.glSecondaryColorPointerEXT = code_glSecondaryColorPointerEXT;
  tbl.glActiveProgramEXT = code_glActiveProgramEXT;
  tbl.glCreateShaderProgramEXT = code_glCreateShaderProgramEXT;
  tbl.glUseShaderProgramEXT = code_glUseShaderProgramEXT;
  tbl.glBindImageTextureEXT = code_glBindImageTextureEXT;
  tbl.glMemoryBarrierEXT = code_glMemoryBarrierEXT;
  tbl.glStencilClearTagEXT = code_glStencilClearTagEXT;
  tbl.glActiveStencilFaceEXT = code_glActiveStencilFaceEXT;
  tbl.glTexSubImage1DEXT = code_glTexSubImage1DEXT;
  tbl.glTexSubImage2DEXT = code_glTexSubImage2DEXT;
  tbl.glTexSubImage3DEXT = code_glTexSubImage3DEXT;
  tbl.glTexImage3DEXT = code_glTexImage3DEXT;
  tbl.glFramebufferTextureLayerEXT = code_glFramebufferTextureLayerEXT;
  tbl.glTexBufferEXT = code_glTexBufferEXT;
  tbl.glClearColorIiEXT = code_glClearColorIiEXT;
  tbl.glClearColorIuiEXT = code_glClearColorIuiEXT;
  tbl.glGetTexParameterIivEXT = code_glGetTexParameterIivEXT;
  tbl.glGetTexParameterIuivEXT = code_glGetTexParameterIuivEXT;
  tbl.glTexParameterIivEXT = code_glTexParameterIivEXT;
  tbl.glTexParameterIuivEXT = code_glTexParameterIuivEXT;
  tbl.glAreTexturesResidentEXT = code_glAreTexturesResidentEXT;
  tbl.glBindTextureEXT = code_glBindTextureEXT;
  tbl.glDeleteTexturesEXT = code_glDeleteTexturesEXT;
  tbl.glGenTexturesEXT = code_glGenTexturesEXT;
  tbl.glIsTextureEXT = code_glIsTextureEXT;
  tbl.glPrioritizeTexturesEXT = code_glPrioritizeTexturesEXT;
  tbl.glTextureNormalEXT = code_glTextureNormalEXT;
  tbl.glTexStorage1DEXT = code_glTexStorage1DEXT;
  tbl.glTexStorage2DEXT = code_glTexStorage2DEXT;
  tbl.glTexStorage3DEXT = code_glTexStorage3DEXT;
  tbl.glGetQueryObjecti64vEXT = code_glGetQueryObjecti64vEXT;
  tbl.glGetQueryObjectui64vEXT = code_glGetQueryObjectui64vEXT;
  tbl.glBeginTransformFeedbackEXT = code_glBeginTransformFeedbackEXT;
  tbl.glBindBufferBaseEXT = code_glBindBufferBaseEXT;
  tbl.glBindBufferOffsetEXT = code_glBindBufferOffsetEXT;
  tbl.glBindBufferRangeEXT = code_glBindBufferRangeEXT;
  tbl.glEndTransformFeedbackEXT = code_glEndTransformFeedbackEXT;
  tbl.glGetTransformFeedbackVaryingEXT = code_glGetTransformFeedbackVaryingEXT;
  tbl.glTransformFeedbackVaryingsEXT = code_glTransformFeedbackVaryingsEXT;
  tbl.glArrayElementEXT = code_glArrayElementEXT;
  tbl.glColorPointerEXT = code_glColorPointerEXT;
  tbl.glDrawArraysEXT = code_glDrawArraysEXT;
  tbl.glEdgeFlagPointerEXT = code_glEdgeFlagPointerEXT;
  tbl.glGetPointervEXT = code_glGetPointervEXT;
  tbl.glIndexPointerEXT = code_glIndexPointerEXT;
  tbl.glNormalPointerEXT = code_glNormalPointerEXT;
  tbl.glTexCoordPointerEXT = code_glTexCoordPointerEXT;
  tbl.glVertexPointerEXT = code_glVertexPointerEXT;
  tbl.glGetVertexAttribLdvEXT = code_glGetVertexAttribLdvEXT;
  tbl.glVertexArrayVertexAttribLOffsetEXT = code_glVertexArrayVertexAttribLOffsetEXT;
  tbl.glVertexAttribL1dEXT = code_glVertexAttribL1dEXT;
  tbl.glVertexAttribL1dvEXT = code_glVertexAttribL1dvEXT;
  tbl.glVertexAttribL2dEXT = code_glVertexAttribL2dEXT;
  tbl.glVertexAttribL2dvEXT = code_glVertexAttribL2dvEXT;
  tbl.glVertexAttribL3dEXT = code_glVertexAttribL3dEXT;
  tbl.glVertexAttribL3dvEXT = code_glVertexAttribL3dvEXT;
  tbl.glVertexAttribL4dEXT = code_glVertexAttribL4dEXT;
  tbl.glVertexAttribL4dvEXT = code_glVertexAttribL4dvEXT;
  tbl.glVertexAttribLPointerEXT = code_glVertexAttribLPointerEXT;
  tbl.glBeginVertexShaderEXT = code_glBeginVertexShaderEXT;
  tbl.glBindLightParameterEXT = code_glBindLightParameterEXT;
  tbl.glBindMaterialParameterEXT = code_glBindMaterialParameterEXT;
  tbl.glBindParameterEXT = code_glBindParameterEXT;
  tbl.glBindTexGenParameterEXT = code_glBindTexGenParameterEXT;
  tbl.glBindTextureUnitParameterEXT = code_glBindTextureUnitParameterEXT;
  tbl.glBindVertexShaderEXT = code_glBindVertexShaderEXT;
  tbl.glDeleteVertexShaderEXT = code_glDeleteVertexShaderEXT;
  tbl.glDisableVariantClientStateEXT = code_glDisableVariantClientStateEXT;
  tbl.glEnableVariantClientStateEXT = code_glEnableVariantClientStateEXT;
  tbl.glEndVertexShaderEXT = code_glEndVertexShaderEXT;
  tbl.glExtractComponentEXT = code_glExtractComponentEXT;
  tbl.glGenSymbolsEXT = code_glGenSymbolsEXT;
  tbl.glGenVertexShadersEXT = code_glGenVertexShadersEXT;
  tbl.glGetInvariantBooleanvEXT = code_glGetInvariantBooleanvEXT;
  tbl.glGetInvariantFloatvEXT = code_glGetInvariantFloatvEXT;
  tbl.glGetInvariantIntegervEXT = code_glGetInvariantIntegervEXT;
  tbl.glGetLocalConstantBooleanvEXT = code_glGetLocalConstantBooleanvEXT;
  tbl.glGetLocalConstantFloatvEXT = code_glGetLocalConstantFloatvEXT;
  tbl.glGetLocalConstantIntegervEXT = code_glGetLocalConstantIntegervEXT;
  tbl.glGetVariantBooleanvEXT = code_glGetVariantBooleanvEXT;
  tbl.glGetVariantFloatvEXT = code_glGetVariantFloatvEXT;
  tbl.glGetVariantIntegervEXT = code_glGetVariantIntegervEXT;
  tbl.glGetVariantPointervEXT = code_glGetVariantPointervEXT;
  tbl.glInsertComponentEXT = code_glInsertComponentEXT;
  tbl.glIsVariantEnabledEXT = code_glIsVariantEnabledEXT;
  tbl.glSetInvariantEXT = code_glSetInvariantEXT;
  tbl.glSetLocalConstantEXT = code_glSetLocalConstantEXT;
  tbl.glShaderOp1EXT = code_glShaderOp1EXT;
  tbl.glShaderOp2EXT = code_glShaderOp2EXT;
  tbl.glShaderOp3EXT = code_glShaderOp3EXT;
  tbl.glSwizzleEXT = code_glSwizzleEXT;
  tbl.glVariantPointerEXT = code_glVariantPointerEXT;
  tbl.glVariantbvEXT = code_glVariantbvEXT;
  tbl.glVariantdvEXT = code_glVariantdvEXT;
  tbl.glVariantfvEXT = code_glVariantfvEXT;
  tbl.glVariantivEXT = code_glVariantivEXT;
  tbl.glVariantsvEXT = code_glVariantsvEXT;
  tbl.glVariantubvEXT = code_glVariantubvEXT;
  tbl.glVariantuivEXT = code_glVariantuivEXT;
  tbl.glVariantusvEXT = code_glVariantusvEXT;
  tbl.glWriteMaskEXT = code_glWriteMaskEXT;
  tbl.glVertexWeightPointerEXT = code_glVertexWeightPointerEXT;
  tbl.glVertexWeightfEXT = code_glVertexWeightfEXT;
  tbl.glVertexWeightfvEXT = code_glVertexWeightfvEXT;
  tbl.glImportSyncEXT = code_glImportSyncEXT;
  tbl.glFrameTerminatorGREMEDY = code_glFrameTerminatorGREMEDY;
  tbl.glStringMarkerGREMEDY = code_glStringMarkerGREMEDY;
  tbl.glGetImageTransformParameterfvHP = code_glGetImageTransformParameterfvHP;
  tbl.glGetImageTransformParameterivHP = code_glGetImageTransformParameterivHP;
  tbl.glImageTransformParameterfHP = code_glImageTransformParameterfHP;
  tbl.glImageTransformParameterfvHP = code_glImageTransformParameterfvHP;
  tbl.glImageTransformParameteriHP = code_glImageTransformParameteriHP;
  tbl.glImageTransformParameterivHP = code_glImageTransformParameterivHP;
  tbl.glMultiModeDrawArraysIBM = code_glMultiModeDrawArraysIBM;
  tbl.glMultiModeDrawElementsIBM = code_glMultiModeDrawElementsIBM;
  tbl.glColorPointerListIBM = code_glColorPointerListIBM;
  tbl.glEdgeFlagPointerListIBM = code_glEdgeFlagPointerListIBM;
  tbl.glFogCoordPointerListIBM = code_glFogCoordPointerListIBM;
  tbl.glIndexPointerListIBM = code_glIndexPointerListIBM;
  tbl.glNormalPointerListIBM = code_glNormalPointerListIBM;
  tbl.glSecondaryColorPointerListIBM = code_glSecondaryColorPointerListIBM;
  tbl.glTexCoordPointerListIBM = code_glTexCoordPointerListIBM;
  tbl.glVertexPointerListIBM = code_glVertexPointerListIBM;
  tbl.glFramebufferTexture2DMultisampleIMG = code_glFramebufferTexture2DMultisampleIMG;
  tbl.glRenderbufferStorageMultisampleIMG = code_glRenderbufferStorageMultisampleIMG;
  tbl.glBlendFuncSeparateINGR = code_glBlendFuncSeparateINGR;
  tbl.glColorPointervINTEL = code_glColorPointervINTEL;
  tbl.glNormalPointervINTEL = code_glNormalPointervINTEL;
  tbl.glTexCoordPointervINTEL = code_glTexCoordPointervINTEL;
  tbl.glVertexPointervINTEL = code_glVertexPointervINTEL;
  tbl.glTexScissorFuncINTEL = code_glTexScissorFuncINTEL;
  tbl.glTexScissorINTEL = code_glTexScissorINTEL;
  tbl.glDebugMessageCallback = code_glDebugMessageCallback;
  tbl.glDebugMessageControl = code_glDebugMessageControl;
  tbl.glDebugMessageInsert = code_glDebugMessageInsert;
  tbl.glGetDebugMessageLog = code_glGetDebugMessageLog;
  tbl.glGetObjectLabel = code_glGetObjectLabel;
  tbl.glGetObjectPtrLabel = code_glGetObjectPtrLabel;
  tbl.glObjectLabel = code_glObjectLabel;
  tbl.glObjectPtrLabel = code_glObjectPtrLabel;
  tbl.glPopDebugGroup = code_glPopDebugGroup;
  tbl.glPushDebugGroup = code_glPushDebugGroup;
  tbl.glBufferRegionEnabled = code_glBufferRegionEnabled;
  tbl.glDeleteBufferRegion = code_glDeleteBufferRegion;
  tbl.glDrawBufferRegion = code_glDrawBufferRegion;
  tbl.glNewBufferRegion = code_glNewBufferRegion;
  tbl.glReadBufferRegion = code_glReadBufferRegion;
  tbl.glResizeBuffersMESA = code_glResizeBuffersMESA;
  tbl.glWindowPos2dMESA = code_glWindowPos2dMESA;
  tbl.glWindowPos2dvMESA = code_glWindowPos2dvMESA;
  tbl.glWindowPos2fMESA = code_glWindowPos2fMESA;
  tbl.glWindowPos2fvMESA = code_glWindowPos2fvMESA;
  tbl.glWindowPos2iMESA = code_glWindowPos2iMESA;
  tbl.glWindowPos2ivMESA = code_glWindowPos2ivMESA;
  tbl.glWindowPos2sMESA = code_glWindowPos2sMESA;
  tbl.glWindowPos2svMESA = code_glWindowPos2svMESA;
  tbl.glWindowPos3dMESA = code_glWindowPos3dMESA;
  tbl.glWindowPos3dvMESA = code_glWindowPos3dvMESA;
  tbl.glWindowPos3fMESA = code_glWindowPos3fMESA;
  tbl.glWindowPos3fvMESA = code_glWindowPos3fvMESA;
  tbl.glWindowPos3iMESA = code_glWindowPos3iMESA;
  tbl.glWindowPos3ivMESA = code_glWindowPos3ivMESA;
  tbl.glWindowPos3sMESA = code_glWindowPos3sMESA;
  tbl.glWindowPos3svMESA = code_glWindowPos3svMESA;
  tbl.glWindowPos4dMESA = code_glWindowPos4dMESA;
  tbl.glWindowPos4dvMESA = code_glWindowPos4dvMESA;
  tbl.glWindowPos4fMESA = code_glWindowPos4fMESA;
  tbl.glWindowPos4fvMESA = code_glWindowPos4fvMESA;
  tbl.glWindowPos4iMESA = code_glWindowPos4iMESA;
  tbl.glWindowPos4ivMESA = code_glWindowPos4ivMESA;
  tbl.glWindowPos4sMESA = code_glWindowPos4sMESA;
  tbl.glWindowPos4svMESA = code_glWindowPos4svMESA;
  tbl.glBeginConditionalRenderNVX = code_glBeginConditionalRenderNVX;
  tbl.glEndConditionalRenderNVX = code_glEndConditionalRenderNVX;
  tbl.glGetImageHandleNV = code_glGetImageHandleNV;
  tbl.glGetTextureHandleNV = code_glGetTextureHandleNV;
  tbl.glGetTextureSamplerHandleNV = code_glGetTextureSamplerHandleNV;
  tbl.glIsImageHandleResidentNV = code_glIsImageHandleResidentNV;
  tbl.glIsTextureHandleResidentNV = code_glIsTextureHandleResidentNV;
  tbl.glMakeImageHandleNonResidentNV = code_glMakeImageHandleNonResidentNV;
  tbl.glMakeImageHandleResidentNV = code_glMakeImageHandleResidentNV;
  tbl.glMakeTextureHandleNonResidentNV = code_glMakeTextureHandleNonResidentNV;
  tbl.glMakeTextureHandleResidentNV = code_glMakeTextureHandleResidentNV;
  tbl.glProgramUniformHandleui64NV = code_glProgramUniformHandleui64NV;
  tbl.glProgramUniformHandleui64vNV = code_glProgramUniformHandleui64vNV;
  tbl.glUniformHandleui64NV = code_glUniformHandleui64NV;
  tbl.glUniformHandleui64vNV = code_glUniformHandleui64vNV;
  tbl.glBeginConditionalRenderNV = code_glBeginConditionalRenderNV;
  tbl.glEndConditionalRenderNV = code_glEndConditionalRenderNV;
  tbl.glCopyImageSubDataNV = code_glCopyImageSubDataNV;
  tbl.glCoverageMaskNV = code_glCoverageMaskNV;
  tbl.glCoverageOperationNV = code_glCoverageOperationNV;
  tbl.glClearDepthdNV = code_glClearDepthdNV;
  tbl.glDepthBoundsdNV = code_glDepthBoundsdNV;
  tbl.glDepthRangedNV = code_glDepthRangedNV;
  tbl.glDrawBuffersNV = code_glDrawBuffersNV;
  tbl.glEvalMapsNV = code_glEvalMapsNV;
  tbl.glGetMapAttribParameterfvNV = code_glGetMapAttribParameterfvNV;
  tbl.glGetMapAttribParameterivNV = code_glGetMapAttribParameterivNV;
  tbl.glGetMapControlPointsNV = code_glGetMapControlPointsNV;
  tbl.glGetMapParameterfvNV = code_glGetMapParameterfvNV;
  tbl.glGetMapParameterivNV = code_glGetMapParameterivNV;
  tbl.glMapControlPointsNV = code_glMapControlPointsNV;
  tbl.glMapParameterfvNV = code_glMapParameterfvNV;
  tbl.glMapParameterivNV = code_glMapParameterivNV;
  tbl.glGetMultisamplefvNV = code_glGetMultisamplefvNV;
  tbl.glSampleMaskIndexedNV = code_glSampleMaskIndexedNV;
  tbl.glTexRenderbufferNV = code_glTexRenderbufferNV;
  tbl.glDeleteFencesNV = code_glDeleteFencesNV;
  tbl.glFinishFenceNV = code_glFinishFenceNV;
  tbl.glGenFencesNV = code_glGenFencesNV;
  tbl.glGetFenceivNV = code_glGetFenceivNV;
  tbl.glIsFenceNV = code_glIsFenceNV;
  tbl.glSetFenceNV = code_glSetFenceNV;
  tbl.glTestFenceNV = code_glTestFenceNV;
  tbl.glGetProgramNamedParameterdvNV = code_glGetProgramNamedParameterdvNV;
  tbl.glGetProgramNamedParameterfvNV = code_glGetProgramNamedParameterfvNV;
  tbl.glProgramNamedParameter4dNV = code_glProgramNamedParameter4dNV;
  tbl.glProgramNamedParameter4dvNV = code_glProgramNamedParameter4dvNV;
  tbl.glProgramNamedParameter4fNV = code_glProgramNamedParameter4fNV;
  tbl.glProgramNamedParameter4fvNV = code_glProgramNamedParameter4fvNV;
  tbl.glRenderbufferStorageMultisampleCoverageNV = code_glRenderbufferStorageMultisampleCoverageNV;
  tbl.glProgramVertexLimitNV = code_glProgramVertexLimitNV;
  tbl.glGetProgramEnvParameterIivNV = code_glGetProgramEnvParameterIivNV;
  tbl.glGetProgramEnvParameterIuivNV = code_glGetProgramEnvParameterIuivNV;
  tbl.glGetProgramLocalParameterIivNV = code_glGetProgramLocalParameterIivNV;
  tbl.glGetProgramLocalParameterIuivNV = code_glGetProgramLocalParameterIuivNV;
  tbl.glProgramEnvParameterI4iNV = code_glProgramEnvParameterI4iNV;
  tbl.glProgramEnvParameterI4ivNV = code_glProgramEnvParameterI4ivNV;
  tbl.glProgramEnvParameterI4uiNV = code_glProgramEnvParameterI4uiNV;
  tbl.glProgramEnvParameterI4uivNV = code_glProgramEnvParameterI4uivNV;
  tbl.glProgramEnvParametersI4ivNV = code_glProgramEnvParametersI4ivNV;
  tbl.glProgramEnvParametersI4uivNV = code_glProgramEnvParametersI4uivNV;
  tbl.glProgramLocalParameterI4iNV = code_glProgramLocalParameterI4iNV;
  tbl.glProgramLocalParameterI4ivNV = code_glProgramLocalParameterI4ivNV;
  tbl.glProgramLocalParameterI4uiNV = code_glProgramLocalParameterI4uiNV;
  tbl.glProgramLocalParameterI4uivNV = code_glProgramLocalParameterI4uivNV;
  tbl.glProgramLocalParametersI4ivNV = code_glProgramLocalParametersI4ivNV;
  tbl.glProgramLocalParametersI4uivNV = code_glProgramLocalParametersI4uivNV;
  tbl.glGetUniformi64vNV = code_glGetUniformi64vNV;
  tbl.glProgramUniform1i64NV = code_glProgramUniform1i64NV;
  tbl.glProgramUniform1i64vNV = code_glProgramUniform1i64vNV;
  tbl.glProgramUniform1ui64NV = code_glProgramUniform1ui64NV;
  tbl.glProgramUniform1ui64vNV = code_glProgramUniform1ui64vNV;
  tbl.glProgramUniform2i64NV = code_glProgramUniform2i64NV;
  tbl.glProgramUniform2i64vNV = code_glProgramUniform2i64vNV;
  tbl.glProgramUniform2ui64NV = code_glProgramUniform2ui64NV;
  tbl.glProgramUniform2ui64vNV = code_glProgramUniform2ui64vNV;
  tbl.glProgramUniform3i64NV = code_glProgramUniform3i64NV;
  tbl.glProgramUniform3i64vNV = code_glProgramUniform3i64vNV;
  tbl.glProgramUniform3ui64NV = code_glProgramUniform3ui64NV;
  tbl.glProgramUniform3ui64vNV = code_glProgramUniform3ui64vNV;
  tbl.glProgramUniform4i64NV = code_glProgramUniform4i64NV;
  tbl.glProgramUniform4i64vNV = code_glProgramUniform4i64vNV;
  tbl.glProgramUniform4ui64NV = code_glProgramUniform4ui64NV;
  tbl.glProgramUniform4ui64vNV = code_glProgramUniform4ui64vNV;
  tbl.glUniform1i64NV = code_glUniform1i64NV;
  tbl.glUniform1i64vNV = code_glUniform1i64vNV;
  tbl.glUniform1ui64NV = code_glUniform1ui64NV;
  tbl.glUniform1ui64vNV = code_glUniform1ui64vNV;
  tbl.glUniform2i64NV = code_glUniform2i64NV;
  tbl.glUniform2i64vNV = code_glUniform2i64vNV;
  tbl.glUniform2ui64NV = code_glUniform2ui64NV;
  tbl.glUniform2ui64vNV = code_glUniform2ui64vNV;
  tbl.glUniform3i64NV = code_glUniform3i64NV;
  tbl.glUniform3i64vNV = code_glUniform3i64vNV;
  tbl.glUniform3ui64NV = code_glUniform3ui64NV;
  tbl.glUniform3ui64vNV = code_glUniform3ui64vNV;
  tbl.glUniform4i64NV = code_glUniform4i64NV;
  tbl.glUniform4i64vNV = code_glUniform4i64vNV;
  tbl.glUniform4ui64NV = code_glUniform4ui64NV;
  tbl.glUniform4ui64vNV = code_glUniform4ui64vNV;
  tbl.glColor3hNV = code_glColor3hNV;
  tbl.glColor3hvNV = code_glColor3hvNV;
  tbl.glColor4hNV = code_glColor4hNV;
  tbl.glColor4hvNV = code_glColor4hvNV;
  tbl.glFogCoordhNV = code_glFogCoordhNV;
  tbl.glFogCoordhvNV = code_glFogCoordhvNV;
  tbl.glMultiTexCoord1hNV = code_glMultiTexCoord1hNV;
  tbl.glMultiTexCoord1hvNV = code_glMultiTexCoord1hvNV;
  tbl.glMultiTexCoord2hNV = code_glMultiTexCoord2hNV;
  tbl.glMultiTexCoord2hvNV = code_glMultiTexCoord2hvNV;
  tbl.glMultiTexCoord3hNV = code_glMultiTexCoord3hNV;
  tbl.glMultiTexCoord3hvNV = code_glMultiTexCoord3hvNV;
  tbl.glMultiTexCoord4hNV = code_glMultiTexCoord4hNV;
  tbl.glMultiTexCoord4hvNV = code_glMultiTexCoord4hvNV;
  tbl.glNormal3hNV = code_glNormal3hNV;
  tbl.glNormal3hvNV = code_glNormal3hvNV;
  tbl.glSecondaryColor3hNV = code_glSecondaryColor3hNV;
  tbl.glSecondaryColor3hvNV = code_glSecondaryColor3hvNV;
  tbl.glTexCoord1hNV = code_glTexCoord1hNV;
  tbl.glTexCoord1hvNV = code_glTexCoord1hvNV;
  tbl.glTexCoord2hNV = code_glTexCoord2hNV;
  tbl.glTexCoord2hvNV = code_glTexCoord2hvNV;
  tbl.glTexCoord3hNV = code_glTexCoord3hNV;
  tbl.glTexCoord3hvNV = code_glTexCoord3hvNV;
  tbl.glTexCoord4hNV = code_glTexCoord4hNV;
  tbl.glTexCoord4hvNV = code_glTexCoord4hvNV;
  tbl.glVertex2hNV = code_glVertex2hNV;
  tbl.glVertex2hvNV = code_glVertex2hvNV;
  tbl.glVertex3hNV = code_glVertex3hNV;
  tbl.glVertex3hvNV = code_glVertex3hvNV;
  tbl.glVertex4hNV = code_glVertex4hNV;
  tbl.glVertex4hvNV = code_glVertex4hvNV;
  tbl.glVertexAttrib1hNV = code_glVertexAttrib1hNV;
  tbl.glVertexAttrib1hvNV = code_glVertexAttrib1hvNV;
  tbl.glVertexAttrib2hNV = code_glVertexAttrib2hNV;
  tbl.glVertexAttrib2hvNV = code_glVertexAttrib2hvNV;
  tbl.glVertexAttrib3hNV = code_glVertexAttrib3hNV;
  tbl.glVertexAttrib3hvNV = code_glVertexAttrib3hvNV;
  tbl.glVertexAttrib4hNV = code_glVertexAttrib4hNV;
  tbl.glVertexAttrib4hvNV = code_glVertexAttrib4hvNV;
  tbl.glVertexAttribs1hvNV = code_glVertexAttribs1hvNV;
  tbl.glVertexAttribs2hvNV = code_glVertexAttribs2hvNV;
  tbl.glVertexAttribs3hvNV = code_glVertexAttribs3hvNV;
  tbl.glVertexAttribs4hvNV = code_glVertexAttribs4hvNV;
  tbl.glVertexWeighthNV = code_glVertexWeighthNV;
  tbl.glVertexWeighthvNV = code_glVertexWeighthvNV;
  tbl.glBeginOcclusionQueryNV = code_glBeginOcclusionQueryNV;
  tbl.glDeleteOcclusionQueriesNV = code_glDeleteOcclusionQueriesNV;
  tbl.glEndOcclusionQueryNV = code_glEndOcclusionQueryNV;
  tbl.glGenOcclusionQueriesNV = code_glGenOcclusionQueriesNV;
  tbl.glGetOcclusionQueryivNV = code_glGetOcclusionQueryivNV;
  tbl.glGetOcclusionQueryuivNV = code_glGetOcclusionQueryuivNV;
  tbl.glIsOcclusionQueryNV = code_glIsOcclusionQueryNV;
  tbl.glProgramBufferParametersIivNV = code_glProgramBufferParametersIivNV;
  tbl.glProgramBufferParametersIuivNV = code_glProgramBufferParametersIuivNV;
  tbl.glProgramBufferParametersfvNV = code_glProgramBufferParametersfvNV;
  tbl.glCopyPathNV = code_glCopyPathNV;
  tbl.glCoverFillPathInstancedNV = code_glCoverFillPathInstancedNV;
  tbl.glCoverFillPathNV = code_glCoverFillPathNV;
  tbl.glCoverStrokePathInstancedNV = code_glCoverStrokePathInstancedNV;
  tbl.glCoverStrokePathNV = code_glCoverStrokePathNV;
  tbl.glDeletePathsNV = code_glDeletePathsNV;
  tbl.glGenPathsNV = code_glGenPathsNV;
  tbl.glGetPathColorGenfvNV = code_glGetPathColorGenfvNV;
  tbl.glGetPathColorGenivNV = code_glGetPathColorGenivNV;
  tbl.glGetPathCommandsNV = code_glGetPathCommandsNV;
  tbl.glGetPathCoordsNV = code_glGetPathCoordsNV;
  tbl.glGetPathDashArrayNV = code_glGetPathDashArrayNV;
  tbl.glGetPathLengthNV = code_glGetPathLengthNV;
  tbl.glGetPathMetricRangeNV = code_glGetPathMetricRangeNV;
  tbl.glGetPathMetricsNV = code_glGetPathMetricsNV;
  tbl.glGetPathParameterfvNV = code_glGetPathParameterfvNV;
  tbl.glGetPathParameterivNV = code_glGetPathParameterivNV;
  tbl.glGetPathSpacingNV = code_glGetPathSpacingNV;
  tbl.glGetPathTexGenfvNV = code_glGetPathTexGenfvNV;
  tbl.glGetPathTexGenivNV = code_glGetPathTexGenivNV;
  tbl.glInterpolatePathsNV = code_glInterpolatePathsNV;
  tbl.glIsPathNV = code_glIsPathNV;
  tbl.glIsPointInFillPathNV = code_glIsPointInFillPathNV;
  tbl.glIsPointInStrokePathNV = code_glIsPointInStrokePathNV;
  tbl.glPathColorGenNV = code_glPathColorGenNV;
  tbl.glPathCommandsNV = code_glPathCommandsNV;
  tbl.glPathCoordsNV = code_glPathCoordsNV;
  tbl.glPathCoverDepthFuncNV = code_glPathCoverDepthFuncNV;
  tbl.glPathDashArrayNV = code_glPathDashArrayNV;
  tbl.glPathFogGenNV = code_glPathFogGenNV;
  tbl.glPathGlyphRangeNV = code_glPathGlyphRangeNV;
  tbl.glPathGlyphsNV = code_glPathGlyphsNV;
  tbl.glPathParameterfNV = code_glPathParameterfNV;
  tbl.glPathParameterfvNV = code_glPathParameterfvNV;
  tbl.glPathParameteriNV = code_glPathParameteriNV;
  tbl.glPathParameterivNV = code_glPathParameterivNV;
  tbl.glPathStencilDepthOffsetNV = code_glPathStencilDepthOffsetNV;
  tbl.glPathStencilFuncNV = code_glPathStencilFuncNV;
  tbl.glPathStringNV = code_glPathStringNV;
  tbl.glPathSubCommandsNV = code_glPathSubCommandsNV;
  tbl.glPathSubCoordsNV = code_glPathSubCoordsNV;
  tbl.glPathTexGenNV = code_glPathTexGenNV;
  tbl.glPointAlongPathNV = code_glPointAlongPathNV;
  tbl.glStencilFillPathInstancedNV = code_glStencilFillPathInstancedNV;
  tbl.glStencilFillPathNV = code_glStencilFillPathNV;
  tbl.glStencilStrokePathInstancedNV = code_glStencilStrokePathInstancedNV;
  tbl.glStencilStrokePathNV = code_glStencilStrokePathNV;
  tbl.glTransformPathNV = code_glTransformPathNV;
  tbl.glWeightPathsNV = code_glWeightPathsNV;
  tbl.glFlushPixelDataRangeNV = code_glFlushPixelDataRangeNV;
  tbl.glPixelDataRangeNV = code_glPixelDataRangeNV;
  tbl.glPointParameteriNV = code_glPointParameteriNV;
  tbl.glPointParameterivNV = code_glPointParameterivNV;
  tbl.glGetVideoi64vNV = code_glGetVideoi64vNV;
  tbl.glGetVideoivNV = code_glGetVideoivNV;
  tbl.glGetVideoui64vNV = code_glGetVideoui64vNV;
  tbl.glGetVideouivNV = code_glGetVideouivNV;
  tbl.glPresentFrameDualFillNV = code_glPresentFrameDualFillNV;
  tbl.glPresentFrameKeyedNV = code_glPresentFrameKeyedNV;
  tbl.glPrimitiveRestartIndexNV = code_glPrimitiveRestartIndexNV;
  tbl.glPrimitiveRestartNV = code_glPrimitiveRestartNV;
  tbl.glReadBufferNV = code_glReadBufferNV;
  tbl.glCombinerInputNV = code_glCombinerInputNV;
  tbl.glCombinerOutputNV = code_glCombinerOutputNV;
  tbl.glCombinerParameterfNV = code_glCombinerParameterfNV;
  tbl.glCombinerParameterfvNV = code_glCombinerParameterfvNV;
  tbl.glCombinerParameteriNV = code_glCombinerParameteriNV;
  tbl.glCombinerParameterivNV = code_glCombinerParameterivNV;
  tbl.glFinalCombinerInputNV = code_glFinalCombinerInputNV;
  tbl.glGetCombinerInputParameterfvNV = code_glGetCombinerInputParameterfvNV;
  tbl.glGetCombinerInputParameterivNV = code_glGetCombinerInputParameterivNV;
  tbl.glGetCombinerOutputParameterfvNV = code_glGetCombinerOutputParameterfvNV;
  tbl.glGetCombinerOutputParameterivNV = code_glGetCombinerOutputParameterivNV;
  tbl.glGetFinalCombinerInputParameterfvNV = code_glGetFinalCombinerInputParameterfvNV;
  tbl.glGetFinalCombinerInputParameterivNV = code_glGetFinalCombinerInputParameterivNV;
  tbl.glCombinerStageParameterfvNV = code_glCombinerStageParameterfvNV;
  tbl.glGetCombinerStageParameterfvNV = code_glGetCombinerStageParameterfvNV;
  tbl.glGetBufferParameterui64vNV = code_glGetBufferParameterui64vNV;
  tbl.glGetIntegerui64vNV = code_glGetIntegerui64vNV;
  tbl.glGetNamedBufferParameterui64vNV = code_glGetNamedBufferParameterui64vNV;
  tbl.glGetUniformui64vNV = code_glGetUniformui64vNV;
  tbl.glIsBufferResidentNV = code_glIsBufferResidentNV;
  tbl.glIsNamedBufferResidentNV = code_glIsNamedBufferResidentNV;
  tbl.glMakeBufferNonResidentNV = code_glMakeBufferNonResidentNV;
  tbl.glMakeBufferResidentNV = code_glMakeBufferResidentNV;
  tbl.glMakeNamedBufferNonResidentNV = code_glMakeNamedBufferNonResidentNV;
  tbl.glMakeNamedBufferResidentNV = code_glMakeNamedBufferResidentNV;
  tbl.glProgramUniformui64NV = code_glProgramUniformui64NV;
  tbl.glProgramUniformui64vNV = code_glProgramUniformui64vNV;
  tbl.glUniformui64NV = code_glUniformui64NV;
  tbl.glUniformui64vNV = code_glUniformui64vNV;
  tbl.glTextureBarrierNV = code_glTextureBarrierNV;
  tbl.glTexImage2DMultisampleCoverageNV = code_glTexImage2DMultisampleCoverageNV;
  tbl.glTexImage3DMultisampleCoverageNV = code_glTexImage3DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleCoverageNV = code_glTextureImage2DMultisampleCoverageNV;
  tbl.glTextureImage2DMultisampleNV = code_glTextureImage2DMultisampleNV;
  tbl.glTextureImage3DMultisampleCoverageNV = code_glTextureImage3DMultisampleCoverageNV;
  tbl.glTextureImage3DMultisampleNV = code_glTextureImage3DMultisampleNV;
  tbl.glActiveVaryingNV = code_glActiveVaryingNV;
  tbl.glBeginTransformFeedbackNV = code_glBeginTransformFeedbackNV;
  tbl.glBindBufferBaseNV = code_glBindBufferBaseNV;
  tbl.glBindBufferOffsetNV = code_glBindBufferOffsetNV;
  tbl.glBindBufferRangeNV = code_glBindBufferRangeNV;
  tbl.glEndTransformFeedbackNV = code_glEndTransformFeedbackNV;
  tbl.glGetActiveVaryingNV = code_glGetActiveVaryingNV;
  tbl.glGetTransformFeedbackVaryingNV = code_glGetTransformFeedbackVaryingNV;
  tbl.glGetVaryingLocationNV = code_glGetVaryingLocationNV;
  tbl.glTransformFeedbackAttribsNV = code_glTransformFeedbackAttribsNV;
  tbl.glTransformFeedbackVaryingsNV = code_glTransformFeedbackVaryingsNV;
  tbl.glBindTransformFeedbackNV = code_glBindTransformFeedbackNV;
  tbl.glDeleteTransformFeedbacksNV = code_glDeleteTransformFeedbacksNV;
  tbl.glDrawTransformFeedbackNV = code_glDrawTransformFeedbackNV;
  tbl.glGenTransformFeedbacksNV = code_glGenTransformFeedbacksNV;
  tbl.glIsTransformFeedbackNV = code_glIsTransformFeedbackNV;
  tbl.glPauseTransformFeedbackNV = code_glPauseTransformFeedbackNV;
  tbl.glResumeTransformFeedbackNV = code_glResumeTransformFeedbackNV;
  tbl.glVDPAUFiniNV = code_glVDPAUFiniNV;
  tbl.glVDPAUGetSurfaceivNV = code_glVDPAUGetSurfaceivNV;
  tbl.glVDPAUInitNV = code_glVDPAUInitNV;
  tbl.glVDPAUIsSurfaceNV = code_glVDPAUIsSurfaceNV;
  tbl.glVDPAUMapSurfacesNV = code_glVDPAUMapSurfacesNV;
  tbl.glVDPAURegisterOutputSurfaceNV = code_glVDPAURegisterOutputSurfaceNV;
  tbl.glVDPAURegisterVideoSurfaceNV = code_glVDPAURegisterVideoSurfaceNV;
  tbl.glVDPAUSurfaceAccessNV = code_glVDPAUSurfaceAccessNV;
  tbl.glVDPAUUnmapSurfacesNV = code_glVDPAUUnmapSurfacesNV;
  tbl.glVDPAUUnregisterSurfaceNV = code_glVDPAUUnregisterSurfaceNV;
  tbl.glFlushVertexArrayRangeNV = code_glFlushVertexArrayRangeNV;
  tbl.glVertexArrayRangeNV = code_glVertexArrayRangeNV;
  tbl.glGetVertexAttribLi64vNV = code_glGetVertexAttribLi64vNV;
  tbl.glGetVertexAttribLui64vNV = code_glGetVertexAttribLui64vNV;
  tbl.glVertexAttribL1i64NV = code_glVertexAttribL1i64NV;
  tbl.glVertexAttribL1i64vNV = code_glVertexAttribL1i64vNV;
  tbl.glVertexAttribL1ui64NV = code_glVertexAttribL1ui64NV;
  tbl.glVertexAttribL1ui64vNV = code_glVertexAttribL1ui64vNV;
  tbl.glVertexAttribL2i64NV = code_glVertexAttribL2i64NV;
  tbl.glVertexAttribL2i64vNV = code_glVertexAttribL2i64vNV;
  tbl.glVertexAttribL2ui64NV = code_glVertexAttribL2ui64NV;
  tbl.glVertexAttribL2ui64vNV = code_glVertexAttribL2ui64vNV;
  tbl.glVertexAttribL3i64NV = code_glVertexAttribL3i64NV;
  tbl.glVertexAttribL3i64vNV = code_glVertexAttribL3i64vNV;
  tbl.glVertexAttribL3ui64NV = code_glVertexAttribL3ui64NV;
  tbl.glVertexAttribL3ui64vNV = code_glVertexAttribL3ui64vNV;
  tbl.glVertexAttribL4i64NV = code_glVertexAttribL4i64NV;
  tbl.glVertexAttribL4i64vNV = code_glVertexAttribL4i64vNV;
  tbl.glVertexAttribL4ui64NV = code_glVertexAttribL4ui64NV;
  tbl.glVertexAttribL4ui64vNV = code_glVertexAttribL4ui64vNV;
  tbl.glVertexAttribLFormatNV = code_glVertexAttribLFormatNV;
  tbl.glBufferAddressRangeNV = code_glBufferAddressRangeNV;
  tbl.glColorFormatNV = code_glColorFormatNV;
  tbl.glEdgeFlagFormatNV = code_glEdgeFlagFormatNV;
  tbl.glFogCoordFormatNV = code_glFogCoordFormatNV;
  tbl.glGetIntegerui64i_vNV = code_glGetIntegerui64i_vNV;
  tbl.glIndexFormatNV = code_glIndexFormatNV;
  tbl.glNormalFormatNV = code_glNormalFormatNV;
  tbl.glSecondaryColorFormatNV = code_glSecondaryColorFormatNV;
  tbl.glTexCoordFormatNV = code_glTexCoordFormatNV;
  tbl.glVertexAttribFormatNV = code_glVertexAttribFormatNV;
  tbl.glVertexAttribIFormatNV = code_glVertexAttribIFormatNV;
  tbl.glVertexFormatNV = code_glVertexFormatNV;
  tbl.glAreProgramsResidentNV = code_glAreProgramsResidentNV;
  tbl.glBindProgramNV = code_glBindProgramNV;
  tbl.glDeleteProgramsNV = code_glDeleteProgramsNV;
  tbl.glExecuteProgramNV = code_glExecuteProgramNV;
  tbl.glGenProgramsNV = code_glGenProgramsNV;
  tbl.glGetProgramParameterdvNV = code_glGetProgramParameterdvNV;
  tbl.glGetProgramParameterfvNV = code_glGetProgramParameterfvNV;
  tbl.glGetProgramStringNV = code_glGetProgramStringNV;
  tbl.glGetProgramivNV = code_glGetProgramivNV;
  tbl.glGetTrackMatrixivNV = code_glGetTrackMatrixivNV;
  tbl.glGetVertexAttribPointervNV = code_glGetVertexAttribPointervNV;
  tbl.glGetVertexAttribdvNV = code_glGetVertexAttribdvNV;
  tbl.glGetVertexAttribfvNV = code_glGetVertexAttribfvNV;
  tbl.glGetVertexAttribivNV = code_glGetVertexAttribivNV;
  tbl.glIsProgramNV = code_glIsProgramNV;
  tbl.glLoadProgramNV = code_glLoadProgramNV;
  tbl.glProgramParameter4dNV = code_glProgramParameter4dNV;
  tbl.glProgramParameter4dvNV = code_glProgramParameter4dvNV;
  tbl.glProgramParameter4fNV = code_glProgramParameter4fNV;
  tbl.glProgramParameter4fvNV = code_glProgramParameter4fvNV;
  tbl.glProgramParameters4dvNV = code_glProgramParameters4dvNV;
  tbl.glProgramParameters4fvNV = code_glProgramParameters4fvNV;
  tbl.glRequestResidentProgramsNV = code_glRequestResidentProgramsNV;
  tbl.glTrackMatrixNV = code_glTrackMatrixNV;
  tbl.glVertexAttrib1dNV = code_glVertexAttrib1dNV;
  tbl.glVertexAttrib1dvNV = code_glVertexAttrib1dvNV;
  tbl.glVertexAttrib1fNV = code_glVertexAttrib1fNV;
  tbl.glVertexAttrib1fvNV = code_glVertexAttrib1fvNV;
  tbl.glVertexAttrib1sNV = code_glVertexAttrib1sNV;
  tbl.glVertexAttrib1svNV = code_glVertexAttrib1svNV;
  tbl.glVertexAttrib2dNV = code_glVertexAttrib2dNV;
  tbl.glVertexAttrib2dvNV = code_glVertexAttrib2dvNV;
  tbl.glVertexAttrib2fNV = code_glVertexAttrib2fNV;
  tbl.glVertexAttrib2fvNV = code_glVertexAttrib2fvNV;
  tbl.glVertexAttrib2sNV = code_glVertexAttrib2sNV;
  tbl.glVertexAttrib2svNV = code_glVertexAttrib2svNV;
  tbl.glVertexAttrib3dNV = code_glVertexAttrib3dNV;
  tbl.glVertexAttrib3dvNV = code_glVertexAttrib3dvNV;
  tbl.glVertexAttrib3fNV = code_glVertexAttrib3fNV;
  tbl.glVertexAttrib3fvNV = code_glVertexAttrib3fvNV;
  tbl.glVertexAttrib3sNV = code_glVertexAttrib3sNV;
  tbl.glVertexAttrib3svNV = code_glVertexAttrib3svNV;
  tbl.glVertexAttrib4dNV = code_glVertexAttrib4dNV;
  tbl.glVertexAttrib4dvNV = code_glVertexAttrib4dvNV;
  tbl.glVertexAttrib4fNV = code_glVertexAttrib4fNV;
  tbl.glVertexAttrib4fvNV = code_glVertexAttrib4fvNV;
  tbl.glVertexAttrib4sNV = code_glVertexAttrib4sNV;
  tbl.glVertexAttrib4svNV = code_glVertexAttrib4svNV;
  tbl.glVertexAttrib4ubNV = code_glVertexAttrib4ubNV;
  tbl.glVertexAttrib4ubvNV = code_glVertexAttrib4ubvNV;
  tbl.glVertexAttribPointerNV = code_glVertexAttribPointerNV;
  tbl.glVertexAttribs1dvNV = code_glVertexAttribs1dvNV;
  tbl.glVertexAttribs1fvNV = code_glVertexAttribs1fvNV;
  tbl.glVertexAttribs1svNV = code_glVertexAttribs1svNV;
  tbl.glVertexAttribs2dvNV = code_glVertexAttribs2dvNV;
  tbl.glVertexAttribs2fvNV = code_glVertexAttribs2fvNV;
  tbl.glVertexAttribs2svNV = code_glVertexAttribs2svNV;
  tbl.glVertexAttribs3dvNV = code_glVertexAttribs3dvNV;
  tbl.glVertexAttribs3fvNV = code_glVertexAttribs3fvNV;
  tbl.glVertexAttribs3svNV = code_glVertexAttribs3svNV;
  tbl.glVertexAttribs4dvNV = code_glVertexAttribs4dvNV;
  tbl.glVertexAttribs4fvNV = code_glVertexAttribs4fvNV;
  tbl.glVertexAttribs4svNV = code_glVertexAttribs4svNV;
  tbl.glVertexAttribs4ubvNV = code_glVertexAttribs4ubvNV;
  tbl.glBeginVideoCaptureNV = code_glBeginVideoCaptureNV;
  tbl.glBindVideoCaptureStreamBufferNV = code_glBindVideoCaptureStreamBufferNV;
  tbl.glBindVideoCaptureStreamTextureNV = code_glBindVideoCaptureStreamTextureNV;
  tbl.glEndVideoCaptureNV = code_glEndVideoCaptureNV;
  tbl.glGetVideoCaptureStreamdvNV = code_glGetVideoCaptureStreamdvNV;
  tbl.glGetVideoCaptureStreamfvNV = code_glGetVideoCaptureStreamfvNV;
  tbl.glGetVideoCaptureStreamivNV = code_glGetVideoCaptureStreamivNV;
  tbl.glGetVideoCaptureivNV = code_glGetVideoCaptureivNV;
  tbl.glVideoCaptureNV = code_glVideoCaptureNV;
  tbl.glVideoCaptureStreamParameterdvNV = code_glVideoCaptureStreamParameterdvNV;
  tbl.glVideoCaptureStreamParameterfvNV = code_glVideoCaptureStreamParameterfvNV;
  tbl.glVideoCaptureStreamParameterivNV = code_glVideoCaptureStreamParameterivNV;
  tbl.glBlendEquationSeparateOES = code_glBlendEquationSeparateOES;
  tbl.glBlendFuncSeparateOES = code_glBlendFuncSeparateOES;
  tbl.glBlendEquationOES = code_glBlendEquationOES;
  tbl.glBindFramebufferOES = code_glBindFramebufferOES;
  tbl.glBindRenderbufferOES = code_glBindRenderbufferOES;
  tbl.glCheckFramebufferStatusOES = code_glCheckFramebufferStatusOES;
  tbl.glDeleteFramebuffersOES = code_glDeleteFramebuffersOES;
  tbl.glDeleteRenderbuffersOES = code_glDeleteRenderbuffersOES;
  tbl.glFramebufferRenderbufferOES = code_glFramebufferRenderbufferOES;
  tbl.glFramebufferTexture2DOES = code_glFramebufferTexture2DOES;
  tbl.glGenFramebuffersOES = code_glGenFramebuffersOES;
  tbl.glGenRenderbuffersOES = code_glGenRenderbuffersOES;
  tbl.glGenerateMipmapOES = code_glGenerateMipmapOES;
  tbl.glGetFramebufferAttachmentParameterivOES = code_glGetFramebufferAttachmentParameterivOES;
  tbl.glGetRenderbufferParameterivOES = code_glGetRenderbufferParameterivOES;
  tbl.glIsFramebufferOES = code_glIsFramebufferOES;
  tbl.glIsRenderbufferOES = code_glIsRenderbufferOES;
  tbl.glRenderbufferStorageOES = code_glRenderbufferStorageOES;
  tbl.glGetProgramBinaryOES = code_glGetProgramBinaryOES;
  tbl.glProgramBinaryOES = code_glProgramBinaryOES;
  tbl.glGetBufferPointervOES = code_glGetBufferPointervOES;
  tbl.glMapBufferOES = code_glMapBufferOES;
  tbl.glUnmapBufferOES = code_glUnmapBufferOES;
  tbl.glCurrentPaletteMatrixOES = code_glCurrentPaletteMatrixOES;
  tbl.glMatrixIndexPointerOES = code_glMatrixIndexPointerOES;
  tbl.glWeightPointerOES = code_glWeightPointerOES;
  tbl.glClearDepthfOES = code_glClearDepthfOES;
  tbl.glClipPlanefOES = code_glClipPlanefOES;
  tbl.glDepthRangefOES = code_glDepthRangefOES;
  tbl.glFrustumfOES = code_glFrustumfOES;
  tbl.glGetClipPlanefOES = code_glGetClipPlanefOES;
  tbl.glOrthofOES = code_glOrthofOES;
  tbl.glCompressedTexImage3DOES = code_glCompressedTexImage3DOES;
  tbl.glCompressedTexSubImage3DOES = code_glCompressedTexSubImage3DOES;
  tbl.glCopyTexSubImage3DOES = code_glCopyTexSubImage3DOES;
  tbl.glFramebufferTexture3DOES = code_glFramebufferTexture3DOES;
  tbl.glTexImage3DOES = code_glTexImage3DOES;
  tbl.glTexSubImage3DOES = code_glTexSubImage3DOES;
  tbl.glGetTexGenfvOES = code_glGetTexGenfvOES;
  tbl.glGetTexGenivOES = code_glGetTexGenivOES;
  tbl.glGetTexGenxvOES = code_glGetTexGenxvOES;
  tbl.glTexGenfOES = code_glTexGenfOES;
  tbl.glTexGenfvOES = code_glTexGenfvOES;
  tbl.glTexGeniOES = code_glTexGeniOES;
  tbl.glTexGenivOES = code_glTexGenivOES;
  tbl.glTexGenxOES = code_glTexGenxOES;
  tbl.glTexGenxvOES = code_glTexGenxvOES;
  tbl.glBindVertexArrayOES = code_glBindVertexArrayOES;
  tbl.glDeleteVertexArraysOES = code_glDeleteVertexArraysOES;
  tbl.glGenVertexArraysOES = code_glGenVertexArraysOES;
  tbl.glIsVertexArrayOES = code_glIsVertexArrayOES;
  tbl.glHintPGI = code_glHintPGI;
  tbl.glAlphaFuncQCOM = code_glAlphaFuncQCOM;
  tbl.glDisableDriverControlQCOM = code_glDisableDriverControlQCOM;
  tbl.glEnableDriverControlQCOM = code_glEnableDriverControlQCOM;
  tbl.glGetDriverControlStringQCOM = code_glGetDriverControlStringQCOM;
  tbl.glGetDriverControlsQCOM = code_glGetDriverControlsQCOM;
  tbl.glExtGetBufferPointervQCOM = code_glExtGetBufferPointervQCOM;
  tbl.glExtGetBuffersQCOM = code_glExtGetBuffersQCOM;
  tbl.glExtGetFramebuffersQCOM = code_glExtGetFramebuffersQCOM;
  tbl.glExtGetRenderbuffersQCOM = code_glExtGetRenderbuffersQCOM;
  tbl.glExtGetTexLevelParameterivQCOM = code_glExtGetTexLevelParameterivQCOM;
  tbl.glExtGetTexSubImageQCOM = code_glExtGetTexSubImageQCOM;
  tbl.glExtGetTexturesQCOM = code_glExtGetTexturesQCOM;
  tbl.glExtTexObjectStateOverrideiQCOM = code_glExtTexObjectStateOverrideiQCOM;
  tbl.glExtGetProgramBinarySourceQCOM = code_glExtGetProgramBinarySourceQCOM;
  tbl.glExtGetProgramsQCOM = code_glExtGetProgramsQCOM;
  tbl.glExtGetShadersQCOM = code_glExtGetShadersQCOM;
  tbl.glExtIsProgramBinaryQCOM = code_glExtIsProgramBinaryQCOM;
  tbl.glEndTilingQCOM = code_glEndTilingQCOM;
  tbl.glStartTilingQCOM = code_glStartTilingQCOM;
  tbl.glPointSizePointerOES = code_glPointSizePointerOES;
  tbl.glLogMessageCallbackREGAL = code_glLogMessageCallbackREGAL;
  tbl.glDetailTexFuncSGIS = code_glDetailTexFuncSGIS;
  tbl.glGetDetailTexFuncSGIS = code_glGetDetailTexFuncSGIS;
  tbl.glFogFuncSGIS = code_glFogFuncSGIS;
  tbl.glGetFogFuncSGIS = code_glGetFogFuncSGIS;
  tbl.glSampleMaskSGIS = code_glSampleMaskSGIS;
  tbl.glSamplePatternSGIS = code_glSamplePatternSGIS;
  tbl.glGetPixelTexGenParameterfvSGIS = code_glGetPixelTexGenParameterfvSGIS;
  tbl.glGetPixelTexGenParameterivSGIS = code_glGetPixelTexGenParameterivSGIS;
  tbl.glPixelTexGenParameterfSGIS = code_glPixelTexGenParameterfSGIS;
  tbl.glPixelTexGenParameterfvSGIS = code_glPixelTexGenParameterfvSGIS;
  tbl.glPixelTexGenParameteriSGIS = code_glPixelTexGenParameteriSGIS;
  tbl.glPixelTexGenParameterivSGIS = code_glPixelTexGenParameterivSGIS;
  tbl.glPointParameterfSGIS = code_glPointParameterfSGIS;
  tbl.glPointParameterfvSGIS = code_glPointParameterfvSGIS;
  tbl.glGetSharpenTexFuncSGIS = code_glGetSharpenTexFuncSGIS;
  tbl.glSharpenTexFuncSGIS = code_glSharpenTexFuncSGIS;
  tbl.glTexImage4DSGIS = code_glTexImage4DSGIS;
  tbl.glTexSubImage4DSGIS = code_glTexSubImage4DSGIS;
  tbl.glTextureColorMaskSGIS = code_glTextureColorMaskSGIS;
  tbl.glGetTexFilterFuncSGIS = code_glGetTexFilterFuncSGIS;
  tbl.glTexFilterFuncSGIS = code_glTexFilterFuncSGIS;
  tbl.glAsyncMarkerSGIX = code_glAsyncMarkerSGIX;
  tbl.glDeleteAsyncMarkersSGIX = code_glDeleteAsyncMarkersSGIX;
  tbl.glFinishAsyncSGIX = code_glFinishAsyncSGIX;
  tbl.glGenAsyncMarkersSGIX = code_glGenAsyncMarkersSGIX;
  tbl.glIsAsyncMarkerSGIX = code_glIsAsyncMarkerSGIX;
  tbl.glPollAsyncSGIX = code_glPollAsyncSGIX;
  tbl.glFlushRasterSGIX = code_glFlushRasterSGIX;
  tbl.glTextureFogSGIX = code_glTextureFogSGIX;
  tbl.glFragmentColorMaterialSGIX = code_glFragmentColorMaterialSGIX;
  tbl.glFragmentLightModelfSGIX = code_glFragmentLightModelfSGIX;
  tbl.glFragmentLightModelfvSGIX = code_glFragmentLightModelfvSGIX;
  tbl.glFragmentLightModeliSGIX = code_glFragmentLightModeliSGIX;
  tbl.glFragmentLightModelivSGIX = code_glFragmentLightModelivSGIX;
  tbl.glFragmentLightfSGIX = code_glFragmentLightfSGIX;
  tbl.glFragmentLightfvSGIX = code_glFragmentLightfvSGIX;
  tbl.glFragmentLightiSGIX = code_glFragmentLightiSGIX;
  tbl.glFragmentLightivSGIX = code_glFragmentLightivSGIX;
  tbl.glFragmentMaterialfSGIX = code_glFragmentMaterialfSGIX;
  tbl.glFragmentMaterialfvSGIX = code_glFragmentMaterialfvSGIX;
  tbl.glFragmentMaterialiSGIX = code_glFragmentMaterialiSGIX;
  tbl.glFragmentMaterialivSGIX = code_glFragmentMaterialivSGIX;
  tbl.glGetFragmentLightfvSGIX = code_glGetFragmentLightfvSGIX;
  tbl.glGetFragmentLightivSGIX = code_glGetFragmentLightivSGIX;
  tbl.glGetFragmentMaterialfvSGIX = code_glGetFragmentMaterialfvSGIX;
  tbl.glGetFragmentMaterialivSGIX = code_glGetFragmentMaterialivSGIX;
  tbl.glLightEnviSGIX = code_glLightEnviSGIX;
  tbl.glFrameZoomSGIX = code_glFrameZoomSGIX;
  tbl.glIglooInterfaceSGIX = code_glIglooInterfaceSGIX;
  tbl.glGetInstrumentsSGIX = code_glGetInstrumentsSGIX;
  tbl.glInstrumentsBufferSGIX = code_glInstrumentsBufferSGIX;
  tbl.glPollInstrumentsSGIX = code_glPollInstrumentsSGIX;
  tbl.glReadInstrumentsSGIX = code_glReadInstrumentsSGIX;
  tbl.glStartInstrumentsSGIX = code_glStartInstrumentsSGIX;
  tbl.glStopInstrumentsSGIX = code_glStopInstrumentsSGIX;
  tbl.glGetListParameterfvSGIX = code_glGetListParameterfvSGIX;
  tbl.glGetListParameterivSGIX = code_glGetListParameterivSGIX;
  tbl.glListParameterfSGIX = code_glListParameterfSGIX;
  tbl.glListParameterfvSGIX = code_glListParameterfvSGIX;
  tbl.glListParameteriSGIX = code_glListParameteriSGIX;
  tbl.glListParameterivSGIX = code_glListParameterivSGIX;
  tbl.glPixelTexGenSGIX = code_glPixelTexGenSGIX;
  tbl.glDeformSGIX = code_glDeformSGIX;
  tbl.glDeformationMap3dSGIX = code_glDeformationMap3dSGIX;
  tbl.glDeformationMap3fSGIX = code_glDeformationMap3fSGIX;
  tbl.glLoadIdentityDeformationMapSGIX = code_glLoadIdentityDeformationMapSGIX;
  tbl.glReferencePlaneSGIX = code_glReferencePlaneSGIX;
  tbl.glSpriteParameterfSGIX = code_glSpriteParameterfSGIX;
  tbl.glSpriteParameterfvSGIX = code_glSpriteParameterfvSGIX;
  tbl.glSpriteParameteriSGIX = code_glSpriteParameteriSGIX;
  tbl.glSpriteParameterivSGIX = code_glSpriteParameterivSGIX;
  tbl.glTagSampleBufferSGIX = code_glTagSampleBufferSGIX;
  tbl.glColorTableParameterfvSGI = code_glColorTableParameterfvSGI;
  tbl.glColorTableParameterivSGI = code_glColorTableParameterivSGI;
  tbl.glColorTableSGI = code_glColorTableSGI;
  tbl.glCopyColorTableSGI = code_glCopyColorTableSGI;
  tbl.glGetColorTableParameterfvSGI = code_glGetColorTableParameterfvSGI;
  tbl.glGetColorTableParameterivSGI = code_glGetColorTableParameterivSGI;
  tbl.glGetColorTableSGI = code_glGetColorTableSGI;
  tbl.glFinishTextureSUNX = code_glFinishTextureSUNX;
  tbl.glGlobalAlphaFactorbSUN = code_glGlobalAlphaFactorbSUN;
  tbl.glGlobalAlphaFactordSUN = code_glGlobalAlphaFactordSUN;
  tbl.glGlobalAlphaFactorfSUN = code_glGlobalAlphaFactorfSUN;
  tbl.glGlobalAlphaFactoriSUN = code_glGlobalAlphaFactoriSUN;
  tbl.glGlobalAlphaFactorsSUN = code_glGlobalAlphaFactorsSUN;
  tbl.glGlobalAlphaFactorubSUN = code_glGlobalAlphaFactorubSUN;
  tbl.glGlobalAlphaFactoruiSUN = code_glGlobalAlphaFactoruiSUN;
  tbl.glGlobalAlphaFactorusSUN = code_glGlobalAlphaFactorusSUN;
  tbl.glDrawMeshArraysSUN = code_glDrawMeshArraysSUN;
  tbl.glReadVideoPixelsSUN = code_glReadVideoPixelsSUN;
  tbl.glReplacementCodePointerSUN = code_glReplacementCodePointerSUN;
  tbl.glReplacementCodeubSUN = code_glReplacementCodeubSUN;
  tbl.glReplacementCodeubvSUN = code_glReplacementCodeubvSUN;
  tbl.glReplacementCodeuiSUN = code_glReplacementCodeuiSUN;
  tbl.glReplacementCodeuivSUN = code_glReplacementCodeuivSUN;
  tbl.glReplacementCodeusSUN = code_glReplacementCodeusSUN;
  tbl.glReplacementCodeusvSUN = code_glReplacementCodeusvSUN;
  tbl.glColor3fVertex3fSUN = code_glColor3fVertex3fSUN;
  tbl.glColor3fVertex3fvSUN = code_glColor3fVertex3fvSUN;
  tbl.glColor4fNormal3fVertex3fSUN = code_glColor4fNormal3fVertex3fSUN;
  tbl.glColor4fNormal3fVertex3fvSUN = code_glColor4fNormal3fVertex3fvSUN;
  tbl.glColor4ubVertex2fSUN = code_glColor4ubVertex2fSUN;
  tbl.glColor4ubVertex2fvSUN = code_glColor4ubVertex2fvSUN;
  tbl.glColor4ubVertex3fSUN = code_glColor4ubVertex3fSUN;
  tbl.glColor4ubVertex3fvSUN = code_glColor4ubVertex3fvSUN;
  tbl.glNormal3fVertex3fSUN = code_glNormal3fVertex3fSUN;
  tbl.glNormal3fVertex3fvSUN = code_glNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor3fVertex3fSUN = code_glReplacementCodeuiColor3fVertex3fSUN;
  tbl.glReplacementCodeuiColor3fVertex3fvSUN = code_glReplacementCodeuiColor3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fSUN = code_glReplacementCodeuiColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiColor4fNormal3fVertex3fvSUN = code_glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fSUN = code_glReplacementCodeuiColor4ubVertex3fSUN;
  tbl.glReplacementCodeuiColor4ubVertex3fvSUN = code_glReplacementCodeuiColor4ubVertex3fvSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fSUN = code_glReplacementCodeuiNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiNormal3fVertex3fvSUN = code_glReplacementCodeuiNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = code_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = code_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = code_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = code_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fSUN = code_glReplacementCodeuiTexCoord2fVertex3fSUN;
  tbl.glReplacementCodeuiTexCoord2fVertex3fvSUN = code_glReplacementCodeuiTexCoord2fVertex3fvSUN;
  tbl.glReplacementCodeuiVertex3fSUN = code_glReplacementCodeuiVertex3fSUN;
  tbl.glReplacementCodeuiVertex3fvSUN = code_glReplacementCodeuiVertex3fvSUN;
  tbl.glTexCoord2fColor3fVertex3fSUN = code_glTexCoord2fColor3fVertex3fSUN;
  tbl.glTexCoord2fColor3fVertex3fvSUN = code_glTexCoord2fColor3fVertex3fvSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fSUN = code_glTexCoord2fColor4fNormal3fVertex3fSUN;
  tbl.glTexCoord2fColor4fNormal3fVertex3fvSUN = code_glTexCoord2fColor4fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fColor4ubVertex3fSUN = code_glTexCoord2fColor4ubVertex3fSUN;
  tbl.glTexCoord2fColor4ubVertex3fvSUN = code_glTexCoord2fColor4ubVertex3fvSUN;
  tbl.glTexCoord2fNormal3fVertex3fSUN = code_glTexCoord2fNormal3fVertex3fSUN;
  tbl.glTexCoord2fNormal3fVertex3fvSUN = code_glTexCoord2fNormal3fVertex3fvSUN;
  tbl.glTexCoord2fVertex3fSUN = code_glTexCoord2fVertex3fSUN;
  tbl.glTexCoord2fVertex3fvSUN = code_glTexCoord2fVertex3fvSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fSUN = code_glTexCoord4fColor4fNormal3fVertex4fSUN;
  tbl.glTexCoord4fColor4fNormal3fVertex4fvSUN = code_glTexCoord4fColor4fNormal3fVertex4fvSUN;
  tbl.glTexCoord4fVertex4fSUN = code_glTexCoord4fVertex4fSUN;
  tbl.glTexCoord4fVertex4fvSUN = code_glTexCoord4fVertex4fvSUN;
  tbl.glAddSwapHintRectWIN = code_glAddSwapHintRectWIN;

}

REGAL_NAMESPACE_END

#endif
