/* NOTE: Do not edit this file, it is generated by a script:
   Export.py --api gl 4.4 --api wgl 4.4 --api glx 4.4 --api cgl 1.4 --api egl 1.0 --outdir .
*/

/*
  Copyright (c) 2011-2013 NVIDIA Corporation
  Copyright (c) 2011-2013 Cass Everitt
  Copyright (c) 2012-2013 Scott Nations
  Copyright (c) 2012 Mathias Schott
  Copyright (c) 2012-2013 Nigel Stewart
  Copyright (c) 2012-2013 Google Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

    Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

    Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
  Intended formatting conventions:
  $ astyle --style=allman --indent=spaces=2 --indent-switches
*/

#include "pch.h" /* For MS precompiled header support */

#include "gmock/gmock.h"

#include "RegalUtil.h"

REGAL_GLOBAL_BEGIN

#include "RegalDispatch.h"
#include "RegalDispatchGMock.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

namespace {

void REGAL_CALL gmock_glAccum(GLenum op, GLfloat value) {
  return RegalGMockInterface::current->glAccum(op, value);
}

void REGAL_CALL gmock_glAlphaFunc(GLenum func, GLclampf ref) {
  return RegalGMockInterface::current->glAlphaFunc(func, ref);
}

void REGAL_CALL gmock_glBegin(GLenum mode) {
  return RegalGMockInterface::current->glBegin(mode);
}

void REGAL_CALL gmock_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap) {
  return RegalGMockInterface::current->glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}

void REGAL_CALL gmock_glBlendFunc(GLenum sfactor, GLenum dfactor) {
  return RegalGMockInterface::current->glBlendFunc(sfactor, dfactor);
}

void REGAL_CALL gmock_glCallList(GLuint list) {
  return RegalGMockInterface::current->glCallList(list);
}

void REGAL_CALL gmock_glCallLists(GLsizei n, GLenum type, const GLvoid *lists) {
  return RegalGMockInterface::current->glCallLists(n, type, lists);
}

void REGAL_CALL gmock_glClear(GLbitfield mask) {
  return RegalGMockInterface::current->glClear(mask);
}

void REGAL_CALL gmock_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  return RegalGMockInterface::current->glClearAccum(red, green, blue, alpha);
}

void REGAL_CALL gmock_glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) {
  return RegalGMockInterface::current->glClearColor(red, green, blue, alpha);
}

void REGAL_CALL gmock_glClearDepth(GLclampd depth) {
  return RegalGMockInterface::current->glClearDepth(depth);
}

void REGAL_CALL gmock_glClearIndex(GLfloat c) {
  return RegalGMockInterface::current->glClearIndex(c);
}

void REGAL_CALL gmock_glClearStencil(GLint s) {
  return RegalGMockInterface::current->glClearStencil(s);
}

void REGAL_CALL gmock_glClipPlane(GLenum plane, const GLdouble *equation) {
  return RegalGMockInterface::current->glClipPlane(plane, equation);
}

void REGAL_CALL gmock_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
  return RegalGMockInterface::current->glColor3b(red, green, blue);
}

void REGAL_CALL gmock_glColor3bv(const GLbyte *v) {
  return RegalGMockInterface::current->glColor3bv(v);
}

void REGAL_CALL gmock_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
  return RegalGMockInterface::current->glColor3d(red, green, blue);
}

void REGAL_CALL gmock_glColor3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glColor3dv(v);
}

void REGAL_CALL gmock_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
  return RegalGMockInterface::current->glColor3f(red, green, blue);
}

void REGAL_CALL gmock_glColor3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glColor3fv(v);
}

void REGAL_CALL gmock_glColor3i(GLint red, GLint green, GLint blue) {
  return RegalGMockInterface::current->glColor3i(red, green, blue);
}

void REGAL_CALL gmock_glColor3iv(const GLint *v) {
  return RegalGMockInterface::current->glColor3iv(v);
}

void REGAL_CALL gmock_glColor3s(GLshort red, GLshort green, GLshort blue) {
  return RegalGMockInterface::current->glColor3s(red, green, blue);
}

void REGAL_CALL gmock_glColor3sv(const GLshort *v) {
  return RegalGMockInterface::current->glColor3sv(v);
}

void REGAL_CALL gmock_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
  return RegalGMockInterface::current->glColor3ub(red, green, blue);
}

void REGAL_CALL gmock_glColor3ubv(const GLubyte *v) {
  return RegalGMockInterface::current->glColor3ubv(v);
}

void REGAL_CALL gmock_glColor3ui(GLuint red, GLuint green, GLuint blue) {
  return RegalGMockInterface::current->glColor3ui(red, green, blue);
}

void REGAL_CALL gmock_glColor3uiv(const GLuint *v) {
  return RegalGMockInterface::current->glColor3uiv(v);
}

void REGAL_CALL gmock_glColor3us(GLushort red, GLushort green, GLushort blue) {
  return RegalGMockInterface::current->glColor3us(red, green, blue);
}

void REGAL_CALL gmock_glColor3usv(const GLushort *v) {
  return RegalGMockInterface::current->glColor3usv(v);
}

void REGAL_CALL gmock_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  return RegalGMockInterface::current->glColor4b(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4bv(const GLbyte *v) {
  return RegalGMockInterface::current->glColor4bv(v);
}

void REGAL_CALL gmock_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  return RegalGMockInterface::current->glColor4d(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glColor4dv(v);
}

void REGAL_CALL gmock_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  return RegalGMockInterface::current->glColor4f(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glColor4fv(v);
}

void REGAL_CALL gmock_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
  return RegalGMockInterface::current->glColor4i(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4iv(const GLint *v) {
  return RegalGMockInterface::current->glColor4iv(v);
}

void REGAL_CALL gmock_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  return RegalGMockInterface::current->glColor4s(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4sv(const GLshort *v) {
  return RegalGMockInterface::current->glColor4sv(v);
}

void REGAL_CALL gmock_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  return RegalGMockInterface::current->glColor4ub(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4ubv(const GLubyte *v) {
  return RegalGMockInterface::current->glColor4ubv(v);
}

void REGAL_CALL gmock_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  return RegalGMockInterface::current->glColor4ui(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4uiv(const GLuint *v) {
  return RegalGMockInterface::current->glColor4uiv(v);
}

void REGAL_CALL gmock_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  return RegalGMockInterface::current->glColor4us(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColor4usv(const GLushort *v) {
  return RegalGMockInterface::current->glColor4usv(v);
}

void REGAL_CALL gmock_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  return RegalGMockInterface::current->glColorMask(red, green, blue, alpha);
}

void REGAL_CALL gmock_glColorMaterial(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glColorMaterial(face, mode);
}

void REGAL_CALL gmock_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  return RegalGMockInterface::current->glCopyPixels(x, y, width, height, type);
}

void REGAL_CALL gmock_glCullFace(GLenum mode) {
  return RegalGMockInterface::current->glCullFace(mode);
}

void REGAL_CALL gmock_glDeleteLists(GLuint list, GLsizei range) {
  return RegalGMockInterface::current->glDeleteLists(list, range);
}

void REGAL_CALL gmock_glDepthFunc(GLenum func) {
  return RegalGMockInterface::current->glDepthFunc(func);
}

void REGAL_CALL gmock_glDepthMask(GLboolean flag) {
  return RegalGMockInterface::current->glDepthMask(flag);
}

void REGAL_CALL gmock_glDepthRange(GLclampd zNear, GLclampd zFar) {
  return RegalGMockInterface::current->glDepthRange(zNear, zFar);
}

void REGAL_CALL gmock_glDisable(GLenum cap) {
  return RegalGMockInterface::current->glDisable(cap);
}

void REGAL_CALL gmock_glDrawBuffer(GLenum mode) {
  return RegalGMockInterface::current->glDrawBuffer(mode);
}

void REGAL_CALL gmock_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glDrawPixels(width, height, format, type, pixels);
}

void REGAL_CALL gmock_glEdgeFlag(GLboolean flag) {
  return RegalGMockInterface::current->glEdgeFlag(flag);
}

void REGAL_CALL gmock_glEdgeFlagv(const GLboolean *flag) {
  return RegalGMockInterface::current->glEdgeFlagv(flag);
}

void REGAL_CALL gmock_glEnable(GLenum cap) {
  return RegalGMockInterface::current->glEnable(cap);
}

void REGAL_CALL gmock_glEnd(void) {
  return RegalGMockInterface::current->glEnd();
}

void REGAL_CALL gmock_glEndList(void) {
  return RegalGMockInterface::current->glEndList();
}

void REGAL_CALL gmock_glEvalCoord1d(GLdouble u) {
  return RegalGMockInterface::current->glEvalCoord1d(u);
}

void REGAL_CALL gmock_glEvalCoord1dv(const GLdouble *u) {
  return RegalGMockInterface::current->glEvalCoord1dv(u);
}

void REGAL_CALL gmock_glEvalCoord1f(GLfloat u) {
  return RegalGMockInterface::current->glEvalCoord1f(u);
}

void REGAL_CALL gmock_glEvalCoord1fv(const GLfloat *u) {
  return RegalGMockInterface::current->glEvalCoord1fv(u);
}

void REGAL_CALL gmock_glEvalCoord2d(GLdouble u, GLdouble v) {
  return RegalGMockInterface::current->glEvalCoord2d(u, v);
}

void REGAL_CALL gmock_glEvalCoord2dv(const GLdouble *u) {
  return RegalGMockInterface::current->glEvalCoord2dv(u);
}

void REGAL_CALL gmock_glEvalCoord2f(GLfloat u, GLfloat v) {
  return RegalGMockInterface::current->glEvalCoord2f(u, v);
}

void REGAL_CALL gmock_glEvalCoord2fv(const GLfloat *u) {
  return RegalGMockInterface::current->glEvalCoord2fv(u);
}

void REGAL_CALL gmock_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
  return RegalGMockInterface::current->glEvalMesh1(mode, i1, i2);
}

void REGAL_CALL gmock_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  return RegalGMockInterface::current->glEvalMesh2(mode, i1, i2, j1, j2);
}

void REGAL_CALL gmock_glEvalPoint1(GLint i) {
  return RegalGMockInterface::current->glEvalPoint1(i);
}

void REGAL_CALL gmock_glEvalPoint2(GLint i, GLint j) {
  return RegalGMockInterface::current->glEvalPoint2(i, j);
}

void REGAL_CALL gmock_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer) {
  return RegalGMockInterface::current->glFeedbackBuffer(size, type, buffer);
}

void REGAL_CALL gmock_glFinish(void) {
  return RegalGMockInterface::current->glFinish();
}

void REGAL_CALL gmock_glFlush(void) {
  return RegalGMockInterface::current->glFlush();
}

void REGAL_CALL gmock_glFogf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glFogf(pname, param);
}

void REGAL_CALL gmock_glFogfv(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glFogfv(pname, params);
}

void REGAL_CALL gmock_glFogi(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glFogi(pname, param);
}

void REGAL_CALL gmock_glFogiv(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glFogiv(pname, params);
}

void REGAL_CALL gmock_glFrontFace(GLenum mode) {
  return RegalGMockInterface::current->glFrontFace(mode);
}

void REGAL_CALL gmock_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glFrustum(left, right, bottom, top, zNear, zFar);
}

GLuint REGAL_CALL gmock_glGenLists(GLsizei range) {
  return RegalGMockInterface::current->glGenLists(range);
}

void REGAL_CALL gmock_glGetBooleanv(GLenum pname, GLboolean *params) {
  return RegalGMockInterface::current->glGetBooleanv(pname, params);
}

void REGAL_CALL gmock_glGetClipPlane(GLenum plane, GLdouble *equation) {
  return RegalGMockInterface::current->glGetClipPlane(plane, equation);
}

void REGAL_CALL gmock_glGetDoublev(GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetDoublev(pname, params);
}

GLenum REGAL_CALL gmock_glGetError(void) {
  return RegalGMockInterface::current->glGetError();
}

void REGAL_CALL gmock_glGetFloatv(GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetFloatv(pname, params);
}

void REGAL_CALL gmock_glGetIntegerv(GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetIntegerv(pname, params);
}

void REGAL_CALL gmock_glGetLightfv(GLenum light, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetLightfv(light, pname, params);
}

void REGAL_CALL gmock_glGetLightiv(GLenum light, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetLightiv(light, pname, params);
}

void REGAL_CALL gmock_glGetMapdv(GLenum target, GLenum query, GLdouble *v) {
  return RegalGMockInterface::current->glGetMapdv(target, query, v);
}

void REGAL_CALL gmock_glGetMapfv(GLenum target, GLenum query, GLfloat *v) {
  return RegalGMockInterface::current->glGetMapfv(target, query, v);
}

void REGAL_CALL gmock_glGetMapiv(GLenum target, GLenum query, GLint *v) {
  return RegalGMockInterface::current->glGetMapiv(target, query, v);
}

void REGAL_CALL gmock_glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetMaterialfv(face, pname, params);
}

void REGAL_CALL gmock_glGetMaterialiv(GLenum face, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetMaterialiv(face, pname, params);
}

void REGAL_CALL gmock_glGetPixelMapfv(GLenum map, GLfloat *values) {
  return RegalGMockInterface::current->glGetPixelMapfv(map, values);
}

void REGAL_CALL gmock_glGetPixelMapuiv(GLenum map, GLuint *values) {
  return RegalGMockInterface::current->glGetPixelMapuiv(map, values);
}

void REGAL_CALL gmock_glGetPixelMapusv(GLenum map, GLushort *values) {
  return RegalGMockInterface::current->glGetPixelMapusv(map, values);
}

void REGAL_CALL gmock_glGetPolygonStipple(GLubyte *mask) {
  return RegalGMockInterface::current->glGetPolygonStipple(mask);
}

const GLubyte * REGAL_CALL gmock_glGetString(GLenum name) {
  return RegalGMockInterface::current->glGetString(name);
}

void REGAL_CALL gmock_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexEnvfv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexEnviv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexEnviv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetTexGendv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexGenfv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexGeniv(GLenum coord, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexGeniv(coord, pname, params);
}

void REGAL_CALL gmock_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glGetTexImage(target, level, format, type, pixels);
}

void REGAL_CALL gmock_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexLevelParameterfv(target, level, pname, params);
}

void REGAL_CALL gmock_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexLevelParameteriv(target, level, pname, params);
}

void REGAL_CALL gmock_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetTexParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetTexParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glHint(GLenum target, GLenum mode) {
  return RegalGMockInterface::current->glHint(target, mode);
}

void REGAL_CALL gmock_glIndexMask(GLuint mask) {
  return RegalGMockInterface::current->glIndexMask(mask);
}

void REGAL_CALL gmock_glIndexd(GLdouble c) {
  return RegalGMockInterface::current->glIndexd(c);
}

void REGAL_CALL gmock_glIndexdv(const GLdouble *c) {
  return RegalGMockInterface::current->glIndexdv(c);
}

void REGAL_CALL gmock_glIndexf(GLfloat c) {
  return RegalGMockInterface::current->glIndexf(c);
}

void REGAL_CALL gmock_glIndexfv(const GLfloat *c) {
  return RegalGMockInterface::current->glIndexfv(c);
}

void REGAL_CALL gmock_glIndexi(GLint c) {
  return RegalGMockInterface::current->glIndexi(c);
}

void REGAL_CALL gmock_glIndexiv(const GLint *c) {
  return RegalGMockInterface::current->glIndexiv(c);
}

void REGAL_CALL gmock_glIndexs(GLshort c) {
  return RegalGMockInterface::current->glIndexs(c);
}

void REGAL_CALL gmock_glIndexsv(const GLshort *c) {
  return RegalGMockInterface::current->glIndexsv(c);
}

void REGAL_CALL gmock_glInitNames(void) {
  return RegalGMockInterface::current->glInitNames();
}

GLboolean REGAL_CALL gmock_glIsEnabled(GLenum cap) {
  return RegalGMockInterface::current->glIsEnabled(cap);
}

GLboolean REGAL_CALL gmock_glIsList(GLuint list) {
  return RegalGMockInterface::current->glIsList(list);
}

void REGAL_CALL gmock_glLightModelf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glLightModelf(pname, param);
}

void REGAL_CALL gmock_glLightModelfv(GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glLightModelfv(pname, params);
}

void REGAL_CALL gmock_glLightModeli(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLightModeli(pname, param);
}

void REGAL_CALL gmock_glLightModeliv(GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glLightModeliv(pname, params);
}

void REGAL_CALL gmock_glLightf(GLenum light, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glLightf(light, pname, param);
}

void REGAL_CALL gmock_glLightfv(GLenum light, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glLightfv(light, pname, params);
}

void REGAL_CALL gmock_glLighti(GLenum light, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glLighti(light, pname, param);
}

void REGAL_CALL gmock_glLightiv(GLenum light, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glLightiv(light, pname, params);
}

void REGAL_CALL gmock_glLineStipple(GLint factor, GLushort pattern) {
  return RegalGMockInterface::current->glLineStipple(factor, pattern);
}

void REGAL_CALL gmock_glLineWidth(GLfloat width) {
  return RegalGMockInterface::current->glLineWidth(width);
}

void REGAL_CALL gmock_glListBase(GLuint base) {
  return RegalGMockInterface::current->glListBase(base);
}

void REGAL_CALL gmock_glLoadIdentity(void) {
  return RegalGMockInterface::current->glLoadIdentity();
}

void REGAL_CALL gmock_glLoadMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glLoadMatrixd(m);
}

void REGAL_CALL gmock_glLoadMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glLoadMatrixf(m);
}

void REGAL_CALL gmock_glLoadName(GLuint name) {
  return RegalGMockInterface::current->glLoadName(name);
}

void REGAL_CALL gmock_glLogicOp(GLenum opcode) {
  return RegalGMockInterface::current->glLogicOp(opcode);
}

void REGAL_CALL gmock_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points) {
  return RegalGMockInterface::current->glMap1d(target, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points) {
  return RegalGMockInterface::current->glMap1f(target, u1, u2, stride, order, points);
}

void REGAL_CALL gmock_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points) {
  return RegalGMockInterface::current->glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void REGAL_CALL gmock_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points) {
  return RegalGMockInterface::current->glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void REGAL_CALL gmock_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
  return RegalGMockInterface::current->glMapGrid1d(un, u1, u2);
}

void REGAL_CALL gmock_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
  return RegalGMockInterface::current->glMapGrid1f(un, u1, u2);
}

void REGAL_CALL gmock_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  return RegalGMockInterface::current->glMapGrid2d(un, u1, u2, vn, v1, v2);
}

void REGAL_CALL gmock_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glMapGrid2f(un, u1, u2, vn, v1, v2);
}

void REGAL_CALL gmock_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glMaterialf(face, pname, param);
}

void REGAL_CALL gmock_glMaterialfv(GLenum face, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glMaterialfv(face, pname, params);
}

void REGAL_CALL gmock_glMateriali(GLenum face, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glMateriali(face, pname, param);
}

void REGAL_CALL gmock_glMaterialiv(GLenum face, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glMaterialiv(face, pname, params);
}

void REGAL_CALL gmock_glMatrixMode(GLenum mode) {
  return RegalGMockInterface::current->glMatrixMode(mode);
}

void REGAL_CALL gmock_glMultMatrixd(const GLdouble *m) {
  return RegalGMockInterface::current->glMultMatrixd(m);
}

void REGAL_CALL gmock_glMultMatrixf(const GLfloat *m) {
  return RegalGMockInterface::current->glMultMatrixf(m);
}

void REGAL_CALL gmock_glNewList(GLuint list, GLenum mode) {
  return RegalGMockInterface::current->glNewList(list, mode);
}

void REGAL_CALL gmock_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
  return RegalGMockInterface::current->glNormal3b(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3bv(const GLbyte *v) {
  return RegalGMockInterface::current->glNormal3bv(v);
}

void REGAL_CALL gmock_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
  return RegalGMockInterface::current->glNormal3d(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glNormal3dv(v);
}

void REGAL_CALL gmock_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
  return RegalGMockInterface::current->glNormal3f(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glNormal3fv(v);
}

void REGAL_CALL gmock_glNormal3i(GLint nx, GLint ny, GLint nz) {
  return RegalGMockInterface::current->glNormal3i(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3iv(const GLint *v) {
  return RegalGMockInterface::current->glNormal3iv(v);
}

void REGAL_CALL gmock_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
  return RegalGMockInterface::current->glNormal3s(nx, ny, nz);
}

void REGAL_CALL gmock_glNormal3sv(const GLshort *v) {
  return RegalGMockInterface::current->glNormal3sv(v);
}

void REGAL_CALL gmock_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  return RegalGMockInterface::current->glOrtho(left, right, bottom, top, zNear, zFar);
}

void REGAL_CALL gmock_glPassThrough(GLfloat token) {
  return RegalGMockInterface::current->glPassThrough(token);
}

void REGAL_CALL gmock_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values) {
  return RegalGMockInterface::current->glPixelMapfv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values) {
  return RegalGMockInterface::current->glPixelMapuiv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values) {
  return RegalGMockInterface::current->glPixelMapusv(map, mapsize, values);
}

void REGAL_CALL gmock_glPixelStoref(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPixelStoref(pname, param);
}

void REGAL_CALL gmock_glPixelStorei(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPixelStorei(pname, param);
}

void REGAL_CALL gmock_glPixelTransferf(GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glPixelTransferf(pname, param);
}

void REGAL_CALL gmock_glPixelTransferi(GLenum pname, GLint param) {
  return RegalGMockInterface::current->glPixelTransferi(pname, param);
}

void REGAL_CALL gmock_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
  return RegalGMockInterface::current->glPixelZoom(xfactor, yfactor);
}

void REGAL_CALL gmock_glPointSize(GLfloat size) {
  return RegalGMockInterface::current->glPointSize(size);
}

void REGAL_CALL gmock_glPolygonMode(GLenum face, GLenum mode) {
  return RegalGMockInterface::current->glPolygonMode(face, mode);
}

void REGAL_CALL gmock_glPolygonStipple(const GLubyte *mask) {
  return RegalGMockInterface::current->glPolygonStipple(mask);
}

void REGAL_CALL gmock_glPopAttrib(void) {
  return RegalGMockInterface::current->glPopAttrib();
}

void REGAL_CALL gmock_glPopMatrix(void) {
  return RegalGMockInterface::current->glPopMatrix();
}

void REGAL_CALL gmock_glPopName(void) {
  return RegalGMockInterface::current->glPopName();
}

void REGAL_CALL gmock_glPushAttrib(GLbitfield mask) {
  return RegalGMockInterface::current->glPushAttrib(mask);
}

void REGAL_CALL gmock_glPushMatrix(void) {
  return RegalGMockInterface::current->glPushMatrix();
}

void REGAL_CALL gmock_glPushName(GLuint name) {
  return RegalGMockInterface::current->glPushName(name);
}

void REGAL_CALL gmock_glRasterPos2d(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glRasterPos2d(x, y);
}

void REGAL_CALL gmock_glRasterPos2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos2dv(v);
}

void REGAL_CALL gmock_glRasterPos2f(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glRasterPos2f(x, y);
}

void REGAL_CALL gmock_glRasterPos2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos2fv(v);
}

void REGAL_CALL gmock_glRasterPos2i(GLint x, GLint y) {
  return RegalGMockInterface::current->glRasterPos2i(x, y);
}

void REGAL_CALL gmock_glRasterPos2iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos2iv(v);
}

void REGAL_CALL gmock_glRasterPos2s(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glRasterPos2s(x, y);
}

void REGAL_CALL gmock_glRasterPos2sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos2sv(v);
}

void REGAL_CALL gmock_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glRasterPos3d(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos3dv(v);
}

void REGAL_CALL gmock_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glRasterPos3f(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos3fv(v);
}

void REGAL_CALL gmock_glRasterPos3i(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glRasterPos3i(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos3iv(v);
}

void REGAL_CALL gmock_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glRasterPos3s(x, y, z);
}

void REGAL_CALL gmock_glRasterPos3sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos3sv(v);
}

void REGAL_CALL gmock_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glRasterPos4d(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glRasterPos4dv(v);
}

void REGAL_CALL gmock_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glRasterPos4f(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glRasterPos4fv(v);
}

void REGAL_CALL gmock_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glRasterPos4i(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4iv(const GLint *v) {
  return RegalGMockInterface::current->glRasterPos4iv(v);
}

void REGAL_CALL gmock_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glRasterPos4s(x, y, z, w);
}

void REGAL_CALL gmock_glRasterPos4sv(const GLshort *v) {
  return RegalGMockInterface::current->glRasterPos4sv(v);
}

void REGAL_CALL gmock_glReadBuffer(GLenum mode) {
  return RegalGMockInterface::current->glReadBuffer(mode);
}

void REGAL_CALL gmock_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels) {
  return RegalGMockInterface::current->glReadPixels(x, y, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  return RegalGMockInterface::current->glRectd(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectdv(const GLdouble *v1, const GLdouble *v2) {
  return RegalGMockInterface::current->glRectdv(v1, v2);
}

void REGAL_CALL gmock_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  return RegalGMockInterface::current->glRectf(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectfv(const GLfloat *v1, const GLfloat *v2) {
  return RegalGMockInterface::current->glRectfv(v1, v2);
}

void REGAL_CALL gmock_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
  return RegalGMockInterface::current->glRecti(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectiv(const GLint *v1, const GLint *v2) {
  return RegalGMockInterface::current->glRectiv(v1, v2);
}

void REGAL_CALL gmock_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  return RegalGMockInterface::current->glRects(x1, y1, x2, y2);
}

void REGAL_CALL gmock_glRectsv(const GLshort *v1, const GLshort *v2) {
  return RegalGMockInterface::current->glRectsv(v1, v2);
}

GLint REGAL_CALL gmock_glRenderMode(GLenum mode) {
  return RegalGMockInterface::current->glRenderMode(mode);
}

void REGAL_CALL gmock_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glRotated(angle, x, y, z);
}

void REGAL_CALL gmock_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glRotatef(angle, x, y, z);
}

void REGAL_CALL gmock_glScaled(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glScaled(x, y, z);
}

void REGAL_CALL gmock_glScalef(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glScalef(x, y, z);
}

void REGAL_CALL gmock_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glScissor(x, y, width, height);
}

void REGAL_CALL gmock_glSelectBuffer(GLsizei size, GLuint *buffer) {
  return RegalGMockInterface::current->glSelectBuffer(size, buffer);
}

void REGAL_CALL gmock_glShadeModel(GLenum mode) {
  return RegalGMockInterface::current->glShadeModel(mode);
}

void REGAL_CALL gmock_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glStencilFunc(func, ref, mask);
}

void REGAL_CALL gmock_glStencilMask(GLuint mask) {
  return RegalGMockInterface::current->glStencilMask(mask);
}

void REGAL_CALL gmock_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
  return RegalGMockInterface::current->glStencilOp(fail, zfail, zpass);
}

void REGAL_CALL gmock_glTexCoord1d(GLdouble s) {
  return RegalGMockInterface::current->glTexCoord1d(s);
}

void REGAL_CALL gmock_glTexCoord1dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord1dv(v);
}

void REGAL_CALL gmock_glTexCoord1f(GLfloat s) {
  return RegalGMockInterface::current->glTexCoord1f(s);
}

void REGAL_CALL gmock_glTexCoord1fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord1fv(v);
}

void REGAL_CALL gmock_glTexCoord1i(GLint s) {
  return RegalGMockInterface::current->glTexCoord1i(s);
}

void REGAL_CALL gmock_glTexCoord1iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord1iv(v);
}

void REGAL_CALL gmock_glTexCoord1s(GLshort s) {
  return RegalGMockInterface::current->glTexCoord1s(s);
}

void REGAL_CALL gmock_glTexCoord1sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord1sv(v);
}

void REGAL_CALL gmock_glTexCoord2d(GLdouble s, GLdouble t) {
  return RegalGMockInterface::current->glTexCoord2d(s, t);
}

void REGAL_CALL gmock_glTexCoord2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord2dv(v);
}

void REGAL_CALL gmock_glTexCoord2f(GLfloat s, GLfloat t) {
  return RegalGMockInterface::current->glTexCoord2f(s, t);
}

void REGAL_CALL gmock_glTexCoord2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord2fv(v);
}

void REGAL_CALL gmock_glTexCoord2i(GLint s, GLint t) {
  return RegalGMockInterface::current->glTexCoord2i(s, t);
}

void REGAL_CALL gmock_glTexCoord2iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord2iv(v);
}

void REGAL_CALL gmock_glTexCoord2s(GLshort s, GLshort t) {
  return RegalGMockInterface::current->glTexCoord2s(s, t);
}

void REGAL_CALL gmock_glTexCoord2sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord2sv(v);
}

void REGAL_CALL gmock_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
  return RegalGMockInterface::current->glTexCoord3d(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord3dv(v);
}

void REGAL_CALL gmock_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
  return RegalGMockInterface::current->glTexCoord3f(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord3fv(v);
}

void REGAL_CALL gmock_glTexCoord3i(GLint s, GLint t, GLint r) {
  return RegalGMockInterface::current->glTexCoord3i(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord3iv(v);
}

void REGAL_CALL gmock_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
  return RegalGMockInterface::current->glTexCoord3s(s, t, r);
}

void REGAL_CALL gmock_glTexCoord3sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord3sv(v);
}

void REGAL_CALL gmock_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  return RegalGMockInterface::current->glTexCoord4d(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glTexCoord4dv(v);
}

void REGAL_CALL gmock_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  return RegalGMockInterface::current->glTexCoord4f(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glTexCoord4fv(v);
}

void REGAL_CALL gmock_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
  return RegalGMockInterface::current->glTexCoord4i(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4iv(const GLint *v) {
  return RegalGMockInterface::current->glTexCoord4iv(v);
}

void REGAL_CALL gmock_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
  return RegalGMockInterface::current->glTexCoord4s(s, t, r, q);
}

void REGAL_CALL gmock_glTexCoord4sv(const GLshort *v) {
  return RegalGMockInterface::current->glTexCoord4sv(v);
}

void REGAL_CALL gmock_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexEnvf(target, pname, param);
}

void REGAL_CALL gmock_glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexEnvfv(target, pname, params);
}

void REGAL_CALL gmock_glTexEnvi(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexEnvi(target, pname, param);
}

void REGAL_CALL gmock_glTexEnviv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexEnviv(target, pname, params);
}

void REGAL_CALL gmock_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
  return RegalGMockInterface::current->glTexGend(coord, pname, param);
}

void REGAL_CALL gmock_glTexGendv(GLenum coord, GLenum pname, const GLdouble *params) {
  return RegalGMockInterface::current->glTexGendv(coord, pname, params);
}

void REGAL_CALL gmock_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexGenf(coord, pname, param);
}

void REGAL_CALL gmock_glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexGenfv(coord, pname, params);
}

void REGAL_CALL gmock_glTexGeni(GLenum coord, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexGeni(coord, pname, param);
}

void REGAL_CALL gmock_glTexGeniv(GLenum coord, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexGeniv(coord, pname, params);
}

void REGAL_CALL gmock_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}

void REGAL_CALL gmock_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
  return RegalGMockInterface::current->glTexParameterf(target, pname, param);
}

void REGAL_CALL gmock_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params) {
  return RegalGMockInterface::current->glTexParameterfv(target, pname, params);
}

void REGAL_CALL gmock_glTexParameteri(GLenum target, GLenum pname, GLint param) {
  return RegalGMockInterface::current->glTexParameteri(target, pname, param);
}

void REGAL_CALL gmock_glTexParameteriv(GLenum target, GLenum pname, const GLint *params) {
  return RegalGMockInterface::current->glTexParameteriv(target, pname, params);
}

void REGAL_CALL gmock_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glTranslated(x, y, z);
}

void REGAL_CALL gmock_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glTranslatef(x, y, z);
}

void REGAL_CALL gmock_glVertex2d(GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertex2d(x, y);
}

void REGAL_CALL gmock_glVertex2dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex2dv(v);
}

void REGAL_CALL gmock_glVertex2f(GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertex2f(x, y);
}

void REGAL_CALL gmock_glVertex2fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex2fv(v);
}

void REGAL_CALL gmock_glVertex2i(GLint x, GLint y) {
  return RegalGMockInterface::current->glVertex2i(x, y);
}

void REGAL_CALL gmock_glVertex2iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex2iv(v);
}

void REGAL_CALL gmock_glVertex2s(GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertex2s(x, y);
}

void REGAL_CALL gmock_glVertex2sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex2sv(v);
}

void REGAL_CALL gmock_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertex3d(x, y, z);
}

void REGAL_CALL gmock_glVertex3dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex3dv(v);
}

void REGAL_CALL gmock_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertex3f(x, y, z);
}

void REGAL_CALL gmock_glVertex3fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex3fv(v);
}

void REGAL_CALL gmock_glVertex3i(GLint x, GLint y, GLint z) {
  return RegalGMockInterface::current->glVertex3i(x, y, z);
}

void REGAL_CALL gmock_glVertex3iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex3iv(v);
}

void REGAL_CALL gmock_glVertex3s(GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertex3s(x, y, z);
}

void REGAL_CALL gmock_glVertex3sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex3sv(v);
}

void REGAL_CALL gmock_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertex4d(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4dv(const GLdouble *v) {
  return RegalGMockInterface::current->glVertex4dv(v);
}

void REGAL_CALL gmock_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertex4f(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4fv(const GLfloat *v) {
  return RegalGMockInterface::current->glVertex4fv(v);
}

void REGAL_CALL gmock_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
  return RegalGMockInterface::current->glVertex4i(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4iv(const GLint *v) {
  return RegalGMockInterface::current->glVertex4iv(v);
}

void REGAL_CALL gmock_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertex4s(x, y, z, w);
}

void REGAL_CALL gmock_glVertex4sv(const GLshort *v) {
  return RegalGMockInterface::current->glVertex4sv(v);
}

void REGAL_CALL gmock_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glViewport(x, y, width, height);
}

GLboolean REGAL_CALL gmock_glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences) {
  return RegalGMockInterface::current->glAreTexturesResident(n, textures, residences);
}

void REGAL_CALL gmock_glArrayElement(GLint index) {
  return RegalGMockInterface::current->glArrayElement(index);
}

void REGAL_CALL gmock_glBindTexture(GLenum target, GLuint texture) {
  return RegalGMockInterface::current->glBindTexture(target, texture);
}

void REGAL_CALL gmock_glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glColorPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}

void REGAL_CALL gmock_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  return RegalGMockInterface::current->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}

void REGAL_CALL gmock_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  return RegalGMockInterface::current->glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}

void REGAL_CALL gmock_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  return RegalGMockInterface::current->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}

void REGAL_CALL gmock_glDeleteTextures(GLsizei n, const GLuint *textures) {
  return RegalGMockInterface::current->glDeleteTextures(n, textures);
}

void REGAL_CALL gmock_glDisableClientState(GLenum cap) {
  return RegalGMockInterface::current->glDisableClientState(cap);
}

void REGAL_CALL gmock_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
  return RegalGMockInterface::current->glDrawArrays(mode, first, count);
}

void REGAL_CALL gmock_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices) {
  return RegalGMockInterface::current->glDrawElements(mode, count, type, indices);
}

void REGAL_CALL gmock_glEdgeFlagPointer(GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glEdgeFlagPointer(stride, pointer);
}

void REGAL_CALL gmock_glEnableClientState(GLenum cap) {
  return RegalGMockInterface::current->glEnableClientState(cap);
}

void REGAL_CALL gmock_glGenTextures(GLsizei n, GLuint *textures) {
  return RegalGMockInterface::current->glGenTextures(n, textures);
}

void REGAL_CALL gmock_glGetPointerv(GLenum pname, GLvoid **params) {
  return RegalGMockInterface::current->glGetPointerv(pname, params);
}

void REGAL_CALL gmock_glIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glIndexPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glIndexub(GLubyte c) {
  return RegalGMockInterface::current->glIndexub(c);
}

void REGAL_CALL gmock_glIndexubv(const GLubyte *c) {
  return RegalGMockInterface::current->glIndexubv(c);
}

void REGAL_CALL gmock_glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glInterleavedArrays(format, stride, pointer);
}

GLboolean REGAL_CALL gmock_glIsTexture(GLuint texture) {
  return RegalGMockInterface::current->glIsTexture(texture);
}

void REGAL_CALL gmock_glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glNormalPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glPolygonOffset(GLfloat factor, GLfloat units) {
  return RegalGMockInterface::current->glPolygonOffset(factor, units);
}

void REGAL_CALL gmock_glPopClientAttrib(void) {
  return RegalGMockInterface::current->glPopClientAttrib();
}

void REGAL_CALL gmock_glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities) {
  return RegalGMockInterface::current->glPrioritizeTextures(n, textures, priorities);
}

void REGAL_CALL gmock_glPushClientAttrib(GLbitfield mask) {
  return RegalGMockInterface::current->glPushClientAttrib(mask);
}

void REGAL_CALL gmock_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glTexCoordPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}

void REGAL_CALL gmock_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels) {
  return RegalGMockInterface::current->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void REGAL_CALL gmock_glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glClientActiveTexture(GLenum texture) {
  return RegalGMockInterface::current->glClientActiveTexture(texture);
}

void REGAL_CALL gmock_glFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glFogCoordPointer(type, stride, pointer);
}

void REGAL_CALL gmock_glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glSecondaryColorPointer(size, type, stride, pointer);
}

void REGAL_CALL gmock_glBindBuffer(GLenum target, GLuint buffer) {
  return RegalGMockInterface::current->glBindBuffer(target, buffer);
}

void REGAL_CALL gmock_glAttachShader(GLuint program, GLuint shader) {
  return RegalGMockInterface::current->glAttachShader(program, shader);
}

void REGAL_CALL gmock_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) {
  return RegalGMockInterface::current->glBindAttribLocation(program, index, name);
}

void REGAL_CALL gmock_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) {
  return RegalGMockInterface::current->glBlendEquationSeparate(modeRGB, modeAlpha);
}

void REGAL_CALL gmock_glCompileShader(GLuint shader) {
  return RegalGMockInterface::current->glCompileShader(shader);
}

GLuint REGAL_CALL gmock_glCreateProgram(void) {
  return RegalGMockInterface::current->glCreateProgram();
}

GLuint REGAL_CALL gmock_glCreateShader(GLenum type) {
  return RegalGMockInterface::current->glCreateShader(type);
}

void REGAL_CALL gmock_glDeleteProgram(GLuint program) {
  return RegalGMockInterface::current->glDeleteProgram(program);
}

void REGAL_CALL gmock_glDeleteShader(GLuint shader) {
  return RegalGMockInterface::current->glDeleteShader(shader);
}

void REGAL_CALL gmock_glDetachShader(GLuint program, GLuint shader) {
  return RegalGMockInterface::current->glDetachShader(program, shader);
}

void REGAL_CALL gmock_glDisableVertexAttribArray(GLuint index) {
  return RegalGMockInterface::current->glDisableVertexAttribArray(index);
}

void REGAL_CALL gmock_glDrawBuffers(GLsizei n, const GLenum *bufs) {
  return RegalGMockInterface::current->glDrawBuffers(n, bufs);
}

void REGAL_CALL gmock_glEnableVertexAttribArray(GLuint index) {
  return RegalGMockInterface::current->glEnableVertexAttribArray(index);
}

void REGAL_CALL gmock_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveAttrib(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name) {
  return RegalGMockInterface::current->glGetActiveUniform(program, index, bufSize, length, size, type, name);
}

void REGAL_CALL gmock_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders) {
  return RegalGMockInterface::current->glGetAttachedShaders(program, maxCount, count, shaders);
}

GLint REGAL_CALL gmock_glGetAttribLocation(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetAttribLocation(program, name);
}

void REGAL_CALL gmock_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  return RegalGMockInterface::current->glGetProgramInfoLog(program, bufSize, length, infoLog);
}

void REGAL_CALL gmock_glGetProgramiv(GLuint program, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetProgramiv(program, pname, params);
}

void REGAL_CALL gmock_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog) {
  return RegalGMockInterface::current->glGetShaderInfoLog(shader, bufSize, length, infoLog);
}

void REGAL_CALL gmock_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source) {
  return RegalGMockInterface::current->glGetShaderSource(shader, bufSize, length, source);
}

void REGAL_CALL gmock_glGetShaderiv(GLuint shader, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetShaderiv(shader, pname, params);
}

GLint REGAL_CALL gmock_glGetUniformLocation(GLuint program, const GLchar *name) {
  return RegalGMockInterface::current->glGetUniformLocation(program, name);
}

void REGAL_CALL gmock_glGetUniformfv(GLuint program, GLint location, GLfloat *params) {
  return RegalGMockInterface::current->glGetUniformfv(program, location, params);
}

void REGAL_CALL gmock_glGetUniformiv(GLuint program, GLint location, GLint *params) {
  return RegalGMockInterface::current->glGetUniformiv(program, location, params);
}

void REGAL_CALL gmock_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer) {
  return RegalGMockInterface::current->glGetVertexAttribPointerv(index, pname, pointer);
}

void REGAL_CALL gmock_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params) {
  return RegalGMockInterface::current->glGetVertexAttribdv(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params) {
  return RegalGMockInterface::current->glGetVertexAttribfv(index, pname, params);
}

void REGAL_CALL gmock_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params) {
  return RegalGMockInterface::current->glGetVertexAttribiv(index, pname, params);
}

GLboolean REGAL_CALL gmock_glIsProgram(GLuint program) {
  return RegalGMockInterface::current->glIsProgram(program);
}

GLboolean REGAL_CALL gmock_glIsShader(GLuint shader) {
  return RegalGMockInterface::current->glIsShader(shader);
}

void REGAL_CALL gmock_glLinkProgram(GLuint program) {
  return RegalGMockInterface::current->glLinkProgram(program);
}

void REGAL_CALL gmock_glShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length) {
  return RegalGMockInterface::current->glShaderSource(shader, count, string, length);
}

void REGAL_CALL gmock_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) {
  return RegalGMockInterface::current->glStencilFuncSeparate(face, func, ref, mask);
}

void REGAL_CALL gmock_glStencilMaskSeparate(GLenum face, GLuint mask) {
  return RegalGMockInterface::current->glStencilMaskSeparate(face, mask);
}

void REGAL_CALL gmock_glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass) {
  return RegalGMockInterface::current->glStencilOpSeparate(face, fail, zfail, zpass);
}

void REGAL_CALL gmock_glUniform1f(GLint location, GLfloat v0) {
  return RegalGMockInterface::current->glUniform1f(location, v0);
}

void REGAL_CALL gmock_glUniform1fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform1fv(location, count, value);
}

void REGAL_CALL gmock_glUniform1i(GLint location, GLint v0) {
  return RegalGMockInterface::current->glUniform1i(location, v0);
}

void REGAL_CALL gmock_glUniform1iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform1iv(location, count, value);
}

void REGAL_CALL gmock_glUniform2f(GLint location, GLfloat v0, GLfloat v1) {
  return RegalGMockInterface::current->glUniform2f(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform2fv(location, count, value);
}

void REGAL_CALL gmock_glUniform2i(GLint location, GLint v0, GLint v1) {
  return RegalGMockInterface::current->glUniform2i(location, v0, v1);
}

void REGAL_CALL gmock_glUniform2iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform2iv(location, count, value);
}

void REGAL_CALL gmock_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  return RegalGMockInterface::current->glUniform3f(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform3fv(location, count, value);
}

void REGAL_CALL gmock_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2) {
  return RegalGMockInterface::current->glUniform3i(location, v0, v1, v2);
}

void REGAL_CALL gmock_glUniform3iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform3iv(location, count, value);
}

void REGAL_CALL gmock_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  return RegalGMockInterface::current->glUniform4f(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4fv(GLint location, GLsizei count, const GLfloat *value) {
  return RegalGMockInterface::current->glUniform4fv(location, count, value);
}

void REGAL_CALL gmock_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  return RegalGMockInterface::current->glUniform4i(location, v0, v1, v2, v3);
}

void REGAL_CALL gmock_glUniform4iv(GLint location, GLsizei count, const GLint *value) {
  return RegalGMockInterface::current->glUniform4iv(location, count, value);
}

void REGAL_CALL gmock_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix2fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix3fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value) {
  return RegalGMockInterface::current->glUniformMatrix4fv(location, count, transpose, value);
}

void REGAL_CALL gmock_glUseProgram(GLuint program) {
  return RegalGMockInterface::current->glUseProgram(program);
}

void REGAL_CALL gmock_glValidateProgram(GLuint program) {
  return RegalGMockInterface::current->glValidateProgram(program);
}

void REGAL_CALL gmock_glVertexAttrib1d(GLuint index, GLdouble x) {
  return RegalGMockInterface::current->glVertexAttrib1d(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib1dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1f(GLuint index, GLfloat x) {
  return RegalGMockInterface::current->glVertexAttrib1f(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib1fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib1s(GLuint index, GLshort x) {
  return RegalGMockInterface::current->glVertexAttrib1s(index, x);
}

void REGAL_CALL gmock_glVertexAttrib1sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib1sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) {
  return RegalGMockInterface::current->glVertexAttrib2d(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib2dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) {
  return RegalGMockInterface::current->glVertexAttrib2f(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib2fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib2s(GLuint index, GLshort x, GLshort y) {
  return RegalGMockInterface::current->glVertexAttrib2s(index, x, y);
}

void REGAL_CALL gmock_glVertexAttrib2sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib2sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  return RegalGMockInterface::current->glVertexAttrib3d(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib3dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  return RegalGMockInterface::current->glVertexAttrib3f(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib3fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) {
  return RegalGMockInterface::current->glVertexAttrib3s(index, x, y, z);
}

void REGAL_CALL gmock_glVertexAttrib3sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib3sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nbv(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nbv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Niv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4Niv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nsv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nsv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  return RegalGMockInterface::current->glVertexAttrib4Nub(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4Nubv(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nubv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nuiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nuiv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4Nusv(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4Nusv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4bv(GLuint index, const GLbyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4bv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  return RegalGMockInterface::current->glVertexAttrib4d(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4dv(GLuint index, const GLdouble *v) {
  return RegalGMockInterface::current->glVertexAttrib4dv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  return RegalGMockInterface::current->glVertexAttrib4f(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4fv(GLuint index, const GLfloat *v) {
  return RegalGMockInterface::current->glVertexAttrib4fv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4iv(GLuint index, const GLint *v) {
  return RegalGMockInterface::current->glVertexAttrib4iv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  return RegalGMockInterface::current->glVertexAttrib4s(index, x, y, z, w);
}

void REGAL_CALL gmock_glVertexAttrib4sv(GLuint index, const GLshort *v) {
  return RegalGMockInterface::current->glVertexAttrib4sv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4ubv(GLuint index, const GLubyte *v) {
  return RegalGMockInterface::current->glVertexAttrib4ubv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4uiv(GLuint index, const GLuint *v) {
  return RegalGMockInterface::current->glVertexAttrib4uiv(index, v);
}

void REGAL_CALL gmock_glVertexAttrib4usv(GLuint index, const GLushort *v) {
  return RegalGMockInterface::current->glVertexAttrib4usv(index, v);
}

void REGAL_CALL gmock_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glVertexAttribPointer(index, size, type, normalized, stride, pointer);
}

void REGAL_CALL gmock_glPrimitiveRestartIndex(GLuint index) {
  return RegalGMockInterface::current->glPrimitiveRestartIndex(index);
}

void REGAL_CALL gmock_glBindVertexArray(GLuint array) {
  return RegalGMockInterface::current->glBindVertexArray(array);
}

void REGAL_CALL gmock_glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) {
  return RegalGMockInterface::current->glBindVertexBuffer(bindingindex, buffer, offset, stride);
}

void REGAL_CALL gmock_glVertexAttribBinding(GLuint attribindex, GLuint bindingindex) {
  return RegalGMockInterface::current->glVertexAttribBinding(attribindex, bindingindex);
}

void REGAL_CALL gmock_glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}

void REGAL_CALL gmock_glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}

void REGAL_CALL gmock_glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
  return RegalGMockInterface::current->glVertexAttribLFormat(attribindex, size, type, relativeoffset);
}

void REGAL_CALL gmock_glVertexBindingDivisor(GLuint bindingindex, GLuint divisor) {
  return RegalGMockInterface::current->glVertexBindingDivisor(bindingindex, divisor);
}

void REGAL_CALL gmock_glClientAttribDefaultEXT(GLbitfield mask) {
  return RegalGMockInterface::current->glClientAttribDefaultEXT(mask);
}

void REGAL_CALL gmock_glDisableClientStateiEXT(GLenum array, GLuint index) {
  return RegalGMockInterface::current->glDisableClientStateiEXT(array, index);
}

void REGAL_CALL gmock_glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer) {
  return RegalGMockInterface::current->glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer);
}

} // namespace

RegalGMockInterface::RegalGMockInterface()
{
  current = this;
}

RegalGMockInterface::~RegalGMockInterface()
{
  current = NULL;
}

RegalGMockInterface* RegalGMockInterface::current;

void InitDispatchTableGMock(DispatchTableGL &tbl)
{
  tbl.glAccum = gmock_glAccum;
  tbl.glAlphaFunc = gmock_glAlphaFunc;
  tbl.glBegin = gmock_glBegin;
  tbl.glBitmap = gmock_glBitmap;
  tbl.glBlendFunc = gmock_glBlendFunc;
  tbl.glCallList = gmock_glCallList;
  tbl.glCallLists = gmock_glCallLists;
  tbl.glClear = gmock_glClear;
  tbl.glClearAccum = gmock_glClearAccum;
  tbl.glClearColor = gmock_glClearColor;
  tbl.glClearDepth = gmock_glClearDepth;
  tbl.glClearIndex = gmock_glClearIndex;
  tbl.glClearStencil = gmock_glClearStencil;
  tbl.glClipPlane = gmock_glClipPlane;
  tbl.glColor3b = gmock_glColor3b;
  tbl.glColor3bv = gmock_glColor3bv;
  tbl.glColor3d = gmock_glColor3d;
  tbl.glColor3dv = gmock_glColor3dv;
  tbl.glColor3f = gmock_glColor3f;
  tbl.glColor3fv = gmock_glColor3fv;
  tbl.glColor3i = gmock_glColor3i;
  tbl.glColor3iv = gmock_glColor3iv;
  tbl.glColor3s = gmock_glColor3s;
  tbl.glColor3sv = gmock_glColor3sv;
  tbl.glColor3ub = gmock_glColor3ub;
  tbl.glColor3ubv = gmock_glColor3ubv;
  tbl.glColor3ui = gmock_glColor3ui;
  tbl.glColor3uiv = gmock_glColor3uiv;
  tbl.glColor3us = gmock_glColor3us;
  tbl.glColor3usv = gmock_glColor3usv;
  tbl.glColor4b = gmock_glColor4b;
  tbl.glColor4bv = gmock_glColor4bv;
  tbl.glColor4d = gmock_glColor4d;
  tbl.glColor4dv = gmock_glColor4dv;
  tbl.glColor4f = gmock_glColor4f;
  tbl.glColor4fv = gmock_glColor4fv;
  tbl.glColor4i = gmock_glColor4i;
  tbl.glColor4iv = gmock_glColor4iv;
  tbl.glColor4s = gmock_glColor4s;
  tbl.glColor4sv = gmock_glColor4sv;
  tbl.glColor4ub = gmock_glColor4ub;
  tbl.glColor4ubv = gmock_glColor4ubv;
  tbl.glColor4ui = gmock_glColor4ui;
  tbl.glColor4uiv = gmock_glColor4uiv;
  tbl.glColor4us = gmock_glColor4us;
  tbl.glColor4usv = gmock_glColor4usv;
  tbl.glColorMask = gmock_glColorMask;
  tbl.glColorMaterial = gmock_glColorMaterial;
  tbl.glCopyPixels = gmock_glCopyPixels;
  tbl.glCullFace = gmock_glCullFace;
  tbl.glDeleteLists = gmock_glDeleteLists;
  tbl.glDepthFunc = gmock_glDepthFunc;
  tbl.glDepthMask = gmock_glDepthMask;
  tbl.glDepthRange = gmock_glDepthRange;
  tbl.glDisable = gmock_glDisable;
  tbl.glDrawBuffer = gmock_glDrawBuffer;
  tbl.glDrawPixels = gmock_glDrawPixels;
  tbl.glEdgeFlag = gmock_glEdgeFlag;
  tbl.glEdgeFlagv = gmock_glEdgeFlagv;
  tbl.glEnable = gmock_glEnable;
  tbl.glEnd = gmock_glEnd;
  tbl.glEndList = gmock_glEndList;
  tbl.glEvalCoord1d = gmock_glEvalCoord1d;
  tbl.glEvalCoord1dv = gmock_glEvalCoord1dv;
  tbl.glEvalCoord1f = gmock_glEvalCoord1f;
  tbl.glEvalCoord1fv = gmock_glEvalCoord1fv;
  tbl.glEvalCoord2d = gmock_glEvalCoord2d;
  tbl.glEvalCoord2dv = gmock_glEvalCoord2dv;
  tbl.glEvalCoord2f = gmock_glEvalCoord2f;
  tbl.glEvalCoord2fv = gmock_glEvalCoord2fv;
  tbl.glEvalMesh1 = gmock_glEvalMesh1;
  tbl.glEvalMesh2 = gmock_glEvalMesh2;
  tbl.glEvalPoint1 = gmock_glEvalPoint1;
  tbl.glEvalPoint2 = gmock_glEvalPoint2;
  tbl.glFeedbackBuffer = gmock_glFeedbackBuffer;
  tbl.glFinish = gmock_glFinish;
  tbl.glFlush = gmock_glFlush;
  tbl.glFogf = gmock_glFogf;
  tbl.glFogfv = gmock_glFogfv;
  tbl.glFogi = gmock_glFogi;
  tbl.glFogiv = gmock_glFogiv;
  tbl.glFrontFace = gmock_glFrontFace;
  tbl.glFrustum = gmock_glFrustum;
  tbl.glGenLists = gmock_glGenLists;
  tbl.glGetBooleanv = gmock_glGetBooleanv;
  tbl.glGetClipPlane = gmock_glGetClipPlane;
  tbl.glGetDoublev = gmock_glGetDoublev;
  tbl.glGetError = gmock_glGetError;
  tbl.glGetFloatv = gmock_glGetFloatv;
  tbl.glGetIntegerv = gmock_glGetIntegerv;
  tbl.glGetLightfv = gmock_glGetLightfv;
  tbl.glGetLightiv = gmock_glGetLightiv;
  tbl.glGetMapdv = gmock_glGetMapdv;
  tbl.glGetMapfv = gmock_glGetMapfv;
  tbl.glGetMapiv = gmock_glGetMapiv;
  tbl.glGetMaterialfv = gmock_glGetMaterialfv;
  tbl.glGetMaterialiv = gmock_glGetMaterialiv;
  tbl.glGetPixelMapfv = gmock_glGetPixelMapfv;
  tbl.glGetPixelMapuiv = gmock_glGetPixelMapuiv;
  tbl.glGetPixelMapusv = gmock_glGetPixelMapusv;
  tbl.glGetPolygonStipple = gmock_glGetPolygonStipple;
  tbl.glGetString = gmock_glGetString;
  tbl.glGetTexEnvfv = gmock_glGetTexEnvfv;
  tbl.glGetTexEnviv = gmock_glGetTexEnviv;
  tbl.glGetTexGendv = gmock_glGetTexGendv;
  tbl.glGetTexGenfv = gmock_glGetTexGenfv;
  tbl.glGetTexGeniv = gmock_glGetTexGeniv;
  tbl.glGetTexImage = gmock_glGetTexImage;
  tbl.glGetTexLevelParameterfv = gmock_glGetTexLevelParameterfv;
  tbl.glGetTexLevelParameteriv = gmock_glGetTexLevelParameteriv;
  tbl.glGetTexParameterfv = gmock_glGetTexParameterfv;
  tbl.glGetTexParameteriv = gmock_glGetTexParameteriv;
  tbl.glHint = gmock_glHint;
  tbl.glIndexMask = gmock_glIndexMask;
  tbl.glIndexd = gmock_glIndexd;
  tbl.glIndexdv = gmock_glIndexdv;
  tbl.glIndexf = gmock_glIndexf;
  tbl.glIndexfv = gmock_glIndexfv;
  tbl.glIndexi = gmock_glIndexi;
  tbl.glIndexiv = gmock_glIndexiv;
  tbl.glIndexs = gmock_glIndexs;
  tbl.glIndexsv = gmock_glIndexsv;
  tbl.glInitNames = gmock_glInitNames;
  tbl.glIsEnabled = gmock_glIsEnabled;
  tbl.glIsList = gmock_glIsList;
  tbl.glLightModelf = gmock_glLightModelf;
  tbl.glLightModelfv = gmock_glLightModelfv;
  tbl.glLightModeli = gmock_glLightModeli;
  tbl.glLightModeliv = gmock_glLightModeliv;
  tbl.glLightf = gmock_glLightf;
  tbl.glLightfv = gmock_glLightfv;
  tbl.glLighti = gmock_glLighti;
  tbl.glLightiv = gmock_glLightiv;
  tbl.glLineStipple = gmock_glLineStipple;
  tbl.glLineWidth = gmock_glLineWidth;
  tbl.glListBase = gmock_glListBase;
  tbl.glLoadIdentity = gmock_glLoadIdentity;
  tbl.glLoadMatrixd = gmock_glLoadMatrixd;
  tbl.glLoadMatrixf = gmock_glLoadMatrixf;
  tbl.glLoadName = gmock_glLoadName;
  tbl.glLogicOp = gmock_glLogicOp;
  tbl.glMap1d = gmock_glMap1d;
  tbl.glMap1f = gmock_glMap1f;
  tbl.glMap2d = gmock_glMap2d;
  tbl.glMap2f = gmock_glMap2f;
  tbl.glMapGrid1d = gmock_glMapGrid1d;
  tbl.glMapGrid1f = gmock_glMapGrid1f;
  tbl.glMapGrid2d = gmock_glMapGrid2d;
  tbl.glMapGrid2f = gmock_glMapGrid2f;
  tbl.glMaterialf = gmock_glMaterialf;
  tbl.glMaterialfv = gmock_glMaterialfv;
  tbl.glMateriali = gmock_glMateriali;
  tbl.glMaterialiv = gmock_glMaterialiv;
  tbl.glMatrixMode = gmock_glMatrixMode;
  tbl.glMultMatrixd = gmock_glMultMatrixd;
  tbl.glMultMatrixf = gmock_glMultMatrixf;
  tbl.glNewList = gmock_glNewList;
  tbl.glNormal3b = gmock_glNormal3b;
  tbl.glNormal3bv = gmock_glNormal3bv;
  tbl.glNormal3d = gmock_glNormal3d;
  tbl.glNormal3dv = gmock_glNormal3dv;
  tbl.glNormal3f = gmock_glNormal3f;
  tbl.glNormal3fv = gmock_glNormal3fv;
  tbl.glNormal3i = gmock_glNormal3i;
  tbl.glNormal3iv = gmock_glNormal3iv;
  tbl.glNormal3s = gmock_glNormal3s;
  tbl.glNormal3sv = gmock_glNormal3sv;
  tbl.glOrtho = gmock_glOrtho;
  tbl.glPassThrough = gmock_glPassThrough;
  tbl.glPixelMapfv = gmock_glPixelMapfv;
  tbl.glPixelMapuiv = gmock_glPixelMapuiv;
  tbl.glPixelMapusv = gmock_glPixelMapusv;
  tbl.glPixelStoref = gmock_glPixelStoref;
  tbl.glPixelStorei = gmock_glPixelStorei;
  tbl.glPixelTransferf = gmock_glPixelTransferf;
  tbl.glPixelTransferi = gmock_glPixelTransferi;
  tbl.glPixelZoom = gmock_glPixelZoom;
  tbl.glPointSize = gmock_glPointSize;
  tbl.glPolygonMode = gmock_glPolygonMode;
  tbl.glPolygonStipple = gmock_glPolygonStipple;
  tbl.glPopAttrib = gmock_glPopAttrib;
  tbl.glPopMatrix = gmock_glPopMatrix;
  tbl.glPopName = gmock_glPopName;
  tbl.glPushAttrib = gmock_glPushAttrib;
  tbl.glPushMatrix = gmock_glPushMatrix;
  tbl.glPushName = gmock_glPushName;
  tbl.glRasterPos2d = gmock_glRasterPos2d;
  tbl.glRasterPos2dv = gmock_glRasterPos2dv;
  tbl.glRasterPos2f = gmock_glRasterPos2f;
  tbl.glRasterPos2fv = gmock_glRasterPos2fv;
  tbl.glRasterPos2i = gmock_glRasterPos2i;
  tbl.glRasterPos2iv = gmock_glRasterPos2iv;
  tbl.glRasterPos2s = gmock_glRasterPos2s;
  tbl.glRasterPos2sv = gmock_glRasterPos2sv;
  tbl.glRasterPos3d = gmock_glRasterPos3d;
  tbl.glRasterPos3dv = gmock_glRasterPos3dv;
  tbl.glRasterPos3f = gmock_glRasterPos3f;
  tbl.glRasterPos3fv = gmock_glRasterPos3fv;
  tbl.glRasterPos3i = gmock_glRasterPos3i;
  tbl.glRasterPos3iv = gmock_glRasterPos3iv;
  tbl.glRasterPos3s = gmock_glRasterPos3s;
  tbl.glRasterPos3sv = gmock_glRasterPos3sv;
  tbl.glRasterPos4d = gmock_glRasterPos4d;
  tbl.glRasterPos4dv = gmock_glRasterPos4dv;
  tbl.glRasterPos4f = gmock_glRasterPos4f;
  tbl.glRasterPos4fv = gmock_glRasterPos4fv;
  tbl.glRasterPos4i = gmock_glRasterPos4i;
  tbl.glRasterPos4iv = gmock_glRasterPos4iv;
  tbl.glRasterPos4s = gmock_glRasterPos4s;
  tbl.glRasterPos4sv = gmock_glRasterPos4sv;
  tbl.glReadBuffer = gmock_glReadBuffer;
  tbl.glReadPixels = gmock_glReadPixels;
  tbl.glRectd = gmock_glRectd;
  tbl.glRectdv = gmock_glRectdv;
  tbl.glRectf = gmock_glRectf;
  tbl.glRectfv = gmock_glRectfv;
  tbl.glRecti = gmock_glRecti;
  tbl.glRectiv = gmock_glRectiv;
  tbl.glRects = gmock_glRects;
  tbl.glRectsv = gmock_glRectsv;
  tbl.glRenderMode = gmock_glRenderMode;
  tbl.glRotated = gmock_glRotated;
  tbl.glRotatef = gmock_glRotatef;
  tbl.glScaled = gmock_glScaled;
  tbl.glScalef = gmock_glScalef;
  tbl.glScissor = gmock_glScissor;
  tbl.glSelectBuffer = gmock_glSelectBuffer;
  tbl.glShadeModel = gmock_glShadeModel;
  tbl.glStencilFunc = gmock_glStencilFunc;
  tbl.glStencilMask = gmock_glStencilMask;
  tbl.glStencilOp = gmock_glStencilOp;
  tbl.glTexCoord1d = gmock_glTexCoord1d;
  tbl.glTexCoord1dv = gmock_glTexCoord1dv;
  tbl.glTexCoord1f = gmock_glTexCoord1f;
  tbl.glTexCoord1fv = gmock_glTexCoord1fv;
  tbl.glTexCoord1i = gmock_glTexCoord1i;
  tbl.glTexCoord1iv = gmock_glTexCoord1iv;
  tbl.glTexCoord1s = gmock_glTexCoord1s;
  tbl.glTexCoord1sv = gmock_glTexCoord1sv;
  tbl.glTexCoord2d = gmock_glTexCoord2d;
  tbl.glTexCoord2dv = gmock_glTexCoord2dv;
  tbl.glTexCoord2f = gmock_glTexCoord2f;
  tbl.glTexCoord2fv = gmock_glTexCoord2fv;
  tbl.glTexCoord2i = gmock_glTexCoord2i;
  tbl.glTexCoord2iv = gmock_glTexCoord2iv;
  tbl.glTexCoord2s = gmock_glTexCoord2s;
  tbl.glTexCoord2sv = gmock_glTexCoord2sv;
  tbl.glTexCoord3d = gmock_glTexCoord3d;
  tbl.glTexCoord3dv = gmock_glTexCoord3dv;
  tbl.glTexCoord3f = gmock_glTexCoord3f;
  tbl.glTexCoord3fv = gmock_glTexCoord3fv;
  tbl.glTexCoord3i = gmock_glTexCoord3i;
  tbl.glTexCoord3iv = gmock_glTexCoord3iv;
  tbl.glTexCoord3s = gmock_glTexCoord3s;
  tbl.glTexCoord3sv = gmock_glTexCoord3sv;
  tbl.glTexCoord4d = gmock_glTexCoord4d;
  tbl.glTexCoord4dv = gmock_glTexCoord4dv;
  tbl.glTexCoord4f = gmock_glTexCoord4f;
  tbl.glTexCoord4fv = gmock_glTexCoord4fv;
  tbl.glTexCoord4i = gmock_glTexCoord4i;
  tbl.glTexCoord4iv = gmock_glTexCoord4iv;
  tbl.glTexCoord4s = gmock_glTexCoord4s;
  tbl.glTexCoord4sv = gmock_glTexCoord4sv;
  tbl.glTexEnvf = gmock_glTexEnvf;
  tbl.glTexEnvfv = gmock_glTexEnvfv;
  tbl.glTexEnvi = gmock_glTexEnvi;
  tbl.glTexEnviv = gmock_glTexEnviv;
  tbl.glTexGend = gmock_glTexGend;
  tbl.glTexGendv = gmock_glTexGendv;
  tbl.glTexGenf = gmock_glTexGenf;
  tbl.glTexGenfv = gmock_glTexGenfv;
  tbl.glTexGeni = gmock_glTexGeni;
  tbl.glTexGeniv = gmock_glTexGeniv;
  tbl.glTexImage1D = gmock_glTexImage1D;
  tbl.glTexImage2D = gmock_glTexImage2D;
  tbl.glTexParameterf = gmock_glTexParameterf;
  tbl.glTexParameterfv = gmock_glTexParameterfv;
  tbl.glTexParameteri = gmock_glTexParameteri;
  tbl.glTexParameteriv = gmock_glTexParameteriv;
  tbl.glTranslated = gmock_glTranslated;
  tbl.glTranslatef = gmock_glTranslatef;
  tbl.glVertex2d = gmock_glVertex2d;
  tbl.glVertex2dv = gmock_glVertex2dv;
  tbl.glVertex2f = gmock_glVertex2f;
  tbl.glVertex2fv = gmock_glVertex2fv;
  tbl.glVertex2i = gmock_glVertex2i;
  tbl.glVertex2iv = gmock_glVertex2iv;
  tbl.glVertex2s = gmock_glVertex2s;
  tbl.glVertex2sv = gmock_glVertex2sv;
  tbl.glVertex3d = gmock_glVertex3d;
  tbl.glVertex3dv = gmock_glVertex3dv;
  tbl.glVertex3f = gmock_glVertex3f;
  tbl.glVertex3fv = gmock_glVertex3fv;
  tbl.glVertex3i = gmock_glVertex3i;
  tbl.glVertex3iv = gmock_glVertex3iv;
  tbl.glVertex3s = gmock_glVertex3s;
  tbl.glVertex3sv = gmock_glVertex3sv;
  tbl.glVertex4d = gmock_glVertex4d;
  tbl.glVertex4dv = gmock_glVertex4dv;
  tbl.glVertex4f = gmock_glVertex4f;
  tbl.glVertex4fv = gmock_glVertex4fv;
  tbl.glVertex4i = gmock_glVertex4i;
  tbl.glVertex4iv = gmock_glVertex4iv;
  tbl.glVertex4s = gmock_glVertex4s;
  tbl.glVertex4sv = gmock_glVertex4sv;
  tbl.glViewport = gmock_glViewport;
  tbl.glAreTexturesResident = gmock_glAreTexturesResident;
  tbl.glArrayElement = gmock_glArrayElement;
  tbl.glBindTexture = gmock_glBindTexture;
  tbl.glColorPointer = gmock_glColorPointer;
  tbl.glCopyTexImage1D = gmock_glCopyTexImage1D;
  tbl.glCopyTexImage2D = gmock_glCopyTexImage2D;
  tbl.glCopyTexSubImage1D = gmock_glCopyTexSubImage1D;
  tbl.glCopyTexSubImage2D = gmock_glCopyTexSubImage2D;
  tbl.glDeleteTextures = gmock_glDeleteTextures;
  tbl.glDisableClientState = gmock_glDisableClientState;
  tbl.glDrawArrays = gmock_glDrawArrays;
  tbl.glDrawElements = gmock_glDrawElements;
  tbl.glEdgeFlagPointer = gmock_glEdgeFlagPointer;
  tbl.glEnableClientState = gmock_glEnableClientState;
  tbl.glGenTextures = gmock_glGenTextures;
  tbl.glGetPointerv = gmock_glGetPointerv;
  tbl.glIndexPointer = gmock_glIndexPointer;
  tbl.glIndexub = gmock_glIndexub;
  tbl.glIndexubv = gmock_glIndexubv;
  tbl.glInterleavedArrays = gmock_glInterleavedArrays;
  tbl.glIsTexture = gmock_glIsTexture;
  tbl.glNormalPointer = gmock_glNormalPointer;
  tbl.glPolygonOffset = gmock_glPolygonOffset;
  tbl.glPopClientAttrib = gmock_glPopClientAttrib;
  tbl.glPrioritizeTextures = gmock_glPrioritizeTextures;
  tbl.glPushClientAttrib = gmock_glPushClientAttrib;
  tbl.glTexCoordPointer = gmock_glTexCoordPointer;
  tbl.glTexSubImage1D = gmock_glTexSubImage1D;
  tbl.glTexSubImage2D = gmock_glTexSubImage2D;
  tbl.glVertexPointer = gmock_glVertexPointer;
  tbl.glClientActiveTexture = gmock_glClientActiveTexture;
  tbl.glFogCoordPointer = gmock_glFogCoordPointer;
  tbl.glSecondaryColorPointer = gmock_glSecondaryColorPointer;
  tbl.glBindBuffer = gmock_glBindBuffer;
  tbl.glAttachShader = gmock_glAttachShader;
  tbl.glBindAttribLocation = gmock_glBindAttribLocation;
  tbl.glBlendEquationSeparate = gmock_glBlendEquationSeparate;
  tbl.glCompileShader = gmock_glCompileShader;
  tbl.glCreateProgram = gmock_glCreateProgram;
  tbl.glCreateShader = gmock_glCreateShader;
  tbl.glDeleteProgram = gmock_glDeleteProgram;
  tbl.glDeleteShader = gmock_glDeleteShader;
  tbl.glDetachShader = gmock_glDetachShader;
  tbl.glDisableVertexAttribArray = gmock_glDisableVertexAttribArray;
  tbl.glDrawBuffers = gmock_glDrawBuffers;
  tbl.glEnableVertexAttribArray = gmock_glEnableVertexAttribArray;
  tbl.glGetActiveAttrib = gmock_glGetActiveAttrib;
  tbl.glGetActiveUniform = gmock_glGetActiveUniform;
  tbl.glGetAttachedShaders = gmock_glGetAttachedShaders;
  tbl.glGetAttribLocation = gmock_glGetAttribLocation;
  tbl.glGetProgramInfoLog = gmock_glGetProgramInfoLog;
  tbl.glGetProgramiv = gmock_glGetProgramiv;
  tbl.glGetShaderInfoLog = gmock_glGetShaderInfoLog;
  tbl.glGetShaderSource = gmock_glGetShaderSource;
  tbl.glGetShaderiv = gmock_glGetShaderiv;
  tbl.glGetUniformLocation = gmock_glGetUniformLocation;
  tbl.glGetUniformfv = gmock_glGetUniformfv;
  tbl.glGetUniformiv = gmock_glGetUniformiv;
  tbl.glGetVertexAttribPointerv = gmock_glGetVertexAttribPointerv;
  tbl.glGetVertexAttribdv = gmock_glGetVertexAttribdv;
  tbl.glGetVertexAttribfv = gmock_glGetVertexAttribfv;
  tbl.glGetVertexAttribiv = gmock_glGetVertexAttribiv;
  tbl.glIsProgram = gmock_glIsProgram;
  tbl.glIsShader = gmock_glIsShader;
  tbl.glLinkProgram = gmock_glLinkProgram;
  tbl.glShaderSource = gmock_glShaderSource;
  tbl.glStencilFuncSeparate = gmock_glStencilFuncSeparate;
  tbl.glStencilMaskSeparate = gmock_glStencilMaskSeparate;
  tbl.glStencilOpSeparate = gmock_glStencilOpSeparate;
  tbl.glUniform1f = gmock_glUniform1f;
  tbl.glUniform1fv = gmock_glUniform1fv;
  tbl.glUniform1i = gmock_glUniform1i;
  tbl.glUniform1iv = gmock_glUniform1iv;
  tbl.glUniform2f = gmock_glUniform2f;
  tbl.glUniform2fv = gmock_glUniform2fv;
  tbl.glUniform2i = gmock_glUniform2i;
  tbl.glUniform2iv = gmock_glUniform2iv;
  tbl.glUniform3f = gmock_glUniform3f;
  tbl.glUniform3fv = gmock_glUniform3fv;
  tbl.glUniform3i = gmock_glUniform3i;
  tbl.glUniform3iv = gmock_glUniform3iv;
  tbl.glUniform4f = gmock_glUniform4f;
  tbl.glUniform4fv = gmock_glUniform4fv;
  tbl.glUniform4i = gmock_glUniform4i;
  tbl.glUniform4iv = gmock_glUniform4iv;
  tbl.glUniformMatrix2fv = gmock_glUniformMatrix2fv;
  tbl.glUniformMatrix3fv = gmock_glUniformMatrix3fv;
  tbl.glUniformMatrix4fv = gmock_glUniformMatrix4fv;
  tbl.glUseProgram = gmock_glUseProgram;
  tbl.glValidateProgram = gmock_glValidateProgram;
  tbl.glVertexAttrib1d = gmock_glVertexAttrib1d;
  tbl.glVertexAttrib1dv = gmock_glVertexAttrib1dv;
  tbl.glVertexAttrib1f = gmock_glVertexAttrib1f;
  tbl.glVertexAttrib1fv = gmock_glVertexAttrib1fv;
  tbl.glVertexAttrib1s = gmock_glVertexAttrib1s;
  tbl.glVertexAttrib1sv = gmock_glVertexAttrib1sv;
  tbl.glVertexAttrib2d = gmock_glVertexAttrib2d;
  tbl.glVertexAttrib2dv = gmock_glVertexAttrib2dv;
  tbl.glVertexAttrib2f = gmock_glVertexAttrib2f;
  tbl.glVertexAttrib2fv = gmock_glVertexAttrib2fv;
  tbl.glVertexAttrib2s = gmock_glVertexAttrib2s;
  tbl.glVertexAttrib2sv = gmock_glVertexAttrib2sv;
  tbl.glVertexAttrib3d = gmock_glVertexAttrib3d;
  tbl.glVertexAttrib3dv = gmock_glVertexAttrib3dv;
  tbl.glVertexAttrib3f = gmock_glVertexAttrib3f;
  tbl.glVertexAttrib3fv = gmock_glVertexAttrib3fv;
  tbl.glVertexAttrib3s = gmock_glVertexAttrib3s;
  tbl.glVertexAttrib3sv = gmock_glVertexAttrib3sv;
  tbl.glVertexAttrib4Nbv = gmock_glVertexAttrib4Nbv;
  tbl.glVertexAttrib4Niv = gmock_glVertexAttrib4Niv;
  tbl.glVertexAttrib4Nsv = gmock_glVertexAttrib4Nsv;
  tbl.glVertexAttrib4Nub = gmock_glVertexAttrib4Nub;
  tbl.glVertexAttrib4Nubv = gmock_glVertexAttrib4Nubv;
  tbl.glVertexAttrib4Nuiv = gmock_glVertexAttrib4Nuiv;
  tbl.glVertexAttrib4Nusv = gmock_glVertexAttrib4Nusv;
  tbl.glVertexAttrib4bv = gmock_glVertexAttrib4bv;
  tbl.glVertexAttrib4d = gmock_glVertexAttrib4d;
  tbl.glVertexAttrib4dv = gmock_glVertexAttrib4dv;
  tbl.glVertexAttrib4f = gmock_glVertexAttrib4f;
  tbl.glVertexAttrib4fv = gmock_glVertexAttrib4fv;
  tbl.glVertexAttrib4iv = gmock_glVertexAttrib4iv;
  tbl.glVertexAttrib4s = gmock_glVertexAttrib4s;
  tbl.glVertexAttrib4sv = gmock_glVertexAttrib4sv;
  tbl.glVertexAttrib4ubv = gmock_glVertexAttrib4ubv;
  tbl.glVertexAttrib4uiv = gmock_glVertexAttrib4uiv;
  tbl.glVertexAttrib4usv = gmock_glVertexAttrib4usv;
  tbl.glVertexAttribPointer = gmock_glVertexAttribPointer;
  tbl.glPrimitiveRestartIndex = gmock_glPrimitiveRestartIndex;
  tbl.glBindVertexArray = gmock_glBindVertexArray;
  tbl.glBindVertexBuffer = gmock_glBindVertexBuffer;
  tbl.glVertexAttribBinding = gmock_glVertexAttribBinding;
  tbl.glVertexAttribFormat = gmock_glVertexAttribFormat;
  tbl.glVertexAttribIFormat = gmock_glVertexAttribIFormat;
  tbl.glVertexAttribLFormat = gmock_glVertexAttribLFormat;
  tbl.glVertexBindingDivisor = gmock_glVertexBindingDivisor;
  tbl.glClientAttribDefaultEXT = gmock_glClientAttribDefaultEXT;
  tbl.glDisableClientStateiEXT = gmock_glDisableClientStateiEXT;
  tbl.glMultiTexCoordPointerEXT = gmock_glMultiTexCoordPointerEXT;
}

REGAL_NAMESPACE_END
