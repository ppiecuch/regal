#!/usr/bin/python -B

#
# Statistics gathering for Regal
#
# Per function and extension statistics gathering
#

from string import Template, upper, replace

from ApiUtil    import outputCode
from ApiCodeGen import *

from RegalContextInfo import cond

statisticsHeaderTemplate = Template( '''${AUTOGENERATED}
${LICENSE}

#ifndef __${HEADER_NAME}_H__
#define __${HEADER_NAME}_H__

#include "RegalUtil.h"

#if REGAL_STATISTICS

REGAL_GLOBAL_BEGIN

#include <GL/Regal.h>

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

struct Statistics
{
  Statistics();
  ~Statistics();

  void reset();
  void log() const;

  static inline void log(const char *name, const GLuint count);

${DECLARATIONS}

  bool dummy;
};

REGAL_NAMESPACE_END

#endif // REGAL_STATISTICS
#endif // __${HEADER_NAME}_H__
''')

statisticsSourceTemplate = Template( '''${AUTOGENERATED}
${LICENSE}

#include "pch.h" /* For MS precompiled header support */

#include "RegalUtil.h"

#if REGAL_STATISTICS

REGAL_GLOBAL_BEGIN

#include <GL/Regal.h>

#include "RegalStatistics.h"

#include <boost/print/interface.hpp>
#include <boost/print/string_list.hpp>
using namespace boost::print;

#include "RegalToken.h"
#include "RegalContext.h"

REGAL_GLOBAL_END

REGAL_NAMESPACE_BEGIN

using namespace ::REGAL_NAMESPACE_INTERNAL::Logging;
using namespace ::REGAL_NAMESPACE_INTERNAL::Token;

Statistics::Statistics()
{
   Internal("Statistics::Statistics","()");
   reset();
}

Statistics::~Statistics()
{
   Internal("Statistics::~Statistics","()");
}

void
Statistics::reset()
{
  ::memset(this,0,sizeof(Statistics));
}

void
Statistics::log() const
{
${LOG}
}

void
Statistics::log(const char *name, const GLuint count)
{
  if (count)
    Info("Statistics ",left(name,30,' '),right(count,6,' '));
}

REGAL_NAMESPACE_END

#endif // REGAL_STATISTICS

''')

def versionDeclareCode(apis, args):

  code = ''
  for api in apis:
    name = api.name.lower()

    # Each API version

    if hasattr(api, 'versions'):
      for version in sorted(api.versions):
        code += '  GLuint %s_version_%d_%d;\n' % (name, version[0], version[1])
      code += '\n'

  # Each extension

  for api in apis:
    name = api.name.lower()

    if name in cond:
      code += '#if %s\n'%cond[name]
    for c in sorted(api.categories):
      code += '  GLuint %s;\n' % (c.lower())
    if name in cond:
      code += '#endif\n\n'
    code += '\n'

  # Each function

  for api in apis:
    tmp = []
    for function in api.functions:

      if getattr(function,'regalOnly',False):
        continue

      name       = function.name
      category   = getattr(function, 'category', None)
      version    = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      c = 'GLuint %s;'%(name)

      tmp.append( (category, indent(c,'  ') ) )

    tmp = listToString(unfoldCategory(tmp,'  /* %s */'))

    if api.name in cond:
      tmp = wrapIf(cond[api.name], tmp)

    code += '\n' + tmp

  # enable/disable enums

  enable = ''
  disable = ''

  for api in apis:
    for i in api.enums:
      if i.name=='defines':
        for j in i.enumerantsByName:
          if getattr(j,'enableCap',False) == True:
            enable  += '  GLuint enable_%s;\n'%(j.name)
            disable += '  GLuint disable_%s;\n'%(j.name)

  code += '\n' + enable + '\n' + disable

  return code

def versionLogCode(apis, args):

  code = ''
  for api in apis:
    name = api.name.lower()

    if hasattr(api, 'versions'):
      for version in sorted(api.versions):
        n = '%s_version_%d_%d' % (name, version[0], version[1])
        code += '  log("%s",%s);\n'%(n.upper(),n)

  for api in apis:
    name = api.name.lower()
    if name in cond:
      code += '#if %s\n'%cond[name]
    for c in sorted(api.categories):
      n = c.lower()
      code += '  log("%s",%s);\n'%(n.upper(),n)
    if name in cond:
      code += '#endif\n'

  # Each function

  for api in apis:
    tmp = []
    for function in api.functions:

      if getattr(function,'regalOnly',False):
        continue

      name       = function.name
      category   = getattr(function, 'category', None)
      version    = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      c = 'log("%s",%s);'%(name,name)

      tmp.append( (category, indent(c,'  ') ) )

    tmp = listToString(unfoldCategory(tmp))

    if api.name in cond:
      tmp = wrapIf(cond[api.name], tmp)

    code += '\n' + tmp

  # enable/disable enums

  enable = ''
  disable = ''

  for api in apis:
    for i in api.enums:
      if i.name=='defines':
        for j in i.enumerantsByName:
          if getattr(j,'enableCap',False) == True:
            enable  += '  log("glEnable(%s)",enable_%s);\n'%(j.name,j.name)
            disable += '  log("glDisable(%s)",disable_%s);\n'%(j.name,j.name)

  code += '\n' + enable + '\n' + disable

  return code

def generateStatisticsHeader(apis, args):

    substitute = {}
    substitute['LICENSE']       = args.license
    substitute['AUTOGENERATED'] = args.generated
    substitute['COPYRIGHT']     = args.copyright
    substitute['HEADER_NAME']   = "REGAL_STATISTICS"
    substitute['DECLARATIONS']  = versionDeclareCode(apis,args)
    outputCode( '%s/RegalStatistics.h' % args.srcdir, statisticsHeaderTemplate.substitute(substitute))

def generateStatisticsSource(apis, args):

    substitute = {}
    substitute['LICENSE']        = args.license
    substitute['AUTOGENERATED']  = args.generated
    substitute['COPYRIGHT']      = args.copyright
    substitute['LOG']   = versionLogCode(apis,args)
    outputCode( '%s/RegalStatistics.cpp' % args.srcdir, statisticsSourceTemplate.substitute(substitute))
