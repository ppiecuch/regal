#!/usr/bin/python -B

from string import Template, upper, replace

from ApiUtil import outputCode
from ApiUtil import typeIsVoid

from ApiCodeGen import *

from RegalContextInfo import cond

from RegalDispatchShared import dispatchSourceTemplate, apiDispatchFuncInitCode, apiDispatchGlobalFuncInitCode

##############################################################################################

# CodeGen for API loader function definition.

def apiLoaderFuncDefineCode(apis, args):
  categoryPrev = None
  code = ''

  for api in apis:

    code += '\n'
    if api.name in cond:
      code += '#if %s\n' % cond[api.name]

    for function in api.functions:
      if getattr(function,'regalOnly',False)==True:
        continue

      name   = function.name
      params = paramsDefaultCode(function.parameters, True)
      callParams = paramsNameCode(function.parameters)
      rType  = typeCode(function.ret.type)
      category  = getattr(function, 'category', None)
      version   = getattr(function, 'version', None)

      if category:
        category = category.replace('_DEPRECATED', '')
      elif version:
        category = version.replace('.', '_')
        category = 'GL_VERSION_' + category

      # Close prev category block.
      if categoryPrev and not (category == categoryPrev):
        code += '\n'

      # Begin new category block.
      if category and not (category == categoryPrev):
        code += '// %s\n\n' % category

      categoryPrev = category

      code += 'static %sREGAL_CALL %s%s(%s) \n{\n' % (rType, 'loader_', name, params)

      # Get a reference to the appropriate dispatch table and attempt GetProcAddress

      if function.needsContext:
        code += '  RegalContext * _context = REGAL_GET_CONTEXT();\n'
        code += '  RegalAssert(_context);\n'
        code += '  DispatchTableGL &_driver = _context->dispatcher.driver;\n'
      else:
        code += '  DispatchTableGlobal &_driver = dispatcherGlobal.driver;\n'

      code += '  GetProcAddress(_driver.%s, "%s");\n' % (name, name)

      # Check that Regal didn't load itself, somehow

      code += '  RegalAssert(_driver.%s!=%s);\n'%(name,name)
      code += '  if (_driver.%s==%s)\n'%(name,name)
      code += '    _driver.%s = NULL;\n'%(name)

      # Call the driver dispatch, if possible

      code += '  if (_driver.%s)\n' % name

      if typeIsVoid(rType):
        code += '  {\n    '
      else:
        code += '    return '
      code += '_driver.%s(%s);\n' % ( name, callParams )
      if typeIsVoid(rType):
        code += '    return;\n'
        code += '  }\n'

      if function.needsContext:
        code += '  DispatchTableGL *_next = _driver.next();\n'
      else:
        code += '  DispatchTableGlobal *_next = _driver.next();\n'

      code += '  RegalAssert(_next);\n'
      code += '  '
      if not typeIsVoid(rType):
        code += 'return '
      code += '_next->call(&_next->%s)(%s);\n'%(name, callParams)
      code += '}\n\n'

    if api.name in cond:
      code += '#endif // %s\n' % cond[api.name]
    code += '\n'

  # Close pending if block.
  if categoryPrev:
    code += '\n'

  return code

def generateLoaderSource(apis, args):

  funcDefine = apiLoaderFuncDefineCode( apis, args )
  funcInit   = apiDispatchFuncInitCode( apis, args, 'loader' )
  globalFuncInit   = apiDispatchGlobalFuncInitCode( apis, args, 'loader' )

  # Output

  substitute = {}

  substitute['LICENSE']         = args.license
  substitute['AUTOGENERATED']   = args.generated
  substitute['COPYRIGHT']       = args.copyright
  substitute['DISPATCH_NAME']   = 'Loader'
  substitute['LOCAL_CODE']      = ''
  substitute['LOCAL_INCLUDE']   = '#include "RegalDispatcherGlobal.h"\n'
  substitute['API_DISPATCH_FUNC_DEFINE'] = funcDefine
  substitute['API_DISPATCH_FUNC_INIT'] = funcInit
  substitute['API_DISPATCH_GLOBAL_FUNC_INIT'] = globalFuncInit
  substitute['IFDEF'] = '#if REGAL_DRIVER\n\n'
  substitute['ENDIF'] = '#endif\n'

  outputCode( '%s/RegalDispatchLoader.cpp' % args.srcdir, dispatchSourceTemplate.substitute(substitute))
